
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027480  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004390  08027650  08027650  00037650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000041f6  0802b9e0  0802b9e0  0003b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802fbd8  0802fbd8  0003fbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000234  080630d0  080630d0  000730d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08063304  08063304  00080104  2**0
                  CONTENTS
  7 .ARM          00000008  08063304  08063304  00073304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0806330c  0806330c  00080104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0806330c  0806330c  0007330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08063320  08063320  00073320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000104  20000000  08063328  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c938  20000104  0806342c  00080104  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ca3c  0806342c  0008ca3c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080104  2**0
                  CONTENTS, READONLY
 15 .comment      000000c2  00000000  00000000  00080134  2**0
                  CONTENTS, READONLY
 16 .debug_info   000598b6  00000000  00000000  000801f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000105c4  00000000  00000000  000d9aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004150  00000000  00000000  000ea070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003027  00000000  00000000  000ee1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a4a5  00000000  00000000  000f11e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00051760  00000000  00000000  0012b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001315ed  00000000  00000000  0017cdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0001197c  00000000  00000000  002ae3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003f  00000000  00000000  002bfd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08027638 	.word	0x08027638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	08027638 	.word	0x08027638

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <vApplicationGetIdleTaskMemory+0x30>)
 8000dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000120 	.word	0x20000120
 8000ddc:	20000178 	.word	0x20000178

08000de0 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b09e      	sub	sp, #120	; 0x78
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000de8:	4b89      	ldr	r3, [pc, #548]	; (8001010 <SecondTask+0x230>)
 8000dea:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000dee:	461d      	mov	r5, r3
 8000df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dfc:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000e00:	4b84      	ldr	r3, [pc, #528]	; (8001014 <SecondTask+0x234>)
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f00c f876 	bl	800cefc <xQueueGenericSend>
	osDelay(150);
 8000e10:	2096      	movs	r0, #150	; 0x96
 8000e12:	f00b fd81 	bl	800c918 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000e16:	4b80      	ldr	r3, [pc, #512]	; (8001018 <SecondTask+0x238>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8135 	beq.w	800108a <SecondTask+0x2aa>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000e20:	4b7e      	ldr	r3, [pc, #504]	; (800101c <SecondTask+0x23c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e28:	da03      	bge.n	8000e32 <SecondTask+0x52>
 8000e2a:	4b7c      	ldr	r3, [pc, #496]	; (800101c <SecondTask+0x23c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3364      	adds	r3, #100	; 0x64
 8000e30:	e000      	b.n	8000e34 <SecondTask+0x54>
 8000e32:	2300      	movs	r3, #0
 8000e34:	4a79      	ldr	r2, [pc, #484]	; (800101c <SecondTask+0x23c>)
 8000e36:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000e38:	4b79      	ldr	r3, [pc, #484]	; (8001020 <SecondTask+0x240>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2bf9      	cmp	r3, #249	; 0xf9
 8000e3e:	dc03      	bgt.n	8000e48 <SecondTask+0x68>
 8000e40:	4b77      	ldr	r3, [pc, #476]	; (8001020 <SecondTask+0x240>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3303      	adds	r3, #3
 8000e46:	e001      	b.n	8000e4c <SecondTask+0x6c>
 8000e48:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000e4c:	4a74      	ldr	r2, [pc, #464]	; (8001020 <SecondTask+0x240>)
 8000e4e:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000e50:	4b74      	ldr	r3, [pc, #464]	; (8001024 <SecondTask+0x244>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e58:	da03      	bge.n	8000e62 <SecondTask+0x82>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	; (8001024 <SecondTask+0x244>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3306      	adds	r3, #6
 8000e60:	e000      	b.n	8000e64 <SecondTask+0x84>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4a6f      	ldr	r2, [pc, #444]	; (8001024 <SecondTask+0x244>)
 8000e66:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000e68:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <SecondTask+0x248>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcad 	bl	80007cc <__aeabi_f2d>
 8000e72:	a35f      	add	r3, pc, #380	; (adr r3, 8000ff0 <SecondTask+0x210>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fd74 	bl	8000964 <__aeabi_dcmpge>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SecondTask+0xa6>
 8000e82:	4b6a      	ldr	r3, [pc, #424]	; (800102c <SecondTask+0x24c>)
 8000e84:	e010      	b.n	8000ea8 <SecondTask+0xc8>
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <SecondTask+0x248>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc9e 	bl	80007cc <__aeabi_f2d>
 8000e90:	a359      	add	r3, pc, #356	; (adr r3, 8000ff8 <SecondTask+0x218>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fb3b 	bl	8000510 <__adddf3>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fd9b 	bl	80009dc <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a5f      	ldr	r2, [pc, #380]	; (8001028 <SecondTask+0x248>)
 8000eaa:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000eac:	4b60      	ldr	r3, [pc, #384]	; (8001030 <SecondTask+0x250>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc8b 	bl	80007cc <__aeabi_f2d>
 8000eb6:	a34e      	add	r3, pc, #312	; (adr r3, 8000ff0 <SecondTask+0x210>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fd52 	bl	8000964 <__aeabi_dcmpge>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SecondTask+0xea>
 8000ec6:	4b5b      	ldr	r3, [pc, #364]	; (8001034 <SecondTask+0x254>)
 8000ec8:	e010      	b.n	8000eec <SecondTask+0x10c>
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <SecondTask+0x250>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc7c 	bl	80007cc <__aeabi_f2d>
 8000ed4:	a34a      	add	r3, pc, #296	; (adr r3, 8001000 <SecondTask+0x220>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb19 	bl	8000510 <__adddf3>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fd79 	bl	80009dc <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <SecondTask+0x250>)
 8000eee:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <SecondTask+0x258>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b9f      	cmp	r3, #159	; 0x9f
 8000ef6:	dc03      	bgt.n	8000f00 <SecondTask+0x120>
 8000ef8:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <SecondTask+0x258>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	e000      	b.n	8000f02 <SecondTask+0x122>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a4d      	ldr	r2, [pc, #308]	; (8001038 <SecondTask+0x258>)
 8000f04:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000f06:	4b4d      	ldr	r3, [pc, #308]	; (800103c <SecondTask+0x25c>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db01      	blt.n	8000f1e <SecondTask+0x13e>
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <SecondTask+0x260>)
 8000f1c:	e010      	b.n	8000f40 <SecondTask+0x160>
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <SecondTask+0x25c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc52 	bl	80007cc <__aeabi_f2d>
 8000f28:	a337      	add	r3, pc, #220	; (adr r3, 8001008 <SecondTask+0x228>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff faef 	bl	8000510 <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fd4f 	bl	80009dc <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a3e      	ldr	r2, [pc, #248]	; (800103c <SecondTask+0x25c>)
 8000f42:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <SecondTask+0x264>)
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001048 <SecondTask+0x268>
 8000f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	db02      	blt.n	8000f5e <SecondTask+0x17e>
 8000f58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f5c:	e006      	b.n	8000f6c <SecondTask+0x18c>
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <SecondTask+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3302      	adds	r3, #2
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <SecondTask+0x264>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
			iat = (iat >= 100) ? 1: iat + 2;
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <SecondTask+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b63      	cmp	r3, #99	; 0x63
 8000f78:	dc03      	bgt.n	8000f82 <SecondTask+0x1a2>
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <SecondTask+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	e000      	b.n	8000f84 <SecondTask+0x1a4>
 8000f82:	2301      	movs	r3, #1
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <SecondTask+0x26c>)
 8000f86:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <SecondTask+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000f90:	da03      	bge.n	8000f9a <SecondTask+0x1ba>
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <SecondTask+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	330c      	adds	r3, #12
 8000f98:	e001      	b.n	8000f9e <SecondTask+0x1be>
 8000f9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <SecondTask+0x270>)
 8000fa0:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <SecondTask+0x270>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000faa:	da03      	bge.n	8000fb4 <SecondTask+0x1d4>
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <SecondTask+0x274>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	e001      	b.n	8000fb8 <SecondTask+0x1d8>
 8000fb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <SecondTask+0x274>)
 8000fba:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <SecondTask+0x278>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b63      	cmp	r3, #99	; 0x63
 8000fc2:	dc03      	bgt.n	8000fcc <SecondTask+0x1ec>
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <SecondTask+0x278>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	e000      	b.n	8000fce <SecondTask+0x1ee>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <SecondTask+0x278>)
 8000fd0:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <SecondTask+0x27c>)
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	db3e      	blt.n	8001064 <SecondTask+0x284>
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <SecondTask+0x280>)
 8000fe8:	e04d      	b.n	8001086 <SecondTask+0x2a6>
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	66666666 	.word	0x66666666
 8000ff4:	3ff66666 	.word	0x3ff66666
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fa99999 	.word	0x3fa99999
 8001000:	eb851eb8 	.word	0xeb851eb8
 8001004:	3faeb851 	.word	0x3faeb851
 8001008:	9999999a 	.word	0x9999999a
 800100c:	3fb99999 	.word	0x3fb99999
 8001010:	08027650 	.word	0x08027650
 8001014:	20008ed4 	.word	0x20008ed4
 8001018:	080280e0 	.word	0x080280e0
 800101c:	20000adc 	.word	0x20000adc
 8001020:	20000ae4 	.word	0x20000ae4
 8001024:	20000004 	.word	0x20000004
 8001028:	20000aec 	.word	0x20000aec
 800102c:	3f19999a 	.word	0x3f19999a
 8001030:	20000008 	.word	0x20000008
 8001034:	3f266666 	.word	0x3f266666
 8001038:	20000af8 	.word	0x20000af8
 800103c:	20000b00 	.word	0x20000b00
 8001040:	3dcccccd 	.word	0x3dcccccd
 8001044:	20000b08 	.word	0x20000b08
 8001048:	42c80000 	.word	0x42c80000
 800104c:	20000b0c 	.word	0x20000b0c
 8001050:	20000b10 	.word	0x20000b10
 8001054:	20000b14 	.word	0x20000b14
 8001058:	20000b18 	.word	0x20000b18
 800105c:	20000b1c 	.word	0x20000b1c
 8001060:	41200000 	.word	0x41200000
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <SecondTask+0x348>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fbaf 	bl	80007cc <__aeabi_f2d>
 800106e:	a32c      	add	r3, pc, #176	; (adr r3, 8001120 <SecondTask+0x340>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fa4c 	bl	8000510 <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fcac 	bl	80009dc <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4a28      	ldr	r2, [pc, #160]	; (8001128 <SecondTask+0x348>)
 8001088:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, max_rpm, clt, max_clt, speed, max_speed, lambda, oil_tmp, max_oil_tmp, oil_press, fuel_tmp, fuel_press, min_fuel_press, iat, tps, batt_v, bat_indicator, oil_indicator, mil_indicator};
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <SecondTask+0x34c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SecondTask+0x350>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <SecondTask+0x354>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SecondTask+0x358>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <SecondTask+0x35c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <SecondTask+0x360>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <SecondTask+0x364>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SecondTask+0x368>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <SecondTask+0x36c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SecondTask+0x370>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <SecondTask+0x374>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SecondTask+0x378>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <SecondTask+0x37c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <SecondTask+0x380>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	643b      	str	r3, [r7, #64]	; 0x40
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <SecondTask+0x384>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <SecondTask+0x348>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <SecondTask+0x388>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <SecondTask+0x38c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <SecondTask+0x390>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	    xQueueSend(messageQ, &dispVals,0);
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <SecondTask+0x394>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f107 010c 	add.w	r1, r7, #12
 800110a:	2300      	movs	r3, #0
 800110c:	2200      	movs	r2, #0
 800110e:	f00b fef5 	bl	800cefc <xQueueGenericSend>
		osDelay(50);
 8001112:	2032      	movs	r0, #50	; 0x32
 8001114:	f00b fc00 	bl	800c918 <osDelay>
	{
 8001118:	e67d      	b.n	8000e16 <SecondTask+0x36>
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	33333333 	.word	0x33333333
 8001124:	3fe33333 	.word	0x3fe33333
 8001128:	20000b1c 	.word	0x20000b1c
 800112c:	20000adc 	.word	0x20000adc
 8001130:	20000ae0 	.word	0x20000ae0
 8001134:	20000ae4 	.word	0x20000ae4
 8001138:	20000ae8 	.word	0x20000ae8
 800113c:	20000af0 	.word	0x20000af0
 8001140:	20000af4 	.word	0x20000af4
 8001144:	20000aec 	.word	0x20000aec
 8001148:	20000af8 	.word	0x20000af8
 800114c:	20000afc 	.word	0x20000afc
 8001150:	20000b00 	.word	0x20000b00
 8001154:	20000b04 	.word	0x20000b04
 8001158:	20000b08 	.word	0x20000b08
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000b0c 	.word	0x20000b0c
 8001164:	20000b18 	.word	0x20000b18
 8001168:	20000010 	.word	0x20000010
 800116c:	20000011 	.word	0x20000011
 8001170:	20000012 	.word	0x20000012
 8001174:	20008ed0 	.word	0x20008ed0

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f002 fe24 	bl	8003dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f85f 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f001 faf7 	bl	8002778 <MX_GPIO_Init>
  MX_ADC3_Init();
 800118a:	f000 f917 	bl	80013bc <MX_ADC3_Init>
  MX_CRC_Init();
 800118e:	f000 fc2f 	bl	80019f0 <MX_CRC_Init>
  MX_DCMI_Init();
 8001192:	f000 fc4f 	bl	8001a34 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001196:	f000 fc81 	bl	8001a9c <MX_DMA2D_Init>
  MX_FMC_Init();
 800119a:	f001 fa41 	bl	8002620 <MX_FMC_Init>
  MX_LTDC_Init();
 800119e:	f000 fcaf 	bl	8001b00 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80011a2:	f000 fd2f 	bl	8001c04 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80011a6:	f000 fd59 	bl	8001c5c <MX_RTC_Init>
  MX_SAI2_Init();
 80011aa:	f000 fdff 	bl	8001dac <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80011ae:	f000 fea5 	bl	8001efc <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80011b2:	f000 fec3 	bl	8001f3c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80011b6:	f000 fef1 	bl	8001f9c <MX_SPI2_Init>
  MX_TIM1_Init();
 80011ba:	f000 ff2d 	bl	8002018 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011be:	f000 ffd7 	bl	8002170 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011c2:	f001 f84b 	bl	800225c <MX_TIM3_Init>
  MX_TIM5_Init();
 80011c6:	f001 f8bf 	bl	8002348 <MX_TIM5_Init>
  MX_TIM8_Init();
 80011ca:	f001 f933 	bl	8002434 <MX_TIM8_Init>
  MX_TIM12_Init();
 80011ce:	f001 f983 	bl	80024d8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80011d2:	f001 f9c5 	bl	8002560 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80011d6:	f001 f9f3 	bl	80025c0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80011da:	f00b f859 	bl	800c290 <MX_FATFS_Init>
  MX_CAN1_Init();
 80011de:	f000 f93f 	bl	8001460 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80011e2:	f00e f909 	bl	800f3f8 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <main+0xbc>)
 80011e8:	f107 041c 	add.w	r4, r7, #28
 80011ec:	461d      	mov	r5, r3
 80011ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00b fb3d 	bl	800c880 <osThreadCreate>
 8001206:	4603      	mov	r3, r0
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <main+0xc0>)
 800120a:	6013      	str	r3, [r2, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <main+0xc4>)
 800120e:	463c      	mov	r4, r7
 8001210:	461d      	mov	r5, r3
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 800121e:	463b      	mov	r3, r7
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f00b fb2c 	bl	800c880 <osThreadCreate>
 8001228:	4603      	mov	r3, r0
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <main+0xc8>)
 800122c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800122e:	f00b fb04 	bl	800c83a <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001232:	e7fe      	b.n	8001232 <main+0xba>
 8001234:	08027684 	.word	0x08027684
 8001238:	20000ac4 	.word	0x20000ac4
 800123c:	080276a8 	.word	0x080276a8
 8001240:	20000ac8 	.word	0x20000ac8

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b4      	sub	sp, #208	; 0xd0
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800124e:	2230      	movs	r2, #48	; 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f025 fbcd 	bl	80269f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	2284      	movs	r2, #132	; 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f025 fbbe 	bl	80269f2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001276:	f005 fa89 	bl	800678c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <SystemClock_Config+0x16c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <SystemClock_Config+0x16c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <SystemClock_Config+0x16c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001292:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <SystemClock_Config+0x170>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <SystemClock_Config+0x170>)
 8001298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <SystemClock_Config+0x170>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012aa:	2309      	movs	r3, #9
 80012ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012cc:	2319      	movs	r3, #25
 80012ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80012d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012e0:	2309      	movs	r3, #9
 80012e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fb70 	bl	80069d0 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012f6:	f001 fc73 	bl	8002be0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012fa:	f005 fa57 	bl	80067ac <HAL_PWREx_EnableOverDrive>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001304:	f001 fc6c 	bl	8002be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800131e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800132a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800132e:	2106      	movs	r1, #6
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fdf1 	bl	8006f18 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800133c:	f001 fc50 	bl	8002be0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <SystemClock_Config+0x174>)
 8001342:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001354:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001358:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800135a:	2305      	movs	r3, #5
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800135e:	2302      	movs	r3, #2
 8001360:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001362:	2303      	movs	r3, #3
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800136e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800137a:	2300      	movs	r3, #0
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800137e:	2300      	movs	r3, #0
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001382:	2300      	movs	r3, #0
 8001384:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800138a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4618      	mov	r0, r3
 800139a:	f005 ffd5 	bl	8007348 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80013a4:	f001 fc1c 	bl	8002be0 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	37d0      	adds	r7, #208	; 0xd0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000
 80013b8:	01b00868 	.word	0x01b00868

080013bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC3_Init+0x98>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <MX_ADC3_Init+0x9c>)
 80013d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_ADC3_Init+0x98>)
 80013d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC3_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_ADC3_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_ADC3_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_ADC3_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_ADC3_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_ADC3_Init+0x98>)
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <MX_ADC3_Init+0xa0>)
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC3_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_ADC3_Init+0x98>)
 800140a:	2201      	movs	r2, #1
 800140c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_ADC3_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_ADC3_Init+0x98>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC3_Init+0x98>)
 800141e:	f002 fd25 	bl	8003e6c <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001428:	f001 fbda 	bl	8002be0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800142c:	2304      	movs	r3, #4
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_ADC3_Init+0x98>)
 800143e:	f002 fd59 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001448:	f001 fbca 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000378 	.word	0x20000378
 8001458:	40012200 	.word	0x40012200
 800145c:	0f000001 	.word	0x0f000001

08001460 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_CAN1_Init+0xc8>)
 8001468:	4a30      	ldr	r2, [pc, #192]	; (800152c <MX_CAN1_Init+0xcc>)
 800146a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <MX_CAN1_Init+0xc8>)
 800146e:	2205      	movs	r2, #5
 8001470:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_CAN1_Init+0xc8>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_CAN1_Init+0xc8>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_CAN1_Init+0xc8>)
 8001480:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001484:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_CAN1_Init+0xc8>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_CAN1_Init+0xc8>)
 800148e:	2200      	movs	r2, #0
 8001490:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_CAN1_Init+0xc8>)
 8001494:	2200      	movs	r2, #0
 8001496:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_CAN1_Init+0xc8>)
 800149a:	2200      	movs	r2, #0
 800149c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_CAN1_Init+0xc8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_CAN1_Init+0xc8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_CAN1_Init+0xc8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014b0:	481d      	ldr	r0, [pc, #116]	; (8001528 <MX_CAN1_Init+0xc8>)
 80014b2:	f002 ff63 	bl	800437c <HAL_CAN_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014bc:	f001 fb90 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80014cc:	2300      	movs	r3, #0
 80014ce:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80014e4:	230e      	movs	r3, #14
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	480e      	ldr	r0, [pc, #56]	; (8001528 <MX_CAN1_Init+0xc8>)
 80014ee:	f003 f841 	bl	8004574 <HAL_CAN_ConfigFilter>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80014f8:	f001 fb72 	bl	8002be0 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <MX_CAN1_Init+0xc8>)
 80014fe:	f003 f919 	bl	8004734 <HAL_CAN_Start>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001508:	f001 fb6a 	bl	8002be0 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800150c:	2102      	movs	r1, #2
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_CAN1_Init+0xc8>)
 8001510:	f003 fa66 	bl	80049e0 <HAL_CAN_ActivateNotification>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800151a:	f001 fb61 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200003c0 	.word	0x200003c0
 800152c:	40006400 	.word	0x40006400

08001530 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001538:	4ba3      	ldr	r3, [pc, #652]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800153a:	4aa4      	ldr	r2, [pc, #656]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f003 f93c 	bl	80047bc <HAL_CAN_GetRxMessage>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800154a:	f001 fb49 	bl	8002be0 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x360) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800154e:	4b9f      	ldr	r3, [pc, #636]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8001556:	d13a      	bne.n	80015ce <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001558:	4b9c      	ldr	r3, [pc, #624]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d136      	bne.n	80015ce <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001560:	4b9a      	ldr	r3, [pc, #616]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b08      	cmp	r3, #8
 8001566:	d132      	bne.n	80015ce <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
  {
	 uint16_t rpm_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001568:	4b97      	ldr	r3, [pc, #604]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b95      	ldr	r3, [pc, #596]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21b      	sxth	r3, r3
 800157a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint16_t tps_in = (RxData[4] << 8) | (RxData[5] << 0);
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	84bb      	strh	r3, [r7, #36]	; 0x24

	 rpm = (int)rpm_in;
 8001590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001592:	4a8f      	ldr	r2, [pc, #572]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001594:	6013      	str	r3, [r2, #0]
	 if(rpm > max_rpm) {
 8001596:	4b8e      	ldr	r3, [pc, #568]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b8e      	ldr	r3, [pc, #568]	; (80017d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dd03      	ble.n	80015aa <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		 max_rpm = rpm;
 80015a2:	4b8b      	ldr	r3, [pc, #556]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a8b      	ldr	r2, [pc, #556]	; (80017d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80015a8:	6013      	str	r3, [r2, #0]
	 }
	 tps = (int)tps_in * 0.1;
 80015aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f8fb 	bl	80007a8 <__aeabi_i2d>
 80015b2:	a37f      	add	r3, pc, #508	; (adr r3, 80017b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7fe fe7a 	bl	80002b0 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff f9e2 	bl	800098c <__aeabi_d2iz>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a83      	ldr	r2, [pc, #524]	; (80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015cc:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x361) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015ce:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f240 3261 	movw	r2, #865	; 0x361
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d177      	bne.n	80016ca <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
 80015da:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d173      	bne.n	80016ca <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
 80015e2:	4b7a      	ldr	r3, [pc, #488]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d16f      	bne.n	80016ca <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
  {
	 uint16_t fuel_pres_in = (RxData[0] << 8) | (RxData[1] << 0);
 80015ea:	4b77      	ldr	r3, [pc, #476]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	847b      	strh	r3, [r7, #34]	; 0x22
	 uint16_t oil_pres_in = (RxData[2] << 8) | (RxData[3] << 0);
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	843b      	strh	r3, [r7, #32]

	 fuel_press = (((float)fuel_pres_in)*0.1f - 101.3)*0.01f;
 8001612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f7ff f8d0 	bl	80007cc <__aeabi_f2d>
 800162c:	a362      	add	r3, pc, #392	; (adr r3, 80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ff6b 	bl	800050c <__aeabi_dsub>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	a360      	add	r3, pc, #384	; (adr r3, 80017c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fe34 	bl	80002b0 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff f9c4 	bl	80009dc <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	4a61      	ldr	r2, [pc, #388]	; (80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001658:	6013      	str	r3, [r2, #0]
	 oil_press = (((float)oil_pres_in)*0.1f - 101.3)*0.01f;
 800165a:	8c3b      	ldrh	r3, [r7, #32]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001664:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166c:	ee17 0a90 	vmov	r0, s15
 8001670:	f7ff f8ac 	bl	80007cc <__aeabi_f2d>
 8001674:	a350      	add	r3, pc, #320	; (adr r3, 80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ff47 	bl	800050c <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	a34e      	add	r3, pc, #312	; (adr r3, 80017c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fe10 	bl	80002b0 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f9a0 	bl	80009dc <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80016a0:	6013      	str	r3, [r2, #0]

	 if(rpm > 700 && fuel_press < min_fuel_press){
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80016aa:	dd0e      	ble.n	80016ca <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	d503      	bpl.n	80016ca <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
		 min_fuel_press = fuel_press;
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a47      	ldr	r2, [pc, #284]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80016c8:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x368) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80016d2:	d11d      	bne.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d119      	bne.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d115      	bne.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
  {
	 uint16_t lambda_in = (RxData[0] << 8) | (RxData[1] << 0);
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
	 lambda = ((float)lambda_in)*0.001f;
 80016f8:	8bfb      	ldrh	r3, [r7, #30]
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001702:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800170c:	edc3 7a00 	vstr	s15, [r3]
   }

  if ((RxHeader.StdId == 0x370) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 8001718:	d12d      	bne.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d129      	bne.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b08      	cmp	r3, #8
 8001728:	d125      	bne.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
  {
	 uint16_t speed_in = (RxData[0] << 8) | (RxData[1] << 0);
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	83bb      	strh	r3, [r7, #28]

	 speed = (int)speed_in * 0.1;
 800173e:	8bbb      	ldrh	r3, [r7, #28]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f831 	bl	80007a8 <__aeabi_i2d>
 8001746:	a31a      	add	r3, pc, #104	; (adr r3, 80017b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe fdb0 	bl	80002b0 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f918 	bl	800098c <__aeabi_d2iz>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001760:	6013      	str	r3, [r2, #0]
	 if(speed > max_speed) {
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	dd03      	ble.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
		 max_speed = speed;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001774:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x372) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f240 3272 	movw	r2, #882	; 0x372
 800177e:	4293      	cmp	r3, r2
 8001780:	d147      	bne.n	8001812 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e2>
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d143      	bne.n	8001812 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e2>
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d13f      	bne.n	8001812 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e2>
  {
	 uint16_t batt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	837b      	strh	r3, [r7, #26]
	 float battery_voltage = ((float)batt_in)*0.1f;
 80017a6:	8b7b      	ldrh	r3, [r7, #26]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	e026      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>
 80017ae:	bf00      	nop
 80017b0:	9999999a 	.word	0x9999999a
 80017b4:	3fb99999 	.word	0x3fb99999
 80017b8:	33333333 	.word	0x33333333
 80017bc:	40595333 	.word	0x40595333
 80017c0:	40000000 	.word	0x40000000
 80017c4:	3f847ae1 	.word	0x3f847ae1
 80017c8:	20000404 	.word	0x20000404
 80017cc:	200003e8 	.word	0x200003e8
 80017d0:	20000adc 	.word	0x20000adc
 80017d4:	20000ae0 	.word	0x20000ae0
 80017d8:	20000b18 	.word	0x20000b18
 80017dc:	20000b08 	.word	0x20000b08
 80017e0:	20000b00 	.word	0x20000b00
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	3a83126f 	.word	0x3a83126f
 80017ec:	20000aec 	.word	0x20000aec
 80017f0:	20000af0 	.word	0x20000af0
 80017f4:	20000af4 	.word	0x20000af4
 80017f8:	3dcccccd 	.word	0x3dcccccd
 80017fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001800:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
 8001804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001808:	edc7 7a05 	vstr	s15, [r7, #20]
	 batt_v = battery_voltage;
 800180c:	4a6c      	ldr	r2, [pc, #432]	; (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x490>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x3E0) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001812:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 800181a:	f040 8096 	bne.w	800194a <HAL_CAN_RxFifo0MsgPendingCallback+0x41a>
 800181e:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8091 	bne.w	800194a <HAL_CAN_RxFifo0MsgPendingCallback+0x41a>
 8001828:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b08      	cmp	r3, #8
 800182e:	f040 808c 	bne.w	800194a <HAL_CAN_RxFifo0MsgPendingCallback+0x41a>
  {
	 uint16_t clt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b21a      	sxth	r2, r3
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b21b      	sxth	r3, r3
 8001844:	827b      	strh	r3, [r7, #18]
	 uint16_t iat_in = (RxData[2] << 8) | (RxData[3] << 0);
 8001846:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b21a      	sxth	r2, r3
 800184e:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21b      	sxth	r3, r3
 8001858:	823b      	strh	r3, [r7, #16]
	 uint16_t fuel_tmp_in = (RxData[4] << 8) | (RxData[5] << 0);
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	81fb      	strh	r3, [r7, #14]
	 uint16_t oil_tmp_in = (RxData[6] << 8) | (RxData[7] << 0);
 800186e:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001870:	799b      	ldrb	r3, [r3, #6]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001878:	79db      	ldrb	r3, [r3, #7]
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b21b      	sxth	r3, r3
 8001880:	81bb      	strh	r3, [r7, #12]

	 clt = ((int)clt_in - 2731) * 0.1;
 8001882:	8a7b      	ldrh	r3, [r7, #18]
 8001884:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe ff8d 	bl	80007a8 <__aeabi_i2d>
 800188e:	a34a      	add	r3, pc, #296	; (adr r3, 80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fd0c 	bl	80002b0 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f874 	bl	800098c <__aeabi_d2iz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a49      	ldr	r2, [pc, #292]	; (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>)
 80018a8:	6013      	str	r3, [r2, #0]
	 if(clt > max_clt){
 80018aa:	4b48      	ldr	r3, [pc, #288]	; (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dd03      	ble.n	80018be <HAL_CAN_RxFifo0MsgPendingCallback+0x38e>
		 max_clt = clt;
 80018b6:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>)
 80018bc:	6013      	str	r3, [r2, #0]
	 }

	 iat = ((int)iat_in - 2731) * 0.1;
 80018be:	8a3b      	ldrh	r3, [r7, #16]
 80018c0:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe ff6f 	bl	80007a8 <__aeabi_i2d>
 80018ca:	a33b      	add	r3, pc, #236	; (adr r3, 80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fcee 	bl	80002b0 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f856 	bl	800098c <__aeabi_d2iz>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 80018e4:	6013      	str	r3, [r2, #0]

	 fuel_tmp = ((int)fuel_tmp_in - 2731) * 0.1;
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe ff5b 	bl	80007a8 <__aeabi_i2d>
 80018f2:	a331      	add	r3, pc, #196	; (adr r3, 80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fcda 	bl	80002b0 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff f842 	bl	800098c <__aeabi_d2iz>
 8001908:	4603      	mov	r3, r0
 800190a:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 800190c:	6013      	str	r3, [r2, #0]

	 oil_tmp = ((int)oil_tmp_in - 2731) * 0.1;
 800190e:	89bb      	ldrh	r3, [r7, #12]
 8001910:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe ff47 	bl	80007a8 <__aeabi_i2d>
 800191a:	a327      	add	r3, pc, #156	; (adr r3, 80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fcc6 	bl	80002b0 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f82e 	bl	800098c <__aeabi_d2iz>
 8001930:	4603      	mov	r3, r0
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001934:	6013      	str	r3, [r2, #0]
	 if(oil_tmp > max_oil_tmp){
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	dd03      	ble.n	800194a <HAL_CAN_RxFifo0MsgPendingCallback+0x41a>
		 max_oil_tmp = oil_tmp;
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8001948:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x3E4) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8001952:	d12c      	bne.n	80019ae <HAL_CAN_RxFifo0MsgPendingCallback+0x47e>
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d128      	bne.n	80019ae <HAL_CAN_RxFifo0MsgPendingCallback+0x47e>
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d124      	bne.n	80019ae <HAL_CAN_RxFifo0MsgPendingCallback+0x47e>
  {
	 oil_indicator = (RxData[1] >> 0) & 1;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8001978:	701a      	strb	r2, [r3, #0]
	 mil_indicator = (RxData[7] >> 7) & 1;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	09db      	lsrs	r3, r3, #7
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 8001992:	701a      	strb	r2, [r3, #0]
	 bat_indicator = (RxData[7] >> 6) & 1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001996:	79db      	ldrb	r3, [r3, #7]
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80019ac:	701a      	strb	r2, [r3, #0]
  }
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999
 80019c0:	20000b1c 	.word	0x20000b1c
 80019c4:	200003e8 	.word	0x200003e8
 80019c8:	20000404 	.word	0x20000404
 80019cc:	20000ae4 	.word	0x20000ae4
 80019d0:	20000ae8 	.word	0x20000ae8
 80019d4:	20000b0c 	.word	0x20000b0c
 80019d8:	20000b04 	.word	0x20000b04
 80019dc:	20000af8 	.word	0x20000af8
 80019e0:	20000afc 	.word	0x20000afc
 80019e4:	20000011 	.word	0x20000011
 80019e8:	20000012 	.word	0x20000012
 80019ec:	20000010 	.word	0x20000010

080019f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <MX_CRC_Init+0x3c>)
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <MX_CRC_Init+0x40>)
 80019f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_CRC_Init+0x3c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_CRC_Init+0x3c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_CRC_Init+0x3c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_CRC_Init+0x3c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_CRC_Init+0x3c>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_CRC_Init+0x3c>)
 8001a1a:	f003 fb4b 	bl	80050b4 <HAL_CRC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a24:	f001 f8dc 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000040c 	.word	0x2000040c
 8001a30:	40023000 	.word	0x40023000

08001a34 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <MX_DCMI_Init+0x64>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_DCMI_Init+0x60>)
 8001a82:	f003 fc01 	bl	8005288 <HAL_DCMI_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001a8c:	f001 f8a8 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000430 	.word	0x20000430
 8001a98:	50050000 	.word	0x50050000

08001a9c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <MX_DMA2D_Init+0x60>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001ad2:	f003 fced 	bl	80054b0 <HAL_DMA2D_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001adc:	f001 f880 	bl	8002be0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_DMA2D_Init+0x5c>)
 8001ae4:	f003 ffae 	bl	8005a44 <HAL_DMA2D_ConfigLayer>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001aee:	f001 f877 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000480 	.word	0x20000480
 8001afc:	4002b000 	.word	0x4002b000

08001b00 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2234      	movs	r2, #52	; 0x34
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f024 ff70 	bl	80269f2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <MX_LTDC_Init+0x100>)
 8001b16:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b32:	2228      	movs	r2, #40	; 0x28
 8001b34:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b38:	2209      	movs	r2, #9
 8001b3a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b3e:	2235      	movs	r2, #53	; 0x35
 8001b40:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b44:	220b      	movs	r2, #11
 8001b46:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b4a:	f240 2215 	movw	r2, #533	; 0x215
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b52:	f240 121b 	movw	r2, #283	; 0x11b
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b5a:	f240 2235 	movw	r2, #565	; 0x235
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b62:	f240 121d 	movw	r2, #285	; 0x11d
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b80:	481e      	ldr	r0, [pc, #120]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001b82:	f004 fa6b 	bl	800605c <HAL_LTDC_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b8c:	f001 f828 	bl	8002be0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001b94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b98:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001b9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ba2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001ba8:	23ff      	movs	r3, #255	; 0xff
 8001baa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001bba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001bc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001bc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_LTDC_Init+0xfc>)
 8001be6:	f004 fbc1 	bl	800636c <HAL_LTDC_ConfigLayer>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001bf0:	f000 fff6 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	; 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200004c0 	.word	0x200004c0
 8001c00:	40016800 	.word	0x40016800

08001c04 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <MX_QUADSPI_Init+0x54>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c10:	22ff      	movs	r2, #255	; 0xff
 8001c12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_QUADSPI_Init+0x50>)
 8001c40:	f004 fe04 	bl	800684c <HAL_QSPI_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001c4a:	f000 ffc9 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000568 	.word	0x20000568
 8001c58:	a0001000 	.word	0xa0001000

08001c5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b092      	sub	sp, #72	; 0x48
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001c78:	463b      	mov	r3, r7
 8001c7a:	222c      	movs	r2, #44	; 0x2c
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f024 feb7 	bl	80269f2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001c84:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <MX_RTC_Init+0x148>)
 8001c86:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <MX_RTC_Init+0x14c>)
 8001c88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <MX_RTC_Init+0x148>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c90:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <MX_RTC_Init+0x148>)
 8001c92:	227f      	movs	r2, #127	; 0x7f
 8001c94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <MX_RTC_Init+0x148>)
 8001c98:	22ff      	movs	r2, #255	; 0xff
 8001c9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <MX_RTC_Init+0x148>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca2:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <MX_RTC_Init+0x148>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <MX_RTC_Init+0x148>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cae:	483d      	ldr	r0, [pc, #244]	; (8001da4 <MX_RTC_Init+0x148>)
 8001cb0:	f006 f87a 	bl	8007da8 <HAL_RTC_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001cba:	f000 ff91 	bl	8002be0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4830      	ldr	r0, [pc, #192]	; (8001da4 <MX_RTC_Init+0x148>)
 8001ce2:	f006 f8dd 	bl	8007ea0 <HAL_RTC_SetTime>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001cec:	f000 ff78 	bl	8002be0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4824      	ldr	r0, [pc, #144]	; (8001da4 <MX_RTC_Init+0x148>)
 8001d12:	f006 f983 	bl	800801c <HAL_RTC_SetDate>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001d1c:	f000 ff60 	bl	8002be0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	2201      	movs	r2, #1
 8001d54:	4619      	mov	r1, r3
 8001d56:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_RTC_Init+0x148>)
 8001d58:	f006 fa08 	bl	800816c <HAL_RTC_SetAlarm>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001d62:	f000 ff3d 	bl	8002be0 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d72:	463b      	mov	r3, r7
 8001d74:	2201      	movs	r2, #1
 8001d76:	4619      	mov	r1, r3
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <MX_RTC_Init+0x148>)
 8001d7a:	f006 f9f7 	bl	800816c <HAL_RTC_SetAlarm>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001d84:	f000 ff2c 	bl	8002be0 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_RTC_Init+0x148>)
 8001d8e:	f006 fb77 	bl	8008480 <HAL_RTCEx_SetTimeStamp>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001d98:	f000 ff22 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3748      	adds	r7, #72	; 0x48
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200005b4 	.word	0x200005b4
 8001da8:	40002800 	.word	0x40002800

08001dac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001db2:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <MX_SAI2_Init+0x140>)
 8001db4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001dbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dc4:	2240      	movs	r2, #64	; 0x40
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001dec:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dee:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <MX_SAI2_Init+0x144>)
 8001df0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e40:	4829      	ldr	r0, [pc, #164]	; (8001ee8 <MX_SAI2_Init+0x13c>)
 8001e42:	f006 fb73 	bl	800852c <HAL_SAI_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001e4c:	f000 fec8 	bl	8002be0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <MX_SAI2_Init+0x14c>)
 8001e54:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e5e:	2203      	movs	r2, #3
 8001e60:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <MX_SAI2_Init+0x148>)
 8001ed6:	f006 fb29 	bl	800852c <HAL_SAI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001ee0:	f000 fe7e 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200005d4 	.word	0x200005d4
 8001eec:	40015c04 	.word	0x40015c04
 8001ef0:	0002ee00 	.word	0x0002ee00
 8001ef4:	20000658 	.word	0x20000658
 8001ef8:	40015c24 	.word	0x40015c24

08001efc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <MX_SDMMC1_SD_Init+0x3c>)
 8001f04:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <MX_SDMMC1_SD_Init+0x38>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200006dc 	.word	0x200006dc
 8001f38:	40012c00 	.word	0x40012c00

08001f3c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f46:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_SPDIFRX_Init+0x5c>)
 8001f86:	f007 fd69 	bl	8009a5c <HAL_SPDIFRX_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001f90:	f000 fe26 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000760 	.word	0x20000760

08001f9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <MX_SPI2_Init+0x78>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fb6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_SPI2_Init+0x74>)
 8001fea:	2207      	movs	r2, #7
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_SPI2_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_SPI2_Init+0x74>)
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_SPI2_Init+0x74>)
 8001ffc:	f007 fd8a 	bl	8009b14 <HAL_SPI_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002006:	f000 fdeb 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200007ac 	.word	0x200007ac
 8002014:	40003800 	.word	0x40003800

08002018 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b09a      	sub	sp, #104	; 0x68
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	222c      	movs	r2, #44	; 0x2c
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f024 fccd 	bl	80269f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <MX_TIM1_Init+0x150>)
 800205a:	4a44      	ldr	r2, [pc, #272]	; (800216c <MX_TIM1_Init+0x154>)
 800205c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <MX_TIM1_Init+0x150>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b40      	ldr	r3, [pc, #256]	; (8002168 <MX_TIM1_Init+0x150>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <MX_TIM1_Init+0x150>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <MX_TIM1_Init+0x150>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002076:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <MX_TIM1_Init+0x150>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <MX_TIM1_Init+0x150>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002082:	4839      	ldr	r0, [pc, #228]	; (8002168 <MX_TIM1_Init+0x150>)
 8002084:	f007 fdd8 	bl	8009c38 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800208e:	f000 fda7 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002096:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002098:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800209c:	4619      	mov	r1, r3
 800209e:	4832      	ldr	r0, [pc, #200]	; (8002168 <MX_TIM1_Init+0x150>)
 80020a0:	f008 f882 	bl	800a1a8 <HAL_TIM_ConfigClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020aa:	f000 fd99 	bl	8002be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020ae:	482e      	ldr	r0, [pc, #184]	; (8002168 <MX_TIM1_Init+0x150>)
 80020b0:	f007 fe18 	bl	8009ce4 <HAL_TIM_PWM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020ba:	f000 fd91 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ce:	4619      	mov	r1, r3
 80020d0:	4825      	ldr	r0, [pc, #148]	; (8002168 <MX_TIM1_Init+0x150>)
 80020d2:	f008 fcef 	bl	800aab4 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80020dc:	f000 fd80 	bl	8002be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e0:	2360      	movs	r3, #96	; 0x60
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e8:	2300      	movs	r3, #0
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	4818      	ldr	r0, [pc, #96]	; (8002168 <MX_TIM1_Init+0x150>)
 8002106:	f007 ff37 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002110:	f000 fd66 	bl	8002be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM1_Init+0x150>)
 800214a:	f008 fd41 	bl	800abd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002154:	f000 fd44 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM1_Init+0x150>)
 800215a:	f001 fa3b 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 800215e:	bf00      	nop
 8002160:	3768      	adds	r7, #104	; 0x68
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000810 	.word	0x20000810
 800216c:	40010000 	.word	0x40010000

08002170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002190:	463b      	mov	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
 800219e:	615a      	str	r2, [r3, #20]
 80021a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c8:	4823      	ldr	r0, [pc, #140]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021ca:	f007 fd35 	bl	8009c38 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021d4:	f000 fd04 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	4619      	mov	r1, r3
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021e6:	f007 ffdf 	bl	800a1a8 <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021f0:	f000 fcf6 	bl	8002be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021f4:	4818      	ldr	r0, [pc, #96]	; (8002258 <MX_TIM2_Init+0xe8>)
 80021f6:	f007 fd75 	bl	8009ce4 <HAL_TIM_PWM_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002200:	f000 fcee 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <MX_TIM2_Init+0xe8>)
 8002214:	f008 fc4e 	bl	800aab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800221e:	f000 fcdf 	bl	8002be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002222:	2360      	movs	r3, #96	; 0x60
 8002224:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002232:	463b      	mov	r3, r7
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	4807      	ldr	r0, [pc, #28]	; (8002258 <MX_TIM2_Init+0xe8>)
 800223a:	f007 fe9d 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002244:	f000 fccc 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <MX_TIM2_Init+0xe8>)
 800224a:	f001 f9c3 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 800224e:	bf00      	nop
 8002250:	3738      	adds	r7, #56	; 0x38
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000850 	.word	0x20000850

0800225c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	615a      	str	r2, [r3, #20]
 800228c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <MX_TIM3_Init+0xe4>)
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <MX_TIM3_Init+0xe8>)
 8002292:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <MX_TIM3_Init+0xe4>)
 8002296:	2200      	movs	r2, #0
 8002298:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <MX_TIM3_Init+0xe4>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022b2:	4823      	ldr	r0, [pc, #140]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022b4:	f007 fcc0 	bl	8009c38 <HAL_TIM_Base_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022be:	f000 fc8f 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022cc:	4619      	mov	r1, r3
 80022ce:	481c      	ldr	r0, [pc, #112]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022d0:	f007 ff6a 	bl	800a1a8 <HAL_TIM_ConfigClockSource>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022da:	f000 fc81 	bl	8002be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022de:	4818      	ldr	r0, [pc, #96]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022e0:	f007 fd00 	bl	8009ce4 <HAL_TIM_PWM_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022ea:	f000 fc79 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	4810      	ldr	r0, [pc, #64]	; (8002340 <MX_TIM3_Init+0xe4>)
 80022fe:	f008 fbd9 	bl	800aab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002308:	f000 fc6a 	bl	8002be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230c:	2360      	movs	r3, #96	; 0x60
 800230e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231c:	463b      	mov	r3, r7
 800231e:	2200      	movs	r2, #0
 8002320:	4619      	mov	r1, r3
 8002322:	4807      	ldr	r0, [pc, #28]	; (8002340 <MX_TIM3_Init+0xe4>)
 8002324:	f007 fe28 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800232e:	f000 fc57 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <MX_TIM3_Init+0xe4>)
 8002334:	f001 f94e 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 8002338:	bf00      	nop
 800233a:	3738      	adds	r7, #56	; 0x38
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000890 	.word	0x20000890
 8002344:	40000400 	.word	0x40000400

08002348 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800237a:	4b2c      	ldr	r3, [pc, #176]	; (800242c <MX_TIM5_Init+0xe4>)
 800237c:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <MX_TIM5_Init+0xe8>)
 800237e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <MX_TIM5_Init+0xe4>)
 8002382:	2200      	movs	r2, #0
 8002384:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <MX_TIM5_Init+0xe4>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <MX_TIM5_Init+0xe4>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <MX_TIM5_Init+0xe4>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <MX_TIM5_Init+0xe4>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800239e:	4823      	ldr	r0, [pc, #140]	; (800242c <MX_TIM5_Init+0xe4>)
 80023a0:	f007 fc4a 	bl	8009c38 <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80023aa:	f000 fc19 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b8:	4619      	mov	r1, r3
 80023ba:	481c      	ldr	r0, [pc, #112]	; (800242c <MX_TIM5_Init+0xe4>)
 80023bc:	f007 fef4 	bl	800a1a8 <HAL_TIM_ConfigClockSource>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80023c6:	f000 fc0b 	bl	8002be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023ca:	4818      	ldr	r0, [pc, #96]	; (800242c <MX_TIM5_Init+0xe4>)
 80023cc:	f007 fc8a 	bl	8009ce4 <HAL_TIM_PWM_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80023d6:	f000 fc03 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	4810      	ldr	r0, [pc, #64]	; (800242c <MX_TIM5_Init+0xe4>)
 80023ea:	f008 fb63 	bl	800aab4 <HAL_TIMEx_MasterConfigSynchronization>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80023f4:	f000 fbf4 	bl	8002be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f8:	2360      	movs	r3, #96	; 0x60
 80023fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002408:	463b      	mov	r3, r7
 800240a:	220c      	movs	r2, #12
 800240c:	4619      	mov	r1, r3
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <MX_TIM5_Init+0xe4>)
 8002410:	f007 fdb2 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800241a:	f000 fbe1 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <MX_TIM5_Init+0xe4>)
 8002420:	f001 f8d8 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 8002424:	bf00      	nop
 8002426:	3738      	adds	r7, #56	; 0x38
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200008d0 	.word	0x200008d0
 8002430:	40000c00 	.word	0x40000c00

08002434 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_TIM8_Init+0x9c>)
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <MX_TIM8_Init+0xa0>)
 8002456:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_TIM8_Init+0x9c>)
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_TIM8_Init+0x9c>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_TIM8_Init+0x9c>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_TIM8_Init+0x9c>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <MX_TIM8_Init+0x9c>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_TIM8_Init+0x9c>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800247c:	4814      	ldr	r0, [pc, #80]	; (80024d0 <MX_TIM8_Init+0x9c>)
 800247e:	f007 fbdb 	bl	8009c38 <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002488:	f000 fbaa 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	4619      	mov	r1, r3
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_TIM8_Init+0x9c>)
 800249a:	f007 fe85 	bl	800a1a8 <HAL_TIM_ConfigClockSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80024a4:	f000 fb9c 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_TIM8_Init+0x9c>)
 80024ba:	f008 fafb 	bl	800aab4 <HAL_TIMEx_MasterConfigSynchronization>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80024c4:	f000 fb8c 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000910 	.word	0x20000910
 80024d4:	40010400 	.word	0x40010400

080024d8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
 80024ec:	615a      	str	r2, [r3, #20]
 80024ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <MX_TIM12_Init+0x80>)
 80024f2:	4a1a      	ldr	r2, [pc, #104]	; (800255c <MX_TIM12_Init+0x84>)
 80024f4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <MX_TIM12_Init+0x80>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <MX_TIM12_Init+0x80>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <MX_TIM12_Init+0x80>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <MX_TIM12_Init+0x80>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_TIM12_Init+0x80>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002514:	4810      	ldr	r0, [pc, #64]	; (8002558 <MX_TIM12_Init+0x80>)
 8002516:	f007 fbe5 	bl	8009ce4 <HAL_TIM_PWM_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002520:	f000 fb5e 	bl	8002be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002524:	2360      	movs	r3, #96	; 0x60
 8002526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <MX_TIM12_Init+0x80>)
 800253c:	f007 fd1c 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002546:	f000 fb4b 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <MX_TIM12_Init+0x80>)
 800254c:	f001 f842 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000950 	.word	0x20000950
 800255c:	40001800 	.word	0x40001800

08002560 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <MX_USART1_UART_Init+0x5c>)
 8002568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800256c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 80025a4:	f008 fbb0 	bl	800ad08 <HAL_UART_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025ae:	f000 fb17 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000990 	.word	0x20000990
 80025bc:	40011000 	.word	0x40011000

080025c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025c6:	4a15      	ldr	r2, [pc, #84]	; (800261c <MX_USART6_UART_Init+0x5c>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_USART6_UART_Init+0x58>)
 8002604:	f008 fb80 	bl	800ad08 <HAL_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800260e:	f000 fae7 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000a10 	.word	0x20000a10
 800261c:	40011400 	.word	0x40011400

08002620 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <MX_FMC_Init+0x14c>)
 800263a:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <MX_FMC_Init+0x150>)
 800263c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800263e:	4b4b      	ldr	r3, [pc, #300]	; (800276c <MX_FMC_Init+0x14c>)
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002644:	4b49      	ldr	r3, [pc, #292]	; (800276c <MX_FMC_Init+0x14c>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <MX_FMC_Init+0x14c>)
 800264c:	2204      	movs	r2, #4
 800264e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <MX_FMC_Init+0x14c>)
 8002652:	2210      	movs	r2, #16
 8002654:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002656:	4b45      	ldr	r3, [pc, #276]	; (800276c <MX_FMC_Init+0x14c>)
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <MX_FMC_Init+0x14c>)
 800265e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002662:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <MX_FMC_Init+0x14c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <MX_FMC_Init+0x14c>)
 800266c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002670:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <MX_FMC_Init+0x14c>)
 8002674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <MX_FMC_Init+0x14c>)
 800267c:	2200      	movs	r2, #0
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002680:	2302      	movs	r3, #2
 8002682:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002684:	2307      	movs	r3, #7
 8002686:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002688:	2304      	movs	r3, #4
 800268a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800268c:	2307      	movs	r3, #7
 800268e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002690:	2303      	movs	r3, #3
 8002692:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002698:	2302      	movs	r3, #2
 800269a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	4619      	mov	r1, r3
 80026a0:	4832      	ldr	r0, [pc, #200]	; (800276c <MX_FMC_Init+0x14c>)
 80026a2:	f007 f95b 	bl	800995c <HAL_SDRAM_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80026ac:	f000 fa98 	bl	8002be0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <MX_FMC_Init+0x154>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <MX_FMC_Init+0x154>)
 80026bc:	2210      	movs	r2, #16
 80026be:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <MX_FMC_Init+0x154>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <MX_FMC_Init+0x154>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80026cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d0:	4928      	ldr	r1, [pc, #160]	; (8002774 <MX_FMC_Init+0x154>)
 80026d2:	4826      	ldr	r0, [pc, #152]	; (800276c <MX_FMC_Init+0x14c>)
 80026d4:	f007 f976 	bl	80099c4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80026d8:	2001      	movs	r0, #1
 80026da:	f001 fba3 	bl	8003e24 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <MX_FMC_Init+0x154>)
 80026e0:	2202      	movs	r2, #2
 80026e2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <MX_FMC_Init+0x154>)
 80026e6:	2210      	movs	r2, #16
 80026e8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <MX_FMC_Init+0x154>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <MX_FMC_Init+0x154>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80026f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fa:	491e      	ldr	r1, [pc, #120]	; (8002774 <MX_FMC_Init+0x154>)
 80026fc:	481b      	ldr	r0, [pc, #108]	; (800276c <MX_FMC_Init+0x14c>)
 80026fe:	f007 f961 	bl	80099c4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <MX_FMC_Init+0x154>)
 8002704:	2203      	movs	r2, #3
 8002706:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <MX_FMC_Init+0x154>)
 800270a:	2210      	movs	r2, #16
 800270c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <MX_FMC_Init+0x154>)
 8002710:	2208      	movs	r2, #8
 8002712:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <MX_FMC_Init+0x154>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800271a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271e:	4915      	ldr	r1, [pc, #84]	; (8002774 <MX_FMC_Init+0x154>)
 8002720:	4812      	ldr	r0, [pc, #72]	; (800276c <MX_FMC_Init+0x14c>)
 8002722:	f007 f94f 	bl	80099c4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8002726:	f44f 730c 	mov.w	r3, #560	; 0x230
 800272a:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_FMC_Init+0x154>)
 800272e:	2204      	movs	r2, #4
 8002730:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_FMC_Init+0x154>)
 8002734:	2210      	movs	r2, #16
 8002736:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_FMC_Init+0x154>)
 800273a:	2201      	movs	r2, #1
 800273c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <MX_FMC_Init+0x154>)
 8002742:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002748:	490a      	ldr	r1, [pc, #40]	; (8002774 <MX_FMC_Init+0x154>)
 800274a:	4808      	ldr	r0, [pc, #32]	; (800276c <MX_FMC_Init+0x14c>)
 800274c:	f007 f93a 	bl	80099c4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002750:	f240 712b 	movw	r1, #1835	; 0x72b
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_FMC_Init+0x14c>)
 8002756:	f007 f960 	bl	8009a1a <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800275a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800275e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002762:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002764:	bf00      	nop
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000a90 	.word	0x20000a90
 8002770:	a0000140 	.word	0xa0000140
 8002774:	20000acc 	.word	0x20000acc

08002778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b090      	sub	sp, #64	; 0x40
 800277c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800278e:	4baf      	ldr	r3, [pc, #700]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4aae      	ldr	r2, [pc, #696]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002794:	f043 0310 	orr.w	r3, r3, #16
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4bac      	ldr	r3, [pc, #688]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a6:	4ba9      	ldr	r3, [pc, #676]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4aa8      	ldr	r2, [pc, #672]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4ba6      	ldr	r3, [pc, #664]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4ba3      	ldr	r3, [pc, #652]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4aa2      	ldr	r2, [pc, #648]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4ba0      	ldr	r3, [pc, #640]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d6:	4b9d      	ldr	r3, [pc, #628]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a9c      	ldr	r2, [pc, #624]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b9a      	ldr	r3, [pc, #616]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	4b97      	ldr	r3, [pc, #604]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a96      	ldr	r2, [pc, #600]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b94      	ldr	r3, [pc, #592]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a90      	ldr	r2, [pc, #576]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800281e:	4b8b      	ldr	r3, [pc, #556]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a8a      	ldr	r2, [pc, #552]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002824:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002836:	4b85      	ldr	r3, [pc, #532]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a84      	ldr	r2, [pc, #528]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b82      	ldr	r3, [pc, #520]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800284e:	4b7f      	ldr	r3, [pc, #508]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a7e      	ldr	r2, [pc, #504]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002866:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a78      	ldr	r2, [pc, #480]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800286c:	f043 0320 	orr.w	r3, r3, #32
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a72      	ldr	r2, [pc, #456]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <MX_GPIO_Init+0x2d4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	2120      	movs	r1, #32
 800289a:	486d      	ldr	r0, [pc, #436]	; (8002a50 <MX_GPIO_Init+0x2d8>)
 800289c:	f003 fbc4 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	210c      	movs	r1, #12
 80028a4:	486b      	ldr	r0, [pc, #428]	; (8002a54 <MX_GPIO_Init+0x2dc>)
 80028a6:	f003 fbbf 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2108      	movs	r1, #8
 80028ae:	486a      	ldr	r0, [pc, #424]	; (8002a58 <MX_GPIO_Init+0x2e0>)
 80028b0:	f003 fbba 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ba:	4866      	ldr	r0, [pc, #408]	; (8002a54 <MX_GPIO_Init+0x2dc>)
 80028bc:	f003 fbb4 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c6:	4865      	ldr	r0, [pc, #404]	; (8002a5c <MX_GPIO_Init+0x2e4>)
 80028c8:	f003 fbae 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	21c8      	movs	r1, #200	; 0xc8
 80028d0:	4863      	ldr	r0, [pc, #396]	; (8002a60 <MX_GPIO_Init+0x2e8>)
 80028d2:	f003 fba9 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80028d6:	2308      	movs	r3, #8
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028da:	2300      	movs	r3, #0
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e6:	4619      	mov	r1, r3
 80028e8:	485e      	ldr	r0, [pc, #376]	; (8002a64 <MX_GPIO_Init+0x2ec>)
 80028ea:	f003 f9d9 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80028ee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002900:	230b      	movs	r3, #11
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002908:	4619      	mov	r1, r3
 800290a:	4855      	ldr	r0, [pc, #340]	; (8002a60 <MX_GPIO_Init+0x2e8>)
 800290c:	f003 f9c8 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002910:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002922:	230a      	movs	r3, #10
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292a:	4619      	mov	r1, r3
 800292c:	484e      	ldr	r0, [pc, #312]	; (8002a68 <MX_GPIO_Init+0x2f0>)
 800292e:	f003 f9b7 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002938:	2300      	movs	r3, #0
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002944:	4619      	mov	r1, r3
 8002946:	4849      	ldr	r0, [pc, #292]	; (8002a6c <MX_GPIO_Init+0x2f4>)
 8002948:	f003 f9aa 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002950:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <MX_GPIO_Init+0x2f8>)
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295c:	4619      	mov	r1, r3
 800295e:	483c      	ldr	r0, [pc, #240]	; (8002a50 <MX_GPIO_Init+0x2d8>)
 8002960:	f003 f99e 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002964:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002976:	230a      	movs	r3, #10
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297e:	4619      	mov	r1, r3
 8002980:	483c      	ldr	r0, [pc, #240]	; (8002a74 <MX_GPIO_Init+0x2fc>)
 8002982:	f003 f98d 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002986:	2320      	movs	r3, #32
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	2301      	movs	r3, #1
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299a:	4619      	mov	r1, r3
 800299c:	482c      	ldr	r0, [pc, #176]	; (8002a50 <MX_GPIO_Init+0x2d8>)
 800299e:	f003 f97f 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80029a2:	f241 030c 	movw	r3, #4108	; 0x100c
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b8:	4619      	mov	r1, r3
 80029ba:	4826      	ldr	r0, [pc, #152]	; (8002a54 <MX_GPIO_Init+0x2dc>)
 80029bc:	f003 f970 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80029c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4828      	ldr	r0, [pc, #160]	; (8002a78 <MX_GPIO_Init+0x300>)
 80029d6:	f003 f963 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80029da:	2308      	movs	r3, #8
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	4819      	ldr	r0, [pc, #100]	; (8002a58 <MX_GPIO_Init+0x2e0>)
 80029f2:	f003 f955 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80029f6:	2310      	movs	r3, #16
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fa:	2300      	movs	r3, #0
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a06:	4619      	mov	r1, r3
 8002a08:	4811      	ldr	r0, [pc, #68]	; (8002a50 <MX_GPIO_Init+0x2d8>)
 8002a0a:	f003 f949 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002a0e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a14:	2300      	movs	r3, #0
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a20:	4619      	mov	r1, r3
 8002a22:	480e      	ldr	r0, [pc, #56]	; (8002a5c <MX_GPIO_Init+0x2e4>)
 8002a24:	f003 f93c 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_GPIO_Init+0x2e4>)
 8002a42:	f003 f92d 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4a:	e017      	b.n	8002a7c <MX_GPIO_Init+0x304>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40022800 	.word	0x40022800
 8002a5c:	40021c00 	.word	0x40021c00
 8002a60:	40021800 	.word	0x40021800
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40022400 	.word	0x40022400
 8002a70:	10120000 	.word	0x10120000
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a7e:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <MX_GPIO_Init+0x418>)
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4841      	ldr	r0, [pc, #260]	; (8002b94 <MX_GPIO_Init+0x41c>)
 8002a8e:	f003 f907 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002a92:	2310      	movs	r3, #16
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aaa:	4619      	mov	r1, r3
 8002aac:	483a      	ldr	r0, [pc, #232]	; (8002b98 <MX_GPIO_Init+0x420>)
 8002aae:	f003 f8f7 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002ab2:	23c8      	movs	r3, #200	; 0xc8
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4834      	ldr	r0, [pc, #208]	; (8002b9c <MX_GPIO_Init+0x424>)
 8002aca:	f003 f8e9 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002ace:	2305      	movs	r3, #5
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ade:	230a      	movs	r3, #10
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	482d      	ldr	r0, [pc, #180]	; (8002ba0 <MX_GPIO_Init+0x428>)
 8002aea:	f003 f8d9 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002aee:	2332      	movs	r3, #50	; 0x32
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002afe:	230b      	movs	r3, #11
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <MX_GPIO_Init+0x428>)
 8002b0a:	f003 f8c9 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b12:	2300      	movs	r3, #0
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481e      	ldr	r0, [pc, #120]	; (8002b9c <MX_GPIO_Init+0x424>)
 8002b22:	f003 f8bd 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b26:	2386      	movs	r3, #134	; 0x86
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b36:	230b      	movs	r3, #11
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4818      	ldr	r0, [pc, #96]	; (8002ba4 <MX_GPIO_Init+0x42c>)
 8002b42:	f003 f8ad 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4c:	2312      	movs	r3, #18
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	480d      	ldr	r0, [pc, #52]	; (8002b98 <MX_GPIO_Init+0x420>)
 8002b64:	f003 f89c 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002b68:	2328      	movs	r3, #40	; 0x28
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b78:	230a      	movs	r3, #10
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b80:	4619      	mov	r1, r3
 8002b82:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <MX_GPIO_Init+0x42c>)
 8002b84:	f003 f88c 	bl	8005ca0 <HAL_GPIO_Init>

}
 8002b88:	bf00      	nop
 8002b8a:	3740      	adds	r7, #64	; 0x40
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	10120000 	.word	0x10120000
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40021800 	.word	0x40021800
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020000 	.word	0x40020000

08002ba8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002bb0:	f00c fc28 	bl	800f404 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f009 feaf 	bl	800c918 <osDelay>
 8002bba:	e7fb      	b.n	8002bb4 <StartDefaultTask+0xc>

08002bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bce:	f001 f909 	bl	8003de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40001000 	.word	0x40001000

08002be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_MspInit+0x4c>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_MspInit+0x4c>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	210f      	movs	r1, #15
 8002c2a:	f06f 0001 	mvn.w	r0, #1
 8002c2e:	f002 fa09 	bl	8005044 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800

08002c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <HAL_ADC_MspInit+0xa4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d13c      	bne.n	8002cdc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c80:	f043 0320 	orr.w	r3, r3, #32
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_ADC_MspInit+0xa8>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002caa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002cae:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	480b      	ldr	r0, [pc, #44]	; (8002cec <HAL_ADC_MspInit+0xac>)
 8002cc0:	f002 ffee 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <HAL_ADC_MspInit+0xb0>)
 8002cd8:	f002 ffe2 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cdc:	bf00      	nop
 8002cde:	3728      	adds	r7, #40	; 0x28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40012200 	.word	0x40012200
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40021400 	.word	0x40021400
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_CAN_MspInit+0x8c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d130      	bne.n	8002d78 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_CAN_MspInit+0x90>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_CAN_MspInit+0x90>)
 8002d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_CAN_MspInit+0x90>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_CAN_MspInit+0x90>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_CAN_MspInit+0x90>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_CAN_MspInit+0x90>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d58:	2309      	movs	r3, #9
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_CAN_MspInit+0x94>)
 8002d64:	f002 ff9c 	bl	8005ca0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2105      	movs	r1, #5
 8002d6c:	2014      	movs	r0, #20
 8002d6e:	f002 f969 	bl	8005044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002d72:	2014      	movs	r0, #20
 8002d74:	f002 f982 	bl	800507c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002d78:	bf00      	nop
 8002d7a:	3728      	adds	r7, #40	; 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40006400 	.word	0x40006400
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020400 	.word	0x40020400

08002d8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_CRC_MspInit+0x38>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10b      	bne.n	8002db6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_CRC_MspInit+0x3c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_CRC_MspInit+0x3c>)
 8002da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_CRC_MspInit+0x3c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40023000 	.word	0x40023000
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_DCMI_MspInit+0x160>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f040 809a 	bne.w	8002f24 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002df0:	4b4f      	ldr	r3, [pc, #316]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	4a4e      	ldr	r2, [pc, #312]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6353      	str	r3, [r2, #52]	; 0x34
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4a48      	ldr	r2, [pc, #288]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e0e:	f043 0310 	orr.w	r3, r3, #16
 8002e12:	6313      	str	r3, [r2, #48]	; 0x30
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e20:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a42      	ldr	r2, [pc, #264]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e38:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a3c      	ldr	r2, [pc, #240]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	4a36      	ldr	r2, [pc, #216]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6313      	str	r3, [r2, #48]	; 0x30
 8002e74:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <HAL_DCMI_MspInit+0x164>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002e80:	2360      	movs	r3, #96	; 0x60
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e90:	230d      	movs	r3, #13
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4826      	ldr	r0, [pc, #152]	; (8002f34 <HAL_DCMI_MspInit+0x168>)
 8002e9c:	f002 ff00 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002eb0:	230d      	movs	r3, #13
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb8:	4619      	mov	r1, r3
 8002eba:	481f      	ldr	r0, [pc, #124]	; (8002f38 <HAL_DCMI_MspInit+0x16c>)
 8002ebc:	f002 fef0 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ed2:	230d      	movs	r3, #13
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	4817      	ldr	r0, [pc, #92]	; (8002f3c <HAL_DCMI_MspInit+0x170>)
 8002ede:	f002 fedf 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002ee2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ef4:	230d      	movs	r3, #13
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	4619      	mov	r1, r3
 8002efe:	4810      	ldr	r0, [pc, #64]	; (8002f40 <HAL_DCMI_MspInit+0x174>)
 8002f00:	f002 fece 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002f04:	2350      	movs	r3, #80	; 0x50
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f14:	230d      	movs	r3, #13
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4809      	ldr	r0, [pc, #36]	; (8002f44 <HAL_DCMI_MspInit+0x178>)
 8002f20:	f002 febe 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002f24:	bf00      	nop
 8002f26:	3738      	adds	r7, #56	; 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	50050000 	.word	0x50050000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021800 	.word	0x40021800
 8002f40:	40021c00 	.word	0x40021c00
 8002f44:	40020000 	.word	0x40020000

08002f48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_DMA2D_MspInit+0x44>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_DMA2D_MspInit+0x48>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_DMA2D_MspInit+0x48>)
 8002f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_DMA2D_MspInit+0x48>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2105      	movs	r1, #5
 8002f76:	205a      	movs	r0, #90	; 0x5a
 8002f78:	f002 f864 	bl	8005044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002f7c:	205a      	movs	r0, #90	; 0x5a
 8002f7e:	f002 f87d 	bl	800507c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	4002b000 	.word	0x4002b000
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_DMA2D_MspDeInit+0x2c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_DMA2D_MspDeInit+0x30>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <HAL_DMA2D_MspDeInit+0x30>)
 8002fac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002fb2:	205a      	movs	r0, #90	; 0x5a
 8002fb4:	f002 f870 	bl	8005098 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	4002b000 	.word	0x4002b000
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	; 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a55      	ldr	r2, [pc, #340]	; (800313c <HAL_LTDC_MspInit+0x174>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f040 80a3 	bne.w	8003132 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002fec:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	4a53      	ldr	r2, [pc, #332]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8002ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff8:	4b51      	ldr	r3, [pc, #324]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003004:	4b4e      	ldr	r3, [pc, #312]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4a4d      	ldr	r2, [pc, #308]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	6313      	str	r3, [r2, #48]	; 0x30
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800301c:	4b48      	ldr	r3, [pc, #288]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	4a47      	ldr	r2, [pc, #284]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003026:	6313      	str	r3, [r2, #48]	; 0x30
 8003028:	4b45      	ldr	r3, [pc, #276]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a41      	ldr	r2, [pc, #260]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800303a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800304c:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003056:	6313      	str	r3, [r2, #48]	; 0x30
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
 8003070:	4b33      	ldr	r3, [pc, #204]	; (8003140 <HAL_LTDC_MspInit+0x178>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800307c:	2310      	movs	r3, #16
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800308c:	230e      	movs	r3, #14
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003094:	4619      	mov	r1, r3
 8003096:	482b      	ldr	r0, [pc, #172]	; (8003144 <HAL_LTDC_MspInit+0x17c>)
 8003098:	f002 fe02 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800309c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030ae:	230e      	movs	r3, #14
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80030b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b6:	4619      	mov	r1, r3
 80030b8:	4823      	ldr	r0, [pc, #140]	; (8003148 <HAL_LTDC_MspInit+0x180>)
 80030ba:	f002 fdf1 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80030be:	23f7      	movs	r3, #247	; 0xf7
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030ce:	230e      	movs	r3, #14
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80030d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d6:	4619      	mov	r1, r3
 80030d8:	481c      	ldr	r0, [pc, #112]	; (800314c <HAL_LTDC_MspInit+0x184>)
 80030da:	f002 fde1 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80030de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80030f0:	2309      	movs	r3, #9
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80030f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f8:	4619      	mov	r1, r3
 80030fa:	4815      	ldr	r0, [pc, #84]	; (8003150 <HAL_LTDC_MspInit+0x188>)
 80030fc:	f002 fdd0 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003100:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003112:	230e      	movs	r3, #14
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311a:	4619      	mov	r1, r3
 800311c:	480d      	ldr	r0, [pc, #52]	; (8003154 <HAL_LTDC_MspInit+0x18c>)
 800311e:	f002 fdbf 	bl	8005ca0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2105      	movs	r1, #5
 8003126:	2058      	movs	r0, #88	; 0x58
 8003128:	f001 ff8c 	bl	8005044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800312c:	2058      	movs	r0, #88	; 0x58
 800312e:	f001 ffa5 	bl	800507c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003132:	bf00      	nop
 8003134:	3738      	adds	r7, #56	; 0x38
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40016800 	.word	0x40016800
 8003140:	40023800 	.word	0x40023800
 8003144:	40021000 	.word	0x40021000
 8003148:	40022400 	.word	0x40022400
 800314c:	40022800 	.word	0x40022800
 8003150:	40021800 	.word	0x40021800
 8003154:	40022000 	.word	0x40022000

08003158 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	; 0x30
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_QSPI_MspInit+0x10c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d170      	bne.n	800325c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	4a3a      	ldr	r2, [pc, #232]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6393      	str	r3, [r2, #56]	; 0x38
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003192:	4b35      	ldr	r3, [pc, #212]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a2e      	ldr	r2, [pc, #184]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c2:	4b29      	ldr	r3, [pc, #164]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a28      	ldr	r2, [pc, #160]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_QSPI_MspInit+0x110>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80031da:	2304      	movs	r3, #4
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e6:	2303      	movs	r3, #3
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80031ea:	2309      	movs	r3, #9
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	4619      	mov	r1, r3
 80031f4:	481d      	ldr	r0, [pc, #116]	; (800326c <HAL_QSPI_MspInit+0x114>)
 80031f6:	f002 fd53 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800320a:	230a      	movs	r3, #10
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	4619      	mov	r1, r3
 8003214:	4816      	ldr	r0, [pc, #88]	; (8003270 <HAL_QSPI_MspInit+0x118>)
 8003216:	f002 fd43 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800321a:	2304      	movs	r3, #4
 800321c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800322a:	2309      	movs	r3, #9
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	480e      	ldr	r0, [pc, #56]	; (8003270 <HAL_QSPI_MspInit+0x118>)
 8003236:	f002 fd33 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800323a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800323e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003248:	2303      	movs	r3, #3
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800324c:	2309      	movs	r3, #9
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	4619      	mov	r1, r3
 8003256:	4807      	ldr	r0, [pc, #28]	; (8003274 <HAL_QSPI_MspInit+0x11c>)
 8003258:	f002 fd22 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800325c:	bf00      	nop
 800325e:	3730      	adds	r7, #48	; 0x30
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	a0001000 	.word	0xa0001000
 8003268:	40023800 	.word	0x40023800
 800326c:	40021000 	.word	0x40021000
 8003270:	40020400 	.word	0x40020400
 8003274:	40020c00 	.word	0x40020c00

08003278 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_RTC_MspInit+0x2c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d105      	bne.n	8003296 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RTC_MspInit+0x30>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <HAL_RTC_MspInit+0x30>)
 8003290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40002800 	.word	0x40002800
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_SD_MspInit+0xb4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d144      	bne.n	8003358 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_SD_MspInit+0xb8>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_SD_MspInit+0xb8>)
 80032d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_SD_MspInit+0xb8>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e6:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_SD_MspInit+0xb8>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <HAL_SD_MspInit+0xb8>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_SD_MspInit+0xb8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_SD_MspInit+0xb8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_SD_MspInit+0xb8>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_SD_MspInit+0xb8>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8003316:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800331a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003328:	230c      	movs	r3, #12
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <HAL_SD_MspInit+0xbc>)
 8003334:	f002 fcb4 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003338:	2304      	movs	r3, #4
 800333a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003348:	230c      	movs	r3, #12
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4619      	mov	r1, r3
 8003352:	4806      	ldr	r0, [pc, #24]	; (800336c <HAL_SD_MspInit+0xc0>)
 8003354:	f002 fca4 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003358:	bf00      	nop
 800335a:	3728      	adds	r7, #40	; 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40023800 	.word	0x40023800
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00

08003370 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003390:	d127      	bne.n	80033e2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_SPDIFRX_MspInit+0x7c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <HAL_SPDIFRX_MspInit+0x7c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_SPDIFRX_MspInit+0x7c>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_SPDIFRX_MspInit+0x7c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HAL_SPDIFRX_MspInit+0x7c>)
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_SPDIFRX_MspInit+0x7c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80033d2:	2308      	movs	r3, #8
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	4619      	mov	r1, r3
 80033dc:	4804      	ldr	r0, [pc, #16]	; (80033f0 <HAL_SPDIFRX_MspInit+0x80>)
 80033de:	f002 fc5f 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020c00 	.word	0x40020c00

080033f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <HAL_SPI_MspInit+0xb4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d144      	bne.n	80034a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a24      	ldr	r2, [pc, #144]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800342e:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <HAL_SPI_MspInit+0xb8>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800345e:	2302      	movs	r3, #2
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800346e:	2305      	movs	r3, #5
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <HAL_SPI_MspInit+0xbc>)
 800347a:	f002 fc11 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800347e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003490:	2305      	movs	r3, #5
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	4806      	ldr	r0, [pc, #24]	; (80034b4 <HAL_SPI_MspInit+0xc0>)
 800349c:	f002 fc00 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034a0:	bf00      	nop
 80034a2:	3728      	adds	r7, #40	; 0x28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40003800 	.word	0x40003800
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40020400 	.word	0x40020400

080034b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2e      	ldr	r2, [pc, #184]	; (8003580 <HAL_TIM_Base_MspInit+0xc8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10c      	bne.n	80034e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6453      	str	r3, [r2, #68]	; 0x44
 80034d6:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80034e2:	e046      	b.n	8003572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d10c      	bne.n	8003508 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a24      	ldr	r2, [pc, #144]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	69bb      	ldr	r3, [r7, #24]
}
 8003506:	e034      	b.n	8003572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_TIM_Base_MspInit+0xd0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10c      	bne.n	800352c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]
}
 800352a:	e022      	b.n	8003572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_TIM_Base_MspInit+0xd4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10c      	bne.n	8003550 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
}
 800354e:	e010      	b.n	8003572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_TIM_Base_MspInit+0xd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10b      	bne.n	8003572 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_TIM_Base_MspInit+0xcc>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
}
 8003572:	bf00      	nop
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40023800 	.word	0x40023800
 8003588:	40000400 	.word	0x40000400
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_TIM_PWM_MspInit+0x38>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10b      	bne.n	80035be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80035ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40001800 	.word	0x40001800
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 031c 	add.w	r3, r7, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a56      	ldr	r2, [pc, #344]	; (800374c <HAL_TIM_MspPostInit+0x178>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d11d      	bne.n	8003632 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a55      	ldr	r2, [pc, #340]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800360e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003620:	2301      	movs	r3, #1
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	484a      	ldr	r0, [pc, #296]	; (8003754 <HAL_TIM_MspPostInit+0x180>)
 800362c:	f002 fb38 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003630:	e087      	b.n	8003742 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d11d      	bne.n	8003678 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363c:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4a43      	ldr	r2, [pc, #268]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6313      	str	r3, [r2, #48]	; 0x30
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003666:	2301      	movs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	4838      	ldr	r0, [pc, #224]	; (8003754 <HAL_TIM_MspPostInit+0x180>)
 8003672:	f002 fb15 	bl	8005ca0 <HAL_GPIO_Init>
}
 8003676:	e064      	b.n	8003742 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a36      	ldr	r2, [pc, #216]	; (8003758 <HAL_TIM_MspPostInit+0x184>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d11c      	bne.n	80036bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a32      	ldr	r2, [pc, #200]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800369a:	2310      	movs	r3, #16
 800369c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036aa:	2302      	movs	r3, #2
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 031c 	add.w	r3, r7, #28
 80036b2:	4619      	mov	r1, r3
 80036b4:	4829      	ldr	r0, [pc, #164]	; (800375c <HAL_TIM_MspPostInit+0x188>)
 80036b6:	f002 faf3 	bl	8005ca0 <HAL_GPIO_Init>
}
 80036ba:	e042      	b.n	8003742 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_TIM_MspPostInit+0x18c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d11c      	bne.n	8003700 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036ee:	2302      	movs	r3, #2
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	4619      	mov	r1, r3
 80036f8:	481a      	ldr	r0, [pc, #104]	; (8003764 <HAL_TIM_MspPostInit+0x190>)
 80036fa:	f002 fad1 	bl	8005ca0 <HAL_GPIO_Init>
}
 80036fe:	e020      	b.n	8003742 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_TIM_MspPostInit+0x194>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d11b      	bne.n	8003742 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_TIM_MspPostInit+0x17c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003722:	2340      	movs	r3, #64	; 0x40
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003732:	2309      	movs	r3, #9
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003736:	f107 031c 	add.w	r3, r7, #28
 800373a:	4619      	mov	r1, r3
 800373c:	480b      	ldr	r0, [pc, #44]	; (800376c <HAL_TIM_MspPostInit+0x198>)
 800373e:	f002 faaf 	bl	8005ca0 <HAL_GPIO_Init>
}
 8003742:	bf00      	nop
 8003744:	3730      	adds	r7, #48	; 0x30
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40023800 	.word	0x40023800
 8003754:	40020000 	.word	0x40020000
 8003758:	40000400 	.word	0x40000400
 800375c:	40020400 	.word	0x40020400
 8003760:	40000c00 	.word	0x40000c00
 8003764:	40022000 	.word	0x40022000
 8003768:	40001800 	.word	0x40001800
 800376c:	40021c00 	.word	0x40021c00

08003770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <HAL_UART_MspInit+0x110>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d145      	bne.n	800381e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003792:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <HAL_UART_MspInit+0x114>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <HAL_UART_MspInit+0x114>)
 8003798:	f043 0310 	orr.w	r3, r3, #16
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037aa:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a35      	ldr	r2, [pc, #212]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b2d      	ldr	r3, [pc, #180]	; (8003884 <HAL_UART_MspInit+0x114>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037ea:	2307      	movs	r3, #7
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	4619      	mov	r1, r3
 80037f4:	4824      	ldr	r0, [pc, #144]	; (8003888 <HAL_UART_MspInit+0x118>)
 80037f6:	f002 fa53 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80037fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800380c:	2307      	movs	r3, #7
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003810:	f107 031c 	add.w	r3, r7, #28
 8003814:	4619      	mov	r1, r3
 8003816:	481d      	ldr	r0, [pc, #116]	; (800388c <HAL_UART_MspInit+0x11c>)
 8003818:	f002 fa42 	bl	8005ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800381c:	e02c      	b.n	8003878 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_UART_MspInit+0x120>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d127      	bne.n	8003878 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_UART_MspInit+0x114>)
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <HAL_UART_MspInit+0x114>)
 800382e:	f043 0320 	orr.w	r3, r3, #32
 8003832:	6453      	str	r3, [r2, #68]	; 0x44
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_UART_MspInit+0x114>)
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_UART_MspInit+0x114>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <HAL_UART_MspInit+0x114>)
 8003846:	f043 0304 	orr.w	r3, r3, #4
 800384a:	6313      	str	r3, [r2, #48]	; 0x30
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <HAL_UART_MspInit+0x114>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003858:	23c0      	movs	r3, #192	; 0xc0
 800385a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385c:	2302      	movs	r3, #2
 800385e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003864:	2303      	movs	r3, #3
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003868:	2308      	movs	r3, #8
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386c:	f107 031c 	add.w	r3, r7, #28
 8003870:	4619      	mov	r1, r3
 8003872:	4808      	ldr	r0, [pc, #32]	; (8003894 <HAL_UART_MspInit+0x124>)
 8003874:	f002 fa14 	bl	8005ca0 <HAL_GPIO_Init>
}
 8003878:	bf00      	nop
 800387a:	3730      	adds	r7, #48	; 0x30
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40011000 	.word	0x40011000
 8003884:	40023800 	.word	0x40023800
 8003888:	40020400 	.word	0x40020400
 800388c:	40020000 	.word	0x40020000
 8003890:	40011400 	.word	0x40011400
 8003894:	40020800 	.word	0x40020800

08003898 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80038ac:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_FMC_MspInit+0x100>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d16d      	bne.n	8003990 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <HAL_FMC_MspInit+0x100>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038ba:	4b38      	ldr	r3, [pc, #224]	; (800399c <HAL_FMC_MspInit+0x104>)
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	4a37      	ldr	r2, [pc, #220]	; (800399c <HAL_FMC_MspInit+0x104>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6393      	str	r3, [r2, #56]	; 0x38
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_FMC_MspInit+0x104>)
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80038d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038d6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038e4:	230c      	movs	r3, #12
 80038e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	482c      	ldr	r0, [pc, #176]	; (80039a0 <HAL_FMC_MspInit+0x108>)
 80038ee:	f002 f9d7 	bl	8005ca0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80038f2:	f248 1333 	movw	r3, #33075	; 0x8133
 80038f6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	2302      	movs	r3, #2
 80038fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003900:	2303      	movs	r3, #3
 8003902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003904:	230c      	movs	r3, #12
 8003906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4825      	ldr	r0, [pc, #148]	; (80039a4 <HAL_FMC_MspInit+0x10c>)
 800390e:	f002 f9c7 	bl	8005ca0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003912:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003916:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003920:	2303      	movs	r3, #3
 8003922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003924:	230c      	movs	r3, #12
 8003926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	4619      	mov	r1, r3
 800392c:	481e      	ldr	r0, [pc, #120]	; (80039a8 <HAL_FMC_MspInit+0x110>)
 800392e:	f002 f9b7 	bl	8005ca0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003932:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003936:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003938:	2302      	movs	r3, #2
 800393a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003940:	2303      	movs	r3, #3
 8003942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003944:	230c      	movs	r3, #12
 8003946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4817      	ldr	r0, [pc, #92]	; (80039ac <HAL_FMC_MspInit+0x114>)
 800394e:	f002 f9a7 	bl	8005ca0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003952:	2328      	movs	r3, #40	; 0x28
 8003954:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003962:	230c      	movs	r3, #12
 8003964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4811      	ldr	r0, [pc, #68]	; (80039b0 <HAL_FMC_MspInit+0x118>)
 800396c:	f002 f998 	bl	8005ca0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003970:	2308      	movs	r3, #8
 8003972:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003980:	230c      	movs	r3, #12
 8003982:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	4619      	mov	r1, r3
 8003988:	480a      	ldr	r0, [pc, #40]	; (80039b4 <HAL_FMC_MspInit+0x11c>)
 800398a:	f002 f989 	bl	8005ca0 <HAL_GPIO_Init>
 800398e:	e000      	b.n	8003992 <HAL_FMC_MspInit+0xfa>
    return;
 8003990:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000b20 	.word	0x20000b20
 800399c:	40023800 	.word	0x40023800
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40021800 	.word	0x40021800
 80039a8:	40020c00 	.word	0x40020c00
 80039ac:	40021400 	.word	0x40021400
 80039b0:	40021c00 	.word	0x40021c00
 80039b4:	40020800 	.word	0x40020800

080039b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80039c0:	f7ff ff6a 	bl	8003898 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <HAL_SAI_MspInit+0xbc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d124      	bne.n	8003a28 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_SAI_MspInit+0xc0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <HAL_SAI_MspInit+0xc4>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <HAL_SAI_MspInit+0xc4>)
 80039ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_SAI_MspInit+0xc4>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80039fe:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <HAL_SAI_MspInit+0xc0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_SAI_MspInit+0xc0>)
 8003a06:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003a08:	23f0      	movs	r3, #240	; 0xf0
 8003a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a18:	230a      	movs	r3, #10
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4619      	mov	r1, r3
 8003a22:	481c      	ldr	r0, [pc, #112]	; (8003a94 <HAL_SAI_MspInit+0xc8>)
 8003a24:	f002 f93c 	bl	8005ca0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_SAI_MspInit+0xcc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d125      	bne.n	8003a7e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003a32:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <HAL_SAI_MspInit+0xc0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_SAI_MspInit+0xc4>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_SAI_MspInit+0xc4>)
 8003a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a44:	6453      	str	r3, [r2, #68]	; 0x44
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_SAI_MspInit+0xc4>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <HAL_SAI_MspInit+0xc0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <HAL_SAI_MspInit+0xc0>)
 8003a5a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a6e:	230a      	movs	r3, #10
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003a72:	f107 0314 	add.w	r3, r7, #20
 8003a76:	4619      	mov	r1, r3
 8003a78:	4808      	ldr	r0, [pc, #32]	; (8003a9c <HAL_SAI_MspInit+0xd0>)
 8003a7a:	f002 f911 	bl	8005ca0 <HAL_GPIO_Init>

    }
}
 8003a7e:	bf00      	nop
 8003a80:	3728      	adds	r7, #40	; 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40015c04 	.word	0x40015c04
 8003a8c:	20000b24 	.word	0x20000b24
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40015c24 	.word	0x40015c24
 8003a9c:	40021800 	.word	0x40021800

08003aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	; 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	2036      	movs	r0, #54	; 0x36
 8003ab6:	f001 fac5 	bl	8005044 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003aba:	2036      	movs	r0, #54	; 0x36
 8003abc:	f001 fade 	bl	800507c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <HAL_InitTick+0xa0>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <HAL_InitTick+0xa0>)
 8003ac6:	f043 0310 	orr.w	r3, r3, #16
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <HAL_InitTick+0xa0>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad8:	f107 0210 	add.w	r2, r7, #16
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fbfe 	bl	80072e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003ae8:	f003 fbd4 	bl	8007294 <HAL_RCC_GetPCLK1Freq>
 8003aec:	4603      	mov	r3, r0
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <HAL_InitTick+0xa4>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9b      	lsrs	r3, r3, #18
 8003afc:	3b01      	subs	r3, #1
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <HAL_InitTick+0xac>)
 8003b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b20:	4809      	ldr	r0, [pc, #36]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b22:	f006 f889 	bl	8009c38 <HAL_TIM_Base_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b2c:	4806      	ldr	r0, [pc, #24]	; (8003b48 <HAL_InitTick+0xa8>)
 8003b2e:	f006 f8af 	bl	8009c90 <HAL_TIM_Base_Start_IT>
 8003b32:	4603      	mov	r3, r0
 8003b34:	e000      	b.n	8003b38 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	; 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	20000b28 	.word	0x20000b28
 8003b4c:	40001000 	.word	0x40001000

08003b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b62:	e7fe      	b.n	8003b62 <HardFault_Handler+0x4>

08003b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <MemManage_Handler+0x4>

08003b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6e:	e7fe      	b.n	8003b6e <BusFault_Handler+0x4>

08003b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b74:	e7fe      	b.n	8003b74 <UsageFault_Handler+0x4>

08003b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <CAN1_RX0_IRQHandler+0x10>)
 8003b8a:	f000 ff4f 	bl	8004a2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200003c0 	.word	0x200003c0

08003b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <TIM6_DAC_IRQHandler+0x10>)
 8003b9e:	f006 f8cc 	bl	8009d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000b28 	.word	0x20000b28

08003bac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <LTDC_IRQHandler+0x10>)
 8003bb2:	f002 fb23 	bl	80061fc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200004c0 	.word	0x200004c0

08003bc0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <DMA2D_IRQHandler+0x10>)
 8003bc6:	f001 fe2c 	bl	8005822 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000480 	.word	0x20000480

08003bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
	return 1;
 8003bd8:	2301      	movs	r3, #1
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_kill>:

int _kill(int pid, int sig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bee:	f022 ffa3 	bl	8026b38 <__errno>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2216      	movs	r2, #22
 8003bf6:	601a      	str	r2, [r3, #0]
	return -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_exit>:

void _exit (int status)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ffe7 	bl	8003be4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c16:	e7fe      	b.n	8003c16 <_exit+0x12>

08003c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e00a      	b.n	8003c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c2a:	f3af 8000 	nop.w
 8003c2e:	4601      	mov	r1, r0
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	60ba      	str	r2, [r7, #8]
 8003c36:	b2ca      	uxtb	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	dbf0      	blt.n	8003c2a <_read+0x12>
	}

return len;
 8003c48:	687b      	ldr	r3, [r7, #4]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e009      	b.n	8003c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	60ba      	str	r2, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	3301      	adds	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	dbf1      	blt.n	8003c64 <_write+0x12>
	}
	return len;
 8003c80:	687b      	ldr	r3, [r7, #4]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <_close>:

int _close(int file)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
	return -1;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_isatty>:

int _isatty(int file)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <_sbrk+0x50>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <_sbrk+0x16>
		heap_end = &end;
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <_sbrk+0x50>)
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <_sbrk+0x54>)
 8003d08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <_sbrk+0x50>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <_sbrk+0x50>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	466a      	mov	r2, sp
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d907      	bls.n	8003d2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d1e:	f022 ff0b 	bl	8026b38 <__errno>
 8003d22:	4603      	mov	r3, r0
 8003d24:	220c      	movs	r2, #12
 8003d26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e006      	b.n	8003d3c <_sbrk+0x48>
	}

	heap_end += incr;
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <_sbrk+0x50>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	4a03      	ldr	r2, [pc, #12]	; (8003d44 <_sbrk+0x50>)
 8003d38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000b68 	.word	0x20000b68
 8003d48:	2000ca40 	.word	0x2000ca40

08003d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <SystemInit+0x28>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <SystemInit+0x28>)
 8003d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <SystemInit+0x28>)
 8003d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d66:	609a      	str	r2, [r3, #8]
#endif
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000ed00 	.word	0xe000ed00

08003d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d7e:	e003      	b.n	8003d88 <LoopCopyDataInit>

08003d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d86:	3104      	adds	r1, #4

08003d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d88:	480b      	ldr	r0, [pc, #44]	; (8003db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d90:	d3f6      	bcc.n	8003d80 <CopyDataInit>
  ldr  r2, =_sbss
 8003d92:	4a0b      	ldr	r2, [pc, #44]	; (8003dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d94:	e002      	b.n	8003d9c <LoopFillZerobss>

08003d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d98:	f842 3b04 	str.w	r3, [r2], #4

08003d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003da0:	d3f9      	bcc.n	8003d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003da2:	f7ff ffd3 	bl	8003d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003da6:	f022 fecd 	bl	8026b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003daa:	f7fd f9e5 	bl	8001178 <main>
  bx  lr    
 8003dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003db0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003db4:	08063328 	.word	0x08063328
  ldr  r0, =_sdata
 8003db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003dbc:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8003dc0:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 8003dc4:	2000ca3c 	.word	0x2000ca3c

08003dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dc8:	e7fe      	b.n	8003dc8 <ADC_IRQHandler>

08003dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dce:	2003      	movs	r0, #3
 8003dd0:	f001 f92d 	bl	800502e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff fe63 	bl	8003aa0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003dda:	f7fe ff09 	bl	8002bf0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x20>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_IncTick+0x24>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_IncTick+0x24>)
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	2000001c 	.word	0x2000001c
 8003e08:	20000b6c 	.word	0x20000b6c

08003e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_GetTick+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000b6c 	.word	0x20000b6c

08003e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7ff ffee 	bl	8003e0c <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d005      	beq.n	8003e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_Delay+0x44>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e4a:	bf00      	nop
 8003e4c:	f7ff ffde 	bl	8003e0c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d8f7      	bhi.n	8003e4c <HAL_Delay+0x28>
  {
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000001c 	.word	0x2000001c

08003e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e031      	b.n	8003ee6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fe fed8 	bl	8002c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_ADC_Init+0x84>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f964 	bl	8004188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed6:	e001      	b.n	8003edc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	ffffeefd 	.word	0xffffeefd

08003ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x1c>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e12a      	b.n	8004166 <HAL_ADC_ConfigChannel+0x272>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d93a      	bls.n	8003f96 <HAL_ADC_ConfigChannel+0xa2>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f28:	d035      	beq.n	8003f96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68d9      	ldr	r1, [r3, #12]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b1e      	subs	r3, #30
 8003f40:	2207      	movs	r2, #7
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43da      	mvns	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a87      	ldr	r2, [pc, #540]	; (8004174 <HAL_ADC_ConfigChannel+0x280>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68d9      	ldr	r1, [r3, #12]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	061a      	lsls	r2, r3, #24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f6e:	e035      	b.n	8003fdc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68d9      	ldr	r1, [r3, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4618      	mov	r0, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4403      	add	r3, r0
 8003f88:	3b1e      	subs	r3, #30
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f94:	e022      	b.n	8003fdc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6919      	ldr	r1, [r3, #16]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	4413      	add	r3, r2
 8003faa:	2207      	movs	r2, #7
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6919      	ldr	r1, [r3, #16]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	4603      	mov	r3, r0
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4403      	add	r3, r0
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d824      	bhi.n	800402e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3b05      	subs	r3, #5
 8003ff6:	221f      	movs	r2, #31
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	400a      	ands	r2, r1
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	4618      	mov	r0, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	3b05      	subs	r3, #5
 8004020:	fa00 f203 	lsl.w	r2, r0, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	635a      	str	r2, [r3, #52]	; 0x34
 800402c:	e04c      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d824      	bhi.n	8004080 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	3b23      	subs	r3, #35	; 0x23
 8004048:	221f      	movs	r2, #31
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43da      	mvns	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	400a      	ands	r2, r1
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	4618      	mov	r0, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	3b23      	subs	r3, #35	; 0x23
 8004072:	fa00 f203 	lsl.w	r2, r0, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
 800407e:	e023      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	3b41      	subs	r3, #65	; 0x41
 8004092:	221f      	movs	r2, #31
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43da      	mvns	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	400a      	ands	r2, r1
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	3b41      	subs	r3, #65	; 0x41
 80040bc:	fa00 f203 	lsl.w	r2, r0, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <HAL_ADC_ConfigChannel+0x284>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10a      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1f4>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040da:	d105      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_ADC_ConfigChannel+0x288>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_ADC_ConfigChannel+0x288>)
 80040e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80040e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <HAL_ADC_ConfigChannel+0x284>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d109      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x212>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b12      	cmp	r3, #18
 80040f8:	d105      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_ADC_ConfigChannel+0x288>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_ADC_ConfigChannel+0x288>)
 8004100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004104:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_ADC_ConfigChannel+0x284>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d125      	bne.n	800415c <HAL_ADC_ConfigChannel+0x268>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_ADC_ConfigChannel+0x280>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <HAL_ADC_ConfigChannel+0x22e>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b11      	cmp	r3, #17
 8004120:	d11c      	bne.n	800415c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_ADC_ConfigChannel+0x288>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <HAL_ADC_ConfigChannel+0x288>)
 8004128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a10      	ldr	r2, [pc, #64]	; (8004174 <HAL_ADC_ConfigChannel+0x280>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d111      	bne.n	800415c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_ADC_ConfigChannel+0x28c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_ADC_ConfigChannel+0x290>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0c9a      	lsrs	r2, r3, #18
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800414e:	e002      	b.n	8004156 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f9      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	10000012 	.word	0x10000012
 8004178:	40012000 	.word	0x40012000
 800417c:	40012300 	.word	0x40012300
 8004180:	20000014 	.word	0x20000014
 8004184:	431bde83 	.word	0x431bde83

08004188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004190:	4b78      	ldr	r3, [pc, #480]	; (8004374 <ADC_Init+0x1ec>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a77      	ldr	r2, [pc, #476]	; (8004374 <ADC_Init+0x1ec>)
 8004196:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800419a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800419c:	4b75      	ldr	r3, [pc, #468]	; (8004374 <ADC_Init+0x1ec>)
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4973      	ldr	r1, [pc, #460]	; (8004374 <ADC_Init+0x1ec>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	021a      	lsls	r2, r3, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	4a58      	ldr	r2, [pc, #352]	; (8004378 <ADC_Init+0x1f0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800422a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800424c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	e00f      	b.n	8004282 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004280:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0202 	bic.w	r2, r2, #2
 8004290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	005a      	lsls	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01b      	beq.n	80042e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	3b01      	subs	r3, #1
 80042dc:	035a      	lsls	r2, r3, #13
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e007      	b.n	80042f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	3b01      	subs	r3, #1
 8004314:	051a      	lsls	r2, r3, #20
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800432c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800433a:	025a      	lsls	r2, r3, #9
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	029a      	lsls	r2, r3, #10
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40012300 	.word	0x40012300
 8004378:	0f000001 	.word	0x0f000001

0800437c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0ed      	b.n	800456a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fe fcaa 	bl	8002cf4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0202 	bic.w	r2, r2, #2
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b0:	f7ff fd2c 	bl	8003e0c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043b6:	e012      	b.n	80043de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043b8:	f7ff fd28 	bl	8003e0c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b0a      	cmp	r3, #10
 80043c4:	d90b      	bls.n	80043de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2205      	movs	r2, #5
 80043d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0c5      	b.n	800456a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043fc:	f7ff fd06 	bl	8003e0c <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004402:	e012      	b.n	800442a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004404:	f7ff fd02 	bl	8003e0c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b0a      	cmp	r3, #10
 8004410:	d90b      	bls.n	800442a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2205      	movs	r2, #5
 8004422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e09f      	b.n	800456a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0e5      	beq.n	8004404 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	7e1b      	ldrb	r3, [r3, #24]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d108      	bne.n	8004452 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e007      	b.n	8004462 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7e5b      	ldrb	r3, [r3, #25]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d108      	bne.n	800447c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e007      	b.n	800448c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7e9b      	ldrb	r3, [r3, #26]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d108      	bne.n	80044a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0220 	orr.w	r2, r2, #32
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e007      	b.n	80044b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0220 	bic.w	r2, r2, #32
 80044b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7edb      	ldrb	r3, [r3, #27]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d108      	bne.n	80044d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0210 	bic.w	r2, r2, #16
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	e007      	b.n	80044e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0210 	orr.w	r2, r2, #16
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7f1b      	ldrb	r3, [r3, #28]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d108      	bne.n	80044fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e007      	b.n	800450a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0208 	bic.w	r2, r2, #8
 8004508:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7f5b      	ldrb	r3, [r3, #29]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0204 	orr.w	r2, r2, #4
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e007      	b.n	8004534 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	ea42 0103 	orr.w	r1, r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d003      	beq.n	800459a <HAL_CAN_ConfigFilter+0x26>
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f040 80be 	bne.w	8004716 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800459a:	4b65      	ldr	r3, [pc, #404]	; (8004730 <HAL_CAN_ConfigFilter+0x1bc>)
 800459c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	431a      	orrs	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2201      	movs	r2, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	401a      	ands	r2, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d123      	bne.n	8004644 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800461e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	3248      	adds	r2, #72	; 0x48
 8004624:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004638:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	3348      	adds	r3, #72	; 0x48
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	440b      	add	r3, r1
 8004642:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d122      	bne.n	8004692 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	431a      	orrs	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800466c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3248      	adds	r2, #72	; 0x48
 8004672:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004686:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	3348      	adds	r3, #72	; 0x48
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	440b      	add	r3, r1
 8004690:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	401a      	ands	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80046ac:	e007      	b.n	80046be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	401a      	ands	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80046d8:	e007      	b.n	80046ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004708:	f023 0201 	bic.w	r2, r3, #1
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e006      	b.n	8004724 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40006400 	.word	0x40006400

08004734 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d12e      	bne.n	80047a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004760:	f7ff fb54 	bl	8003e0c <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004766:	e012      	b.n	800478e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004768:	f7ff fb50 	bl	8003e0c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b0a      	cmp	r3, #10
 8004774:	d90b      	bls.n	800478e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e012      	b.n	80047b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e006      	b.n	80047b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
  }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d003      	beq.n	80047e0 <HAL_CAN_GetRxMessage+0x24>
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	f040 80f3 	bne.w	80049c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10e      	bne.n	8004804 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d116      	bne.n	8004822 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0e7      	b.n	80049d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d107      	bne.n	8004822 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0d8      	b.n	80049d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	331b      	adds	r3, #27
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	4413      	add	r3, r2
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0204 	and.w	r2, r3, #4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10c      	bne.n	800485a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	331b      	adds	r3, #27
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4413      	add	r3, r2
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	0d5b      	lsrs	r3, r3, #21
 8004850:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e00b      	b.n	8004872 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	331b      	adds	r3, #27
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	4413      	add	r3, r2
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	331b      	adds	r3, #27
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4413      	add	r3, r2
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0202 	and.w	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	331b      	adds	r3, #27
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4413      	add	r3, r2
 8004894:	3304      	adds	r3, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	331b      	adds	r3, #27
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0a1b      	lsrs	r3, r3, #8
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	331b      	adds	r3, #27
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	4413      	add	r3, r2
 80048c4:	3304      	adds	r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	0a1a      	lsrs	r2, r3, #8
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	3301      	adds	r3, #1
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	4413      	add	r3, r2
 800490a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0c1a      	lsrs	r2, r3, #16
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	3302      	adds	r3, #2
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0e1a      	lsrs	r2, r3, #24
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	3303      	adds	r3, #3
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4413      	add	r3, r2
 800493e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	3304      	adds	r3, #4
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	4413      	add	r3, r2
 8004956:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0a1a      	lsrs	r2, r3, #8
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	3305      	adds	r3, #5
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	4413      	add	r3, r2
 8004970:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	0c1a      	lsrs	r2, r3, #16
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	3306      	adds	r3, #6
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	4413      	add	r3, r2
 800498a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	0e1a      	lsrs	r2, r3, #24
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	3307      	adds	r3, #7
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d108      	bne.n	80049b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0220 	orr.w	r2, r2, #32
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e007      	b.n	80049c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e006      	b.n	80049d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
  }
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <HAL_CAN_ActivateNotification+0x1e>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d109      	bne.n	8004a12 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6959      	ldr	r1, [r3, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e006      	b.n	8004a20 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d07c      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d023      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f983 	bl	8004d9a <HAL_CAN_TxMailbox0CompleteCallback>
 8004a94:	e016      	b.n	8004ac4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	e00c      	b.n	8004ac4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
 8004abc:	e002      	b.n	8004ac4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f989 	bl	8004dd6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d024      	beq.n	8004b18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f963 	bl	8004dae <HAL_CAN_TxMailbox1CompleteCallback>
 8004ae8:	e016      	b.n	8004b18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	e00c      	b.n	8004b18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	e002      	b.n	8004b18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f969 	bl	8004dea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d024      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f943 	bl	8004dc2 <HAL_CAN_TxMailbox2CompleteCallback>
 8004b3c:	e016      	b.n	8004b6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e00c      	b.n	8004b6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	e002      	b.n	8004b6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f949 	bl	8004dfe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f930 	bl	8004e12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fcb0 	bl	8001530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f912 	bl	8004e3a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8f9 	bl	8004e26 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8fc 	bl	8004e4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d006      	beq.n	8004c78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2208      	movs	r2, #8
 8004c70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8f5 	bl	8004e62 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d07b      	beq.n	8004d7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d072      	beq.n	8004d72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	f043 0304 	orr.w	r3, r3, #4
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d043      	beq.n	8004d72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d03e      	beq.n	8004d72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cfa:	2b60      	cmp	r3, #96	; 0x60
 8004cfc:	d02b      	beq.n	8004d56 <HAL_CAN_IRQHandler+0x32a>
 8004cfe:	2b60      	cmp	r3, #96	; 0x60
 8004d00:	d82e      	bhi.n	8004d60 <HAL_CAN_IRQHandler+0x334>
 8004d02:	2b50      	cmp	r3, #80	; 0x50
 8004d04:	d022      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x320>
 8004d06:	2b50      	cmp	r3, #80	; 0x50
 8004d08:	d82a      	bhi.n	8004d60 <HAL_CAN_IRQHandler+0x334>
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d019      	beq.n	8004d42 <HAL_CAN_IRQHandler+0x316>
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d826      	bhi.n	8004d60 <HAL_CAN_IRQHandler+0x334>
 8004d12:	2b30      	cmp	r3, #48	; 0x30
 8004d14:	d010      	beq.n	8004d38 <HAL_CAN_IRQHandler+0x30c>
 8004d16:	2b30      	cmp	r3, #48	; 0x30
 8004d18:	d822      	bhi.n	8004d60 <HAL_CAN_IRQHandler+0x334>
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d002      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x2f8>
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d005      	beq.n	8004d2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004d22:	e01d      	b.n	8004d60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f043 0308 	orr.w	r3, r3, #8
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d2c:	e019      	b.n	8004d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d36:	e014      	b.n	8004d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d40:	e00f      	b.n	8004d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d4a:	e00a      	b.n	8004d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d54:	e005      	b.n	8004d62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d5e:	e000      	b.n	8004d62 <HAL_CAN_IRQHandler+0x336>
            break;
 8004d60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2204      	movs	r2, #4
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f872 	bl	8004e76 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d92:	bf00      	nop
 8004d94:	3728      	adds	r7, #40	; 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <__NVIC_SetPriorityGrouping+0x40>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <__NVIC_SetPriorityGrouping+0x40>)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	60d3      	str	r3, [r2, #12]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00
 8004ed0:	05fa0000 	.word	0x05fa0000

08004ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <__NVIC_GetPriorityGrouping+0x18>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	f003 0307 	and.w	r3, r3, #7
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	db0b      	blt.n	8004f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	f003 021f 	and.w	r2, r3, #31
 8004f08:	4907      	ldr	r1, [pc, #28]	; (8004f28 <__NVIC_EnableIRQ+0x38>)
 8004f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2001      	movs	r0, #1
 8004f12:	fa00 f202 	lsl.w	r2, r0, r2
 8004f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000e100 	.word	0xe000e100

08004f2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db12      	blt.n	8004f64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	490a      	ldr	r1, [pc, #40]	; (8004f70 <__NVIC_DisableIRQ+0x44>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	3320      	adds	r3, #32
 8004f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f58:	f3bf 8f4f 	dsb	sy
}
 8004f5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f5e:	f3bf 8f6f 	isb	sy
}
 8004f62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000e100 	.word	0xe000e100

08004f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	6039      	str	r1, [r7, #0]
 8004f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	db0a      	blt.n	8004f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	490c      	ldr	r1, [pc, #48]	; (8004fc0 <__NVIC_SetPriority+0x4c>)
 8004f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f92:	0112      	lsls	r2, r2, #4
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	440b      	add	r3, r1
 8004f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f9c:	e00a      	b.n	8004fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4908      	ldr	r1, [pc, #32]	; (8004fc4 <__NVIC_SetPriority+0x50>)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	3b04      	subs	r3, #4
 8004fac:	0112      	lsls	r2, r2, #4
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	761a      	strb	r2, [r3, #24]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000e100 	.word	0xe000e100
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b089      	sub	sp, #36	; 0x24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f1c3 0307 	rsb	r3, r3, #7
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	bf28      	it	cs
 8004fe6:	2304      	movcs	r3, #4
 8004fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2b06      	cmp	r3, #6
 8004ff0:	d902      	bls.n	8004ff8 <NVIC_EncodePriority+0x30>
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3b03      	subs	r3, #3
 8004ff6:	e000      	b.n	8004ffa <NVIC_EncodePriority+0x32>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43da      	mvns	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	401a      	ands	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005010:	f04f 31ff 	mov.w	r1, #4294967295
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	43d9      	mvns	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005020:	4313      	orrs	r3, r2
         );
}
 8005022:	4618      	mov	r0, r3
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff28 	bl	8004e8c <__NVIC_SetPriorityGrouping>
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005056:	f7ff ff3d 	bl	8004ed4 <__NVIC_GetPriorityGrouping>
 800505a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	6978      	ldr	r0, [r7, #20]
 8005062:	f7ff ffb1 	bl	8004fc8 <NVIC_EncodePriority>
 8005066:	4602      	mov	r2, r0
 8005068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ff80 	bl	8004f74 <__NVIC_SetPriority>
}
 8005074:	bf00      	nop
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff30 	bl	8004ef0 <__NVIC_EnableIRQ>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff ff40 	bl	8004f2c <__NVIC_DisableIRQ>
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e054      	b.n	8005170 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	7f5b      	ldrb	r3, [r3, #29]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fd fe58 	bl	8002d8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	791b      	ldrb	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_CRC_Init+0xc4>)
 80050f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0218 	bic.w	r2, r2, #24
 8005100:	609a      	str	r2, [r3, #8]
 8005102:	e00c      	b.n	800511e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6899      	ldr	r1, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	461a      	mov	r2, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f834 	bl	800517c <HAL_CRCEx_Polynomial_Set>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e028      	b.n	8005170 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	795b      	ldrb	r3, [r3, #5]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f04f 32ff 	mov.w	r2, #4294967295
 800512e:	611a      	str	r2, [r3, #16]
 8005130:	e004      	b.n	800513c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6912      	ldr	r2, [r2, #16]
 800513a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	04c11db7 	.word	0x04c11db7

0800517c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800518c:	231f      	movs	r3, #31
 800518e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005190:	bf00      	nop
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	613a      	str	r2, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b18      	cmp	r3, #24
 80051b4:	d846      	bhi.n	8005244 <HAL_CRCEx_Polynomial_Set+0xc8>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	0800524b 	.word	0x0800524b
 80051c0:	08005245 	.word	0x08005245
 80051c4:	08005245 	.word	0x08005245
 80051c8:	08005245 	.word	0x08005245
 80051cc:	08005245 	.word	0x08005245
 80051d0:	08005245 	.word	0x08005245
 80051d4:	08005245 	.word	0x08005245
 80051d8:	08005245 	.word	0x08005245
 80051dc:	08005239 	.word	0x08005239
 80051e0:	08005245 	.word	0x08005245
 80051e4:	08005245 	.word	0x08005245
 80051e8:	08005245 	.word	0x08005245
 80051ec:	08005245 	.word	0x08005245
 80051f0:	08005245 	.word	0x08005245
 80051f4:	08005245 	.word	0x08005245
 80051f8:	08005245 	.word	0x08005245
 80051fc:	0800522d 	.word	0x0800522d
 8005200:	08005245 	.word	0x08005245
 8005204:	08005245 	.word	0x08005245
 8005208:	08005245 	.word	0x08005245
 800520c:	08005245 	.word	0x08005245
 8005210:	08005245 	.word	0x08005245
 8005214:	08005245 	.word	0x08005245
 8005218:	08005245 	.word	0x08005245
 800521c:	08005221 	.word	0x08005221
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b06      	cmp	r3, #6
 8005224:	d913      	bls.n	800524e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800522a:	e010      	b.n	800524e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b07      	cmp	r3, #7
 8005230:	d90f      	bls.n	8005252 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005236:	e00c      	b.n	8005252 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d90b      	bls.n	8005256 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005242:	e008      	b.n	8005256 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
      break;
 8005248:	e006      	b.n	8005258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800524a:	bf00      	nop
 800524c:	e004      	b.n	8005258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800524e:	bf00      	nop
 8005250:	e002      	b.n	8005258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005252:	bf00      	nop
 8005254:	e000      	b.n	8005258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005256:	bf00      	nop
  }
  if (status == HAL_OK)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 0118 	bic.w	r1, r3, #24
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e069      	b.n	800536e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fd fd90 	bl	8002dcc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6819      	ldr	r1, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_DCMI_Init+0xf0>)
 80052ce:	400b      	ands	r3, r1
 80052d0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80052e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80052f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80052fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800530a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005316:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d112      	bne.n	800534e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7f1b      	ldrb	r3, [r3, #28]
 800532c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7f5b      	ldrb	r3, [r3, #29]
 8005332:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005334:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	7f9b      	ldrb	r3, [r3, #30]
 800533a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800533c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7fdb      	ldrb	r3, [r3, #31]
 8005344:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800534a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800534c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 021e 	orr.w	r2, r2, #30
 800535c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	ffe0f007 	.word	0xffe0f007

0800537c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_DMA_Start_IT+0x26>
 800539e:	2302      	movs	r3, #2
 80053a0:	e048      	b.n	8005434 <HAL_DMA_Start_IT+0xb8>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d137      	bne.n	8005426 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f842 	bl	8005454 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	223f      	movs	r2, #63	; 0x3f
 80053d6:	409a      	lsls	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0216 	orr.w	r2, r2, #22
 80053ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0208 	orr.w	r2, r2, #8
 8005412:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e005      	b.n	8005432 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800542e:	2302      	movs	r3, #2
 8005430:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005470:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d108      	bne.n	8005494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005492:	e007      	b.n	80054a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e039      	b.n	8005536 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fd fd36 	bl	8002f48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005500:	f023 0107 	bic.w	r1, r3, #7
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_DMA2D_Init+0x90>)
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68d1      	ldr	r1, [r2, #12]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	430b      	orrs	r3, r1
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	ffffc000 	.word	0xffffc000

08005544 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e05f      	b.n	8005616 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8005556:	4b32      	ldr	r3, [pc, #200]	; (8005620 <HAL_DMA2D_DeInit+0xdc>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d02e      	beq.n	80055c0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d107      	bne.n	8005580 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8c1 	bl	80056f8 <HAL_DMA2D_Abort>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d021      	beq.n	80055c0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e04a      	b.n	8005616 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b20      	cmp	r3, #32
 800558c:	d108      	bne.n	80055a0 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800558e:	2100      	movs	r1, #0
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f8f7 	bl	8005784 <HAL_DMA2D_CLUTLoading_Abort>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d011      	beq.n	80055c0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e03a      	b.n	8005616 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d108      	bne.n	80055c0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80055ae:	2101      	movs	r1, #1
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8e7 	bl	8005784 <HAL_DMA2D_CLUTLoading_Abort>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e02a      	b.n	8005616 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	223f      	movs	r2, #63	; 0x3f
 80055ce:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2200      	movs	r2, #0
 80055de:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2200      	movs	r2, #0
 80055e6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2200      	movs	r2, #0
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2200      	movs	r2, #0
 80055f6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7fd fccb 	bl	8002f94 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800

08005624 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_DMA2D_Start_IT+0x1c>
 800563c:	2302      	movs	r3, #2
 800563e:	e020      	b.n	8005682 <HAL_DMA2D_Start_IT+0x5e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fa84 	bl	8005b68 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800566e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af02      	add	r7, sp, #8
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e024      	b.n	80056f0 <HAL_DMA2D_BlendingStart_IT+0x66>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fa4d 	bl	8005b68 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80056dc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 0205 	bic.w	r2, r3, #5
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0204 	orr.w	r2, r2, #4
 8005712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005714:	f7fe fb7a 	bl	8003e0c <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800571a:	e017      	b.n	800574c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800571c:	f7fe fb76 	bl	8003e0c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572a:	d90f      	bls.n	800574c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2203      	movs	r2, #3
 800573c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e017      	b.n	800577c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e0      	bne.n	800571c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005768:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3324      	adds	r3, #36	; 0x24
 8005794:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0204 	orr.w	r2, r2, #4
 80057a4:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d103      	bne.n	80057b4 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	331c      	adds	r3, #28
 80057b2:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80057b4:	f7fe fb2a 	bl	8003e0c <HAL_GetTick>
 80057b8:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80057ba:	e017      	b.n	80057ec <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80057bc:	f7fe fb26 	bl	8003e0c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ca:	d90f      	bls.n	80057ec <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2203      	movs	r2, #3
 80057dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e016      	b.n	800581a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e1      	bne.n	80057bc <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005806:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d026      	beq.n	8005892 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d021      	beq.n	8005892 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800585c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	f043 0201 	orr.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d026      	beq.n	80058ea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d021      	beq.n	80058ea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2220      	movs	r2, #32
 80058bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	f043 0202 	orr.w	r2, r3, #2
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2204      	movs	r2, #4
 80058ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d026      	beq.n	8005942 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d021      	beq.n	8005942 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2208      	movs	r2, #8
 8005914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	f043 0204 	orr.w	r2, r3, #4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2204      	movs	r2, #4
 8005926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00e      	beq.n	8005974 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005964:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2204      	movs	r2, #4
 800596c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f853 	bl	8005a1a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d024      	beq.n	80059c8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01f      	beq.n	80059c8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005996:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2202      	movs	r2, #2
 800599e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01f      	beq.n	8005a12 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01a      	beq.n	8005a12 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2210      	movs	r2, #16
 80059f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f80e 	bl	8005a2e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_DMA2D_ConfigLayer+0x20>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e079      	b.n	8005b58 <HAL_DMA2D_ConfigLayer+0x114>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	3318      	adds	r3, #24
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005a8e:	4b35      	ldr	r3, [pc, #212]	; (8005b64 <HAL_DMA2D_ConfigLayer+0x120>)
 8005a90:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b0a      	cmp	r3, #10
 8005a98:	d003      	beq.n	8005aa2 <HAL_DMA2D_ConfigLayer+0x5e>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b09      	cmp	r3, #9
 8005aa0:	d107      	bne.n	8005ab2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e005      	b.n	8005abe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d120      	bne.n	8005b06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	43db      	mvns	r3, r3
 8005ace:	ea02 0103 	and.w	r1, r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b0a      	cmp	r3, #10
 8005aec:	d003      	beq.n	8005af6 <HAL_DMA2D_ConfigLayer+0xb2>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d127      	bne.n	8005b46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
 8005b04:	e01f      	b.n	8005b46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	ea02 0103 	and.w	r1, r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	6812      	ldr	r2, [r2, #0]
 8005b26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b0a      	cmp	r3, #10
 8005b2e:	d003      	beq.n	8005b38 <HAL_DMA2D_ConfigLayer+0xf4>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b09      	cmp	r3, #9
 8005b36:	d106      	bne.n	8005b46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b44:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	ff03000f 	.word	0xff03000f

08005b68 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b08b      	sub	sp, #44	; 0x2c
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	041a      	lsls	r2, r3, #16
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ba0:	d174      	bne.n	8005c8c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ba8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bb8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d108      	bne.n	8005bda <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	e053      	b.n	8005c82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d106      	bne.n	8005bf0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	e048      	b.n	8005c82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d111      	bne.n	8005c1c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	0cdb      	lsrs	r3, r3, #19
 8005bfc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	0a9b      	lsrs	r3, r3, #10
 8005c02:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	08db      	lsrs	r3, r3, #3
 8005c08:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	02db      	lsls	r3, r3, #11
 8005c12:	4313      	orrs	r3, r2
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1a:	e032      	b.n	8005c82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d117      	bne.n	8005c54 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	0fdb      	lsrs	r3, r3, #31
 8005c28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	0cdb      	lsrs	r3, r3, #19
 8005c2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	0adb      	lsrs	r3, r3, #11
 8005c34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	08db      	lsrs	r3, r3, #3
 8005c3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	431a      	orrs	r2, r3
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	03db      	lsls	r3, r3, #15
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	e016      	b.n	8005c82 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	0f1b      	lsrs	r3, r3, #28
 8005c58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	0d1b      	lsrs	r3, r3, #20
 8005c5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	0b1b      	lsrs	r3, r3, #12
 8005c64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	011a      	lsls	r2, r3, #4
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	431a      	orrs	r2, r3
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005c8a:	e003      	b.n	8005c94 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	60da      	str	r2, [r3, #12]
}
 8005c94:	bf00      	nop
 8005c96:	372c      	adds	r7, #44	; 0x2c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e175      	b.n	8005fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	f040 8164 	bne.w	8005fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d00b      	beq.n	8005cfe <HAL_GPIO_Init+0x5e>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d007      	beq.n	8005cfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cf2:	2b11      	cmp	r3, #17
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b12      	cmp	r3, #18
 8005cfc:	d130      	bne.n	8005d60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	2203      	movs	r2, #3
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d34:	2201      	movs	r2, #1
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 0201 	and.w	r2, r3, #1
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d003      	beq.n	8005da0 <HAL_GPIO_Init+0x100>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b12      	cmp	r3, #18
 8005d9e:	d123      	bne.n	8005de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	08da      	lsrs	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3208      	adds	r2, #8
 8005da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	220f      	movs	r2, #15
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	08da      	lsrs	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3208      	adds	r2, #8
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0203 	and.w	r2, r3, #3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80be 	beq.w	8005fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e2a:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <HAL_GPIO_Init+0x324>)
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_GPIO_Init+0x324>)
 8005e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e34:	6453      	str	r3, [r2, #68]	; 0x44
 8005e36:	4b63      	ldr	r3, [pc, #396]	; (8005fc4 <HAL_GPIO_Init+0x324>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005e42:	4a61      	ldr	r2, [pc, #388]	; (8005fc8 <HAL_GPIO_Init+0x328>)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	3302      	adds	r3, #2
 8005e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	220f      	movs	r2, #15
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a58      	ldr	r2, [pc, #352]	; (8005fcc <HAL_GPIO_Init+0x32c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d037      	beq.n	8005ede <HAL_GPIO_Init+0x23e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a57      	ldr	r2, [pc, #348]	; (8005fd0 <HAL_GPIO_Init+0x330>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d031      	beq.n	8005eda <HAL_GPIO_Init+0x23a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a56      	ldr	r2, [pc, #344]	; (8005fd4 <HAL_GPIO_Init+0x334>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02b      	beq.n	8005ed6 <HAL_GPIO_Init+0x236>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a55      	ldr	r2, [pc, #340]	; (8005fd8 <HAL_GPIO_Init+0x338>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d025      	beq.n	8005ed2 <HAL_GPIO_Init+0x232>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a54      	ldr	r2, [pc, #336]	; (8005fdc <HAL_GPIO_Init+0x33c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01f      	beq.n	8005ece <HAL_GPIO_Init+0x22e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a53      	ldr	r2, [pc, #332]	; (8005fe0 <HAL_GPIO_Init+0x340>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d019      	beq.n	8005eca <HAL_GPIO_Init+0x22a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a52      	ldr	r2, [pc, #328]	; (8005fe4 <HAL_GPIO_Init+0x344>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_GPIO_Init+0x226>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a51      	ldr	r2, [pc, #324]	; (8005fe8 <HAL_GPIO_Init+0x348>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_GPIO_Init+0x222>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a50      	ldr	r2, [pc, #320]	; (8005fec <HAL_GPIO_Init+0x34c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <HAL_GPIO_Init+0x21e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a4f      	ldr	r2, [pc, #316]	; (8005ff0 <HAL_GPIO_Init+0x350>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_GPIO_Init+0x21a>
 8005eb6:	2309      	movs	r3, #9
 8005eb8:	e012      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005eba:	230a      	movs	r3, #10
 8005ebc:	e010      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e00e      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ec2:	2307      	movs	r3, #7
 8005ec4:	e00c      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	e00a      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005eca:	2305      	movs	r3, #5
 8005ecc:	e008      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e006      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e004      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e002      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_GPIO_Init+0x240>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	f002 0203 	and.w	r2, r2, #3
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	4093      	lsls	r3, r2
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ef0:	4935      	ldr	r1, [pc, #212]	; (8005fc8 <HAL_GPIO_Init+0x328>)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	089b      	lsrs	r3, r3, #2
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005efe:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f22:	4a34      	ldr	r2, [pc, #208]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f28:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f4c:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f52:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f76:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fa0:	4a14      	ldr	r2, [pc, #80]	; (8005ff4 <HAL_GPIO_Init+0x354>)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	f67f ae86 	bls.w	8005cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40013800 	.word	0x40013800
 8005fcc:	40020000 	.word	0x40020000
 8005fd0:	40020400 	.word	0x40020400
 8005fd4:	40020800 	.word	0x40020800
 8005fd8:	40020c00 	.word	0x40020c00
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40021400 	.word	0x40021400
 8005fe4:	40021800 	.word	0x40021800
 8005fe8:	40021c00 	.word	0x40021c00
 8005fec:	40022000 	.word	0x40022000
 8005ff0:	40022400 	.word	0x40022400
 8005ff4:	40013c00 	.word	0x40013c00

08005ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
 8006014:	e001      	b.n	800601a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	807b      	strh	r3, [r7, #2]
 8006034:	4613      	mov	r3, r2
 8006036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006038:	787b      	ldrb	r3, [r7, #1]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800603e:	887a      	ldrh	r2, [r7, #2]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006044:	e003      	b.n	800604e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	041a      	lsls	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	619a      	str	r2, [r3, #24]
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
	...

0800605c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e0bf      	b.n	80061ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc ffa0 	bl	8002fc8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800609e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6999      	ldr	r1, [r3, #24]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6899      	ldr	r1, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b4a      	ldr	r3, [pc, #296]	; (80061f8 <HAL_LTDC_Init+0x19c>)
 80060d0:	400b      	ands	r3, r1
 80060d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6899      	ldr	r1, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68d9      	ldr	r1, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <HAL_LTDC_Init+0x19c>)
 80060fe:	400b      	ands	r3, r1
 8006100:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68d9      	ldr	r1, [r3, #12]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6919      	ldr	r1, [r3, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b33      	ldr	r3, [pc, #204]	; (80061f8 <HAL_LTDC_Init+0x19c>)
 800612c:	400b      	ands	r3, r1
 800612e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6919      	ldr	r1, [r3, #16]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6959      	ldr	r1, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <HAL_LTDC_Init+0x19c>)
 800615a:	400b      	ands	r3, r1
 800615c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6959      	ldr	r1, [r3, #20]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800618c:	041b      	lsls	r3, r3, #16
 800618e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0206 	orr.w	r2, r2, #6
 80061ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	f000f800 	.word	0xf000f800

080061fc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d023      	beq.n	8006266 <HAL_LTDC_IRQHandler+0x6a>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0204 	bic.w	r2, r2, #4
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2204      	movs	r2, #4
 800623e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006246:	f043 0201 	orr.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2204      	movs	r2, #4
 8006254:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f86f 	bl	8006344 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d023      	beq.n	80062b8 <HAL_LTDC_IRQHandler+0xbc>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01e      	beq.n	80062b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0202 	bic.w	r2, r2, #2
 8006288:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2202      	movs	r2, #2
 8006290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006298:	f043 0202 	orr.w	r2, r3, #2
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2204      	movs	r2, #4
 80062a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f846 	bl	8006344 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01b      	beq.n	80062fa <HAL_LTDC_IRQHandler+0xfe>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f010 fb23 	bl	8016940 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01b      	beq.n	800633c <HAL_LTDC_IRQHandler+0x140>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d016      	beq.n	800633c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0208 	bic.w	r2, r2, #8
 800631c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2208      	movs	r2, #8
 8006324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f80e 	bl	8006358 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800636c:	b5b0      	push	{r4, r5, r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_LTDC_ConfigLayer+0x1a>
 8006382:	2302      	movs	r3, #2
 8006384:	e02c      	b.n	80063e0 <HAL_LTDC_ConfigLayer+0x74>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2134      	movs	r1, #52	; 0x34
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4614      	mov	r4, r2
 80063aa:	461d      	mov	r5, r3
 80063ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f849 	bl	8006458 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2201      	movs	r2, #1
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bdb0      	pop	{r4, r5, r7, pc}

080063e8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_LTDC_ProgramLineEvent+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e023      	b.n	8006448 <HAL_LTDC_ProgramLineEvent+0x60>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006420:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40016800 	.word	0x40016800

08006458 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006474:	4413      	add	r3, r2
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	01db      	lsls	r3, r3, #7
 8006484:	4413      	add	r3, r2
 8006486:	3384      	adds	r3, #132	; 0x84
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	4611      	mov	r1, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	01d2      	lsls	r2, r2, #7
 8006494:	440a      	add	r2, r1
 8006496:	3284      	adds	r2, #132	; 0x84
 8006498:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800649c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ae:	4413      	add	r3, r2
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	01db      	lsls	r3, r3, #7
 80064bc:	440b      	add	r3, r1
 80064be:	3384      	adds	r3, #132	; 0x84
 80064c0:	4619      	mov	r1, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064d6:	4413      	add	r3, r2
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	01db      	lsls	r3, r3, #7
 80064e6:	4413      	add	r3, r2
 80064e8:	3384      	adds	r3, #132	; 0x84
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	4611      	mov	r1, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	01d2      	lsls	r2, r2, #7
 80064f6:	440a      	add	r2, r1
 80064f8:	3284      	adds	r2, #132	; 0x84
 80064fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800650e:	4413      	add	r3, r2
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	440b      	add	r3, r1
 800651e:	3384      	adds	r3, #132	; 0x84
 8006520:	4619      	mov	r1, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4313      	orrs	r3, r2
 8006526:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	01db      	lsls	r3, r3, #7
 8006532:	4413      	add	r3, r2
 8006534:	3384      	adds	r3, #132	; 0x84
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	4611      	mov	r1, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	01d2      	lsls	r2, r2, #7
 8006542:	440a      	add	r2, r1
 8006544:	3284      	adds	r2, #132	; 0x84
 8006546:	f023 0307 	bic.w	r3, r3, #7
 800654a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	4413      	add	r3, r2
 8006558:	3384      	adds	r3, #132	; 0x84
 800655a:	461a      	mov	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	4413      	add	r3, r2
 800658a:	3384      	adds	r3, #132	; 0x84
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	01db      	lsls	r3, r3, #7
 8006598:	4413      	add	r3, r2
 800659a:	3384      	adds	r3, #132	; 0x84
 800659c:	461a      	mov	r2, r3
 800659e:	2300      	movs	r3, #0
 80065a0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a8:	461a      	mov	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	440b      	add	r3, r1
 80065be:	3384      	adds	r3, #132	; 0x84
 80065c0:	4619      	mov	r1, r3
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4413      	add	r3, r2
 80065d4:	3384      	adds	r3, #132	; 0x84
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	4611      	mov	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	01d2      	lsls	r2, r2, #7
 80065e2:	440a      	add	r2, r1
 80065e4:	3284      	adds	r2, #132	; 0x84
 80065e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	4413      	add	r3, r2
 80065f8:	3384      	adds	r3, #132	; 0x84
 80065fa:	461a      	mov	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	01db      	lsls	r3, r3, #7
 800660c:	4413      	add	r3, r2
 800660e:	3384      	adds	r3, #132	; 0x84
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	440b      	add	r3, r1
 800661e:	3384      	adds	r3, #132	; 0x84
 8006620:	4619      	mov	r1, r3
 8006622:	4b58      	ldr	r3, [pc, #352]	; (8006784 <LTDC_SetConfig+0x32c>)
 8006624:	4013      	ands	r3, r2
 8006626:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	68f9      	ldr	r1, [r7, #12]
 8006632:	6809      	ldr	r1, [r1, #0]
 8006634:	4608      	mov	r0, r1
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	01c9      	lsls	r1, r1, #7
 800663a:	4401      	add	r1, r0
 800663c:	3184      	adds	r1, #132	; 0x84
 800663e:	4313      	orrs	r3, r2
 8006640:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	01db      	lsls	r3, r3, #7
 800664c:	4413      	add	r3, r2
 800664e:	3384      	adds	r3, #132	; 0x84
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	01db      	lsls	r3, r3, #7
 800665c:	4413      	add	r3, r2
 800665e:	3384      	adds	r3, #132	; 0x84
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	01db      	lsls	r3, r3, #7
 8006670:	4413      	add	r3, r2
 8006672:	3384      	adds	r3, #132	; 0x84
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006684:	2304      	movs	r3, #4
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e01b      	b.n	80066c2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d102      	bne.n	8006698 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006692:	2303      	movs	r3, #3
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	e014      	b.n	80066c2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b04      	cmp	r3, #4
 800669e:	d00b      	beq.n	80066b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d007      	beq.n	80066b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d003      	beq.n	80066b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066b4:	2b07      	cmp	r3, #7
 80066b6:	d102      	bne.n	80066be <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80066b8:	2302      	movs	r3, #2
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e001      	b.n	80066c2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80066be:	2301      	movs	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	01db      	lsls	r3, r3, #7
 80066cc:	4413      	add	r3, r2
 80066ce:	3384      	adds	r3, #132	; 0x84
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	4611      	mov	r1, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	01d2      	lsls	r2, r2, #7
 80066dc:	440a      	add	r2, r1
 80066de:	3284      	adds	r2, #132	; 0x84
 80066e0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80066e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	041a      	lsls	r2, r3, #16
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1acb      	subs	r3, r1, r3
 80066fc:	69f9      	ldr	r1, [r7, #28]
 80066fe:	fb01 f303 	mul.w	r3, r1, r3
 8006702:	3303      	adds	r3, #3
 8006704:	68f9      	ldr	r1, [r7, #12]
 8006706:	6809      	ldr	r1, [r1, #0]
 8006708:	4608      	mov	r0, r1
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	01c9      	lsls	r1, r1, #7
 800670e:	4401      	add	r1, r0
 8006710:	3184      	adds	r1, #132	; 0x84
 8006712:	4313      	orrs	r3, r2
 8006714:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	01db      	lsls	r3, r3, #7
 8006720:	4413      	add	r3, r2
 8006722:	3384      	adds	r3, #132	; 0x84
 8006724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4619      	mov	r1, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	01db      	lsls	r3, r3, #7
 8006730:	440b      	add	r3, r1
 8006732:	3384      	adds	r3, #132	; 0x84
 8006734:	4619      	mov	r1, r3
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <LTDC_SetConfig+0x330>)
 8006738:	4013      	ands	r3, r2
 800673a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	01db      	lsls	r3, r3, #7
 8006746:	4413      	add	r3, r2
 8006748:	3384      	adds	r3, #132	; 0x84
 800674a:	461a      	mov	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	01db      	lsls	r3, r3, #7
 800675c:	4413      	add	r3, r2
 800675e:	3384      	adds	r3, #132	; 0x84
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	4611      	mov	r1, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	01d2      	lsls	r2, r2, #7
 800676c:	440a      	add	r2, r1
 800676e:	3284      	adds	r2, #132	; 0x84
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	6013      	str	r3, [r2, #0]
}
 8006776:	bf00      	nop
 8006778:	3724      	adds	r7, #36	; 0x24
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	fffff8f8 	.word	0xfffff8f8
 8006788:	fffff800 	.word	0xfffff800

0800678c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a04      	ldr	r2, [pc, #16]	; (80067a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679a:	6013      	str	r3, [r2, #0]
}
 800679c:	bf00      	nop
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40007000 	.word	0x40007000

080067ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067b6:	4b23      	ldr	r3, [pc, #140]	; (8006844 <HAL_PWREx_EnableOverDrive+0x98>)
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	4a22      	ldr	r2, [pc, #136]	; (8006844 <HAL_PWREx_EnableOverDrive+0x98>)
 80067bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c0:	6413      	str	r3, [r2, #64]	; 0x40
 80067c2:	4b20      	ldr	r3, [pc, #128]	; (8006844 <HAL_PWREx_EnableOverDrive+0x98>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067da:	f7fd fb17 	bl	8003e0c <HAL_GetTick>
 80067de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067e0:	e009      	b.n	80067f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067e2:	f7fd fb13 	bl	8003e0c <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f0:	d901      	bls.n	80067f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e022      	b.n	800683c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006802:	d1ee      	bne.n	80067e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006804:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a0f      	ldr	r2, [pc, #60]	; (8006848 <HAL_PWREx_EnableOverDrive+0x9c>)
 800680a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006810:	f7fd fafc 	bl	8003e0c <HAL_GetTick>
 8006814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006816:	e009      	b.n	800682c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006818:	f7fd faf8 	bl	8003e0c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006826:	d901      	bls.n	800682c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e007      	b.n	800683c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <HAL_PWREx_EnableOverDrive+0x9c>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006838:	d1ee      	bne.n	8006818 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40023800 	.word	0x40023800
 8006848:	40007000 	.word	0x40007000

0800684c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af02      	add	r7, sp, #8
 8006852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006854:	f7fd fada 	bl	8003e0c <HAL_GetTick>
 8006858:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e067      	b.n	8006934 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fc fc6d 	bl	8003158 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800687e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f85e 	bl	8006944 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	3b01      	subs	r3, #1
 8006898:	021a      	lsls	r2, r3, #8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	2120      	movs	r1, #32
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f856 	bl	8006960 <QSPI_WaitFlagStateUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d135      	bne.n	800692a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b1d      	ldr	r3, [pc, #116]	; (800693c <HAL_QSPI_Init+0xf0>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6852      	ldr	r2, [r2, #4]
 80068cc:	0611      	lsls	r1, r2, #24
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68d2      	ldr	r2, [r2, #12]
 80068d2:	4311      	orrs	r1, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	69d2      	ldr	r2, [r2, #28]
 80068d8:	4311      	orrs	r1, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6a12      	ldr	r2, [r2, #32]
 80068de:	4311      	orrs	r1, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4b14      	ldr	r3, [pc, #80]	; (8006940 <HAL_QSPI_Init+0xf4>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6912      	ldr	r2, [r2, #16]
 80068f6:	0411      	lsls	r1, r2, #16
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6952      	ldr	r2, [r2, #20]
 80068fc:	4311      	orrs	r1, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6992      	ldr	r2, [r2, #24]
 8006902:	4311      	orrs	r1, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	430b      	orrs	r3, r1
 800690a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006932:	7afb      	ldrb	r3, [r7, #11]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	00ffff2f 	.word	0x00ffff2f
 8006940:	ffe0f8fe 	.word	0xffe0f8fe

08006944 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006970:	e01a      	b.n	80069a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d016      	beq.n	80069a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697a:	f7fd fa47 	bl	8003e0c <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	429a      	cmp	r2, r3
 8006988:	d302      	bcc.n	8006990 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2204      	movs	r2, #4
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699c:	f043 0201 	orr.w	r2, r3, #1
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e00e      	b.n	80069c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bf14      	ite	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	2300      	moveq	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d1d6      	bne.n	8006972 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80069d8:	2300      	movs	r3, #0
 80069da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e291      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8087 	beq.w	8006b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069f4:	4b96      	ldr	r3, [pc, #600]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 030c 	and.w	r3, r3, #12
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d00c      	beq.n	8006a1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a00:	4b93      	ldr	r3, [pc, #588]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 030c 	and.w	r3, r3, #12
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d112      	bne.n	8006a32 <HAL_RCC_OscConfig+0x62>
 8006a0c:	4b90      	ldr	r3, [pc, #576]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a18:	d10b      	bne.n	8006a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a1a:	4b8d      	ldr	r3, [pc, #564]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d06c      	beq.n	8006b00 <HAL_RCC_OscConfig+0x130>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d168      	bne.n	8006b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e26b      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3a:	d106      	bne.n	8006a4a <HAL_RCC_OscConfig+0x7a>
 8006a3c:	4b84      	ldr	r3, [pc, #528]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a83      	ldr	r2, [pc, #524]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e02e      	b.n	8006aa8 <HAL_RCC_OscConfig+0xd8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x9c>
 8006a52:	4b7f      	ldr	r3, [pc, #508]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7e      	ldr	r2, [pc, #504]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b7c      	ldr	r3, [pc, #496]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7b      	ldr	r2, [pc, #492]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e01d      	b.n	8006aa8 <HAL_RCC_OscConfig+0xd8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a74:	d10c      	bne.n	8006a90 <HAL_RCC_OscConfig+0xc0>
 8006a76:	4b76      	ldr	r3, [pc, #472]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a75      	ldr	r2, [pc, #468]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	4b73      	ldr	r3, [pc, #460]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a72      	ldr	r2, [pc, #456]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	e00b      	b.n	8006aa8 <HAL_RCC_OscConfig+0xd8>
 8006a90:	4b6f      	ldr	r3, [pc, #444]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a6e      	ldr	r2, [pc, #440]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	4b6c      	ldr	r3, [pc, #432]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d013      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fd f9ac 	bl	8003e0c <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab8:	f7fd f9a8 	bl	8003e0c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b64      	cmp	r3, #100	; 0x64
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e21f      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aca:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f0      	beq.n	8006ab8 <HAL_RCC_OscConfig+0xe8>
 8006ad6:	e014      	b.n	8006b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fd f998 	bl	8003e0c <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae0:	f7fd f994 	bl	8003e0c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b64      	cmp	r3, #100	; 0x64
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e20b      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af2:	4b57      	ldr	r3, [pc, #348]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x110>
 8006afe:	e000      	b.n	8006b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d069      	beq.n	8006be2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b0e:	4b50      	ldr	r3, [pc, #320]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1a:	4b4d      	ldr	r3, [pc, #308]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d11c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x190>
 8006b26:	4b4a      	ldr	r3, [pc, #296]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d116      	bne.n	8006b60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b32:	4b47      	ldr	r3, [pc, #284]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_RCC_OscConfig+0x17a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d001      	beq.n	8006b4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e1df      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4a:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	493d      	ldr	r1, [pc, #244]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5e:	e040      	b.n	8006be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d023      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b68:	4b39      	ldr	r3, [pc, #228]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a38      	ldr	r2, [pc, #224]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fd f94a 	bl	8003e0c <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b7c:	f7fd f946 	bl	8003e0c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e1bd      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8e:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b9a:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4929      	ldr	r1, [pc, #164]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	e018      	b.n	8006be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bb0:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbc:	f7fd f926 	bl	8003e0c <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc4:	f7fd f922 	bl	8003e0c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e199      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d038      	beq.n	8006c60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d019      	beq.n	8006c2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bf6:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bfa:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c02:	f7fd f903 	bl	8003e0c <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c0a:	f7fd f8ff 	bl	8003e0c <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e176      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0x23a>
 8006c28:	e01a      	b.n	8006c60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <HAL_RCC_OscConfig+0x280>)
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c36:	f7fd f8e9 	bl	8003e0c <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3c:	e00a      	b.n	8006c54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3e:	f7fd f8e5 	bl	8003e0c <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d903      	bls.n	8006c54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e15c      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
 8006c50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c54:	4b91      	ldr	r3, [pc, #580]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ee      	bne.n	8006c3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80a4 	beq.w	8006db6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c6e:	4b8b      	ldr	r3, [pc, #556]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10d      	bne.n	8006c96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7a:	4b88      	ldr	r3, [pc, #544]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4a87      	ldr	r2, [pc, #540]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c84:	6413      	str	r3, [r2, #64]	; 0x40
 8006c86:	4b85      	ldr	r3, [pc, #532]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	60bb      	str	r3, [r7, #8]
 8006c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c92:	2301      	movs	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c96:	4b82      	ldr	r3, [pc, #520]	; (8006ea0 <HAL_RCC_OscConfig+0x4d0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d118      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ca2:	4b7f      	ldr	r3, [pc, #508]	; (8006ea0 <HAL_RCC_OscConfig+0x4d0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a7e      	ldr	r2, [pc, #504]	; (8006ea0 <HAL_RCC_OscConfig+0x4d0>)
 8006ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cae:	f7fd f8ad 	bl	8003e0c <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb6:	f7fd f8a9 	bl	8003e0c <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b64      	cmp	r3, #100	; 0x64
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e120      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc8:	4b75      	ldr	r3, [pc, #468]	; (8006ea0 <HAL_RCC_OscConfig+0x4d0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d106      	bne.n	8006cea <HAL_RCC_OscConfig+0x31a>
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce0:	4a6e      	ldr	r2, [pc, #440]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce8:	e02d      	b.n	8006d46 <HAL_RCC_OscConfig+0x376>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10c      	bne.n	8006d0c <HAL_RCC_OscConfig+0x33c>
 8006cf2:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4a69      	ldr	r2, [pc, #420]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006cfe:	4b67      	ldr	r3, [pc, #412]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	4a66      	ldr	r2, [pc, #408]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0a:	e01c      	b.n	8006d46 <HAL_RCC_OscConfig+0x376>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b05      	cmp	r3, #5
 8006d12:	d10c      	bne.n	8006d2e <HAL_RCC_OscConfig+0x35e>
 8006d14:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d18:	4a60      	ldr	r2, [pc, #384]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d1a:	f043 0304 	orr.w	r3, r3, #4
 8006d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d20:	4b5e      	ldr	r3, [pc, #376]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	4a5d      	ldr	r2, [pc, #372]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2c:	e00b      	b.n	8006d46 <HAL_RCC_OscConfig+0x376>
 8006d2e:	4b5b      	ldr	r3, [pc, #364]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	4a5a      	ldr	r2, [pc, #360]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3a:	4b58      	ldr	r3, [pc, #352]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	4a57      	ldr	r2, [pc, #348]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d015      	beq.n	8006d7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4e:	f7fd f85d 	bl	8003e0c <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d54:	e00a      	b.n	8006d6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d56:	f7fd f859 	bl	8003e0c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e0ce      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d6c:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0ee      	beq.n	8006d56 <HAL_RCC_OscConfig+0x386>
 8006d78:	e014      	b.n	8006da4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7a:	f7fd f847 	bl	8003e0c <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d80:	e00a      	b.n	8006d98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fd f843 	bl	8003e0c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e0b8      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d98:	4b40      	ldr	r3, [pc, #256]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ee      	bne.n	8006d82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d105      	bne.n	8006db6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006daa:	4b3c      	ldr	r3, [pc, #240]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	4a3b      	ldr	r2, [pc, #236]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80a4 	beq.w	8006f08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dc0:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 030c 	and.w	r3, r3, #12
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d06b      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d149      	bne.n	8006e68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd4:	4b31      	ldr	r3, [pc, #196]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a30      	ldr	r2, [pc, #192]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fd f814 	bl	8003e0c <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fd f810 	bl	8003e0c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e087      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfa:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69da      	ldr	r2, [r3, #28]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	019b      	lsls	r3, r3, #6
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	061b      	lsls	r3, r3, #24
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e34:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fc ffe4 	bl	8003e0c <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e48:	f7fc ffe0 	bl	8003e0c <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e057      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0x478>
 8006e66:	e04f      	b.n	8006f08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e68:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e74:	f7fc ffca 	bl	8003e0c <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7c:	f7fc ffc6 	bl	8003e0c <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e03d      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8e:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <HAL_RCC_OscConfig+0x4cc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f0      	bne.n	8006e7c <HAL_RCC_OscConfig+0x4ac>
 8006e9a:	e035      	b.n	8006f08 <HAL_RCC_OscConfig+0x538>
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ea4:	4b1b      	ldr	r3, [pc, #108]	; (8006f14 <HAL_RCC_OscConfig+0x544>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d028      	beq.n	8006f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d121      	bne.n	8006f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d11a      	bne.n	8006f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d111      	bne.n	8006f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	3b01      	subs	r3, #1
 8006eee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d107      	bne.n	8006f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d001      	beq.n	8006f08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40023800 	.word	0x40023800

08006f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0d0      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f30:	4b6a      	ldr	r3, [pc, #424]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d910      	bls.n	8006f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	4b67      	ldr	r3, [pc, #412]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f023 020f 	bic.w	r2, r3, #15
 8006f46:	4965      	ldr	r1, [pc, #404]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b63      	ldr	r3, [pc, #396]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0b8      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f78:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	4a58      	ldr	r2, [pc, #352]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f90:	4b53      	ldr	r3, [pc, #332]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4a52      	ldr	r2, [pc, #328]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f9c:	4b50      	ldr	r3, [pc, #320]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	494d      	ldr	r1, [pc, #308]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d040      	beq.n	800703c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d107      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc2:	4b47      	ldr	r3, [pc, #284]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d115      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e07f      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d107      	bne.n	8006fea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fda:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e073      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fea:	4b3d      	ldr	r3, [pc, #244]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e06b      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 0203 	bic.w	r2, r3, #3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4936      	ldr	r1, [pc, #216]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	4313      	orrs	r3, r2
 800700a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800700c:	f7fc fefe 	bl	8003e0c <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007012:	e00a      	b.n	800702a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007014:	f7fc fefa 	bl	8003e0c <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e053      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702a:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 020c 	and.w	r2, r3, #12
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	429a      	cmp	r2, r3
 800703a:	d1eb      	bne.n	8007014 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d210      	bcs.n	800706c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f023 020f 	bic.w	r2, r3, #15
 8007052:	4922      	ldr	r1, [pc, #136]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800705a:	4b20      	ldr	r3, [pc, #128]	; (80070dc <HAL_RCC_ClockConfig+0x1c4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d001      	beq.n	800706c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e032      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4916      	ldr	r1, [pc, #88]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007096:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	490e      	ldr	r1, [pc, #56]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070aa:	f000 f821 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <HAL_RCC_ClockConfig+0x1c8>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	490a      	ldr	r1, [pc, #40]	; (80070e4 <HAL_RCC_ClockConfig+0x1cc>)
 80070bc:	5ccb      	ldrb	r3, [r1, r3]
 80070be:	fa22 f303 	lsr.w	r3, r2, r3
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <HAL_RCC_ClockConfig+0x1d0>)
 80070c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCC_ClockConfig+0x1d4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fc fce8 	bl	8003aa0 <HAL_InitTick>

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40023c00 	.word	0x40023c00
 80070e0:	40023800 	.word	0x40023800
 80070e4:	080280e4 	.word	0x080280e4
 80070e8:	20000014 	.word	0x20000014
 80070ec:	20000018 	.word	0x20000018

080070f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070f4:	b090      	sub	sp, #64	; 0x40
 80070f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007100:	2300      	movs	r3, #0
 8007102:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007108:	4b59      	ldr	r3, [pc, #356]	; (8007270 <HAL_RCC_GetSysClockFreq+0x180>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 030c 	and.w	r3, r3, #12
 8007110:	2b08      	cmp	r3, #8
 8007112:	d00d      	beq.n	8007130 <HAL_RCC_GetSysClockFreq+0x40>
 8007114:	2b08      	cmp	r3, #8
 8007116:	f200 80a1 	bhi.w	800725c <HAL_RCC_GetSysClockFreq+0x16c>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0x34>
 800711e:	2b04      	cmp	r3, #4
 8007120:	d003      	beq.n	800712a <HAL_RCC_GetSysClockFreq+0x3a>
 8007122:	e09b      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007124:	4b53      	ldr	r3, [pc, #332]	; (8007274 <HAL_RCC_GetSysClockFreq+0x184>)
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007128:	e09b      	b.n	8007262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800712a:	4b53      	ldr	r3, [pc, #332]	; (8007278 <HAL_RCC_GetSysClockFreq+0x188>)
 800712c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800712e:	e098      	b.n	8007262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007130:	4b4f      	ldr	r3, [pc, #316]	; (8007270 <HAL_RCC_GetSysClockFreq+0x180>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800713a:	4b4d      	ldr	r3, [pc, #308]	; (8007270 <HAL_RCC_GetSysClockFreq+0x180>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d028      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007146:	4b4a      	ldr	r3, [pc, #296]	; (8007270 <HAL_RCC_GetSysClockFreq+0x180>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	2200      	movs	r2, #0
 800714e:	623b      	str	r3, [r7, #32]
 8007150:	627a      	str	r2, [r7, #36]	; 0x24
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007158:	2100      	movs	r1, #0
 800715a:	4b47      	ldr	r3, [pc, #284]	; (8007278 <HAL_RCC_GetSysClockFreq+0x188>)
 800715c:	fb03 f201 	mul.w	r2, r3, r1
 8007160:	2300      	movs	r3, #0
 8007162:	fb00 f303 	mul.w	r3, r0, r3
 8007166:	4413      	add	r3, r2
 8007168:	4a43      	ldr	r2, [pc, #268]	; (8007278 <HAL_RCC_GetSysClockFreq+0x188>)
 800716a:	fba0 1202 	umull	r1, r2, r0, r2
 800716e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007170:	460a      	mov	r2, r1
 8007172:	62ba      	str	r2, [r7, #40]	; 0x28
 8007174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007176:	4413      	add	r3, r2
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800717a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717c:	2200      	movs	r2, #0
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	61fa      	str	r2, [r7, #28]
 8007182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007186:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800718a:	f7f9 fc77 	bl	8000a7c <__aeabi_uldivmod>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4613      	mov	r3, r2
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007196:	e053      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007198:	4b35      	ldr	r3, [pc, #212]	; (8007270 <HAL_RCC_GetSysClockFreq+0x180>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	099b      	lsrs	r3, r3, #6
 800719e:	2200      	movs	r2, #0
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	617a      	str	r2, [r7, #20]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071aa:	f04f 0b00 	mov.w	fp, #0
 80071ae:	4652      	mov	r2, sl
 80071b0:	465b      	mov	r3, fp
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f04f 0100 	mov.w	r1, #0
 80071ba:	0159      	lsls	r1, r3, #5
 80071bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071c0:	0150      	lsls	r0, r2, #5
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	ebb2 080a 	subs.w	r8, r2, sl
 80071ca:	eb63 090b 	sbc.w	r9, r3, fp
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80071da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80071de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80071e2:	ebb2 0408 	subs.w	r4, r2, r8
 80071e6:	eb63 0509 	sbc.w	r5, r3, r9
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	00eb      	lsls	r3, r5, #3
 80071f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071f8:	00e2      	lsls	r2, r4, #3
 80071fa:	4614      	mov	r4, r2
 80071fc:	461d      	mov	r5, r3
 80071fe:	eb14 030a 	adds.w	r3, r4, sl
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	eb45 030b 	adc.w	r3, r5, fp
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007216:	4629      	mov	r1, r5
 8007218:	028b      	lsls	r3, r1, #10
 800721a:	4621      	mov	r1, r4
 800721c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007220:	4621      	mov	r1, r4
 8007222:	028a      	lsls	r2, r1, #10
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	2200      	movs	r2, #0
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	60fa      	str	r2, [r7, #12]
 8007230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007234:	f7f9 fc22 	bl	8000a7c <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4613      	mov	r3, r2
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <HAL_RCC_GetSysClockFreq+0x180>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	0c1b      	lsrs	r3, r3, #16
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	3301      	adds	r3, #1
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800725a:	e002      	b.n	8007262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <HAL_RCC_GetSysClockFreq+0x184>)
 800725e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007264:	4618      	mov	r0, r3
 8007266:	3740      	adds	r7, #64	; 0x40
 8007268:	46bd      	mov	sp, r7
 800726a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726e:	bf00      	nop
 8007270:	40023800 	.word	0x40023800
 8007274:	00f42400 	.word	0x00f42400
 8007278:	017d7840 	.word	0x017d7840

0800727c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007280:	4b03      	ldr	r3, [pc, #12]	; (8007290 <HAL_RCC_GetHCLKFreq+0x14>)
 8007282:	681b      	ldr	r3, [r3, #0]
}
 8007284:	4618      	mov	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20000014 	.word	0x20000014

08007294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007298:	f7ff fff0 	bl	800727c <HAL_RCC_GetHCLKFreq>
 800729c:	4602      	mov	r2, r0
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	0a9b      	lsrs	r3, r3, #10
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	4903      	ldr	r1, [pc, #12]	; (80072b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072aa:	5ccb      	ldrb	r3, [r1, r3]
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40023800 	.word	0x40023800
 80072b8:	080280f4 	.word	0x080280f4

080072bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072c0:	f7ff ffdc 	bl	800727c <HAL_RCC_GetHCLKFreq>
 80072c4:	4602      	mov	r2, r0
 80072c6:	4b05      	ldr	r3, [pc, #20]	; (80072dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	0b5b      	lsrs	r3, r3, #13
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	4903      	ldr	r1, [pc, #12]	; (80072e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072d2:	5ccb      	ldrb	r3, [r1, r3]
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40023800 	.word	0x40023800
 80072e0:	080280f4 	.word	0x080280f4

080072e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220f      	movs	r2, #15
 80072f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072f4:	4b12      	ldr	r3, [pc, #72]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 0203 	and.w	r2, r3, #3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800730c:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007318:	4b09      	ldr	r3, [pc, #36]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	08db      	lsrs	r3, r3, #3
 800731e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <HAL_RCC_GetClockConfig+0x60>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 020f 	and.w	r2, r3, #15
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	601a      	str	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40023800 	.word	0x40023800
 8007344:	40023c00 	.word	0x40023c00

08007348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d012      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007370:	4b69      	ldr	r3, [pc, #420]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	4a68      	ldr	r2, [pc, #416]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800737a:	6093      	str	r3, [r2, #8]
 800737c:	4b66      	ldr	r3, [pc, #408]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007384:	4964      	ldr	r1, [pc, #400]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007386:	4313      	orrs	r3, r2
 8007388:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007392:	2301      	movs	r3, #1
 8007394:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073a2:	4b5d      	ldr	r3, [pc, #372]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	4959      	ldr	r1, [pc, #356]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c0:	d101      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073c2:	2301      	movs	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d017      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073de:	4b4e      	ldr	r3, [pc, #312]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	494a      	ldr	r1, [pc, #296]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073fc:	d101      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073fe:	2301      	movs	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800741a:	2301      	movs	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 808b 	beq.w	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800742c:	4b3a      	ldr	r3, [pc, #232]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	4a39      	ldr	r2, [pc, #228]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007436:	6413      	str	r3, [r2, #64]	; 0x40
 8007438:	4b37      	ldr	r3, [pc, #220]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007444:	4b35      	ldr	r3, [pc, #212]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a34      	ldr	r2, [pc, #208]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800744a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007450:	f7fc fcdc 	bl	8003e0c <HAL_GetTick>
 8007454:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007456:	e008      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007458:	f7fc fcd8 	bl	8003e0c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b64      	cmp	r3, #100	; 0x64
 8007464:	d901      	bls.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e357      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800746a:	4b2c      	ldr	r3, [pc, #176]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007476:	4b28      	ldr	r3, [pc, #160]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d035      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	429a      	cmp	r2, r3
 8007492:	d02e      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007494:	4b20      	ldr	r3, [pc, #128]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800749e:	4b1e      	ldr	r3, [pc, #120]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	4a1a      	ldr	r2, [pc, #104]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074bc:	4b16      	ldr	r3, [pc, #88]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d114      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fc fca0 	bl	8003e0c <HAL_GetTick>
 80074cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ce:	e00a      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d0:	f7fc fc9c 	bl	8003e0c <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	f241 3288 	movw	r2, #5000	; 0x1388
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e319      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e6:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0ee      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fe:	d111      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800750c:	4b04      	ldr	r3, [pc, #16]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800750e:	400b      	ands	r3, r1
 8007510:	4901      	ldr	r1, [pc, #4]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007512:	4313      	orrs	r3, r2
 8007514:	608b      	str	r3, [r1, #8]
 8007516:	e00b      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007518:	40023800 	.word	0x40023800
 800751c:	40007000 	.word	0x40007000
 8007520:	0ffffcff 	.word	0x0ffffcff
 8007524:	4baa      	ldr	r3, [pc, #680]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4aa9      	ldr	r2, [pc, #676]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800752e:	6093      	str	r3, [r2, #8]
 8007530:	4ba7      	ldr	r3, [pc, #668]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753c:	49a4      	ldr	r1, [pc, #656]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753e:	4313      	orrs	r3, r2
 8007540:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d010      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800754e:	4ba0      	ldr	r3, [pc, #640]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007554:	4a9e      	ldr	r2, [pc, #632]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800755a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800755e:	4b9c      	ldr	r3, [pc, #624]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	4999      	ldr	r1, [pc, #612]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800757c:	4b94      	ldr	r3, [pc, #592]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800758a:	4991      	ldr	r1, [pc, #580]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800759e:	4b8c      	ldr	r3, [pc, #560]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ac:	4988      	ldr	r1, [pc, #544]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075c0:	4b83      	ldr	r3, [pc, #524]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ce:	4980      	ldr	r1, [pc, #512]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075e2:	4b7b      	ldr	r3, [pc, #492]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f0:	4977      	ldr	r1, [pc, #476]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007604:	4b72      	ldr	r3, [pc, #456]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f023 0203 	bic.w	r2, r3, #3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	496f      	ldr	r1, [pc, #444]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007626:	4b6a      	ldr	r3, [pc, #424]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	f023 020c 	bic.w	r2, r3, #12
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007634:	4966      	ldr	r1, [pc, #408]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007648:	4b61      	ldr	r3, [pc, #388]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007656:	495e      	ldr	r1, [pc, #376]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800766a:	4b59      	ldr	r3, [pc, #356]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007670:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007678:	4955      	ldr	r1, [pc, #340]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800768c:	4b50      	ldr	r3, [pc, #320]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	494d      	ldr	r1, [pc, #308]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076ae:	4b48      	ldr	r3, [pc, #288]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076bc:	4944      	ldr	r1, [pc, #272]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80076d0:	4b3f      	ldr	r3, [pc, #252]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076de:	493c      	ldr	r1, [pc, #240]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076f2:	4b37      	ldr	r3, [pc, #220]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007700:	4933      	ldr	r1, [pc, #204]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007714:	4b2e      	ldr	r3, [pc, #184]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007722:	492b      	ldr	r1, [pc, #172]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d011      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007736:	4b26      	ldr	r3, [pc, #152]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007744:	4922      	ldr	r1, [pc, #136]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007754:	d101      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007756:	2301      	movs	r3, #1
 8007758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007766:	2301      	movs	r3, #1
 8007768:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007784:	4912      	ldr	r1, [pc, #72]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007786:	4313      	orrs	r3, r2
 8007788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007798:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a8:	4909      	ldr	r1, [pc, #36]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d005      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077be:	f040 80d9 	bne.w	8007974 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077c2:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a02      	ldr	r2, [pc, #8]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	e001      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80077d0:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d4:	f7fc fb1a 	bl	8003e0c <HAL_GetTick>
 80077d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077dc:	f7fc fb16 	bl	8003e0c <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b64      	cmp	r3, #100	; 0x64
 80077e8:	d901      	bls.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e195      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077ee:	4b6d      	ldr	r3, [pc, #436]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f0      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d021      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11d      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800780e:	4b65      	ldr	r3, [pc, #404]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007814:	0c1b      	lsrs	r3, r3, #16
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800781c:	4b61      	ldr	r3, [pc, #388]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800781e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007822:	0e1b      	lsrs	r3, r3, #24
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	019a      	lsls	r2, r3, #6
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	071b      	lsls	r3, r3, #28
 8007842:	4958      	ldr	r1, [pc, #352]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007844:	4313      	orrs	r3, r2
 8007846:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800785e:	d00a      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007868:	2b00      	cmp	r3, #0
 800786a:	d02e      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007874:	d129      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007876:	4b4b      	ldr	r3, [pc, #300]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007884:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788a:	0f1b      	lsrs	r3, r3, #28
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	019a      	lsls	r2, r3, #6
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	061b      	lsls	r3, r3, #24
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	493e      	ldr	r1, [pc, #248]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078b2:	4b3c      	ldr	r3, [pc, #240]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	f023 021f 	bic.w	r2, r3, #31
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	3b01      	subs	r3, #1
 80078c2:	4938      	ldr	r1, [pc, #224]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01d      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078d6:	4b33      	ldr	r3, [pc, #204]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078dc:	0e1b      	lsrs	r3, r3, #24
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078e4:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ea:	0f1b      	lsrs	r3, r3, #28
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	019a      	lsls	r2, r3, #6
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	041b      	lsls	r3, r3, #16
 80078fe:	431a      	orrs	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	061b      	lsls	r3, r3, #24
 8007904:	431a      	orrs	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	071b      	lsls	r3, r3, #28
 800790a:	4926      	ldr	r1, [pc, #152]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d011      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	019a      	lsls	r2, r3, #6
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	041b      	lsls	r3, r3, #16
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	071b      	lsls	r3, r3, #28
 800793a:	491a      	ldr	r1, [pc, #104]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007942:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a17      	ldr	r2, [pc, #92]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800794c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794e:	f7fc fa5d 	bl	8003e0c <HAL_GetTick>
 8007952:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007954:	e008      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007956:	f7fc fa59 	bl	8003e0c <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b64      	cmp	r3, #100	; 0x64
 8007962:	d901      	bls.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e0d8      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007968:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0f0      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	2b01      	cmp	r3, #1
 8007978:	f040 80ce 	bne.w	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a08      	ldr	r2, [pc, #32]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007988:	f7fc fa40 	bl	8003e0c <HAL_GetTick>
 800798c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800798e:	e00b      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007990:	f7fc fa3c 	bl	8003e0c <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b64      	cmp	r3, #100	; 0x64
 800799c:	d904      	bls.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e0bb      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80079a2:	bf00      	nop
 80079a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079a8:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b4:	d0ec      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02e      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d12a      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079de:	4b51      	ldr	r3, [pc, #324]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079ec:	4b4d      	ldr	r3, [pc, #308]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f2:	0f1b      	lsrs	r3, r3, #28
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	019a      	lsls	r2, r3, #6
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	061b      	lsls	r3, r3, #24
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	071b      	lsls	r3, r3, #28
 8007a12:	4944      	ldr	r1, [pc, #272]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a1a:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	493d      	ldr	r1, [pc, #244]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d022      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a48:	d11d      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a4a:	4b36      	ldr	r3, [pc, #216]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a50:	0e1b      	lsrs	r3, r3, #24
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a58:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5e:	0f1b      	lsrs	r3, r3, #28
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	019a      	lsls	r2, r3, #6
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	431a      	orrs	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	4929      	ldr	r1, [pc, #164]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d028      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	0e1b      	lsrs	r3, r3, #24
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007aa0:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	019a      	lsls	r2, r3, #6
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	071b      	lsls	r3, r3, #28
 8007ac6:	4917      	ldr	r1, [pc, #92]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007ace:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4911      	ldr	r1, [pc, #68]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a0e      	ldr	r2, [pc, #56]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af0:	f7fc f98c 	bl	8003e0c <HAL_GetTick>
 8007af4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007af8:	f7fc f988 	bl	8003e0c <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b64      	cmp	r3, #100	; 0x64
 8007b04:	d901      	bls.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e007      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b16:	d1ef      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3720      	adds	r7, #32
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40023800 	.word	0x40023800

08007b28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b46:	f040 808d 	bne.w	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007b4a:	4b93      	ldr	r3, [pc, #588]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b50:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b58:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b60:	d07c      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b68:	d87b      	bhi.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b76:	d039      	beq.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007b78:	e073      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b7a:	4b87      	ldr	r3, [pc, #540]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b86:	4b84      	ldr	r3, [pc, #528]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b8e:	4a83      	ldr	r2, [pc, #524]	; (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b94:	613b      	str	r3, [r7, #16]
 8007b96:	e007      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b98:	4b7f      	ldr	r3, [pc, #508]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba0:	4a7f      	ldr	r2, [pc, #508]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007ba8:	4b7b      	ldr	r3, [pc, #492]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	0e1b      	lsrs	r3, r3, #24
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007bb6:	4b78      	ldr	r3, [pc, #480]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbc:	099b      	lsrs	r3, r3, #6
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	fb03 f202 	mul.w	r2, r3, r2
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007bd0:	4b71      	ldr	r3, [pc, #452]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be8:	617b      	str	r3, [r7, #20]
        break;
 8007bea:	e03b      	b.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007bec:	4b6a      	ldr	r3, [pc, #424]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d108      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bf8:	4b67      	ldr	r3, [pc, #412]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c00:	4a66      	ldr	r2, [pc, #408]	; (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	613b      	str	r3, [r7, #16]
 8007c08:	e007      	b.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c0a:	4b63      	ldr	r3, [pc, #396]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c12:	4a63      	ldr	r2, [pc, #396]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c18:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007c1a:	4b5f      	ldr	r3, [pc, #380]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007c28:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2e:	099b      	lsrs	r3, r3, #6
 8007c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	fb03 f202 	mul.w	r2, r3, r2
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007c42:	4b55      	ldr	r3, [pc, #340]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c58:	617b      	str	r3, [r7, #20]
        break;
 8007c5a:	e003      	b.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c5c:	4b51      	ldr	r3, [pc, #324]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007c5e:	617b      	str	r3, [r7, #20]
        break;
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007c62:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6a:	f040 808d 	bne.w	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007c6e:	4b4a      	ldr	r3, [pc, #296]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c74:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007c7c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c84:	d07c      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c8c:	d87b      	bhi.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c9a:	d039      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007c9c:	e073      	b.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c9e:	4b3e      	ldr	r3, [pc, #248]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d108      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007caa:	4b3b      	ldr	r3, [pc, #236]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb2:	4a3a      	ldr	r2, [pc, #232]	; (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	e007      	b.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007cbc:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cc4:	4a36      	ldr	r2, [pc, #216]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007ccc:	4b32      	ldr	r3, [pc, #200]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	0e1b      	lsrs	r3, r3, #24
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007cda:	4b2f      	ldr	r3, [pc, #188]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce0:	099b      	lsrs	r3, r3, #6
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	fb03 f202 	mul.w	r2, r3, r2
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007cf4:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cfa:	0a1b      	lsrs	r3, r3, #8
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	3301      	adds	r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0c:	617b      	str	r3, [r7, #20]
        break;
 8007d0e:	e03b      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d10:	4b21      	ldr	r3, [pc, #132]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d108      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d24:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	e007      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d36:	4a1a      	ldr	r2, [pc, #104]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d44:	0e1b      	lsrs	r3, r3, #24
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d52:	099b      	lsrs	r3, r3, #6
 8007d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	fb03 f202 	mul.w	r2, r3, r2
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]
        break;
 8007d7e:	e003      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d80:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007d82:	617b      	str	r3, [r7, #20]
        break;
 8007d84:	e000      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007d86:	bf00      	nop
      }
    }
  }

  return frequency;
 8007d88:	697b      	ldr	r3, [r7, #20]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	00f42400 	.word	0x00f42400
 8007da0:	017d7840 	.word	0x017d7840
 8007da4:	00bb8000 	.word	0x00bb8000

08007da8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e06b      	b.n	8007e92 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7f5b      	ldrb	r3, [r3, #29]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fb fa54 	bl	8003278 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	22ca      	movs	r2, #202	; 0xca
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2253      	movs	r2, #83	; 0x53
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fb00 	bl	80083ec <RTC_EnterInitMode>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	22ff      	movs	r2, #255	; 0xff
 8007df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e046      	b.n	8007e92 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6899      	ldr	r1, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b23      	ldr	r3, [pc, #140]	; (8007e9c <HAL_RTC_Init+0xf4>)
 8007e10:	400b      	ands	r3, r1
 8007e12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6899      	ldr	r1, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68d2      	ldr	r2, [r2, #12]
 8007e3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6919      	ldr	r1, [r3, #16]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	041a      	lsls	r2, r3, #16
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e5e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0208 	bic.w	r2, r2, #8
 8007e6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	22ff      	movs	r2, #255	; 0xff
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e90:	2300      	movs	r3, #0
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	ff8fffbf 	.word	0xff8fffbf

08007ea0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	7f1b      	ldrb	r3, [r3, #28]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_RTC_SetTime+0x1c>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e0a8      	b.n	800800e <HAL_RTC_SetTime+0x16e>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d126      	bne.n	8007f1c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 faac 	bl	8008444 <RTC_ByteToBcd2>
 8007eec:	4603      	mov	r3, r0
 8007eee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 faa5 	bl	8008444 <RTC_ByteToBcd2>
 8007efa:	4603      	mov	r3, r0
 8007efc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007efe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	789b      	ldrb	r3, [r3, #2]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fa9d 	bl	8008444 <RTC_ByteToBcd2>
 8007f0a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	7b1b      	ldrb	r3, [r3, #12]
 8007f14:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e018      	b.n	8007f4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f3c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	7b1b      	ldrb	r3, [r3, #12]
 8007f48:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	22ca      	movs	r2, #202	; 0xca
 8007f54:	625a      	str	r2, [r3, #36]	; 0x24
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2253      	movs	r2, #83	; 0x53
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fa44 	bl	80083ec <RTC_EnterInitMode>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	22ff      	movs	r2, #255	; 0xff
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2204      	movs	r2, #4
 8007f76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e045      	b.n	800800e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	6979      	ldr	r1, [r7, #20]
 8007f88:	4b23      	ldr	r3, [pc, #140]	; (8008018 <HAL_RTC_SetTime+0x178>)
 8007f8a:	400b      	ands	r3, r1
 8007f8c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6899      	ldr	r1, [r3, #8]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d111      	bne.n	8007ff8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f9e1 	bl	800839c <HAL_RTC_WaitForSynchro>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2204      	movs	r2, #4
 8007fec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e00a      	b.n	800800e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800800c:	2300      	movs	r3, #0
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	bd90      	pop	{r4, r7, pc}
 8008016:	bf00      	nop
 8008018:	007f7f7f 	.word	0x007f7f7f

0800801c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	7f1b      	ldrb	r3, [r3, #28]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_RTC_SetDate+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e092      	b.n	800815e <HAL_RTC_SetDate+0x142>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2202      	movs	r2, #2
 8008042:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10e      	bne.n	8008068 <HAL_RTC_SetDate+0x4c>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b00      	cmp	r3, #0
 8008054:	d008      	beq.n	8008068 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	f023 0310 	bic.w	r3, r3, #16
 800805e:	b2db      	uxtb	r3, r3
 8008060:	330a      	adds	r3, #10
 8008062:	b2da      	uxtb	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d11c      	bne.n	80080a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f9e6 	bl	8008444 <RTC_ByteToBcd2>
 8008078:	4603      	mov	r3, r0
 800807a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9df 	bl	8008444 <RTC_ByteToBcd2>
 8008086:	4603      	mov	r3, r0
 8008088:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800808a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	789b      	ldrb	r3, [r3, #2]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f9d7 	bl	8008444 <RTC_ByteToBcd2>
 8008096:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008098:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e00e      	b.n	80080c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	78db      	ldrb	r3, [r3, #3]
 80080ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80080ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	22ca      	movs	r2, #202	; 0xca
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2253      	movs	r2, #83	; 0x53
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f988 	bl	80083ec <RTC_EnterInitMode>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	22ff      	movs	r2, #255	; 0xff
 80080e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2204      	movs	r2, #4
 80080ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e031      	b.n	800815e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_RTC_SetDate+0x14c>)
 8008102:	400b      	ands	r3, r1
 8008104:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008114:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d111      	bne.n	8008148 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f939 	bl	800839c <HAL_RTC_WaitForSynchro>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2204      	movs	r2, #4
 800813c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e00a      	b.n	800815e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800815c:	2300      	movs	r3, #0
  }
}
 800815e:	4618      	mov	r0, r3
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd90      	pop	{r4, r7, pc}
 8008166:	bf00      	nop
 8008168:	00ffff3f 	.word	0x00ffff3f

0800816c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b089      	sub	sp, #36	; 0x24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	61fb      	str	r3, [r7, #28]
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	7f1b      	ldrb	r3, [r3, #28]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_RTC_SetAlarm+0x24>
 800818c:	2302      	movs	r3, #2
 800818e:	e101      	b.n	8008394 <HAL_RTC_SetAlarm+0x228>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d137      	bne.n	8008212 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f942 	bl	8008444 <RTC_ByteToBcd2>
 80081c0:	4603      	mov	r3, r0
 80081c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 f93b 	bl	8008444 <RTC_ByteToBcd2>
 80081ce:	4603      	mov	r3, r0
 80081d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80081d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	789b      	ldrb	r3, [r3, #2]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f933 	bl	8008444 <RTC_ByteToBcd2>
 80081de:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80081e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	7b1b      	ldrb	r3, [r3, #12]
 80081e8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80081ea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f925 	bl	8008444 <RTC_ByteToBcd2>
 80081fa:	4603      	mov	r3, r0
 80081fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80081fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008206:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800820c:	4313      	orrs	r3, r2
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e023      	b.n	800825a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008232:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008238:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	7b1b      	ldrb	r3, [r3, #12]
 800823e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008240:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008248:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800824a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008250:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008256:	4313      	orrs	r3, r2
 8008258:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	22ca      	movs	r2, #202	; 0xca
 800826c:	625a      	str	r2, [r3, #36]	; 0x24
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2253      	movs	r2, #83	; 0x53
 8008274:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800827e:	d13f      	bne.n	8008300 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800828e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800829e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082a0:	f7fb fdb4 	bl	8003e0c <HAL_GetTick>
 80082a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80082a6:	e013      	b.n	80082d0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80082a8:	f7fb fdb0 	bl	8003e0c <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082b6:	d90b      	bls.n	80082d0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	22ff      	movs	r2, #255	; 0xff
 80082be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2203      	movs	r2, #3
 80082c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e061      	b.n	8008394 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0e4      	beq.n	80082a8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082fc:	609a      	str	r2, [r3, #8]
 80082fe:	e03e      	b.n	800837e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800830e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800831e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008320:	f7fb fd74 	bl	8003e0c <HAL_GetTick>
 8008324:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008326:	e013      	b.n	8008350 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008328:	f7fb fd70 	bl	8003e0c <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008336:	d90b      	bls.n	8008350 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	22ff      	movs	r2, #255	; 0xff
 800833e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2203      	movs	r2, #3
 8008344:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e021      	b.n	8008394 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0e4      	beq.n	8008328 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800837c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	22ff      	movs	r2, #255	; 0xff
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3724      	adds	r7, #36	; 0x24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}

0800839c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083b8:	f7fb fd28 	bl	8003e0c <HAL_GetTick>
 80083bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083be:	e009      	b.n	80083d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083c0:	f7fb fd24 	bl	8003e0c <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ce:	d901      	bls.n	80083d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e007      	b.n	80083e4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0ee      	beq.n	80083c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d119      	bne.n	800843a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f04f 32ff 	mov.w	r2, #4294967295
 800840e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008410:	f7fb fcfc 	bl	8003e0c <HAL_GetTick>
 8008414:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008416:	e009      	b.n	800842c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008418:	f7fb fcf8 	bl	8003e0c <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008426:	d901      	bls.n	800842c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e007      	b.n	800843c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0ee      	beq.n	8008418 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008452:	e005      	b.n	8008460 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3301      	adds	r3, #1
 8008458:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	3b0a      	subs	r3, #10
 800845e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b09      	cmp	r3, #9
 8008464:	d8f6      	bhi.n	8008454 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	b2da      	uxtb	r2, r3
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	4313      	orrs	r3, r2
 8008472:	b2db      	uxtb	r3, r3
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	7f1b      	ldrb	r3, [r3, #28]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008498:	2302      	movs	r3, #2
 800849a:	e03e      	b.n	800851a <HAL_RTCEx_SetTimeStamp+0x9a>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2202      	movs	r2, #2
 80084a6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	4b1e      	ldr	r3, [pc, #120]	; (8008528 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	22ca      	movs	r2, #202	; 0xca
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2253      	movs	r2, #83	; 0x53
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0206 	bic.w	r2, r2, #6
 80084da:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008502:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	22ff      	movs	r2, #255	; 0xff
 800850a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	fffff7f7 	.word	0xfffff7f7

0800852c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e14d      	b.n	80087e6 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fb fa34 	bl	80039cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f953 	bl	8008818 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d00c      	beq.n	8008594 <HAL_SAI_Init+0x68>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d80d      	bhi.n	800859a <HAL_SAI_Init+0x6e>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_SAI_Init+0x5c>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d003      	beq.n	800858e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008586:	e008      	b.n	800859a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
      break;
 800858c:	e006      	b.n	800859c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800858e:	2310      	movs	r3, #16
 8008590:	61fb      	str	r3, [r7, #28]
      break;
 8008592:	e003      	b.n	800859c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008594:	2320      	movs	r3, #32
 8008596:	61fb      	str	r3, [r7, #28]
      break;
 8008598:	e000      	b.n	800859c <HAL_SAI_Init+0x70>
    break;
 800859a:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d81e      	bhi.n	80085e2 <HAL_SAI_Init+0xb6>
 80085a4:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <HAL_SAI_Init+0x80>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085c3 	.word	0x080085c3
 80085b4:	080085cb 	.word	0x080085cb
 80085b8:	080085d3 	.word	0x080085d3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
      }
      break;
 80085c0:	e010      	b.n	80085e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80085c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c6:	617b      	str	r3, [r7, #20]
      }
      break;
 80085c8:	e00c      	b.n	80085e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80085ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085ce:	617b      	str	r3, [r7, #20]
      }
      break;
 80085d0:	e008      	b.n	80085e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80085d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085d6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	61fb      	str	r3, [r7, #28]
      }
      break;
 80085e0:	e000      	b.n	80085e4 <HAL_SAI_Init+0xb8>
  default:
    break;
 80085e2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a81      	ldr	r2, [pc, #516]	; (80087f0 <HAL_SAI_Init+0x2c4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_SAI_Init+0xcc>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a80      	ldr	r2, [pc, #512]	; (80087f4 <HAL_SAI_Init+0x2c8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d103      	bne.n	8008600 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80085f8:	4a7f      	ldr	r2, [pc, #508]	; (80087f8 <HAL_SAI_Init+0x2cc>)
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e002      	b.n	8008606 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008600:	4a7e      	ldr	r2, [pc, #504]	; (80087fc <HAL_SAI_Init+0x2d0>)
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d043      	beq.n	8008696 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a76      	ldr	r2, [pc, #472]	; (80087f0 <HAL_SAI_Init+0x2c4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_SAI_Init+0xfa>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a74      	ldr	r2, [pc, #464]	; (80087f4 <HAL_SAI_Init+0x2c8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d104      	bne.n	8008630 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008626:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800862a:	f7ff fa7d 	bl	8007b28 <HAL_RCCEx_GetPeriphCLKFreq>
 800862e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a72      	ldr	r2, [pc, #456]	; (8008800 <HAL_SAI_Init+0x2d4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d004      	beq.n	8008644 <HAL_SAI_Init+0x118>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a71      	ldr	r2, [pc, #452]	; (8008804 <HAL_SAI_Init+0x2d8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d104      	bne.n	800864e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008644:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008648:	f7ff fa6e 	bl	8007b28 <HAL_RCCEx_GetPeriphCLKFreq>
 800864c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	025b      	lsls	r3, r3, #9
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4a67      	ldr	r2, [pc, #412]	; (8008808 <HAL_SAI_Init+0x2dc>)
 800866a:	fba2 2303 	umull	r2, r3, r2, r3
 800866e:	08da      	lsrs	r2, r3, #3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	4b64      	ldr	r3, [pc, #400]	; (8008808 <HAL_SAI_Init+0x2dc>)
 8008678:	fba3 2301 	umull	r2, r3, r3, r1
 800867c:	08da      	lsrs	r2, r3, #3
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	1aca      	subs	r2, r1, r3
 8008688:	2a08      	cmp	r2, #8
 800868a:	d904      	bls.n	8008696 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_SAI_Init+0x17a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d109      	bne.n	80086ba <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_SAI_Init+0x186>
 80086ae:	2300      	movs	r3, #0
 80086b0:	e001      	b.n	80086b6 <HAL_SAI_Init+0x18a>
 80086b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	e008      	b.n	80086cc <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d102      	bne.n	80086c8 <HAL_SAI_Init+0x19c>
 80086c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086c6:	e000      	b.n	80086ca <HAL_SAI_Init+0x19e>
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6819      	ldr	r1, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b4d      	ldr	r3, [pc, #308]	; (800880c <HAL_SAI_Init+0x2e0>)
 80086d8:	400b      	ands	r3, r1
 80086da:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6819      	ldr	r1, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086f0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	431a      	orrs	r2, r3
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008704:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008710:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	051b      	lsls	r3, r3, #20
 8008718:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6859      	ldr	r1, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	4b38      	ldr	r3, [pc, #224]	; (8008810 <HAL_SAI_Init+0x2e4>)
 800872e:	400b      	ands	r3, r1
 8008730:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6859      	ldr	r1, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6899      	ldr	r1, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4b2e      	ldr	r3, [pc, #184]	; (8008814 <HAL_SAI_Init+0x2e8>)
 800875c:	400b      	ands	r3, r1
 800875e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6899      	ldr	r1, [r3, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008770:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008776:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800877c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008782:	3b01      	subs	r3, #1
 8008784:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008786:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68d9      	ldr	r1, [r3, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800879e:	400b      	ands	r3, r1
 80087a0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68d9      	ldr	r1, [r3, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b6:	041b      	lsls	r3, r3, #16
 80087b8:	431a      	orrs	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087be:	3b01      	subs	r3, #1
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40015804 	.word	0x40015804
 80087f4:	40015824 	.word	0x40015824
 80087f8:	40015800 	.word	0x40015800
 80087fc:	40015c00 	.word	0x40015c00
 8008800:	40015c04 	.word	0x40015c04
 8008804:	40015c24 	.word	0x40015c24
 8008808:	cccccccd 	.word	0xcccccccd
 800880c:	ff05c010 	.word	0xff05c010
 8008810:	ffff1ff0 	.word	0xffff1ff0
 8008814:	fff88000 	.word	0xfff88000

08008818 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008818:	b490      	push	{r4, r7}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008820:	4b16      	ldr	r3, [pc, #88]	; (800887c <SAI_Disable+0x64>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <SAI_Disable+0x68>)
 8008826:	fba2 2303 	umull	r2, r3, r2, r3
 800882a:	0b1b      	lsrs	r3, r3, #12
 800882c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008840:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008842:	4623      	mov	r3, r4
 8008844:	1e5c      	subs	r4, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	73fb      	strb	r3, [r7, #15]
      break;
 800885e:	e006      	b.n	800886e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e9      	bne.n	8008842 <SAI_Disable+0x2a>

  return status;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bc90      	pop	{r4, r7}
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000014 	.word	0x20000014
 8008880:	95cbec1b 	.word	0x95cbec1b

08008884 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e022      	b.n	80088dc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d105      	bne.n	80088ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fa fcff 	bl	80032ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2203      	movs	r2, #3
 80088b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f814 	bl	80088e4 <HAL_SD_InitCard>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e00a      	b.n	80088dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088e4:	b5b0      	push	{r4, r5, r7, lr}
 80088e6:	b08e      	sub	sp, #56	; 0x38
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008900:	2376      	movs	r3, #118	; 0x76
 8008902:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681d      	ldr	r5, [r3, #0]
 8008908:	466c      	mov	r4, sp
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800891c:	4628      	mov	r0, r5
 800891e:	f002 ff61 	bl	800b7e4 <SDMMC_Init>
 8008922:	4603      	mov	r3, r0
 8008924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e03b      	b.n	80089ac <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008942:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f002 ff84 	bl	800b856 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800895c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fde6 	bl	8009530 <SD_PowerON>
 8008964:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e013      	b.n	80089ac <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fd05 	bl	8009394 <SD_InitCard>
 800898a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00b      	beq.n	80089aa <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3728      	adds	r7, #40	; 0x28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bdb0      	pop	{r4, r5, r7, pc}

080089b4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d107      	bne.n	80089dc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e0cc      	b.n	8008b76 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	f040 80c5 	bne.w	8008b74 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	441a      	add	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d907      	bls.n	8008a0e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e0b3      	b.n	8008b76 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2203      	movs	r2, #3
 8008a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	4a53      	ldr	r2, [pc, #332]	; (8008b80 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	4a52      	ldr	r2, [pc, #328]	; (8008b84 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008a3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	2200      	movs	r2, #0
 8008a44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3380      	adds	r3, #128	; 0x80
 8008a50:	4619      	mov	r1, r3
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	025b      	lsls	r3, r3, #9
 8008a58:	089b      	lsrs	r3, r3, #2
 8008a5a:	f7fc fc8f 	bl	800537c <HAL_DMA_Start_IT>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d017      	beq.n	8008a94 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008a72:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a43      	ldr	r2, [pc, #268]	; (8008b88 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e070      	b.n	8008b76 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0208 	orr.w	r2, r2, #8
 8008aa2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d002      	beq.n	8008ab2 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	025b      	lsls	r3, r3, #9
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 ff5e 	bl	800b97c <SDMMC_CmdBlockLength>
 8008ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00f      	beq.n	8008ae8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a2e      	ldr	r2, [pc, #184]	; (8008b88 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008ace:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e046      	b.n	8008b76 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	025b      	lsls	r3, r3, #9
 8008af2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008af4:	2390      	movs	r3, #144	; 0x90
 8008af6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008af8:	2302      	movs	r3, #2
 8008afa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f107 0210 	add.w	r2, r7, #16
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f002 ff08 	bl	800b924 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d90a      	bls.n	8008b30 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2282      	movs	r2, #130	; 0x82
 8008b1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b26:	4618      	mov	r0, r3
 8008b28:	f002 ff6c 	bl	800ba04 <SDMMC_CmdReadMultiBlock>
 8008b2c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b2e:	e009      	b.n	8008b44 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2281      	movs	r2, #129	; 0x81
 8008b34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f002 ff3f 	bl	800b9c0 <SDMMC_CmdReadSingleBlock>
 8008b42:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d012      	beq.n	8008b70 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a0e      	ldr	r2, [pc, #56]	; (8008b88 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e002      	b.n	8008b76 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e000      	b.n	8008b76 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3730      	adds	r7, #48	; 0x30
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	0800927f 	.word	0x0800927f
 8008b84:	080092f1 	.word	0x080092f1
 8008b88:	004005ff 	.word	0x004005ff

08008b8c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08c      	sub	sp, #48	; 0x30
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d107      	bne.n	8008bb4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0cf      	b.n	8008d54 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	f040 80c8 	bne.w	8008d52 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	441a      	add	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d907      	bls.n	8008be6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0b6      	b.n	8008d54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2203      	movs	r2, #3
 8008bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 021a 	orr.w	r2, r2, #26
 8008c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	4a54      	ldr	r2, [pc, #336]	; (8008d5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c12:	4a53      	ldr	r2, [pc, #332]	; (8008d60 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008c14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d002      	beq.n	8008c2c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	025b      	lsls	r3, r3, #9
 8008c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c34:	4618      	mov	r0, r3
 8008c36:	f002 fea1 	bl	800b97c <SDMMC_CmdBlockLength>
 8008c3a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00f      	beq.n	8008c62 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a47      	ldr	r2, [pc, #284]	; (8008d64 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008c48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	431a      	orrs	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e078      	b.n	8008d54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d90a      	bls.n	8008c7e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	22a0      	movs	r2, #160	; 0xa0
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c74:	4618      	mov	r0, r3
 8008c76:	f002 ff09 	bl	800ba8c <SDMMC_CmdWriteMultiBlock>
 8008c7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008c7c:	e009      	b.n	8008c92 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2290      	movs	r2, #144	; 0x90
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fedc 	bl	800ba48 <SDMMC_CmdWriteSingleBlock>
 8008c90:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d012      	beq.n	8008cbe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a31      	ldr	r2, [pc, #196]	; (8008d64 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e04a      	b.n	8008d54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0208 	orr.w	r2, r2, #8
 8008ccc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3380      	adds	r3, #128	; 0x80
 8008cda:	461a      	mov	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	025b      	lsls	r3, r3, #9
 8008ce0:	089b      	lsrs	r3, r3, #2
 8008ce2:	f7fc fb4b 	bl	800537c <HAL_DMA_Start_IT>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01a      	beq.n	8008d22 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 021a 	bic.w	r2, r2, #26
 8008cfa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e018      	b.n	8008d54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	025b      	lsls	r3, r3, #9
 8008d2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d2e:	2390      	movs	r3, #144	; 0x90
 8008d30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008d32:	2300      	movs	r3, #0
 8008d34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f107 0210 	add.w	r2, r7, #16
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f002 fdeb 	bl	800b924 <SDMMC_ConfigData>

      return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e000      	b.n	8008d54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d52:	2302      	movs	r3, #2
  }
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3730      	adds	r7, #48	; 0x30
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	08009255 	.word	0x08009255
 8008d60:	080092f1 	.word	0x080092f1
 8008d64:	004005ff 	.word	0x004005ff

08008d68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8a:	0f9b      	lsrs	r3, r3, #30
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d96:	0e9b      	lsrs	r3, r3, #26
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008da8:	0e1b      	lsrs	r3, r3, #24
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dc6:	0a1b      	lsrs	r3, r3, #8
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ddc:	0d1b      	lsrs	r3, r3, #20
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008de8:	0c1b      	lsrs	r3, r3, #16
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dfa:	0bdb      	lsrs	r3, r3, #15
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e0c:	0b9b      	lsrs	r3, r3, #14
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e1e:	0b5b      	lsrs	r3, r3, #13
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e30:	0b1b      	lsrs	r3, r3, #12
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2200      	movs	r2, #0
 8008e42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d163      	bne.n	8008f14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e50:	009a      	lsls	r2, r3, #2
 8008e52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e56:	4013      	ands	r3, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008e5c:	0f92      	lsrs	r2, r2, #30
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e68:	0edb      	lsrs	r3, r3, #27
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e7a:	0e1b      	lsrs	r3, r3, #24
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8c:	0d5b      	lsrs	r3, r3, #21
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	0c9b      	lsrs	r3, r3, #18
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb0:	0bdb      	lsrs	r3, r3, #15
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	7e1b      	ldrb	r3, [r3, #24]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008ede:	fb03 f202 	mul.w	r2, r3, r2
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	7a1b      	ldrb	r3, [r3, #8]
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	409a      	lsls	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f00:	0a52      	lsrs	r2, r2, #9
 8008f02:	fb03 f202 	mul.w	r2, r3, r2
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f10:	661a      	str	r2, [r3, #96]	; 0x60
 8008f12:	e031      	b.n	8008f78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d11d      	bne.n	8008f58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	3301      	adds	r3, #1
 8008f38:	029a      	lsls	r2, r3, #10
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	661a      	str	r2, [r3, #96]	; 0x60
 8008f56:	e00f      	b.n	8008f78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a58      	ldr	r2, [pc, #352]	; (80090c0 <HAL_SD_GetCardCSD+0x344>)
 8008f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e09d      	b.n	80090b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7c:	0b9b      	lsrs	r3, r3, #14
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8e:	09db      	lsrs	r3, r3, #7
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb0:	0fdb      	lsrs	r3, r3, #31
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbc:	0f5b      	lsrs	r3, r3, #29
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fce:	0e9b      	lsrs	r3, r3, #26
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe0:	0d9b      	lsrs	r3, r3, #22
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff2:	0d5b      	lsrs	r3, r3, #21
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800900e:	0c1b      	lsrs	r3, r3, #16
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	b2da      	uxtb	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009022:	0bdb      	lsrs	r3, r3, #15
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	b2da      	uxtb	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009036:	0b9b      	lsrs	r3, r3, #14
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b2da      	uxtb	r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904a:	0b5b      	lsrs	r3, r3, #13
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	b2da      	uxtb	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	0b1b      	lsrs	r3, r3, #12
 8009060:	b2db      	uxtb	r3, r3
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	b2da      	uxtb	r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009072:	0a9b      	lsrs	r3, r3, #10
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	b2da      	uxtb	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	b2da      	uxtb	r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	b2db      	uxtb	r3, r3
 800909e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	004005ff 	.word	0x004005ff

080090c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800911c:	b5b0      	push	{r4, r5, r7, lr}
 800911e:	b08e      	sub	sp, #56	; 0x38
 8009120:	af04      	add	r7, sp, #16
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2203      	movs	r2, #3
 800912a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009132:	2b03      	cmp	r3, #3
 8009134:	d02e      	beq.n	8009194 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800913c:	d106      	bne.n	800914c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38
 800914a:	e029      	b.n	80091a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009152:	d10a      	bne.n	800916a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 faa1 	bl	800969c <SD_WideBus_Enable>
 800915a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
 8009168:	e01a      	b.n	80091a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fade 	bl	8009732 <SD_WideBus_Disable>
 8009176:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
 8009184:	e00c      	b.n	80091a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
 8009192:	e005      	b.n	80091a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d009      	beq.n	80091bc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a18      	ldr	r2, [pc, #96]	; (8009210 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e024      	b.n	8009206 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	466c      	mov	r4, sp
 80091e4:	f107 0318 	add.w	r3, r7, #24
 80091e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091f0:	f107 030c 	add.w	r3, r7, #12
 80091f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091f6:	4628      	mov	r0, r5
 80091f8:	f002 faf4 	bl	800b7e4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3728      	adds	r7, #40	; 0x28
 800920a:	46bd      	mov	sp, r7
 800920c:	bdb0      	pop	{r4, r5, r7, pc}
 800920e:	bf00      	nop
 8009210:	004005ff 	.word	0x004005ff

08009214 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa10 	bl	800964c <SD_SendStatus>
 800922c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	0a5b      	lsrs	r3, r3, #9
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800924a:	693b      	ldr	r3, [r7, #16]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009270:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	2b82      	cmp	r3, #130	; 0x82
 8009292:	d111      	bne.n	80092b8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f002 fc19 	bl	800bad0 <SDMMC_CmdStopTransfer>
 800929e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d008      	beq.n	80092b8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	431a      	orrs	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f7ff fd58 	bl	8008d68 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 0208 	bic.w	r2, r2, #8
 80092c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f003 f85f 	bl	800c3a4 <HAL_SD_RxCpltCallback>
#endif
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fc f89c 	bl	800543c <HAL_DMA_GetError>
 8009304:	4603      	mov	r3, r0
 8009306:	2b02      	cmp	r3, #2
 8009308:	d03e      	beq.n	8009388 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009310:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009318:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d002      	beq.n	8009326 <SD_DMAError+0x36>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d12d      	bne.n	8009382 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a19      	ldr	r2, [pc, #100]	; (8009390 <SD_DMAError+0xa0>)
 800932c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800933c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f7ff ff62 	bl	8009214 <HAL_SD_GetCardState>
 8009350:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b06      	cmp	r3, #6
 8009356:	d002      	beq.n	800935e <SD_DMAError+0x6e>
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b05      	cmp	r3, #5
 800935c:	d10a      	bne.n	8009374 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4618      	mov	r0, r3
 8009364:	f002 fbb4 	bl	800bad0 <SDMMC_CmdStopTransfer>
 8009368:	4602      	mov	r2, r0
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936e:	431a      	orrs	r2, r3
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2200      	movs	r2, #0
 8009380:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009382:	6978      	ldr	r0, [r7, #20]
 8009384:	f7ff fcf0 	bl	8008d68 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009388:	bf00      	nop
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	004005ff 	.word	0x004005ff

08009394 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009394:	b5b0      	push	{r4, r5, r7, lr}
 8009396:	b094      	sub	sp, #80	; 0x50
 8009398:	af04      	add	r7, sp, #16
 800939a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800939c:	2301      	movs	r3, #1
 800939e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 fa65 	bl	800b874 <SDMMC_GetPowerState>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093b4:	e0b8      	b.n	8009528 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d02f      	beq.n	800941e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f002 fc8f 	bl	800bce6 <SDMMC_CmdSendCID>
 80093c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80093d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d2:	e0a9      	b.n	8009528 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 fa8f 	bl	800b8fe <SDMMC_GetResponse>
 80093e0:	4602      	mov	r2, r0
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2104      	movs	r1, #4
 80093ec:	4618      	mov	r0, r3
 80093ee:	f002 fa86 	bl	800b8fe <SDMMC_GetResponse>
 80093f2:	4602      	mov	r2, r0
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2108      	movs	r1, #8
 80093fe:	4618      	mov	r0, r3
 8009400:	f002 fa7d 	bl	800b8fe <SDMMC_GetResponse>
 8009404:	4602      	mov	r2, r0
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	210c      	movs	r1, #12
 8009410:	4618      	mov	r0, r3
 8009412:	f002 fa74 	bl	800b8fe <SDMMC_GetResponse>
 8009416:	4602      	mov	r2, r0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009422:	2b03      	cmp	r3, #3
 8009424:	d00d      	beq.n	8009442 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f107 020e 	add.w	r2, r7, #14
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f002 fc95 	bl	800bd60 <SDMMC_CmdSetRelAdd>
 8009436:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <SD_InitCard+0xae>
    {
      return errorstate;
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	e072      	b.n	8009528 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009446:	2b03      	cmp	r3, #3
 8009448:	d036      	beq.n	80094b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800944a:	89fb      	ldrh	r3, [r7, #14]
 800944c:	461a      	mov	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945a:	041b      	lsls	r3, r3, #16
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f002 fc5f 	bl	800bd22 <SDMMC_CmdSendCSD>
 8009464:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <SD_InitCard+0xdc>
    {
      return errorstate;
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	e05b      	b.n	8009528 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f002 fa41 	bl	800b8fe <SDMMC_GetResponse>
 800947c:	4602      	mov	r2, r0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2104      	movs	r1, #4
 8009488:	4618      	mov	r0, r3
 800948a:	f002 fa38 	bl	800b8fe <SDMMC_GetResponse>
 800948e:	4602      	mov	r2, r0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2108      	movs	r1, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f002 fa2f 	bl	800b8fe <SDMMC_GetResponse>
 80094a0:	4602      	mov	r2, r0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	210c      	movs	r1, #12
 80094ac:	4618      	mov	r0, r3
 80094ae:	f002 fa26 	bl	800b8fe <SDMMC_GetResponse>
 80094b2:	4602      	mov	r2, r0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2104      	movs	r1, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f002 fa1d 	bl	800b8fe <SDMMC_GetResponse>
 80094c4:	4603      	mov	r3, r0
 80094c6:	0d1a      	lsrs	r2, r3, #20
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094cc:	f107 0310 	add.w	r3, r7, #16
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fc52 	bl	8008d7c <HAL_SD_GetCardCSD>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094e2:	e021      	b.n	8009528 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6819      	ldr	r1, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	2200      	movs	r2, #0
 80094f0:	461c      	mov	r4, r3
 80094f2:	4615      	mov	r5, r2
 80094f4:	4622      	mov	r2, r4
 80094f6:	462b      	mov	r3, r5
 80094f8:	4608      	mov	r0, r1
 80094fa:	f002 fb0b 	bl	800bb14 <SDMMC_CmdSelDesel>
 80094fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <SD_InitCard+0x176>
  {
    return errorstate;
 8009506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009508:	e00e      	b.n	8009528 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681d      	ldr	r5, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	466c      	mov	r4, sp
 8009512:	f103 0210 	add.w	r2, r3, #16
 8009516:	ca07      	ldmia	r2, {r0, r1, r2}
 8009518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800951c:	3304      	adds	r3, #4
 800951e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009520:	4628      	mov	r0, r5
 8009522:	f002 f95f 	bl	800b7e4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3740      	adds	r7, #64	; 0x40
 800952c:	46bd      	mov	sp, r7
 800952e:	bdb0      	pop	{r4, r5, r7, pc}

08009530 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	2300      	movs	r3, #0
 8009542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f002 fb06 	bl	800bb5a <SDMMC_CmdGoIdleState>
 800954e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	e072      	b.n	8009640 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f002 fb19 	bl	800bb96 <SDMMC_CmdOperCond>
 8009564:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00d      	beq.n	8009588 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f002 faef 	bl	800bb5a <SDMMC_CmdGoIdleState>
 800957c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	e05b      	b.n	8009640 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009592:	2b01      	cmp	r3, #1
 8009594:	d137      	bne.n	8009606 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f002 fb19 	bl	800bbd4 <SDMMC_CmdAppCommand>
 80095a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d02d      	beq.n	8009606 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095ae:	e047      	b.n	8009640 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f002 fb0c 	bl	800bbd4 <SDMMC_CmdAppCommand>
 80095bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	e03b      	b.n	8009640 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	491e      	ldr	r1, [pc, #120]	; (8009648 <SD_PowerON+0x118>)
 80095ce:	4618      	mov	r0, r3
 80095d0:	f002 fb22 	bl	800bc18 <SDMMC_CmdAppOperCommand>
 80095d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095e0:	e02e      	b.n	8009640 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f002 f988 	bl	800b8fe <SDMMC_GetResponse>
 80095ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	0fdb      	lsrs	r3, r3, #31
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <SD_PowerON+0xcc>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <SD_PowerON+0xce>
 80095fc:	2300      	movs	r3, #0
 80095fe:	613b      	str	r3, [r7, #16]

    count++;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	3301      	adds	r3, #1
 8009604:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800960c:	4293      	cmp	r3, r2
 800960e:	d802      	bhi.n	8009616 <SD_PowerON+0xe6>
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0cc      	beq.n	80095b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800961c:	4293      	cmp	r3, r2
 800961e:	d902      	bls.n	8009626 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009624:	e00c      	b.n	8009640 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	645a      	str	r2, [r3, #68]	; 0x44
 8009636:	e002      	b.n	800963e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	c1100000 	.word	0xc1100000

0800964c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d102      	bne.n	8009662 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800965c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009660:	e018      	b.n	8009694 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f002 fb97 	bl	800bda2 <SDMMC_CmdSendStatus>
 8009674:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <SD_SendStatus+0x34>
  {
    return errorstate;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	e009      	b.n	8009694 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f002 f939 	bl	800b8fe <SDMMC_GetResponse>
 800968c:	4602      	mov	r2, r0
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2100      	movs	r1, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 f923 	bl	800b8fe <SDMMC_GetResponse>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096c2:	d102      	bne.n	80096ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80096c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096c8:	e02f      	b.n	800972a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80096ca:	f107 030c 	add.w	r3, r7, #12
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f879 	bl	80097c8 <SD_FindSCR>
 80096d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	e023      	b.n	800972a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01c      	beq.n	8009726 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	4619      	mov	r1, r3
 80096f8:	4610      	mov	r0, r2
 80096fa:	f002 fa6b 	bl	800bbd4 <SDMMC_CmdAppCommand>
 80096fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	e00f      	b.n	800972a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2102      	movs	r1, #2
 8009710:	4618      	mov	r0, r3
 8009712:	f002 faa5 	bl	800bc60 <SDMMC_CmdBusWidth>
 8009716:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	e003      	b.n	800972a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009722:	2300      	movs	r3, #0
 8009724:	e001      	b.n	800972a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009726:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2100      	movs	r1, #0
 8009748:	4618      	mov	r0, r3
 800974a:	f002 f8d8 	bl	800b8fe <SDMMC_GetResponse>
 800974e:	4603      	mov	r3, r0
 8009750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009758:	d102      	bne.n	8009760 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800975a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800975e:	e02f      	b.n	80097c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009760:	f107 030c 	add.w	r3, r7, #12
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f82e 	bl	80097c8 <SD_FindSCR>
 800976c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	e023      	b.n	80097c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d01c      	beq.n	80097bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f002 fa20 	bl	800bbd4 <SDMMC_CmdAppCommand>
 8009794:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	e00f      	b.n	80097c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f002 fa5a 	bl	800bc60 <SDMMC_CmdBusWidth>
 80097ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	e003      	b.n	80097c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	e001      	b.n	80097c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b08f      	sub	sp, #60	; 0x3c
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097d2:	f7fa fb1b 	bl	8003e0c <HAL_GetTick>
 80097d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80097dc:	2300      	movs	r3, #0
 80097de:	60bb      	str	r3, [r7, #8]
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2108      	movs	r1, #8
 80097ee:	4618      	mov	r0, r3
 80097f0:	f002 f8c4 	bl	800b97c <SDMMC_CmdBlockLength>
 80097f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <SD_FindSCR+0x38>
  {
    return errorstate;
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	e0a9      	b.n	8009954 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009808:	041b      	lsls	r3, r3, #16
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f002 f9e1 	bl	800bbd4 <SDMMC_CmdAppCommand>
 8009812:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <SD_FindSCR+0x56>
  {
    return errorstate;
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	e09a      	b.n	8009954 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
 8009822:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009824:	2308      	movs	r3, #8
 8009826:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009828:	2330      	movs	r3, #48	; 0x30
 800982a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800982c:	2302      	movs	r3, #2
 800982e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009830:	2300      	movs	r3, #0
 8009832:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009834:	2301      	movs	r3, #1
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f107 0210 	add.w	r2, r7, #16
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f002 f86e 	bl	800b924 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f002 fa29 	bl	800bca4 <SDMMC_CmdSendSCR>
 8009852:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d022      	beq.n	80098a0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	e07a      	b.n	8009954 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00e      	beq.n	800988a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	f107 0208 	add.w	r2, r7, #8
 8009878:	18d4      	adds	r4, r2, r3
 800987a:	4608      	mov	r0, r1
 800987c:	f001 ffde 	bl	800b83c <SDMMC_ReadFIFO>
 8009880:	4603      	mov	r3, r0
 8009882:	6023      	str	r3, [r4, #0]
      index++;
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	3301      	adds	r3, #1
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800988a:	f7fa fabf 	bl	8003e0c <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d102      	bne.n	80098a0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800989a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800989e:	e059      	b.n	8009954 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a6:	f240 432a 	movw	r3, #1066	; 0x42a
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0d6      	beq.n	800985e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2208      	movs	r2, #8
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80098c6:	2308      	movs	r3, #8
 80098c8:	e044      	b.n	8009954 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d005      	beq.n	80098e4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2202      	movs	r2, #2
 80098de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80098e0:	2302      	movs	r3, #2
 80098e2:	e037      	b.n	8009954 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2220      	movs	r2, #32
 80098f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80098fa:	2320      	movs	r3, #32
 80098fc:	e02a      	b.n	8009954 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f240 523a 	movw	r2, #1338	; 0x53a
 8009906:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	061a      	lsls	r2, r3, #24
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009914:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	0a1b      	lsrs	r3, r3, #8
 800991a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800991e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	601a      	str	r2, [r3, #0]
    scr++;
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	3304      	adds	r3, #4
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	061a      	lsls	r2, r3, #24
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	021b      	lsls	r3, r3, #8
 8009938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800993c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	0a1b      	lsrs	r3, r3, #8
 8009942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009946:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	0e1b      	lsrs	r3, r3, #24
 800994c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	373c      	adds	r7, #60	; 0x3c
 8009958:	46bd      	mov	sp, r7
 800995a:	bd90      	pop	{r4, r7, pc}

0800995c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e025      	b.n	80099bc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fa f817 	bl	80039b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2202      	movs	r2, #2
 800998e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f001 fdfb 	bl	800b598 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	f001 fe65 	bl	800b67c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d101      	bne.n	80099e0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80099dc:	2302      	movs	r3, #2
 80099de:	e018      	b.n	8009a12 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 fec3 	bl	800b77c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d104      	bne.n	8009a08 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2205      	movs	r2, #5
 8009a02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009a06:	e003      	b.n	8009a10 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d101      	bne.n	8009a34 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009a30:	2302      	movs	r3, #2
 8009a32:	e00e      	b.n	8009a52 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 febb 	bl	800b7be <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e04c      	b.n	8009b08 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d106      	bne.n	8009a88 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7f9 fc74 	bl	8003370 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0203 	bic.w	r2, r2, #3
 8009a9e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4b19      	ldr	r3, [pc, #100]	; (8009b10 <HAL_SPDIFRX_Init+0xb4>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009ab8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009abe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009ac4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009aca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009ad0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009ad6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009adc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009ae2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009ae8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	fff88407 	.word	0xfff88407

08009b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e084      	b.n	8009c30 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7f9 fc57 	bl	80033f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b66:	d902      	bls.n	8009b6e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	e002      	b.n	8009b74 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009b7c:	d007      	beq.n	8009b8e <HAL_SPI_Init+0x7a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b86:	d002      	beq.n	8009b8e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b9e:	d903      	bls.n	8009ba8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ba6:	e002      	b.n	8009bae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	ea42 0103 	orr.w	r1, r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	0c1b      	lsrs	r3, r3, #16
 8009bee:	f003 0204 	and.w	r2, r3, #4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	ea42 0103 	orr.w	r1, r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69da      	ldr	r2, [r3, #28]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e01d      	b.n	8009c86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d106      	bne.n	8009c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7f9 fc2a 	bl	80034b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f000 fb84 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0201 	orr.w	r2, r2, #1
 8009ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	4b0c      	ldr	r3, [pc, #48]	; (8009ce0 <HAL_TIM_Base_Start_IT+0x50>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b06      	cmp	r3, #6
 8009cb8:	d00b      	beq.n	8009cd2 <HAL_TIM_Base_Start_IT+0x42>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc0:	d007      	beq.n	8009cd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0201 	orr.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	00010007 	.word	0x00010007

08009ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e01d      	b.n	8009d32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7f9 fc42 	bl	8003594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f000 fb2e 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d122      	bne.n	8009d96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d11b      	bne.n	8009d96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f06f 0202 	mvn.w	r2, #2
 8009d66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fae3 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009d82:	e005      	b.n	8009d90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fad5 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fae6 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d122      	bne.n	8009dea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f003 0304 	and.w	r3, r3, #4
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d11b      	bne.n	8009dea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f06f 0204 	mvn.w	r2, #4
 8009dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d003      	beq.n	8009dd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fab9 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009dd6:	e005      	b.n	8009de4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 faab 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fabc 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	d122      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f003 0308 	and.w	r3, r3, #8
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d11b      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f06f 0208 	mvn.w	r2, #8
 8009e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2204      	movs	r2, #4
 8009e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fa8f 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009e2a:	e005      	b.n	8009e38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fa81 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fa92 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b10      	cmp	r3, #16
 8009e4a:	d122      	bne.n	8009e92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f003 0310 	and.w	r3, r3, #16
 8009e56:	2b10      	cmp	r3, #16
 8009e58:	d11b      	bne.n	8009e92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f06f 0210 	mvn.w	r2, #16
 8009e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2208      	movs	r2, #8
 8009e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fa65 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009e7e:	e005      	b.n	8009e8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa57 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa68 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d10e      	bne.n	8009ebe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d107      	bne.n	8009ebe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f06f 0201 	mvn.w	r2, #1
 8009eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7f8 fe7f 	bl	8002bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec8:	2b80      	cmp	r3, #128	; 0x80
 8009eca:	d10e      	bne.n	8009eea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed6:	2b80      	cmp	r3, #128	; 0x80
 8009ed8:	d107      	bne.n	8009eea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fefb 	bl	800ace0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef8:	d10e      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f04:	2b80      	cmp	r3, #128	; 0x80
 8009f06:	d107      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 feee 	bl	800acf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	d10e      	bne.n	8009f44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f30:	2b40      	cmp	r3, #64	; 0x40
 8009f32:	d107      	bne.n	8009f44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa16 	bl	800a370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d10e      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	d107      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0220 	mvn.w	r2, #32
 8009f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 feae 	bl	800accc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e105      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b14      	cmp	r3, #20
 8009fa6:	f200 80f0 	bhi.w	800a18a <HAL_TIM_PWM_ConfigChannel+0x212>
 8009faa:	a201      	add	r2, pc, #4	; (adr r2, 8009fb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	0800a005 	.word	0x0800a005
 8009fb4:	0800a18b 	.word	0x0800a18b
 8009fb8:	0800a18b 	.word	0x0800a18b
 8009fbc:	0800a18b 	.word	0x0800a18b
 8009fc0:	0800a045 	.word	0x0800a045
 8009fc4:	0800a18b 	.word	0x0800a18b
 8009fc8:	0800a18b 	.word	0x0800a18b
 8009fcc:	0800a18b 	.word	0x0800a18b
 8009fd0:	0800a087 	.word	0x0800a087
 8009fd4:	0800a18b 	.word	0x0800a18b
 8009fd8:	0800a18b 	.word	0x0800a18b
 8009fdc:	0800a18b 	.word	0x0800a18b
 8009fe0:	0800a0c7 	.word	0x0800a0c7
 8009fe4:	0800a18b 	.word	0x0800a18b
 8009fe8:	0800a18b 	.word	0x0800a18b
 8009fec:	0800a18b 	.word	0x0800a18b
 8009ff0:	0800a109 	.word	0x0800a109
 8009ff4:	0800a18b 	.word	0x0800a18b
 8009ff8:	0800a18b 	.word	0x0800a18b
 8009ffc:	0800a18b 	.word	0x0800a18b
 800a000:	0800a149 	.word	0x0800a149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fa5a 	bl	800a4c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0208 	orr.w	r2, r2, #8
 800a01e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0204 	bic.w	r2, r2, #4
 800a02e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6999      	ldr	r1, [r3, #24]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	691a      	ldr	r2, [r3, #16]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	619a      	str	r2, [r3, #24]
      break;
 800a042:	e0a3      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68b9      	ldr	r1, [r7, #8]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 faac 	bl	800a5a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6999      	ldr	r1, [r3, #24]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	021a      	lsls	r2, r3, #8
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	619a      	str	r2, [r3, #24]
      break;
 800a084:	e082      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fb03 	bl	800a698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69da      	ldr	r2, [r3, #28]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f042 0208 	orr.w	r2, r2, #8
 800a0a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69da      	ldr	r2, [r3, #28]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0204 	bic.w	r2, r2, #4
 800a0b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69d9      	ldr	r1, [r3, #28]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	61da      	str	r2, [r3, #28]
      break;
 800a0c4:	e062      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fb59 	bl	800a784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69da      	ldr	r2, [r3, #28]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69d9      	ldr	r1, [r3, #28]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	021a      	lsls	r2, r3, #8
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	61da      	str	r2, [r3, #28]
      break;
 800a106:	e041      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68b9      	ldr	r1, [r7, #8]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fb90 	bl	800a834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0208 	orr.w	r2, r2, #8
 800a122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0204 	bic.w	r2, r2, #4
 800a132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	691a      	ldr	r2, [r3, #16]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a146:	e021      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68b9      	ldr	r1, [r7, #8]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 fbc2 	bl	800a8d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	021a      	lsls	r2, r3, #8
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a188:	e000      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a18a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop

0800a1a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <HAL_TIM_ConfigClockSource+0x18>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e0b3      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x180>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4b55      	ldr	r3, [pc, #340]	; (800a330 <HAL_TIM_ConfigClockSource+0x188>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1f8:	d03e      	beq.n	800a278 <HAL_TIM_ConfigClockSource+0xd0>
 800a1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1fe:	f200 8087 	bhi.w	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a206:	f000 8085 	beq.w	800a314 <HAL_TIM_ConfigClockSource+0x16c>
 800a20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20e:	d87f      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a210:	2b70      	cmp	r3, #112	; 0x70
 800a212:	d01a      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0xa2>
 800a214:	2b70      	cmp	r3, #112	; 0x70
 800a216:	d87b      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a218:	2b60      	cmp	r3, #96	; 0x60
 800a21a:	d050      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x116>
 800a21c:	2b60      	cmp	r3, #96	; 0x60
 800a21e:	d877      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a220:	2b50      	cmp	r3, #80	; 0x50
 800a222:	d03c      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0xf6>
 800a224:	2b50      	cmp	r3, #80	; 0x50
 800a226:	d873      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a228:	2b40      	cmp	r3, #64	; 0x40
 800a22a:	d058      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x136>
 800a22c:	2b40      	cmp	r3, #64	; 0x40
 800a22e:	d86f      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a230:	2b30      	cmp	r3, #48	; 0x30
 800a232:	d064      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x156>
 800a234:	2b30      	cmp	r3, #48	; 0x30
 800a236:	d86b      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a238:	2b20      	cmp	r3, #32
 800a23a:	d060      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x156>
 800a23c:	2b20      	cmp	r3, #32
 800a23e:	d867      	bhi.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d05c      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x156>
 800a244:	2b10      	cmp	r3, #16
 800a246:	d05a      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a248:	e062      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6899      	ldr	r1, [r3, #8]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f000 fc0b 	bl	800aa74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a26c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	609a      	str	r2, [r3, #8]
      break;
 800a276:	e04e      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	6899      	ldr	r1, [r3, #8]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f000 fbf4 	bl	800aa74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a29a:	609a      	str	r2, [r3, #8]
      break;
 800a29c:	e03b      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6859      	ldr	r1, [r3, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f000 fb68 	bl	800a980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2150      	movs	r1, #80	; 0x50
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 fbc1 	bl	800aa3e <TIM_ITRx_SetConfig>
      break;
 800a2bc:	e02b      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6859      	ldr	r1, [r3, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f000 fb87 	bl	800a9de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2160      	movs	r1, #96	; 0x60
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fbb1 	bl	800aa3e <TIM_ITRx_SetConfig>
      break;
 800a2dc:	e01b      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6859      	ldr	r1, [r3, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f000 fb48 	bl	800a980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2140      	movs	r1, #64	; 0x40
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fba1 	bl	800aa3e <TIM_ITRx_SetConfig>
      break;
 800a2fc:	e00b      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4619      	mov	r1, r3
 800a308:	4610      	mov	r0, r2
 800a30a:	f000 fb98 	bl	800aa3e <TIM_ITRx_SetConfig>
      break;
 800a30e:	e002      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a310:	bf00      	nop
 800a312:	e000      	b.n	800a316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	fffeff88 	.word	0xfffeff88

0800a334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a40      	ldr	r2, [pc, #256]	; (800a498 <TIM_Base_SetConfig+0x114>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d013      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a3d      	ldr	r2, [pc, #244]	; (800a49c <TIM_Base_SetConfig+0x118>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a3c      	ldr	r2, [pc, #240]	; (800a4a0 <TIM_Base_SetConfig+0x11c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a3b      	ldr	r2, [pc, #236]	; (800a4a4 <TIM_Base_SetConfig+0x120>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a3a      	ldr	r2, [pc, #232]	; (800a4a8 <TIM_Base_SetConfig+0x124>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d108      	bne.n	800a3d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a2f      	ldr	r2, [pc, #188]	; (800a498 <TIM_Base_SetConfig+0x114>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d02b      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e4:	d027      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a2c      	ldr	r2, [pc, #176]	; (800a49c <TIM_Base_SetConfig+0x118>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d023      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a2b      	ldr	r2, [pc, #172]	; (800a4a0 <TIM_Base_SetConfig+0x11c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d01f      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a2a      	ldr	r2, [pc, #168]	; (800a4a4 <TIM_Base_SetConfig+0x120>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d01b      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a29      	ldr	r2, [pc, #164]	; (800a4a8 <TIM_Base_SetConfig+0x124>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d017      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a28      	ldr	r2, [pc, #160]	; (800a4ac <TIM_Base_SetConfig+0x128>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d013      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a27      	ldr	r2, [pc, #156]	; (800a4b0 <TIM_Base_SetConfig+0x12c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00f      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a26      	ldr	r2, [pc, #152]	; (800a4b4 <TIM_Base_SetConfig+0x130>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00b      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a25      	ldr	r2, [pc, #148]	; (800a4b8 <TIM_Base_SetConfig+0x134>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d007      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a24      	ldr	r2, [pc, #144]	; (800a4bc <TIM_Base_SetConfig+0x138>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a23      	ldr	r2, [pc, #140]	; (800a4c0 <TIM_Base_SetConfig+0x13c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d108      	bne.n	800a448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a43c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	4313      	orrs	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <TIM_Base_SetConfig+0x114>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d003      	beq.n	800a47c <TIM_Base_SetConfig+0xf8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a0c      	ldr	r2, [pc, #48]	; (800a4a8 <TIM_Base_SetConfig+0x124>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d103      	bne.n	800a484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	615a      	str	r2, [r3, #20]
}
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	40010000 	.word	0x40010000
 800a49c:	40000400 	.word	0x40000400
 800a4a0:	40000800 	.word	0x40000800
 800a4a4:	40000c00 	.word	0x40000c00
 800a4a8:	40010400 	.word	0x40010400
 800a4ac:	40014000 	.word	0x40014000
 800a4b0:	40014400 	.word	0x40014400
 800a4b4:	40014800 	.word	0x40014800
 800a4b8:	40001800 	.word	0x40001800
 800a4bc:	40001c00 	.word	0x40001c00
 800a4c0:	40002000 	.word	0x40002000

0800a4c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f023 0201 	bic.w	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	4b2b      	ldr	r3, [pc, #172]	; (800a59c <TIM_OC1_SetConfig+0xd8>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f023 0302 	bic.w	r3, r3, #2
 800a50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4313      	orrs	r3, r2
 800a516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a21      	ldr	r2, [pc, #132]	; (800a5a0 <TIM_OC1_SetConfig+0xdc>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_OC1_SetConfig+0x64>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a20      	ldr	r2, [pc, #128]	; (800a5a4 <TIM_OC1_SetConfig+0xe0>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d10c      	bne.n	800a542 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f023 0308 	bic.w	r3, r3, #8
 800a52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f023 0304 	bic.w	r3, r3, #4
 800a540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a16      	ldr	r2, [pc, #88]	; (800a5a0 <TIM_OC1_SetConfig+0xdc>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d003      	beq.n	800a552 <TIM_OC1_SetConfig+0x8e>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a15      	ldr	r2, [pc, #84]	; (800a5a4 <TIM_OC1_SetConfig+0xe0>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d111      	bne.n	800a576 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	4313      	orrs	r3, r2
 800a56a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4313      	orrs	r3, r2
 800a574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	621a      	str	r2, [r3, #32]
}
 800a590:	bf00      	nop
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	fffeff8f 	.word	0xfffeff8f
 800a5a0:	40010000 	.word	0x40010000
 800a5a4:	40010400 	.word	0x40010400

0800a5a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	f023 0210 	bic.w	r2, r3, #16
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4b2e      	ldr	r3, [pc, #184]	; (800a68c <TIM_OC2_SetConfig+0xe4>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	021b      	lsls	r3, r3, #8
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f023 0320 	bic.w	r3, r3, #32
 800a5f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a23      	ldr	r2, [pc, #140]	; (800a690 <TIM_OC2_SetConfig+0xe8>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d003      	beq.n	800a610 <TIM_OC2_SetConfig+0x68>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a22      	ldr	r2, [pc, #136]	; (800a694 <TIM_OC2_SetConfig+0xec>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d10d      	bne.n	800a62c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	011b      	lsls	r3, r3, #4
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	4313      	orrs	r3, r2
 800a622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a62a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a18      	ldr	r2, [pc, #96]	; (800a690 <TIM_OC2_SetConfig+0xe8>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d003      	beq.n	800a63c <TIM_OC2_SetConfig+0x94>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a17      	ldr	r2, [pc, #92]	; (800a694 <TIM_OC2_SetConfig+0xec>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d113      	bne.n	800a664 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a64a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	621a      	str	r2, [r3, #32]
}
 800a67e:	bf00      	nop
 800a680:	371c      	adds	r7, #28
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	feff8fff 	.word	0xfeff8fff
 800a690:	40010000 	.word	0x40010000
 800a694:	40010400 	.word	0x40010400

0800a698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4b2d      	ldr	r3, [pc, #180]	; (800a778 <TIM_OC3_SetConfig+0xe0>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a22      	ldr	r2, [pc, #136]	; (800a77c <TIM_OC3_SetConfig+0xe4>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_OC3_SetConfig+0x66>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a21      	ldr	r2, [pc, #132]	; (800a780 <TIM_OC3_SetConfig+0xe8>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d10d      	bne.n	800a71a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a17      	ldr	r2, [pc, #92]	; (800a77c <TIM_OC3_SetConfig+0xe4>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d003      	beq.n	800a72a <TIM_OC3_SetConfig+0x92>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a16      	ldr	r2, [pc, #88]	; (800a780 <TIM_OC3_SetConfig+0xe8>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d113      	bne.n	800a752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4313      	orrs	r3, r2
 800a750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	621a      	str	r2, [r3, #32]
}
 800a76c:	bf00      	nop
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	fffeff8f 	.word	0xfffeff8f
 800a77c:	40010000 	.word	0x40010000
 800a780:	40010400 	.word	0x40010400

0800a784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a784:	b480      	push	{r7}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	4b1e      	ldr	r3, [pc, #120]	; (800a828 <TIM_OC4_SetConfig+0xa4>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	031b      	lsls	r3, r3, #12
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a13      	ldr	r2, [pc, #76]	; (800a82c <TIM_OC4_SetConfig+0xa8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d003      	beq.n	800a7ec <TIM_OC4_SetConfig+0x68>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a12      	ldr	r2, [pc, #72]	; (800a830 <TIM_OC4_SetConfig+0xac>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d109      	bne.n	800a800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	019b      	lsls	r3, r3, #6
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	621a      	str	r2, [r3, #32]
}
 800a81a:	bf00      	nop
 800a81c:	371c      	adds	r7, #28
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	feff8fff 	.word	0xfeff8fff
 800a82c:	40010000 	.word	0x40010000
 800a830:	40010400 	.word	0x40010400

0800a834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4b1b      	ldr	r3, [pc, #108]	; (800a8cc <TIM_OC5_SetConfig+0x98>)
 800a860:	4013      	ands	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4313      	orrs	r3, r2
 800a880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a12      	ldr	r2, [pc, #72]	; (800a8d0 <TIM_OC5_SetConfig+0x9c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d003      	beq.n	800a892 <TIM_OC5_SetConfig+0x5e>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a11      	ldr	r2, [pc, #68]	; (800a8d4 <TIM_OC5_SetConfig+0xa0>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d109      	bne.n	800a8a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	021b      	lsls	r3, r3, #8
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	621a      	str	r2, [r3, #32]
}
 800a8c0:	bf00      	nop
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	fffeff8f 	.word	0xfffeff8f
 800a8d0:	40010000 	.word	0x40010000
 800a8d4:	40010400 	.word	0x40010400

0800a8d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4b1c      	ldr	r3, [pc, #112]	; (800a974 <TIM_OC6_SetConfig+0x9c>)
 800a904:	4013      	ands	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	051b      	lsls	r3, r3, #20
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a13      	ldr	r2, [pc, #76]	; (800a978 <TIM_OC6_SetConfig+0xa0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d003      	beq.n	800a938 <TIM_OC6_SetConfig+0x60>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a12      	ldr	r2, [pc, #72]	; (800a97c <TIM_OC6_SetConfig+0xa4>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d109      	bne.n	800a94c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a93e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	029b      	lsls	r3, r3, #10
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	621a      	str	r2, [r3, #32]
}
 800a966:	bf00      	nop
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	feff8fff 	.word	0xfeff8fff
 800a978:	40010000 	.word	0x40010000
 800a97c:	40010400 	.word	0x40010400

0800a980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	f023 0201 	bic.w	r2, r3, #1
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f023 030a 	bic.w	r3, r3, #10
 800a9bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	621a      	str	r2, [r3, #32]
}
 800a9d2:	bf00      	nop
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b087      	sub	sp, #28
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	f023 0210 	bic.w	r2, r3, #16
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	031b      	lsls	r3, r3, #12
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	011b      	lsls	r3, r3, #4
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b085      	sub	sp, #20
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	f043 0307 	orr.w	r3, r3, #7
 800aa60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	609a      	str	r2, [r3, #8]
}
 800aa68:	bf00      	nop
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	021a      	lsls	r2, r3, #8
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	431a      	orrs	r2, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	609a      	str	r2, [r3, #8]
}
 800aaa8:	bf00      	nop
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aac8:	2302      	movs	r3, #2
 800aaca:	e06d      	b.n	800aba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a30      	ldr	r2, [pc, #192]	; (800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d004      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a2f      	ldr	r2, [pc, #188]	; (800abb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d108      	bne.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a20      	ldr	r2, [pc, #128]	; (800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d022      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab3e:	d01d      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a1d      	ldr	r2, [pc, #116]	; (800abbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d018      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d013      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a1a      	ldr	r2, [pc, #104]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00e      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a15      	ldr	r2, [pc, #84]	; (800abb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d009      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a16      	ldr	r2, [pc, #88]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d004      	beq.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a15      	ldr	r2, [pc, #84]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d10c      	bne.n	800ab96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40010400 	.word	0x40010400
 800abbc:	40000400 	.word	0x40000400
 800abc0:	40000800 	.word	0x40000800
 800abc4:	40000c00 	.word	0x40000c00
 800abc8:	40014000 	.word	0x40014000
 800abcc:	40001800 	.word	0x40001800

0800abd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d101      	bne.n	800abec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abe8:	2302      	movs	r3, #2
 800abea:	e065      	b.n	800acb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	4313      	orrs	r3, r2
 800ac54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	041b      	lsls	r3, r3, #16
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a16      	ldr	r2, [pc, #88]	; (800acc4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d004      	beq.n	800ac7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a14      	ldr	r2, [pc, #80]	; (800acc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d115      	bne.n	800aca6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	4313      	orrs	r3, r2
 800ac88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	40010000 	.word	0x40010000
 800acc8:	40010400 	.word	0x40010400

0800accc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e040      	b.n	800ad9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7f8 fd20 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2224      	movs	r2, #36	; 0x24
 800ad34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0201 	bic.w	r2, r2, #1
 800ad44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f82c 	bl	800ada4 <UART_SetConfig>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d101      	bne.n	800ad56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e022      	b.n	800ad9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 face 	bl	800b300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689a      	ldr	r2, [r3, #8]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0201 	orr.w	r2, r2, #1
 800ad92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fb55 	bl	800b444 <UART_CheckIdleState>
 800ad9a:	4603      	mov	r3, r0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800adac:	2300      	movs	r3, #0
 800adae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	431a      	orrs	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	431a      	orrs	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	4313      	orrs	r3, r2
 800adca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	4ba6      	ldr	r3, [pc, #664]	; (800b06c <UART_SetConfig+0x2c8>)
 800add4:	4013      	ands	r3, r2
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	6812      	ldr	r2, [r2, #0]
 800adda:	6939      	ldr	r1, [r7, #16]
 800addc:	430b      	orrs	r3, r1
 800adde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68da      	ldr	r2, [r3, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a94      	ldr	r2, [pc, #592]	; (800b070 <UART_SetConfig+0x2cc>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d120      	bne.n	800ae66 <UART_SetConfig+0xc2>
 800ae24:	4b93      	ldr	r3, [pc, #588]	; (800b074 <UART_SetConfig+0x2d0>)
 800ae26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2a:	f003 0303 	and.w	r3, r3, #3
 800ae2e:	2b03      	cmp	r3, #3
 800ae30:	d816      	bhi.n	800ae60 <UART_SetConfig+0xbc>
 800ae32:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <UART_SetConfig+0x94>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae49 	.word	0x0800ae49
 800ae3c:	0800ae55 	.word	0x0800ae55
 800ae40:	0800ae4f 	.word	0x0800ae4f
 800ae44:	0800ae5b 	.word	0x0800ae5b
 800ae48:	2301      	movs	r3, #1
 800ae4a:	77fb      	strb	r3, [r7, #31]
 800ae4c:	e150      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	77fb      	strb	r3, [r7, #31]
 800ae52:	e14d      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800ae54:	2304      	movs	r3, #4
 800ae56:	77fb      	strb	r3, [r7, #31]
 800ae58:	e14a      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800ae5a:	2308      	movs	r3, #8
 800ae5c:	77fb      	strb	r3, [r7, #31]
 800ae5e:	e147      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800ae60:	2310      	movs	r3, #16
 800ae62:	77fb      	strb	r3, [r7, #31]
 800ae64:	e144      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a83      	ldr	r2, [pc, #524]	; (800b078 <UART_SetConfig+0x2d4>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d132      	bne.n	800aed6 <UART_SetConfig+0x132>
 800ae70:	4b80      	ldr	r3, [pc, #512]	; (800b074 <UART_SetConfig+0x2d0>)
 800ae72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae76:	f003 030c 	and.w	r3, r3, #12
 800ae7a:	2b0c      	cmp	r3, #12
 800ae7c:	d828      	bhi.n	800aed0 <UART_SetConfig+0x12c>
 800ae7e:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <UART_SetConfig+0xe0>)
 800ae80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae84:	0800aeb9 	.word	0x0800aeb9
 800ae88:	0800aed1 	.word	0x0800aed1
 800ae8c:	0800aed1 	.word	0x0800aed1
 800ae90:	0800aed1 	.word	0x0800aed1
 800ae94:	0800aec5 	.word	0x0800aec5
 800ae98:	0800aed1 	.word	0x0800aed1
 800ae9c:	0800aed1 	.word	0x0800aed1
 800aea0:	0800aed1 	.word	0x0800aed1
 800aea4:	0800aebf 	.word	0x0800aebf
 800aea8:	0800aed1 	.word	0x0800aed1
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aed1 	.word	0x0800aed1
 800aeb4:	0800aecb 	.word	0x0800aecb
 800aeb8:	2300      	movs	r3, #0
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e118      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800aebe:	2302      	movs	r3, #2
 800aec0:	77fb      	strb	r3, [r7, #31]
 800aec2:	e115      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800aec4:	2304      	movs	r3, #4
 800aec6:	77fb      	strb	r3, [r7, #31]
 800aec8:	e112      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800aeca:	2308      	movs	r3, #8
 800aecc:	77fb      	strb	r3, [r7, #31]
 800aece:	e10f      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800aed0:	2310      	movs	r3, #16
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e10c      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a68      	ldr	r2, [pc, #416]	; (800b07c <UART_SetConfig+0x2d8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d120      	bne.n	800af22 <UART_SetConfig+0x17e>
 800aee0:	4b64      	ldr	r3, [pc, #400]	; (800b074 <UART_SetConfig+0x2d0>)
 800aee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aeea:	2b30      	cmp	r3, #48	; 0x30
 800aeec:	d013      	beq.n	800af16 <UART_SetConfig+0x172>
 800aeee:	2b30      	cmp	r3, #48	; 0x30
 800aef0:	d814      	bhi.n	800af1c <UART_SetConfig+0x178>
 800aef2:	2b20      	cmp	r3, #32
 800aef4:	d009      	beq.n	800af0a <UART_SetConfig+0x166>
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d810      	bhi.n	800af1c <UART_SetConfig+0x178>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <UART_SetConfig+0x160>
 800aefe:	2b10      	cmp	r3, #16
 800af00:	d006      	beq.n	800af10 <UART_SetConfig+0x16c>
 800af02:	e00b      	b.n	800af1c <UART_SetConfig+0x178>
 800af04:	2300      	movs	r3, #0
 800af06:	77fb      	strb	r3, [r7, #31]
 800af08:	e0f2      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af0a:	2302      	movs	r3, #2
 800af0c:	77fb      	strb	r3, [r7, #31]
 800af0e:	e0ef      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af10:	2304      	movs	r3, #4
 800af12:	77fb      	strb	r3, [r7, #31]
 800af14:	e0ec      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af16:	2308      	movs	r3, #8
 800af18:	77fb      	strb	r3, [r7, #31]
 800af1a:	e0e9      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af1c:	2310      	movs	r3, #16
 800af1e:	77fb      	strb	r3, [r7, #31]
 800af20:	e0e6      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a56      	ldr	r2, [pc, #344]	; (800b080 <UART_SetConfig+0x2dc>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d120      	bne.n	800af6e <UART_SetConfig+0x1ca>
 800af2c:	4b51      	ldr	r3, [pc, #324]	; (800b074 <UART_SetConfig+0x2d0>)
 800af2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af36:	2bc0      	cmp	r3, #192	; 0xc0
 800af38:	d013      	beq.n	800af62 <UART_SetConfig+0x1be>
 800af3a:	2bc0      	cmp	r3, #192	; 0xc0
 800af3c:	d814      	bhi.n	800af68 <UART_SetConfig+0x1c4>
 800af3e:	2b80      	cmp	r3, #128	; 0x80
 800af40:	d009      	beq.n	800af56 <UART_SetConfig+0x1b2>
 800af42:	2b80      	cmp	r3, #128	; 0x80
 800af44:	d810      	bhi.n	800af68 <UART_SetConfig+0x1c4>
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <UART_SetConfig+0x1ac>
 800af4a:	2b40      	cmp	r3, #64	; 0x40
 800af4c:	d006      	beq.n	800af5c <UART_SetConfig+0x1b8>
 800af4e:	e00b      	b.n	800af68 <UART_SetConfig+0x1c4>
 800af50:	2300      	movs	r3, #0
 800af52:	77fb      	strb	r3, [r7, #31]
 800af54:	e0cc      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af56:	2302      	movs	r3, #2
 800af58:	77fb      	strb	r3, [r7, #31]
 800af5a:	e0c9      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af5c:	2304      	movs	r3, #4
 800af5e:	77fb      	strb	r3, [r7, #31]
 800af60:	e0c6      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af62:	2308      	movs	r3, #8
 800af64:	77fb      	strb	r3, [r7, #31]
 800af66:	e0c3      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af68:	2310      	movs	r3, #16
 800af6a:	77fb      	strb	r3, [r7, #31]
 800af6c:	e0c0      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a44      	ldr	r2, [pc, #272]	; (800b084 <UART_SetConfig+0x2e0>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d125      	bne.n	800afc4 <UART_SetConfig+0x220>
 800af78:	4b3e      	ldr	r3, [pc, #248]	; (800b074 <UART_SetConfig+0x2d0>)
 800af7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af86:	d017      	beq.n	800afb8 <UART_SetConfig+0x214>
 800af88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af8c:	d817      	bhi.n	800afbe <UART_SetConfig+0x21a>
 800af8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af92:	d00b      	beq.n	800afac <UART_SetConfig+0x208>
 800af94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af98:	d811      	bhi.n	800afbe <UART_SetConfig+0x21a>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <UART_SetConfig+0x202>
 800af9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa2:	d006      	beq.n	800afb2 <UART_SetConfig+0x20e>
 800afa4:	e00b      	b.n	800afbe <UART_SetConfig+0x21a>
 800afa6:	2300      	movs	r3, #0
 800afa8:	77fb      	strb	r3, [r7, #31]
 800afaa:	e0a1      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800afac:	2302      	movs	r3, #2
 800afae:	77fb      	strb	r3, [r7, #31]
 800afb0:	e09e      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800afb2:	2304      	movs	r3, #4
 800afb4:	77fb      	strb	r3, [r7, #31]
 800afb6:	e09b      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800afb8:	2308      	movs	r3, #8
 800afba:	77fb      	strb	r3, [r7, #31]
 800afbc:	e098      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800afbe:	2310      	movs	r3, #16
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	e095      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a2f      	ldr	r2, [pc, #188]	; (800b088 <UART_SetConfig+0x2e4>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d125      	bne.n	800b01a <UART_SetConfig+0x276>
 800afce:	4b29      	ldr	r3, [pc, #164]	; (800b074 <UART_SetConfig+0x2d0>)
 800afd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afdc:	d017      	beq.n	800b00e <UART_SetConfig+0x26a>
 800afde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afe2:	d817      	bhi.n	800b014 <UART_SetConfig+0x270>
 800afe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afe8:	d00b      	beq.n	800b002 <UART_SetConfig+0x25e>
 800afea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afee:	d811      	bhi.n	800b014 <UART_SetConfig+0x270>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <UART_SetConfig+0x258>
 800aff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff8:	d006      	beq.n	800b008 <UART_SetConfig+0x264>
 800affa:	e00b      	b.n	800b014 <UART_SetConfig+0x270>
 800affc:	2301      	movs	r3, #1
 800affe:	77fb      	strb	r3, [r7, #31]
 800b000:	e076      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b002:	2302      	movs	r3, #2
 800b004:	77fb      	strb	r3, [r7, #31]
 800b006:	e073      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b008:	2304      	movs	r3, #4
 800b00a:	77fb      	strb	r3, [r7, #31]
 800b00c:	e070      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b00e:	2308      	movs	r3, #8
 800b010:	77fb      	strb	r3, [r7, #31]
 800b012:	e06d      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b014:	2310      	movs	r3, #16
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e06a      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a1b      	ldr	r2, [pc, #108]	; (800b08c <UART_SetConfig+0x2e8>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d138      	bne.n	800b096 <UART_SetConfig+0x2f2>
 800b024:	4b13      	ldr	r3, [pc, #76]	; (800b074 <UART_SetConfig+0x2d0>)
 800b026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b02a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b02e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b032:	d017      	beq.n	800b064 <UART_SetConfig+0x2c0>
 800b034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b038:	d82a      	bhi.n	800b090 <UART_SetConfig+0x2ec>
 800b03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b03e:	d00b      	beq.n	800b058 <UART_SetConfig+0x2b4>
 800b040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b044:	d824      	bhi.n	800b090 <UART_SetConfig+0x2ec>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <UART_SetConfig+0x2ae>
 800b04a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b04e:	d006      	beq.n	800b05e <UART_SetConfig+0x2ba>
 800b050:	e01e      	b.n	800b090 <UART_SetConfig+0x2ec>
 800b052:	2300      	movs	r3, #0
 800b054:	77fb      	strb	r3, [r7, #31]
 800b056:	e04b      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b058:	2302      	movs	r3, #2
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	e048      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b05e:	2304      	movs	r3, #4
 800b060:	77fb      	strb	r3, [r7, #31]
 800b062:	e045      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b064:	2308      	movs	r3, #8
 800b066:	77fb      	strb	r3, [r7, #31]
 800b068:	e042      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b06a:	bf00      	nop
 800b06c:	efff69f3 	.word	0xefff69f3
 800b070:	40011000 	.word	0x40011000
 800b074:	40023800 	.word	0x40023800
 800b078:	40004400 	.word	0x40004400
 800b07c:	40004800 	.word	0x40004800
 800b080:	40004c00 	.word	0x40004c00
 800b084:	40005000 	.word	0x40005000
 800b088:	40011400 	.word	0x40011400
 800b08c:	40007800 	.word	0x40007800
 800b090:	2310      	movs	r3, #16
 800b092:	77fb      	strb	r3, [r7, #31]
 800b094:	e02c      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a95      	ldr	r2, [pc, #596]	; (800b2f0 <UART_SetConfig+0x54c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d125      	bne.n	800b0ec <UART_SetConfig+0x348>
 800b0a0:	4b94      	ldr	r3, [pc, #592]	; (800b2f4 <UART_SetConfig+0x550>)
 800b0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b0aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b0ae:	d017      	beq.n	800b0e0 <UART_SetConfig+0x33c>
 800b0b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b0b4:	d817      	bhi.n	800b0e6 <UART_SetConfig+0x342>
 800b0b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ba:	d00b      	beq.n	800b0d4 <UART_SetConfig+0x330>
 800b0bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0c0:	d811      	bhi.n	800b0e6 <UART_SetConfig+0x342>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <UART_SetConfig+0x32a>
 800b0c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0ca:	d006      	beq.n	800b0da <UART_SetConfig+0x336>
 800b0cc:	e00b      	b.n	800b0e6 <UART_SetConfig+0x342>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	77fb      	strb	r3, [r7, #31]
 800b0d2:	e00d      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	77fb      	strb	r3, [r7, #31]
 800b0d8:	e00a      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b0da:	2304      	movs	r3, #4
 800b0dc:	77fb      	strb	r3, [r7, #31]
 800b0de:	e007      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	77fb      	strb	r3, [r7, #31]
 800b0e4:	e004      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b0e6:	2310      	movs	r3, #16
 800b0e8:	77fb      	strb	r3, [r7, #31]
 800b0ea:	e001      	b.n	800b0f0 <UART_SetConfig+0x34c>
 800b0ec:	2310      	movs	r3, #16
 800b0ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0f8:	f040 8080 	bne.w	800b1fc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b0fc:	7ffb      	ldrb	r3, [r7, #31]
 800b0fe:	2b08      	cmp	r3, #8
 800b100:	d85c      	bhi.n	800b1bc <UART_SetConfig+0x418>
 800b102:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <UART_SetConfig+0x364>)
 800b104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b14d 	.word	0x0800b14d
 800b110:	0800b16d 	.word	0x0800b16d
 800b114:	0800b1bd 	.word	0x0800b1bd
 800b118:	0800b185 	.word	0x0800b185
 800b11c:	0800b1bd 	.word	0x0800b1bd
 800b120:	0800b1bd 	.word	0x0800b1bd
 800b124:	0800b1bd 	.word	0x0800b1bd
 800b128:	0800b1a5 	.word	0x0800b1a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b12c:	f7fc f8b2 	bl	8007294 <HAL_RCC_GetPCLK1Freq>
 800b130:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	005a      	lsls	r2, r3, #1
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	085b      	lsrs	r3, r3, #1
 800b13c:	441a      	add	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	fbb2 f3f3 	udiv	r3, r2, r3
 800b146:	b29b      	uxth	r3, r3
 800b148:	61bb      	str	r3, [r7, #24]
        break;
 800b14a:	e03a      	b.n	800b1c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b14c:	f7fc f8b6 	bl	80072bc <HAL_RCC_GetPCLK2Freq>
 800b150:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	005a      	lsls	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	441a      	add	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	b29b      	uxth	r3, r3
 800b168:	61bb      	str	r3, [r7, #24]
        break;
 800b16a:	e02a      	b.n	800b1c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	085a      	lsrs	r2, r3, #1
 800b172:	4b61      	ldr	r3, [pc, #388]	; (800b2f8 <UART_SetConfig+0x554>)
 800b174:	4413      	add	r3, r2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	6852      	ldr	r2, [r2, #4]
 800b17a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b17e:	b29b      	uxth	r3, r3
 800b180:	61bb      	str	r3, [r7, #24]
        break;
 800b182:	e01e      	b.n	800b1c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b184:	f7fb ffb4 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 800b188:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	005a      	lsls	r2, r3, #1
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	441a      	add	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	61bb      	str	r3, [r7, #24]
        break;
 800b1a2:	e00e      	b.n	800b1c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	085b      	lsrs	r3, r3, #1
 800b1aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	61bb      	str	r3, [r7, #24]
        break;
 800b1ba:	e002      	b.n	800b1c2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	75fb      	strb	r3, [r7, #23]
        break;
 800b1c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b0f      	cmp	r3, #15
 800b1c6:	d916      	bls.n	800b1f6 <UART_SetConfig+0x452>
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ce:	d212      	bcs.n	800b1f6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f023 030f 	bic.w	r3, r3, #15
 800b1d8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	897b      	ldrh	r3, [r7, #10]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	897a      	ldrh	r2, [r7, #10]
 800b1f2:	60da      	str	r2, [r3, #12]
 800b1f4:	e070      	b.n	800b2d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	75fb      	strb	r3, [r7, #23]
 800b1fa:	e06d      	b.n	800b2d8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b1fc:	7ffb      	ldrb	r3, [r7, #31]
 800b1fe:	2b08      	cmp	r3, #8
 800b200:	d859      	bhi.n	800b2b6 <UART_SetConfig+0x512>
 800b202:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <UART_SetConfig+0x464>)
 800b204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b208:	0800b22d 	.word	0x0800b22d
 800b20c:	0800b24b 	.word	0x0800b24b
 800b210:	0800b269 	.word	0x0800b269
 800b214:	0800b2b7 	.word	0x0800b2b7
 800b218:	0800b281 	.word	0x0800b281
 800b21c:	0800b2b7 	.word	0x0800b2b7
 800b220:	0800b2b7 	.word	0x0800b2b7
 800b224:	0800b2b7 	.word	0x0800b2b7
 800b228:	0800b29f 	.word	0x0800b29f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b22c:	f7fc f832 	bl	8007294 <HAL_RCC_GetPCLK1Freq>
 800b230:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	085a      	lsrs	r2, r3, #1
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	441a      	add	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	fbb2 f3f3 	udiv	r3, r2, r3
 800b244:	b29b      	uxth	r3, r3
 800b246:	61bb      	str	r3, [r7, #24]
        break;
 800b248:	e038      	b.n	800b2bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b24a:	f7fc f837 	bl	80072bc <HAL_RCC_GetPCLK2Freq>
 800b24e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	085a      	lsrs	r2, r3, #1
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	441a      	add	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b262:	b29b      	uxth	r3, r3
 800b264:	61bb      	str	r3, [r7, #24]
        break;
 800b266:	e029      	b.n	800b2bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	085a      	lsrs	r2, r3, #1
 800b26e:	4b23      	ldr	r3, [pc, #140]	; (800b2fc <UART_SetConfig+0x558>)
 800b270:	4413      	add	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	6852      	ldr	r2, [r2, #4]
 800b276:	fbb3 f3f2 	udiv	r3, r3, r2
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	61bb      	str	r3, [r7, #24]
        break;
 800b27e:	e01d      	b.n	800b2bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b280:	f7fb ff36 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 800b284:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	085a      	lsrs	r2, r3, #1
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	441a      	add	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	fbb2 f3f3 	udiv	r3, r2, r3
 800b298:	b29b      	uxth	r3, r3
 800b29a:	61bb      	str	r3, [r7, #24]
        break;
 800b29c:	e00e      	b.n	800b2bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	61bb      	str	r3, [r7, #24]
        break;
 800b2b4:	e002      	b.n	800b2bc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	75fb      	strb	r3, [r7, #23]
        break;
 800b2ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	2b0f      	cmp	r3, #15
 800b2c0:	d908      	bls.n	800b2d4 <UART_SetConfig+0x530>
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c8:	d204      	bcs.n	800b2d4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	60da      	str	r2, [r3, #12]
 800b2d2:	e001      	b.n	800b2d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	40007c00 	.word	0x40007c00
 800b2f4:	40023800 	.word	0x40023800
 800b2f8:	01e84800 	.word	0x01e84800
 800b2fc:	00f42400 	.word	0x00f42400

0800b300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00a      	beq.n	800b32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	f003 0308 	and.w	r3, r3, #8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	f003 0310 	and.w	r3, r3, #16
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01a      	beq.n	800b416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3fe:	d10a      	bne.n	800b416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]
  }
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af02      	add	r7, sp, #8
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b452:	f7f8 fcdb 	bl	8003e0c <HAL_GetTick>
 800b456:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 0308 	and.w	r3, r3, #8
 800b462:	2b08      	cmp	r3, #8
 800b464:	d10e      	bne.n	800b484 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2200      	movs	r2, #0
 800b470:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f814 	bl	800b4a2 <UART_WaitOnFlagUntilTimeout>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e00a      	b.n	800b49a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4b2:	e05d      	b.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d059      	beq.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4bc:	f7f8 fca6 	bl	8003e0c <HAL_GetTick>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d302      	bcc.n	800b4d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11b      	bne.n	800b50a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f022 0201 	bic.w	r2, r2, #1
 800b4f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e042      	b.n	800b590 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d02b      	beq.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b526:	d123      	bne.n	800b570 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b530:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b540:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 0201 	bic.w	r2, r2, #1
 800b550:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2220      	movs	r2, #32
 800b556:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2220      	movs	r2, #32
 800b55c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2220      	movs	r2, #32
 800b562:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e00f      	b.n	800b590 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69da      	ldr	r2, [r3, #28]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	4013      	ands	r3, r2
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	bf0c      	ite	eq
 800b580:	2301      	moveq	r3, #1
 800b582:	2300      	movne	r3, #0
 800b584:	b2db      	uxtb	r3, r3
 800b586:	461a      	mov	r2, r3
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d092      	beq.n	800b4b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d027      	beq.n	800b602 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <FMC_SDRAM_Init+0xe0>)
 800b5bc:	4013      	ands	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5c8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b5ce:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b5d4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b5da:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b5e0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b5e6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b5ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b5f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	e032      	b.n	800b668 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b60e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b618:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b61e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	4b12      	ldr	r3, [pc, #72]	; (800b678 <FMC_SDRAM_Init+0xe0>)
 800b630:	4013      	ands	r3, r2
 800b632:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b63c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b642:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b648:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b64e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b654:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	ffff8000 	.word	0xffff8000

0800b67c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b68c:	2300      	movs	r3, #0
 800b68e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d02e      	beq.n	800b6f4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6a2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b6bc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b6c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b6d0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b6da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	609a      	str	r2, [r3, #8]
 800b6f2:	e039      	b.n	800b768 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	4b1e      	ldr	r3, [pc, #120]	; (800b778 <FMC_SDRAM_Timing_Init+0xfc>)
 800b6fe:	4013      	ands	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	3b01      	subs	r3, #1
 800b708:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	3b01      	subs	r3, #1
 800b710:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b712:	4313      	orrs	r3, r2
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	4313      	orrs	r3, r2
 800b718:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b726:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	3b01      	subs	r3, #1
 800b734:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b736:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b740:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	3b01      	subs	r3, #1
 800b748:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b74a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	3b01      	subs	r3, #1
 800b752:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b754:	4313      	orrs	r3, r2
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	4313      	orrs	r3, r2
 800b75a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	ff0f0fff 	.word	0xff0f0fff

0800b77c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b794:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b79e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	695a      	ldr	r2, [r3, #20]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	b480      	push	{r7}
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	f107 001c 	add.w	r0, r7, #28
 800b7f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b7fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b7fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b802:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b806:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b80a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b80e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	4b07      	ldr	r3, [pc, #28]	; (800b838 <SDMMC_Init+0x54>)
 800b81c:	4013      	ands	r3, r2
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	b004      	add	sp, #16
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	ffff8100 	.word	0xffff8100

0800b83c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2203      	movs	r2, #3
 800b862:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b864:	2002      	movs	r0, #2
 800b866:	f7f8 fadd 	bl	8003e24 <HAL_Delay>
  
  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0303 	and.w	r3, r3, #3
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b8b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b8ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68da      	ldr	r2, [r3, #12]
 800b8c6:	4b06      	ldr	r3, [pc, #24]	; (800b8e0 <SDMMC_SendCommand+0x50>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	fffff000 	.word	0xfffff000

0800b8e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	b2db      	uxtb	r3, r3
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b085      	sub	sp, #20
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3314      	adds	r3, #20
 800b90c:	461a      	mov	r2, r3
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	4413      	add	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
}  
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b94a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b950:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b956:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	431a      	orrs	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0

}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b98a:	2310      	movs	r3, #16
 800b98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b98e:	2340      	movs	r3, #64	; 0x40
 800b990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b99a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b99c:	f107 0308 	add.w	r3, r7, #8
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff ff74 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ac:	2110      	movs	r1, #16
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fa42 	bl	800be38 <SDMMC_GetCmdResp1>
 800b9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b6:	69fb      	ldr	r3, [r7, #28]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b9ce:	2311      	movs	r3, #17
 800b9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff ff52 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f0:	2111      	movs	r1, #17
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fa20 	bl	800be38 <SDMMC_GetCmdResp1>
 800b9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9fa:	69fb      	ldr	r3, [r7, #28]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ba12:	2312      	movs	r3, #18
 800ba14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba16:	2340      	movs	r3, #64	; 0x40
 800ba18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba24:	f107 0308 	add.w	r3, r7, #8
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff ff30 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ba30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba34:	2112      	movs	r1, #18
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f9fe 	bl	800be38 <SDMMC_GetCmdResp1>
 800ba3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba3e:	69fb      	ldr	r3, [r7, #28]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ba56:	2318      	movs	r3, #24
 800ba58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff ff0e 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ba74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba78:	2118      	movs	r1, #24
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f9dc 	bl	800be38 <SDMMC_GetCmdResp1>
 800ba80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba82:	69fb      	ldr	r3, [r7, #28]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ba9a:	2319      	movs	r3, #25
 800ba9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba9e:	2340      	movs	r3, #64	; 0x40
 800baa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baac:	f107 0308 	add.w	r3, r7, #8
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff feec 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800babc:	2119      	movs	r1, #25
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f9ba 	bl	800be38 <SDMMC_GetCmdResp1>
 800bac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bac6:	69fb      	ldr	r3, [r7, #28]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3720      	adds	r7, #32
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800badc:	230c      	movs	r3, #12
 800bade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff fecb 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bafa:	4a05      	ldr	r2, [pc, #20]	; (800bb10 <SDMMC_CmdStopTransfer+0x40>)
 800bafc:	210c      	movs	r1, #12
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f99a 	bl	800be38 <SDMMC_GetCmdResp1>
 800bb04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb06:	69fb      	ldr	r3, [r7, #28]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	05f5e100 	.word	0x05f5e100

0800bb14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08a      	sub	sp, #40	; 0x28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bb24:	2307      	movs	r3, #7
 800bb26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb28:	2340      	movs	r3, #64	; 0x40
 800bb2a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb34:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb36:	f107 0310 	add.w	r3, r7, #16
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff fea7 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bb42:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb46:	2107      	movs	r1, #7
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 f975 	bl	800be38 <SDMMC_GetCmdResp1>
 800bb4e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3728      	adds	r7, #40	; 0x28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b088      	sub	sp, #32
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb78:	f107 0308 	add.w	r3, r7, #8
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff fe86 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f92f 	bl	800bde8 <SDMMC_GetCmdError>
 800bb8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb8c:	69fb      	ldr	r3, [r7, #28]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3720      	adds	r7, #32
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b088      	sub	sp, #32
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bb9e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bba4:	2308      	movs	r3, #8
 800bba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bba8:	2340      	movs	r3, #64	; 0x40
 800bbaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbac:	2300      	movs	r3, #0
 800bbae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbb6:	f107 0308 	add.w	r3, r7, #8
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff fe67 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fb18 	bl	800c1f8 <SDMMC_GetCmdResp7>
 800bbc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbca:	69fb      	ldr	r3, [r7, #28]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3720      	adds	r7, #32
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bbe2:	2337      	movs	r3, #55	; 0x37
 800bbe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbe6:	2340      	movs	r3, #64	; 0x40
 800bbe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbea:	2300      	movs	r3, #0
 800bbec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbf4:	f107 0308 	add.w	r3, r7, #8
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff fe48 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc04:	2137      	movs	r1, #55	; 0x37
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f916 	bl	800be38 <SDMMC_GetCmdResp1>
 800bc0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <SDMMC_CmdAppOperCommand+0x44>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bc2a:	2329      	movs	r3, #41	; 0x29
 800bc2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc2e:	2340      	movs	r3, #64	; 0x40
 800bc30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc3c:	f107 0308 	add.w	r3, r7, #8
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff fe24 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fa27 	bl	800c09c <SDMMC_GetCmdResp3>
 800bc4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc50:	69fb      	ldr	r3, [r7, #28]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3720      	adds	r7, #32
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	80100000 	.word	0x80100000

0800bc60 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bc6e:	2306      	movs	r3, #6
 800bc70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc72:	2340      	movs	r3, #64	; 0x40
 800bc74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc76:	2300      	movs	r3, #0
 800bc78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc80:	f107 0308 	add.w	r3, r7, #8
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fe02 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bc8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc90:	2106      	movs	r1, #6
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f8d0 	bl	800be38 <SDMMC_GetCmdResp1>
 800bc98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc9a:	69fb      	ldr	r3, [r7, #28]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bcac:	2300      	movs	r3, #0
 800bcae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bcb0:	2333      	movs	r3, #51	; 0x33
 800bcb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcb4:	2340      	movs	r3, #64	; 0x40
 800bcb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcc2:	f107 0308 	add.w	r3, r7, #8
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff fde1 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bcce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd2:	2133      	movs	r1, #51	; 0x33
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f8af 	bl	800be38 <SDMMC_GetCmdResp1>
 800bcda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3720      	adds	r7, #32
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b088      	sub	sp, #32
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bcf6:	23c0      	movs	r3, #192	; 0xc0
 800bcf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd04:	f107 0308 	add.w	r3, r7, #8
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff fdc0 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f97d 	bl	800c010 <SDMMC_GetCmdResp2>
 800bd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd18:	69fb      	ldr	r3, [r7, #28]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3720      	adds	r7, #32
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b088      	sub	sp, #32
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bd30:	2309      	movs	r3, #9
 800bd32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd34:	23c0      	movs	r3, #192	; 0xc0
 800bd36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd42:	f107 0308 	add.w	r3, r7, #8
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff fda1 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f95e 	bl	800c010 <SDMMC_GetCmdResp2>
 800bd54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd56:	69fb      	ldr	r3, [r7, #28]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd72:	2340      	movs	r3, #64	; 0x40
 800bd74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd80:	f107 0308 	add.w	r3, r7, #8
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff fd82 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	2103      	movs	r1, #3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f9bd 	bl	800c110 <SDMMC_GetCmdResp6>
 800bd96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd98:	69fb      	ldr	r3, [r7, #28]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b088      	sub	sp, #32
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bdb0:	230d      	movs	r3, #13
 800bdb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdb4:	2340      	movs	r3, #64	; 0x40
 800bdb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff fd61 	bl	800b890 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bdce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd2:	210d      	movs	r1, #13
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f82f 	bl	800be38 <SDMMC_GetCmdResp1>
 800bdda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bddc:	69fb      	ldr	r3, [r7, #28]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
	...

0800bde8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bde8:	b490      	push	{r4, r7}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdf0:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <SDMMC_GetCmdError+0x48>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a0f      	ldr	r2, [pc, #60]	; (800be34 <SDMMC_GetCmdError+0x4c>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	0a5b      	lsrs	r3, r3, #9
 800bdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800be00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be04:	4623      	mov	r3, r4
 800be06:	1e5c      	subs	r4, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be10:	e009      	b.n	800be26 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0f2      	beq.n	800be04 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	22c5      	movs	r2, #197	; 0xc5
 800be22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc90      	pop	{r4, r7}
 800be2e:	4770      	bx	lr
 800be30:	20000014 	.word	0x20000014
 800be34:	10624dd3 	.word	0x10624dd3

0800be38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800be38:	b590      	push	{r4, r7, lr}
 800be3a:	b087      	sub	sp, #28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	460b      	mov	r3, r1
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be46:	4b6f      	ldr	r3, [pc, #444]	; (800c004 <SDMMC_GetCmdResp1+0x1cc>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a6f      	ldr	r2, [pc, #444]	; (800c008 <SDMMC_GetCmdResp1+0x1d0>)
 800be4c:	fba2 2303 	umull	r2, r3, r2, r3
 800be50:	0a5b      	lsrs	r3, r3, #9
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be58:	4623      	mov	r3, r4
 800be5a:	1e5c      	subs	r4, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be64:	e0c9      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0f0      	beq.n	800be58 <SDMMC_GetCmdResp1+0x20>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1eb      	bne.n	800be58 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2204      	movs	r2, #4
 800be90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be92:	2304      	movs	r3, #4
 800be94:	e0b1      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d004      	beq.n	800beac <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2201      	movs	r2, #1
 800bea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e0a6      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	22c5      	movs	r2, #197	; 0xc5
 800beb0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff fd16 	bl	800b8e4 <SDMMC_GetCommandResponse>
 800beb8:	4603      	mov	r3, r0
 800beba:	461a      	mov	r2, r3
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d001      	beq.n	800bec6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e099      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bec6:	2100      	movs	r1, #0
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f7ff fd18 	bl	800b8fe <SDMMC_GetResponse>
 800bece:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	4b4e      	ldr	r3, [pc, #312]	; (800c00c <SDMMC_GetCmdResp1+0x1d4>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800beda:	2300      	movs	r3, #0
 800bedc:	e08d      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	da02      	bge.n	800beea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bee8:	e087      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bef4:	2340      	movs	r3, #64	; 0x40
 800bef6:	e080      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf02:	2380      	movs	r3, #128	; 0x80
 800bf04:	e079      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf14:	e071      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf24:	e069      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf34:	e061      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf44:	e059      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf54:	e051      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf64:	e049      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf74:	e041      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bf80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf84:	e039      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf94:	e031      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bfa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bfa4:	e029      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bfb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bfb4:	e021      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bfc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bfc4:	e019      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d002      	beq.n	800bfd6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bfd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bfd4:	e011      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bfe0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bfe4:	e009      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f003 0308 	and.w	r3, r3, #8
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bff0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bff4:	e001      	b.n	800bffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	371c      	adds	r7, #28
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd90      	pop	{r4, r7, pc}
 800c002:	bf00      	nop
 800c004:	20000014 	.word	0x20000014
 800c008:	10624dd3 	.word	0x10624dd3
 800c00c:	fdffe008 	.word	0xfdffe008

0800c010 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c010:	b490      	push	{r4, r7}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c018:	4b1e      	ldr	r3, [pc, #120]	; (800c094 <SDMMC_GetCmdResp2+0x84>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1e      	ldr	r2, [pc, #120]	; (800c098 <SDMMC_GetCmdResp2+0x88>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	0a5b      	lsrs	r3, r3, #9
 800c024:	f241 3288 	movw	r2, #5000	; 0x1388
 800c028:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c02c:	4623      	mov	r3, r4
 800c02e:	1e5c      	subs	r4, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d102      	bne.n	800c03a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c038:	e026      	b.n	800c088 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0f0      	beq.n	800c02c <SDMMC_GetCmdResp2+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1eb      	bne.n	800c02c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2204      	movs	r2, #4
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c066:	2304      	movs	r3, #4
 800c068:	e00e      	b.n	800c088 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e003      	b.n	800c088 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	22c5      	movs	r2, #197	; 0xc5
 800c084:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bc90      	pop	{r4, r7}
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20000014 	.word	0x20000014
 800c098:	10624dd3 	.word	0x10624dd3

0800c09c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c09c:	b490      	push	{r4, r7}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0a4:	4b18      	ldr	r3, [pc, #96]	; (800c108 <SDMMC_GetCmdResp3+0x6c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a18      	ldr	r2, [pc, #96]	; (800c10c <SDMMC_GetCmdResp3+0x70>)
 800c0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ae:	0a5b      	lsrs	r3, r3, #9
 800c0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c0b8:	4623      	mov	r3, r4
 800c0ba:	1e5c      	subs	r4, r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d102      	bne.n	800c0c6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0c4:	e01b      	b.n	800c0fe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d0f0      	beq.n	800c0b8 <SDMMC_GetCmdResp3+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1eb      	bne.n	800c0b8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e4:	f003 0304 	and.w	r3, r3, #4
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2204      	movs	r2, #4
 800c0f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0f2:	2304      	movs	r3, #4
 800c0f4:	e003      	b.n	800c0fe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	22c5      	movs	r2, #197	; 0xc5
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bc90      	pop	{r4, r7}
 800c106:	4770      	bx	lr
 800c108:	20000014 	.word	0x20000014
 800c10c:	10624dd3 	.word	0x10624dd3

0800c110 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c110:	b590      	push	{r4, r7, lr}
 800c112:	b087      	sub	sp, #28
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	460b      	mov	r3, r1
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c11e:	4b34      	ldr	r3, [pc, #208]	; (800c1f0 <SDMMC_GetCmdResp6+0xe0>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a34      	ldr	r2, [pc, #208]	; (800c1f4 <SDMMC_GetCmdResp6+0xe4>)
 800c124:	fba2 2303 	umull	r2, r3, r2, r3
 800c128:	0a5b      	lsrs	r3, r3, #9
 800c12a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c12e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c132:	4623      	mov	r3, r4
 800c134:	1e5c      	subs	r4, r3, #1
 800c136:	2b00      	cmp	r3, #0
 800c138:	d102      	bne.n	800c140 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c13a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c13e:	e052      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c144:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0f0      	beq.n	800c132 <SDMMC_GetCmdResp6+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1eb      	bne.n	800c132 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c15e:	f003 0304 	and.w	r3, r3, #4
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2204      	movs	r2, #4
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c16c:	2304      	movs	r3, #4
 800c16e:	e03a      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d004      	beq.n	800c186 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2201      	movs	r2, #1
 800c180:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c182:	2301      	movs	r3, #1
 800c184:	e02f      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff fbac 	bl	800b8e4 <SDMMC_GetCommandResponse>
 800c18c:	4603      	mov	r3, r0
 800c18e:	461a      	mov	r2, r3
 800c190:	7afb      	ldrb	r3, [r7, #11]
 800c192:	4293      	cmp	r3, r2
 800c194:	d001      	beq.n	800c19a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c196:	2301      	movs	r3, #1
 800c198:	e025      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	22c5      	movs	r2, #197	; 0xc5
 800c19e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f7ff fbab 	bl	800b8fe <SDMMC_GetResponse>
 800c1a8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d106      	bne.n	800c1c2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	0c1b      	lsrs	r3, r3, #16
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e011      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1d0:	e009      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c1dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1e0:	e001      	b.n	800c1e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	371c      	adds	r7, #28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd90      	pop	{r4, r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000014 	.word	0x20000014
 800c1f4:	10624dd3 	.word	0x10624dd3

0800c1f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c1f8:	b490      	push	{r4, r7}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c200:	4b21      	ldr	r3, [pc, #132]	; (800c288 <SDMMC_GetCmdResp7+0x90>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a21      	ldr	r2, [pc, #132]	; (800c28c <SDMMC_GetCmdResp7+0x94>)
 800c206:	fba2 2303 	umull	r2, r3, r2, r3
 800c20a:	0a5b      	lsrs	r3, r3, #9
 800c20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c210:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c214:	4623      	mov	r3, r4
 800c216:	1e5c      	subs	r4, r3, #1
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d102      	bne.n	800c222 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c21c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c220:	e02c      	b.n	800c27c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c226:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0f0      	beq.n	800c214 <SDMMC_GetCmdResp7+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1eb      	bne.n	800c214 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d004      	beq.n	800c252 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2204      	movs	r2, #4
 800c24c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c24e:	2304      	movs	r3, #4
 800c250:	e014      	b.n	800c27c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c264:	2301      	movs	r3, #1
 800c266:	e009      	b.n	800c27c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2240      	movs	r2, #64	; 0x40
 800c278:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c27a:	2300      	movs	r3, #0
  
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bc90      	pop	{r4, r7}
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	20000014 	.word	0x20000014
 800c28c:	10624dd3 	.word	0x10624dd3

0800c290 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c294:	4904      	ldr	r1, [pc, #16]	; (800c2a8 <MX_FATFS_Init+0x18>)
 800c296:	4805      	ldr	r0, [pc, #20]	; (800c2ac <MX_FATFS_Init+0x1c>)
 800c298:	f000 fa96 	bl	800c7c8 <FATFS_LinkDriver>
 800c29c:	4603      	mov	r3, r0
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4b03      	ldr	r3, [pc, #12]	; (800c2b0 <MX_FATFS_Init+0x20>)
 800c2a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c2a4:	bf00      	nop
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20000b74 	.word	0x20000b74
 800c2ac:	080280fc 	.word	0x080280fc
 800c2b0:	20000b70 	.word	0x20000b70

0800c2b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c2be:	f000 f87b 	bl	800c3b8 <BSP_SD_IsDetected>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d001      	beq.n	800c2cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	e012      	b.n	800c2f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c2cc:	480b      	ldr	r0, [pc, #44]	; (800c2fc <BSP_SD_Init+0x48>)
 800c2ce:	f7fc fad9 	bl	8008884 <HAL_SD_Init>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d109      	bne.n	800c2f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c2dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2e0:	4806      	ldr	r0, [pc, #24]	; (800c2fc <BSP_SD_Init+0x48>)
 800c2e2:	f7fc ff1b 	bl	800911c <HAL_SD_ConfigWideBusOperation>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	200006dc 	.word	0x200006dc

0800c300 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	4806      	ldr	r0, [pc, #24]	; (800c330 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c318:	f7fc fb4c 	bl	80089b4 <HAL_SD_ReadBlocks_DMA>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c326:	7dfb      	ldrb	r3, [r7, #23]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	200006dc 	.word	0x200006dc

0800c334 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	68f9      	ldr	r1, [r7, #12]
 800c34a:	4806      	ldr	r0, [pc, #24]	; (800c364 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c34c:	f7fc fc1e 	bl	8008b8c <HAL_SD_WriteBlocks_DMA>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200006dc 	.word	0x200006dc

0800c368 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c36c:	4805      	ldr	r0, [pc, #20]	; (800c384 <BSP_SD_GetCardState+0x1c>)
 800c36e:	f7fc ff51 	bl	8009214 <HAL_SD_GetCardState>
 800c372:	4603      	mov	r3, r0
 800c374:	2b04      	cmp	r3, #4
 800c376:	bf14      	ite	ne
 800c378:	2301      	movne	r3, #1
 800c37a:	2300      	moveq	r3, #0
 800c37c:	b2db      	uxtb	r3, r3
}
 800c37e:	4618      	mov	r0, r3
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	200006dc 	.word	0x200006dc

0800c388 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c390:	6879      	ldr	r1, [r7, #4]
 800c392:	4803      	ldr	r0, [pc, #12]	; (800c3a0 <BSP_SD_GetCardInfo+0x18>)
 800c394:	f7fc fe96 	bl	80090c4 <HAL_SD_GetCardInfo>
}
 800c398:	bf00      	nop
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	200006dc 	.word	0x200006dc

0800c3a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c3ac:	f000 f9b2 	bl	800c714 <BSP_SD_ReadCpltCallback>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c3c2:	f000 f80b 	bl	800c3dc <BSP_PlatformIsDetected>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	b2db      	uxtb	r3, r3
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c3e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3ea:	4806      	ldr	r0, [pc, #24]	; (800c404 <BSP_PlatformIsDetected+0x28>)
 800c3ec:	f7f9 fe04 	bl	8005ff8 <HAL_GPIO_ReadPin>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c3fa:	79fb      	ldrb	r3, [r7, #7]
}  
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	40020800 	.word	0x40020800

0800c408 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c410:	f000 fa26 	bl	800c860 <osKernelSysTick>
 800c414:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c416:	e006      	b.n	800c426 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c418:	f7ff ffa6 	bl	800c368 <BSP_SD_GetCardState>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c422:	2300      	movs	r3, #0
 800c424:	e009      	b.n	800c43a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c426:	f000 fa1b 	bl	800c860 <osKernelSysTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d8f0      	bhi.n	800c418 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c44e:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <SD_CheckStatus+0x38>)
 800c450:	2201      	movs	r2, #1
 800c452:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c454:	f7ff ff88 	bl	800c368 <BSP_SD_GetCardState>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d107      	bne.n	800c46e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c45e:	4b07      	ldr	r3, [pc, #28]	; (800c47c <SD_CheckStatus+0x38>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	f023 0301 	bic.w	r3, r3, #1
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	4b04      	ldr	r3, [pc, #16]	; (800c47c <SD_CheckStatus+0x38>)
 800c46c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c46e:	4b03      	ldr	r3, [pc, #12]	; (800c47c <SD_CheckStatus+0x38>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b2db      	uxtb	r3, r3
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	2000001d 	.word	0x2000001d

0800c480 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c480:	b590      	push	{r4, r7, lr}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c48a:	4b20      	ldr	r3, [pc, #128]	; (800c50c <SD_initialize+0x8c>)
 800c48c:	2201      	movs	r2, #1
 800c48e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c490:	f000 f9da 	bl	800c848 <osKernelRunning>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d030      	beq.n	800c4fc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c49a:	f7ff ff0b 	bl	800c2b4 <BSP_SD_Init>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d107      	bne.n	800c4b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff ffcc 	bl	800c444 <SD_CheckStatus>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	4b16      	ldr	r3, [pc, #88]	; (800c50c <SD_initialize+0x8c>)
 800c4b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c4b4:	4b15      	ldr	r3, [pc, #84]	; (800c50c <SD_initialize+0x8c>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d01e      	beq.n	800c4fc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c4be:	4b14      	ldr	r3, [pc, #80]	; (800c510 <SD_initialize+0x90>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10e      	bne.n	800c4e4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c4c6:	4b13      	ldr	r3, [pc, #76]	; (800c514 <SD_initialize+0x94>)
 800c4c8:	f107 0408 	add.w	r4, r7, #8
 800c4cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c4d2:	f107 0308 	add.w	r3, r7, #8
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f000 fa31 	bl	800c940 <osMessageCreate>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	4a0b      	ldr	r2, [pc, #44]	; (800c510 <SD_initialize+0x90>)
 800c4e2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c4e4:	4b0a      	ldr	r3, [pc, #40]	; (800c510 <SD_initialize+0x90>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d107      	bne.n	800c4fc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c4ec:	4b07      	ldr	r3, [pc, #28]	; (800c50c <SD_initialize+0x8c>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	f043 0301 	orr.w	r3, r3, #1
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	4b04      	ldr	r3, [pc, #16]	; (800c50c <SD_initialize+0x8c>)
 800c4fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c4fc:	4b03      	ldr	r3, [pc, #12]	; (800c50c <SD_initialize+0x8c>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	b2db      	uxtb	r3, r3
}
 800c502:	4618      	mov	r0, r3
 800c504:	371c      	adds	r7, #28
 800c506:	46bd      	mov	sp, r7
 800c508:	bd90      	pop	{r4, r7, pc}
 800c50a:	bf00      	nop
 800c50c:	2000001d 	.word	0x2000001d
 800c510:	20000b78 	.word	0x20000b78
 800c514:	080276c4 	.word	0x080276c4

0800c518 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c522:	79fb      	ldrb	r3, [r7, #7]
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff ff8d 	bl	800c444 <SD_CheckStatus>
 800c52a:	4603      	mov	r3, r0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c54a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c54e:	f7ff ff5b 	bl	800c408 <SD_CheckStatusWithTimeout>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	da02      	bge.n	800c55e <SD_read+0x2a>
  {
    return res;
 800c558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c55c:	e032      	b.n	800c5c4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	6879      	ldr	r1, [r7, #4]
 800c562:	68b8      	ldr	r0, [r7, #8]
 800c564:	f7ff fecc 	bl	800c300 <BSP_SD_ReadBlocks_DMA>
 800c568:	4603      	mov	r3, r0
 800c56a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c56e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c572:	2b00      	cmp	r3, #0
 800c574:	d124      	bne.n	800c5c0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c576:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <SD_read+0x98>)
 800c578:	6819      	ldr	r1, [r3, #0]
 800c57a:	f107 0314 	add.w	r3, r7, #20
 800c57e:	f247 5230 	movw	r2, #30000	; 0x7530
 800c582:	4618      	mov	r0, r3
 800c584:	f000 fa44 	bl	800ca10 <osMessageGet>

    if (event.status == osEventMessage)
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2b10      	cmp	r3, #16
 800c58c:	d118      	bne.n	800c5c0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d115      	bne.n	800c5c0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c594:	f000 f964 	bl	800c860 <osKernelSysTick>
 800c598:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c59a:	e008      	b.n	800c5ae <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c59c:	f7ff fee4 	bl	800c368 <BSP_SD_GetCardState>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d103      	bne.n	800c5ae <SD_read+0x7a>
              {
                res = RES_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c5ac:	e008      	b.n	800c5c0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c5ae:	f000 f957 	bl	800c860 <osKernelSysTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d9ed      	bls.n	800c59c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3728      	adds	r7, #40	; 0x28
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	20000b78 	.word	0x20000b78

0800c5d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08a      	sub	sp, #40	; 0x28
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	607a      	str	r2, [r7, #4]
 800c5da:	603b      	str	r3, [r7, #0]
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c5e6:	f247 5030 	movw	r0, #30000	; 0x7530
 800c5ea:	f7ff ff0d 	bl	800c408 <SD_CheckStatusWithTimeout>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	da02      	bge.n	800c5fa <SD_write+0x2a>
  {
    return res;
 800c5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f8:	e02e      	b.n	800c658 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	68b8      	ldr	r0, [r7, #8]
 800c600:	f7ff fe98 	bl	800c334 <BSP_SD_WriteBlocks_DMA>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d124      	bne.n	800c654 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c60a:	4b15      	ldr	r3, [pc, #84]	; (800c660 <SD_write+0x90>)
 800c60c:	6819      	ldr	r1, [r3, #0]
 800c60e:	f107 0314 	add.w	r3, r7, #20
 800c612:	f247 5230 	movw	r2, #30000	; 0x7530
 800c616:	4618      	mov	r0, r3
 800c618:	f000 f9fa 	bl	800ca10 <osMessageGet>

    if (event.status == osEventMessage)
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d118      	bne.n	800c654 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	2b02      	cmp	r3, #2
 800c626:	d115      	bne.n	800c654 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c628:	f000 f91a 	bl	800c860 <osKernelSysTick>
 800c62c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c62e:	e008      	b.n	800c642 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c630:	f7ff fe9a 	bl	800c368 <BSP_SD_GetCardState>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <SD_write+0x72>
          {
            res = RES_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c640:	e008      	b.n	800c654 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c642:	f000 f90d 	bl	800c860 <osKernelSysTick>
 800c646:	4602      	mov	r2, r0
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c650:	4293      	cmp	r3, r2
 800c652:	d9ed      	bls.n	800c630 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3728      	adds	r7, #40	; 0x28
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	20000b78 	.word	0x20000b78

0800c664 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08c      	sub	sp, #48	; 0x30
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	603a      	str	r2, [r7, #0]
 800c66e:	71fb      	strb	r3, [r7, #7]
 800c670:	460b      	mov	r3, r1
 800c672:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c67a:	4b25      	ldr	r3, [pc, #148]	; (800c710 <SD_ioctl+0xac>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <SD_ioctl+0x28>
 800c688:	2303      	movs	r3, #3
 800c68a:	e03c      	b.n	800c706 <SD_ioctl+0xa2>

  switch (cmd)
 800c68c:	79bb      	ldrb	r3, [r7, #6]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d834      	bhi.n	800c6fc <SD_ioctl+0x98>
 800c692:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <SD_ioctl+0x34>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c6a9 	.word	0x0800c6a9
 800c69c:	0800c6b1 	.word	0x0800c6b1
 800c6a0:	0800c6c9 	.word	0x0800c6c9
 800c6a4:	0800c6e3 	.word	0x0800c6e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6ae:	e028      	b.n	800c702 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6b0:	f107 030c 	add.w	r3, r7, #12
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff fe67 	bl	800c388 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6c6:	e01c      	b.n	800c702 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6c8:	f107 030c 	add.w	r3, r7, #12
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff fe5b 	bl	800c388 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6e0:	e00f      	b.n	800c702 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6e2:	f107 030c 	add.w	r3, r7, #12
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fe4e 	bl	800c388 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	0a5a      	lsrs	r2, r3, #9
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6fa:	e002      	b.n	800c702 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c6fc:	2304      	movs	r3, #4
 800c6fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c706:	4618      	mov	r0, r3
 800c708:	3730      	adds	r7, #48	; 0x30
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	2000001d 	.word	0x2000001d

0800c714 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c718:	4b04      	ldr	r3, [pc, #16]	; (800c72c <BSP_SD_ReadCpltCallback+0x18>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2200      	movs	r2, #0
 800c71e:	2101      	movs	r1, #1
 800c720:	4618      	mov	r0, r3
 800c722:	f000 f935 	bl	800c990 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c726:	bf00      	nop
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20000b78 	.word	0x20000b78

0800c730 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	4613      	mov	r3, r2
 800c73c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c73e:	2301      	movs	r3, #1
 800c740:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c746:	4b1f      	ldr	r3, [pc, #124]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c748:	7a5b      	ldrb	r3, [r3, #9]
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d131      	bne.n	800c7b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c750:	4b1c      	ldr	r3, [pc, #112]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c752:	7a5b      	ldrb	r3, [r3, #9]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	461a      	mov	r2, r3
 800c758:	4b1a      	ldr	r3, [pc, #104]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c75a:	2100      	movs	r1, #0
 800c75c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c75e:	4b19      	ldr	r3, [pc, #100]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c760:	7a5b      	ldrb	r3, [r3, #9]
 800c762:	b2db      	uxtb	r3, r3
 800c764:	4a17      	ldr	r2, [pc, #92]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c76e:	4b15      	ldr	r3, [pc, #84]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c770:	7a5b      	ldrb	r3, [r3, #9]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	461a      	mov	r2, r3
 800c776:	4b13      	ldr	r3, [pc, #76]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c778:	4413      	add	r3, r2
 800c77a:	79fa      	ldrb	r2, [r7, #7]
 800c77c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c77e:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c780:	7a5b      	ldrb	r3, [r3, #9]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	b2d1      	uxtb	r1, r2
 800c788:	4a0e      	ldr	r2, [pc, #56]	; (800c7c4 <FATFS_LinkDriverEx+0x94>)
 800c78a:	7251      	strb	r1, [r2, #9]
 800c78c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c78e:	7dbb      	ldrb	r3, [r7, #22]
 800c790:	3330      	adds	r3, #48	; 0x30
 800c792:	b2da      	uxtb	r2, r3
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	3301      	adds	r3, #1
 800c79c:	223a      	movs	r2, #58	; 0x3a
 800c79e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	3302      	adds	r3, #2
 800c7a4:	222f      	movs	r2, #47	; 0x2f
 800c7a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	3303      	adds	r3, #3
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	20000b7c 	.word	0x20000b7c

0800c7c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7ff ffaa 	bl	800c730 <FATFS_LinkDriverEx>
 800c7dc:	4603      	mov	r3, r0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b085      	sub	sp, #20
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7f8:	2b84      	cmp	r3, #132	; 0x84
 800c7fa:	d005      	beq.n	800c808 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c7fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	4413      	add	r3, r2
 800c804:	3303      	adds	r3, #3
 800c806:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c808:	68fb      	ldr	r3, [r7, #12]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c816:	b480      	push	{r7}
 800c818:	b083      	sub	sp, #12
 800c81a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c81c:	f3ef 8305 	mrs	r3, IPSR
 800c820:	607b      	str	r3, [r7, #4]
  return(result);
 800c822:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c824:	2b00      	cmp	r3, #0
 800c826:	bf14      	ite	ne
 800c828:	2301      	movne	r3, #1
 800c82a:	2300      	moveq	r3, #0
 800c82c:	b2db      	uxtb	r3, r3
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c83e:	f001 fb1d 	bl	800de7c <vTaskStartScheduler>
  
  return osOK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	bd80      	pop	{r7, pc}

0800c848 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c84c:	f001 ff70 	bl	800e730 <xTaskGetSchedulerState>
 800c850:	4603      	mov	r3, r0
 800c852:	2b01      	cmp	r3, #1
 800c854:	d101      	bne.n	800c85a <osKernelRunning+0x12>
    return 0;
 800c856:	2300      	movs	r3, #0
 800c858:	e000      	b.n	800c85c <osKernelRunning+0x14>
  else
    return 1;
 800c85a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c864:	f7ff ffd7 	bl	800c816 <inHandlerMode>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c86e:	f001 fc25 	bl	800e0bc <xTaskGetTickCountFromISR>
 800c872:	4603      	mov	r3, r0
 800c874:	e002      	b.n	800c87c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c876:	f001 fc11 	bl	800e09c <xTaskGetTickCount>
 800c87a:	4603      	mov	r3, r0
  }
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c882:	b089      	sub	sp, #36	; 0x24
 800c884:	af04      	add	r7, sp, #16
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d020      	beq.n	800c8d4 <osThreadCreate+0x54>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d01c      	beq.n	800c8d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685c      	ldr	r4, [r3, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	691e      	ldr	r6, [r3, #16]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7ff ff9a 	bl	800c7e6 <makeFreeRtosPriority>
 800c8b2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8bc:	9202      	str	r2, [sp, #8]
 800c8be:	9301      	str	r3, [sp, #4]
 800c8c0:	9100      	str	r1, [sp, #0]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	4632      	mov	r2, r6
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f001 f8fb 	bl	800dac4 <xTaskCreateStatic>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	e01c      	b.n	800c90e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685c      	ldr	r4, [r3, #4]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8e0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7ff ff7c 	bl	800c7e6 <makeFreeRtosPriority>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	f107 030c 	add.w	r3, r7, #12
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	9200      	str	r2, [sp, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4620      	mov	r0, r4
 800c900:	f001 f943 	bl	800db8a <xTaskCreate>
 800c904:	4603      	mov	r3, r0
 800c906:	2b01      	cmp	r3, #1
 800c908:	d001      	beq.n	800c90e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	e000      	b.n	800c910 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c90e:	68fb      	ldr	r3, [r7, #12]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c918 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <osDelay+0x16>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	e000      	b.n	800c930 <osDelay+0x18>
 800c92e:	2301      	movs	r3, #1
 800c930:	4618      	mov	r0, r3
 800c932:	f001 fa6d 	bl	800de10 <vTaskDelay>
  
  return osOK;
 800c936:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c940:	b590      	push	{r4, r7, lr}
 800c942:	b085      	sub	sp, #20
 800c944:	af02      	add	r7, sp, #8
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d011      	beq.n	800c976 <osMessageCreate+0x36>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00d      	beq.n	800c976 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6818      	ldr	r0, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6859      	ldr	r1, [r3, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	689a      	ldr	r2, [r3, #8]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	2400      	movs	r4, #0
 800c96c:	9400      	str	r4, [sp, #0]
 800c96e:	f000 f9e1 	bl	800cd34 <xQueueGenericCreateStatic>
 800c972:	4603      	mov	r3, r0
 800c974:	e008      	b.n	800c988 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	4619      	mov	r1, r3
 800c982:	f000 fa59 	bl	800ce38 <xQueueGenericCreate>
 800c986:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd90      	pop	{r4, r7, pc}

0800c990 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c99c:	2300      	movs	r3, #0
 800c99e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <osMessagePut+0x1e>
    ticks = 1;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c9ae:	f7ff ff32 	bl	800c816 <inHandlerMode>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d018      	beq.n	800c9ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c9b8:	f107 0210 	add.w	r2, r7, #16
 800c9bc:	f107 0108 	add.w	r1, r7, #8
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 fba0 	bl	800d108 <xQueueGenericSendFromISR>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d001      	beq.n	800c9d2 <osMessagePut+0x42>
      return osErrorOS;
 800c9ce:	23ff      	movs	r3, #255	; 0xff
 800c9d0:	e018      	b.n	800ca04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d014      	beq.n	800ca02 <osMessagePut+0x72>
 800c9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ca0c <osMessagePut+0x7c>)
 800c9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	e00b      	b.n	800ca02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c9ea:	f107 0108 	add.w	r1, r7, #8
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	697a      	ldr	r2, [r7, #20]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 fa82 	bl	800cefc <xQueueGenericSend>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d001      	beq.n	800ca02 <osMessagePut+0x72>
      return osErrorOS;
 800c9fe:	23ff      	movs	r3, #255	; 0xff
 800ca00:	e000      	b.n	800ca04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	e000ed04 	.word	0xe000ed04

0800ca10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ca10:	b590      	push	{r4, r7, lr}
 800ca12:	b08b      	sub	sp, #44	; 0x2c
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10a      	bne.n	800ca40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ca2a:	2380      	movs	r3, #128	; 0x80
 800ca2c:	617b      	str	r3, [r7, #20]
    return event;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	461c      	mov	r4, r3
 800ca32:	f107 0314 	add.w	r3, r7, #20
 800ca36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca3e:	e054      	b.n	800caea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ca40:	2300      	movs	r3, #0
 800ca42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d103      	bne.n	800ca58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ca50:	f04f 33ff 	mov.w	r3, #4294967295
 800ca54:	627b      	str	r3, [r7, #36]	; 0x24
 800ca56:	e009      	b.n	800ca6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <osMessageGet+0x5c>
      ticks = 1;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ca6c:	f7ff fed3 	bl	800c816 <inHandlerMode>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d01c      	beq.n	800cab0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ca76:	f107 0220 	add.w	r2, r7, #32
 800ca7a:	f107 0314 	add.w	r3, r7, #20
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4619      	mov	r1, r3
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f000 fe70 	bl	800d768 <xQueueReceiveFromISR>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d102      	bne.n	800ca94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ca8e:	2310      	movs	r3, #16
 800ca90:	617b      	str	r3, [r7, #20]
 800ca92:	e001      	b.n	800ca98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d01d      	beq.n	800cada <osMessageGet+0xca>
 800ca9e:	4b15      	ldr	r3, [pc, #84]	; (800caf4 <osMessageGet+0xe4>)
 800caa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	e014      	b.n	800cada <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cab0:	f107 0314 	add.w	r3, r7, #20
 800cab4:	3304      	adds	r3, #4
 800cab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cab8:	4619      	mov	r1, r3
 800caba:	68b8      	ldr	r0, [r7, #8]
 800cabc:	f000 fc5a 	bl	800d374 <xQueueReceive>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d102      	bne.n	800cacc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cac6:	2310      	movs	r3, #16
 800cac8:	617b      	str	r3, [r7, #20]
 800caca:	e006      	b.n	800cada <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <osMessageGet+0xc6>
 800cad2:	2300      	movs	r3, #0
 800cad4:	e000      	b.n	800cad8 <osMessageGet+0xc8>
 800cad6:	2340      	movs	r3, #64	; 0x40
 800cad8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	461c      	mov	r4, r3
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	372c      	adds	r7, #44	; 0x2c
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd90      	pop	{r4, r7, pc}
 800caf2:	bf00      	nop
 800caf4:	e000ed04 	.word	0xe000ed04

0800caf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f103 0208 	add.w	r2, r3, #8
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f103 0208 	add.w	r2, r3, #8
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f103 0208 	add.w	r2, r3, #8
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb46:	bf00      	nop
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	1c5a      	adds	r2, r3, #1
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	601a      	str	r2, [r3, #0]
}
 800cb8e:	bf00      	nop
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b085      	sub	sp, #20
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb0:	d103      	bne.n	800cbba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	e00c      	b.n	800cbd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	e002      	b.n	800cbc8 <vListInsert+0x2e>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d2f6      	bcs.n	800cbc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	601a      	str	r2, [r3, #0]
}
 800cc00:	bf00      	nop
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	6892      	ldr	r2, [r2, #8]
 800cc22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	6852      	ldr	r2, [r2, #4]
 800cc2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d103      	bne.n	800cc40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	689a      	ldr	r2, [r3, #8]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	1e5a      	subs	r2, r3, #1
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10c      	bne.n	800cc8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	b672      	cpsid	i
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	b662      	cpsie	i
 800cc88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cc8e:	f002 f89d 	bl	800edcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc9e:	fb01 f303 	mul.w	r3, r1, r3
 800cca2:	441a      	add	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	68f9      	ldr	r1, [r7, #12]
 800ccc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccc4:	fb01 f303 	mul.w	r3, r1, r3
 800ccc8:	441a      	add	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	22ff      	movs	r2, #255	; 0xff
 800ccd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	22ff      	movs	r2, #255	; 0xff
 800ccda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d114      	bne.n	800cd0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01a      	beq.n	800cd22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	3310      	adds	r3, #16
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f001 fb57 	bl	800e3a4 <xTaskRemoveFromEventList>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d012      	beq.n	800cd22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccfc:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <xQueueGenericReset+0xd0>)
 800ccfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	e009      	b.n	800cd22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3310      	adds	r3, #16
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff fef0 	bl	800caf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	3324      	adds	r3, #36	; 0x24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff feeb 	bl	800caf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd22:	f002 f887 	bl	800ee34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd26:	2301      	movs	r3, #1
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	e000ed04 	.word	0xe000ed04

0800cd34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08e      	sub	sp, #56	; 0x38
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10c      	bne.n	800cd62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	b672      	cpsid	i
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	b662      	cpsie	i
 800cd5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10c      	bne.n	800cd82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	b672      	cpsid	i
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	b662      	cpsie	i
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd7e:	bf00      	nop
 800cd80:	e7fe      	b.n	800cd80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <xQueueGenericCreateStatic+0x5a>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <xQueueGenericCreateStatic+0x5e>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e000      	b.n	800cd94 <xQueueGenericCreateStatic+0x60>
 800cd92:	2300      	movs	r3, #0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10c      	bne.n	800cdb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9c:	b672      	cpsid	i
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	b662      	cpsie	i
 800cdac:	623b      	str	r3, [r7, #32]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <xQueueGenericCreateStatic+0x8a>
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <xQueueGenericCreateStatic+0x8e>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e000      	b.n	800cdc4 <xQueueGenericCreateStatic+0x90>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10c      	bne.n	800cde2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdcc:	b672      	cpsid	i
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	b662      	cpsie	i
 800cddc:	61fb      	str	r3, [r7, #28]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cde2:	2348      	movs	r3, #72	; 0x48
 800cde4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b48      	cmp	r3, #72	; 0x48
 800cdea:	d00c      	beq.n	800ce06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	b672      	cpsid	i
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	b662      	cpsie	i
 800ce00:	61bb      	str	r3, [r7, #24]
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00d      	beq.n	800ce2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	2201      	movs	r2, #1
 800ce16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	4613      	mov	r3, r2
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f000 f847 	bl	800cebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3730      	adds	r7, #48	; 0x30
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08a      	sub	sp, #40	; 0x28
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	4613      	mov	r3, r2
 800ce44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10c      	bne.n	800ce66 <xQueueGenericCreate+0x2e>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	b672      	cpsid	i
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	b662      	cpsie	i
 800ce60:	613b      	str	r3, [r7, #16]
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	61fb      	str	r3, [r7, #28]
 800ce70:	e004      	b.n	800ce7c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	fb02 f303 	mul.w	r3, r2, r3
 800ce7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	3348      	adds	r3, #72	; 0x48
 800ce80:	4618      	mov	r0, r3
 800ce82:	f002 f8cf 	bl	800f024 <pvPortMalloc>
 800ce86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d011      	beq.n	800ceb2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	3348      	adds	r3, #72	; 0x48
 800ce96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cea0:	79fa      	ldrb	r2, [r7, #7]
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	4613      	mov	r3, r2
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 f805 	bl	800cebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ceb2:	69bb      	ldr	r3, [r7, #24]
	}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3720      	adds	r7, #32
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	69ba      	ldr	r2, [r7, #24]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	e002      	b.n	800cede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ceea:	2101      	movs	r1, #1
 800ceec:	69b8      	ldr	r0, [r7, #24]
 800ceee:	f7ff feb7 	bl	800cc60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08e      	sub	sp, #56	; 0x38
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10c      	bne.n	800cf32 <xQueueGenericSend+0x36>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	b672      	cpsid	i
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	b662      	cpsie	i
 800cf2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d103      	bne.n	800cf40 <xQueueGenericSend+0x44>
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d101      	bne.n	800cf44 <xQueueGenericSend+0x48>
 800cf40:	2301      	movs	r3, #1
 800cf42:	e000      	b.n	800cf46 <xQueueGenericSend+0x4a>
 800cf44:	2300      	movs	r3, #0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10c      	bne.n	800cf64 <xQueueGenericSend+0x68>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	b672      	cpsid	i
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	b662      	cpsie	i
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d103      	bne.n	800cf72 <xQueueGenericSend+0x76>
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <xQueueGenericSend+0x7a>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e000      	b.n	800cf78 <xQueueGenericSend+0x7c>
 800cf76:	2300      	movs	r3, #0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10c      	bne.n	800cf96 <xQueueGenericSend+0x9a>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	b672      	cpsid	i
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	b662      	cpsie	i
 800cf90:	623b      	str	r3, [r7, #32]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf96:	f001 fbcb 	bl	800e730 <xTaskGetSchedulerState>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <xQueueGenericSend+0xaa>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d101      	bne.n	800cfaa <xQueueGenericSend+0xae>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e000      	b.n	800cfac <xQueueGenericSend+0xb0>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10c      	bne.n	800cfca <xQueueGenericSend+0xce>
	__asm volatile
 800cfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb4:	b672      	cpsid	i
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	b662      	cpsie	i
 800cfc4:	61fb      	str	r3, [r7, #28]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfca:	f001 feff 	bl	800edcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d302      	bcc.n	800cfe0 <xQueueGenericSend+0xe4>
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	2b02      	cmp	r3, #2
 800cfde:	d129      	bne.n	800d034 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfe6:	f000 fc5d 	bl	800d8a4 <prvCopyDataToQueue>
 800cfea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d010      	beq.n	800d016 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	3324      	adds	r3, #36	; 0x24
 800cff8:	4618      	mov	r0, r3
 800cffa:	f001 f9d3 	bl	800e3a4 <xTaskRemoveFromEventList>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d013      	beq.n	800d02c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d004:	4b3f      	ldr	r3, [pc, #252]	; (800d104 <xQueueGenericSend+0x208>)
 800d006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	e00a      	b.n	800d02c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d007      	beq.n	800d02c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d01c:	4b39      	ldr	r3, [pc, #228]	; (800d104 <xQueueGenericSend+0x208>)
 800d01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d02c:	f001 ff02 	bl	800ee34 <vPortExitCritical>
				return pdPASS;
 800d030:	2301      	movs	r3, #1
 800d032:	e063      	b.n	800d0fc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d103      	bne.n	800d042 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d03a:	f001 fefb 	bl	800ee34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	e05c      	b.n	800d0fc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d044:	2b00      	cmp	r3, #0
 800d046:	d106      	bne.n	800d056 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d048:	f107 0314 	add.w	r3, r7, #20
 800d04c:	4618      	mov	r0, r3
 800d04e:	f001 fa0d 	bl	800e46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d052:	2301      	movs	r3, #1
 800d054:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d056:	f001 feed 	bl	800ee34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d05a:	f000 ff73 	bl	800df44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d05e:	f001 feb5 	bl	800edcc <vPortEnterCritical>
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d068:	b25b      	sxtb	r3, r3
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06e:	d103      	bne.n	800d078 <xQueueGenericSend+0x17c>
 800d070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d072:	2200      	movs	r2, #0
 800d074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d07e:	b25b      	sxtb	r3, r3
 800d080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d084:	d103      	bne.n	800d08e <xQueueGenericSend+0x192>
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d08e:	f001 fed1 	bl	800ee34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d092:	1d3a      	adds	r2, r7, #4
 800d094:	f107 0314 	add.w	r3, r7, #20
 800d098:	4611      	mov	r1, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f001 f9fc 	bl	800e498 <xTaskCheckForTimeOut>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d124      	bne.n	800d0f0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0a8:	f000 fcf4 	bl	800da94 <prvIsQueueFull>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d018      	beq.n	800d0e4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	3310      	adds	r3, #16
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f001 f94c 	bl	800e358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0c2:	f000 fc7f 	bl	800d9c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0c6:	f000 ff4b 	bl	800df60 <xTaskResumeAll>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f47f af7c 	bne.w	800cfca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d0d2:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <xQueueGenericSend+0x208>)
 800d0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	e772      	b.n	800cfca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e6:	f000 fc6d 	bl	800d9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0ea:	f000 ff39 	bl	800df60 <xTaskResumeAll>
 800d0ee:	e76c      	b.n	800cfca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f2:	f000 fc67 	bl	800d9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0f6:	f000 ff33 	bl	800df60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3738      	adds	r7, #56	; 0x38
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08e      	sub	sp, #56	; 0x38
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10c      	bne.n	800d13a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	b672      	cpsid	i
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	b662      	cpsie	i
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d103      	bne.n	800d148 <xQueueGenericSendFromISR+0x40>
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <xQueueGenericSendFromISR+0x44>
 800d148:	2301      	movs	r3, #1
 800d14a:	e000      	b.n	800d14e <xQueueGenericSendFromISR+0x46>
 800d14c:	2300      	movs	r3, #0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10c      	bne.n	800d16c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d156:	b672      	cpsid	i
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	b662      	cpsie	i
 800d166:	623b      	str	r3, [r7, #32]
}
 800d168:	bf00      	nop
 800d16a:	e7fe      	b.n	800d16a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d103      	bne.n	800d17a <xQueueGenericSendFromISR+0x72>
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d176:	2b01      	cmp	r3, #1
 800d178:	d101      	bne.n	800d17e <xQueueGenericSendFromISR+0x76>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <xQueueGenericSendFromISR+0x78>
 800d17e:	2300      	movs	r3, #0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10c      	bne.n	800d19e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d188:	b672      	cpsid	i
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	b662      	cpsie	i
 800d198:	61fb      	str	r3, [r7, #28]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d19e:	f001 fefd 	bl	800ef9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1a2:	f3ef 8211 	mrs	r2, BASEPRI
 800d1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1aa:	b672      	cpsid	i
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	b662      	cpsie	i
 800d1ba:	61ba      	str	r2, [r7, #24]
 800d1bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d302      	bcc.n	800d1d4 <xQueueGenericSendFromISR+0xcc>
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d12c      	bne.n	800d22e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	68b9      	ldr	r1, [r7, #8]
 800d1e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e4:	f000 fb5e 	bl	800d8a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f0:	d112      	bne.n	800d218 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d016      	beq.n	800d228 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	3324      	adds	r3, #36	; 0x24
 800d1fe:	4618      	mov	r0, r3
 800d200:	f001 f8d0 	bl	800e3a4 <xTaskRemoveFromEventList>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	e007      	b.n	800d228 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d21c:	3301      	adds	r3, #1
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	b25a      	sxtb	r2, r3
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d228:	2301      	movs	r3, #1
 800d22a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d22c:	e001      	b.n	800d232 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	637b      	str	r3, [r7, #52]	; 0x34
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d23c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d240:	4618      	mov	r0, r3
 800d242:	3738      	adds	r7, #56	; 0x38
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08e      	sub	sp, #56	; 0x38
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10c      	bne.n	800d276 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	b672      	cpsid	i
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	b662      	cpsie	i
 800d270:	623b      	str	r3, [r7, #32]
}
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00c      	beq.n	800d298 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	b672      	cpsid	i
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	b662      	cpsie	i
 800d292:	61fb      	str	r3, [r7, #28]
}
 800d294:	bf00      	nop
 800d296:	e7fe      	b.n	800d296 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d103      	bne.n	800d2a8 <xQueueGiveFromISR+0x60>
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <xQueueGiveFromISR+0x64>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e000      	b.n	800d2ae <xQueueGiveFromISR+0x66>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10c      	bne.n	800d2cc <xQueueGiveFromISR+0x84>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	b672      	cpsid	i
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	b662      	cpsie	i
 800d2c6:	61bb      	str	r3, [r7, #24]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2cc:	f001 fe66 	bl	800ef9c <vPortValidateInterruptPriority>
	__asm volatile
 800d2d0:	f3ef 8211 	mrs	r2, BASEPRI
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	b672      	cpsid	i
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	b662      	cpsie	i
 800d2e8:	617a      	str	r2, [r7, #20]
 800d2ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d2ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d22b      	bcs.n	800d358 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31a:	d112      	bne.n	800d342 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d320:	2b00      	cmp	r3, #0
 800d322:	d016      	beq.n	800d352 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	3324      	adds	r3, #36	; 0x24
 800d328:	4618      	mov	r0, r3
 800d32a:	f001 f83b 	bl	800e3a4 <xTaskRemoveFromEventList>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00e      	beq.n	800d352 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00b      	beq.n	800d352 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2201      	movs	r2, #1
 800d33e:	601a      	str	r2, [r3, #0]
 800d340:	e007      	b.n	800d352 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d346:	3301      	adds	r3, #1
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	b25a      	sxtb	r2, r3
 800d34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d352:	2301      	movs	r3, #1
 800d354:	637b      	str	r3, [r7, #52]	; 0x34
 800d356:	e001      	b.n	800d35c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	637b      	str	r3, [r7, #52]	; 0x34
 800d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f383 8811 	msr	BASEPRI, r3
}
 800d366:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3738      	adds	r7, #56	; 0x38
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b08c      	sub	sp, #48	; 0x30
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d380:	2300      	movs	r3, #0
 800d382:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10c      	bne.n	800d3a8 <xQueueReceive+0x34>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	b672      	cpsid	i
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	b662      	cpsie	i
 800d3a2:	623b      	str	r3, [r7, #32]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d103      	bne.n	800d3b6 <xQueueReceive+0x42>
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <xQueueReceive+0x46>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <xQueueReceive+0x48>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10c      	bne.n	800d3da <xQueueReceive+0x66>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	b672      	cpsid	i
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	b662      	cpsie	i
 800d3d4:	61fb      	str	r3, [r7, #28]
}
 800d3d6:	bf00      	nop
 800d3d8:	e7fe      	b.n	800d3d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3da:	f001 f9a9 	bl	800e730 <xTaskGetSchedulerState>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <xQueueReceive+0x76>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d101      	bne.n	800d3ee <xQueueReceive+0x7a>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <xQueueReceive+0x7c>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10c      	bne.n	800d40e <xQueueReceive+0x9a>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f8:	b672      	cpsid	i
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	b662      	cpsie	i
 800d408:	61bb      	str	r3, [r7, #24]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d40e:	f001 fcdd 	bl	800edcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01f      	beq.n	800d45e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d422:	f000 faa9 	bl	800d978 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	1e5a      	subs	r2, r3, #1
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00f      	beq.n	800d456 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	3310      	adds	r3, #16
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 ffb2 	bl	800e3a4 <xTaskRemoveFromEventList>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d446:	4b3d      	ldr	r3, [pc, #244]	; (800d53c <xQueueReceive+0x1c8>)
 800d448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d456:	f001 fced 	bl	800ee34 <vPortExitCritical>
				return pdPASS;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e069      	b.n	800d532 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d464:	f001 fce6 	bl	800ee34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d468:	2300      	movs	r3, #0
 800d46a:	e062      	b.n	800d532 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d106      	bne.n	800d480 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d472:	f107 0310 	add.w	r3, r7, #16
 800d476:	4618      	mov	r0, r3
 800d478:	f000 fff8 	bl	800e46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d480:	f001 fcd8 	bl	800ee34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d484:	f000 fd5e 	bl	800df44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d488:	f001 fca0 	bl	800edcc <vPortEnterCritical>
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d492:	b25b      	sxtb	r3, r3
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d498:	d103      	bne.n	800d4a2 <xQueueReceive+0x12e>
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a8:	b25b      	sxtb	r3, r3
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ae:	d103      	bne.n	800d4b8 <xQueueReceive+0x144>
 800d4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4b8:	f001 fcbc 	bl	800ee34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4bc:	1d3a      	adds	r2, r7, #4
 800d4be:	f107 0310 	add.w	r3, r7, #16
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 ffe7 	bl	800e498 <xTaskCheckForTimeOut>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d123      	bne.n	800d518 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4d2:	f000 fac9 	bl	800da68 <prvIsQueueEmpty>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d017      	beq.n	800d50c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	3324      	adds	r3, #36	; 0x24
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 ff37 	bl	800e358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ec:	f000 fa6a 	bl	800d9c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4f0:	f000 fd36 	bl	800df60 <xTaskResumeAll>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d189      	bne.n	800d40e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d4fa:	4b10      	ldr	r3, [pc, #64]	; (800d53c <xQueueReceive+0x1c8>)
 800d4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	e780      	b.n	800d40e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d50c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d50e:	f000 fa59 	bl	800d9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d512:	f000 fd25 	bl	800df60 <xTaskResumeAll>
 800d516:	e77a      	b.n	800d40e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d51a:	f000 fa53 	bl	800d9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d51e:	f000 fd1f 	bl	800df60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d524:	f000 faa0 	bl	800da68 <prvIsQueueEmpty>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f43f af6f 	beq.w	800d40e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d532:	4618      	mov	r0, r3
 800d534:	3730      	adds	r7, #48	; 0x30
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	e000ed04 	.word	0xe000ed04

0800d540 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08e      	sub	sp, #56	; 0x38
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d54a:	2300      	movs	r3, #0
 800d54c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10c      	bne.n	800d576 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	b672      	cpsid	i
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	b662      	cpsie	i
 800d570:	623b      	str	r3, [r7, #32]
}
 800d572:	bf00      	nop
 800d574:	e7fe      	b.n	800d574 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00c      	beq.n	800d598 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d582:	b672      	cpsid	i
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	b662      	cpsie	i
 800d592:	61fb      	str	r3, [r7, #28]
}
 800d594:	bf00      	nop
 800d596:	e7fe      	b.n	800d596 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d598:	f001 f8ca 	bl	800e730 <xTaskGetSchedulerState>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <xQueueSemaphoreTake+0x68>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <xQueueSemaphoreTake+0x6c>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e000      	b.n	800d5ae <xQueueSemaphoreTake+0x6e>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10c      	bne.n	800d5cc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	b672      	cpsid	i
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	b662      	cpsie	i
 800d5c6:	61bb      	str	r3, [r7, #24]
}
 800d5c8:	bf00      	nop
 800d5ca:	e7fe      	b.n	800d5ca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5cc:	f001 fbfe 	bl	800edcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d024      	beq.n	800d626 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	1e5a      	subs	r2, r3, #1
 800d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d5ec:	f001 fa66 	bl	800eabc <pvTaskIncrementMutexHeldCount>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00f      	beq.n	800d61e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	3310      	adds	r3, #16
 800d602:	4618      	mov	r0, r3
 800d604:	f000 fece 	bl	800e3a4 <xTaskRemoveFromEventList>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d60e:	4b55      	ldr	r3, [pc, #340]	; (800d764 <xQueueSemaphoreTake+0x224>)
 800d610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d61e:	f001 fc09 	bl	800ee34 <vPortExitCritical>
				return pdPASS;
 800d622:	2301      	movs	r3, #1
 800d624:	e099      	b.n	800d75a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d113      	bne.n	800d654 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00c      	beq.n	800d64c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	b672      	cpsid	i
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	b662      	cpsie	i
 800d646:	617b      	str	r3, [r7, #20]
}
 800d648:	bf00      	nop
 800d64a:	e7fe      	b.n	800d64a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d64c:	f001 fbf2 	bl	800ee34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d650:	2300      	movs	r3, #0
 800d652:	e082      	b.n	800d75a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d65a:	f107 030c 	add.w	r3, r7, #12
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 ff04 	bl	800e46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d664:	2301      	movs	r3, #1
 800d666:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d668:	f001 fbe4 	bl	800ee34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d66c:	f000 fc6a 	bl	800df44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d670:	f001 fbac 	bl	800edcc <vPortEnterCritical>
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d67a:	b25b      	sxtb	r3, r3
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d103      	bne.n	800d68a <xQueueSemaphoreTake+0x14a>
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d690:	b25b      	sxtb	r3, r3
 800d692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d696:	d103      	bne.n	800d6a0 <xQueueSemaphoreTake+0x160>
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6a0:	f001 fbc8 	bl	800ee34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6a4:	463a      	mov	r2, r7
 800d6a6:	f107 030c 	add.w	r3, r7, #12
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 fef3 	bl	800e498 <xTaskCheckForTimeOut>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d132      	bne.n	800d71e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6ba:	f000 f9d5 	bl	800da68 <prvIsQueueEmpty>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d026      	beq.n	800d712 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d109      	bne.n	800d6e0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d6cc:	f001 fb7e 	bl	800edcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f001 f849 	bl	800e76c <xTaskPriorityInherit>
 800d6da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d6dc:	f001 fbaa 	bl	800ee34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e2:	3324      	adds	r3, #36	; 0x24
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fe35 	bl	800e358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6f0:	f000 f968 	bl	800d9c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6f4:	f000 fc34 	bl	800df60 <xTaskResumeAll>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f47f af66 	bne.w	800d5cc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d700:	4b18      	ldr	r3, [pc, #96]	; (800d764 <xQueueSemaphoreTake+0x224>)
 800d702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	e75c      	b.n	800d5cc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d714:	f000 f956 	bl	800d9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d718:	f000 fc22 	bl	800df60 <xTaskResumeAll>
 800d71c:	e756      	b.n	800d5cc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d720:	f000 f950 	bl	800d9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d724:	f000 fc1c 	bl	800df60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d72a:	f000 f99d 	bl	800da68 <prvIsQueueEmpty>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	f43f af4b 	beq.w	800d5cc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00d      	beq.n	800d758 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d73c:	f001 fb46 	bl	800edcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d742:	f000 f897 	bl	800d874 <prvGetDisinheritPriorityAfterTimeout>
 800d746:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 f916 	bl	800e980 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d754:	f001 fb6e 	bl	800ee34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3738      	adds	r7, #56	; 0x38
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	e000ed04 	.word	0xe000ed04

0800d768 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08e      	sub	sp, #56	; 0x38
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10c      	bne.n	800d798 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	b672      	cpsid	i
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	b662      	cpsie	i
 800d792:	623b      	str	r3, [r7, #32]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d103      	bne.n	800d7a6 <xQueueReceiveFromISR+0x3e>
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <xQueueReceiveFromISR+0x42>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e000      	b.n	800d7ac <xQueueReceiveFromISR+0x44>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10c      	bne.n	800d7ca <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	b672      	cpsid	i
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	b662      	cpsie	i
 800d7c4:	61fb      	str	r3, [r7, #28]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7ca:	f001 fbe7 	bl	800ef9c <vPortValidateInterruptPriority>
	__asm volatile
 800d7ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	b672      	cpsid	i
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	b662      	cpsie	i
 800d7e6:	61ba      	str	r2, [r7, #24]
 800d7e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d7ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d02f      	beq.n	800d85a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d804:	68b9      	ldr	r1, [r7, #8]
 800d806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d808:	f000 f8b6 	bl	800d978 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	1e5a      	subs	r2, r3, #1
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81c:	d112      	bne.n	800d844 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	691b      	ldr	r3, [r3, #16]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d016      	beq.n	800d854 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	3310      	adds	r3, #16
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 fdba 	bl	800e3a4 <xTaskRemoveFromEventList>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00e      	beq.n	800d854 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00b      	beq.n	800d854 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	e007      	b.n	800d854 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d848:	3301      	adds	r3, #1
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	b25a      	sxtb	r2, r3
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d854:	2301      	movs	r3, #1
 800d856:	637b      	str	r3, [r7, #52]	; 0x34
 800d858:	e001      	b.n	800d85e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d85a:	2300      	movs	r3, #0
 800d85c:	637b      	str	r3, [r7, #52]	; 0x34
 800d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d860:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f383 8811 	msr	BASEPRI, r3
}
 800d868:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3738      	adds	r7, #56	; 0x38
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d880:	2b00      	cmp	r3, #0
 800d882:	d006      	beq.n	800d892 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f1c3 0307 	rsb	r3, r3, #7
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e001      	b.n	800d896 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d892:	2300      	movs	r3, #0
 800d894:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d896:	68fb      	ldr	r3, [r7, #12]
	}
 800d898:	4618      	mov	r0, r3
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10d      	bne.n	800d8de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d14d      	bne.n	800d966 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 ffcc 	bl	800e86c <xTaskPriorityDisinherit>
 800d8d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	609a      	str	r2, [r3, #8]
 800d8dc:	e043      	b.n	800d966 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d119      	bne.n	800d918 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6858      	ldr	r0, [r3, #4]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	68b9      	ldr	r1, [r7, #8]
 800d8f0:	f019 f94e 	bl	8026b90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fc:	441a      	add	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	685a      	ldr	r2, [r3, #4]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d32b      	bcc.n	800d966 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	605a      	str	r2, [r3, #4]
 800d916:	e026      	b.n	800d966 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	68d8      	ldr	r0, [r3, #12]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d920:	461a      	mov	r2, r3
 800d922:	68b9      	ldr	r1, [r7, #8]
 800d924:	f019 f934 	bl	8026b90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	68da      	ldr	r2, [r3, #12]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d930:	425b      	negs	r3, r3
 800d932:	441a      	add	r2, r3
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68da      	ldr	r2, [r3, #12]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	429a      	cmp	r2, r3
 800d942:	d207      	bcs.n	800d954 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	689a      	ldr	r2, [r3, #8]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94c:	425b      	negs	r3, r3
 800d94e:	441a      	add	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d105      	bne.n	800d966 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	3b01      	subs	r3, #1
 800d964:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d96e:	697b      	ldr	r3, [r7, #20]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d986:	2b00      	cmp	r3, #0
 800d988:	d018      	beq.n	800d9bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	441a      	add	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	68da      	ldr	r2, [r3, #12]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d303      	bcc.n	800d9ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68d9      	ldr	r1, [r3, #12]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6838      	ldr	r0, [r7, #0]
 800d9b8:	f019 f8ea 	bl	8026b90 <memcpy>
	}
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d9cc:	f001 f9fe 	bl	800edcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9d8:	e011      	b.n	800d9fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d012      	beq.n	800da08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3324      	adds	r3, #36	; 0x24
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 fcdc 	bl	800e3a4 <xTaskRemoveFromEventList>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d9f2:	f000 fdb7 	bl	800e564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da02:	2b00      	cmp	r3, #0
 800da04:	dce9      	bgt.n	800d9da <prvUnlockQueue+0x16>
 800da06:	e000      	b.n	800da0a <prvUnlockQueue+0x46>
					break;
 800da08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	22ff      	movs	r2, #255	; 0xff
 800da0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da12:	f001 fa0f 	bl	800ee34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da16:	f001 f9d9 	bl	800edcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da22:	e011      	b.n	800da48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d012      	beq.n	800da52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	3310      	adds	r3, #16
 800da30:	4618      	mov	r0, r3
 800da32:	f000 fcb7 	bl	800e3a4 <xTaskRemoveFromEventList>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da3c:	f000 fd92 	bl	800e564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da40:	7bbb      	ldrb	r3, [r7, #14]
 800da42:	3b01      	subs	r3, #1
 800da44:	b2db      	uxtb	r3, r3
 800da46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dce9      	bgt.n	800da24 <prvUnlockQueue+0x60>
 800da50:	e000      	b.n	800da54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	22ff      	movs	r2, #255	; 0xff
 800da58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da5c:	f001 f9ea 	bl	800ee34 <vPortExitCritical>
}
 800da60:	bf00      	nop
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da70:	f001 f9ac 	bl	800edcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da7c:	2301      	movs	r3, #1
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	e001      	b.n	800da86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da86:	f001 f9d5 	bl	800ee34 <vPortExitCritical>

	return xReturn;
 800da8a:	68fb      	ldr	r3, [r7, #12]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da9c:	f001 f996 	bl	800edcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d102      	bne.n	800dab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800daac:	2301      	movs	r3, #1
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	e001      	b.n	800dab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dab6:	f001 f9bd 	bl	800ee34 <vPortExitCritical>

	return xReturn;
 800daba:	68fb      	ldr	r3, [r7, #12]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08e      	sub	sp, #56	; 0x38
 800dac8:	af04      	add	r7, sp, #16
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10c      	bne.n	800daf2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	b672      	cpsid	i
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	b662      	cpsie	i
 800daec:	623b      	str	r3, [r7, #32]
}
 800daee:	bf00      	nop
 800daf0:	e7fe      	b.n	800daf0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10c      	bne.n	800db12 <xTaskCreateStatic+0x4e>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	b672      	cpsid	i
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	b662      	cpsie	i
 800db0c:	61fb      	str	r3, [r7, #28]
}
 800db0e:	bf00      	nop
 800db10:	e7fe      	b.n	800db10 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db12:	2358      	movs	r3, #88	; 0x58
 800db14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b58      	cmp	r3, #88	; 0x58
 800db1a:	d00c      	beq.n	800db36 <xTaskCreateStatic+0x72>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	b672      	cpsid	i
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	b662      	cpsie	i
 800db30:	61bb      	str	r3, [r7, #24]
}
 800db32:	bf00      	nop
 800db34:	e7fe      	b.n	800db34 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d01e      	beq.n	800db7c <xTaskCreateStatic+0xb8>
 800db3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db40:	2b00      	cmp	r3, #0
 800db42:	d01b      	beq.n	800db7c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db50:	2202      	movs	r2, #2
 800db52:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db56:	2300      	movs	r3, #0
 800db58:	9303      	str	r3, [sp, #12]
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	9302      	str	r3, [sp, #8]
 800db5e:	f107 0314 	add.w	r3, r7, #20
 800db62:	9301      	str	r3, [sp, #4]
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	68b9      	ldr	r1, [r7, #8]
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 f850 	bl	800dc14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db76:	f000 f8e1 	bl	800dd3c <prvAddNewTaskToReadyList>
 800db7a:	e001      	b.n	800db80 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800db7c:	2300      	movs	r3, #0
 800db7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db80:	697b      	ldr	r3, [r7, #20]
	}
 800db82:	4618      	mov	r0, r3
 800db84:	3728      	adds	r7, #40	; 0x28
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b08c      	sub	sp, #48	; 0x30
 800db8e:	af04      	add	r7, sp, #16
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	603b      	str	r3, [r7, #0]
 800db96:	4613      	mov	r3, r2
 800db98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db9a:	88fb      	ldrh	r3, [r7, #6]
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4618      	mov	r0, r3
 800dba0:	f001 fa40 	bl	800f024 <pvPortMalloc>
 800dba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00e      	beq.n	800dbca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dbac:	2058      	movs	r0, #88	; 0x58
 800dbae:	f001 fa39 	bl	800f024 <pvPortMalloc>
 800dbb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d003      	beq.n	800dbc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	697a      	ldr	r2, [r7, #20]
 800dbbe:	631a      	str	r2, [r3, #48]	; 0x30
 800dbc0:	e005      	b.n	800dbce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dbc2:	6978      	ldr	r0, [r7, #20]
 800dbc4:	f001 fafe 	bl	800f1c4 <vPortFree>
 800dbc8:	e001      	b.n	800dbce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d017      	beq.n	800dc04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dbdc:	88fa      	ldrh	r2, [r7, #6]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	9303      	str	r3, [sp, #12]
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	9302      	str	r3, [sp, #8]
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	9301      	str	r3, [sp, #4]
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68b9      	ldr	r1, [r7, #8]
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 f80e 	bl	800dc14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbf8:	69f8      	ldr	r0, [r7, #28]
 800dbfa:	f000 f89f 	bl	800dd3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	61bb      	str	r3, [r7, #24]
 800dc02:	e002      	b.n	800dc0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc0a:	69bb      	ldr	r3, [r7, #24]
	}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3720      	adds	r7, #32
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b088      	sub	sp, #32
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	21a5      	movs	r1, #165	; 0xa5
 800dc2e:	f018 fee0 	bl	80269f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dc3c:	440b      	add	r3, r1
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	f023 0307 	bic.w	r3, r3, #7
 800dc4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	f003 0307 	and.w	r3, r3, #7
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00c      	beq.n	800dc70 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	b672      	cpsid	i
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	b662      	cpsie	i
 800dc6a:	617b      	str	r3, [r7, #20]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d01f      	beq.n	800dcb6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc76:	2300      	movs	r3, #0
 800dc78:	61fb      	str	r3, [r7, #28]
 800dc7a:	e012      	b.n	800dca2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	4413      	add	r3, r2
 800dc82:	7819      	ldrb	r1, [r3, #0]
 800dc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	4413      	add	r3, r2
 800dc8a:	3334      	adds	r3, #52	; 0x34
 800dc8c:	460a      	mov	r2, r1
 800dc8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	4413      	add	r3, r2
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d006      	beq.n	800dcaa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	61fb      	str	r3, [r7, #28]
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	2b0f      	cmp	r3, #15
 800dca6:	d9e9      	bls.n	800dc7c <prvInitialiseNewTask+0x68>
 800dca8:	e000      	b.n	800dcac <prvInitialiseNewTask+0x98>
			{
				break;
 800dcaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcb4:	e003      	b.n	800dcbe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	2b06      	cmp	r3, #6
 800dcc2:	d901      	bls.n	800dcc8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dcc4:	2306      	movs	r3, #6
 800dcc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dccc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcdc:	3304      	adds	r3, #4
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe ff2a 	bl	800cb38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce6:	3318      	adds	r3, #24
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fe ff25 	bl	800cb38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	f1c3 0207 	rsb	r2, r3, #7
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	2200      	movs	r2, #0
 800dd08:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	68f9      	ldr	r1, [r7, #12]
 800dd1c:	69b8      	ldr	r0, [r7, #24]
 800dd1e:	f000 ff47 	bl	800ebb0 <pxPortInitialiseStack>
 800dd22:	4602      	mov	r2, r0
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d002      	beq.n	800dd34 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd34:	bf00      	nop
 800dd36:	3720      	adds	r7, #32
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd44:	f001 f842 	bl	800edcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd48:	4b2a      	ldr	r3, [pc, #168]	; (800ddf4 <prvAddNewTaskToReadyList+0xb8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	4a29      	ldr	r2, [pc, #164]	; (800ddf4 <prvAddNewTaskToReadyList+0xb8>)
 800dd50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd52:	4b29      	ldr	r3, [pc, #164]	; (800ddf8 <prvAddNewTaskToReadyList+0xbc>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d109      	bne.n	800dd6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd5a:	4a27      	ldr	r2, [pc, #156]	; (800ddf8 <prvAddNewTaskToReadyList+0xbc>)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd60:	4b24      	ldr	r3, [pc, #144]	; (800ddf4 <prvAddNewTaskToReadyList+0xb8>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d110      	bne.n	800dd8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd68:	f000 fc22 	bl	800e5b0 <prvInitialiseTaskLists>
 800dd6c:	e00d      	b.n	800dd8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd6e:	4b23      	ldr	r3, [pc, #140]	; (800ddfc <prvAddNewTaskToReadyList+0xc0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd76:	4b20      	ldr	r3, [pc, #128]	; (800ddf8 <prvAddNewTaskToReadyList+0xbc>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d802      	bhi.n	800dd8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd84:	4a1c      	ldr	r2, [pc, #112]	; (800ddf8 <prvAddNewTaskToReadyList+0xbc>)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd8a:	4b1d      	ldr	r3, [pc, #116]	; (800de00 <prvAddNewTaskToReadyList+0xc4>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	4a1b      	ldr	r2, [pc, #108]	; (800de00 <prvAddNewTaskToReadyList+0xc4>)
 800dd92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd98:	2201      	movs	r2, #1
 800dd9a:	409a      	lsls	r2, r3
 800dd9c:	4b19      	ldr	r3, [pc, #100]	; (800de04 <prvAddNewTaskToReadyList+0xc8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	4a18      	ldr	r2, [pc, #96]	; (800de04 <prvAddNewTaskToReadyList+0xc8>)
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddaa:	4613      	mov	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4a15      	ldr	r2, [pc, #84]	; (800de08 <prvAddNewTaskToReadyList+0xcc>)
 800ddb4:	441a      	add	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	f7fe fec8 	bl	800cb52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ddc2:	f001 f837 	bl	800ee34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ddc6:	4b0d      	ldr	r3, [pc, #52]	; (800ddfc <prvAddNewTaskToReadyList+0xc0>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ddce:	4b0a      	ldr	r3, [pc, #40]	; (800ddf8 <prvAddNewTaskToReadyList+0xbc>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d207      	bcs.n	800ddec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dddc:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <prvAddNewTaskToReadyList+0xd0>)
 800ddde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20000c88 	.word	0x20000c88
 800ddf8:	20000b88 	.word	0x20000b88
 800ddfc:	20000c94 	.word	0x20000c94
 800de00:	20000ca4 	.word	0x20000ca4
 800de04:	20000c90 	.word	0x20000c90
 800de08:	20000b8c 	.word	0x20000b8c
 800de0c:	e000ed04 	.word	0xe000ed04

0800de10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de18:	2300      	movs	r3, #0
 800de1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d019      	beq.n	800de56 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de22:	4b14      	ldr	r3, [pc, #80]	; (800de74 <vTaskDelay+0x64>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00c      	beq.n	800de44 <vTaskDelay+0x34>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	b672      	cpsid	i
 800de30:	f383 8811 	msr	BASEPRI, r3
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	b662      	cpsie	i
 800de3e:	60bb      	str	r3, [r7, #8]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800de44:	f000 f87e 	bl	800df44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de48:	2100      	movs	r1, #0
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fe4a 	bl	800eae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de50:	f000 f886 	bl	800df60 <xTaskResumeAll>
 800de54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d107      	bne.n	800de6c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800de5c:	4b06      	ldr	r3, [pc, #24]	; (800de78 <vTaskDelay+0x68>)
 800de5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de6c:	bf00      	nop
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20000cb0 	.word	0x20000cb0
 800de78:	e000ed04 	.word	0xe000ed04

0800de7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	; 0x28
 800de80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de82:	2300      	movs	r3, #0
 800de84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de8a:	463a      	mov	r2, r7
 800de8c:	1d39      	adds	r1, r7, #4
 800de8e:	f107 0308 	add.w	r3, r7, #8
 800de92:	4618      	mov	r0, r3
 800de94:	f7f2 ff8a 	bl	8000dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	9202      	str	r2, [sp, #8]
 800dea0:	9301      	str	r3, [sp, #4]
 800dea2:	2300      	movs	r3, #0
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	2300      	movs	r3, #0
 800dea8:	460a      	mov	r2, r1
 800deaa:	4920      	ldr	r1, [pc, #128]	; (800df2c <vTaskStartScheduler+0xb0>)
 800deac:	4820      	ldr	r0, [pc, #128]	; (800df30 <vTaskStartScheduler+0xb4>)
 800deae:	f7ff fe09 	bl	800dac4 <xTaskCreateStatic>
 800deb2:	4603      	mov	r3, r0
 800deb4:	4a1f      	ldr	r2, [pc, #124]	; (800df34 <vTaskStartScheduler+0xb8>)
 800deb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800deb8:	4b1e      	ldr	r3, [pc, #120]	; (800df34 <vTaskStartScheduler+0xb8>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dec0:	2301      	movs	r3, #1
 800dec2:	617b      	str	r3, [r7, #20]
 800dec4:	e001      	b.n	800deca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d118      	bne.n	800df02 <vTaskStartScheduler+0x86>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	b672      	cpsid	i
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	b662      	cpsie	i
 800dee4:	613b      	str	r3, [r7, #16]
}
 800dee6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dee8:	4b13      	ldr	r3, [pc, #76]	; (800df38 <vTaskStartScheduler+0xbc>)
 800deea:	f04f 32ff 	mov.w	r2, #4294967295
 800deee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800def0:	4b12      	ldr	r3, [pc, #72]	; (800df3c <vTaskStartScheduler+0xc0>)
 800def2:	2201      	movs	r2, #1
 800def4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800def6:	4b12      	ldr	r3, [pc, #72]	; (800df40 <vTaskStartScheduler+0xc4>)
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800defc:	f000 fee8 	bl	800ecd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df00:	e010      	b.n	800df24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df08:	d10c      	bne.n	800df24 <vTaskStartScheduler+0xa8>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	b672      	cpsid	i
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	b662      	cpsie	i
 800df1e:	60fb      	str	r3, [r7, #12]
}
 800df20:	bf00      	nop
 800df22:	e7fe      	b.n	800df22 <vTaskStartScheduler+0xa6>
}
 800df24:	bf00      	nop
 800df26:	3718      	adds	r7, #24
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	080276d4 	.word	0x080276d4
 800df30:	0800e57d 	.word	0x0800e57d
 800df34:	20000cac 	.word	0x20000cac
 800df38:	20000ca8 	.word	0x20000ca8
 800df3c:	20000c94 	.word	0x20000c94
 800df40:	20000c8c 	.word	0x20000c8c

0800df44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df48:	4b04      	ldr	r3, [pc, #16]	; (800df5c <vTaskSuspendAll+0x18>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3301      	adds	r3, #1
 800df4e:	4a03      	ldr	r2, [pc, #12]	; (800df5c <vTaskSuspendAll+0x18>)
 800df50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800df52:	bf00      	nop
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	20000cb0 	.word	0x20000cb0

0800df60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df66:	2300      	movs	r3, #0
 800df68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df6e:	4b42      	ldr	r3, [pc, #264]	; (800e078 <xTaskResumeAll+0x118>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10c      	bne.n	800df90 <xTaskResumeAll+0x30>
	__asm volatile
 800df76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7a:	b672      	cpsid	i
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	b662      	cpsie	i
 800df8a:	603b      	str	r3, [r7, #0]
}
 800df8c:	bf00      	nop
 800df8e:	e7fe      	b.n	800df8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df90:	f000 ff1c 	bl	800edcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df94:	4b38      	ldr	r3, [pc, #224]	; (800e078 <xTaskResumeAll+0x118>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	3b01      	subs	r3, #1
 800df9a:	4a37      	ldr	r2, [pc, #220]	; (800e078 <xTaskResumeAll+0x118>)
 800df9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df9e:	4b36      	ldr	r3, [pc, #216]	; (800e078 <xTaskResumeAll+0x118>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d161      	bne.n	800e06a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dfa6:	4b35      	ldr	r3, [pc, #212]	; (800e07c <xTaskResumeAll+0x11c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d05d      	beq.n	800e06a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfae:	e02e      	b.n	800e00e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb0:	4b33      	ldr	r3, [pc, #204]	; (800e080 <xTaskResumeAll+0x120>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	3318      	adds	r3, #24
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe fe25 	bl	800cc0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe fe20 	bl	800cc0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	409a      	lsls	r2, r3
 800dfd4:	4b2b      	ldr	r3, [pc, #172]	; (800e084 <xTaskResumeAll+0x124>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	4a2a      	ldr	r2, [pc, #168]	; (800e084 <xTaskResumeAll+0x124>)
 800dfdc:	6013      	str	r3, [r2, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4a27      	ldr	r2, [pc, #156]	; (800e088 <xTaskResumeAll+0x128>)
 800dfec:	441a      	add	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3304      	adds	r3, #4
 800dff2:	4619      	mov	r1, r3
 800dff4:	4610      	mov	r0, r2
 800dff6:	f7fe fdac 	bl	800cb52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffe:	4b23      	ldr	r3, [pc, #140]	; (800e08c <xTaskResumeAll+0x12c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	429a      	cmp	r2, r3
 800e006:	d302      	bcc.n	800e00e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e008:	4b21      	ldr	r3, [pc, #132]	; (800e090 <xTaskResumeAll+0x130>)
 800e00a:	2201      	movs	r2, #1
 800e00c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e00e:	4b1c      	ldr	r3, [pc, #112]	; (800e080 <xTaskResumeAll+0x120>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1cc      	bne.n	800dfb0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e01c:	f000 fb68 	bl	800e6f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e020:	4b1c      	ldr	r3, [pc, #112]	; (800e094 <xTaskResumeAll+0x134>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d010      	beq.n	800e04e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e02c:	f000 f858 	bl	800e0e0 <xTaskIncrementTick>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d002      	beq.n	800e03c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e036:	4b16      	ldr	r3, [pc, #88]	; (800e090 <xTaskResumeAll+0x130>)
 800e038:	2201      	movs	r2, #1
 800e03a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3b01      	subs	r3, #1
 800e040:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1f1      	bne.n	800e02c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e048:	4b12      	ldr	r3, [pc, #72]	; (800e094 <xTaskResumeAll+0x134>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e04e:	4b10      	ldr	r3, [pc, #64]	; (800e090 <xTaskResumeAll+0x130>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e056:	2301      	movs	r3, #1
 800e058:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e05a:	4b0f      	ldr	r3, [pc, #60]	; (800e098 <xTaskResumeAll+0x138>)
 800e05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e06a:	f000 fee3 	bl	800ee34 <vPortExitCritical>

	return xAlreadyYielded;
 800e06e:	68bb      	ldr	r3, [r7, #8]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20000cb0 	.word	0x20000cb0
 800e07c:	20000c88 	.word	0x20000c88
 800e080:	20000c48 	.word	0x20000c48
 800e084:	20000c90 	.word	0x20000c90
 800e088:	20000b8c 	.word	0x20000b8c
 800e08c:	20000b88 	.word	0x20000b88
 800e090:	20000c9c 	.word	0x20000c9c
 800e094:	20000c98 	.word	0x20000c98
 800e098:	e000ed04 	.word	0xe000ed04

0800e09c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e0a2:	4b05      	ldr	r3, [pc, #20]	; (800e0b8 <xTaskGetTickCount+0x1c>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e0a8:	687b      	ldr	r3, [r7, #4]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	370c      	adds	r7, #12
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
 800e0b6:	bf00      	nop
 800e0b8:	20000c8c 	.word	0x20000c8c

0800e0bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0c2:	f000 ff6b 	bl	800ef9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e0ca:	4b04      	ldr	r3, [pc, #16]	; (800e0dc <xTaskGetTickCountFromISR+0x20>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0d0:	683b      	ldr	r3, [r7, #0]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20000c8c 	.word	0x20000c8c

0800e0e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0ea:	4b4f      	ldr	r3, [pc, #316]	; (800e228 <xTaskIncrementTick+0x148>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f040 808a 	bne.w	800e208 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0f4:	4b4d      	ldr	r3, [pc, #308]	; (800e22c <xTaskIncrementTick+0x14c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e0fc:	4a4b      	ldr	r2, [pc, #300]	; (800e22c <xTaskIncrementTick+0x14c>)
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d122      	bne.n	800e14e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e108:	4b49      	ldr	r3, [pc, #292]	; (800e230 <xTaskIncrementTick+0x150>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00c      	beq.n	800e12c <xTaskIncrementTick+0x4c>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	b672      	cpsid	i
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	b662      	cpsie	i
 800e126:	603b      	str	r3, [r7, #0]
}
 800e128:	bf00      	nop
 800e12a:	e7fe      	b.n	800e12a <xTaskIncrementTick+0x4a>
 800e12c:	4b40      	ldr	r3, [pc, #256]	; (800e230 <xTaskIncrementTick+0x150>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	4b40      	ldr	r3, [pc, #256]	; (800e234 <xTaskIncrementTick+0x154>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a3e      	ldr	r2, [pc, #248]	; (800e230 <xTaskIncrementTick+0x150>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	4a3e      	ldr	r2, [pc, #248]	; (800e234 <xTaskIncrementTick+0x154>)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	4b3d      	ldr	r3, [pc, #244]	; (800e238 <xTaskIncrementTick+0x158>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3301      	adds	r3, #1
 800e146:	4a3c      	ldr	r2, [pc, #240]	; (800e238 <xTaskIncrementTick+0x158>)
 800e148:	6013      	str	r3, [r2, #0]
 800e14a:	f000 fad1 	bl	800e6f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e14e:	4b3b      	ldr	r3, [pc, #236]	; (800e23c <xTaskIncrementTick+0x15c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	429a      	cmp	r2, r3
 800e156:	d348      	bcc.n	800e1ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e158:	4b35      	ldr	r3, [pc, #212]	; (800e230 <xTaskIncrementTick+0x150>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d104      	bne.n	800e16c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e162:	4b36      	ldr	r3, [pc, #216]	; (800e23c <xTaskIncrementTick+0x15c>)
 800e164:	f04f 32ff 	mov.w	r2, #4294967295
 800e168:	601a      	str	r2, [r3, #0]
					break;
 800e16a:	e03e      	b.n	800e1ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e16c:	4b30      	ldr	r3, [pc, #192]	; (800e230 <xTaskIncrementTick+0x150>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e17c:	693a      	ldr	r2, [r7, #16]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d203      	bcs.n	800e18c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e184:	4a2d      	ldr	r2, [pc, #180]	; (800e23c <xTaskIncrementTick+0x15c>)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e18a:	e02e      	b.n	800e1ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	3304      	adds	r3, #4
 800e190:	4618      	mov	r0, r3
 800e192:	f7fe fd3b 	bl	800cc0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d004      	beq.n	800e1a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	3318      	adds	r3, #24
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fd32 	bl	800cc0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	409a      	lsls	r2, r3
 800e1b0:	4b23      	ldr	r3, [pc, #140]	; (800e240 <xTaskIncrementTick+0x160>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	4a22      	ldr	r2, [pc, #136]	; (800e240 <xTaskIncrementTick+0x160>)
 800e1b8:	6013      	str	r3, [r2, #0]
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4a1f      	ldr	r2, [pc, #124]	; (800e244 <xTaskIncrementTick+0x164>)
 800e1c8:	441a      	add	r2, r3
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fe fcbe 	bl	800cb52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1da:	4b1b      	ldr	r3, [pc, #108]	; (800e248 <xTaskIncrementTick+0x168>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d3b9      	bcc.n	800e158 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1e8:	e7b6      	b.n	800e158 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1ea:	4b17      	ldr	r3, [pc, #92]	; (800e248 <xTaskIncrementTick+0x168>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f0:	4914      	ldr	r1, [pc, #80]	; (800e244 <xTaskIncrementTick+0x164>)
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4413      	add	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	440b      	add	r3, r1
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d907      	bls.n	800e212 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e202:	2301      	movs	r3, #1
 800e204:	617b      	str	r3, [r7, #20]
 800e206:	e004      	b.n	800e212 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e208:	4b10      	ldr	r3, [pc, #64]	; (800e24c <xTaskIncrementTick+0x16c>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3301      	adds	r3, #1
 800e20e:	4a0f      	ldr	r2, [pc, #60]	; (800e24c <xTaskIncrementTick+0x16c>)
 800e210:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e212:	4b0f      	ldr	r3, [pc, #60]	; (800e250 <xTaskIncrementTick+0x170>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e21a:	2301      	movs	r3, #1
 800e21c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e21e:	697b      	ldr	r3, [r7, #20]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20000cb0 	.word	0x20000cb0
 800e22c:	20000c8c 	.word	0x20000c8c
 800e230:	20000c40 	.word	0x20000c40
 800e234:	20000c44 	.word	0x20000c44
 800e238:	20000ca0 	.word	0x20000ca0
 800e23c:	20000ca8 	.word	0x20000ca8
 800e240:	20000c90 	.word	0x20000c90
 800e244:	20000b8c 	.word	0x20000b8c
 800e248:	20000b88 	.word	0x20000b88
 800e24c:	20000c98 	.word	0x20000c98
 800e250:	20000c9c 	.word	0x20000c9c

0800e254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b088      	sub	sp, #32
 800e258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e25a:	4b3a      	ldr	r3, [pc, #232]	; (800e344 <vTaskSwitchContext+0xf0>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d003      	beq.n	800e26a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e262:	4b39      	ldr	r3, [pc, #228]	; (800e348 <vTaskSwitchContext+0xf4>)
 800e264:	2201      	movs	r2, #1
 800e266:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e268:	e068      	b.n	800e33c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800e26a:	4b37      	ldr	r3, [pc, #220]	; (800e348 <vTaskSwitchContext+0xf4>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e270:	4b36      	ldr	r3, [pc, #216]	; (800e34c <vTaskSwitchContext+0xf8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e276:	61fb      	str	r3, [r7, #28]
 800e278:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e27c:	61bb      	str	r3, [r7, #24]
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	69ba      	ldr	r2, [r7, #24]
 800e284:	429a      	cmp	r2, r3
 800e286:	d111      	bne.n	800e2ac <vTaskSwitchContext+0x58>
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	3304      	adds	r3, #4
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	69ba      	ldr	r2, [r7, #24]
 800e290:	429a      	cmp	r2, r3
 800e292:	d10b      	bne.n	800e2ac <vTaskSwitchContext+0x58>
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	3308      	adds	r3, #8
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	69ba      	ldr	r2, [r7, #24]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d105      	bne.n	800e2ac <vTaskSwitchContext+0x58>
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	330c      	adds	r3, #12
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d008      	beq.n	800e2be <vTaskSwitchContext+0x6a>
 800e2ac:	4b27      	ldr	r3, [pc, #156]	; (800e34c <vTaskSwitchContext+0xf8>)
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	4b26      	ldr	r3, [pc, #152]	; (800e34c <vTaskSwitchContext+0xf8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3334      	adds	r3, #52	; 0x34
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	f7f2 fd64 	bl	8000d86 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2be:	4b24      	ldr	r3, [pc, #144]	; (800e350 <vTaskSwitchContext+0xfc>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	fab3 f383 	clz	r3, r3
 800e2ca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e2cc:	7afb      	ldrb	r3, [r7, #11]
 800e2ce:	f1c3 031f 	rsb	r3, r3, #31
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	491f      	ldr	r1, [pc, #124]	; (800e354 <vTaskSwitchContext+0x100>)
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	440b      	add	r3, r1
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d10c      	bne.n	800e302 <vTaskSwitchContext+0xae>
	__asm volatile
 800e2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ec:	b672      	cpsid	i
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	b662      	cpsie	i
 800e2fc:	607b      	str	r3, [r7, #4]
}
 800e2fe:	bf00      	nop
 800e300:	e7fe      	b.n	800e300 <vTaskSwitchContext+0xac>
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	4613      	mov	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	4a11      	ldr	r2, [pc, #68]	; (800e354 <vTaskSwitchContext+0x100>)
 800e30e:	4413      	add	r3, r2
 800e310:	613b      	str	r3, [r7, #16]
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	605a      	str	r2, [r3, #4]
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	3308      	adds	r3, #8
 800e324:	429a      	cmp	r2, r3
 800e326:	d104      	bne.n	800e332 <vTaskSwitchContext+0xde>
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	605a      	str	r2, [r3, #4]
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	4a04      	ldr	r2, [pc, #16]	; (800e34c <vTaskSwitchContext+0xf8>)
 800e33a:	6013      	str	r3, [r2, #0]
}
 800e33c:	bf00      	nop
 800e33e:	3720      	adds	r7, #32
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	20000cb0 	.word	0x20000cb0
 800e348:	20000c9c 	.word	0x20000c9c
 800e34c:	20000b88 	.word	0x20000b88
 800e350:	20000c90 	.word	0x20000c90
 800e354:	20000b8c 	.word	0x20000b8c

0800e358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10c      	bne.n	800e382 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	b672      	cpsid	i
 800e36e:	f383 8811 	msr	BASEPRI, r3
 800e372:	f3bf 8f6f 	isb	sy
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	b662      	cpsie	i
 800e37c:	60fb      	str	r3, [r7, #12]
}
 800e37e:	bf00      	nop
 800e380:	e7fe      	b.n	800e380 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e382:	4b07      	ldr	r3, [pc, #28]	; (800e3a0 <vTaskPlaceOnEventList+0x48>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3318      	adds	r3, #24
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7fe fc05 	bl	800cb9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e390:	2101      	movs	r1, #1
 800e392:	6838      	ldr	r0, [r7, #0]
 800e394:	f000 fba6 	bl	800eae4 <prvAddCurrentTaskToDelayedList>
}
 800e398:	bf00      	nop
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20000b88 	.word	0x20000b88

0800e3a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10c      	bne.n	800e3d4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3be:	b672      	cpsid	i
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	b662      	cpsie	i
 800e3ce:	60fb      	str	r3, [r7, #12]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	3318      	adds	r3, #24
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fc17 	bl	800cc0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3de:	4b1d      	ldr	r3, [pc, #116]	; (800e454 <xTaskRemoveFromEventList+0xb0>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d11c      	bne.n	800e420 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fe fc0e 	bl	800cc0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	409a      	lsls	r2, r3
 800e3f8:	4b17      	ldr	r3, [pc, #92]	; (800e458 <xTaskRemoveFromEventList+0xb4>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	4a16      	ldr	r2, [pc, #88]	; (800e458 <xTaskRemoveFromEventList+0xb4>)
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a13      	ldr	r2, [pc, #76]	; (800e45c <xTaskRemoveFromEventList+0xb8>)
 800e410:	441a      	add	r2, r3
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	3304      	adds	r3, #4
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f7fe fb9a 	bl	800cb52 <vListInsertEnd>
 800e41e:	e005      	b.n	800e42c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	3318      	adds	r3, #24
 800e424:	4619      	mov	r1, r3
 800e426:	480e      	ldr	r0, [pc, #56]	; (800e460 <xTaskRemoveFromEventList+0xbc>)
 800e428:	f7fe fb93 	bl	800cb52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e430:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <xTaskRemoveFromEventList+0xc0>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e436:	429a      	cmp	r2, r3
 800e438:	d905      	bls.n	800e446 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e43a:	2301      	movs	r3, #1
 800e43c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e43e:	4b0a      	ldr	r3, [pc, #40]	; (800e468 <xTaskRemoveFromEventList+0xc4>)
 800e440:	2201      	movs	r2, #1
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	e001      	b.n	800e44a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e446:	2300      	movs	r3, #0
 800e448:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e44a:	697b      	ldr	r3, [r7, #20]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20000cb0 	.word	0x20000cb0
 800e458:	20000c90 	.word	0x20000c90
 800e45c:	20000b8c 	.word	0x20000b8c
 800e460:	20000c48 	.word	0x20000c48
 800e464:	20000b88 	.word	0x20000b88
 800e468:	20000c9c 	.word	0x20000c9c

0800e46c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e474:	4b06      	ldr	r3, [pc, #24]	; (800e490 <vTaskInternalSetTimeOutState+0x24>)
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e47c:	4b05      	ldr	r3, [pc, #20]	; (800e494 <vTaskInternalSetTimeOutState+0x28>)
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	605a      	str	r2, [r3, #4]
}
 800e484:	bf00      	nop
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	20000ca0 	.word	0x20000ca0
 800e494:	20000c8c 	.word	0x20000c8c

0800e498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b088      	sub	sp, #32
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10c      	bne.n	800e4c2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	b672      	cpsid	i
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	b662      	cpsie	i
 800e4bc:	613b      	str	r3, [r7, #16]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10c      	bne.n	800e4e2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	b672      	cpsid	i
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	b662      	cpsie	i
 800e4dc:	60fb      	str	r3, [r7, #12]
}
 800e4de:	bf00      	nop
 800e4e0:	e7fe      	b.n	800e4e0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e4e2:	f000 fc73 	bl	800edcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4e6:	4b1d      	ldr	r3, [pc, #116]	; (800e55c <xTaskCheckForTimeOut+0xc4>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	69ba      	ldr	r2, [r7, #24]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fe:	d102      	bne.n	800e506 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e500:	2300      	movs	r3, #0
 800e502:	61fb      	str	r3, [r7, #28]
 800e504:	e023      	b.n	800e54e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	4b15      	ldr	r3, [pc, #84]	; (800e560 <xTaskCheckForTimeOut+0xc8>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d007      	beq.n	800e522 <xTaskCheckForTimeOut+0x8a>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d302      	bcc.n	800e522 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e51c:	2301      	movs	r3, #1
 800e51e:	61fb      	str	r3, [r7, #28]
 800e520:	e015      	b.n	800e54e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d20b      	bcs.n	800e544 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	1ad2      	subs	r2, r2, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff ff97 	bl	800e46c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e53e:	2300      	movs	r3, #0
 800e540:	61fb      	str	r3, [r7, #28]
 800e542:	e004      	b.n	800e54e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e54a:	2301      	movs	r3, #1
 800e54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e54e:	f000 fc71 	bl	800ee34 <vPortExitCritical>

	return xReturn;
 800e552:	69fb      	ldr	r3, [r7, #28]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3720      	adds	r7, #32
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	20000c8c 	.word	0x20000c8c
 800e560:	20000ca0 	.word	0x20000ca0

0800e564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e564:	b480      	push	{r7}
 800e566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e568:	4b03      	ldr	r3, [pc, #12]	; (800e578 <vTaskMissedYield+0x14>)
 800e56a:	2201      	movs	r2, #1
 800e56c:	601a      	str	r2, [r3, #0]
}
 800e56e:	bf00      	nop
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	20000c9c 	.word	0x20000c9c

0800e57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e584:	f000 f854 	bl	800e630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e588:	4b07      	ldr	r3, [pc, #28]	; (800e5a8 <prvIdleTask+0x2c>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d907      	bls.n	800e5a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e590:	4b06      	ldr	r3, [pc, #24]	; (800e5ac <prvIdleTask+0x30>)
 800e592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e596:	601a      	str	r2, [r3, #0]
 800e598:	f3bf 8f4f 	dsb	sy
 800e59c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e5a0:	f7f2 fbea 	bl	8000d78 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e5a4:	e7ee      	b.n	800e584 <prvIdleTask+0x8>
 800e5a6:	bf00      	nop
 800e5a8:	20000b8c 	.word	0x20000b8c
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	e00c      	b.n	800e5d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4a12      	ldr	r2, [pc, #72]	; (800e610 <prvInitialiseTaskLists+0x60>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fa94 	bl	800caf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	607b      	str	r3, [r7, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b06      	cmp	r3, #6
 800e5da:	d9ef      	bls.n	800e5bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5dc:	480d      	ldr	r0, [pc, #52]	; (800e614 <prvInitialiseTaskLists+0x64>)
 800e5de:	f7fe fa8b 	bl	800caf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5e2:	480d      	ldr	r0, [pc, #52]	; (800e618 <prvInitialiseTaskLists+0x68>)
 800e5e4:	f7fe fa88 	bl	800caf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5e8:	480c      	ldr	r0, [pc, #48]	; (800e61c <prvInitialiseTaskLists+0x6c>)
 800e5ea:	f7fe fa85 	bl	800caf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5ee:	480c      	ldr	r0, [pc, #48]	; (800e620 <prvInitialiseTaskLists+0x70>)
 800e5f0:	f7fe fa82 	bl	800caf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5f4:	480b      	ldr	r0, [pc, #44]	; (800e624 <prvInitialiseTaskLists+0x74>)
 800e5f6:	f7fe fa7f 	bl	800caf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5fa:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <prvInitialiseTaskLists+0x78>)
 800e5fc:	4a05      	ldr	r2, [pc, #20]	; (800e614 <prvInitialiseTaskLists+0x64>)
 800e5fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e600:	4b0a      	ldr	r3, [pc, #40]	; (800e62c <prvInitialiseTaskLists+0x7c>)
 800e602:	4a05      	ldr	r2, [pc, #20]	; (800e618 <prvInitialiseTaskLists+0x68>)
 800e604:	601a      	str	r2, [r3, #0]
}
 800e606:	bf00      	nop
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	20000b8c 	.word	0x20000b8c
 800e614:	20000c18 	.word	0x20000c18
 800e618:	20000c2c 	.word	0x20000c2c
 800e61c:	20000c48 	.word	0x20000c48
 800e620:	20000c5c 	.word	0x20000c5c
 800e624:	20000c74 	.word	0x20000c74
 800e628:	20000c40 	.word	0x20000c40
 800e62c:	20000c44 	.word	0x20000c44

0800e630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e636:	e019      	b.n	800e66c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e638:	f000 fbc8 	bl	800edcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e63c:	4b10      	ldr	r3, [pc, #64]	; (800e680 <prvCheckTasksWaitingTermination+0x50>)
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	3304      	adds	r3, #4
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fadf 	bl	800cc0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e64e:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <prvCheckTasksWaitingTermination+0x54>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3b01      	subs	r3, #1
 800e654:	4a0b      	ldr	r2, [pc, #44]	; (800e684 <prvCheckTasksWaitingTermination+0x54>)
 800e656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e658:	4b0b      	ldr	r3, [pc, #44]	; (800e688 <prvCheckTasksWaitingTermination+0x58>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	4a0a      	ldr	r2, [pc, #40]	; (800e688 <prvCheckTasksWaitingTermination+0x58>)
 800e660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e662:	f000 fbe7 	bl	800ee34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f810 	bl	800e68c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e66c:	4b06      	ldr	r3, [pc, #24]	; (800e688 <prvCheckTasksWaitingTermination+0x58>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d1e1      	bne.n	800e638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	20000c5c 	.word	0x20000c5c
 800e684:	20000c88 	.word	0x20000c88
 800e688:	20000c70 	.word	0x20000c70

0800e68c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d108      	bne.n	800e6b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 fd8e 	bl	800f1c4 <vPortFree>
				vPortFree( pxTCB );
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 fd8b 	bl	800f1c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6ae:	e01a      	b.n	800e6e6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d103      	bne.n	800e6c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 fd82 	bl	800f1c4 <vPortFree>
	}
 800e6c0:	e011      	b.n	800e6e6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d00c      	beq.n	800e6e6 <prvDeleteTCB+0x5a>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d0:	b672      	cpsid	i
 800e6d2:	f383 8811 	msr	BASEPRI, r3
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	b662      	cpsie	i
 800e6e0:	60fb      	str	r3, [r7, #12]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <prvDeleteTCB+0x58>
	}
 800e6e6:	bf00      	nop
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <prvResetNextTaskUnblockTime+0x38>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d104      	bne.n	800e70a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e700:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <prvResetNextTaskUnblockTime+0x3c>)
 800e702:	f04f 32ff 	mov.w	r2, #4294967295
 800e706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e708:	e008      	b.n	800e71c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70a:	4b07      	ldr	r3, [pc, #28]	; (800e728 <prvResetNextTaskUnblockTime+0x38>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	4a04      	ldr	r2, [pc, #16]	; (800e72c <prvResetNextTaskUnblockTime+0x3c>)
 800e71a:	6013      	str	r3, [r2, #0]
}
 800e71c:	bf00      	nop
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	20000c40 	.word	0x20000c40
 800e72c:	20000ca8 	.word	0x20000ca8

0800e730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e736:	4b0b      	ldr	r3, [pc, #44]	; (800e764 <xTaskGetSchedulerState+0x34>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d102      	bne.n	800e744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e73e:	2301      	movs	r3, #1
 800e740:	607b      	str	r3, [r7, #4]
 800e742:	e008      	b.n	800e756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e744:	4b08      	ldr	r3, [pc, #32]	; (800e768 <xTaskGetSchedulerState+0x38>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e74c:	2302      	movs	r3, #2
 800e74e:	607b      	str	r3, [r7, #4]
 800e750:	e001      	b.n	800e756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e752:	2300      	movs	r3, #0
 800e754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e756:	687b      	ldr	r3, [r7, #4]
	}
 800e758:	4618      	mov	r0, r3
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	20000c94 	.word	0x20000c94
 800e768:	20000cb0 	.word	0x20000cb0

0800e76c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e778:	2300      	movs	r3, #0
 800e77a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d069      	beq.n	800e856 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e786:	4b36      	ldr	r3, [pc, #216]	; (800e860 <xTaskPriorityInherit+0xf4>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d259      	bcs.n	800e844 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	699b      	ldr	r3, [r3, #24]
 800e794:	2b00      	cmp	r3, #0
 800e796:	db06      	blt.n	800e7a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e798:	4b31      	ldr	r3, [pc, #196]	; (800e860 <xTaskPriorityInherit+0xf4>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79e:	f1c3 0207 	rsb	r2, r3, #7
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	6959      	ldr	r1, [r3, #20]
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4a2b      	ldr	r2, [pc, #172]	; (800e864 <xTaskPriorityInherit+0xf8>)
 800e7b8:	4413      	add	r3, r2
 800e7ba:	4299      	cmp	r1, r3
 800e7bc:	d13a      	bne.n	800e834 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe fa22 	bl	800cc0c <uxListRemove>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d115      	bne.n	800e7fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d2:	4924      	ldr	r1, [pc, #144]	; (800e864 <xTaskPriorityInherit+0xf8>)
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	440b      	add	r3, r1
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <xTaskPriorityInherit+0x8e>
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ee:	43da      	mvns	r2, r3
 800e7f0:	4b1d      	ldr	r3, [pc, #116]	; (800e868 <xTaskPriorityInherit+0xfc>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	4a1c      	ldr	r2, [pc, #112]	; (800e868 <xTaskPriorityInherit+0xfc>)
 800e7f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7fa:	4b19      	ldr	r3, [pc, #100]	; (800e860 <xTaskPriorityInherit+0xf4>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e808:	2201      	movs	r2, #1
 800e80a:	409a      	lsls	r2, r3
 800e80c:	4b16      	ldr	r3, [pc, #88]	; (800e868 <xTaskPriorityInherit+0xfc>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4313      	orrs	r3, r2
 800e812:	4a15      	ldr	r2, [pc, #84]	; (800e868 <xTaskPriorityInherit+0xfc>)
 800e814:	6013      	str	r3, [r2, #0]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81a:	4613      	mov	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4413      	add	r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	4a10      	ldr	r2, [pc, #64]	; (800e864 <xTaskPriorityInherit+0xf8>)
 800e824:	441a      	add	r2, r3
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	3304      	adds	r3, #4
 800e82a:	4619      	mov	r1, r3
 800e82c:	4610      	mov	r0, r2
 800e82e:	f7fe f990 	bl	800cb52 <vListInsertEnd>
 800e832:	e004      	b.n	800e83e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e834:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <xTaskPriorityInherit+0xf4>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e83e:	2301      	movs	r3, #1
 800e840:	60fb      	str	r3, [r7, #12]
 800e842:	e008      	b.n	800e856 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e848:	4b05      	ldr	r3, [pc, #20]	; (800e860 <xTaskPriorityInherit+0xf4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84e:	429a      	cmp	r2, r3
 800e850:	d201      	bcs.n	800e856 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e852:	2301      	movs	r3, #1
 800e854:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e856:	68fb      	ldr	r3, [r7, #12]
	}
 800e858:	4618      	mov	r0, r3
 800e85a:	3710      	adds	r7, #16
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	20000b88 	.word	0x20000b88
 800e864:	20000b8c 	.word	0x20000b8c
 800e868:	20000c90 	.word	0x20000c90

0800e86c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e878:	2300      	movs	r3, #0
 800e87a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d072      	beq.n	800e968 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e882:	4b3c      	ldr	r3, [pc, #240]	; (800e974 <xTaskPriorityDisinherit+0x108>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	693a      	ldr	r2, [r7, #16]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d00c      	beq.n	800e8a6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	b672      	cpsid	i
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	b662      	cpsie	i
 800e8a0:	60fb      	str	r3, [r7, #12]
}
 800e8a2:	bf00      	nop
 800e8a4:	e7fe      	b.n	800e8a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10c      	bne.n	800e8c8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	b672      	cpsid	i
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	b662      	cpsie	i
 800e8c2:	60bb      	str	r3, [r7, #8]
}
 800e8c4:	bf00      	nop
 800e8c6:	e7fe      	b.n	800e8c6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8cc:	1e5a      	subs	r2, r3, #1
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d044      	beq.n	800e968 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d140      	bne.n	800e968 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe f98e 	bl	800cc0c <uxListRemove>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d115      	bne.n	800e922 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fa:	491f      	ldr	r1, [pc, #124]	; (800e978 <xTaskPriorityDisinherit+0x10c>)
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	440b      	add	r3, r1
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d10a      	bne.n	800e922 <xTaskPriorityDisinherit+0xb6>
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e910:	2201      	movs	r2, #1
 800e912:	fa02 f303 	lsl.w	r3, r2, r3
 800e916:	43da      	mvns	r2, r3
 800e918:	4b18      	ldr	r3, [pc, #96]	; (800e97c <xTaskPriorityDisinherit+0x110>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4013      	ands	r3, r2
 800e91e:	4a17      	ldr	r2, [pc, #92]	; (800e97c <xTaskPriorityDisinherit+0x110>)
 800e920:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92e:	f1c3 0207 	rsb	r2, r3, #7
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93a:	2201      	movs	r2, #1
 800e93c:	409a      	lsls	r2, r3
 800e93e:	4b0f      	ldr	r3, [pc, #60]	; (800e97c <xTaskPriorityDisinherit+0x110>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4313      	orrs	r3, r2
 800e944:	4a0d      	ldr	r2, [pc, #52]	; (800e97c <xTaskPriorityDisinherit+0x110>)
 800e946:	6013      	str	r3, [r2, #0]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94c:	4613      	mov	r3, r2
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4413      	add	r3, r2
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	4a08      	ldr	r2, [pc, #32]	; (800e978 <xTaskPriorityDisinherit+0x10c>)
 800e956:	441a      	add	r2, r3
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	3304      	adds	r3, #4
 800e95c:	4619      	mov	r1, r3
 800e95e:	4610      	mov	r0, r2
 800e960:	f7fe f8f7 	bl	800cb52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e964:	2301      	movs	r3, #1
 800e966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e968:	697b      	ldr	r3, [r7, #20]
	}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000b88 	.word	0x20000b88
 800e978:	20000b8c 	.word	0x20000b8c
 800e97c:	20000c90 	.word	0x20000c90

0800e980 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e98e:	2301      	movs	r3, #1
 800e990:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	f000 8087 	beq.w	800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10c      	bne.n	800e9bc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a6:	b672      	cpsid	i
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	b662      	cpsie	i
 800e9b6:	60fb      	str	r3, [r7, #12]
}
 800e9b8:	bf00      	nop
 800e9ba:	e7fe      	b.n	800e9ba <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d902      	bls.n	800e9cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	61fb      	str	r3, [r7, #28]
 800e9ca:	e002      	b.n	800e9d2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d6:	69fa      	ldr	r2, [r7, #28]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d065      	beq.n	800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9e0:	697a      	ldr	r2, [r7, #20]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d160      	bne.n	800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e9e6:	4b32      	ldr	r3, [pc, #200]	; (800eab0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	69ba      	ldr	r2, [r7, #24]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d10c      	bne.n	800ea0a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	b672      	cpsid	i
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	b662      	cpsie	i
 800ea04:	60bb      	str	r3, [r7, #8]
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	69fa      	ldr	r2, [r7, #28]
 800ea14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	699b      	ldr	r3, [r3, #24]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	db04      	blt.n	800ea28 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	f1c3 0207 	rsb	r2, r3, #7
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	6959      	ldr	r1, [r3, #20]
 800ea2c:	693a      	ldr	r2, [r7, #16]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4a1f      	ldr	r2, [pc, #124]	; (800eab4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea38:	4413      	add	r3, r2
 800ea3a:	4299      	cmp	r1, r3
 800ea3c:	d134      	bne.n	800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	3304      	adds	r3, #4
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fe f8e2 	bl	800cc0c <uxListRemove>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d115      	bne.n	800ea7a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea52:	4918      	ldr	r1, [pc, #96]	; (800eab4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea54:	4613      	mov	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	440b      	add	r3, r1
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea68:	2201      	movs	r2, #1
 800ea6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea6e:	43da      	mvns	r2, r3
 800ea70:	4b11      	ldr	r3, [pc, #68]	; (800eab8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4013      	ands	r3, r2
 800ea76:	4a10      	ldr	r2, [pc, #64]	; (800eab8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ea78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea7e:	2201      	movs	r2, #1
 800ea80:	409a      	lsls	r2, r3
 800ea82:	4b0d      	ldr	r3, [pc, #52]	; (800eab8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4313      	orrs	r3, r2
 800ea88:	4a0b      	ldr	r2, [pc, #44]	; (800eab8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ea8a:	6013      	str	r3, [r2, #0]
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea90:	4613      	mov	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4a06      	ldr	r2, [pc, #24]	; (800eab4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea9a:	441a      	add	r2, r3
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	3304      	adds	r3, #4
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	f7fe f855 	bl	800cb52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eaa8:	bf00      	nop
 800eaaa:	3720      	adds	r7, #32
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20000b88 	.word	0x20000b88
 800eab4:	20000b8c 	.word	0x20000b8c
 800eab8:	20000c90 	.word	0x20000c90

0800eabc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eac0:	4b07      	ldr	r3, [pc, #28]	; (800eae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d004      	beq.n	800ead2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eac8:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eace:	3201      	adds	r2, #1
 800ead0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ead2:	4b03      	ldr	r3, [pc, #12]	; (800eae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ead4:	681b      	ldr	r3, [r3, #0]
	}
 800ead6:	4618      	mov	r0, r3
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	20000b88 	.word	0x20000b88

0800eae4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eaee:	4b29      	ldr	r3, [pc, #164]	; (800eb94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf4:	4b28      	ldr	r3, [pc, #160]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe f886 	bl	800cc0c <uxListRemove>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d10b      	bne.n	800eb1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eb06:	4b24      	ldr	r3, [pc, #144]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb12:	43da      	mvns	r2, r3
 800eb14:	4b21      	ldr	r3, [pc, #132]	; (800eb9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4013      	ands	r3, r2
 800eb1a:	4a20      	ldr	r2, [pc, #128]	; (800eb9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb24:	d10a      	bne.n	800eb3c <prvAddCurrentTaskToDelayedList+0x58>
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d007      	beq.n	800eb3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb2c:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3304      	adds	r3, #4
 800eb32:	4619      	mov	r1, r3
 800eb34:	481a      	ldr	r0, [pc, #104]	; (800eba0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eb36:	f7fe f80c 	bl	800cb52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb3a:	e026      	b.n	800eb8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4413      	add	r3, r2
 800eb42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb44:	4b14      	ldr	r3, [pc, #80]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d209      	bcs.n	800eb68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb54:	4b13      	ldr	r3, [pc, #76]	; (800eba4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	4b0f      	ldr	r3, [pc, #60]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4610      	mov	r0, r2
 800eb62:	f7fe f81a 	bl	800cb9a <vListInsert>
}
 800eb66:	e010      	b.n	800eb8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3304      	adds	r3, #4
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7fe f810 	bl	800cb9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb7a:	4b0c      	ldr	r3, [pc, #48]	; (800ebac <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d202      	bcs.n	800eb8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eb84:	4a09      	ldr	r2, [pc, #36]	; (800ebac <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	6013      	str	r3, [r2, #0]
}
 800eb8a:	bf00      	nop
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20000c8c 	.word	0x20000c8c
 800eb98:	20000b88 	.word	0x20000b88
 800eb9c:	20000c90 	.word	0x20000c90
 800eba0:	20000c74 	.word	0x20000c74
 800eba4:	20000c44 	.word	0x20000c44
 800eba8:	20000c40 	.word	0x20000c40
 800ebac:	20000ca8 	.word	0x20000ca8

0800ebb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	3b04      	subs	r3, #4
 800ebc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ebc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3b04      	subs	r3, #4
 800ebce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	f023 0201 	bic.w	r2, r3, #1
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3b04      	subs	r3, #4
 800ebde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebe0:	4a0c      	ldr	r2, [pc, #48]	; (800ec14 <pxPortInitialiseStack+0x64>)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3b14      	subs	r3, #20
 800ebea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	3b04      	subs	r3, #4
 800ebf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f06f 0202 	mvn.w	r2, #2
 800ebfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3b20      	subs	r3, #32
 800ec04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec06:	68fb      	ldr	r3, [r7, #12]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr
 800ec14:	0800ec19 	.word	0x0800ec19

0800ec18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec22:	4b14      	ldr	r3, [pc, #80]	; (800ec74 <prvTaskExitError+0x5c>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2a:	d00c      	beq.n	800ec46 <prvTaskExitError+0x2e>
	__asm volatile
 800ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec30:	b672      	cpsid	i
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	b662      	cpsie	i
 800ec40:	60fb      	str	r3, [r7, #12]
}
 800ec42:	bf00      	nop
 800ec44:	e7fe      	b.n	800ec44 <prvTaskExitError+0x2c>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	b672      	cpsid	i
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	b662      	cpsie	i
 800ec5a:	60bb      	str	r3, [r7, #8]
}
 800ec5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec5e:	bf00      	nop
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d0fc      	beq.n	800ec60 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec66:	bf00      	nop
 800ec68:	bf00      	nop
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr
 800ec74:	20000020 	.word	0x20000020
	...

0800ec80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec80:	4b07      	ldr	r3, [pc, #28]	; (800eca0 <pxCurrentTCBConst2>)
 800ec82:	6819      	ldr	r1, [r3, #0]
 800ec84:	6808      	ldr	r0, [r1, #0]
 800ec86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8a:	f380 8809 	msr	PSP, r0
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f04f 0000 	mov.w	r0, #0
 800ec96:	f380 8811 	msr	BASEPRI, r0
 800ec9a:	4770      	bx	lr
 800ec9c:	f3af 8000 	nop.w

0800eca0 <pxCurrentTCBConst2>:
 800eca0:	20000b88 	.word	0x20000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop

0800eca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eca8:	4808      	ldr	r0, [pc, #32]	; (800eccc <prvPortStartFirstTask+0x24>)
 800ecaa:	6800      	ldr	r0, [r0, #0]
 800ecac:	6800      	ldr	r0, [r0, #0]
 800ecae:	f380 8808 	msr	MSP, r0
 800ecb2:	f04f 0000 	mov.w	r0, #0
 800ecb6:	f380 8814 	msr	CONTROL, r0
 800ecba:	b662      	cpsie	i
 800ecbc:	b661      	cpsie	f
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	df00      	svc	0
 800ecc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecca:	bf00      	nop
 800eccc:	e000ed08 	.word	0xe000ed08

0800ecd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ecd6:	4b37      	ldr	r3, [pc, #220]	; (800edb4 <xPortStartScheduler+0xe4>)
 800ecd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	22ff      	movs	r2, #255	; 0xff
 800ece6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ecf8:	b2da      	uxtb	r2, r3
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	; (800edb8 <xPortStartScheduler+0xe8>)
 800ecfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecfe:	4b2f      	ldr	r3, [pc, #188]	; (800edbc <xPortStartScheduler+0xec>)
 800ed00:	2207      	movs	r2, #7
 800ed02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed04:	e009      	b.n	800ed1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ed06:	4b2d      	ldr	r3, [pc, #180]	; (800edbc <xPortStartScheduler+0xec>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	4a2b      	ldr	r2, [pc, #172]	; (800edbc <xPortStartScheduler+0xec>)
 800ed0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed10:	78fb      	ldrb	r3, [r7, #3]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed1a:	78fb      	ldrb	r3, [r7, #3]
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed22:	2b80      	cmp	r3, #128	; 0x80
 800ed24:	d0ef      	beq.n	800ed06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed26:	4b25      	ldr	r3, [pc, #148]	; (800edbc <xPortStartScheduler+0xec>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f1c3 0307 	rsb	r3, r3, #7
 800ed2e:	2b04      	cmp	r3, #4
 800ed30:	d00c      	beq.n	800ed4c <xPortStartScheduler+0x7c>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	b672      	cpsid	i
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	b662      	cpsie	i
 800ed46:	60bb      	str	r3, [r7, #8]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed4c:	4b1b      	ldr	r3, [pc, #108]	; (800edbc <xPortStartScheduler+0xec>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	021b      	lsls	r3, r3, #8
 800ed52:	4a1a      	ldr	r2, [pc, #104]	; (800edbc <xPortStartScheduler+0xec>)
 800ed54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed56:	4b19      	ldr	r3, [pc, #100]	; (800edbc <xPortStartScheduler+0xec>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed5e:	4a17      	ldr	r2, [pc, #92]	; (800edbc <xPortStartScheduler+0xec>)
 800ed60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed6a:	4b15      	ldr	r3, [pc, #84]	; (800edc0 <xPortStartScheduler+0xf0>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a14      	ldr	r2, [pc, #80]	; (800edc0 <xPortStartScheduler+0xf0>)
 800ed70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed76:	4b12      	ldr	r3, [pc, #72]	; (800edc0 <xPortStartScheduler+0xf0>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a11      	ldr	r2, [pc, #68]	; (800edc0 <xPortStartScheduler+0xf0>)
 800ed7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed82:	f000 f8dd 	bl	800ef40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed86:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <xPortStartScheduler+0xf4>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed8c:	f000 f8fc 	bl	800ef88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed90:	4b0d      	ldr	r3, [pc, #52]	; (800edc8 <xPortStartScheduler+0xf8>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a0c      	ldr	r2, [pc, #48]	; (800edc8 <xPortStartScheduler+0xf8>)
 800ed96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed9c:	f7ff ff84 	bl	800eca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eda0:	f7ff fa58 	bl	800e254 <vTaskSwitchContext>
	prvTaskExitError();
 800eda4:	f7ff ff38 	bl	800ec18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	e000e400 	.word	0xe000e400
 800edb8:	20000cb4 	.word	0x20000cb4
 800edbc:	20000cb8 	.word	0x20000cb8
 800edc0:	e000ed20 	.word	0xe000ed20
 800edc4:	20000020 	.word	0x20000020
 800edc8:	e000ef34 	.word	0xe000ef34

0800edcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	b672      	cpsid	i
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	b662      	cpsie	i
 800ede6:	607b      	str	r3, [r7, #4]
}
 800ede8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800edea:	4b10      	ldr	r3, [pc, #64]	; (800ee2c <vPortEnterCritical+0x60>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	3301      	adds	r3, #1
 800edf0:	4a0e      	ldr	r2, [pc, #56]	; (800ee2c <vPortEnterCritical+0x60>)
 800edf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800edf4:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <vPortEnterCritical+0x60>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d111      	bne.n	800ee20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800edfc:	4b0c      	ldr	r3, [pc, #48]	; (800ee30 <vPortEnterCritical+0x64>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00c      	beq.n	800ee20 <vPortEnterCritical+0x54>
	__asm volatile
 800ee06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0a:	b672      	cpsid	i
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	b662      	cpsie	i
 800ee1a:	603b      	str	r3, [r7, #0]
}
 800ee1c:	bf00      	nop
 800ee1e:	e7fe      	b.n	800ee1e <vPortEnterCritical+0x52>
	}
}
 800ee20:	bf00      	nop
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	20000020 	.word	0x20000020
 800ee30:	e000ed04 	.word	0xe000ed04

0800ee34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee3a:	4b13      	ldr	r3, [pc, #76]	; (800ee88 <vPortExitCritical+0x54>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d10c      	bne.n	800ee5c <vPortExitCritical+0x28>
	__asm volatile
 800ee42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee46:	b672      	cpsid	i
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	b662      	cpsie	i
 800ee56:	607b      	str	r3, [r7, #4]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ee5c:	4b0a      	ldr	r3, [pc, #40]	; (800ee88 <vPortExitCritical+0x54>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	4a09      	ldr	r2, [pc, #36]	; (800ee88 <vPortExitCritical+0x54>)
 800ee64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee66:	4b08      	ldr	r3, [pc, #32]	; (800ee88 <vPortExitCritical+0x54>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d105      	bne.n	800ee7a <vPortExitCritical+0x46>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	f383 8811 	msr	BASEPRI, r3
}
 800ee78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee7a:	bf00      	nop
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	20000020 	.word	0x20000020
 800ee8c:	00000000 	.word	0x00000000

0800ee90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee90:	f3ef 8009 	mrs	r0, PSP
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	4b15      	ldr	r3, [pc, #84]	; (800eef0 <pxCurrentTCBConst>)
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	f01e 0f10 	tst.w	lr, #16
 800eea0:	bf08      	it	eq
 800eea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeaa:	6010      	str	r0, [r2, #0]
 800eeac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eeb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eeb4:	b672      	cpsid	i
 800eeb6:	f380 8811 	msr	BASEPRI, r0
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	b662      	cpsie	i
 800eec4:	f7ff f9c6 	bl	800e254 <vTaskSwitchContext>
 800eec8:	f04f 0000 	mov.w	r0, #0
 800eecc:	f380 8811 	msr	BASEPRI, r0
 800eed0:	bc09      	pop	{r0, r3}
 800eed2:	6819      	ldr	r1, [r3, #0]
 800eed4:	6808      	ldr	r0, [r1, #0]
 800eed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeda:	f01e 0f10 	tst.w	lr, #16
 800eede:	bf08      	it	eq
 800eee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eee4:	f380 8809 	msr	PSP, r0
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop

0800eef0 <pxCurrentTCBConst>:
 800eef0:	20000b88 	.word	0x20000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop

0800eef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef02:	b672      	cpsid	i
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	b662      	cpsie	i
 800ef12:	607b      	str	r3, [r7, #4]
}
 800ef14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef16:	f7ff f8e3 	bl	800e0e0 <xTaskIncrementTick>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d003      	beq.n	800ef28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef20:	4b06      	ldr	r3, [pc, #24]	; (800ef3c <SysTick_Handler+0x44>)
 800ef22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef26:	601a      	str	r2, [r3, #0]
 800ef28:	2300      	movs	r3, #0
 800ef2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	f383 8811 	msr	BASEPRI, r3
}
 800ef32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	e000ed04 	.word	0xe000ed04

0800ef40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef40:	b480      	push	{r7}
 800ef42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef44:	4b0b      	ldr	r3, [pc, #44]	; (800ef74 <vPortSetupTimerInterrupt+0x34>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	; (800ef78 <vPortSetupTimerInterrupt+0x38>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef50:	4b0a      	ldr	r3, [pc, #40]	; (800ef7c <vPortSetupTimerInterrupt+0x3c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a0a      	ldr	r2, [pc, #40]	; (800ef80 <vPortSetupTimerInterrupt+0x40>)
 800ef56:	fba2 2303 	umull	r2, r3, r2, r3
 800ef5a:	099b      	lsrs	r3, r3, #6
 800ef5c:	4a09      	ldr	r2, [pc, #36]	; (800ef84 <vPortSetupTimerInterrupt+0x44>)
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef62:	4b04      	ldr	r3, [pc, #16]	; (800ef74 <vPortSetupTimerInterrupt+0x34>)
 800ef64:	2207      	movs	r2, #7
 800ef66:	601a      	str	r2, [r3, #0]
}
 800ef68:	bf00      	nop
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	e000e010 	.word	0xe000e010
 800ef78:	e000e018 	.word	0xe000e018
 800ef7c:	20000014 	.word	0x20000014
 800ef80:	10624dd3 	.word	0x10624dd3
 800ef84:	e000e014 	.word	0xe000e014

0800ef88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef98 <vPortEnableVFP+0x10>
 800ef8c:	6801      	ldr	r1, [r0, #0]
 800ef8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef92:	6001      	str	r1, [r0, #0]
 800ef94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef96:	bf00      	nop
 800ef98:	e000ed88 	.word	0xe000ed88

0800ef9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efa2:	f3ef 8305 	mrs	r3, IPSR
 800efa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b0f      	cmp	r3, #15
 800efac:	d916      	bls.n	800efdc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efae:	4a19      	ldr	r2, [pc, #100]	; (800f014 <vPortValidateInterruptPriority+0x78>)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4413      	add	r3, r2
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efb8:	4b17      	ldr	r3, [pc, #92]	; (800f018 <vPortValidateInterruptPriority+0x7c>)
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	7afa      	ldrb	r2, [r7, #11]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d20c      	bcs.n	800efdc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800efc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc6:	b672      	cpsid	i
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	b662      	cpsie	i
 800efd6:	607b      	str	r3, [r7, #4]
}
 800efd8:	bf00      	nop
 800efda:	e7fe      	b.n	800efda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800efdc:	4b0f      	ldr	r3, [pc, #60]	; (800f01c <vPortValidateInterruptPriority+0x80>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800efe4:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <vPortValidateInterruptPriority+0x84>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d90c      	bls.n	800f006 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800efec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff0:	b672      	cpsid	i
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	b662      	cpsie	i
 800f000:	603b      	str	r3, [r7, #0]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <vPortValidateInterruptPriority+0x68>
	}
 800f006:	bf00      	nop
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	e000e3f0 	.word	0xe000e3f0
 800f018:	20000cb4 	.word	0x20000cb4
 800f01c:	e000ed0c 	.word	0xe000ed0c
 800f020:	20000cb8 	.word	0x20000cb8

0800f024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08a      	sub	sp, #40	; 0x28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f030:	f7fe ff88 	bl	800df44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f034:	4b5e      	ldr	r3, [pc, #376]	; (800f1b0 <pvPortMalloc+0x18c>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f03c:	f000 f920 	bl	800f280 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f040:	4b5c      	ldr	r3, [pc, #368]	; (800f1b4 <pvPortMalloc+0x190>)
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4013      	ands	r3, r2
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f040 8092 	bne.w	800f172 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d01f      	beq.n	800f094 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f054:	2208      	movs	r2, #8
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4413      	add	r3, r2
 800f05a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f003 0307 	and.w	r3, r3, #7
 800f062:	2b00      	cmp	r3, #0
 800f064:	d016      	beq.n	800f094 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f023 0307 	bic.w	r3, r3, #7
 800f06c:	3308      	adds	r3, #8
 800f06e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00c      	beq.n	800f094 <pvPortMalloc+0x70>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07e:	b672      	cpsid	i
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	b662      	cpsie	i
 800f08e:	617b      	str	r3, [r7, #20]
}
 800f090:	bf00      	nop
 800f092:	e7fe      	b.n	800f092 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d06b      	beq.n	800f172 <pvPortMalloc+0x14e>
 800f09a:	4b47      	ldr	r3, [pc, #284]	; (800f1b8 <pvPortMalloc+0x194>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d866      	bhi.n	800f172 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0a4:	4b45      	ldr	r3, [pc, #276]	; (800f1bc <pvPortMalloc+0x198>)
 800f0a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0a8:	4b44      	ldr	r3, [pc, #272]	; (800f1bc <pvPortMalloc+0x198>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0ae:	e004      	b.n	800f0ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d903      	bls.n	800f0cc <pvPortMalloc+0xa8>
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1f1      	bne.n	800f0b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0cc:	4b38      	ldr	r3, [pc, #224]	; (800f1b0 <pvPortMalloc+0x18c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d04d      	beq.n	800f172 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2208      	movs	r2, #8
 800f0dc:	4413      	add	r3, r2
 800f0de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	6a3b      	ldr	r3, [r7, #32]
 800f0e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	1ad2      	subs	r2, r2, r3
 800f0f0:	2308      	movs	r3, #8
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d921      	bls.n	800f13c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	f003 0307 	and.w	r3, r3, #7
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00c      	beq.n	800f124 <pvPortMalloc+0x100>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10e:	b672      	cpsid	i
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	b662      	cpsie	i
 800f11e:	613b      	str	r3, [r7, #16]
}
 800f120:	bf00      	nop
 800f122:	e7fe      	b.n	800f122 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	685a      	ldr	r2, [r3, #4]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	1ad2      	subs	r2, r2, r3
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f136:	69b8      	ldr	r0, [r7, #24]
 800f138:	f000 f904 	bl	800f344 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f13c:	4b1e      	ldr	r3, [pc, #120]	; (800f1b8 <pvPortMalloc+0x194>)
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	4a1c      	ldr	r2, [pc, #112]	; (800f1b8 <pvPortMalloc+0x194>)
 800f148:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f14a:	4b1b      	ldr	r3, [pc, #108]	; (800f1b8 <pvPortMalloc+0x194>)
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	4b1c      	ldr	r3, [pc, #112]	; (800f1c0 <pvPortMalloc+0x19c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	429a      	cmp	r2, r3
 800f154:	d203      	bcs.n	800f15e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f156:	4b18      	ldr	r3, [pc, #96]	; (800f1b8 <pvPortMalloc+0x194>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4a19      	ldr	r2, [pc, #100]	; (800f1c0 <pvPortMalloc+0x19c>)
 800f15c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f160:	685a      	ldr	r2, [r3, #4]
 800f162:	4b14      	ldr	r3, [pc, #80]	; (800f1b4 <pvPortMalloc+0x190>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	431a      	orrs	r2, r3
 800f168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	2200      	movs	r2, #0
 800f170:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f172:	f7fe fef5 	bl	800df60 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f17c:	f7f1 fe0e 	bl	8000d9c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00c      	beq.n	800f1a4 <pvPortMalloc+0x180>
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18e:	b672      	cpsid	i
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	b662      	cpsie	i
 800f19e:	60fb      	str	r3, [r7, #12]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <pvPortMalloc+0x17e>
	return pvReturn;
 800f1a4:	69fb      	ldr	r3, [r7, #28]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3728      	adds	r7, #40	; 0x28
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	20008cc4 	.word	0x20008cc4
 800f1b4:	20008cd0 	.word	0x20008cd0
 800f1b8:	20008cc8 	.word	0x20008cc8
 800f1bc:	20008cbc 	.word	0x20008cbc
 800f1c0:	20008ccc 	.word	0x20008ccc

0800f1c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d04c      	beq.n	800f270 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1d6:	2308      	movs	r3, #8
 800f1d8:	425b      	negs	r3, r3
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4413      	add	r3, r2
 800f1de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	4b23      	ldr	r3, [pc, #140]	; (800f278 <vPortFree+0xb4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4013      	ands	r3, r2
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10c      	bne.n	800f20c <vPortFree+0x48>
	__asm volatile
 800f1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f6:	b672      	cpsid	i
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	b662      	cpsie	i
 800f206:	60fb      	str	r3, [r7, #12]
}
 800f208:	bf00      	nop
 800f20a:	e7fe      	b.n	800f20a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00c      	beq.n	800f22e <vPortFree+0x6a>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	b672      	cpsid	i
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	b662      	cpsie	i
 800f228:	60bb      	str	r3, [r7, #8]
}
 800f22a:	bf00      	nop
 800f22c:	e7fe      	b.n	800f22c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	4b11      	ldr	r3, [pc, #68]	; (800f278 <vPortFree+0xb4>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4013      	ands	r3, r2
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d019      	beq.n	800f270 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d115      	bne.n	800f270 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	4b0b      	ldr	r3, [pc, #44]	; (800f278 <vPortFree+0xb4>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	43db      	mvns	r3, r3
 800f24e:	401a      	ands	r2, r3
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f254:	f7fe fe76 	bl	800df44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	685a      	ldr	r2, [r3, #4]
 800f25c:	4b07      	ldr	r3, [pc, #28]	; (800f27c <vPortFree+0xb8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4413      	add	r3, r2
 800f262:	4a06      	ldr	r2, [pc, #24]	; (800f27c <vPortFree+0xb8>)
 800f264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f266:	6938      	ldr	r0, [r7, #16]
 800f268:	f000 f86c 	bl	800f344 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f26c:	f7fe fe78 	bl	800df60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f270:	bf00      	nop
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	20008cd0 	.word	0x20008cd0
 800f27c:	20008cc8 	.word	0x20008cc8

0800f280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f28a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f28c:	4b27      	ldr	r3, [pc, #156]	; (800f32c <prvHeapInit+0xac>)
 800f28e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f003 0307 	and.w	r3, r3, #7
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00c      	beq.n	800f2b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	3307      	adds	r3, #7
 800f29e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f023 0307 	bic.w	r3, r3, #7
 800f2a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	1ad3      	subs	r3, r2, r3
 800f2ae:	4a1f      	ldr	r2, [pc, #124]	; (800f32c <prvHeapInit+0xac>)
 800f2b0:	4413      	add	r3, r2
 800f2b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2b8:	4a1d      	ldr	r2, [pc, #116]	; (800f330 <prvHeapInit+0xb0>)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2be:	4b1c      	ldr	r3, [pc, #112]	; (800f330 <prvHeapInit+0xb0>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2cc:	2208      	movs	r2, #8
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	1a9b      	subs	r3, r3, r2
 800f2d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f023 0307 	bic.w	r3, r3, #7
 800f2da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	4a15      	ldr	r2, [pc, #84]	; (800f334 <prvHeapInit+0xb4>)
 800f2e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f2e2:	4b14      	ldr	r3, [pc, #80]	; (800f334 <prvHeapInit+0xb4>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f2ea:	4b12      	ldr	r3, [pc, #72]	; (800f334 <prvHeapInit+0xb4>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	1ad2      	subs	r2, r2, r3
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f300:	4b0c      	ldr	r3, [pc, #48]	; (800f334 <prvHeapInit+0xb4>)
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	4a0a      	ldr	r2, [pc, #40]	; (800f338 <prvHeapInit+0xb8>)
 800f30e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	4a09      	ldr	r2, [pc, #36]	; (800f33c <prvHeapInit+0xbc>)
 800f316:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f318:	4b09      	ldr	r3, [pc, #36]	; (800f340 <prvHeapInit+0xc0>)
 800f31a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f31e:	601a      	str	r2, [r3, #0]
}
 800f320:	bf00      	nop
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	20000cbc 	.word	0x20000cbc
 800f330:	20008cbc 	.word	0x20008cbc
 800f334:	20008cc4 	.word	0x20008cc4
 800f338:	20008ccc 	.word	0x20008ccc
 800f33c:	20008cc8 	.word	0x20008cc8
 800f340:	20008cd0 	.word	0x20008cd0

0800f344 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f34c:	4b28      	ldr	r3, [pc, #160]	; (800f3f0 <prvInsertBlockIntoFreeList+0xac>)
 800f34e:	60fb      	str	r3, [r7, #12]
 800f350:	e002      	b.n	800f358 <prvInsertBlockIntoFreeList+0x14>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	60fb      	str	r3, [r7, #12]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d8f7      	bhi.n	800f352 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	4413      	add	r3, r2
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d108      	bne.n	800f386 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	441a      	add	r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	441a      	add	r2, r3
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	429a      	cmp	r2, r3
 800f398:	d118      	bne.n	800f3cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	4b15      	ldr	r3, [pc, #84]	; (800f3f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d00d      	beq.n	800f3c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	441a      	add	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	e008      	b.n	800f3d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3c2:	4b0c      	ldr	r3, [pc, #48]	; (800f3f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e003      	b.n	800f3d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d002      	beq.n	800f3e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3e2:	bf00      	nop
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	20008cbc 	.word	0x20008cbc
 800f3f4:	20008cc4 	.word	0x20008cc4

0800f3f8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f3fc:	f006 feba 	bl	8016174 <touchgfx_init>
}
 800f400:	bf00      	nop
 800f402:	bd80      	pop	{r7, pc}

0800f404 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f408:	f006 fede 	bl	80161c8 <touchgfx_taskEntry>
}
 800f40c:	bf00      	nop
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
    {
 800f418:	4a04      	ldr	r2, [pc, #16]	; (800f42c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	601a      	str	r2, [r3, #0]
    }
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4618      	mov	r0, r3
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr
 800f42c:	0802812c 	.word	0x0802812c

0800f430 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
    }
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7ff ffe9 	bl	800f410 <_ZN8touchgfx12FontProviderD1Ev>
 800f43e:	2104      	movs	r1, #4
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f017 f8b5 	bl	80265b0 <_ZdlPvj>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4618      	mov	r0, r3
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	460b      	mov	r3, r1
 800f45a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f45c:	887b      	ldrh	r3, [r7, #2]
 800f45e:	2b07      	cmp	r3, #7
 800f460:	d83a      	bhi.n	800f4d8 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f462:	a201      	add	r2, pc, #4	; (adr r2, 800f468 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f468:	0800f489 	.word	0x0800f489
 800f46c:	0800f493 	.word	0x0800f493
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	0800f4a7 	.word	0x0800f4a7
 800f478:	0800f4b1 	.word	0x0800f4b1
 800f47c:	0800f4bb 	.word	0x0800f4bb
 800f480:	0800f4c5 	.word	0x0800f4c5
 800f484:	0800f4cf 	.word	0x0800f4cf
    {
    case Typography::DEFAULT:
        // Asap_Bold_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f488:	f004 fd3e 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f48c:	4603      	mov	r3, r0
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	e023      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f492:	f004 fd39 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f496:	4603      	mov	r3, r0
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	e01e      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f49c:	f004 fd34 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	e019      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f4a6:	f004 fd2f 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	e014      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f4b0:	f004 fd2a 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	e00f      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f4ba:	f004 fd25 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	e00a      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f4c4:	f004 fd20 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	695b      	ldr	r3, [r3, #20]
 800f4cc:	e005      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f4ce:	f004 fd1b 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	e000      	b.n	800f4da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f4d8:	2300      	movs	r3, #0
    }
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop

0800f4e4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	4a05      	ldr	r2, [pc, #20]	; (800f504 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7ff ff8b 	bl	800f410 <_ZN8touchgfx12FontProviderD1Ev>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	08028118 	.word	0x08028118

0800f508 <_ZN23ApplicationFontProviderD0Ev>:
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7ff ffe7 	bl	800f4e4 <_ZN23ApplicationFontProviderD1Ev>
 800f516:	2104      	movs	r1, #4
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f017 f849 	bl	80265b0 <_ZdlPvj>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4618      	mov	r0, r3
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	4a04      	ldr	r2, [pc, #16]	; (800f544 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	0802a154 	.word	0x0802a154

0800f548 <_ZN8touchgfx4FontD0Ev>:
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff ffe9 	bl	800f528 <_ZN8touchgfx4FontD1Ev>
 800f556:	2110      	movs	r1, #16
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f017 f829 	bl	80265b0 <_ZdlPvj>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f568:	b590      	push	{r4, r7, lr}
 800f56a:	b087      	sub	sp, #28
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	460b      	mov	r3, r1
 800f572:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f574:	2300      	movs	r3, #0
 800f576:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f578:	2300      	movs	r3, #0
 800f57a:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	3308      	adds	r3, #8
 800f582:	681c      	ldr	r4, [r3, #0]
 800f584:	f107 030f 	add.w	r3, r7, #15
 800f588:	f107 0210 	add.w	r2, r7, #16
 800f58c:	8879      	ldrh	r1, [r7, #2]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	47a0      	blx	r4
 800f592:	6178      	str	r0, [r7, #20]
        return glyph;
 800f594:	697b      	ldr	r3, [r7, #20]
    }
 800f596:	4618      	mov	r0, r3
 800f598:	371c      	adds	r7, #28
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd90      	pop	{r4, r7, pc}

0800f59e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f59e:	b480      	push	{r7}
 800f5a0:	b083      	sub	sp, #12
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	895b      	ldrh	r3, [r3, #10]
    }
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	899b      	ldrh	r3, [r3, #12]
    }
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f5ce:	b480      	push	{r7}
 800f5d0:	b083      	sub	sp, #12
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	889b      	ldrh	r3, [r3, #4]
    }
 800f5da:	4618      	mov	r0, r3
 800f5dc:	370c      	adds	r7, #12
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f5e6:	b480      	push	{r7}
 800f5e8:	b083      	sub	sp, #12
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	889a      	ldrh	r2, [r3, #4]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	799b      	ldrb	r3, [r3, #6]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	4413      	add	r3, r2
 800f5fa:	b29b      	uxth	r3, r3
    }
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	79db      	ldrb	r3, [r3, #7]
 800f614:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f618:	b2db      	uxtb	r3, r3
    }
 800f61a:	4618      	mov	r0, r3
 800f61c:	370c      	adds	r7, #12
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f626:	b480      	push	{r7}
 800f628:	b083      	sub	sp, #12
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	79db      	ldrb	r3, [r3, #7]
 800f632:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f636:	b2db      	uxtb	r3, r3
    }
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	4a05      	ldr	r2, [pc, #20]	; (800f664 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff ff67 	bl	800f528 <_ZN8touchgfx4FontD1Ev>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	0802a20c 	.word	0x0802a20c

0800f668 <_ZN8touchgfx9ConstFontD0Ev>:
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff ffe7 	bl	800f644 <_ZN8touchgfx9ConstFontD1Ev>
 800f676:	2118      	movs	r1, #24
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f016 ff99 	bl	80265b0 <_ZdlPvj>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	4a05      	ldr	r2, [pc, #20]	; (800f6a8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff ffd3 	bl	800f644 <_ZN8touchgfx9ConstFontD1Ev>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	08028140 	.word	0x08028140

0800f6ac <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff ffe7 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6ba:	2124      	movs	r1, #36	; 0x24
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f016 ff77 	bl	80265b0 <_ZdlPvj>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f82d 	bl	800f734 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f6da:	4b08      	ldr	r3, [pc, #32]	; (800f6fc <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	4b08      	ldr	r3, [pc, #32]	; (800f700 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f6e0:	6819      	ldr	r1, [r3, #0]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	005b      	lsls	r3, r3, #1
 800f6e8:	440b      	add	r3, r1
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	4413      	add	r3, r2
 800f6f0:	681b      	ldr	r3, [r3, #0]
    }
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	2000c6d4 	.word	0x2000c6d4
 800f700:	2000c6cc 	.word	0x2000c6cc

0800f704 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 f811 	bl	800f734 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f712:	4b07      	ldr	r3, [pc, #28]	; (800f730 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	4413      	add	r3, r2
 800f71e:	785b      	ldrb	r3, [r3, #1]
 800f720:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f724:	b2db      	uxtb	r3, r3
    }
 800f726:	4618      	mov	r0, r3
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	2000c6cc 	.word	0x2000c6cc

0800f734 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f73c:	4b0c      	ldr	r3, [pc, #48]	; (800f770 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d105      	bne.n	800f750 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f744:	4b0b      	ldr	r3, [pc, #44]	; (800f774 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f746:	4a0c      	ldr	r2, [pc, #48]	; (800f778 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f748:	21de      	movs	r1, #222	; 0xde
 800f74a:	480c      	ldr	r0, [pc, #48]	; (800f77c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f74c:	f016 ff5e 	bl	802660c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	881a      	ldrh	r2, [r3, #0]
 800f754:	4b0a      	ldr	r3, [pc, #40]	; (800f780 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d305      	bcc.n	800f768 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f75c:	4b09      	ldr	r3, [pc, #36]	; (800f784 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f75e:	4a06      	ldr	r2, [pc, #24]	; (800f778 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f760:	21df      	movs	r1, #223	; 0xdf
 800f762:	4806      	ldr	r0, [pc, #24]	; (800f77c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f764:	f016 ff52 	bl	802660c <__assert_func>
    }
 800f768:	bf00      	nop
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	2000c6cc 	.word	0x2000c6cc
 800f774:	080276dc 	.word	0x080276dc
 800f778:	08027720 	.word	0x08027720
 800f77c:	08027750 	.word	0x08027750
 800f780:	2000c6d0 	.word	0x2000c6d0
 800f784:	08027794 	.word	0x08027794

0800f788 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	7b5b      	ldrb	r3, [r3, #13]
 800f794:	021b      	lsls	r3, r3, #8
 800f796:	b21b      	sxth	r3, r3
 800f798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f79c:	b21a      	sxth	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	7adb      	ldrb	r3, [r3, #11]
 800f7a2:	b21b      	sxth	r3, r3
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	b21b      	sxth	r3, r3
 800f7a8:	b29b      	uxth	r3, r3
    }
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	370c      	adds	r7, #12
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f7b6:	b480      	push	{r7}
 800f7b8:	b083      	sub	sp, #12
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a1b      	ldr	r3, [r3, #32]
    }
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
	...

0800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b08c      	sub	sp, #48	; 0x30
 800f7d4:	af08      	add	r7, sp, #32
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	461a      	mov	r2, r3
 800f7de:	460b      	mov	r3, r1
 800f7e0:	80fb      	strh	r3, [r7, #6]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	88b9      	ldrh	r1, [r7, #4]
 800f7ea:	88fa      	ldrh	r2, [r7, #6]
 800f7ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f7ee:	9306      	str	r3, [sp, #24]
 800f7f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f7f2:	9305      	str	r3, [sp, #20]
 800f7f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f7f8:	9304      	str	r3, [sp, #16]
 800f7fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f7fe:	9303      	str	r3, [sp, #12]
 800f800:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f804:	9302      	str	r3, [sp, #8]
 800f806:	7f3b      	ldrb	r3, [r7, #28]
 800f808:	9301      	str	r3, [sp, #4]
 800f80a:	7e3b      	ldrb	r3, [r7, #24]
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	460b      	mov	r3, r1
 800f810:	68b9      	ldr	r1, [r7, #8]
 800f812:	f00b fbef 	bl	801aff4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f816:	4a08      	ldr	r2, [pc, #32]	; (800f838 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	601a      	str	r2, [r3, #0]
    glyphData(glyphDataInternalFlash),
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f820:	619a      	str	r2, [r3, #24]
    kerningData(kerningList),
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f826:	61da      	str	r2, [r3, #28]
    gsubTable(gsubData)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f82c:	621a      	str	r2, [r3, #32]
{
}
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	08028140 	.word	0x08028140

0800f83c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	889b      	ldrh	r3, [r3, #4]
 800f850:	0adb      	lsrs	r3, r3, #11
 800f852:	b29b      	uxth	r3, r3
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	4413      	add	r3, r2
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4413      	add	r3, r2
}
 800f862:	4618      	mov	r0, r3
 800f864:	3714      	adds	r7, #20
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b086      	sub	sp, #24
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	460b      	mov	r3, r1
 800f878:	607a      	str	r2, [r7, #4]
 800f87a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d003      	beq.n	800f88a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	7b1b      	ldrb	r3, [r3, #12]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d101      	bne.n	800f88e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	e023      	b.n	800f8d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7ff ff7a 	bl	800f788 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f894:	4603      	mov	r3, r0
 800f896:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f898:	8abb      	ldrh	r3, [r7, #20]
 800f89a:	82fb      	strh	r3, [r7, #22]
 800f89c:	e013      	b.n	800f8c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x58>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	69da      	ldr	r2, [r3, #28]
 800f8a2:	8afb      	ldrh	r3, [r7, #22]
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	897a      	ldrh	r2, [r7, #10]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d107      	bne.n	800f8c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
        {
            return kerningData[i].distance;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	69da      	ldr	r2, [r3, #28]
 800f8b4:	8afb      	ldrh	r3, [r7, #22]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f8be:	e00a      	b.n	800f8d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f8c0:	8afb      	ldrh	r3, [r7, #22]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	82fb      	strh	r3, [r7, #22]
 800f8c6:	8afa      	ldrh	r2, [r7, #22]
 800f8c8:	8abb      	ldrh	r3, [r7, #20]
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	7b09      	ldrb	r1, [r1, #12]
 800f8ce:	440b      	add	r3, r1
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	dbe4      	blt.n	800f89e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x30>
        }
    }
    return 0;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3718      	adds	r7, #24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
	...

0800f8e0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	4801      	ldr	r0, [pc, #4]	; (800f8ec <__tcf_0+0xc>)
 800f8e6:	f7ff fecf 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	20008cd4 	.word	0x20008cd4

0800f8f0 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b08a      	sub	sp, #40	; 0x28
 800f8f4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f8f6:	4b1e      	ldr	r3, [pc, #120]	; (800f970 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f3bf 8f5b 	dmb	ish
 800f8fe:	f003 0301 	and.w	r3, r3, #1
 800f902:	2b00      	cmp	r3, #0
 800f904:	bf0c      	ite	eq
 800f906:	2301      	moveq	r3, #1
 800f908:	2300      	movne	r3, #0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d02a      	beq.n	800f966 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f910:	4817      	ldr	r0, [pc, #92]	; (800f970 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f912:	f016 fe4f 	bl	80265b4 <__cxa_guard_acquire>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	bf14      	ite	ne
 800f91c:	2301      	movne	r3, #1
 800f91e:	2300      	moveq	r3, #0
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d01f      	beq.n	800f966 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f926:	2300      	movs	r3, #0
 800f928:	9309      	str	r3, [sp, #36]	; 0x24
 800f92a:	2300      	movs	r3, #0
 800f92c:	9308      	str	r3, [sp, #32]
 800f92e:	233f      	movs	r3, #63	; 0x3f
 800f930:	9307      	str	r3, [sp, #28]
 800f932:	4b10      	ldr	r3, [pc, #64]	; (800f974 <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 800f934:	9306      	str	r3, [sp, #24]
 800f936:	4b10      	ldr	r3, [pc, #64]	; (800f978 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 800f938:	9305      	str	r3, [sp, #20]
 800f93a:	2301      	movs	r3, #1
 800f93c:	9304      	str	r3, [sp, #16]
 800f93e:	2300      	movs	r3, #0
 800f940:	9303      	str	r3, [sp, #12]
 800f942:	2301      	movs	r3, #1
 800f944:	9302      	str	r3, [sp, #8]
 800f946:	2304      	movs	r3, #4
 800f948:	9301      	str	r3, [sp, #4]
 800f94a:	2300      	movs	r3, #0
 800f94c:	9300      	str	r3, [sp, #0]
 800f94e:	230a      	movs	r3, #10
 800f950:	2204      	movs	r2, #4
 800f952:	490a      	ldr	r1, [pc, #40]	; (800f97c <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 800f954:	480a      	ldr	r0, [pc, #40]	; (800f980 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 800f956:	f7ff ff3b 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f95a:	480a      	ldr	r0, [pc, #40]	; (800f984 <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 800f95c:	f016 fe74 	bl	8026648 <atexit>
 800f960:	4803      	ldr	r0, [pc, #12]	; (800f970 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f962:	f016 fe33 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_10_4bpp;
 800f966:	4b06      	ldr	r3, [pc, #24]	; (800f980 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 800f968:	4618      	mov	r0, r3
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20008cf8 	.word	0x20008cf8
 800f974:	0802f610 	.word	0x0802f610
 800f978:	0802818c 	.word	0x0802818c
 800f97c:	0802f638 	.word	0x0802f638
 800f980:	20008cd4 	.word	0x20008cd4
 800f984:	0800f8e1 	.word	0x0800f8e1

0800f988 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 13, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f988:	b580      	push	{r7, lr}
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	4801      	ldr	r0, [pc, #4]	; (800f994 <__tcf_0+0xc>)
 800f98e:	f7ff fe7b 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f992:	bd80      	pop	{r7, pc}
 800f994:	20008cfc 	.word	0x20008cfc

0800f998 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b08a      	sub	sp, #40	; 0x28
 800f99c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 13, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f99e:	4b1e      	ldr	r3, [pc, #120]	; (800fa18 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f3bf 8f5b 	dmb	ish
 800f9a6:	f003 0301 	and.w	r3, r3, #1
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	bf0c      	ite	eq
 800f9ae:	2301      	moveq	r3, #1
 800f9b0:	2300      	movne	r3, #0
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d02a      	beq.n	800fa0e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f9b8:	4817      	ldr	r0, [pc, #92]	; (800fa18 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f9ba:	f016 fdfb 	bl	80265b4 <__cxa_guard_acquire>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	bf14      	ite	ne
 800f9c4:	2301      	movne	r3, #1
 800f9c6:	2300      	moveq	r3, #0
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d01f      	beq.n	800fa0e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	9308      	str	r3, [sp, #32]
 800f9d6:	233f      	movs	r3, #63	; 0x3f
 800f9d8:	9307      	str	r3, [sp, #28]
 800f9da:	4b10      	ldr	r3, [pc, #64]	; (800fa1c <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 800f9dc:	9306      	str	r3, [sp, #24]
 800f9de:	4b10      	ldr	r3, [pc, #64]	; (800fa20 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 800f9e0:	9305      	str	r3, [sp, #20]
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	9303      	str	r3, [sp, #12]
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	9302      	str	r3, [sp, #8]
 800f9ee:	2304      	movs	r3, #4
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	230c      	movs	r3, #12
 800f9f8:	220d      	movs	r2, #13
 800f9fa:	490a      	ldr	r1, [pc, #40]	; (800fa24 <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 800f9fc:	480a      	ldr	r0, [pc, #40]	; (800fa28 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 800f9fe:	f7ff fee7 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fa02:	480a      	ldr	r0, [pc, #40]	; (800fa2c <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 800fa04:	f016 fe20 	bl	8026648 <atexit>
 800fa08:	4803      	ldr	r0, [pc, #12]	; (800fa18 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800fa0a:	f016 fddf 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_12_4bpp;
 800fa0e:	4b06      	ldr	r3, [pc, #24]	; (800fa28 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20008d20 	.word	0x20008d20
 800fa1c:	0802f614 	.word	0x0802f614
 800fa20:	08028190 	.word	0x08028190
 800fa24:	0802f670 	.word	0x0802f670
 800fa28:	20008cfc 	.word	0x20008cfc
 800fa2c:	0800f989 	.word	0x0800f989

0800fa30 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_14_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 27, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800fa30:	b580      	push	{r7, lr}
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	4801      	ldr	r0, [pc, #4]	; (800fa3c <__tcf_0+0xc>)
 800fa36:	f7ff fe27 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	20008d24 	.word	0x20008d24

0800fa40 <_Z25getFont_Asap_Bold_14_4bppv>:
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 27, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800fa46:	4b1e      	ldr	r3, [pc, #120]	; (800fac0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f3bf 8f5b 	dmb	ish
 800fa4e:	f003 0301 	and.w	r3, r3, #1
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	bf0c      	ite	eq
 800fa56:	2301      	moveq	r3, #1
 800fa58:	2300      	movne	r3, #0
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d02a      	beq.n	800fab6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800fa60:	4817      	ldr	r0, [pc, #92]	; (800fac0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800fa62:	f016 fda7 	bl	80265b4 <__cxa_guard_acquire>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bf14      	ite	ne
 800fa6c:	2301      	movne	r3, #1
 800fa6e:	2300      	moveq	r3, #0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d01f      	beq.n	800fab6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800fa76:	2300      	movs	r3, #0
 800fa78:	9309      	str	r3, [sp, #36]	; 0x24
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	9308      	str	r3, [sp, #32]
 800fa7e:	2300      	movs	r3, #0
 800fa80:	9307      	str	r3, [sp, #28]
 800fa82:	4b10      	ldr	r3, [pc, #64]	; (800fac4 <_Z25getFont_Asap_Bold_14_4bppv+0x84>)
 800fa84:	9306      	str	r3, [sp, #24]
 800fa86:	4b10      	ldr	r3, [pc, #64]	; (800fac8 <_Z25getFont_Asap_Bold_14_4bppv+0x88>)
 800fa88:	9305      	str	r3, [sp, #20]
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	9304      	str	r3, [sp, #16]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	9303      	str	r3, [sp, #12]
 800fa92:	2301      	movs	r3, #1
 800fa94:	9302      	str	r3, [sp, #8]
 800fa96:	2304      	movs	r3, #4
 800fa98:	9301      	str	r3, [sp, #4]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	230e      	movs	r3, #14
 800faa0:	221b      	movs	r2, #27
 800faa2:	490a      	ldr	r1, [pc, #40]	; (800facc <_Z25getFont_Asap_Bold_14_4bppv+0x8c>)
 800faa4:	480a      	ldr	r0, [pc, #40]	; (800fad0 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
 800faa6:	f7ff fe93 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800faaa:	480a      	ldr	r0, [pc, #40]	; (800fad4 <_Z25getFont_Asap_Bold_14_4bppv+0x94>)
 800faac:	f016 fdcc 	bl	8026648 <atexit>
 800fab0:	4803      	ldr	r0, [pc, #12]	; (800fac0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800fab2:	f016 fd8b 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_14_4bpp;
 800fab6:	4b06      	ldr	r3, [pc, #24]	; (800fad0 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
}
 800fab8:	4618      	mov	r0, r3
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	20008d48 	.word	0x20008d48
 800fac4:	0802f618 	.word	0x0802f618
 800fac8:	08028194 	.word	0x08028194
 800facc:	0802f728 	.word	0x0802f728
 800fad0:	20008d24 	.word	0x20008d24
 800fad4:	0800fa31 	.word	0x0800fa31

0800fad8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800fad8:	b580      	push	{r7, lr}
 800fada:	af00      	add	r7, sp, #0
 800fadc:	4801      	ldr	r0, [pc, #4]	; (800fae4 <__tcf_0+0xc>)
 800fade:	f7ff fdd3 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20008d4c 	.word	0x20008d4c

0800fae8 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b08a      	sub	sp, #40	; 0x28
 800faec:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800faee:	4b1e      	ldr	r3, [pc, #120]	; (800fb68 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f3bf 8f5b 	dmb	ish
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	bf0c      	ite	eq
 800fafe:	2301      	moveq	r3, #1
 800fb00:	2300      	movne	r3, #0
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d02a      	beq.n	800fb5e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800fb08:	4817      	ldr	r0, [pc, #92]	; (800fb68 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800fb0a:	f016 fd53 	bl	80265b4 <__cxa_guard_acquire>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	bf14      	ite	ne
 800fb14:	2301      	movne	r3, #1
 800fb16:	2300      	moveq	r3, #0
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d01f      	beq.n	800fb5e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	9309      	str	r3, [sp, #36]	; 0x24
 800fb22:	2300      	movs	r3, #0
 800fb24:	9308      	str	r3, [sp, #32]
 800fb26:	233f      	movs	r3, #63	; 0x3f
 800fb28:	9307      	str	r3, [sp, #28]
 800fb2a:	4b10      	ldr	r3, [pc, #64]	; (800fb6c <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 800fb2c:	9306      	str	r3, [sp, #24]
 800fb2e:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 800fb30:	9305      	str	r3, [sp, #20]
 800fb32:	2301      	movs	r3, #1
 800fb34:	9304      	str	r3, [sp, #16]
 800fb36:	2300      	movs	r3, #0
 800fb38:	9303      	str	r3, [sp, #12]
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	9302      	str	r3, [sp, #8]
 800fb3e:	2304      	movs	r3, #4
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	2300      	movs	r3, #0
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	2315      	movs	r3, #21
 800fb48:	220d      	movs	r2, #13
 800fb4a:	490a      	ldr	r1, [pc, #40]	; (800fb74 <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 800fb4c:	480a      	ldr	r0, [pc, #40]	; (800fb78 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 800fb4e:	f7ff fe3f 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fb52:	480a      	ldr	r0, [pc, #40]	; (800fb7c <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 800fb54:	f016 fd78 	bl	8026648 <atexit>
 800fb58:	4803      	ldr	r0, [pc, #12]	; (800fb68 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800fb5a:	f016 fd37 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_21_4bpp;
 800fb5e:	4b06      	ldr	r3, [pc, #24]	; (800fb78 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20008d70 	.word	0x20008d70
 800fb6c:	0802f624 	.word	0x0802f624
 800fb70:	08028198 	.word	0x08028198
 800fb74:	0802f8a4 	.word	0x0802f8a4
 800fb78:	20008d4c 	.word	0x20008d4c
 800fb7c:	0800fad9 	.word	0x0800fad9

0800fb80 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 19, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	4801      	ldr	r0, [pc, #4]	; (800fb8c <__tcf_0+0xc>)
 800fb86:	f7ff fd7f 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	20008d74 	.word	0x20008d74

0800fb90 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08a      	sub	sp, #40	; 0x28
 800fb94:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 19, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800fb96:	4b1e      	ldr	r3, [pc, #120]	; (800fc10 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f3bf 8f5b 	dmb	ish
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	bf0c      	ite	eq
 800fba6:	2301      	moveq	r3, #1
 800fba8:	2300      	movne	r3, #0
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d02a      	beq.n	800fc06 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800fbb0:	4817      	ldr	r0, [pc, #92]	; (800fc10 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fbb2:	f016 fcff 	bl	80265b4 <__cxa_guard_acquire>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	bf14      	ite	ne
 800fbbc:	2301      	movne	r3, #1
 800fbbe:	2300      	moveq	r3, #0
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d01f      	beq.n	800fc06 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800fbca:	2300      	movs	r3, #0
 800fbcc:	9308      	str	r3, [sp, #32]
 800fbce:	233f      	movs	r3, #63	; 0x3f
 800fbd0:	9307      	str	r3, [sp, #28]
 800fbd2:	4b10      	ldr	r3, [pc, #64]	; (800fc14 <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 800fbd4:	9306      	str	r3, [sp, #24]
 800fbd6:	4b10      	ldr	r3, [pc, #64]	; (800fc18 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 800fbd8:	9305      	str	r3, [sp, #20]
 800fbda:	2301      	movs	r3, #1
 800fbdc:	9304      	str	r3, [sp, #16]
 800fbde:	2300      	movs	r3, #0
 800fbe0:	9303      	str	r3, [sp, #12]
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	9302      	str	r3, [sp, #8]
 800fbe6:	2304      	movs	r3, #4
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	2300      	movs	r3, #0
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	231e      	movs	r3, #30
 800fbf0:	2213      	movs	r2, #19
 800fbf2:	490a      	ldr	r1, [pc, #40]	; (800fc1c <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 800fbf4:	480a      	ldr	r0, [pc, #40]	; (800fc20 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 800fbf6:	f7ff fdeb 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fbfa:	480a      	ldr	r0, [pc, #40]	; (800fc24 <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 800fbfc:	f016 fd24 	bl	8026648 <atexit>
 800fc00:	4803      	ldr	r0, [pc, #12]	; (800fc10 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fc02:	f016 fce3 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_30_4bpp;
 800fc06:	4b06      	ldr	r3, [pc, #24]	; (800fc20 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	20008d98 	.word	0x20008d98
 800fc14:	0802f628 	.word	0x0802f628
 800fc18:	0802819c 	.word	0x0802819c
 800fc1c:	0802f95c 	.word	0x0802f95c
 800fc20:	20008d74 	.word	0x20008d74
 800fc24:	0800fb81 	.word	0x0800fb81

0800fc28 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	4801      	ldr	r0, [pc, #4]	; (800fc34 <__tcf_0+0xc>)
 800fc2e:	f7ff fd2b 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	20008d9c 	.word	0x20008d9c

0800fc38 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08a      	sub	sp, #40	; 0x28
 800fc3c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fc3e:	4b1e      	ldr	r3, [pc, #120]	; (800fcb8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f3bf 8f5b 	dmb	ish
 800fc46:	f003 0301 	and.w	r3, r3, #1
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	bf0c      	ite	eq
 800fc4e:	2301      	moveq	r3, #1
 800fc50:	2300      	movne	r3, #0
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d02a      	beq.n	800fcae <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fc58:	4817      	ldr	r0, [pc, #92]	; (800fcb8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fc5a:	f016 fcab 	bl	80265b4 <__cxa_guard_acquire>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	bf14      	ite	ne
 800fc64:	2301      	movne	r3, #1
 800fc66:	2300      	moveq	r3, #0
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d01f      	beq.n	800fcae <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	9309      	str	r3, [sp, #36]	; 0x24
 800fc72:	2300      	movs	r3, #0
 800fc74:	9308      	str	r3, [sp, #32]
 800fc76:	233f      	movs	r3, #63	; 0x3f
 800fc78:	9307      	str	r3, [sp, #28]
 800fc7a:	4b10      	ldr	r3, [pc, #64]	; (800fcbc <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 800fc7c:	9306      	str	r3, [sp, #24]
 800fc7e:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 800fc80:	9305      	str	r3, [sp, #20]
 800fc82:	2301      	movs	r3, #1
 800fc84:	9304      	str	r3, [sp, #16]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9303      	str	r3, [sp, #12]
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	9302      	str	r3, [sp, #8]
 800fc8e:	2304      	movs	r3, #4
 800fc90:	9301      	str	r3, [sp, #4]
 800fc92:	2300      	movs	r3, #0
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	2328      	movs	r3, #40	; 0x28
 800fc98:	220d      	movs	r2, #13
 800fc9a:	490a      	ldr	r1, [pc, #40]	; (800fcc4 <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 800fc9c:	480a      	ldr	r0, [pc, #40]	; (800fcc8 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 800fc9e:	f7ff fd97 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fca2:	480a      	ldr	r0, [pc, #40]	; (800fccc <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 800fca4:	f016 fcd0 	bl	8026648 <atexit>
 800fca8:	4803      	ldr	r0, [pc, #12]	; (800fcb8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fcaa:	f016 fc8f 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_40_4bpp;
 800fcae:	4b06      	ldr	r3, [pc, #24]	; (800fcc8 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	20008dc0 	.word	0x20008dc0
 800fcbc:	0802f630 	.word	0x0802f630
 800fcc0:	080281a0 	.word	0x080281a0
 800fcc4:	0802fa68 	.word	0x0802fa68
 800fcc8:	20008d9c 	.word	0x20008d9c
 800fccc:	0800fc29 	.word	0x0800fc29

0800fcd0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	4801      	ldr	r0, [pc, #4]	; (800fcdc <__tcf_0+0xc>)
 800fcd6:	f7ff fcd7 	bl	800f688 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	20008dc4 	.word	0x20008dc4

0800fce0 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b08a      	sub	sp, #40	; 0x28
 800fce4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fce6:	4b1e      	ldr	r3, [pc, #120]	; (800fd60 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f3bf 8f5b 	dmb	ish
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	bf0c      	ite	eq
 800fcf6:	2301      	moveq	r3, #1
 800fcf8:	2300      	movne	r3, #0
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d02a      	beq.n	800fd56 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fd00:	4817      	ldr	r0, [pc, #92]	; (800fd60 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fd02:	f016 fc57 	bl	80265b4 <__cxa_guard_acquire>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	bf14      	ite	ne
 800fd0c:	2301      	movne	r3, #1
 800fd0e:	2300      	moveq	r3, #0
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d01f      	beq.n	800fd56 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fd16:	2300      	movs	r3, #0
 800fd18:	9309      	str	r3, [sp, #36]	; 0x24
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	9308      	str	r3, [sp, #32]
 800fd1e:	233f      	movs	r3, #63	; 0x3f
 800fd20:	9307      	str	r3, [sp, #28]
 800fd22:	4b10      	ldr	r3, [pc, #64]	; (800fd64 <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 800fd24:	9306      	str	r3, [sp, #24]
 800fd26:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 800fd28:	9305      	str	r3, [sp, #20]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	9304      	str	r3, [sp, #16]
 800fd2e:	2300      	movs	r3, #0
 800fd30:	9303      	str	r3, [sp, #12]
 800fd32:	2301      	movs	r3, #1
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	2304      	movs	r3, #4
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	233c      	movs	r3, #60	; 0x3c
 800fd40:	220d      	movs	r2, #13
 800fd42:	490a      	ldr	r1, [pc, #40]	; (800fd6c <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 800fd44:	480a      	ldr	r0, [pc, #40]	; (800fd70 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 800fd46:	f7ff fd43 	bl	800f7d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fd4a:	480a      	ldr	r0, [pc, #40]	; (800fd74 <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 800fd4c:	f016 fc7c 	bl	8026648 <atexit>
 800fd50:	4803      	ldr	r0, [pc, #12]	; (800fd60 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fd52:	f016 fc3b 	bl	80265cc <__cxa_guard_release>
    return Asap_Bold_60_4bpp;
 800fd56:	4b06      	ldr	r3, [pc, #24]	; (800fd70 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20008de8 	.word	0x20008de8
 800fd64:	0802f634 	.word	0x0802f634
 800fd68:	080281a4 	.word	0x080281a4
 800fd6c:	0802fb20 	.word	0x0802fb20
 800fd70:	20008dc4 	.word	0x20008dc4
 800fd74:	0800fcd1 	.word	0x0800fcd1

0800fd78 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	4618      	mov	r0, r3
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
    {
    }
 800fd9a:	bf00      	nop
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr

0800fda6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fda6:	b480      	push	{r7}
 800fda8:	b083      	sub	sp, #12
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	6039      	str	r1, [r7, #0]
    {
    }
 800fdb0:	bf00      	nop
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
    {
    }
 800fdc6:	bf00      	nop
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr

0800fdd2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fdd2:	b480      	push	{r7}
 800fdd4:	b083      	sub	sp, #12
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	460b      	mov	r3, r1
 800fddc:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fdde:	bf00      	nop
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
    {
    }
 800fdf2:	bf00      	nop
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800fdfe:	b480      	push	{r7}
 800fe00:	b083      	sub	sp, #12
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
    {
    }
 800fe06:	bf00      	nop
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
	...

0800fe14 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
    {
 800fe1c:	4a04      	ldr	r2, [pc, #16]	; (800fe30 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	601a      	str	r2, [r3, #0]
    }
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4618      	mov	r0, r3
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	08028298 	.word	0x08028298

0800fe34 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
    }
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff ffe9 	bl	800fe14 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fe42:	2104      	movs	r1, #4
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f016 fbb3 	bl	80265b0 <_ZdlPvj>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800fe5c:	4a07      	ldr	r2, [pc, #28]	; (800fe7c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	601a      	str	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2200      	movs	r2, #0
 800fe66:	605a      	str	r2, [r3, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	721a      	strb	r2, [r3, #8]
    {
    }
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4618      	mov	r0, r3
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	08028278 	.word	0x08028278

0800fe80 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
    {
 800fe88:	4a04      	ldr	r2, [pc, #16]	; (800fe9c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	601a      	str	r2, [r3, #0]
    }
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	08028278 	.word	0x08028278

0800fea0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
    }
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff ffe9 	bl	800fe80 <_ZN8touchgfx10TransitionD1Ev>
 800feae:	210c      	movs	r1, #12
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f016 fb7d 	bl	80265b0 <_ZdlPvj>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	bf00      	nop
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr

0800fee8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	605a      	str	r2, [r3, #4]
    }
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	460b      	mov	r3, r1
 800ff22:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
    {
 800ff38:	4a04      	ldr	r2, [pc, #16]	; (800ff4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	601a      	str	r2, [r3, #0]
    }
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4618      	mov	r0, r3
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	08028260 	.word	0x08028260

0800ff50 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    }
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ffe9 	bl	800ff30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ff5e:	2104      	movs	r1, #4
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f016 fb25 	bl	80265b0 <_ZdlPvj>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ff70:	b480      	push	{r7}
 800ff72:	af00      	add	r7, sp, #0
    {
        return instance;
 800ff74:	4b03      	ldr	r3, [pc, #12]	; (800ff84 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ff76:	681b      	ldr	r3, [r3, #0]
    }
 800ff78:	4618      	mov	r0, r3
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	2000c63c 	.word	0x2000c63c

0800ff88 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ff88:	b480      	push	{r7}
 800ff8a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ff8c:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d008      	beq.n	800ffaa <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ff98:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d003      	beq.n	800ffaa <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ffa2:	4b06      	ldr	r3, [pc, #24]	; (800ffbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffa8:	e002      	b.n	800ffb0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800ffaa:	4b04      	ldr	r3, [pc, #16]	; (800ffbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	689b      	ldr	r3, [r3, #8]
        }
    }
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	2000c63c 	.word	0x2000c63c

0800ffc0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	4a05      	ldr	r2, [pc, #20]	; (800ffe0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff ff1f 	bl	800fe14 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	0802a06c 	.word	0x0802a06c

0800ffe4 <_ZN8touchgfx11ApplicationD0Ev>:
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff ffe7 	bl	800ffc0 <_ZN8touchgfx11ApplicationD1Ev>
 800fff2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f016 fada 	bl	80265b0 <_ZdlPvj>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	f00a fb28 	bl	801a668 <_ZN8touchgfx11ApplicationC1Ev>
 8010018:	4a09      	ldr	r2, [pc, #36]	; (8010040 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	601a      	str	r2, [r3, #0]
        currentPresenter(0),
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        pendingScreenTransitionCallback(0)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4a04      	ldr	r2, [pc, #16]	; (8010044 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010032:	6013      	str	r3, [r2, #0]
    }
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	08028224 	.word	0x08028224
 8010044:	2000c6c8 	.word	0x2000c6c8

08010048 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	4a05      	ldr	r2, [pc, #20]	; (8010068 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4618      	mov	r0, r3
 801005a:	f7ff ffb1 	bl	800ffc0 <_ZN8touchgfx11ApplicationD1Ev>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4618      	mov	r0, r3
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	08028224 	.word	0x08028224

0801006c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff ffe7 	bl	8010048 <_ZN8touchgfx14MVPApplicationD1Ev>
 801007a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f016 fa96 	bl	80265b0 <_ZdlPvj>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4618      	mov	r0, r3
 8010088:	3708      	adds	r7, #8
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}

0801008e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 801008e:	b580      	push	{r7, lr}
 8010090:	b082      	sub	sp, #8
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f804 	bl	80100a4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801009c:	bf00      	nop
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00f      	beq.n	80100d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	330c      	adds	r3, #12
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4610      	mov	r0, r2
 80100ca:	4798      	blx	r3
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80100d2:	2301      	movs	r3, #1
 80100d4:	e000      	b.n	80100d8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80100d6:	2300      	movs	r3, #0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00e      	beq.n	80100fa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3308      	adds	r3, #8
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4610      	mov	r0, r2
 80100f0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 80100fa:	bf00      	nop
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	60f8      	str	r0, [r7, #12]
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 801010e:	f00a fa89 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 8010112:	4603      	mov	r3, r0
 8010114:	4618      	mov	r0, r3
 8010116:	f00a fa8b 	bl	801a630 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d008      	beq.n	8010134 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	330c      	adds	r3, #12
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4610      	mov	r0, r2
 8010132:	4798      	blx	r3
    }
    if (*currentTrans)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d007      	beq.n	801014c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4610      	mov	r0, r2
 801014a:	4798      	blx	r3
    }
    if (*currentScreen)
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d008      	beq.n	8010166 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	3314      	adds	r3, #20
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4610      	mov	r0, r2
 8010164:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d008      	beq.n	8010180 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3304      	adds	r3, #4
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4610      	mov	r0, r2
 801017e:	4798      	blx	r3
    }
    if (*currentScreen)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d007      	beq.n	8010198 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4610      	mov	r0, r2
 8010196:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d008      	beq.n	80101b2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3308      	adds	r3, #8
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4610      	mov	r0, r2
 80101b0:	4798      	blx	r3
    }
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b084      	sub	sp, #16
 80101be:	af00      	add	r7, sp, #0
 80101c0:	60f8      	str	r0, [r7, #12]
 80101c2:	60b9      	str	r1, [r7, #8]
 80101c4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	330c      	adds	r3, #12
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	68f8      	ldr	r0, [r7, #12]
 80101d0:	4798      	blx	r3
    newPresenter->activate();
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68b8      	ldr	r0, [r7, #8]
 80101da:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80101dc:	6879      	ldr	r1, [r7, #4]
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f00b fb30 	bl	801b844 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3310      	adds	r3, #16
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	4798      	blx	r3

    Application::getInstance()->draw();
 80101f0:	f00a fa18 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 80101f4:	4603      	mov	r3, r0
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	3228      	adds	r2, #40	; 0x28
 80101fa:	6812      	ldr	r2, [r2, #0]
 80101fc:	4618      	mov	r0, r3
 80101fe:	4790      	blx	r2
}
 8010200:	bf00      	nop
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	683a      	ldr	r2, [r7, #0]
 8010216:	601a      	str	r2, [r3, #0]
    }
 8010218:	bf00      	nop
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	4a08      	ldr	r2, [pc, #32]	; (8010250 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	601a      	str	r2, [r3, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010238:	4618      	mov	r0, r3
 801023a:	f000 fa4d 	bl	80106d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff ff01 	bl	8010048 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	080281d0 	.word	0x080281d0

08010254 <_ZN23FrontendApplicationBaseD0Ev>:
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7ff ffe1 	bl	8010224 <_ZN23FrontendApplicationBaseD1Ev>
 8010262:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f016 f9a2 	bl	80265b0 <_ZdlPvj>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4618      	mov	r0, r3
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff fde6 	bl	800fe54 <_ZN8touchgfx10TransitionC1Ev>
 8010288:	4a03      	ldr	r2, [pc, #12]	; (8010298 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4618      	mov	r0, r3
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	080281b0 	.word	0x080281b0

0801029c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	4a05      	ldr	r2, [pc, #20]	; (80102bc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fde7 	bl	800fe80 <_ZN8touchgfx10TransitionD1Ev>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	080281b0 	.word	0x080281b0

080102c0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff ffe7 	bl	801029c <_ZN8touchgfx12NoTransitionD1Ev>
 80102ce:	210c      	movs	r1, #12
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f016 f96d 	bl	80265b0 <_ZdlPvj>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2201      	movs	r2, #1
 80102ec:	721a      	strb	r2, [r3, #8]
    }
 80102ee:	bf00      	nop
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr

080102fa <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 80102fa:	b480      	push	{r7}
 80102fc:	b083      	sub	sp, #12
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	605a      	str	r2, [r3, #4]
    }
 801030a:	bf00      	nop
 801030c:	370c      	adds	r7, #12
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
	...

08010318 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff fe6e 	bl	8010008 <_ZN8touchgfx14MVPApplicationC1Ev>
 801032c:	4a13      	ldr	r2, [pc, #76]	; (801037c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010338:	4618      	mov	r0, r3
 801033a:	f000 f89f 	bl	801047c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      model(m)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	68ba      	ldr	r2, [r7, #8]
 801034a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801034e:	f7ff fe0f 	bl	800ff70 <_ZN8touchgfx3HAL11getInstanceEv>
 8010352:	4603      	mov	r3, r0
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	3208      	adds	r2, #8
 8010358:	6812      	ldr	r2, [r2, #0]
 801035a:	2100      	movs	r1, #0
 801035c:	4618      	mov	r0, r3
 801035e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010360:	2000      	movs	r0, #0
 8010362:	f003 fd59 	bl	8013e18 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010366:	f7ff fe0f 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 801036a:	4603      	mov	r3, r0
 801036c:	4618      	mov	r0, r3
 801036e:	f00f fe30 	bl	801ffd2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	080281d0 	.word	0x080281d0

08010380 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	683a      	ldr	r2, [r7, #0]
 80103a6:	4611      	mov	r1, r2
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff ffe9 	bl	8010380 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	685a      	ldr	r2, [r3, #4]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	605a      	str	r2, [r3, #4]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	683a      	ldr	r2, [r7, #0]
 80103ba:	3308      	adds	r3, #8
 80103bc:	3208      	adds	r2, #8
 80103be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4618      	mov	r0, r3
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80103d0:	b590      	push	{r4, r7, lr}
 80103d2:	b089      	sub	sp, #36	; 0x24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80103de:	4b10      	ldr	r3, [pc, #64]	; (8010420 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 80103e0:	61bb      	str	r3, [r7, #24]
 80103e2:	2300      	movs	r3, #0
 80103e4:	61fb      	str	r3, [r7, #28]
 80103e6:	f107 0008 	add.w	r0, r7, #8
 80103ea:	f107 0318 	add.w	r3, r7, #24
 80103ee:	cb0c      	ldmia	r3, {r2, r3}
 80103f0:	6879      	ldr	r1, [r7, #4]
 80103f2:	f000 f85f 	bl	80104b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80103f6:	f107 0308 	add.w	r3, r7, #8
 80103fa:	4619      	mov	r1, r3
 80103fc:	4620      	mov	r0, r4
 80103fe:	f7ff ffcb 	bl	8010398 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010402:	f107 0308 	add.w	r3, r7, #8
 8010406:	4618      	mov	r0, r3
 8010408:	f000 f966 	bl	80106d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010418:	bf00      	nop
 801041a:	3724      	adds	r7, #36	; 0x24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd90      	pop	{r4, r7, pc}
 8010420:	08010425 	.word	0x08010425

08010424 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af02      	add	r7, sp, #8
 801042a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010438:	461a      	mov	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	4b04      	ldr	r3, [pc, #16]	; (8010454 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010444:	4804      	ldr	r0, [pc, #16]	; (8010458 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010446:	f000 f855 	bl	80104f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801044a:	bf00      	nop
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	2000c6bc 	.word	0x2000c6bc
 8010458:	2000c6b8 	.word	0x2000c6b8

0801045c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	4a04      	ldr	r2, [pc, #16]	; (8010478 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4618      	mov	r0, r3
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	08028260 	.word	0x08028260

0801047c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff ffe8 	bl	801045c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801048c:	4a08      	ldr	r2, [pc, #32]	; (80104b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	605a      	str	r2, [r3, #4]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	609a      	str	r2, [r3, #8]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2200      	movs	r2, #0
 80104a2:	60da      	str	r2, [r3, #12]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4618      	mov	r0, r3
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	0802820c 	.word	0x0802820c

080104b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	4639      	mov	r1, r7
 80104c0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff ffc8 	bl	801045c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80104cc:	4a08      	ldr	r2, [pc, #32]	; (80104f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	68ba      	ldr	r2, [r7, #8]
 80104d6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	3308      	adds	r3, #8
 80104dc:	463a      	mov	r2, r7
 80104de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	4618      	mov	r0, r3
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	0802820c 	.word	0x0802820c

080104f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b089      	sub	sp, #36	; 0x24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	689a      	ldr	r2, [r3, #8]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3320      	adds	r3, #32
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4610      	mov	r0, r2
 8010512:	4798      	blx	r3
 8010514:	4603      	mov	r3, r0
 8010516:	f642 02b3 	movw	r2, #10419	; 0x28b3
 801051a:	4293      	cmp	r3, r2
 801051c:	d805      	bhi.n	801052a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801051e:	4b45      	ldr	r3, [pc, #276]	; (8010634 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8010520:	4a45      	ldr	r2, [pc, #276]	; (8010638 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010522:	21c2      	movs	r1, #194	; 0xc2
 8010524:	4845      	ldr	r0, [pc, #276]	; (801063c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8010526:	f016 f871 	bl	802660c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	3320      	adds	r3, #32
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4610      	mov	r0, r2
 801053a:	4798      	blx	r3
 801053c:	4603      	mov	r3, r0
 801053e:	2b0f      	cmp	r3, #15
 8010540:	d805      	bhi.n	801054e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010542:	4b3f      	ldr	r3, [pc, #252]	; (8010640 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8010544:	4a3c      	ldr	r2, [pc, #240]	; (8010638 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010546:	21c3      	movs	r1, #195	; 0xc3
 8010548:	483c      	ldr	r0, [pc, #240]	; (801063c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801054a:	f016 f85f 	bl	802660c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68da      	ldr	r2, [r3, #12]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	3320      	adds	r3, #32
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4610      	mov	r0, r2
 801055e:	4798      	blx	r3
 8010560:	4603      	mov	r3, r0
 8010562:	2b0b      	cmp	r3, #11
 8010564:	d805      	bhi.n	8010572 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8010566:	4b37      	ldr	r3, [pc, #220]	; (8010644 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8010568:	4a33      	ldr	r2, [pc, #204]	; (8010638 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801056a:	21c4      	movs	r1, #196	; 0xc4
 801056c:	4833      	ldr	r0, [pc, #204]	; (801063c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801056e:	f016 f84d 	bl	802660c <__assert_func>

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	68b9      	ldr	r1, [r7, #8]
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f7ff fdc3 	bl	8010102 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	2100      	movs	r1, #0
 8010582:	4618      	mov	r0, r3
 8010584:	f000 f860 	bl	8010648 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010588:	4603      	mov	r3, r0
 801058a:	4619      	mov	r1, r3
 801058c:	200c      	movs	r0, #12
 801058e:	f7ff fbf3 	bl	800fd78 <_ZnwjPv>
 8010592:	4604      	mov	r4, r0
 8010594:	4620      	mov	r0, r4
 8010596:	f7ff fe6f 	bl	8010278 <_ZN8touchgfx12NoTransitionC1Ev>
 801059a:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	2100      	movs	r1, #0
 80105a2:	4618      	mov	r0, r3
 80105a4:	f000 f863 	bl	801066e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80105a8:	4603      	mov	r3, r0
 80105aa:	4619      	mov	r1, r3
 80105ac:	f642 00b4 	movw	r0, #10420	; 0x28b4
 80105b0:	f7ff fbe2 	bl	800fd78 <_ZnwjPv>
 80105b4:	4604      	mov	r4, r0
 80105b6:	4620      	mov	r0, r4
 80105b8:	f003 feb6 	bl	8014328 <_ZN8MainViewC1Ev>
 80105bc:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	2100      	movs	r1, #0
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 f865 	bl	8010694 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80105ca:	4603      	mov	r3, r0
 80105cc:	4619      	mov	r1, r3
 80105ce:	2010      	movs	r0, #16
 80105d0:	f7ff fbd2 	bl	800fd78 <_ZnwjPv>
 80105d4:	4604      	mov	r4, r0
 80105d6:	69b9      	ldr	r1, [r7, #24]
 80105d8:	4620      	mov	r0, r4
 80105da:	f003 fdeb 	bl	80141b4 <_ZN13MainPresenterC1ER8MainView>
 80105de:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	69fa      	ldr	r2, [r7, #28]
 80105e4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	697a      	ldr	r2, [r7, #20]
 80105ea:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	69ba      	ldr	r2, [r7, #24]
 80105f0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	3304      	adds	r3, #4
 80105fc:	e000      	b.n	8010600 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80105fe:	2300      	movs	r3, #0
 8010600:	4619      	mov	r1, r3
 8010602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010604:	f7ff fe00 	bl	8010208 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	3304      	adds	r3, #4
 801060c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801060e:	4618      	mov	r0, r3
 8010610:	f7ff fe73 	bl	80102fa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	6979      	ldr	r1, [r7, #20]
 8010618:	4618      	mov	r0, r3
 801061a:	f000 f84e 	bl	80106ba <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801061e:	69fa      	ldr	r2, [r7, #28]
 8010620:	6979      	ldr	r1, [r7, #20]
 8010622:	69b8      	ldr	r0, [r7, #24]
 8010624:	f7ff fdc9 	bl	80101ba <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8010628:	697b      	ldr	r3, [r7, #20]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3724      	adds	r7, #36	; 0x24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd90      	pop	{r4, r7, pc}
 8010632:	bf00      	nop
 8010634:	080277e8 	.word	0x080277e8
 8010638:	08027878 	.word	0x08027878
 801063c:	08027978 	.word	0x08027978
 8010640:	080279bc 	.word	0x080279bc
 8010644:	08027a60 	.word	0x08027a60

08010648 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	460b      	mov	r3, r1
 8010652:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3324      	adds	r3, #36	; 0x24
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	887a      	ldrh	r2, [r7, #2]
 801065e:	4611      	mov	r1, r2
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	4798      	blx	r3
 8010664:	4603      	mov	r3, r0
    }
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3324      	adds	r3, #36	; 0x24
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	887a      	ldrh	r2, [r7, #2]
 8010684:	4611      	mov	r1, r2
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	4798      	blx	r3
 801068a:	4603      	mov	r3, r0
    }
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	3324      	adds	r3, #36	; 0x24
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	887a      	ldrh	r2, [r7, #2]
 80106aa:	4611      	mov	r1, r2
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	4798      	blx	r3
 80106b0:	4603      	mov	r3, r0
    }
 80106b2:	4618      	mov	r0, r3
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}

080106ba <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80106ba:	b480      	push	{r7}
 80106bc:	b083      	sub	sp, #12
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
 80106c2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80106ca:	bf00      	nop
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
	...

080106d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	4a05      	ldr	r2, [pc, #20]	; (80106f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	601a      	str	r2, [r3, #0]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff fc21 	bl	800ff30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	0802820c 	.word	0x0802820c

080106fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff ffe7 	bl	80106d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801070a:	2110      	movs	r1, #16
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f015 ff4f 	bl	80265b0 <_ZdlPvj>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	68d2      	ldr	r2, [r2, #12]
 801072c:	1052      	asrs	r2, r2, #1
 801072e:	1899      	adds	r1, r3, r2
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	2b00      	cmp	r3, #0
 801073a:	d102      	bne.n	8010742 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	e00a      	b.n	8010758 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	68d2      	ldr	r2, [r2, #12]
 801074a:	1052      	asrs	r2, r2, #1
 801074c:	4413      	add	r3, r2
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	6892      	ldr	r2, [r2, #8]
 8010754:	4413      	add	r3, r2
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4608      	mov	r0, r1
 801075a:	4798      	blx	r3
    }
 801075c:	bf00      	nop
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d010      	beq.n	8010796 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d107      	bne.n	801078c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	f003 0301 	and.w	r3, r3, #1
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010788:	2301      	movs	r3, #1
 801078a:	e000      	b.n	801078e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801078c:	2300      	movs	r3, #0
 801078e:	2b01      	cmp	r3, #1
 8010790:	d001      	beq.n	8010796 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010792:	2301      	movs	r3, #1
 8010794:	e000      	b.n	8010798 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8010796:	2300      	movs	r3, #0
    }
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	683a      	ldr	r2, [r7, #0]
 80107b2:	601a      	str	r2, [r3, #0]
    }
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4618      	mov	r0, r3
 80107b8:	370c      	adds	r7, #12
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80107c2:	b480      	push	{r7}
 80107c4:	b083      	sub	sp, #12
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	80da      	strh	r2, [r3, #6]
    }
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	60f8      	str	r0, [r7, #12]
 80107f8:	4608      	mov	r0, r1
 80107fa:	4611      	mov	r1, r2
 80107fc:	461a      	mov	r2, r3
 80107fe:	4603      	mov	r3, r0
 8010800:	817b      	strh	r3, [r7, #10]
 8010802:	460b      	mov	r3, r1
 8010804:	813b      	strh	r3, [r7, #8]
 8010806:	4613      	mov	r3, r2
 8010808:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	897a      	ldrh	r2, [r7, #10]
 801080e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	893a      	ldrh	r2, [r7, #8]
 8010814:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	88fa      	ldrh	r2, [r7, #6]
 801081a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	8b3a      	ldrh	r2, [r7, #24]
 8010820:	80da      	strh	r2, [r3, #6]
    }
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	4618      	mov	r0, r3
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	460b      	mov	r3, r1
 801083a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	887a      	ldrh	r2, [r7, #2]
 8010840:	801a      	strh	r2, [r3, #0]
    {
    }
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4618      	mov	r0, r3
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af02      	add	r7, sp, #8
 8010856:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8010858:	4a13      	ldr	r2, [pc, #76]	; (80108a8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	601a      	str	r2, [r3, #0]
    Drawable() : rect(0, 0, 0, 0),
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	1d18      	adds	r0, r3, #4
 8010862:	2300      	movs	r3, #0
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	2300      	movs	r3, #0
 8010868:	2200      	movs	r2, #0
 801086a:	2100      	movs	r1, #0
 801086c:	f7ff ffc0 	bl	80107f0 <_ZN8touchgfx4RectC1Essss>
        visible(true)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	330c      	adds	r3, #12
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff ffa4 	bl	80107c2 <_ZN8touchgfx4RectC1Ev>
        parent(0),
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2200      	movs	r2, #0
 801087e:	615a      	str	r2, [r3, #20]
        nextSibling(0),
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	619a      	str	r2, [r3, #24]
        nextDrawChainElement(0),
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	61da      	str	r2, [r3, #28]
        touchable(false),
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        visible(true)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	4618      	mov	r0, r3
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	0802a1a4 	.word	0x0802a1a4

080108ac <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	4a04      	ldr	r2, [pc, #16]	; (80108c8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	601a      	str	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	0802a1a4 	.word	0x0802a1a4

080108cc <_ZN8touchgfx8DrawableD0Ev>:
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7ff ffe9 	bl	80108ac <_ZN8touchgfx8DrawableD1Ev>
 80108da:	2128      	movs	r1, #40	; 0x28
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f015 fe67 	bl	80265b0 <_ZdlPvj>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4618      	mov	r0, r3
 80108e6:	3708      	adds	r7, #8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	4608      	mov	r0, r1
 80108f6:	4611      	mov	r1, r2
 80108f8:	461a      	mov	r2, r3
 80108fa:	4603      	mov	r3, r0
 80108fc:	817b      	strh	r3, [r7, #10]
 80108fe:	460b      	mov	r3, r1
 8010900:	813b      	strh	r3, [r7, #8]
 8010902:	4613      	mov	r3, r2
 8010904:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3334      	adds	r3, #52	; 0x34
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010912:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	4798      	blx	r3
        setWidth(width);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	3338      	adds	r3, #56	; 0x38
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010926:	4611      	mov	r1, r2
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	4798      	blx	r3
        setHeight(height);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	333c      	adds	r3, #60	; 0x3c
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010938:	4611      	mov	r1, r2
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	4798      	blx	r3
    }
 801093e:	bf00      	nop
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8010946:	b480      	push	{r7}
 8010948:	b083      	sub	sp, #12
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	460b      	mov	r3, r1
 8010950:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	887a      	ldrh	r2, [r7, #2]
 8010956:	809a      	strh	r2, [r3, #4]
    }
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	460b      	mov	r3, r1
 801096e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	887a      	ldrh	r2, [r7, #2]
 8010974:	80da      	strh	r2, [r3, #6]
    }
 8010976:	bf00      	nop
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr

08010982 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010982:	b580      	push	{r7, lr}
 8010984:	b082      	sub	sp, #8
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
 801098a:	460b      	mov	r3, r1
 801098c:	807b      	strh	r3, [r7, #2]
 801098e:	4613      	mov	r3, r2
 8010990:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	332c      	adds	r3, #44	; 0x2c
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801099e:	4611      	mov	r1, r2
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	4798      	blx	r3
        setY(y);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3330      	adds	r3, #48	; 0x30
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80109b0:	4611      	mov	r1, r2
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	4798      	blx	r3
    }
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80109be:	b480      	push	{r7}
 80109c0:	b083      	sub	sp, #12
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
 80109c6:	460b      	mov	r3, r1
 80109c8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	887a      	ldrh	r2, [r7, #2]
 80109ce:	811a      	strh	r2, [r3, #8]
    }
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	887a      	ldrh	r2, [r7, #2]
 80109ec:	815a      	strh	r2, [r3, #10]
    }
 80109ee:	bf00      	nop
 80109f0:	370c      	adds	r7, #12
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80109fa:	b480      	push	{r7}
 80109fc:	b083      	sub	sp, #12
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	bf00      	nop
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010a0e:	b480      	push	{r7}
 8010a10:	b083      	sub	sp, #12
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	6039      	str	r1, [r7, #0]
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
 8010a2e:	bf00      	nop
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	6039      	str	r1, [r7, #0]
 8010a44:	bf00      	nop
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	bf00      	nop
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	78fa      	ldrb	r2, [r7, #3]
 8010a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010a92:	4618      	mov	r0, r3
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010a9e:	b480      	push	{r7}
 8010aa0:	b083      	sub	sp, #12
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010aac:	4618      	mov	r0, r3
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	807b      	strh	r3, [r7, #2]
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	3354      	adds	r3, #84	; 0x54
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	8879      	ldrh	r1, [r7, #2]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010ad8:	b292      	uxth	r2, r2
 8010ada:	1a8a      	subs	r2, r1, r2
 8010adc:	b292      	uxth	r2, r2
 8010ade:	b210      	sxth	r0, r2
 8010ae0:	8839      	ldrh	r1, [r7, #0]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010ae8:	b292      	uxth	r2, r2
 8010aea:	1a8a      	subs	r2, r1, r2
 8010aec:	b292      	uxth	r2, r2
 8010aee:	b212      	sxth	r2, r2
 8010af0:	4601      	mov	r1, r0
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	4798      	blx	r3
    }
 8010af6:	bf00      	nop
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b0c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b14:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b1c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010b1e:	bf00      	nop
 8010b20:	370c      	adds	r7, #12
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff ffe1 	bl	8010afe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681a      	ldr	r2, [r3, #0]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	601a      	str	r2, [r3, #0]
    }
 8010b4a:	bf00      	nop
 8010b4c:	3710      	adds	r7, #16
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
	...

08010b54 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	4a05      	ldr	r2, [pc, #20]	; (8010b74 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	601a      	str	r2, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7ff fea1 	bl	80108ac <_ZN8touchgfx8DrawableD1Ev>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3708      	adds	r7, #8
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	08028f70 	.word	0x08028f70

08010b78 <_ZN8touchgfx9ContainerD0Ev>:
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff ffe7 	bl	8010b54 <_ZN8touchgfx9ContainerD1Ev>
 8010b86:	212c      	movs	r1, #44	; 0x2c
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f015 fd11 	bl	80265b0 <_ZdlPvj>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	4a06      	ldr	r2, [pc, #24]	; (8010bbc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	3304      	adds	r3, #4
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7ff ffd2 	bl	8010b54 <_ZN8touchgfx9ContainerD1Ev>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3708      	adds	r7, #8
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	0802a29c 	.word	0x0802a29c

08010bc0 <_ZN8touchgfx6ScreenD0Ev>:
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7ff ffe5 	bl	8010b98 <_ZN8touchgfx6ScreenD1Ev>
 8010bce:	213c      	movs	r1, #60	; 0x3c
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f015 fced 	bl	80265b0 <_ZdlPvj>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	bf00      	nop
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	bf00      	nop
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	bf00      	nop
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010c1c:	b480      	push	{r7}
 8010c1e:	b083      	sub	sp, #12
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
    {
    }
 8010c24:	bf00      	nop
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	460b      	mov	r3, r1
 8010c3a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3304      	adds	r3, #4
 8010c56:	6839      	ldr	r1, [r7, #0]
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f006 fb47 	bl	80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010c5e:	bf00      	nop
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
	...

08010c68 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff fdec 	bl	8010850 <_ZN8touchgfx8DrawableC1Ev>
 8010c78:	4a03      	ldr	r2, [pc, #12]	; (8010c88 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	601a      	str	r2, [r3, #0]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4618      	mov	r0, r3
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	080283a4 	.word	0x080283a4

08010c8c <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	4a05      	ldr	r2, [pc, #20]	; (8010cac <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7ff fe05 	bl	80108ac <_ZN8touchgfx8DrawableD1Ev>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	080283a4 	.word	0x080283a4

08010cb0 <_ZN8touchgfx6WidgetD0Ev>:
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ff ffe7 	bl	8010c8c <_ZN8touchgfx6WidgetD1Ev>
 8010cbe:	2128      	movs	r1, #40	; 0x28
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f015 fc75 	bl	80265b0 <_ZdlPvj>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	607b      	str	r3, [r7, #4]
 8010cda:	460b      	mov	r3, r1
 8010cdc:	817b      	strh	r3, [r7, #10]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ff fecd 	bl	8010a84 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d008      	beq.n	8010d02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff fed3 	bl	8010a9e <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e000      	b.n	8010d04 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010d02:	2300      	movs	r3, #0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	601a      	str	r2, [r3, #0]
        }
    }
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
	...

08010d18 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff ffa0 	bl	8010c68 <_ZN8touchgfx6WidgetC1Ev>
 8010d28:	4a0a      	ldr	r2, [pc, #40]	; (8010d54 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	601a      	str	r2, [r3, #0]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	22ff      	movs	r2, #255	; 0xff
 8010d32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3328      	adds	r3, #40	; 0x28
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff fd31 	bl	80107a4 <_ZN8touchgfx9colortypeC1Em>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2200      	movs	r2, #0
 8010d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	08029ca8 	.word	0x08029ca8

08010d58 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	4a05      	ldr	r2, [pc, #20]	; (8010d78 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	601a      	str	r2, [r3, #0]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7ff ff8f 	bl	8010c8c <_ZN8touchgfx6WidgetD1Ev>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	08029ca8 	.word	0x08029ca8

08010d7c <_ZN8touchgfx3BoxD0Ev>:
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff ffe7 	bl	8010d58 <_ZN8touchgfx3BoxD1Ev>
 8010d8a:	2130      	movs	r1, #48	; 0x30
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f015 fc0f 	bl	80265b0 <_ZdlPvj>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	683a      	ldr	r2, [r7, #0]
 8010daa:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010dac:	bf00      	nop
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	807b      	strh	r3, [r7, #2]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	887a      	ldrh	r2, [r7, #2]
 8010dc8:	801a      	strh	r2, [r3, #0]
    }
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	370c      	adds	r7, #12
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr

08010dd8 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
        assertValid();
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7fe fca7 	bl	800f734 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8010de6:	4b06      	ldr	r3, [pc, #24]	; (8010e00 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	881b      	ldrh	r3, [r3, #0]
 8010dee:	4619      	mov	r1, r3
 8010df0:	4610      	mov	r0, r2
 8010df2:	f003 f867 	bl	8013ec4 <_ZNK8touchgfx5Texts7getTextEt>
 8010df6:	4603      	mov	r3, r0
    }
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	2000c6d8 	.word	0x2000c6d8

08010e04 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7ff ff2a 	bl	8010c68 <_ZN8touchgfx6WidgetC1Ev>
 8010e14:	4a13      	ldr	r2, [pc, #76]	; (8010e64 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	601a      	str	r2, [r3, #0]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	3326      	adds	r3, #38	; 0x26
 8010e1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff ffc8 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3328      	adds	r3, #40	; 0x28
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7ff fcb8 	bl	80107a4 <_ZN8touchgfx9colortypeC1Em>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	859a      	strh	r2, [r3, #44]	; 0x2c
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	22ff      	movs	r2, #255	; 0xff
 8010e3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	08029c2c 	.word	0x08029c2c

08010e68 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af02      	add	r7, sp, #8
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010e72:	2300      	movs	r3, #0
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	2300      	movs	r3, #0
 8010e78:	2200      	movs	r2, #0
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff fcb7 	bl	80107f0 <_ZN8touchgfx4RectC1Essss>
    }
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8010e8a:	b480      	push	{r7}
 8010e8c:	b083      	sub	sp, #12
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010e9a:	bf00      	nop
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8010ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ea8:	b085      	sub	sp, #20
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	460b      	mov	r3, r1
 8010eb0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010eb2:	687e      	ldr	r6, [r7, #4]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	3330      	adds	r3, #48	; 0x30
 8010eba:	681c      	ldr	r4, [r3, #0]
 8010ebc:	887d      	ldrh	r5, [r7, #2]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f845 	bl	8010f4e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	81bb      	strh	r3, [r7, #12]
 8010ec8:	f107 030c 	add.w	r3, r7, #12
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fbfd 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	322c      	adds	r2, #44	; 0x2c
 8010ed8:	6812      	ldr	r2, [r2, #0]
 8010eda:	4618      	mov	r0, r3
 8010edc:	4790      	blx	r2
 8010ede:	4603      	mov	r3, r0
 8010ee0:	1aeb      	subs	r3, r5, r3
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	b21b      	sxth	r3, r3
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4630      	mov	r0, r6
 8010eea:	47a0      	blx	r4
    }
 8010eec:	bf00      	nop
 8010eee:	3714      	adds	r7, #20
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ef4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	460b      	mov	r3, r1
 8010efe:	807b      	strh	r3, [r7, #2]
 8010f00:	4613      	mov	r3, r2
 8010f02:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	332c      	adds	r3, #44	; 0x2c
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010f12:	4610      	mov	r0, r2
 8010f14:	4798      	blx	r3
        setBaselineY(baselineY);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	3360      	adds	r3, #96	; 0x60
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010f22:	4611      	mov	r1, r2
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	4798      	blx	r3
    }
 8010f28:	bf00      	nop
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	887a      	ldrh	r2, [r7, #2]
 8010f40:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010f42:	bf00      	nop
 8010f44:	370c      	adds	r7, #12
 8010f46:	46bd      	mov	sp, r7
 8010f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4c:	4770      	bx	lr

08010f4e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010f4e:	b480      	push	{r7}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	370c      	adds	r7, #12
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr
	...

08010f68 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	4a05      	ldr	r2, [pc, #20]	; (8010f88 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	601a      	str	r2, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7ff fe87 	bl	8010c8c <_ZN8touchgfx6WidgetD1Ev>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	08029c2c 	.word	0x08029c2c

08010f8c <_ZN8touchgfx8TextAreaD0Ev>:
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff ffe7 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8010f9a:	2134      	movs	r1, #52	; 0x34
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f015 fb07 	bl	80265b0 <_ZdlPvj>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff ff24 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 8010fbc:	4a03      	ldr	r2, [pc, #12]	; (8010fcc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	601a      	str	r2, [r3, #0]
    {
    }
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	08028328 	.word	0x08028328

08010fd0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	4a05      	ldr	r2, [pc, #20]	; (8010ff0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff ffc1 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	08028328 	.word	0x08028328

08010ff4 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ffe7 	bl	8010fd0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8011002:	2134      	movs	r1, #52	; 0x34
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f015 fad3 	bl	80265b0 <_ZdlPvj>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4618      	mov	r0, r3
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4618      	mov	r0, r3
 8011020:	f7ff ffc4 	bl	8010fac <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8011024:	4a05      	ldr	r2, [pc, #20]	; (801103c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	4618      	mov	r0, r3
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	08029d94 	.word	0x08029d94

08011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011050:	bf00      	nop
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	f7ff fdfd 	bl	8010c68 <_ZN8touchgfx6WidgetC1Ev>
 801106e:	4a0b      	ldr	r2, [pc, #44]	; (801109c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	3326      	adds	r3, #38	; 0x26
 8011078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff fbd7 	bl	8010830 <_ZN8touchgfx6BitmapC1Et>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	22ff      	movs	r2, #255	; 0xff
 8011086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 801108a:	6839      	ldr	r1, [r7, #0]
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f008 fa1b 	bl	80194c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	08029e10 	.word	0x08029e10

080110a0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	370c      	adds	r7, #12
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80110be:	b480      	push	{r7}
 80110c0:	b083      	sub	sp, #12
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
        {
            return v;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
        }
 80110ca:	4618      	mov	r0, r3
 80110cc:	370c      	adds	r7, #12
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr

080110d6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80110d6:	b590      	push	{r4, r7, lr}
 80110d8:	b083      	sub	sp, #12
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
 80110de:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	3340      	adds	r3, #64	; 0x40
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7ff ffea 	bl	80110be <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80110ea:	4604      	mov	r4, r0
 80110ec:	463b      	mov	r3, r7
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7ff ffe5 	bl	80110be <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80110f4:	4603      	mov	r3, r0
 80110f6:	429c      	cmp	r4, r3
 80110f8:	bf0c      	ite	eq
 80110fa:	2301      	moveq	r3, #1
 80110fc:	2300      	movne	r3, #0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	d106      	bne.n	8011112 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	683a      	ldr	r2, [r7, #0]
 8011108:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f007 fc56 	bl	80189bc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011110:	e000      	b.n	8011114 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8011112:	bf00      	nop
    }
 8011114:	370c      	adds	r7, #12
 8011116:	46bd      	mov	sp, r7
 8011118:	bd90      	pop	{r4, r7, pc}
	...

0801111c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	4a05      	ldr	r2, [pc, #20]	; (801113c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	601a      	str	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	f007 fa59 	bl	80185e4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4618      	mov	r0, r3
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	08029780 	.word	0x08029780

08011140 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7ff ffe7 	bl	801111c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801114e:	2114      	movs	r1, #20
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f015 fa2d 	bl	80265b0 <_ZdlPvj>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	4a05      	ldr	r2, [pc, #20]	; (8011180 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff fd8b 	bl	8010c8c <_ZN8touchgfx6WidgetD1Ev>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	08029e10 	.word	0x08029e10

08011184 <_ZN8touchgfx5ImageD0Ev>:
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff ffe7 	bl	8011160 <_ZN8touchgfx5ImageD1Ev>
 8011192:	212c      	movs	r1, #44	; 0x2c
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f015 fa0b 	bl	80265b0 <_ZdlPvj>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	4a05      	ldr	r2, [pc, #20]	; (80111c4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7ff fcef 	bl	8010b98 <_ZN8touchgfx6ScreenD1Ev>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	080282f4 	.word	0x080282f4

080111c8 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7ff ffe7 	bl	80111a4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80111d6:	2140      	movs	r1, #64	; 0x40
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f015 f9e9 	bl	80265b0 <_ZdlPvj>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}

080111e8 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	4a90      	ldr	r2, [pc, #576]	; (8011434 <_ZN12MainViewBaseD1Ev+0x24c>)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	601a      	str	r2, [r3, #0]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7ff feb3 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8011208:	4618      	mov	r0, r3
 801120a:	f7ff fead 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff fea7 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff fea1 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 801122c:	4618      	mov	r0, r3
 801122e:	f002 fd5f 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8011238:	4618      	mov	r0, r3
 801123a:	f002 fd59 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8011244:	4618      	mov	r0, r3
 8011246:	f002 fd53 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8011250:	4618      	mov	r0, r3
 8011252:	f002 fd4d 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801125c:	4618      	mov	r0, r3
 801125e:	f002 fd47 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8011268:	4618      	mov	r0, r3
 801126a:	f002 fd41 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011274:	4618      	mov	r0, r3
 8011276:	f002 fd3b 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fe71 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 801128c:	4618      	mov	r0, r3
 801128e:	f002 fd2f 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011298:	4618      	mov	r0, r3
 801129a:	f002 fd29 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff fe5f 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80112b0:	4618      	mov	r0, r3
 80112b2:	f002 fd1d 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80112bc:	4618      	mov	r0, r3
 80112be:	f005 fd19 	bl	8016cf4 <_ZN8touchgfx13ImageProgressD1Ev>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80112c8:	4618      	mov	r0, r3
 80112ca:	f002 fd11 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80112d4:	4618      	mov	r0, r3
 80112d6:	f002 fd4f 	bl	8013d78 <_ZN8touchgfx13PainterRGB888D1Ev>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80112e0:	4618      	mov	r0, r3
 80112e2:	f002 fd27 	bl	8013d34 <_ZN8touchgfx4LineD1Ev>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80112ec:	4618      	mov	r0, r3
 80112ee:	f002 fd43 	bl	8013d78 <_ZN8touchgfx13PainterRGB888D1Ev>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80112f8:	4618      	mov	r0, r3
 80112fa:	f002 fd1b 	bl	8013d34 <_ZN8touchgfx4LineD1Ev>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011304:	4618      	mov	r0, r3
 8011306:	f005 fbf5 	bl	8016af4 <_ZN8touchgfx11BoxProgressD1Ev>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8011310:	4618      	mov	r0, r3
 8011312:	f7ff fe29 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801131c:	4618      	mov	r0, r3
 801131e:	f002 fce7 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011328:	4618      	mov	r0, r3
 801132a:	f002 fce1 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff fe17 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff fe11 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801134c:	4618      	mov	r0, r3
 801134e:	f002 fccf 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011358:	4618      	mov	r0, r3
 801135a:	f7ff fe05 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8011364:	4618      	mov	r0, r3
 8011366:	f002 fd07 	bl	8013d78 <_ZN8touchgfx13PainterRGB888D1Ev>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011370:	4618      	mov	r0, r3
 8011372:	f002 fcdf 	bl	8013d34 <_ZN8touchgfx4LineD1Ev>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801137c:	4618      	mov	r0, r3
 801137e:	f002 fcb7 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011388:	4618      	mov	r0, r3
 801138a:	f002 fcb1 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8011394:	4618      	mov	r0, r3
 8011396:	f002 fcab 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80113a0:	4618      	mov	r0, r3
 80113a2:	f002 fca5 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80113ac:	4618      	mov	r0, r3
 80113ae:	f002 fc9f 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80113b8:	4618      	mov	r0, r3
 80113ba:	f002 fc99 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80113c4:	4618      	mov	r0, r3
 80113c6:	f002 fc93 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80113d0:	4618      	mov	r0, r3
 80113d2:	f002 fc8d 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff febf 	bl	8011160 <_ZN8touchgfx5ImageD1Ev>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80113e8:	4618      	mov	r0, r3
 80113ea:	f002 fc81 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80113f4:	4618      	mov	r0, r3
 80113f6:	f002 fc7b 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	33d8      	adds	r3, #216	; 0xd8
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff fdb2 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	33a4      	adds	r3, #164	; 0xa4
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff fdad 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	3370      	adds	r3, #112	; 0x70
 8011412:	4618      	mov	r0, r3
 8011414:	f7ff fda8 	bl	8010f68 <_ZN8touchgfx8TextAreaD1Ev>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	3340      	adds	r3, #64	; 0x40
 801141c:	4618      	mov	r0, r3
 801141e:	f7ff fc9b 	bl	8010d58 <_ZN8touchgfx3BoxD1Ev>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff febd 	bl	80111a4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	080282c0 	.word	0x080282c0

08011438 <_ZN12MainViewBaseD0Ev>:
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f7ff fed1 	bl	80111e8 <_ZN12MainViewBaseD1Ev>
 8011446:	f642 01b4 	movw	r1, #10420	; 0x28b4
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f015 f8b0 	bl	80265b0 <_ZdlPvj>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4618      	mov	r0, r3
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
	...

0801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801145c:	b590      	push	{r4, r7, lr}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	4603      	mov	r3, r0
 8011464:	71fb      	strb	r3, [r7, #7]
 8011466:	460b      	mov	r3, r1
 8011468:	71bb      	strb	r3, [r7, #6]
 801146a:	4613      	mov	r3, r2
 801146c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801146e:	f7fe fd7f 	bl	800ff70 <_ZN8touchgfx3HAL11getInstanceEv>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d105      	bne.n	8011484 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8011478:	4b09      	ldr	r3, [pc, #36]	; (80114a0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x44>)
 801147a:	4a0a      	ldr	r2, [pc, #40]	; (80114a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801147c:	2138      	movs	r1, #56	; 0x38
 801147e:	480a      	ldr	r0, [pc, #40]	; (80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8011480:	f015 f8c4 	bl	802660c <__assert_func>
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8011484:	f7fe fd80 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8011488:	6803      	ldr	r3, [r0, #0]
 801148a:	332c      	adds	r3, #44	; 0x2c
 801148c:	681c      	ldr	r4, [r3, #0]
 801148e:	797b      	ldrb	r3, [r7, #5]
 8011490:	79ba      	ldrb	r2, [r7, #6]
 8011492:	79f9      	ldrb	r1, [r7, #7]
 8011494:	47a0      	blx	r4
 8011496:	4603      	mov	r3, r0
    }
 8011498:	4618      	mov	r0, r3
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	bd90      	pop	{r4, r7, pc}
 80114a0:	08027c10 	.word	0x08027c10
 80114a4:	08027c54 	.word	0x08027c54
 80114a8:	08027cb0 	.word	0x08027cb0

080114ac <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 80114ac:	b590      	push	{r4, r7, lr}
 80114ae:	b0c7      	sub	sp, #284	; 0x11c
 80114b0:	af02      	add	r7, sp, #8
 80114b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114ba:	6018      	str	r0, [r3, #0]
 80114bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f002 fb98 	bl	8013bfc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80114cc:	4ae6      	ldr	r2, [pc, #920]	; (8011868 <_ZN12MainViewBaseC1Ev+0x3bc>)
 80114ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	601a      	str	r2, [r3, #0]
 80114da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3340      	adds	r3, #64	; 0x40
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7ff fc16 	bl	8010d18 <_ZN8touchgfx3BoxC1Ev>
 80114ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3370      	adds	r3, #112	; 0x70
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff fc83 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80114fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011502:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	33a4      	adds	r3, #164	; 0xa4
 801150a:	4618      	mov	r0, r3
 801150c:	f7ff fc7a 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 8011510:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011514:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	33d8      	adds	r3, #216	; 0xd8
 801151c:	4618      	mov	r0, r3
 801151e:	f7ff fc71 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 8011522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011530:	4618      	mov	r0, r3
 8011532:	f7ff fd6f 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801153a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff fd65 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801154a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801154e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8011558:	f107 0308 	add.w	r3, r7, #8
 801155c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011560:	4618      	mov	r0, r3
 8011562:	f7ff f965 	bl	8010830 <_ZN8touchgfx6BitmapC1Et>
 8011566:	f107 0308 	add.w	r3, r7, #8
 801156a:	4619      	mov	r1, r3
 801156c:	4620      	mov	r0, r4
 801156e:	f7ff fd75 	bl	801105c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011576:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fd47 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801158a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011594:	4618      	mov	r0, r3
 8011596:	f7ff fd3d 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801159a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801159e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff fd33 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff fd29 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7ff fd1f 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7ff fd15 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff fd0b 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011602:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff fd01 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011616:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011620:	4618      	mov	r0, r3
 8011622:	f007 f9ab 	bl	801897c <_ZN8touchgfx4LineC1Ev>
 8011626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801162a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 8011634:	f107 030c 	add.w	r3, r7, #12
 8011638:	2100      	movs	r1, #0
 801163a:	4618      	mov	r0, r3
 801163c:	f7ff f8b2 	bl	80107a4 <_ZN8touchgfx9colortypeC1Em>
 8011640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011648:	22ff      	movs	r2, #255	; 0xff
 801164a:	6819      	ldr	r1, [r3, #0]
 801164c:	4620      	mov	r0, r4
 801164e:	f006 ff87 	bl	8018560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011656:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011660:	4618      	mov	r0, r3
 8011662:	f7ff fbcf 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 8011666:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801166a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011674:	4618      	mov	r0, r3
 8011676:	f7ff fccd 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801167a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801167e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff fbbb 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 801168e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011692:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801169c:	4618      	mov	r0, r3
 801169e:	f7ff fbb1 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80116a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ff fcaf 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80116b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7ff fca5 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80116ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fb93 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80116de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80116ec:	4618      	mov	r0, r3
 80116ee:	f005 fa15 	bl	8016b1c <_ZN8touchgfx11BoxProgressC1Ev>
 80116f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011700:	4618      	mov	r0, r3
 8011702:	f007 f93b 	bl	801897c <_ZN8touchgfx4LineC1Ev>
 8011706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801170a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8011714:	f107 0310 	add.w	r3, r7, #16
 8011718:	2100      	movs	r1, #0
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff f842 	bl	80107a4 <_ZN8touchgfx9colortypeC1Em>
 8011720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8011728:	22ff      	movs	r2, #255	; 0xff
 801172a:	6819      	ldr	r1, [r3, #0]
 801172c:	4620      	mov	r0, r4
 801172e:	f006 ff17 	bl	8018560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011732:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011736:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8011740:	4618      	mov	r0, r3
 8011742:	f007 f91b 	bl	801897c <_ZN8touchgfx4LineC1Ev>
 8011746:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801174a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 8011754:	f107 0314 	add.w	r3, r7, #20
 8011758:	2100      	movs	r1, #0
 801175a:	4618      	mov	r0, r3
 801175c:	f7ff f822 	bl	80107a4 <_ZN8touchgfx9colortypeC1Em>
 8011760:	22ff      	movs	r2, #255	; 0xff
 8011762:	6979      	ldr	r1, [r7, #20]
 8011764:	4620      	mov	r0, r4
 8011766:	f006 fefb 	bl	8018560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801176a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801176e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8011778:	4618      	mov	r0, r3
 801177a:	f7ff fc4b 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801177e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801178c:	4618      	mov	r0, r3
 801178e:	f005 fadb 	bl	8016d48 <_ZN8touchgfx13ImageProgressC1Ev>
 8011792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011796:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7ff fc37 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80117a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff fb25 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80117ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7ff fc23 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80117ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff fc19 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80117e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7ff fb07 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80117f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011804:	4618      	mov	r0, r3
 8011806:	f7ff fc05 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801180a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801180e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8011818:	4618      	mov	r0, r3
 801181a:	f7ff fbfb 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801181e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff fbf1 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011836:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8011840:	4618      	mov	r0, r3
 8011842:	f7ff fbe7 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801184a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8011854:	4618      	mov	r0, r3
 8011856:	f7ff fbdd 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801185a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801185e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	e002      	b.n	801186c <_ZN12MainViewBaseC1Ev+0x3c0>
 8011866:	bf00      	nop
 8011868:	080282c0 	.word	0x080282c0
 801186c:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8011870:	4618      	mov	r0, r3
 8011872:	f7ff fbcf 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801187a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff fbc5 	bl	8011014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801188a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801188e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff fab3 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 801189e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7ff faa9 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80118b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7ff fa9f 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
 80118c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7ff fa95 	bl	8010e04 <_ZN8touchgfx8TextAreaC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80118da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f603 4394 	addw	r3, r3, #3220	; 0xc94
 80118e8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80118ec:	4618      	mov	r0, r3
 80118ee:	f007 fe59 	bl	80195a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 80118f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011900:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8011904:	9300      	str	r3, [sp, #0]
 8011906:	f44f 7348 	mov.w	r3, #800	; 0x320
 801190a:	2200      	movs	r2, #0
 801190c:	2100      	movs	r1, #0
 801190e:	f7fe ffed 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011912:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011920:	2200      	movs	r2, #0
 8011922:	2100      	movs	r1, #0
 8011924:	2000      	movs	r0, #0
 8011926:	f7ff fd99 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801192a:	4603      	mov	r3, r0
 801192c:	4619      	mov	r1, r3
 801192e:	4620      	mov	r0, r4
 8011930:	f7ff fa34 	bl	8010d9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    CltDecsriptor.setXY(218, 220);
 8011934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3370      	adds	r3, #112	; 0x70
 8011940:	22dc      	movs	r2, #220	; 0xdc
 8011942:	21da      	movs	r1, #218	; 0xda
 8011944:	4618      	mov	r0, r3
 8011946:	f7ff f81c 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801194a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801194e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011958:	2200      	movs	r2, #0
 801195a:	21dc      	movs	r1, #220	; 0xdc
 801195c:	20ff      	movs	r0, #255	; 0xff
 801195e:	f7ff fd7d 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011962:	4603      	mov	r3, r0
 8011964:	4619      	mov	r1, r3
 8011966:	4620      	mov	r0, r4
 8011968:	f7ff fa8f 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801196c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011970:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	3370      	adds	r3, #112	; 0x70
 8011978:	2100      	movs	r1, #0
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff fad8 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8011980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011984:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801198e:	f107 0318 	add.w	r3, r7, #24
 8011992:	2115      	movs	r1, #21
 8011994:	4618      	mov	r0, r3
 8011996:	f7ff fa0f 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801199a:	8b39      	ldrh	r1, [r7, #24]
 801199c:	4620      	mov	r0, r4
 801199e:	f007 faf3 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(223, 139);
 80119a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	33a4      	adds	r3, #164	; 0xa4
 80119ae:	228b      	movs	r2, #139	; 0x8b
 80119b0:	21df      	movs	r1, #223	; 0xdf
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe ffe5 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80119c6:	2200      	movs	r2, #0
 80119c8:	21dc      	movs	r1, #220	; 0xdc
 80119ca:	20ff      	movs	r0, #255	; 0xff
 80119cc:	f7ff fd46 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119d0:	4603      	mov	r3, r0
 80119d2:	4619      	mov	r1, r3
 80119d4:	4620      	mov	r0, r4
 80119d6:	f7ff fa58 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80119da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	33a4      	adds	r3, #164	; 0xa4
 80119e6:	2100      	movs	r1, #0
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7ff faa1 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 80119ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80119fc:	f107 031c 	add.w	r3, r7, #28
 8011a00:	210f      	movs	r1, #15
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff f9d8 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011a08:	8bb9      	ldrh	r1, [r7, #28]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f007 fabc 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(24, 127);
 8011a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	33d8      	adds	r3, #216	; 0xd8
 8011a1c:	227f      	movs	r2, #127	; 0x7f
 8011a1e:	2118      	movs	r1, #24
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fe ffae 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011a34:	2200      	movs	r2, #0
 8011a36:	21dc      	movs	r1, #220	; 0xdc
 8011a38:	20ff      	movs	r0, #255	; 0xff
 8011a3a:	f7ff fd0f 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	4619      	mov	r1, r3
 8011a42:	4620      	mov	r0, r4
 8011a44:	f7ff fa21 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8011a48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	33d8      	adds	r3, #216	; 0xd8
 8011a54:	2100      	movs	r1, #0
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff fa6a 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011a5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011a6a:	f107 0320 	add.w	r3, r7, #32
 8011a6e:	210e      	movs	r1, #14
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff f9a1 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011a76:	8c39      	ldrh	r1, [r7, #32]
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f007 fa85 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 8011a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8011a8c:	233e      	movs	r3, #62	; 0x3e
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	2372      	movs	r3, #114	; 0x72
 8011a92:	224d      	movs	r2, #77	; 0x4d
 8011a94:	21bb      	movs	r1, #187	; 0xbb
 8011a96:	f7fe ff29 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011aa8:	22ff      	movs	r2, #255	; 0xff
 8011aaa:	21ff      	movs	r1, #255	; 0xff
 8011aac:	20ff      	movs	r0, #255	; 0xff
 8011aae:	f7ff fcd5 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f7ff f9e7 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8011abc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ac0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011aca:	2100      	movs	r1, #0
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff fa2f 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID90).getText());
 8011ad2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ad6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f603 34d4 	addw	r4, r3, #3028	; 0xbd4
 8011ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ae4:	2136      	movs	r1, #54	; 0x36
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7ff f966 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7ff f971 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011af6:	4603      	mov	r3, r0
 8011af8:	4ae7      	ldr	r2, [pc, #924]	; (8011e98 <_ZN12MainViewBaseC1Ev+0x9ec>)
 8011afa:	2105      	movs	r1, #5
 8011afc:	4620      	mov	r0, r4
 8011afe:	f00a fded 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8011b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8011b10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 8011b1e:	4619      	mov	r1, r3
 8011b20:	4610      	mov	r0, r2
 8011b22:	f7ff fa8d 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b38:	2102      	movs	r1, #2
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff f93c 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011b40:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8011b42:	4620      	mov	r0, r4
 8011b44:	f007 fa20 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SpeedValue.setPosition(23, 86, 71, 41);
 8011b48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f503 70a2 	add.w	r0, r3, #324	; 0x144
 8011b56:	2329      	movs	r3, #41	; 0x29
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	2347      	movs	r3, #71	; 0x47
 8011b5c:	2256      	movs	r2, #86	; 0x56
 8011b5e:	2117      	movs	r1, #23
 8011b60:	f7fe fec4 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    SpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8011b72:	22ff      	movs	r2, #255	; 0xff
 8011b74:	21ff      	movs	r1, #255	; 0xff
 8011b76:	20ff      	movs	r0, #255	; 0xff
 8011b78:	f7ff fc70 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	4619      	mov	r1, r3
 8011b80:	4620      	mov	r0, r4
 8011b82:	f7ff f982 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SpeedValue.setLinespacing(0);
 8011b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011b94:	2100      	movs	r1, #0
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff f9ca 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ba0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f603 34de 	addw	r4, r3, #3038	; 0xbde
 8011baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bae:	2101      	movs	r1, #1
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7ff f901 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff f90c 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	4ab5      	ldr	r2, [pc, #724]	; (8011e98 <_ZN12MainViewBaseC1Ev+0x9ec>)
 8011bc4:	2105      	movs	r1, #5
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f00a fd88 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    SpeedValue.setWildcard(SpeedValueBuffer);
 8011bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8011bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f603 33de 	addw	r3, r3, #3038	; 0xbde
 8011be8:	4619      	mov	r1, r3
 8011bea:	4610      	mov	r0, r2
 8011bec:	f7ff fa28 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    SpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bf4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8011bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c02:	2100      	movs	r1, #0
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7ff f8d7 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011c0a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f007 f9bb 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8011c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011c20:	223f      	movs	r2, #63	; 0x3f
 8011c22:	21b3      	movs	r1, #179	; 0xb3
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fe feac 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8011c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011c38:	2100      	movs	r1, #0
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fe ff12 	bl	8010a64 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8011c40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8011c4e:	230e      	movs	r3, #14
 8011c50:	9300      	str	r3, [sp, #0]
 8011c52:	2312      	movs	r3, #18
 8011c54:	223f      	movs	r2, #63	; 0x3f
 8011c56:	2136      	movs	r1, #54	; 0x36
 8011c58:	f7fe fe48 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011c6a:	22ff      	movs	r2, #255	; 0xff
 8011c6c:	21ff      	movs	r1, #255	; 0xff
 8011c6e:	20ff      	movs	r0, #255	; 0xff
 8011c70:	f7ff fbf4 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c74:	4603      	mov	r3, r0
 8011c76:	4619      	mov	r1, r3
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f7ff f906 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8011c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ff f94e 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011c94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f603 34e8 	addw	r4, r3, #3048	; 0xbe8
 8011ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011ca6:	211f      	movs	r1, #31
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7ff f885 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff f890 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	4a77      	ldr	r2, [pc, #476]	; (8011e98 <_ZN12MainViewBaseC1Ev+0x9ec>)
 8011cbc:	2102      	movs	r1, #2
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f00a fd0c 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8011cc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8011cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	4610      	mov	r0, r2
 8011ce4:	f7ff f9ac 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011ce8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011cf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011cfa:	2103      	movs	r1, #3
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7ff f85b 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011d02:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8011d04:	4620      	mov	r0, r4
 8011d06:	f007 f93f 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8011d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 8011d18:	230e      	movs	r3, #14
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	2312      	movs	r3, #18
 8011d1e:	223f      	movs	r2, #63	; 0x3f
 8011d20:	2173      	movs	r1, #115	; 0x73
 8011d22:	f7fe fde3 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011d34:	22ff      	movs	r2, #255	; 0xff
 8011d36:	21ff      	movs	r1, #255	; 0xff
 8011d38:	20ff      	movs	r0, #255	; 0xff
 8011d3a:	f7ff fb8f 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	4619      	mov	r1, r3
 8011d42:	4620      	mov	r0, r4
 8011d44:	f7ff f8a1 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011d48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011d56:	2100      	movs	r1, #0
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7ff f8e9 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f603 34ec 	addw	r4, r3, #3052	; 0xbec
 8011d6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011d70:	2120      	movs	r1, #32
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7ff f820 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff f82b 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011d82:	4603      	mov	r3, r0
 8011d84:	4a44      	ldr	r2, [pc, #272]	; (8011e98 <_ZN12MainViewBaseC1Ev+0x9ec>)
 8011d86:	2102      	movs	r1, #2
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f00a fca7 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8011d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8011d9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011da0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8011daa:	4619      	mov	r1, r3
 8011dac:	4610      	mov	r0, r2
 8011dae:	f7ff f947 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011dc4:	2104      	movs	r1, #4
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fe fff6 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011dcc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f007 f8d9 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8011dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011dda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8011de4:	230e      	movs	r3, #14
 8011de6:	9300      	str	r3, [sp, #0]
 8011de8:	2312      	movs	r3, #18
 8011dea:	223e      	movs	r2, #62	; 0x3e
 8011dec:	21ad      	movs	r1, #173	; 0xad
 8011dee:	f7fe fd7d 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011df2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011df6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011e00:	22ff      	movs	r2, #255	; 0xff
 8011e02:	21ff      	movs	r1, #255	; 0xff
 8011e04:	20ff      	movs	r0, #255	; 0xff
 8011e06:	f7ff fb29 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f7ff f83b 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8011e14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011e22:	2100      	movs	r1, #0
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff f883 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8011e2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f503 643f 	add.w	r4, r3, #3056	; 0xbf0
 8011e38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e3c:	2121      	movs	r1, #33	; 0x21
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fe ffba 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011e44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fe ffc5 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	4a11      	ldr	r2, [pc, #68]	; (8011e98 <_ZN12MainViewBaseC1Ev+0x9ec>)
 8011e52:	2102      	movs	r1, #2
 8011e54:	4620      	mov	r0, r4
 8011e56:	f00a fc41 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8011e68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8011e76:	4619      	mov	r1, r3
 8011e78:	4610      	mov	r0, r2
 8011e7a:	f7ff f8e1 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011e7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e90:	2105      	movs	r1, #5
 8011e92:	4618      	mov	r0, r3
 8011e94:	e002      	b.n	8011e9c <_ZN12MainViewBaseC1Ev+0x9f0>
 8011e96:	bf00      	nop
 8011e98:	08027cf0 	.word	0x08027cf0
 8011e9c:	f7fe ff8c 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011ea0:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	f007 f86f 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011eae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8011eb8:	230e      	movs	r3, #14
 8011eba:	9300      	str	r3, [sp, #0]
 8011ebc:	2312      	movs	r3, #18
 8011ebe:	223e      	movs	r2, #62	; 0x3e
 8011ec0:	21e7      	movs	r1, #231	; 0xe7
 8011ec2:	f7fe fd13 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011ed4:	22ff      	movs	r2, #255	; 0xff
 8011ed6:	21ff      	movs	r1, #255	; 0xff
 8011ed8:	20ff      	movs	r0, #255	; 0xff
 8011eda:	f7ff fabf 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	f7fe ffd1 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011ee8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011eec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011ef6:	2100      	movs	r1, #0
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7ff f819 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8011efe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 8011f0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f10:	2122      	movs	r1, #34	; 0x22
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fe ff50 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011f18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fe ff5b 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011f22:	4603      	mov	r3, r0
 8011f24:	4ae8      	ldr	r2, [pc, #928]	; (80122c8 <_ZN12MainViewBaseC1Ev+0xe1c>)
 8011f26:	2102      	movs	r1, #2
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f00a fbd7 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8011f3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	f7ff f877 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011f60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f64:	2106      	movs	r1, #6
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fe ff26 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011f6c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8011f70:	4620      	mov	r0, r4
 8011f72:	f007 f809 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8011f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8011f84:	230e      	movs	r3, #14
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	2312      	movs	r3, #18
 8011f8a:	223f      	movs	r2, #63	; 0x3f
 8011f8c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8011f90:	f7fe fcac 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8011fa2:	22ff      	movs	r2, #255	; 0xff
 8011fa4:	21ff      	movs	r1, #255	; 0xff
 8011fa6:	20ff      	movs	r0, #255	; 0xff
 8011fa8:	f7ff fa58 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fac:	4603      	mov	r3, r0
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f7fe ff6a 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8011fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011fba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011fc4:	2100      	movs	r1, #0
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7fe ffb2 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8011fcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011fd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f603 34f8 	addw	r4, r3, #3064	; 0xbf8
 8011fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011fde:	2123      	movs	r1, #35	; 0x23
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7fe fee9 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8011fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fe fef4 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	4ab5      	ldr	r2, [pc, #724]	; (80122c8 <_ZN12MainViewBaseC1Ev+0xe1c>)
 8011ff4:	2102      	movs	r1, #2
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f00a fb70 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8011ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012000:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f503 7222 	add.w	r2, r3, #648	; 0x288
 801200a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801200e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8012018:	4619      	mov	r1, r3
 801201a:	4610      	mov	r0, r2
 801201c:	f7ff f810 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8012020:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012024:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f503 7422 	add.w	r4, r3, #648	; 0x288
 801202e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012032:	2107      	movs	r1, #7
 8012034:	4618      	mov	r0, r3
 8012036:	f7fe febf 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801203a:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 801203e:	4620      	mov	r0, r4
 8012040:	f006 ffa2 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8012044:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012048:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8012052:	230e      	movs	r3, #14
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	2312      	movs	r3, #18
 8012058:	223f      	movs	r2, #63	; 0x3f
 801205a:	f240 115d 	movw	r1, #349	; 0x15d
 801205e:	f7fe fc45 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012066:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8012070:	22ff      	movs	r2, #255	; 0xff
 8012072:	21ff      	movs	r1, #255	; 0xff
 8012074:	20ff      	movs	r0, #255	; 0xff
 8012076:	f7ff f9f1 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801207a:	4603      	mov	r3, r0
 801207c:	4619      	mov	r1, r3
 801207e:	4620      	mov	r0, r4
 8012080:	f7fe ff03 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8012084:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012088:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8012092:	2100      	movs	r1, #0
 8012094:	4618      	mov	r0, r3
 8012096:	f7fe ff4b 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 801209a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801209e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 80120a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80120ac:	2124      	movs	r1, #36	; 0x24
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fe82 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80120b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fe fe8d 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80120be:	4603      	mov	r3, r0
 80120c0:	4a81      	ldr	r2, [pc, #516]	; (80122c8 <_ZN12MainViewBaseC1Ev+0xe1c>)
 80120c2:	2102      	movs	r1, #2
 80120c4:	4620      	mov	r0, r4
 80120c6:	f00a fb09 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 80120ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80120ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80120d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80120dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80120e6:	4619      	mov	r1, r3
 80120e8:	4610      	mov	r0, r2
 80120ea:	f7fe ffa9 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80120ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80120f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 80120fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012100:	2108      	movs	r1, #8
 8012102:	4618      	mov	r0, r3
 8012104:	f7fe fe58 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012108:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 801210c:	4620      	mov	r0, r4
 801210e:	f006 ff3b 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8012112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012116:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8012120:	230f      	movs	r3, #15
 8012122:	9300      	str	r3, [sp, #0]
 8012124:	2312      	movs	r3, #18
 8012126:	223e      	movs	r2, #62	; 0x3e
 8012128:	f240 119b 	movw	r1, #411	; 0x19b
 801212c:	f7fe fbde 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012130:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012134:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 801213e:	22ff      	movs	r2, #255	; 0xff
 8012140:	21ff      	movs	r1, #255	; 0xff
 8012142:	20ff      	movs	r0, #255	; 0xff
 8012144:	f7ff f98a 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012148:	4603      	mov	r3, r0
 801214a:	4619      	mov	r1, r3
 801214c:	4620      	mov	r0, r4
 801214e:	f7fe fe9c 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8012152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8012160:	2100      	movs	r1, #0
 8012162:	4618      	mov	r0, r3
 8012164:	f7fe fee4 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8012168:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801216c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f503 6440 	add.w	r4, r3, #3072	; 0xc00
 8012176:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801217a:	2125      	movs	r1, #37	; 0x25
 801217c:	4618      	mov	r0, r3
 801217e:	f7fe fe1b 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012182:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012186:	4618      	mov	r0, r3
 8012188:	f7fe fe26 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801218c:	4603      	mov	r3, r0
 801218e:	4a4e      	ldr	r2, [pc, #312]	; (80122c8 <_ZN12MainViewBaseC1Ev+0xe1c>)
 8012190:	2102      	movs	r1, #2
 8012192:	4620      	mov	r0, r4
 8012194:	f00a faa2 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8012198:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801219c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 80121a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80121aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80121b4:	4619      	mov	r1, r3
 80121b6:	4610      	mov	r0, r2
 80121b8:	f7fe ff42 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80121bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80121c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 80121ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80121ce:	2109      	movs	r1, #9
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fe fdf1 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80121d6:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 80121da:	4620      	mov	r0, r4
 80121dc:	f006 fed4 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80121e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80121e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f503 704c 	add.w	r0, r3, #816	; 0x330
 80121ee:	230e      	movs	r3, #14
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	2312      	movs	r3, #18
 80121f4:	223e      	movs	r2, #62	; 0x3e
 80121f6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80121fa:	f7fe fb77 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012202:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f503 744c 	add.w	r4, r3, #816	; 0x330
 801220c:	22ff      	movs	r2, #255	; 0xff
 801220e:	21ff      	movs	r1, #255	; 0xff
 8012210:	20ff      	movs	r0, #255	; 0xff
 8012212:	f7ff f923 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012216:	4603      	mov	r3, r0
 8012218:	4619      	mov	r1, r3
 801221a:	4620      	mov	r0, r4
 801221c:	f7fe fe35 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8012220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012224:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801222e:	2100      	movs	r1, #0
 8012230:	4618      	mov	r0, r3
 8012232:	f7fe fe7d 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8012236:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801223a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f603 4404 	addw	r4, r3, #3076	; 0xc04
 8012244:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012248:	2126      	movs	r1, #38	; 0x26
 801224a:	4618      	mov	r0, r3
 801224c:	f7fe fdb4 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012250:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012254:	4618      	mov	r0, r3
 8012256:	f7fe fdbf 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801225a:	4603      	mov	r3, r0
 801225c:	4a1a      	ldr	r2, [pc, #104]	; (80122c8 <_ZN12MainViewBaseC1Ev+0xe1c>)
 801225e:	2102      	movs	r1, #2
 8012260:	4620      	mov	r0, r4
 8012262:	f00a fa3b 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8012266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801226a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f503 724c 	add.w	r2, r3, #816	; 0x330
 8012274:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012278:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8012282:	4619      	mov	r1, r3
 8012284:	4610      	mov	r0, r2
 8012286:	f7fe fedb 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 801228a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801228e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8012298:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801229c:	210a      	movs	r1, #10
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fe fd8a 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80122a4:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80122a8:	4620      	mov	r0, r4
 80122aa:	f006 fe6d 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 80122ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80122b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f503 705a 	add.w	r0, r3, #872	; 0x368
 80122bc:	2305      	movs	r3, #5
 80122be:	9300      	str	r3, [sp, #0]
 80122c0:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 80122c4:	223a      	movs	r2, #58	; 0x3a
 80122c6:	e001      	b.n	80122cc <_ZN12MainViewBaseC1Ev+0xe20>
 80122c8:	08027cf0 	.word	0x08027cf0
 80122cc:	f06f 0101 	mvn.w	r1, #1
 80122d0:	f7fe fb0c 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80122d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80122d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 80122e2:	22ff      	movs	r2, #255	; 0xff
 80122e4:	21ff      	movs	r1, #255	; 0xff
 80122e6:	20ff      	movs	r0, #255	; 0xff
 80122e8:	f7ff f8b8 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122ec:	4603      	mov	r3, r0
 80122ee:	22ff      	movs	r2, #255	; 0xff
 80122f0:	4619      	mov	r1, r3
 80122f2:	4620      	mov	r0, r4
 80122f4:	f006 f919 	bl	801852a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80122f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80122fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f503 725a 	add.w	r2, r3, #872	; 0x368
 8012306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801230a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8012314:	4619      	mov	r1, r3
 8012316:	4610      	mov	r0, r2
 8012318:	f006 f970 	bl	80185fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 801231c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012320:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801232a:	2203      	movs	r2, #3
 801232c:	2100      	movs	r1, #0
 801232e:	4618      	mov	r0, r3
 8012330:	f001 fc7a 	bl	8013c28 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8012334:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012338:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8012342:	2203      	movs	r2, #3
 8012344:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8012348:	4618      	mov	r0, r3
 801234a:	f001 fc93 	bl	8013c74 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 801234e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012352:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801235c:	2102      	movs	r1, #2
 801235e:	4618      	mov	r0, r3
 8012360:	f001 fcae 	bl	8013cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8012364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8012372:	2101      	movs	r1, #1
 8012374:	4618      	mov	r0, r3
 8012376:	f006 fc5b 	bl	8018c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(132, 127);
 801237a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801237e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8012388:	227f      	movs	r2, #127	; 0x7f
 801238a:	2184      	movs	r1, #132	; 0x84
 801238c:	4618      	mov	r0, r3
 801238e:	f7fe faf8 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 80123a0:	2200      	movs	r2, #0
 80123a2:	21dc      	movs	r1, #220	; 0xdc
 80123a4:	20ff      	movs	r0, #255	; 0xff
 80123a6:	f7ff f859 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123aa:	4603      	mov	r3, r0
 80123ac:	4619      	mov	r1, r3
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7fe fd6b 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 80123b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80123b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80123c2:	2100      	movs	r1, #0
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fe fdb3 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 80123ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80123ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 80123d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80123dc:	210d      	movs	r1, #13
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe fcea 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80123e4:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80123e8:	4620      	mov	r0, r4
 80123ea:	f006 fdcd 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(114, 86, 60, 42);
 80123ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80123f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f503 6085 	add.w	r0, r3, #1064	; 0x428
 80123fc:	232a      	movs	r3, #42	; 0x2a
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	233c      	movs	r3, #60	; 0x3c
 8012402:	2256      	movs	r2, #86	; 0x56
 8012404:	2172      	movs	r1, #114	; 0x72
 8012406:	f7fe fa71 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801240a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801240e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8012418:	22ff      	movs	r2, #255	; 0xff
 801241a:	21ff      	movs	r1, #255	; 0xff
 801241c:	20ff      	movs	r0, #255	; 0xff
 801241e:	f7ff f81d 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012422:	4603      	mov	r3, r0
 8012424:	4619      	mov	r1, r3
 8012426:	4620      	mov	r0, r4
 8012428:	f7fe fd2f 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 801242c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012430:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801243a:	2100      	movs	r1, #0
 801243c:	4618      	mov	r0, r3
 801243e:	f7fe fd77 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8012442:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 8012450:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012454:	210c      	movs	r1, #12
 8012456:	4618      	mov	r0, r3
 8012458:	f7fe fcae 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801245c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012460:	4618      	mov	r0, r3
 8012462:	f7fe fcb9 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012466:	4603      	mov	r3, r0
 8012468:	4aea      	ldr	r2, [pc, #936]	; (8012814 <_ZN12MainViewBaseC1Ev+0x1368>)
 801246a:	2105      	movs	r1, #5
 801246c:	4620      	mov	r0, r4
 801246e:	f00a f935 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8012472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f503 6285 	add.w	r2, r3, #1064	; 0x428
 8012480:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012484:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 801248e:	4619      	mov	r1, r3
 8012490:	4610      	mov	r0, r2
 8012492:	f7fe fdd5 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8012496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801249a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80124a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80124a8:	210b      	movs	r1, #11
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fe fc84 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80124b0:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 80124b4:	4620      	mov	r0, r4
 80124b6:	f006 fd67 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(325, 128);
 80124ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80124be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80124c8:	2280      	movs	r2, #128	; 0x80
 80124ca:	f240 1145 	movw	r1, #325	; 0x145
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fe fa57 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80124d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80124d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 80124e2:	2200      	movs	r2, #0
 80124e4:	21dc      	movs	r1, #220	; 0xdc
 80124e6:	20ff      	movs	r0, #255	; 0xff
 80124e8:	f7fe ffb8 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124ec:	4603      	mov	r3, r0
 80124ee:	4619      	mov	r1, r3
 80124f0:	4620      	mov	r0, r4
 80124f2:	f7fe fcca 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80124f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80124fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8012504:	2100      	movs	r1, #0
 8012506:	4618      	mov	r0, r3
 8012508:	f7fe fd12 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 801250c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 801251a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801251e:	2110      	movs	r1, #16
 8012520:	4618      	mov	r0, r3
 8012522:	f7fe fc49 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012526:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801252a:	4620      	mov	r0, r4
 801252c:	f006 fd2c 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(417, 129);
 8012530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801253e:	2281      	movs	r2, #129	; 0x81
 8012540:	f240 11a1 	movw	r1, #417	; 0x1a1
 8012544:	4618      	mov	r0, r3
 8012546:	f7fe fa1c 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801254a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801254e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8012558:	2200      	movs	r2, #0
 801255a:	21dc      	movs	r1, #220	; 0xdc
 801255c:	20ff      	movs	r0, #255	; 0xff
 801255e:	f7fe ff7d 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012562:	4603      	mov	r3, r0
 8012564:	4619      	mov	r1, r3
 8012566:	4620      	mov	r0, r4
 8012568:	f7fe fc8f 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801256c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012570:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801257a:	2100      	movs	r1, #0
 801257c:	4618      	mov	r0, r3
 801257e:	f7fe fcd7 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8012582:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8012590:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012594:	2111      	movs	r1, #17
 8012596:	4618      	mov	r0, r3
 8012598:	f7fe fc0e 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801259c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 80125a0:	4620      	mov	r0, r4
 80125a2:	f006 fcf1 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 85, 75, 42);
 80125a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80125aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 80125b4:	232a      	movs	r3, #42	; 0x2a
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	234b      	movs	r3, #75	; 0x4b
 80125ba:	2255      	movs	r2, #85	; 0x55
 80125bc:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80125c0:	f7fe f994 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80125c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80125c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 80125d2:	22ff      	movs	r2, #255	; 0xff
 80125d4:	21ff      	movs	r1, #255	; 0xff
 80125d6:	20ff      	movs	r0, #255	; 0xff
 80125d8:	f7fe ff40 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125dc:	4603      	mov	r3, r0
 80125de:	4619      	mov	r1, r3
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7fe fc52 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 80125e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80125ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80125f4:	2100      	movs	r1, #0
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fe fc9a 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 80125fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012600:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f603 4412 	addw	r4, r3, #3090	; 0xc12
 801260a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801260e:	2113      	movs	r1, #19
 8012610:	4618      	mov	r0, r3
 8012612:	f7fe fbd1 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801261a:	4618      	mov	r0, r3
 801261c:	f7fe fbdc 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012620:	4603      	mov	r3, r0
 8012622:	4a7c      	ldr	r2, [pc, #496]	; (8012814 <_ZN12MainViewBaseC1Ev+0x1368>)
 8012624:	2105      	movs	r1, #5
 8012626:	4620      	mov	r0, r4
 8012628:	f00a f858 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 801262c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 801263a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801263e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8012648:	4619      	mov	r1, r3
 801264a:	4610      	mov	r0, r2
 801264c:	f7fe fcf8 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8012650:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012654:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801265e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012662:	2112      	movs	r1, #18
 8012664:	4618      	mov	r0, r3
 8012666:	f7fe fba7 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801266a:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 801266e:	4620      	mov	r0, r4
 8012670:	f006 fc8a 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 85, 71, 40);
 8012674:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012678:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
 8012682:	2328      	movs	r3, #40	; 0x28
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	2347      	movs	r3, #71	; 0x47
 8012688:	2255      	movs	r2, #85	; 0x55
 801268a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 801268e:	f7fe f92d 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012696:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80126a0:	22ff      	movs	r2, #255	; 0xff
 80126a2:	21ff      	movs	r1, #255	; 0xff
 80126a4:	20ff      	movs	r0, #255	; 0xff
 80126a6:	f7fe fed9 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80126aa:	4603      	mov	r3, r0
 80126ac:	4619      	mov	r1, r3
 80126ae:	4620      	mov	r0, r4
 80126b0:	f7fe fbeb 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 80126b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80126b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126c2:	2100      	movs	r1, #0
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fe fc33 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 80126ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80126ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f603 441c 	addw	r4, r3, #3100	; 0xc1c
 80126d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80126dc:	211e      	movs	r1, #30
 80126de:	4618      	mov	r0, r3
 80126e0:	f7fe fb6a 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80126e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fe fb75 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80126ee:	4603      	mov	r3, r0
 80126f0:	4a48      	ldr	r2, [pc, #288]	; (8012814 <_ZN12MainViewBaseC1Ev+0x1368>)
 80126f2:	2105      	movs	r1, #5
 80126f4:	4620      	mov	r0, r4
 80126f6:	f009 fff1 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 80126fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80126fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 8012708:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801270c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8012716:	4619      	mov	r1, r3
 8012718:	4610      	mov	r0, r2
 801271a:	f7fe fc91 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 801271e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012722:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 801272c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012730:	2114      	movs	r1, #20
 8012732:	4618      	mov	r0, r3
 8012734:	f7fe fb40 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012738:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 801273c:	4620      	mov	r0, r4
 801273e:	f006 fc23 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8012742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8012750:	22f0      	movs	r2, #240	; 0xf0
 8012752:	f240 1197 	movw	r1, #407	; 0x197
 8012756:	4618      	mov	r0, r3
 8012758:	f7fe f913 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801275c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012760:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 801276a:	2200      	movs	r2, #0
 801276c:	21dc      	movs	r1, #220	; 0xdc
 801276e:	20ff      	movs	r0, #255	; 0xff
 8012770:	f7fe fe74 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012774:	4603      	mov	r3, r0
 8012776:	4619      	mov	r1, r3
 8012778:	4620      	mov	r0, r4
 801277a:	f7fe fb86 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 801277e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801278c:	2100      	movs	r1, #0
 801278e:	4618      	mov	r0, r3
 8012790:	f7fe fbce 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8012794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012798:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 80127a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80127a6:	2116      	movs	r1, #22
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fe fb05 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80127ae:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80127b2:	4620      	mov	r0, r4
 80127b4:	f006 fbe8 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 80127b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80127c6:	22e2      	movs	r2, #226	; 0xe2
 80127c8:	f240 116f 	movw	r1, #367	; 0x16f
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fe f8d8 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80127d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 80127e0:	230a      	movs	r3, #10
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	2364      	movs	r3, #100	; 0x64
 80127e6:	2202      	movs	r2, #2
 80127e8:	2102      	movs	r1, #2
 80127ea:	f004 f9cd 	bl	8016b88 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80127ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 80127fc:	2300      	movs	r3, #0
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	2300      	movs	r3, #0
 8012802:	2264      	movs	r2, #100	; 0x64
 8012804:	2100      	movs	r1, #0
 8012806:	f004 fc3d 	bl	8017084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 801280a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801280e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012812:	e001      	b.n	8012818 <_ZN12MainViewBaseC1Ev+0x136c>
 8012814:	08027cf0 	.word	0x08027cf0
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801281e:	2100      	movs	r1, #0
 8012820:	4618      	mov	r0, r3
 8012822:	f004 fa11 	bl	8016c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8012826:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801282a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8012834:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012838:	2100      	movs	r1, #0
 801283a:	4618      	mov	r0, r3
 801283c:	f7fd fff8 	bl	8010830 <_ZN8touchgfx6BitmapC1Et>
 8012840:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012844:	4619      	mov	r1, r3
 8012846:	4620      	mov	r0, r4
 8012848:	f004 fc11 	bl	801706e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801284c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012850:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 801285a:	2200      	movs	r2, #0
 801285c:	21dc      	movs	r1, #220	; 0xdc
 801285e:	20ff      	movs	r0, #255	; 0xff
 8012860:	f7fe fdfc 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012864:	4603      	mov	r3, r0
 8012866:	4619      	mov	r1, r3
 8012868:	4620      	mov	r0, r4
 801286a:	f004 f937 	bl	8016adc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(0);
 801286e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012872:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801287c:	2100      	movs	r1, #0
 801287e:	4618      	mov	r0, r3
 8012880:	f004 f99a 	bl	8016bb8 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8012884:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012888:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	f203 602c 	addw	r0, r3, #1580	; 0x62c
 8012892:	230a      	movs	r3, #10
 8012894:	9300      	str	r3, [sp, #0]
 8012896:	23b4      	movs	r3, #180	; 0xb4
 8012898:	f44f 7281 	mov.w	r2, #258	; 0x102
 801289c:	210e      	movs	r1, #14
 801289e:	f7fe f825 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80128a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80128a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 80128b0:	22ff      	movs	r2, #255	; 0xff
 80128b2:	21ff      	movs	r1, #255	; 0xff
 80128b4:	20ff      	movs	r0, #255	; 0xff
 80128b6:	f7fe fdd1 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128ba:	4603      	mov	r3, r0
 80128bc:	22ff      	movs	r2, #255	; 0xff
 80128be:	4619      	mov	r1, r3
 80128c0:	4620      	mov	r0, r4
 80128c2:	f005 fe32 	bl	801852a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 80128c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80128ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f203 622c 	addw	r2, r3, #1580	; 0x62c
 80128d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80128d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80128e2:	4619      	mov	r1, r3
 80128e4:	4610      	mov	r0, r2
 80128e6:	f005 fe89 	bl	80185fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 80128ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80128ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80128f8:	2205      	movs	r2, #5
 80128fa:	2100      	movs	r1, #0
 80128fc:	4618      	mov	r0, r3
 80128fe:	f001 f993 	bl	8013c28 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8012902:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012906:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012910:	2205      	movs	r2, #5
 8012912:	21b4      	movs	r1, #180	; 0xb4
 8012914:	4618      	mov	r0, r3
 8012916:	f001 f9ad 	bl	8013c74 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 801291a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801291e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012928:	2102      	movs	r1, #2
 801292a:	4618      	mov	r0, r3
 801292c:	f001 f9c8 	bl	8013cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8012930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012934:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801293e:	2100      	movs	r1, #0
 8012940:	4618      	mov	r0, r3
 8012942:	f006 f975 	bl	8018c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8012946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801294a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f503 60d7 	add.w	r0, r3, #1720	; 0x6b8
 8012954:	230a      	movs	r3, #10
 8012956:	9300      	str	r3, [sp, #0]
 8012958:	23b4      	movs	r3, #180	; 0xb4
 801295a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801295e:	f240 111f 	movw	r1, #287	; 0x11f
 8012962:	f7fd ffc3 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801296a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 8012974:	22ff      	movs	r2, #255	; 0xff
 8012976:	21ff      	movs	r1, #255	; 0xff
 8012978:	20ff      	movs	r0, #255	; 0xff
 801297a:	f7fe fd6f 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801297e:	4603      	mov	r3, r0
 8012980:	22ff      	movs	r2, #255	; 0xff
 8012982:	4619      	mov	r1, r3
 8012984:	4620      	mov	r0, r4
 8012986:	f005 fdd0 	bl	801852a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 801298a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801298e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f503 62d7 	add.w	r2, r3, #1720	; 0x6b8
 8012998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801299c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80129a6:	4619      	mov	r1, r3
 80129a8:	4610      	mov	r0, r2
 80129aa:	f005 fe27 	bl	80185fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 80129ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80129bc:	2205      	movs	r2, #5
 80129be:	2100      	movs	r1, #0
 80129c0:	4618      	mov	r0, r3
 80129c2:	f001 f931 	bl	8013c28 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 80129c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80129d4:	2205      	movs	r2, #5
 80129d6:	21b4      	movs	r1, #180	; 0xb4
 80129d8:	4618      	mov	r0, r3
 80129da:	f001 f94b 	bl	8013c74 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 80129de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80129ec:	2102      	movs	r1, #2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f001 f966 	bl	8013cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80129f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012a02:	2100      	movs	r1, #0
 8012a04:	4618      	mov	r0, r3
 8012a06:	f006 f913 	bl	8018c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 253, 60, 21);
 8012a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f203 7044 	addw	r0, r3, #1860	; 0x744
 8012a18:	2315      	movs	r3, #21
 8012a1a:	9300      	str	r3, [sp, #0]
 8012a1c:	233c      	movs	r3, #60	; 0x3c
 8012a1e:	22fd      	movs	r2, #253	; 0xfd
 8012a20:	21d2      	movs	r1, #210	; 0xd2
 8012a22:	f7fd ff63 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8012a34:	22ff      	movs	r2, #255	; 0xff
 8012a36:	21ff      	movs	r1, #255	; 0xff
 8012a38:	20ff      	movs	r0, #255	; 0xff
 8012a3a:	f7fe fd0f 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	4619      	mov	r1, r3
 8012a42:	4620      	mov	r0, r4
 8012a44:	f7fe fa21 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8012a48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8012a56:	2100      	movs	r1, #0
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fe fa69 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8012a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f603 4426 	addw	r4, r3, #3110	; 0xc26
 8012a6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012a70:	2118      	movs	r1, #24
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fe f9a0 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012a78:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fe f9ab 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012a82:	4603      	mov	r3, r0
 8012a84:	4ae9      	ldr	r2, [pc, #932]	; (8012e2c <_ZN12MainViewBaseC1Ev+0x1980>)
 8012a86:	2105      	movs	r1, #5
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f009 fe27 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8012a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f203 7244 	addw	r2, r3, #1860	; 0x744
 8012a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012aa0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f603 4326 	addw	r3, r3, #3110	; 0xc26
 8012aaa:	4619      	mov	r1, r3
 8012aac:	4610      	mov	r0, r2
 8012aae:	f7fe fac7 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8012ab2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ab6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8012ac0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012ac4:	2117      	movs	r1, #23
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fe f976 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012acc:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f006 fa59 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8012ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ada:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	2101      	movs	r1, #1
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fd ff4a 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8012aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012af2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 8012afc:	2337      	movs	r3, #55	; 0x37
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8012b04:	2202      	movs	r2, #2
 8012b06:	2102      	movs	r1, #2
 8012b08:	f004 f98e 	bl	8016e28 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8012b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	9300      	str	r3, [sp, #0]
 8012b1e:	2300      	movs	r3, #0
 8012b20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012b24:	2100      	movs	r1, #0
 8012b26:	f004 faad 	bl	8017084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8012b2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012b38:	2100      	movs	r1, #0
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f004 f884 	bl	8016c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8012b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012b4e:	2101      	movs	r1, #1
 8012b50:	4618      	mov	r0, r3
 8012b52:	f004 f8c4 	bl	8016cde <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8012b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012b64:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f004 f975 	bl	8016e58 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8012b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f004 f896 	bl	8016cb0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(11, 4, 55, 22);
 8012b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f603 006c 	addw	r0, r3, #2156	; 0x86c
 8012b92:	2316      	movs	r3, #22
 8012b94:	9300      	str	r3, [sp, #0]
 8012b96:	2337      	movs	r3, #55	; 0x37
 8012b98:	2204      	movs	r2, #4
 8012b9a:	210b      	movs	r1, #11
 8012b9c:	f7fd fea6 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ba4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 8012bae:	22ff      	movs	r2, #255	; 0xff
 8012bb0:	21ff      	movs	r1, #255	; 0xff
 8012bb2:	20ff      	movs	r0, #255	; 0xff
 8012bb4:	f7fe fc52 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f7fe f964 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8012bc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fe f9ac 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8012bd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012bdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f503 6443 	add.w	r4, r3, #3120	; 0xc30
 8012be6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012bea:	211a      	movs	r1, #26
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe f8e3 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012bf2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f7fe f8ee 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	4a8b      	ldr	r2, [pc, #556]	; (8012e2c <_ZN12MainViewBaseC1Ev+0x1980>)
 8012c00:	2105      	movs	r1, #5
 8012c02:	4620      	mov	r0, r4
 8012c04:	f009 fd6a 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8012c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f603 026c 	addw	r2, r3, #2156	; 0x86c
 8012c16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8012c24:	4619      	mov	r1, r3
 8012c26:	4610      	mov	r0, r2
 8012c28:	f7fe fa0a 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8012c2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 8012c3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012c3e:	2119      	movs	r1, #25
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fe f8b9 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012c46:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f006 f99c 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(61, 15);
 8012c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012c5e:	220f      	movs	r2, #15
 8012c60:	213d      	movs	r1, #61	; 0x3d
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7fd fe8d 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 8012c76:	22ff      	movs	r2, #255	; 0xff
 8012c78:	21ff      	movs	r1, #255	; 0xff
 8012c7a:	20ff      	movs	r0, #255	; 0xff
 8012c7c:	f7fe fbee 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c80:	4603      	mov	r3, r0
 8012c82:	4619      	mov	r1, r3
 8012c84:	4620      	mov	r0, r4
 8012c86:	f7fe f900 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8012c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012c98:	2100      	movs	r1, #0
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fe f948 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012ca0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ca4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 8012cae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012cb2:	211b      	movs	r1, #27
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fe f87f 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012cba:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f006 f962 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(195, 158, 96, 60);
 8012cc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012cc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f603 00d8 	addw	r0, r3, #2264	; 0x8d8
 8012cd2:	233c      	movs	r3, #60	; 0x3c
 8012cd4:	9300      	str	r3, [sp, #0]
 8012cd6:	2360      	movs	r3, #96	; 0x60
 8012cd8:	229e      	movs	r2, #158	; 0x9e
 8012cda:	21c3      	movs	r1, #195	; 0xc3
 8012cdc:	f7fd fe06 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ce4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8012cee:	22ff      	movs	r2, #255	; 0xff
 8012cf0:	21ff      	movs	r1, #255	; 0xff
 8012cf2:	20ff      	movs	r0, #255	; 0xff
 8012cf4:	f7fe fbb2 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f7fe f8c4 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8012d02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8012d10:	2100      	movs	r1, #0
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fe f90c 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f603 443a 	addw	r4, r3, #3130	; 0xc3a
 8012d26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012d2a:	211d      	movs	r1, #29
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fe f843 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012d32:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7fe f84e 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	4a3b      	ldr	r2, [pc, #236]	; (8012e2c <_ZN12MainViewBaseC1Ev+0x1980>)
 8012d40:	2105      	movs	r1, #5
 8012d42:	4620      	mov	r0, r4
 8012d44:	f009 fcca 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8012d48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f603 02d8 	addw	r2, r3, #2264	; 0x8d8
 8012d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f603 433a 	addw	r3, r3, #3130	; 0xc3a
 8012d64:	4619      	mov	r1, r3
 8012d66:	4610      	mov	r0, r2
 8012d68:	f7fe f96a 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8012d6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8012d7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012d7e:	211c      	movs	r1, #28
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7fe f819 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012d86:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f006 f8fc 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(400, 156, 68, 42);
 8012d90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f503 6011 	add.w	r0, r3, #2320	; 0x910
 8012d9e:	232a      	movs	r3, #42	; 0x2a
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	2344      	movs	r3, #68	; 0x44
 8012da4:	229c      	movs	r2, #156	; 0x9c
 8012da6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012daa:	f7fd fd9f 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012dae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012dbc:	22ff      	movs	r2, #255	; 0xff
 8012dbe:	21ff      	movs	r1, #255	; 0xff
 8012dc0:	20ff      	movs	r0, #255	; 0xff
 8012dc2:	f7fe fb4b 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	4619      	mov	r1, r3
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f7fe f85d 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8012dd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012dd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8012dde:	2100      	movs	r1, #0
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fe f8a5 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8012de6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f603 4444 	addw	r4, r3, #3140	; 0xc44
 8012df4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012df8:	2128      	movs	r1, #40	; 0x28
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7fd ffdc 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012e00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fd ffe7 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	4a07      	ldr	r2, [pc, #28]	; (8012e2c <_ZN12MainViewBaseC1Ev+0x1980>)
 8012e0e:	2105      	movs	r1, #5
 8012e10:	4620      	mov	r0, r4
 8012e12:	f009 fc63 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8012e16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 8012e24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e28:	e002      	b.n	8012e30 <_ZN12MainViewBaseC1Ev+0x1984>
 8012e2a:	bf00      	nop
 8012e2c:	08027cf0 	.word	0x08027cf0
 8012e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	4610      	mov	r0, r2
 8012e3e:	f7fe f8ff 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8012e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012e50:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e54:	2127      	movs	r1, #39	; 0x27
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7fd ffae 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012e5c:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8012e60:	4620      	mov	r0, r4
 8012e62:	f006 f891 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(397, 199);
 8012e66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012e74:	22c7      	movs	r2, #199	; 0xc7
 8012e76:	f240 118d 	movw	r1, #397	; 0x18d
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fd fd81 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012e80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012e8e:	2200      	movs	r2, #0
 8012e90:	21dc      	movs	r1, #220	; 0xdc
 8012e92:	20ff      	movs	r0, #255	; 0xff
 8012e94:	f7fe fae2 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f7fd fff4 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8012ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fe f83c 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8012eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012ec6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012eca:	2129      	movs	r1, #41	; 0x29
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7fd ff73 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012ed2:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f006 f856 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8012edc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 8012eea:	2311      	movs	r3, #17
 8012eec:	9300      	str	r3, [sp, #0]
 8012eee:	2313      	movs	r3, #19
 8012ef0:	22e2      	movs	r2, #226	; 0xe2
 8012ef2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8012ef6:	f7fd fcf9 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8012efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012efe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012f08:	220d      	movs	r2, #13
 8012f0a:	210d      	movs	r1, #13
 8012f0c:	200d      	movs	r0, #13
 8012f0e:	f7fe faa5 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012f12:	4603      	mov	r3, r0
 8012f14:	4619      	mov	r1, r3
 8012f16:	4620      	mov	r0, r4
 8012f18:	f7fd ffb7 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8012f1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fd ffff 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8012f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f603 444e 	addw	r4, r3, #3150	; 0xc4e
 8012f40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012f44:	212b      	movs	r1, #43	; 0x2b
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7fd ff36 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012f4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fd ff41 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012f56:	4603      	mov	r3, r0
 8012f58:	4ae8      	ldr	r2, [pc, #928]	; (80132fc <_ZN12MainViewBaseC1Ev+0x1e50>)
 8012f5a:	2105      	movs	r1, #5
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	f009 fbbd 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8012f62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f603 127c 	addw	r2, r3, #2428	; 0x97c
 8012f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f603 434e 	addw	r3, r3, #3150	; 0xc4e
 8012f7e:	4619      	mov	r1, r3
 8012f80:	4610      	mov	r0, r2
 8012f82:	f7fe f85d 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8012f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012f94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012f98:	212a      	movs	r1, #42	; 0x2a
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fd ff0c 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8012fa0:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	f005 ffef 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinFuelPValue.setPosition(432, 199, 43, 19);
 8012faa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012fae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f603 10b4 	addw	r0, r3, #2484	; 0x9b4
 8012fb8:	2313      	movs	r3, #19
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	232b      	movs	r3, #43	; 0x2b
 8012fbe:	22c7      	movs	r2, #199	; 0xc7
 8012fc0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8012fc4:	f7fd fc92 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MinFuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012fcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 8012fd6:	22b8      	movs	r2, #184	; 0xb8
 8012fd8:	21b8      	movs	r1, #184	; 0xb8
 8012fda:	20b9      	movs	r0, #185	; 0xb9
 8012fdc:	f7fe fa3e 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f7fd ff50 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinFuelPValue.setLinespacing(0);
 8012fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fd ff98 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 8013000:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013004:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f603 4458 	addw	r4, r3, #3160	; 0xc58
 801300e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013012:	212d      	movs	r1, #45	; 0x2d
 8013014:	4618      	mov	r0, r3
 8013016:	f7fd fecf 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801301a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801301e:	4618      	mov	r0, r3
 8013020:	f7fd feda 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8013024:	4603      	mov	r3, r0
 8013026:	4ab5      	ldr	r2, [pc, #724]	; (80132fc <_ZN12MainViewBaseC1Ev+0x1e50>)
 8013028:	2105      	movs	r1, #5
 801302a:	4620      	mov	r0, r4
 801302c:	f009 fb56 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinFuelPValue.setWildcard(MinFuelPValueBuffer);
 8013030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f603 12b4 	addw	r2, r3, #2484	; 0x9b4
 801303e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013042:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7fd fff6 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinFuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 8013054:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 8013062:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013066:	212c      	movs	r1, #44	; 0x2c
 8013068:	4618      	mov	r0, r3
 801306a:	f7fd fea5 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801306e:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8013072:	4620      	mov	r0, r4
 8013074:	f005 ff88 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxOilTValue.setPosition(353, 128, 43, 20);
 8013078:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801307c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 8013086:	2314      	movs	r3, #20
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	232b      	movs	r3, #43	; 0x2b
 801308c:	2280      	movs	r2, #128	; 0x80
 801308e:	f240 1161 	movw	r1, #353	; 0x161
 8013092:	f7fd fc2b 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxOilTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8013096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801309a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 80130a4:	22b8      	movs	r2, #184	; 0xb8
 80130a6:	21b8      	movs	r1, #184	; 0xb8
 80130a8:	20b9      	movs	r0, #185	; 0xb9
 80130aa:	f7fe f9d7 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80130ae:	4603      	mov	r3, r0
 80130b0:	4619      	mov	r1, r3
 80130b2:	4620      	mov	r0, r4
 80130b4:	f7fd fee9 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxOilTValue.setLinespacing(0);
 80130b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80130bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 80130c6:	2100      	movs	r1, #0
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7fd ff31 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID81).getText());
 80130ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80130d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f603 4462 	addw	r4, r3, #3170	; 0xc62
 80130dc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80130e0:	212f      	movs	r1, #47	; 0x2f
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fd fe68 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80130e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fd fe73 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80130f2:	4603      	mov	r3, r0
 80130f4:	4a81      	ldr	r2, [pc, #516]	; (80132fc <_ZN12MainViewBaseC1Ev+0x1e50>)
 80130f6:	2105      	movs	r1, #5
 80130f8:	4620      	mov	r0, r4
 80130fa:	f009 faef 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxOilTValue.setWildcard(MaxOilTValueBuffer);
 80130fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f603 12ec 	addw	r2, r3, #2540	; 0x9ec
 801310c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013110:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f603 4362 	addw	r3, r3, #3170	; 0xc62
 801311a:	4619      	mov	r1, r3
 801311c:	4610      	mov	r0, r2
 801311e:	f7fd ff8f 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxOilTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID80));
 8013122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013126:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8013130:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013134:	212e      	movs	r1, #46	; 0x2e
 8013136:	4618      	mov	r0, r3
 8013138:	f7fd fe3e 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801313c:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8013140:	4620      	mov	r0, r4
 8013142:	f005 ff21 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxCltValue.setPosition(233, 220, 43, 20);
 8013146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801314a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	f603 2024 	addw	r0, r3, #2596	; 0xa24
 8013154:	2314      	movs	r3, #20
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	232b      	movs	r3, #43	; 0x2b
 801315a:	22dc      	movs	r2, #220	; 0xdc
 801315c:	21e9      	movs	r1, #233	; 0xe9
 801315e:	f7fd fbc5 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxCltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8013162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013166:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 8013170:	22b8      	movs	r2, #184	; 0xb8
 8013172:	21b8      	movs	r1, #184	; 0xb8
 8013174:	20b9      	movs	r0, #185	; 0xb9
 8013176:	f7fe f971 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801317a:	4603      	mov	r3, r0
 801317c:	4619      	mov	r1, r3
 801317e:	4620      	mov	r0, r4
 8013180:	f7fd fe83 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxCltValue.setLinespacing(0);
 8013184:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013188:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8013192:	2100      	movs	r1, #0
 8013194:	4618      	mov	r0, r3
 8013196:	f7fd fecb 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID83).getText());
 801319a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801319e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f603 446c 	addw	r4, r3, #3180	; 0xc6c
 80131a8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80131ac:	2131      	movs	r1, #49	; 0x31
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7fd fe02 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80131b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7fd fe0d 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80131be:	4603      	mov	r3, r0
 80131c0:	4a4e      	ldr	r2, [pc, #312]	; (80132fc <_ZN12MainViewBaseC1Ev+0x1e50>)
 80131c2:	2105      	movs	r1, #5
 80131c4:	4620      	mov	r0, r4
 80131c6:	f009 fa89 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxCltValue.setWildcard(MaxCltValueBuffer);
 80131ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80131ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	f603 2224 	addw	r2, r3, #2596	; 0xa24
 80131d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80131dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f603 436c 	addw	r3, r3, #3180	; 0xc6c
 80131e6:	4619      	mov	r1, r3
 80131e8:	4610      	mov	r0, r2
 80131ea:	f7fd ff29 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxCltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID82));
 80131ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80131f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 80131fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013200:	2130      	movs	r1, #48	; 0x30
 8013202:	4618      	mov	r0, r3
 8013204:	f7fd fdd8 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8013208:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 801320c:	4620      	mov	r0, r4
 801320e:	f005 febb 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxRPMValue.setPosition(82, 15, 36, 13);
 8013212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013216:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 8013220:	230d      	movs	r3, #13
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	2324      	movs	r3, #36	; 0x24
 8013226:	220f      	movs	r2, #15
 8013228:	2152      	movs	r1, #82	; 0x52
 801322a:	f7fd fb5f 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxRPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
 801322e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013232:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 801323c:	2299      	movs	r2, #153	; 0x99
 801323e:	2199      	movs	r1, #153	; 0x99
 8013240:	2099      	movs	r0, #153	; 0x99
 8013242:	f7fe f90b 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013246:	4603      	mov	r3, r0
 8013248:	4619      	mov	r1, r3
 801324a:	4620      	mov	r0, r4
 801324c:	f7fd fe1d 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxRPMValue.setLinespacing(0);
 8013250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 801325e:	2100      	movs	r1, #0
 8013260:	4618      	mov	r0, r3
 8013262:	f7fd fe65 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID85).getText());
 8013266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801326a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f603 4476 	addw	r4, r3, #3190	; 0xc76
 8013274:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013278:	2133      	movs	r1, #51	; 0x33
 801327a:	4618      	mov	r0, r3
 801327c:	f7fd fd9c 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8013280:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013284:	4618      	mov	r0, r3
 8013286:	f7fd fda7 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801328a:	4603      	mov	r3, r0
 801328c:	4a1b      	ldr	r2, [pc, #108]	; (80132fc <_ZN12MainViewBaseC1Ev+0x1e50>)
 801328e:	2105      	movs	r1, #5
 8013290:	4620      	mov	r0, r4
 8013292:	f009 fa23 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxRPMValue.setWildcard(MaxRPMValueBuffer);
 8013296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801329a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 80132a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80132a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f603 4376 	addw	r3, r3, #3190	; 0xc76
 80132b2:	4619      	mov	r1, r3
 80132b4:	4610      	mov	r0, r2
 80132b6:	f7fd fec3 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxRPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID84));
 80132ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80132be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 80132c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80132cc:	2132      	movs	r1, #50	; 0x32
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fd fd72 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80132d4:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 80132d8:	4620      	mov	r0, r4
 80132da:	f005 fe55 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxSpeedValue.setPosition(61, 127, 43, 20);
 80132de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80132e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 80132ec:	2314      	movs	r3, #20
 80132ee:	9300      	str	r3, [sp, #0]
 80132f0:	232b      	movs	r3, #43	; 0x2b
 80132f2:	227f      	movs	r2, #127	; 0x7f
 80132f4:	213d      	movs	r1, #61	; 0x3d
 80132f6:	f7fd faf9 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80132fa:	e001      	b.n	8013300 <_ZN12MainViewBaseC1Ev+0x1e54>
 80132fc:	08027cf0 	.word	0x08027cf0
    MaxSpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8013300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013304:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 801330e:	22b8      	movs	r2, #184	; 0xb8
 8013310:	21b8      	movs	r1, #184	; 0xb8
 8013312:	20b9      	movs	r0, #185	; 0xb9
 8013314:	f7fe f8a2 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013318:	4603      	mov	r3, r0
 801331a:	4619      	mov	r1, r3
 801331c:	4620      	mov	r0, r4
 801331e:	f7fd fdb4 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxSpeedValue.setLinespacing(0);
 8013322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013326:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8013330:	2100      	movs	r1, #0
 8013332:	4618      	mov	r0, r3
 8013334:	f7fd fdfc 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID89).getText());
 8013338:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801333c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f503 6448 	add.w	r4, r3, #3200	; 0xc80
 8013346:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801334a:	2135      	movs	r1, #53	; 0x35
 801334c:	4618      	mov	r0, r3
 801334e:	f7fd fd33 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8013352:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013356:	4618      	mov	r0, r3
 8013358:	f7fd fd3e 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801335c:	4603      	mov	r3, r0
 801335e:	4ae9      	ldr	r2, [pc, #932]	; (8013704 <_ZN12MainViewBaseC1Ev+0x2258>)
 8013360:	2105      	movs	r1, #5
 8013362:	4620      	mov	r0, r4
 8013364:	f009 f9ba 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxSpeedValue.setWildcard(MaxSpeedValueBuffer);
 8013368:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801336c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8013376:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801337a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8013384:	4619      	mov	r1, r3
 8013386:	4610      	mov	r0, r2
 8013388:	f7fd fe5a 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxSpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID88));
 801338c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013390:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 801339a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801339e:	2134      	movs	r1, #52	; 0x34
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fd fd09 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80133a6:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 80133aa:	4620      	mov	r0, r4
 80133ac:	f005 fdec 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelTValue.setPosition(321, 156, 68, 42);
 80133b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80133b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f603 20cc 	addw	r0, r3, #2764	; 0xacc
 80133be:	232a      	movs	r3, #42	; 0x2a
 80133c0:	9300      	str	r3, [sp, #0]
 80133c2:	2344      	movs	r3, #68	; 0x44
 80133c4:	229c      	movs	r2, #156	; 0x9c
 80133c6:	f240 1141 	movw	r1, #321	; 0x141
 80133ca:	f7fd fa8f 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80133ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80133d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 80133dc:	22ff      	movs	r2, #255	; 0xff
 80133de:	21ff      	movs	r1, #255	; 0xff
 80133e0:	20ff      	movs	r0, #255	; 0xff
 80133e2:	f7fe f83b 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133e6:	4603      	mov	r3, r0
 80133e8:	4619      	mov	r1, r3
 80133ea:	4620      	mov	r0, r4
 80133ec:	f7fd fd4d 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelTValue.setLinespacing(0);
 80133f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80133f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 80133fe:	2100      	movs	r1, #0
 8013400:	4618      	mov	r0, r3
 8013402:	f7fd fd95 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelTValueBuffer, FUELTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID92).getText());
 8013406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801340a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f603 448a 	addw	r4, r3, #3210	; 0xc8a
 8013414:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013418:	2138      	movs	r1, #56	; 0x38
 801341a:	4618      	mov	r0, r3
 801341c:	f7fd fccc 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8013420:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013424:	4618      	mov	r0, r3
 8013426:	f7fd fcd7 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801342a:	4603      	mov	r3, r0
 801342c:	4ab5      	ldr	r2, [pc, #724]	; (8013704 <_ZN12MainViewBaseC1Ev+0x2258>)
 801342e:	2105      	movs	r1, #5
 8013430:	4620      	mov	r0, r4
 8013432:	f009 f953 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelTValue.setWildcard(FuelTValueBuffer);
 8013436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801343a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f603 22cc 	addw	r2, r3, #2764	; 0xacc
 8013444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013448:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	f603 438a 	addw	r3, r3, #3210	; 0xc8a
 8013452:	4619      	mov	r1, r3
 8013454:	4610      	mov	r0, r2
 8013456:	f7fd fdf3 	bl	8011040 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID91));
 801345a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801345e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 8013468:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801346c:	2137      	movs	r1, #55	; 0x37
 801346e:	4618      	mov	r0, r3
 8013470:	f7fd fca2 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8013474:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8013478:	4620      	mov	r0, r4
 801347a:	f005 fd85 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelTDescriptor.setXY(330, 199);
 801347e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801348c:	22c7      	movs	r2, #199	; 0xc7
 801348e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8013492:	4618      	mov	r0, r3
 8013494:	f7fd fa75 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    FuelTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013498:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801349c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 80134a6:	2200      	movs	r2, #0
 80134a8:	21dc      	movs	r1, #220	; 0xdc
 80134aa:	20ff      	movs	r0, #255	; 0xff
 80134ac:	f7fd ffd6 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134b0:	4603      	mov	r3, r0
 80134b2:	4619      	mov	r1, r3
 80134b4:	4620      	mov	r0, r4
 80134b6:	f7fd fce8 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelTDescriptor.setLinespacing(0);
 80134ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 80134c8:	2100      	movs	r1, #0
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7fd fd30 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID93));
 80134d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 80134de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80134e2:	2139      	movs	r1, #57	; 0x39
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fd fc67 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80134ea:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 80134ee:	4620      	mov	r0, r4
 80134f0:	f005 fd4a 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BatIndicator.setXY(235, -1);
 80134f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8013502:	f04f 32ff 	mov.w	r2, #4294967295
 8013506:	21eb      	movs	r1, #235	; 0xeb
 8013508:	4618      	mov	r0, r3
 801350a:	f7fd fa3a 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    BatIndicator.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 3, 3));
 801350e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f603 3438 	addw	r4, r3, #2872	; 0xb38
 801351c:	2203      	movs	r2, #3
 801351e:	2103      	movs	r1, #3
 8013520:	20ff      	movs	r0, #255	; 0xff
 8013522:	f7fd ff9b 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013526:	4603      	mov	r3, r0
 8013528:	4619      	mov	r1, r3
 801352a:	4620      	mov	r0, r4
 801352c:	f7fd fcad 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatIndicator.setLinespacing(0);
 8013530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801353e:	2100      	movs	r1, #0
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd fcf5 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    BatIndicator.setTypedText(touchgfx::TypedText(T_SINGLEUSEID94));
 8013546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801354a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f603 3438 	addw	r4, r3, #2872	; 0xb38
 8013554:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013558:	213a      	movs	r1, #58	; 0x3a
 801355a:	4618      	mov	r0, r3
 801355c:	f7fd fc2c 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 8013560:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 8013564:	4620      	mov	r0, r4
 8013566:	f005 fd0f 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MilIndicator.setXY(124, -1);
 801356a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801356e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8013578:	f04f 32ff 	mov.w	r2, #4294967295
 801357c:	217c      	movs	r1, #124	; 0x7c
 801357e:	4618      	mov	r0, r3
 8013580:	f7fd f9ff 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    MilIndicator.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 0));
 8013584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013588:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f603 346c 	addw	r4, r3, #2924	; 0xb6c
 8013592:	2200      	movs	r2, #0
 8013594:	21ff      	movs	r1, #255	; 0xff
 8013596:	20ff      	movs	r0, #255	; 0xff
 8013598:	f7fd ff60 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801359c:	4603      	mov	r3, r0
 801359e:	4619      	mov	r1, r3
 80135a0:	4620      	mov	r0, r4
 80135a2:	f7fd fc72 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MilIndicator.setLinespacing(0);
 80135a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 80135b4:	2100      	movs	r1, #0
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fd fcba 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    MilIndicator.setTypedText(touchgfx::TypedText(T_SINGLEUSEID95));
 80135bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f603 346c 	addw	r4, r3, #2924	; 0xb6c
 80135ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135ce:	213b      	movs	r1, #59	; 0x3b
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fd fbf1 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 80135d6:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 80135da:	4620      	mov	r0, r4
 80135dc:	f005 fcd4 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OilIndicator.setXY(181, -1);
 80135e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80135ee:	f04f 32ff 	mov.w	r2, #4294967295
 80135f2:	21b5      	movs	r1, #181	; 0xb5
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fd f9c4 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
    OilIndicator.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
 80135fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 8013608:	2200      	movs	r2, #0
 801360a:	2100      	movs	r1, #0
 801360c:	20ff      	movs	r0, #255	; 0xff
 801360e:	f7fd ff25 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013612:	4603      	mov	r3, r0
 8013614:	4619      	mov	r1, r3
 8013616:	4620      	mov	r0, r4
 8013618:	f7fd fc37 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OilIndicator.setLinespacing(0);
 801361c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013620:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 801362a:	2100      	movs	r1, #0
 801362c:	4618      	mov	r0, r3
 801362e:	f7fd fc7f 	bl	8010f30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    OilIndicator.setTypedText(touchgfx::TypedText(T_SINGLEUSEID96));
 8013632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013636:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 8013640:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8013644:	213c      	movs	r1, #60	; 0x3c
 8013646:	4618      	mov	r0, r3
 8013648:	f7fd fbb6 	bl	8010db8 <_ZN8touchgfx9TypedTextC1Et>
 801364c:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 8013650:	4620      	mov	r0, r4
 8013652:	f005 fc99 	bl	8018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8013656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801365a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013664:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	3340      	adds	r3, #64	; 0x40
 801366c:	4619      	mov	r1, r3
 801366e:	4610      	mov	r0, r2
 8013670:	f7fd faea 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8013674:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013678:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013682:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	3370      	adds	r3, #112	; 0x70
 801368a:	4619      	mov	r1, r3
 801368c:	4610      	mov	r0, r2
 801368e:	f7fd fadb 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8013692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013696:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	33a4      	adds	r3, #164	; 0xa4
 80136a8:	4619      	mov	r1, r3
 80136aa:	4610      	mov	r0, r2
 80136ac:	f7fd facc 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80136b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	33d8      	adds	r3, #216	; 0xd8
 80136c6:	4619      	mov	r1, r3
 80136c8:	4610      	mov	r0, r2
 80136ca:	f7fd fabd 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 80136ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80136e6:	4619      	mov	r1, r3
 80136e8:	4610      	mov	r0, r2
 80136ea:	f7fd faad 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SpeedValue);
 80136ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	e001      	b.n	8013708 <_ZN12MainViewBaseC1Ev+0x225c>
 8013704:	08027cf0 	.word	0x08027cf0
 8013708:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801370c:	4619      	mov	r1, r3
 801370e:	4610      	mov	r0, r2
 8013710:	f7fd fa9a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8013714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013718:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013722:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801372c:	4619      	mov	r1, r3
 801372e:	4610      	mov	r0, r2
 8013730:	f7fd fa8a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8013734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013738:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013742:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801374c:	4619      	mov	r1, r3
 801374e:	4610      	mov	r0, r2
 8013750:	f7fd fa7a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8013754:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013758:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013762:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801376c:	4619      	mov	r1, r3
 801376e:	4610      	mov	r0, r2
 8013770:	f7fd fa6a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8013774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801378c:	4619      	mov	r1, r3
 801378e:	4610      	mov	r0, r2
 8013790:	f7fd fa5a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8013794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013798:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80137ac:	4619      	mov	r1, r3
 80137ae:	4610      	mov	r0, r2
 80137b0:	f7fd fa4a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80137b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80137cc:	4619      	mov	r1, r3
 80137ce:	4610      	mov	r0, r2
 80137d0:	f7fd fa3a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80137d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80137ec:	4619      	mov	r1, r3
 80137ee:	4610      	mov	r0, r2
 80137f0:	f7fd fa2a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80137f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013802:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801380c:	4619      	mov	r1, r3
 801380e:	4610      	mov	r0, r2
 8013810:	f7fd fa1a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8013814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013818:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801382c:	4619      	mov	r1, r3
 801382e:	4610      	mov	r0, r2
 8013830:	f7fd fa0a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8013834:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013838:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013842:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801384c:	4619      	mov	r1, r3
 801384e:	4610      	mov	r0, r2
 8013850:	f7fd f9fa 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8013854:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013858:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801385c:	681a      	ldr	r2, [r3, #0]
 801385e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013862:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801386c:	4619      	mov	r1, r3
 801386e:	4610      	mov	r0, r2
 8013870:	f7fd f9ea 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8013874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013878:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801388c:	4619      	mov	r1, r3
 801388e:	4610      	mov	r0, r2
 8013890:	f7fd f9da 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8013894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013898:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801389c:	681a      	ldr	r2, [r3, #0]
 801389e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80138ac:	4619      	mov	r1, r3
 80138ae:	4610      	mov	r0, r2
 80138b0:	f7fd f9ca 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80138b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138bc:	681a      	ldr	r2, [r3, #0]
 80138be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80138cc:	4619      	mov	r1, r3
 80138ce:	4610      	mov	r0, r2
 80138d0:	f7fd f9ba 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80138d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80138ec:	4619      	mov	r1, r3
 80138ee:	4610      	mov	r0, r2
 80138f0:	f7fd f9aa 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80138f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013902:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801390c:	4619      	mov	r1, r3
 801390e:	4610      	mov	r0, r2
 8013910:	f7fd f99a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8013914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801392c:	4619      	mov	r1, r3
 801392e:	4610      	mov	r0, r2
 8013930:	f7fd f98a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8013934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013942:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801394c:	4619      	mov	r1, r3
 801394e:	4610      	mov	r0, r2
 8013950:	f7fd f97a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8013954:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013962:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801396c:	4619      	mov	r1, r3
 801396e:	4610      	mov	r0, r2
 8013970:	f7fd f96a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8013974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013978:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013982:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f7fd f95a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8013994:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013998:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80139ac:	4619      	mov	r1, r3
 80139ae:	4610      	mov	r0, r2
 80139b0:	f7fd f94a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80139b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80139cc:	4619      	mov	r1, r3
 80139ce:	4610      	mov	r0, r2
 80139d0:	f7fd f93a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 80139d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139dc:	681a      	ldr	r2, [r3, #0]
 80139de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80139ec:	4619      	mov	r1, r3
 80139ee:	4610      	mov	r0, r2
 80139f0:	f7fd f92a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80139f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	4610      	mov	r0, r2
 8013a10:	f7fd f91a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8013a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	4610      	mov	r0, r2
 8013a30:	f7fd f90a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8013a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8013a4c:	4619      	mov	r1, r3
 8013a4e:	4610      	mov	r0, r2
 8013a50:	f7fd f8fa 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8013a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7fd f8ea 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8013a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	4610      	mov	r0, r2
 8013a90:	f7fd f8da 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinFuelPValue);
 8013a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013a98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8013aac:	4619      	mov	r1, r3
 8013aae:	4610      	mov	r0, r2
 8013ab0:	f7fd f8ca 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxOilTValue);
 8013ab4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013ac2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8013acc:	4619      	mov	r1, r3
 8013ace:	4610      	mov	r0, r2
 8013ad0:	f7fd f8ba 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxCltValue);
 8013ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013ad8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013adc:	681a      	ldr	r2, [r3, #0]
 8013ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013ae2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8013aec:	4619      	mov	r1, r3
 8013aee:	4610      	mov	r0, r2
 8013af0:	f7fd f8aa 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxRPMValue);
 8013af4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013af8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	4610      	mov	r0, r2
 8013b10:	f7fd f89a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxSpeedValue);
 8013b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4610      	mov	r0, r2
 8013b30:	f7fd f88a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelTValue);
 8013b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b3c:	681a      	ldr	r2, [r3, #0]
 8013b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	4610      	mov	r0, r2
 8013b50:	f7fd f87a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelTDescriptor);
 8013b54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	4610      	mov	r0, r2
 8013b70:	f7fd f86a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatIndicator);
 8013b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4610      	mov	r0, r2
 8013b90:	f7fd f85a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MilIndicator);
 8013b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013b98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013ba2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8013bac:	4619      	mov	r1, r3
 8013bae:	4610      	mov	r0, r2
 8013bb0:	f7fd f84a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OilIndicator);
 8013bb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013bb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013bc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4610      	mov	r0, r2
 8013bd0:	f7fd f83a 	bl	8010c48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013bd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	4618      	mov	r0, r3
 8013be0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd90      	pop	{r4, r7, pc}

08013be8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8013be8:	b480      	push	{r7}
 8013bea:	b083      	sub	sp, #12
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]

}
 8013bf0:	bf00      	nop
 8013bf2:	370c      	adds	r7, #12
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr

08013bfc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f007 fca2 	bl	801b550 <_ZN8touchgfx6ScreenC1Ev>
 8013c0c:	4a05      	ldr	r2, [pc, #20]	; (8013c24 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2200      	movs	r2, #0
 8013c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3708      	adds	r7, #8
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	080282f4 	.word	0x080282f4

08013c28 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8013c28:	b590      	push	{r4, r7, lr}
 8013c2a:	b089      	sub	sp, #36	; 0x24
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	60f8      	str	r0, [r7, #12]
 8013c30:	60b9      	str	r1, [r7, #8]
 8013c32:	607a      	str	r2, [r7, #4]
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	015a      	lsls	r2, r3, #5
 8013c3c:	f107 0314 	add.w	r3, r7, #20
 8013c40:	4611      	mov	r1, r2
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fd fa2c 	bl	80110a0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	461c      	mov	r4, r3
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	61fb      	str	r3, [r7, #28]
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	015a      	lsls	r2, r3, #5
 8013c54:	f107 0310 	add.w	r3, r7, #16
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fd fa20 	bl	80110a0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013c60:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8013c62:	461a      	mov	r2, r3
 8013c64:	4621      	mov	r1, r4
 8013c66:	68f8      	ldr	r0, [r7, #12]
 8013c68:	f004 ffcc 	bl	8018c04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8013c6c:	bf00      	nop
 8013c6e:	3724      	adds	r7, #36	; 0x24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd90      	pop	{r4, r7, pc}

08013c74 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8013c74:	b590      	push	{r4, r7, lr}
 8013c76:	b089      	sub	sp, #36	; 0x24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	61bb      	str	r3, [r7, #24]
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	015a      	lsls	r2, r3, #5
 8013c88:	f107 0314 	add.w	r3, r7, #20
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fd fa06 	bl	80110a0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	461c      	mov	r4, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	61fb      	str	r3, [r7, #28]
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	015a      	lsls	r2, r3, #5
 8013ca0:	f107 0310 	add.w	r3, r7, #16
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fd f9fa 	bl	80110a0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013cac:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8013cae:	461a      	mov	r2, r3
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f004 ffb1 	bl	8018c1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8013cb8:	bf00      	nop
 8013cba:	3724      	adds	r7, #36	; 0x24
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd90      	pop	{r4, r7, pc}

08013cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b084      	sub	sp, #16
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	6039      	str	r1, [r7, #0]
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	60fb      	str	r3, [r7, #12]
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	015a      	lsls	r2, r3, #5
 8013cd2:	f107 0308 	add.w	r3, r7, #8
 8013cd6:	4611      	mov	r1, r2
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fd f9e1 	bl	80110a0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013cde:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f7fd f9f7 	bl	80110d6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8013ce8:	bf00      	nop
 8013cea:	3710      	adds	r7, #16
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	4a05      	ldr	r2, [pc, #20]	; (8013d10 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fd f965 	bl	8010fd0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	08029d94 	.word	0x08029d94

08013d14 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7ff ffe7 	bl	8013cf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013d22:	2138      	movs	r1, #56	; 0x38
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f012 fc43 	bl	80265b0 <_ZdlPvj>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	4a05      	ldr	r2, [pc, #20]	; (8013d54 <_ZN8touchgfx4LineD1Ev+0x20>)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	f004 fd37 	bl	80187b8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	08029b40 	.word	0x08029b40

08013d58 <_ZN8touchgfx4LineD0Ev>:
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff ffe7 	bl	8013d34 <_ZN8touchgfx4LineD1Ev>
 8013d66:	2174      	movs	r1, #116	; 0x74
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f012 fc21 	bl	80265b0 <_ZdlPvj>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	4618      	mov	r0, r3
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	4a05      	ldr	r2, [pc, #20]	; (8013d98 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7fd f9c7 	bl	801111c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	4618      	mov	r0, r3
 8013d92:	3708      	adds	r7, #8
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	08029844 	.word	0x08029844

08013d9c <_ZN8touchgfx13PainterRGB888D0Ev>:
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7ff ffe7 	bl	8013d78 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013daa:	2118      	movs	r1, #24
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f012 fbff 	bl	80265b0 <_ZdlPvj>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4618      	mov	r0, r3
 8013db6:	3708      	adds	r7, #8
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013dc0:	4b02      	ldr	r3, [pc, #8]	; (8013dcc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr
 8013dcc:	08028404 	.word	0x08028404

08013dd0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013dd4:	2303      	movs	r3, #3
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013de0:	b480      	push	{r7}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	4613      	mov	r3, r2
 8013dec:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8013dee:	4a07      	ldr	r2, [pc, #28]	; (8013e0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	6013      	str	r3, [r2, #0]
        fonts = f;
 8013df4:	4a06      	ldr	r2, [pc, #24]	; (8013e10 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8013dfa:	4a06      	ldr	r2, [pc, #24]	; (8013e14 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8013dfc:	88fb      	ldrh	r3, [r7, #6]
 8013dfe:	8013      	strh	r3, [r2, #0]
    }
 8013e00:	bf00      	nop
 8013e02:	3714      	adds	r7, #20
 8013e04:	46bd      	mov	sp, r7
 8013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0a:	4770      	bx	lr
 8013e0c:	2000c6cc 	.word	0x2000c6cc
 8013e10:	2000c6d4 	.word	0x2000c6d4
 8013e14:	2000c6d0 	.word	0x2000c6d0

08013e18 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8013e18:	b590      	push	{r4, r7, lr}
 8013e1a:	b085      	sub	sp, #20
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	4603      	mov	r3, r0
 8013e20:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8013e26:	88fb      	ldrh	r3, [r7, #6]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d127      	bne.n	8013e7c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8013e2c:	88fb      	ldrh	r3, [r7, #6]
 8013e2e:	4a1e      	ldr	r2, [pc, #120]	; (8013ea8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d016      	beq.n	8013e66 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8013e38:	88fb      	ldrh	r3, [r7, #6]
 8013e3a:	4a1b      	ldr	r2, [pc, #108]	; (8013ea8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e40:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	4413      	add	r3, r2
 8013e4a:	4a18      	ldr	r2, [pc, #96]	; (8013eac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013e4c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	68ba      	ldr	r2, [r7, #8]
 8013e54:	4413      	add	r3, r2
 8013e56:	4a16      	ldr	r2, [pc, #88]	; (8013eb0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013e58:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	689b      	ldr	r3, [r3, #8]
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	4413      	add	r3, r2
 8013e62:	60fb      	str	r3, [r7, #12]
 8013e64:	e00a      	b.n	8013e7c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8013e66:	4b11      	ldr	r3, [pc, #68]	; (8013eac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013e68:	4a12      	ldr	r2, [pc, #72]	; (8013eb4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8013e6a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8013e6c:	4a12      	ldr	r2, [pc, #72]	; (8013eb8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8013e6e:	4b10      	ldr	r3, [pc, #64]	; (8013eb0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013e70:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8013e72:	88fb      	ldrh	r3, [r7, #6]
 8013e74:	4a11      	ldr	r2, [pc, #68]	; (8013ebc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8013e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e7a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d00d      	beq.n	8013e9e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8013e82:	4a0f      	ldr	r2, [pc, #60]	; (8013ec0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8013e84:	88fb      	ldrh	r3, [r7, #6]
 8013e86:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013e88:	f000 f83e 	bl	8013f08 <_ZN17TypedTextDatabase8getFontsEv>
 8013e8c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8013e8e:	f000 f833 	bl	8013ef8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8013e92:	4603      	mov	r3, r0
 8013e94:	461a      	mov	r2, r3
 8013e96:	4621      	mov	r1, r4
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f7ff ffa1 	bl	8013de0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8013e9e:	bf00      	nop
 8013ea0:	3714      	adds	r7, #20
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd90      	pop	{r4, r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	20008dfc 	.word	0x20008dfc
 8013eac:	20008e04 	.word	0x20008e04
 8013eb0:	20008e08 	.word	0x20008e08
 8013eb4:	080631c4 	.word	0x080631c4
 8013eb8:	080630d0 	.word	0x080630d0
 8013ebc:	08063300 	.word	0x08063300
 8013ec0:	20008e00 	.word	0x20008e00

08013ec4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	460b      	mov	r3, r1
 8013ece:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8013ed0:	4b07      	ldr	r3, [pc, #28]	; (8013ef0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	4b07      	ldr	r3, [pc, #28]	; (8013ef4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8013ed6:	6819      	ldr	r1, [r3, #0]
 8013ed8:	887b      	ldrh	r3, [r7, #2]
 8013eda:	009b      	lsls	r3, r3, #2
 8013edc:	440b      	add	r3, r1
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	005b      	lsls	r3, r3, #1
 8013ee2:	4413      	add	r3, r2
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	370c      	adds	r7, #12
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	20008e04 	.word	0x20008e04
 8013ef4:	20008e08 	.word	0x20008e08

08013ef8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8013ef8:	b480      	push	{r7}
 8013efa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8013efc:	233d      	movs	r3, #61	; 0x3d
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8013f08:	b480      	push	{r7}
 8013f0a:	af00      	add	r7, sp, #0
    return _fonts;
 8013f0c:	4b02      	ldr	r3, [pc, #8]	; (8013f18 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr
 8013f18:	20008e0c 	.word	0x20008e0c

08013f1c <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d127      	bne.n	8013f7c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d122      	bne.n	8013f7c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_14_4bpp()),
 8013f36:	f7fb fd83 	bl	800fa40 <_Z25getFont_Asap_Bold_14_4bppv>
 8013f3a:	4603      	mov	r3, r0
};
 8013f3c:	4a11      	ldr	r2, [pc, #68]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f3e:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8013f40:	f7fb fe7a 	bl	800fc38 <_Z25getFont_Asap_Bold_40_4bppv>
 8013f44:	4603      	mov	r3, r0
};
 8013f46:	4a0f      	ldr	r2, [pc, #60]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f48:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8013f4a:	f7fb fe21 	bl	800fb90 <_Z25getFont_Asap_Bold_30_4bppv>
 8013f4e:	4603      	mov	r3, r0
};
 8013f50:	4a0c      	ldr	r2, [pc, #48]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f52:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8013f54:	f7fb fd20 	bl	800f998 <_Z25getFont_Asap_Bold_12_4bppv>
 8013f58:	4603      	mov	r3, r0
};
 8013f5a:	4a0a      	ldr	r2, [pc, #40]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f5c:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8013f5e:	f7fb febf 	bl	800fce0 <_Z25getFont_Asap_Bold_60_4bppv>
 8013f62:	4603      	mov	r3, r0
};
 8013f64:	4a07      	ldr	r2, [pc, #28]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f66:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8013f68:	f7fb fdbe 	bl	800fae8 <_Z25getFont_Asap_Bold_21_4bppv>
 8013f6c:	4603      	mov	r3, r0
};
 8013f6e:	4a05      	ldr	r2, [pc, #20]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f70:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8013f72:	f7fb fcbd 	bl	800f8f0 <_Z25getFont_Asap_Bold_10_4bppv>
 8013f76:	4603      	mov	r3, r0
};
 8013f78:	4a02      	ldr	r2, [pc, #8]	; (8013f84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013f7a:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 8013f7c:	bf00      	nop
 8013f7e:	3708      	adds	r7, #8
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	20008e0c 	.word	0x20008e0c

08013f88 <_GLOBAL__sub_I__fonts>:
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013f90:	2001      	movs	r0, #1
 8013f92:	f7ff ffc3 	bl	8013f1c <_Z41__static_initialization_and_destruction_0ii>
 8013f96:	bd80      	pop	{r7, pc}

08013f98 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	4a05      	ldr	r2, [pc, #20]	; (8013fb8 <_ZN19FrontendApplicationD1Ev+0x20>)
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	601a      	str	r2, [r3, #0]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7fc f93b 	bl	8010224 <_ZN23FrontendApplicationBaseD1Ev>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3708      	adds	r7, #8
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	08028448 	.word	0x08028448

08013fbc <_ZN19FrontendApplicationD0Ev>:
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f7ff ffe7 	bl	8013f98 <_ZN19FrontendApplicationD1Ev>
 8013fca:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f012 faee 	bl	80265b0 <_ZdlPvj>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3708      	adds	r7, #8
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}

08013fde <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b082      	sub	sp, #8
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013fec:	4618      	mov	r0, r3
 8013fee:	f000 fe33 	bl	8014c58 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f006 fa2f 	bl	801a458 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013ffa:	bf00      	nop
 8013ffc:	3708      	adds	r7, #8
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
	...

08014004 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	68b9      	ldr	r1, [r7, #8]
 8014016:	4618      	mov	r0, r3
 8014018:	f7fc f97e 	bl	8010318 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801401c:	4a03      	ldr	r2, [pc, #12]	; (801402c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	601a      	str	r2, [r3, #0]
{
}
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	4618      	mov	r0, r3
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	08028448 	.word	0x08028448

08014030 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
    {
    }
 8014038:	bf00      	nop
 801403a:	370c      	adds	r7, #12
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr

08014044 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    {
    }
 801404c:	bf00      	nop
 801404e:	370c      	adds	r7, #12
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr

08014058 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8014058:	b480      	push	{r7}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
    {
 8014060:	4a04      	ldr	r2, [pc, #16]	; (8014074 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	601a      	str	r2, [r3, #0]
    }
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4618      	mov	r0, r3
 801406a:	370c      	adds	r7, #12
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr
 8014074:	080284d4 	.word	0x080284d4

08014078 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
    }
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7ff ffe9 	bl	8014058 <_ZN8touchgfx9PresenterD1Ev>
 8014086:	2104      	movs	r1, #4
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f012 fa91 	bl	80265b0 <_ZdlPvj>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
    {
 80140a0:	4a04      	ldr	r2, [pc, #16]	; (80140b4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	601a      	str	r2, [r3, #0]
    }
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4618      	mov	r0, r3
 80140aa:	370c      	adds	r7, #12
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr
 80140b4:	080284d4 	.word	0x080284d4

080140b8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80140b8:	b480      	push	{r7}
 80140ba:	b083      	sub	sp, #12
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	4a06      	ldr	r2, [pc, #24]	; (80140dc <_ZN13ModelListenerC1Ev+0x24>)
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	601a      	str	r2, [r3, #0]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2200      	movs	r2, #0
 80140ca:	605a      	str	r2, [r3, #4]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	4618      	mov	r0, r3
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr
 80140da:	bf00      	nop
 80140dc:	080284bc 	.word	0x080284bc

080140e0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	4a04      	ldr	r2, [pc, #16]	; (80140fc <_ZN13ModelListenerD1Ev+0x1c>)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	601a      	str	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4618      	mov	r0, r3
 80140f2:	370c      	adds	r7, #12
 80140f4:	46bd      	mov	sp, r7
 80140f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fa:	4770      	bx	lr
 80140fc:	080284bc 	.word	0x080284bc

08014100 <_ZN13ModelListenerD0Ev>:
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7ff ffe9 	bl	80140e0 <_ZN13ModelListenerD1Ev>
 801410e:	2108      	movs	r1, #8
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f012 fa4d 	bl	80265b0 <_ZdlPvj>
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	4618      	mov	r0, r3
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8014120:	b480      	push	{r7}
 8014122:	b083      	sub	sp, #12
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
 801412a:	bf00      	nop
 801412c:	370c      	adds	r7, #12
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8014136:	b480      	push	{r7}
 8014138:	b083      	sub	sp, #12
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
 801413e:	6039      	str	r1, [r7, #0]
 8014140:	bf00      	nop
 8014142:	370c      	adds	r7, #12
 8014144:	46bd      	mov	sp, r7
 8014146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414a:	4770      	bx	lr

0801414c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	4a09      	ldr	r2, [pc, #36]	; (801417c <_ZN13MainPresenterD1Ev+0x30>)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	601a      	str	r2, [r3, #0]
 801415a:	4a09      	ldr	r2, [pc, #36]	; (8014180 <_ZN13MainPresenterD1Ev+0x34>)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	605a      	str	r2, [r3, #4]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3304      	adds	r3, #4
 8014164:	4618      	mov	r0, r3
 8014166:	f7ff ffbb 	bl	80140e0 <_ZN13ModelListenerD1Ev>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	4618      	mov	r0, r3
 801416e:	f7ff ff73 	bl	8014058 <_ZN8touchgfx9PresenterD1Ev>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	4618      	mov	r0, r3
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	08028484 	.word	0x08028484
 8014180:	080284a4 	.word	0x080284a4

08014184 <_ZThn4_N13MainPresenterD1Ev>:
 8014184:	f1a0 0004 	sub.w	r0, r0, #4
 8014188:	e7e0      	b.n	801414c <_ZN13MainPresenterD1Ev>
 801418a:	bf00      	nop

0801418c <_ZN13MainPresenterD0Ev>:
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f7ff ffd9 	bl	801414c <_ZN13MainPresenterD1Ev>
 801419a:	2110      	movs	r1, #16
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f012 fa07 	bl	80265b0 <_ZdlPvj>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <_ZThn4_N13MainPresenterD0Ev>:
 80141ac:	f1a0 0004 	sub.w	r0, r0, #4
 80141b0:	e7ec      	b.n	801418c <_ZN13MainPresenterD0Ev>
	...

080141b4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	6039      	str	r1, [r7, #0]
    : view(v)
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7ff ff69 	bl	8014098 <_ZN8touchgfx9PresenterC1Ev>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	3304      	adds	r3, #4
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7ff ff74 	bl	80140b8 <_ZN13ModelListenerC1Ev>
 80141d0:	4a06      	ldr	r2, [pc, #24]	; (80141ec <_ZN13MainPresenterC1ER8MainView+0x38>)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	601a      	str	r2, [r3, #0]
 80141d6:	4a06      	ldr	r2, [pc, #24]	; (80141f0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	605a      	str	r2, [r3, #4]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	683a      	ldr	r2, [r7, #0]
 80141e0:	60da      	str	r2, [r3, #12]
{
}
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	4618      	mov	r0, r3
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	08028484 	.word	0x08028484
 80141f0:	080284a4 	.word	0x080284a4

080141f4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80141f4:	b480      	push	{r7}
 80141f6:	b083      	sub	sp, #12
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
}
 80141fc:	bf00      	nop
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
}
 8014210:	bf00      	nop
 8014212:	370c      	adds	r7, #12
 8014214:	46bd      	mov	sp, r7
 8014216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421a:	4770      	bx	lr

0801421c <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	6839      	ldr	r1, [r7, #0]
 801422c:	4618      	mov	r0, r3
 801422e:	f000 f9f7 	bl	8014620 <_ZN8MainView9updateValEPh>
}
 8014232:	bf00      	nop
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}

0801423a <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801423a:	f1a0 0004 	sub.w	r0, r0, #4
 801423e:	f7ff bfed 	b.w	801421c <_ZN13MainPresenter11setNewValueEPh>

08014242 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8014242:	b580      	push	{r7, lr}
 8014244:	b082      	sub	sp, #8
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
 801424a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	68db      	ldr	r3, [r3, #12]
 8014250:	6839      	ldr	r1, [r7, #0]
 8014252:	4618      	mov	r0, r3
 8014254:	f000 f908 	bl	8014468 <_ZN8MainView14updateSettingsEPh>
}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8014260:	f1a0 0004 	sub.w	r0, r0, #4
 8014264:	f7ff bfed 	b.w	8014242 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08014268 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8014268:	b480      	push	{r7}
 801426a:	b083      	sub	sp, #12
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	601a      	str	r2, [r3, #0]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	4618      	mov	r0, r3
 801427a:	370c      	adds	r7, #12
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr

08014284 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8014284:	b580      	push	{r7, lr}
 8014286:	b084      	sub	sp, #16
 8014288:	af00      	add	r7, sp, #0
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	460b      	mov	r3, r1
 801428e:	607a      	str	r2, [r7, #4]
 8014290:	ed87 0a00 	vstr	s0, [r7]
 8014294:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8014296:	463b      	mov	r3, r7
 8014298:	8979      	ldrh	r1, [r7, #10]
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f008 fb77 	bl	801c990 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80142a2:	4603      	mov	r3, r0
    }
 80142a4:	4618      	mov	r0, r3
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80142ac:	b480      	push	{r7}
 80142ae:	b083      	sub	sp, #12
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
        return rect.width;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80142ba:	4618      	mov	r0, r3
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80142c6:	b480      	push	{r7}
 80142c8:	b083      	sub	sp, #12
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
        return rect.height;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	4a05      	ldr	r2, [pc, #20]	; (8014300 <_ZN8MainViewD1Ev+0x20>)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	601a      	str	r2, [r3, #0]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fc ff79 	bl	80111e8 <_ZN12MainViewBaseD1Ev>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4618      	mov	r0, r3
 80142fa:	3708      	adds	r7, #8
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	080284ec 	.word	0x080284ec

08014304 <_ZN8MainViewD0Ev>:
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f7ff ffe7 	bl	80142e0 <_ZN8MainViewD1Ev>
 8014312:	f642 01b4 	movw	r1, #10420	; 0x28b4
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f012 f94a 	bl	80265b0 <_ZdlPvj>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	4618      	mov	r0, r3
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
	...

08014328 <_ZN8MainViewC1Ev>:

static bool prev_mil_indicator = true;
static bool prev_oil_indicator = true;
static bool prev_bat_indicator = true;

MainView::MainView()
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b083      	sub	sp, #12
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	4618      	mov	r0, r3
 8014334:	f7fd f8ba 	bl	80114ac <_ZN12MainViewBaseC1Ev>
 8014338:	4a15      	ldr	r2, [pc, #84]	; (8014390 <_ZN8MainViewC1Ev+0x68>)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 801433e:	4b15      	ldr	r3, [pc, #84]	; (8014394 <_ZN8MainViewC1Ev+0x6c>)
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	461c      	mov	r4, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801434a:	4618      	mov	r0, r3
 801434c:	f7ff ffae 	bl	80142ac <_ZNK8touchgfx8Drawable8getWidthEv>
 8014350:	4603      	mov	r3, r0
 8014352:	429c      	cmp	r4, r3
 8014354:	dc0b      	bgt.n	801436e <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8014356:	4b10      	ldr	r3, [pc, #64]	; (8014398 <_ZN8MainViewC1Ev+0x70>)
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	461c      	mov	r4, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014362:	4618      	mov	r0, r3
 8014364:	f7ff ffaf 	bl	80142c6 <_ZNK8touchgfx8Drawable9getHeightEv>
 8014368:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 801436a:	429c      	cmp	r4, r3
 801436c:	dd01      	ble.n	8014372 <_ZN8MainViewC1Ev+0x4a>
 801436e:	2301      	movs	r3, #1
 8014370:	e000      	b.n	8014374 <_ZN8MainViewC1Ev+0x4c>
 8014372:	2300      	movs	r3, #0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d005      	beq.n	8014384 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	3340      	adds	r3, #64	; 0x40
 801437c:	2101      	movs	r1, #1
 801437e:	4618      	mov	r0, r3
 8014380:	f7fc fb70 	bl	8010a64 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	4618      	mov	r0, r3
 8014388:	370c      	adds	r7, #12
 801438a:	46bd      	mov	sp, r7
 801438c:	bd90      	pop	{r4, r7, pc}
 801438e:	bf00      	nop
 8014390:	080284ec 	.word	0x080284ec
 8014394:	2000c630 	.word	0x2000c630
 8014398:	2000c632 	.word	0x2000c632

0801439c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
}
 80143a4:	bf00      	nop
 80143a6:	370c      	adds	r7, #12
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr

080143b0 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 80143b0:	b480      	push	{r7}
 80143b2:	b083      	sub	sp, #12
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
}
 80143b8:	bf00      	nop
 80143ba:	370c      	adds	r7, #12
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr

080143c4 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 80143ca:	2200      	movs	r2, #0
 80143cc:	2100      	movs	r1, #0
 80143ce:	2000      	movs	r0, #0
 80143d0:	f7fd f844 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143d4:	4603      	mov	r3, r0
 80143d6:	607b      	str	r3, [r7, #4]
}
 80143d8:	bf00      	nop
 80143da:	4618      	mov	r0, r3
 80143dc:	3708      	adds	r7, #8
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
	...

080143e4 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0

	color_index ++;
 80143ea:	4b1e      	ldr	r3, [pc, #120]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	3301      	adds	r3, #1
 80143f0:	4a1c      	ldr	r2, [pc, #112]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 80143f2:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 80143f4:	4b1b      	ldr	r3, [pc, #108]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2b02      	cmp	r3, #2
 80143fa:	dd02      	ble.n	8014402 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 80143fc:	4b19      	ldr	r3, [pc, #100]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 80143fe:	2200      	movs	r2, #0
 8014400:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8014402:	2200      	movs	r2, #0
 8014404:	2100      	movs	r1, #0
 8014406:	20ff      	movs	r0, #255	; 0xff
 8014408:	f7fd f828 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801440c:	4603      	mov	r3, r0
 801440e:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8014410:	2200      	movs	r2, #0
 8014412:	2100      	movs	r1, #0
 8014414:	2000      	movs	r0, #0
 8014416:	f7fd f821 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801441a:	4603      	mov	r3, r0
 801441c:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 801441e:	22ff      	movs	r2, #255	; 0xff
 8014420:	21ff      	movs	r1, #255	; 0xff
 8014422:	20ff      	movs	r0, #255	; 0xff
 8014424:	f7fd f81a 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014428:	4603      	mov	r3, r0
 801442a:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 801442c:	463b      	mov	r3, r7
 801442e:	4618      	mov	r0, r3
 8014430:	f7ff ff1a 	bl	8014268 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8014434:	4b0b      	ldr	r3, [pc, #44]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d101      	bne.n	8014440 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8014440:	4b08      	ldr	r3, [pc, #32]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	2b01      	cmp	r3, #1
 8014446:	d101      	bne.n	801444c <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 801444c:	4b05      	ldr	r3, [pc, #20]	; (8014464 <_ZL20getColorFromRevLimitv+0x80>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2b02      	cmp	r3, #2
 8014452:	d101      	bne.n	8014458 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8014458:	683b      	ldr	r3, [r7, #0]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	20008e28 	.word	0x20008e28

08014468 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b086      	sub	sp, #24
 801446c:	af02      	add	r7, sp, #8
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a66      	ldr	r2, [pc, #408]	; (8014614 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 801447c:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	6a1b      	ldr	r3, [r3, #32]
 8014488:	ee07 3a90 	vmov	s15, r3
 801448c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014490:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8014618 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8014494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801449c:	ee17 3a90 	vmov	r3, s15
 80144a0:	b21a      	sxth	r2, r3
 80144a2:	2300      	movs	r3, #0
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	2300      	movs	r3, #0
 80144a8:	2100      	movs	r1, #0
 80144aa:	f002 fdeb 	bl	8017084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80144b4:	4618      	mov	r0, r3
 80144b6:	f006 fce3 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f603 30e8 	addw	r0, r3, #3048	; 0xbe8
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	4a55      	ldr	r2, [pc, #340]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80144c6:	2102      	movs	r1, #2
 80144c8:	f008 f908 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80144d2:	4618      	mov	r0, r3
 80144d4:	f004 fd2e 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80144de:	4618      	mov	r0, r3
 80144e0:	f006 fcce 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f603 30ec 	addw	r0, r3, #3052	; 0xbec
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	689b      	ldr	r3, [r3, #8]
 80144ee:	4a4b      	ldr	r2, [pc, #300]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80144f0:	2102      	movs	r1, #2
 80144f2:	f008 f8f3 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80144fc:	4618      	mov	r0, r3
 80144fe:	f004 fd19 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8014508:	4618      	mov	r0, r3
 801450a:	f006 fcb9 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f503 603f 	add.w	r0, r3, #3056	; 0xbf0
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	4a40      	ldr	r2, [pc, #256]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801451a:	2102      	movs	r1, #2
 801451c:	f008 f8de 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8014526:	4618      	mov	r0, r3
 8014528:	f004 fd04 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8014532:	4618      	mov	r0, r3
 8014534:	f006 fca4 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	691b      	ldr	r3, [r3, #16]
 8014542:	4a36      	ldr	r2, [pc, #216]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014544:	2102      	movs	r1, #2
 8014546:	f008 f8c9 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8014550:	4618      	mov	r0, r3
 8014552:	f004 fcef 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801455c:	4618      	mov	r0, r3
 801455e:	f006 fc8f 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f603 30f8 	addw	r0, r3, #3064	; 0xbf8
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	695b      	ldr	r3, [r3, #20]
 801456c:	4a2b      	ldr	r2, [pc, #172]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801456e:	2102      	movs	r1, #2
 8014570:	f008 f8b4 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801457a:	4618      	mov	r0, r3
 801457c:	f004 fcda 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8014586:	4618      	mov	r0, r3
 8014588:	f006 fc7a 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f603 30fc 	addw	r0, r3, #3068	; 0xbfc
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	4a21      	ldr	r2, [pc, #132]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014598:	2102      	movs	r1, #2
 801459a:	f008 f89f 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80145a4:	4618      	mov	r0, r3
 80145a6:	f004 fcc5 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80145b0:	4618      	mov	r0, r3
 80145b2:	f006 fc65 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f503 6040 	add.w	r0, r3, #3072	; 0xc00
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	69db      	ldr	r3, [r3, #28]
 80145c0:	4a16      	ldr	r2, [pc, #88]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80145c2:	2102      	movs	r1, #2
 80145c4:	f008 f88a 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80145ce:	4618      	mov	r0, r3
 80145d0:	f004 fcb0 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80145da:	4618      	mov	r0, r3
 80145dc:	f006 fc50 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f603 4004 	addw	r0, r3, #3076	; 0xc04
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	6a1b      	ldr	r3, [r3, #32]
 80145ea:	4a0c      	ldr	r2, [pc, #48]	; (801461c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80145ec:	2102      	movs	r1, #2
 80145ee:	f008 f875 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80145f8:	4618      	mov	r0, r3
 80145fa:	f004 fc9b 	bl	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8014604:	4618      	mov	r0, r3
 8014606:	f006 fc3b 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801460a:	bf00      	nop
 801460c:	3710      	adds	r7, #16
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	20000034 	.word	0x20000034
 8014618:	447a0000 	.word	0x447a0000
 801461c:	08027ee0 	.word	0x08027ee0

08014620 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8014620:	b590      	push	{r4, r7, lr}
 8014622:	b085      	sub	sp, #20
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681a      	ldr	r2, [r3, #0]
 8014632:	4b4e      	ldr	r3, [pc, #312]	; (801476c <_ZN8MainView9updateValEPh+0x14c>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	429a      	cmp	r2, r3
 8014638:	bfac      	ite	ge
 801463a:	2301      	movge	r3, #1
 801463c:	2300      	movlt	r3, #0
 801463e:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8014640:	7afb      	ldrb	r3, [r7, #11]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d012      	beq.n	801466c <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 8014646:	4b4a      	ldr	r3, [pc, #296]	; (8014770 <_ZN8MainView9updateValEPh+0x150>)
 8014648:	2200      	movs	r2, #0
 801464a:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014652:	f7ff fec7 	bl	80143e4 <_ZL20getColorFromRevLimitv>
 8014656:	4603      	mov	r3, r0
 8014658:	4619      	mov	r1, r3
 801465a:	4620      	mov	r0, r4
 801465c:	f7fc fb9e 	bl	8010d9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	3340      	adds	r3, #64	; 0x40
 8014664:	4618      	mov	r0, r3
 8014666:	f006 fc0b 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
 801466a:	e018      	b.n	801469e <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 801466c:	4b40      	ldr	r3, [pc, #256]	; (8014770 <_ZN8MainView9updateValEPh+0x150>)
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	f083 0301 	eor.w	r3, r3, #1
 8014674:	b2db      	uxtb	r3, r3
 8014676:	2b00      	cmp	r3, #0
 8014678:	d011      	beq.n	801469e <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014680:	f7ff fea0 	bl	80143c4 <_ZL13getBlackColorv>
 8014684:	4603      	mov	r3, r0
 8014686:	4619      	mov	r1, r3
 8014688:	4620      	mov	r0, r4
 801468a:	f7fc fb87 	bl	8010d9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	3340      	adds	r3, #64	; 0x40
 8014692:	4618      	mov	r0, r3
 8014694:	f006 fbf4 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8014698:	4b35      	ldr	r3, [pc, #212]	; (8014770 <_ZN8MainView9updateValEPh+0x150>)
 801469a:	2201      	movs	r2, #1
 801469c:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	4b34      	ldr	r3, [pc, #208]	; (8014774 <_ZN8MainView9updateValEPh+0x154>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d021      	beq.n	80146ee <_ZN8MainView9updateValEPh+0xce>
		prev_rpm = values->rpm;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	4a31      	ldr	r2, [pc, #196]	; (8014774 <_ZN8MainView9updateValEPh+0x154>)
 80146b0:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4619      	mov	r1, r3
 80146be:	4610      	mov	r0, r2
 80146c0:	f002 fbca 	bl	8016e58 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80146ca:	4618      	mov	r0, r3
 80146cc:	f006 fbd8 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f503 6043 	add.w	r0, r3, #3120	; 0xc30
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4a27      	ldr	r2, [pc, #156]	; (8014778 <_ZN8MainView9updateValEPh+0x158>)
 80146dc:	2105      	movs	r1, #5
 80146de:	f007 fffd 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80146e8:	4618      	mov	r0, r3
 80146ea:	f006 fbc9 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_rpm != prev_max_rpm) {
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	685a      	ldr	r2, [r3, #4]
 80146f2:	4b22      	ldr	r3, [pc, #136]	; (801477c <_ZN8MainView9updateValEPh+0x15c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d012      	beq.n	8014720 <_ZN8MainView9updateValEPh+0x100>
		prev_max_rpm = values->max_rpm;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	4a1f      	ldr	r2, [pc, #124]	; (801477c <_ZN8MainView9updateValEPh+0x15c>)
 8014700:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%d", prev_max_rpm);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f603 4076 	addw	r0, r3, #3190	; 0xc76
 8014708:	4b1c      	ldr	r3, [pc, #112]	; (801477c <_ZN8MainView9updateValEPh+0x15c>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4a1a      	ldr	r2, [pc, #104]	; (8014778 <_ZN8MainView9updateValEPh+0x158>)
 801470e:	2105      	movs	r1, #5
 8014710:	f007 ffe4 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxRPMValue.invalidate();
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 801471a:	4618      	mov	r0, r3
 801471c:	f006 fbb0 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	689a      	ldr	r2, [r3, #8]
 8014724:	4b16      	ldr	r3, [pc, #88]	; (8014780 <_ZN8MainView9updateValEPh+0x160>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	429a      	cmp	r2, r3
 801472a:	d03e      	beq.n	80147aa <_ZN8MainView9updateValEPh+0x18a>
		prev_clt = values->clt;
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	4a13      	ldr	r2, [pc, #76]	; (8014780 <_ZN8MainView9updateValEPh+0x160>)
 8014732:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f603 403a 	addw	r0, r3, #3130	; 0xc3a
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	689b      	ldr	r3, [r3, #8]
 801473e:	4a0e      	ldr	r2, [pc, #56]	; (8014778 <_ZN8MainView9updateValEPh+0x158>)
 8014740:	2105      	movs	r1, #5
 8014742:	f007 ffcb 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		if(values->clt >= 100){
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	2b63      	cmp	r3, #99	; 0x63
 801474c:	dd1a      	ble.n	8014784 <_ZN8MainView9updateValEPh+0x164>
			CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8014754:	2200      	movs	r2, #0
 8014756:	2100      	movs	r1, #0
 8014758:	20ff      	movs	r0, #255	; 0xff
 801475a:	f7fc fe7f 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801475e:	4603      	mov	r3, r0
 8014760:	4619      	mov	r1, r3
 8014762:	4620      	mov	r0, r4
 8014764:	f7fc fb91 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
 8014768:	e019      	b.n	801479e <_ZN8MainView9updateValEPh+0x17e>
 801476a:	bf00      	nop
 801476c:	20000034 	.word	0x20000034
 8014770:	20008e60 	.word	0x20008e60
 8014774:	20000038 	.word	0x20000038
 8014778:	08027ee0 	.word	0x08027ee0
 801477c:	2000003c 	.word	0x2000003c
 8014780:	20008e34 	.word	0x20008e34
		} else {
			CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,255,255));
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 801478a:	22ff      	movs	r2, #255	; 0xff
 801478c:	21ff      	movs	r1, #255	; 0xff
 801478e:	20ff      	movs	r0, #255	; 0xff
 8014790:	f7fc fe64 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014794:	4603      	mov	r3, r0
 8014796:	4619      	mov	r1, r3
 8014798:	4620      	mov	r0, r4
 801479a:	f7fc fb76 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		CLTValue.invalidate();
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80147a4:	4618      	mov	r0, r3
 80147a6:	f006 fb6b 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_clt != prev_max_clt) {
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	68da      	ldr	r2, [r3, #12]
 80147ae:	4baa      	ldr	r3, [pc, #680]	; (8014a58 <_ZN8MainView9updateValEPh+0x438>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d023      	beq.n	80147fe <_ZN8MainView9updateValEPh+0x1de>
		prev_max_clt = values->max_clt;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	68db      	ldr	r3, [r3, #12]
 80147ba:	4aa7      	ldr	r2, [pc, #668]	; (8014a58 <_ZN8MainView9updateValEPh+0x438>)
 80147bc:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%d", values->max_clt);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f603 406c 	addw	r0, r3, #3180	; 0xc6c
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	4aa4      	ldr	r2, [pc, #656]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 80147ca:	2105      	movs	r1, #5
 80147cc:	f007 ff86 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		if(values->max_clt >= 100){
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	68db      	ldr	r3, [r3, #12]
 80147d4:	2b63      	cmp	r3, #99	; 0x63
 80147d6:	dd0c      	ble.n	80147f2 <_ZN8MainView9updateValEPh+0x1d2>
			MaxCltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 80147de:	2200      	movs	r2, #0
 80147e0:	2100      	movs	r1, #0
 80147e2:	20ff      	movs	r0, #255	; 0xff
 80147e4:	f7fc fe3a 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80147e8:	4603      	mov	r3, r0
 80147ea:	4619      	mov	r1, r3
 80147ec:	4620      	mov	r0, r4
 80147ee:	f7fc fb4c 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		MaxCltValue.invalidate();
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 80147f8:	4618      	mov	r0, r3
 80147fa:	f006 fb41 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	ed93 7a06 	vldr	s14, [r3, #24]
 8014804:	4b96      	ldr	r3, [pc, #600]	; (8014a60 <_ZN8MainView9updateValEPh+0x440>)
 8014806:	edd3 7a00 	vldr	s15, [r3]
 801480a:	eeb4 7a67 	vcmp.f32	s14, s15
 801480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014812:	d015      	beq.n	8014840 <_ZN8MainView9updateValEPh+0x220>
		prev_lambda = values->lambda;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	699b      	ldr	r3, [r3, #24]
 8014818:	4a91      	ldr	r2, [pc, #580]	; (8014a60 <_ZN8MainView9updateValEPh+0x440>)
 801481a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f603 30d4 	addw	r0, r3, #3028	; 0xbd4
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	edd3 7a06 	vldr	s15, [r3, #24]
 8014828:	eeb0 0a67 	vmov.f32	s0, s15
 801482c:	4a8d      	ldr	r2, [pc, #564]	; (8014a64 <_ZN8MainView9updateValEPh+0x444>)
 801482e:	2105      	movs	r1, #5
 8014830:	f7ff fd28 	bl	8014284 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801483a:	4618      	mov	r0, r3
 801483c:	f006 fb20 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	69da      	ldr	r2, [r3, #28]
 8014844:	4b88      	ldr	r3, [pc, #544]	; (8014a68 <_ZN8MainView9updateValEPh+0x448>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	429a      	cmp	r2, r3
 801484a:	d012      	beq.n	8014872 <_ZN8MainView9updateValEPh+0x252>
		prev_oil_tmp = values->oil_tmp;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	69db      	ldr	r3, [r3, #28]
 8014850:	4a85      	ldr	r2, [pc, #532]	; (8014a68 <_ZN8MainView9updateValEPh+0x448>)
 8014852:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f603 4012 	addw	r0, r3, #3090	; 0xc12
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	69db      	ldr	r3, [r3, #28]
 801485e:	4a7f      	ldr	r2, [pc, #508]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 8014860:	2105      	movs	r1, #5
 8014862:	f007 ff3b 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801486c:	4618      	mov	r0, r3
 801486e:	f006 fb07 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_oil_tmp != prev_max_oil_tmp) {
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6a1a      	ldr	r2, [r3, #32]
 8014876:	4b7d      	ldr	r3, [pc, #500]	; (8014a6c <_ZN8MainView9updateValEPh+0x44c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	429a      	cmp	r2, r3
 801487c:	d012      	beq.n	80148a4 <_ZN8MainView9updateValEPh+0x284>
		prev_max_oil_tmp = values->max_oil_tmp;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	6a1b      	ldr	r3, [r3, #32]
 8014882:	4a7a      	ldr	r2, [pc, #488]	; (8014a6c <_ZN8MainView9updateValEPh+0x44c>)
 8014884:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%d",values->max_oil_tmp);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f603 4062 	addw	r0, r3, #3170	; 0xc62
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	6a1b      	ldr	r3, [r3, #32]
 8014890:	4a72      	ldr	r2, [pc, #456]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 8014892:	2105      	movs	r1, #5
 8014894:	f007 ff22 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxOilTValue.invalidate();
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801489e:	4618      	mov	r0, r3
 80148a0:	f006 faee 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80148aa:	4b71      	ldr	r3, [pc, #452]	; (8014a70 <_ZN8MainView9updateValEPh+0x450>)
 80148ac:	edd3 7a00 	vldr	s15, [r3]
 80148b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80148b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b8:	d015      	beq.n	80148e6 <_ZN8MainView9updateValEPh+0x2c6>
		prev_oil_press = values->oil_press;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148be:	4a6c      	ldr	r2, [pc, #432]	; (8014a70 <_ZN8MainView9updateValEPh+0x450>)
 80148c0:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f603 401c 	addw	r0, r3, #3100	; 0xc1c
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80148ce:	eeb0 0a67 	vmov.f32	s0, s15
 80148d2:	4a68      	ldr	r2, [pc, #416]	; (8014a74 <_ZN8MainView9updateValEPh+0x454>)
 80148d4:	2105      	movs	r1, #5
 80148d6:	f7ff fcd5 	bl	8014284 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80148e0:	4618      	mov	r0, r3
 80148e2:	f006 facd 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_tmp != prev_fuel_tmp) {
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80148ea:	4b63      	ldr	r3, [pc, #396]	; (8014a78 <_ZN8MainView9updateValEPh+0x458>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d012      	beq.n	8014918 <_ZN8MainView9updateValEPh+0x2f8>
		prev_fuel_tmp = values->fuel_tmp;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148f6:	4a60      	ldr	r2, [pc, #384]	; (8014a78 <_ZN8MainView9updateValEPh+0x458>)
 80148f8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelTValueBuffer, FUELTVALUE_SIZE, "%d",values->fuel_tmp);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f603 408a 	addw	r0, r3, #3210	; 0xc8a
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014904:	4a55      	ldr	r2, [pc, #340]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 8014906:	2105      	movs	r1, #5
 8014908:	f007 fee8 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelTValue.invalidate();
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8014912:	4618      	mov	r0, r3
 8014914:	f006 fab4 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801491e:	4b57      	ldr	r3, [pc, #348]	; (8014a7c <_ZN8MainView9updateValEPh+0x45c>)
 8014920:	edd3 7a00 	vldr	s15, [r3]
 8014924:	eeb4 7a67 	vcmp.f32	s14, s15
 8014928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492c:	d015      	beq.n	801495a <_ZN8MainView9updateValEPh+0x33a>
		prev_fuel_press = values->fuel_press;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014932:	4a52      	ldr	r2, [pc, #328]	; (8014a7c <_ZN8MainView9updateValEPh+0x45c>)
 8014934:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(FuelPValueBuffer, FUELPVALUE_SIZE, "%.1f",values->fuel_press);
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f603 4044 	addw	r0, r3, #3140	; 0xc44
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8014942:	eeb0 0a67 	vmov.f32	s0, s15
 8014946:	4a4b      	ldr	r2, [pc, #300]	; (8014a74 <_ZN8MainView9updateValEPh+0x454>)
 8014948:	2105      	movs	r1, #5
 801494a:	f7ff fc9b 	bl	8014284 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		FuelPValue.invalidate();
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8014954:	4618      	mov	r0, r3
 8014956:	f006 fa93 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_fuel_press != prev_min_fuel_press) {
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8014960:	4b47      	ldr	r3, [pc, #284]	; (8014a80 <_ZN8MainView9updateValEPh+0x460>)
 8014962:	edd3 7a00 	vldr	s15, [r3]
 8014966:	eeb4 7a67 	vcmp.f32	s14, s15
 801496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801496e:	d015      	beq.n	801499c <_ZN8MainView9updateValEPh+0x37c>
		prev_min_fuel_press = values->min_fuel_press;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014974:	4a42      	ldr	r2, [pc, #264]	; (8014a80 <_ZN8MainView9updateValEPh+0x460>)
 8014976:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%.1f",values->min_fuel_press);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f603 4058 	addw	r0, r3, #3160	; 0xc58
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8014984:	eeb0 0a67 	vmov.f32	s0, s15
 8014988:	4a3a      	ldr	r2, [pc, #232]	; (8014a74 <_ZN8MainView9updateValEPh+0x454>)
 801498a:	2105      	movs	r1, #5
 801498c:	f7ff fc7a 	bl	8014284 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		MinFuelPValue.invalidate();
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8014996:	4618      	mov	r0, r3
 8014998:	f006 fa72 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->speed != prev_speed) {
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	691a      	ldr	r2, [r3, #16]
 80149a0:	4b38      	ldr	r3, [pc, #224]	; (8014a84 <_ZN8MainView9updateValEPh+0x464>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d012      	beq.n	80149ce <_ZN8MainView9updateValEPh+0x3ae>
		prev_speed = values->speed;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	691b      	ldr	r3, [r3, #16]
 80149ac:	4a35      	ldr	r2, [pc, #212]	; (8014a84 <_ZN8MainView9updateValEPh+0x464>)
 80149ae:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%d",values->speed);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f603 30de 	addw	r0, r3, #3038	; 0xbde
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	691b      	ldr	r3, [r3, #16]
 80149ba:	4a28      	ldr	r2, [pc, #160]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 80149bc:	2105      	movs	r1, #5
 80149be:	f007 fe8d 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		SpeedValue.invalidate();
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80149c8:	4618      	mov	r0, r3
 80149ca:	f006 fa59 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_speed != prev_max_speed) {
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	695a      	ldr	r2, [r3, #20]
 80149d2:	4b2d      	ldr	r3, [pc, #180]	; (8014a88 <_ZN8MainView9updateValEPh+0x468>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d012      	beq.n	8014a00 <_ZN8MainView9updateValEPh+0x3e0>
		prev_max_speed = values->max_speed;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	695b      	ldr	r3, [r3, #20]
 80149de:	4a2a      	ldr	r2, [pc, #168]	; (8014a88 <_ZN8MainView9updateValEPh+0x468>)
 80149e0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%d",values->max_speed);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f503 6048 	add.w	r0, r3, #3200	; 0xc80
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	695b      	ldr	r3, [r3, #20]
 80149ec:	4a1b      	ldr	r2, [pc, #108]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 80149ee:	2105      	movs	r1, #5
 80149f0:	f007 fe74 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxSpeedValue.invalidate();
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80149fa:	4618      	mov	r0, r3
 80149fc:	f006 fa40 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a04:	4b21      	ldr	r3, [pc, #132]	; (8014a8c <_ZN8MainView9updateValEPh+0x46c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d012      	beq.n	8014a32 <_ZN8MainView9updateValEPh+0x412>
		prev_iat = values->iat;
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a10:	4a1e      	ldr	r2, [pc, #120]	; (8014a8c <_ZN8MainView9updateValEPh+0x46c>)
 8014a12:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a1e:	4a0f      	ldr	r2, [pc, #60]	; (8014a5c <_ZN8MainView9updateValEPh+0x43c>)
 8014a20:	2105      	movs	r1, #5
 8014a22:	f007 fe5b 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f006 fa27 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a36:	4b16      	ldr	r3, [pc, #88]	; (8014a90 <_ZN8MainView9updateValEPh+0x470>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d041      	beq.n	8014ac2 <_ZN8MainView9updateValEPh+0x4a2>
		prev_tps = values->tps;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a42:	4a13      	ldr	r2, [pc, #76]	; (8014a90 <_ZN8MainView9updateValEPh+0x470>)
 8014a44:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a50:	4619      	mov	r1, r3
 8014a52:	4610      	mov	r0, r2
 8014a54:	e01e      	b.n	8014a94 <_ZN8MainView9updateValEPh+0x474>
 8014a56:	bf00      	nop
 8014a58:	20008e38 	.word	0x20008e38
 8014a5c:	08027ee0 	.word	0x08027ee0
 8014a60:	20000040 	.word	0x20000040
 8014a64:	08027ee4 	.word	0x08027ee4
 8014a68:	20008e3c 	.word	0x20008e3c
 8014a6c:	20008e40 	.word	0x20008e40
 8014a70:	20008e44 	.word	0x20008e44
 8014a74:	08027eec 	.word	0x08027eec
 8014a78:	20008e48 	.word	0x20008e48
 8014a7c:	20008e4c 	.word	0x20008e4c
 8014a80:	20008e50 	.word	0x20008e50
 8014a84:	20008e2c 	.word	0x20008e2c
 8014a88:	20008e30 	.word	0x20008e30
 8014a8c:	20008e54 	.word	0x20008e54
 8014a90:	20008e58 	.word	0x20008e58
 8014a94:	f002 f890 	bl	8016bb8 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f006 f9ee 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f603 404e 	addw	r0, r3, #3150	; 0xc4e
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aae:	4a54      	ldr	r2, [pc, #336]	; (8014c00 <_ZN8MainView9updateValEPh+0x5e0>)
 8014ab0:	2105      	movs	r1, #5
 8014ab2:	f007 fe13 	bl	801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8014abc:	4618      	mov	r0, r3
 8014abe:	f006 f9df 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8014ac8:	4b4e      	ldr	r3, [pc, #312]	; (8014c04 <_ZN8MainView9updateValEPh+0x5e4>)
 8014aca:	edd3 7a00 	vldr	s15, [r3]
 8014ace:	eeb4 7a67 	vcmp.f32	s14, s15
 8014ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad6:	d03a      	beq.n	8014b4e <_ZN8MainView9updateValEPh+0x52e>
		prev_batt_v = values->batt_v;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014adc:	4a49      	ldr	r2, [pc, #292]	; (8014c04 <_ZN8MainView9updateValEPh+0x5e4>)
 8014ade:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f603 4026 	addw	r0, r3, #3110	; 0xc26
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8014aec:	eeb0 0a67 	vmov.f32	s0, s15
 8014af0:	4a45      	ldr	r2, [pc, #276]	; (8014c08 <_ZN8MainView9updateValEPh+0x5e8>)
 8014af2:	2105      	movs	r1, #5
 8014af4:	f7ff fbc6 	bl	8014284 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		if(values->batt_v < 13){
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8014afe:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8014b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b0a:	d50d      	bpl.n	8014b28 <_ZN8MainView9updateValEPh+0x508>
			BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8014b12:	2200      	movs	r2, #0
 8014b14:	2100      	movs	r1, #0
 8014b16:	20ff      	movs	r0, #255	; 0xff
 8014b18:	f7fc fca0 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	4619      	mov	r1, r3
 8014b20:	4620      	mov	r0, r4
 8014b22:	f7fc f9b2 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
 8014b26:	e00c      	b.n	8014b42 <_ZN8MainView9updateValEPh+0x522>
		} else {
			BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255,255,255));
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8014b2e:	22ff      	movs	r2, #255	; 0xff
 8014b30:	21ff      	movs	r1, #255	; 0xff
 8014b32:	20ff      	movs	r0, #255	; 0xff
 8014b34:	f7fc fc92 	bl	801145c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f7fc f9a4 	bl	8010e8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		BatteryVoltage.invalidate();
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f006 f999 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->mil_indicator != prev_mil_indicator) {
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8014b54:	4b2d      	ldr	r3, [pc, #180]	; (8014c0c <_ZN8MainView9updateValEPh+0x5ec>)
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d014      	beq.n	8014b86 <_ZN8MainView9updateValEPh+0x566>
		prev_mil_indicator = values->mil_indicator;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8014b62:	4b2a      	ldr	r3, [pc, #168]	; (8014c0c <_ZN8MainView9updateValEPh+0x5ec>)
 8014b64:	701a      	strb	r2, [r3, #0]
		MilIndicator.setVisible(values->mil_indicator);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f603 326c 	addw	r2, r3, #2924	; 0xb6c
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b72:	4619      	mov	r1, r3
 8014b74:	4610      	mov	r0, r2
 8014b76:	f7fb ff75 	bl	8010a64 <_ZN8touchgfx8Drawable10setVisibleEb>
		MilIndicator.invalidate();
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8014b80:	4618      	mov	r0, r3
 8014b82:	f006 f97d 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_indicator != prev_oil_indicator) {
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014b8c:	4b20      	ldr	r3, [pc, #128]	; (8014c10 <_ZN8MainView9updateValEPh+0x5f0>)
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d014      	beq.n	8014bbe <_ZN8MainView9updateValEPh+0x59e>
		prev_oil_indicator = values->oil_indicator;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014b9a:	4b1d      	ldr	r3, [pc, #116]	; (8014c10 <_ZN8MainView9updateValEPh+0x5f0>)
 8014b9c:	701a      	strb	r2, [r3, #0]
		OilIndicator.setVisible(values->oil_indicator);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f503 623a 	add.w	r2, r3, #2976	; 0xba0
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014baa:	4619      	mov	r1, r3
 8014bac:	4610      	mov	r0, r2
 8014bae:	f7fb ff59 	bl	8010a64 <_ZN8touchgfx8Drawable10setVisibleEb>
		OilIndicator.invalidate();
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f006 f961 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->bat_indicator != prev_bat_indicator) {
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014bc4:	4b13      	ldr	r3, [pc, #76]	; (8014c14 <_ZN8MainView9updateValEPh+0x5f4>)
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d014      	beq.n	8014bf6 <_ZN8MainView9updateValEPh+0x5d6>
		prev_bat_indicator = values->bat_indicator;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014bd2:	4b10      	ldr	r3, [pc, #64]	; (8014c14 <_ZN8MainView9updateValEPh+0x5f4>)
 8014bd4:	701a      	strb	r2, [r3, #0]
		BatIndicator.setVisible(values->bat_indicator);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f603 3238 	addw	r2, r3, #2872	; 0xb38
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014be2:	4619      	mov	r1, r3
 8014be4:	4610      	mov	r0, r2
 8014be6:	f7fb ff3d 	bl	8010a64 <_ZN8touchgfx8Drawable10setVisibleEb>
		BatIndicator.invalidate();
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f006 f945 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8014bf6:	bf00      	nop
 8014bf8:	3714      	adds	r7, #20
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd90      	pop	{r4, r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	08027ee0 	.word	0x08027ee0
 8014c04:	20008e5c 	.word	0x20008e5c
 8014c08:	08027ee4 	.word	0x08027ee4
 8014c0c:	20000044 	.word	0x20000044
 8014c10:	20000045 	.word	0x20000045
 8014c14:	20000046 	.word	0x20000046

08014c18 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2200      	movs	r2, #0
 8014c24:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8014c26:	2200      	movs	r2, #0
 8014c28:	2144      	movs	r1, #68	; 0x44
 8014c2a:	2001      	movs	r0, #1
 8014c2c:	f7f8 f904 	bl	800ce38 <xQueueGenericCreate>
 8014c30:	4603      	mov	r3, r0
 8014c32:	4a07      	ldr	r2, [pc, #28]	; (8014c50 <_ZN5ModelC1Ev+0x38>)
 8014c34:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8014c36:	2200      	movs	r2, #0
 8014c38:	2128      	movs	r1, #40	; 0x28
 8014c3a:	2001      	movs	r0, #1
 8014c3c:	f7f8 f8fc 	bl	800ce38 <xQueueGenericCreate>
 8014c40:	4603      	mov	r3, r0
 8014c42:	4a04      	ldr	r2, [pc, #16]	; (8014c54 <_ZN5ModelC1Ev+0x3c>)
 8014c44:	6013      	str	r3, [r2, #0]
}
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3708      	adds	r7, #8
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	20008ed0 	.word	0x20008ed0
 8014c54:	20008ed4 	.word	0x20008ed4

08014c58 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8014c60:	4b1a      	ldr	r3, [pc, #104]	; (8014ccc <_ZN5Model4tickEv+0x74>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2200      	movs	r2, #0
 8014c66:	491a      	ldr	r1, [pc, #104]	; (8014cd0 <_ZN5Model4tickEv+0x78>)
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7f8 fb83 	bl	800d374 <xQueueReceive>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	bf0c      	ite	eq
 8014c74:	2301      	moveq	r3, #1
 8014c76:	2300      	movne	r3, #0
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d009      	beq.n	8014c92 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	3308      	adds	r3, #8
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4910      	ldr	r1, [pc, #64]	; (8014cd0 <_ZN5Model4tickEv+0x78>)
 8014c8e:	4610      	mov	r0, r2
 8014c90:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8014c92:	4b10      	ldr	r3, [pc, #64]	; (8014cd4 <_ZN5Model4tickEv+0x7c>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2200      	movs	r2, #0
 8014c98:	490f      	ldr	r1, [pc, #60]	; (8014cd8 <_ZN5Model4tickEv+0x80>)
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7f8 fb6a 	bl	800d374 <xQueueReceive>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	2b01      	cmp	r3, #1
 8014ca4:	bf0c      	ite	eq
 8014ca6:	2301      	moveq	r3, #1
 8014ca8:	2300      	movne	r3, #0
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d009      	beq.n	8014cc4 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	330c      	adds	r3, #12
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	4906      	ldr	r1, [pc, #24]	; (8014cd8 <_ZN5Model4tickEv+0x80>)
 8014cc0:	4610      	mov	r0, r2
 8014cc2:	4798      	blx	r3
	}
}
 8014cc4:	bf00      	nop
 8014cc6:	3708      	adds	r7, #8
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	20008ed0 	.word	0x20008ed0
 8014cd0:	20008e64 	.word	0x20008e64
 8014cd4:	20008ed4 	.word	0x20008ed4
 8014cd8:	20008ea8 	.word	0x20008ea8

08014cdc <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
    {
 8014ce4:	4a04      	ldr	r2, [pc, #16]	; (8014cf8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	601a      	str	r2, [r3, #0]
    }
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	4618      	mov	r0, r3
 8014cee:	370c      	adds	r7, #12
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf6:	4770      	bx	lr
 8014cf8:	08028538 	.word	0x08028538

08014cfc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
    }
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7ff ffe9 	bl	8014cdc <_ZN8touchgfx15TouchControllerD1Ev>
 8014d0a:	2104      	movs	r1, #4
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f011 fc4f 	bl	80265b0 <_ZdlPvj>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	4618      	mov	r0, r3
 8014d16:	3708      	adds	r7, #8
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8014d24:	bf00      	nop
 8014d26:	370c      	adds	r7, #12
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr

08014d30 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014d30:	b480      	push	{r7}
 8014d32:	b085      	sub	sp, #20
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	60f8      	str	r0, [r7, #12]
 8014d38:	60b9      	str	r1, [r7, #8]
 8014d3a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014d3c:	2300      	movs	r3, #0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3714      	adds	r7, #20
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr
	...

08014d4c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	4a05      	ldr	r2, [pc, #20]	; (8014d6c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	601a      	str	r2, [r3, #0]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7ff ffbd 	bl	8014cdc <_ZN8touchgfx15TouchControllerD1Ev>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4618      	mov	r0, r3
 8014d66:	3708      	adds	r7, #8
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	08028520 	.word	0x08028520

08014d70 <_ZN20STM32TouchControllerD0Ev>:
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f7ff ffe7 	bl	8014d4c <_ZN20STM32TouchControllerD1Ev>
 8014d7e:	2104      	movs	r1, #4
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f011 fc15 	bl	80265b0 <_ZdlPvj>
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014d90:	b480      	push	{r7}
 8014d92:	b083      	sub	sp, #12
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	4603      	mov	r3, r0
 8014d98:	71fb      	strb	r3, [r7, #7]

}
 8014d9a:	bf00      	nop
 8014d9c:	370c      	adds	r7, #12
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da4:	4770      	bx	lr

08014da6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8014da6:	b480      	push	{r7}
 8014da8:	b083      	sub	sp, #12
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	4603      	mov	r3, r0
 8014dae:	71fb      	strb	r3, [r7, #7]

}
 8014db0:	bf00      	nop
 8014db2:	370c      	adds	r7, #12
 8014db4:	46bd      	mov	sp, r7
 8014db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dba:	4770      	bx	lr

08014dbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	71fb      	strb	r3, [r7, #7]

}
 8014dc6:	bf00      	nop
 8014dc8:	370c      	adds	r7, #12
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd0:	4770      	bx	lr
	...

08014dd4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8014dd4:	b480      	push	{r7}
 8014dd6:	b083      	sub	sp, #12
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
    {
 8014ddc:	4a04      	ldr	r2, [pc, #16]	; (8014df0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	601a      	str	r2, [r3, #0]
    }
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	4618      	mov	r0, r3
 8014de6:	370c      	adds	r7, #12
 8014de8:	46bd      	mov	sp, r7
 8014dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dee:	4770      	bx	lr
 8014df0:	08029218 	.word	0x08029218

08014df4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
    }
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f7ff ffe9 	bl	8014dd4 <_ZN8touchgfx3HALD1Ev>
 8014e02:	2178      	movs	r1, #120	; 0x78
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f011 fbd3 	bl	80265b0 <_ZdlPvj>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8014e14:	b480      	push	{r7}
 8014e16:	b083      	sub	sp, #12
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	460b      	mov	r3, r1
 8014e1e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	78fa      	ldrb	r2, [r7, #3]
 8014e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8014e30:	bf00      	nop
 8014e32:	370c      	adds	r7, #12
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr

08014e3c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	685a      	ldr	r2, [r3, #4]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4610      	mov	r0, r2
 8014e52:	4798      	blx	r3
 8014e54:	4603      	mov	r3, r0
    }
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b082      	sub	sp, #8
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f003 f900 	bl	801806c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	3390      	adds	r3, #144	; 0x90
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	4798      	blx	r3
    }
 8014e78:	bf00      	nop
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014e80:	b480      	push	{r7}
 8014e82:	b083      	sub	sp, #12
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	6039      	str	r1, [r7, #0]
    {
        return false;
 8014e8a:	2300      	movs	r3, #0
    }
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	370c      	adds	r7, #12
 8014e90:	46bd      	mov	sp, r7
 8014e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e96:	4770      	bx	lr

08014e98 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8014e98:	b590      	push	{r4, r7, lr}
 8014e9a:	b08b      	sub	sp, #44	; 0x2c
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	4611      	mov	r1, r2
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	80fb      	strh	r3, [r7, #6]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8014eae:	f7fb f86b 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	3228      	adds	r2, #40	; 0x28
 8014eb8:	6812      	ldr	r2, [r2, #0]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	4790      	blx	r2
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8014ec2:	8b7b      	ldrh	r3, [r7, #26]
 8014ec4:	4a25      	ldr	r2, [pc, #148]	; (8014f5c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc4>)
 8014ec6:	8812      	ldrh	r2, [r2, #0]
 8014ec8:	fb02 f303 	mul.w	r3, r2, r3
 8014ecc:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8014eda:	797b      	ldrb	r3, [r7, #5]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d005      	beq.n	8014eec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8014ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8014ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eea:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8014eec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d005      	beq.n	8014f00 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8014ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	4413      	add	r3, r2
 8014efa:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8014efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efe:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8014f00:	88fb      	ldrh	r3, [r7, #6]
 8014f02:	2b02      	cmp	r3, #2
 8014f04:	dc10      	bgt.n	8014f28 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	dc13      	bgt.n	8014f32 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8014f0a:	e01c      	b.n	8014f46 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8014f0c:	3b04      	subs	r3, #4
 8014f0e:	4a14      	ldr	r2, [pc, #80]	; (8014f60 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc8>)
 8014f10:	fa22 f303 	lsr.w	r3, r2, r3
 8014f14:	f003 0301 	and.w	r3, r3, #1
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	bf14      	ite	ne
 8014f1c:	2301      	movne	r3, #1
 8014f1e:	2300      	moveq	r3, #0
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d105      	bne.n	8014f32 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8014f26:	e00e      	b.n	8014f46 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8014f28:	2b20      	cmp	r3, #32
 8014f2a:	dc0c      	bgt.n	8014f46 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8014f2c:	2b04      	cmp	r3, #4
 8014f2e:	daed      	bge.n	8014f0c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x74>
 8014f30:	e009      	b.n	8014f46 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	3374      	adds	r3, #116	; 0x74
 8014f38:	681c      	ldr	r4, [r3, #0]
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	6a3a      	ldr	r2, [r7, #32]
 8014f3e:	68b9      	ldr	r1, [r7, #8]
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	47a0      	blx	r4
            break;
 8014f44:	e006      	b.n	8014f54 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xbc>
        default:
            assert(0 && "Unsupported bit depth");
 8014f46:	4b07      	ldr	r3, [pc, #28]	; (8014f64 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xcc>)
 8014f48:	4a07      	ldr	r2, [pc, #28]	; (8014f68 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd0>)
 8014f4a:	f240 3125 	movw	r1, #805	; 0x325
 8014f4e:	4807      	ldr	r0, [pc, #28]	; (8014f6c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd4>)
 8014f50:	f011 fb5c 	bl	802660c <__assert_func>
            break;
        }
    }
 8014f54:	bf00      	nop
 8014f56:	372c      	adds	r7, #44	; 0x2c
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd90      	pop	{r4, r7, pc}
 8014f5c:	2000c638 	.word	0x2000c638
 8014f60:	10101011 	.word	0x10101011
 8014f64:	08027ef4 	.word	0x08027ef4
 8014f68:	08027f14 	.word	0x08027f14
 8014f6c:	08027f68 	.word	0x08027f68

08014f70 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
 8014f7c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d106      	bne.n	8014f92 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014f84:	4b11      	ldr	r3, [pc, #68]	; (8014fcc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014f86:	4a12      	ldr	r2, [pc, #72]	; (8014fd0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014f88:	f240 3137 	movw	r1, #823	; 0x337
 8014f8c:	4811      	ldr	r0, [pc, #68]	; (8014fd4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8014f8e:	f011 fb3d 	bl	802660c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	68ba      	ldr	r2, [r7, #8]
 8014f96:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	683a      	ldr	r2, [r7, #0]
 8014fa2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	bf14      	ite	ne
 8014faa:	2301      	movne	r3, #1
 8014fac:	2300      	moveq	r3, #0
 8014fae:	b2da      	uxtb	r2, r3
 8014fb0:	4b09      	ldr	r3, [pc, #36]	; (8014fd8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8014fb2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	bf14      	ite	ne
 8014fba:	2301      	movne	r3, #1
 8014fbc:	2300      	moveq	r3, #0
 8014fbe:	b2da      	uxtb	r2, r3
 8014fc0:	4b06      	ldr	r3, [pc, #24]	; (8014fdc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8014fc2:	701a      	strb	r2, [r3, #0]
    }
 8014fc4:	bf00      	nop
 8014fc6:	3710      	adds	r7, #16
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	08027fac 	.word	0x08027fac
 8014fd0:	08027fe4 	.word	0x08027fe4
 8014fd4:	08027f68 	.word	0x08027f68
 8014fd8:	2000c63a 	.word	0x2000c63a
 8014fdc:	2000c63b 	.word	0x2000c63b

08014fe0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	460b      	mov	r3, r1
 8014fea:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d004      	beq.n	8014ffe <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff8:	887a      	ldrh	r2, [r7, #2]
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	4798      	blx	r3
        }
    }
 8014ffe:	bf00      	nop
 8015000:	3708      	adds	r7, #8
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8015006:	b580      	push	{r7, lr}
 8015008:	b082      	sub	sp, #8
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	685a      	ldr	r2, [r3, #4]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	3318      	adds	r3, #24
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	4610      	mov	r0, r2
 801501e:	4798      	blx	r3
 8015020:	4603      	mov	r3, r0
    }
 8015022:	4618      	mov	r0, r3
 8015024:	3708      	adds	r7, #8
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
	...

0801502c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801502c:	b480      	push	{r7}
 801502e:	b083      	sub	sp, #12
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015040:	429a      	cmp	r2, r3
 8015042:	d017      	beq.n	8015074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8015044:	4b1a      	ldr	r3, [pc, #104]	; (80150b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d12a      	bne.n	80150a2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801504c:	4b19      	ldr	r3, [pc, #100]	; (80150b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801504e:	881a      	ldrh	r2, [r3, #0]
 8015050:	4b19      	ldr	r3, [pc, #100]	; (80150b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015052:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015054:	4b19      	ldr	r3, [pc, #100]	; (80150bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015056:	881a      	ldrh	r2, [r3, #0]
 8015058:	4b19      	ldr	r3, [pc, #100]	; (80150c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801505a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801505c:	4b16      	ldr	r3, [pc, #88]	; (80150b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801505e:	881a      	ldrh	r2, [r3, #0]
 8015060:	4b16      	ldr	r3, [pc, #88]	; (80150bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015062:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8015064:	4b16      	ldr	r3, [pc, #88]	; (80150c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015066:	881a      	ldrh	r2, [r3, #0]
 8015068:	4b12      	ldr	r3, [pc, #72]	; (80150b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801506a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801506c:	4b10      	ldr	r3, [pc, #64]	; (80150b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801506e:	2201      	movs	r2, #1
 8015070:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8015072:	e016      	b.n	80150a2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8015074:	4b0e      	ldr	r3, [pc, #56]	; (80150b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d012      	beq.n	80150a2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801507c:	4b0f      	ldr	r3, [pc, #60]	; (80150bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801507e:	881a      	ldrh	r2, [r3, #0]
 8015080:	4b0d      	ldr	r3, [pc, #52]	; (80150b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015082:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8015084:	4b0b      	ldr	r3, [pc, #44]	; (80150b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015086:	881a      	ldrh	r2, [r3, #0]
 8015088:	4b0d      	ldr	r3, [pc, #52]	; (80150c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801508a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801508c:	4b0c      	ldr	r3, [pc, #48]	; (80150c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801508e:	881a      	ldrh	r2, [r3, #0]
 8015090:	4b0a      	ldr	r3, [pc, #40]	; (80150bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015092:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8015094:	4b08      	ldr	r3, [pc, #32]	; (80150b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015096:	881a      	ldrh	r2, [r3, #0]
 8015098:	4b06      	ldr	r3, [pc, #24]	; (80150b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801509a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801509c:	4b04      	ldr	r3, [pc, #16]	; (80150b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801509e:	2200      	movs	r2, #0
 80150a0:	701a      	strb	r2, [r3, #0]
    }
 80150a2:	bf00      	nop
 80150a4:	370c      	adds	r7, #12
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	2000c634 	.word	0x2000c634
 80150b4:	2000c630 	.word	0x2000c630
 80150b8:	2000c636 	.word	0x2000c636
 80150bc:	2000c632 	.word	0x2000c632
 80150c0:	2000c638 	.word	0x2000c638

080150c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f002 fa4e 	bl	8017570 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80150d4:	bf00      	nop
 80150d6:	3708      	adds	r7, #8
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	4a05      	ldr	r2, [pc, #20]	; (80150fc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	601a      	str	r2, [r3, #0]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ff fe71 	bl	8014dd4 <_ZN8touchgfx3HALD1Ev>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	0802874c 	.word	0x0802874c

08015100 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7ff ffe7 	bl	80150dc <_ZN20TouchGFXGeneratedHALD1Ev>
 801510e:	2178      	movs	r1, #120	; 0x78
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f011 fa4d 	bl	80265b0 <_ZdlPvj>
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff ffca 	bl	80150c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015130:	bf00      	nop
 8015132:	3708      	adds	r7, #8
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b082      	sub	sp, #8
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	4618      	mov	r0, r3
 8015144:	f001 fb1c 	bl	8016780 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015148:	bf00      	nop
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	4618      	mov	r0, r3
 801515c:	f001 fb9c 	bl	8016898 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015160:	4603      	mov	r3, r0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	b082      	sub	sp, #8
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
 8015172:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6839      	ldr	r1, [r7, #0]
 8015178:	4618      	mov	r0, r3
 801517a:	f001 fb9b 	bl	80168b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801517e:	bf00      	nop
 8015180:	3708      	adds	r7, #8
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015186:	b580      	push	{r7, lr}
 8015188:	b082      	sub	sp, #8
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6839      	ldr	r1, [r7, #0]
 8015194:	4618      	mov	r0, r3
 8015196:	f001 fba3 	bl	80168e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801519a:	bf00      	nop
 801519c:	3708      	adds	r7, #8
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b082      	sub	sp, #8
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	4618      	mov	r0, r3
 80151ae:	f001 fb19 	bl	80167e4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80151b2:	bf00      	nop
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}

080151ba <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80151ba:	b580      	push	{r7, lr}
 80151bc:	b082      	sub	sp, #8
 80151be:	af00      	add	r7, sp, #0
 80151c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	4618      	mov	r0, r3
 80151c6:	f001 fb1d 	bl	8016804 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80151ca:	bf00      	nop
 80151cc:	3708      	adds	r7, #8
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}

080151d2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80151d2:	b580      	push	{r7, lr}
 80151d4:	b082      	sub	sp, #8
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	4618      	mov	r0, r3
 80151de:	f001 fb1f 	bl	8016820 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80151e2:	bf00      	nop
 80151e4:	3708      	adds	r7, #8
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b082      	sub	sp, #8
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	4618      	mov	r0, r3
 80151f6:	f001 fb21 	bl	801683c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80151fa:	bf00      	nop
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
	...

08015204 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	4a05      	ldr	r2, [pc, #20]	; (8015224 <_ZN11TouchGFXHALD1Ev+0x20>)
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	601a      	str	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	4618      	mov	r0, r3
 8015216:	f7ff ff61 	bl	80150dc <_ZN20TouchGFXGeneratedHALD1Ev>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4618      	mov	r0, r3
 801521e:	3708      	adds	r7, #8
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	08028550 	.word	0x08028550

08015228 <_ZN11TouchGFXHALD0Ev>:
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7ff ffe7 	bl	8015204 <_ZN11TouchGFXHALD1Ev>
 8015236:	2178      	movs	r1, #120	; 0x78
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f011 f9b9 	bl	80265b0 <_ZdlPvj>
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	4618      	mov	r0, r3
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8015248:	b580      	push	{r7, lr}
 801524a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801524c:	2203      	movs	r2, #3
 801524e:	2100      	movs	r1, #0
 8015250:	2001      	movs	r0, #1
 8015252:	f7f7 fdf1 	bl	800ce38 <xQueueGenericCreate>
 8015256:	4603      	mov	r3, r0
 8015258:	4a0b      	ldr	r2, [pc, #44]	; (8015288 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801525a:	6013      	str	r3, [r2, #0]
 801525c:	4b0a      	ldr	r3, [pc, #40]	; (8015288 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d006      	beq.n	8015272 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8015264:	4b08      	ldr	r3, [pc, #32]	; (8015288 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8015266:	6818      	ldr	r0, [r3, #0]
 8015268:	2300      	movs	r3, #0
 801526a:	2200      	movs	r2, #0
 801526c:	2100      	movs	r1, #0
 801526e:	f7f7 fe45 	bl	800cefc <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8015272:	2200      	movs	r2, #0
 8015274:	2101      	movs	r1, #1
 8015276:	2001      	movs	r0, #1
 8015278:	f7f7 fdde 	bl	800ce38 <xQueueGenericCreate>
 801527c:	4603      	mov	r3, r0
 801527e:	4a03      	ldr	r2, [pc, #12]	; (801528c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8015280:	6013      	str	r3, [r2, #0]
}
 8015282:	bf00      	nop
 8015284:	bd80      	pop	{r7, pc}
 8015286:	bf00      	nop
 8015288:	20008ed8 	.word	0x20008ed8
 801528c:	20008edc 	.word	0x20008edc

08015290 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8015290:	b580      	push	{r7, lr}
 8015292:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8015294:	4b04      	ldr	r3, [pc, #16]	; (80152a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	f04f 31ff 	mov.w	r1, #4294967295
 801529c:	4618      	mov	r0, r3
 801529e:	f7f8 f94f 	bl	800d540 <xQueueSemaphoreTake>
}
 80152a2:	bf00      	nop
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	20008ed8 	.word	0x20008ed8

080152ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80152b0:	4b04      	ldr	r3, [pc, #16]	; (80152c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80152b2:	6818      	ldr	r0, [r3, #0]
 80152b4:	2300      	movs	r3, #0
 80152b6:	2200      	movs	r2, #0
 80152b8:	2100      	movs	r1, #0
 80152ba:	f7f7 fe1f 	bl	800cefc <xQueueGenericSend>
}
 80152be:	bf00      	nop
 80152c0:	bd80      	pop	{r7, pc}
 80152c2:	bf00      	nop
 80152c4:	20008ed8 	.word	0x20008ed8

080152c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80152cc:	4b03      	ldr	r3, [pc, #12]	; (80152dc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	2100      	movs	r1, #0
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7f8 f934 	bl	800d540 <xQueueSemaphoreTake>
}
 80152d8:	bf00      	nop
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	20008ed8 	.word	0x20008ed8

080152e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80152e6:	2300      	movs	r3, #0
 80152e8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80152ea:	4b0b      	ldr	r3, [pc, #44]	; (8015318 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	1d3a      	adds	r2, r7, #4
 80152f0:	4611      	mov	r1, r2
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7f7 ffa8 	bl	800d248 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d007      	beq.n	801530e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80152fe:	4b07      	ldr	r3, [pc, #28]	; (801531c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8015300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015304:	601a      	str	r2, [r3, #0]
 8015306:	f3bf 8f4f 	dsb	sy
 801530a:	f3bf 8f6f 	isb	sy
}
 801530e:	bf00      	nop
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	20008ed8 	.word	0x20008ed8
 801531c:	e000ed04 	.word	0xe000ed04

08015320 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
    if (vsync_q)
 8015326:	4b0e      	ldr	r3, [pc, #56]	; (8015360 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d013      	beq.n	8015356 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801532e:	2300      	movs	r3, #0
 8015330:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8015332:	4b0b      	ldr	r3, [pc, #44]	; (8015360 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8015334:	6818      	ldr	r0, [r3, #0]
 8015336:	1d3a      	adds	r2, r7, #4
 8015338:	2300      	movs	r3, #0
 801533a:	490a      	ldr	r1, [pc, #40]	; (8015364 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801533c:	f7f7 fee4 	bl	800d108 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d007      	beq.n	8015356 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8015346:	4b08      	ldr	r3, [pc, #32]	; (8015368 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8015348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801534c:	601a      	str	r2, [r3, #0]
 801534e:	f3bf 8f4f 	dsb	sy
 8015352:	f3bf 8f6f 	isb	sy
    }
}
 8015356:	bf00      	nop
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	20008edc 	.word	0x20008edc
 8015364:	20000047 	.word	0x20000047
 8015368:	e000ed04 	.word	0xe000ed04

0801536c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801536c:	b580      	push	{r7, lr}
 801536e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8015370:	4b08      	ldr	r3, [pc, #32]	; (8015394 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2200      	movs	r2, #0
 8015376:	4908      	ldr	r1, [pc, #32]	; (8015398 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015378:	4618      	mov	r0, r3
 801537a:	f7f7 fffb 	bl	800d374 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801537e:	4b05      	ldr	r3, [pc, #20]	; (8015394 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	f04f 32ff 	mov.w	r2, #4294967295
 8015386:	4904      	ldr	r1, [pc, #16]	; (8015398 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015388:	4618      	mov	r0, r3
 801538a:	f7f7 fff3 	bl	800d374 <xQueueReceive>
}
 801538e:	bf00      	nop
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20008edc 	.word	0x20008edc
 8015398:	20000047 	.word	0x20000047

0801539c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	4603      	mov	r3, r0
 80153a4:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80153a6:	88fb      	ldrh	r3, [r7, #6]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f8 fd31 	bl	800de10 <vTaskDelay>
}
 80153ae:	bf00      	nop
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
	...

080153b8 <__NVIC_EnableIRQ>:
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80153c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	db0b      	blt.n	80153e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80153ca:	79fb      	ldrb	r3, [r7, #7]
 80153cc:	f003 021f 	and.w	r2, r3, #31
 80153d0:	4907      	ldr	r1, [pc, #28]	; (80153f0 <__NVIC_EnableIRQ+0x38>)
 80153d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153d6:	095b      	lsrs	r3, r3, #5
 80153d8:	2001      	movs	r0, #1
 80153da:	fa00 f202 	lsl.w	r2, r0, r2
 80153de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80153e2:	bf00      	nop
 80153e4:	370c      	adds	r7, #12
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr
 80153ee:	bf00      	nop
 80153f0:	e000e100 	.word	0xe000e100

080153f4 <__NVIC_DisableIRQ>:
{
 80153f4:	b480      	push	{r7}
 80153f6:	b083      	sub	sp, #12
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	4603      	mov	r3, r0
 80153fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80153fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015402:	2b00      	cmp	r3, #0
 8015404:	db12      	blt.n	801542c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015406:	79fb      	ldrb	r3, [r7, #7]
 8015408:	f003 021f 	and.w	r2, r3, #31
 801540c:	490a      	ldr	r1, [pc, #40]	; (8015438 <__NVIC_DisableIRQ+0x44>)
 801540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015412:	095b      	lsrs	r3, r3, #5
 8015414:	2001      	movs	r0, #1
 8015416:	fa00 f202 	lsl.w	r2, r0, r2
 801541a:	3320      	adds	r3, #32
 801541c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015420:	f3bf 8f4f 	dsb	sy
}
 8015424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015426:	f3bf 8f6f 	isb	sy
}
 801542a:	bf00      	nop
}
 801542c:	bf00      	nop
 801542e:	370c      	adds	r7, #12
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr
 8015438:	e000e100 	.word	0xe000e100

0801543c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
        return color;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
    }
 8015448:	4618      	mov	r0, r3
 801544a:	370c      	adds	r7, #12
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr

08015454 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8015454:	b480      	push	{r7}
 8015456:	b083      	sub	sp, #12
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	b29b      	uxth	r3, r3
    }
 8015462:	4618      	mov	r0, r3
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr
	...

08015470 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
    {
 8015478:	4a04      	ldr	r2, [pc, #16]	; (801548c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	601a      	str	r2, [r3, #0]
    }
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	4618      	mov	r0, r3
 8015482:	370c      	adds	r7, #12
 8015484:	46bd      	mov	sp, r7
 8015486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548a:	4770      	bx	lr
 801548c:	08028654 	.word	0x08028654

08015490 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
    }
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f7ff ffe9 	bl	8015470 <_ZN8touchgfx9DMA_QueueD1Ev>
 801549e:	2104      	movs	r1, #4
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f011 f885 	bl	80265b0 <_ZdlPvj>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	4618      	mov	r0, r3
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	3344      	adds	r3, #68	; 0x44
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	4798      	blx	r3
    }
 80154c4:	bf00      	nop
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80154d4:	2300      	movs	r3, #0
    }
 80154d6:	4618      	mov	r0, r3
 80154d8:	370c      	adds	r7, #12
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr
	...

080154e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
    {
 80154ec:	4a04      	ldr	r2, [pc, #16]	; (8015500 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	601a      	str	r2, [r3, #0]
    }
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	4618      	mov	r0, r3
 80154f6:	370c      	adds	r7, #12
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr
 8015500:	0802965c 	.word	0x0802965c

08015504 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
    }
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f7ff ffe9 	bl	80154e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015512:	210c      	movs	r1, #12
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f011 f84b 	bl	80265b0 <_ZdlPvj>
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	4618      	mov	r0, r3
 801551e:	3708      	adds	r7, #8
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801552e:	4a09      	ldr	r2, [pc, #36]	; (8015554 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	601a      	str	r2, [r3, #0]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	605a      	str	r2, [r3, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2200      	movs	r2, #0
 801553e:	721a      	strb	r2, [r3, #8]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2200      	movs	r2, #0
 8015544:	725a      	strb	r2, [r3, #9]
    {
    }
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	4618      	mov	r0, r3
 801554a:	370c      	adds	r7, #12
 801554c:	46bd      	mov	sp, r7
 801554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015552:	4770      	bx	lr
 8015554:	0802965c 	.word	0x0802965c

08015558 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	685a      	ldr	r2, [r3, #4]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	3314      	adds	r3, #20
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4610      	mov	r0, r2
 8015570:	4798      	blx	r3
    }
 8015572:	bf00      	nop
 8015574:	3708      	adds	r7, #8
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}

0801557a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801557a:	b580      	push	{r7, lr}
 801557c:	b082      	sub	sp, #8
 801557e:	af00      	add	r7, sp, #0
 8015580:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8015582:	687a      	ldr	r2, [r7, #4]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	3328      	adds	r3, #40	; 0x28
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	4610      	mov	r0, r2
 801558e:	4798      	blx	r3
    }
 8015590:	bf00      	nop
 8015592:	3708      	adds	r7, #8
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}

08015598 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8015598:	b480      	push	{r7}
 801559a:	b085      	sub	sp, #20
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	68ba      	ldr	r2, [r7, #8]
 80155b6:	430a      	orrs	r2, r1
 80155b8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155c0:	f023 0107 	bic.w	r1, r3, #7
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	430a      	orrs	r2, r1
 80155cc:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80155d4:	4b06      	ldr	r3, [pc, #24]	; (80155f0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80155d6:	4013      	ands	r3, r2
 80155d8:	68fa      	ldr	r2, [r7, #12]
 80155da:	6812      	ldr	r2, [r2, #0]
 80155dc:	6839      	ldr	r1, [r7, #0]
 80155de:	430b      	orrs	r3, r1
 80155e0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80155e2:	2300      	movs	r3, #0
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3714      	adds	r7, #20
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr
 80155f0:	ffffc000 	.word	0xffffc000

080155f4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80155fc:	f7fa fcb8 	bl	800ff70 <_ZN8touchgfx3HAL11getInstanceEv>
 8015600:	4603      	mov	r3, r0
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff ffa8 	bl	8015558 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8015608:	bf00      	nop
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}

08015610 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
    assert(0);
 8015618:	4b02      	ldr	r3, [pc, #8]	; (8015624 <DMA2D_XferErrorCallback+0x14>)
 801561a:	4a03      	ldr	r2, [pc, #12]	; (8015628 <DMA2D_XferErrorCallback+0x18>)
 801561c:	213e      	movs	r1, #62	; 0x3e
 801561e:	4803      	ldr	r0, [pc, #12]	; (801562c <DMA2D_XferErrorCallback+0x1c>)
 8015620:	f010 fff4 	bl	802660c <__assert_func>
 8015624:	08028034 	.word	0x08028034
 8015628:	08028038 	.word	0x08028038
 801562c:	0802806c 	.word	0x0802806c

08015630 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3318      	adds	r3, #24
 801563c:	4618      	mov	r0, r3
 801563e:	f7fe fe13 	bl	8014268 <_ZN8touchgfx9colortypeC1Ev>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	4618      	mov	r0, r3
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 801564c:	b5b0      	push	{r4, r5, r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	330c      	adds	r3, #12
 801565a:	4619      	mov	r1, r3
 801565c:	4610      	mov	r0, r2
 801565e:	f7ff ff61 	bl	8015524 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8015662:	4a0e      	ldr	r2, [pc, #56]	; (801569c <_ZN10STM32F7DMAC1Ev+0x50>)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	601a      	str	r2, [r3, #0]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f103 000c 	add.w	r0, r3, #12
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	3320      	adds	r3, #32
 8015672:	2260      	movs	r2, #96	; 0x60
 8015674:	4619      	mov	r1, r3
 8015676:	f002 fe1f 	bl	80182b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3320      	adds	r3, #32
 801567e:	245f      	movs	r4, #95	; 0x5f
 8015680:	461d      	mov	r5, r3
 8015682:	e004      	b.n	801568e <_ZN10STM32F7DMAC1Ev+0x42>
 8015684:	4628      	mov	r0, r5
 8015686:	f7ff ffd3 	bl	8015630 <_ZN8touchgfx6BlitOpC1Ev>
 801568a:	3520      	adds	r5, #32
 801568c:	3c01      	subs	r4, #1
 801568e:	2c00      	cmp	r4, #0
 8015690:	daf8      	bge.n	8015684 <_ZN10STM32F7DMAC1Ev+0x38>
{}
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	4618      	mov	r0, r3
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bdb0      	pop	{r4, r5, r7, pc}
 801569c:	08028604 	.word	0x08028604

080156a0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	4a0b      	ldr	r2, [pc, #44]	; (80156d8 <_ZN10STM32F7DMAD1Ev+0x38>)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80156ae:	480b      	ldr	r0, [pc, #44]	; (80156dc <_ZN10STM32F7DMAD1Ev+0x3c>)
 80156b0:	f7ef ff48 	bl	8005544 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80156b4:	205a      	movs	r0, #90	; 0x5a
 80156b6:	f7ff fe9d 	bl	80153f4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	330c      	adds	r3, #12
 80156be:	4618      	mov	r0, r3
 80156c0:	f000 faa8 	bl	8015c14 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7ff ff0c 	bl	80154e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	4618      	mov	r0, r3
 80156d0:	3708      	adds	r7, #8
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	08028604 	.word	0x08028604
 80156dc:	20000480 	.word	0x20000480

080156e0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b082      	sub	sp, #8
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
}
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f7ff ffd9 	bl	80156a0 <_ZN10STM32F7DMAD1Ev>
 80156ee:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f010 ff5c 	bl	80265b0 <_ZdlPvj>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	4618      	mov	r0, r3
 80156fc:	3708      	adds	r7, #8
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
	...

08015704 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b082      	sub	sp, #8
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801570c:	4b09      	ldr	r3, [pc, #36]	; (8015734 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801570e:	4a0a      	ldr	r2, [pc, #40]	; (8015738 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8015710:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8015712:	4808      	ldr	r0, [pc, #32]	; (8015734 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015714:	f7ef fecc 	bl	80054b0 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015718:	4b06      	ldr	r3, [pc, #24]	; (8015734 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801571a:	4a08      	ldr	r2, [pc, #32]	; (801573c <_ZN10STM32F7DMA10initializeEv+0x38>)
 801571c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801571e:	4b05      	ldr	r3, [pc, #20]	; (8015734 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015720:	4a07      	ldr	r2, [pc, #28]	; (8015740 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8015722:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8015724:	205a      	movs	r0, #90	; 0x5a
 8015726:	f7ff fe47 	bl	80153b8 <__NVIC_EnableIRQ>
}
 801572a:	bf00      	nop
 801572c:	3708      	adds	r7, #8
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	20000480 	.word	0x20000480
 8015738:	4002b000 	.word	0x4002b000
 801573c:	080155f5 	.word	0x080155f5
 8015740:	08015611 	.word	0x08015611

08015744 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8015744:	b480      	push	{r7}
 8015746:	b083      	sub	sp, #12
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 801574c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8015750:	4618      	mov	r0, r3
 8015752:	370c      	adds	r7, #12
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801575c:	b590      	push	{r4, r7, lr}
 801575e:	b08d      	sub	sp, #52	; 0x34
 8015760:	af02      	add	r7, sp, #8
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8015766:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801576a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801576c:	2300      	movs	r3, #0
 801576e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8015774:	2b20      	cmp	r3, #32
 8015776:	d007      	beq.n	8015788 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	2b40      	cmp	r3, #64	; 0x40
 801577e:	d003      	beq.n	8015788 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2b04      	cmp	r3, #4
 8015786:	d101      	bne.n	801578c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8015788:	2301      	movs	r3, #1
 801578a:	e000      	b.n	801578e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801578c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801578e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8015794:	2b80      	cmp	r3, #128	; 0x80
 8015796:	d004      	beq.n	80157a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157a0:	d101      	bne.n	80157a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80157a2:	2301      	movs	r3, #1
 80157a4:	e000      	b.n	80157a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80157a6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80157a8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80157aa:	f7fa fbed 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 80157ae:	4603      	mov	r3, r0
 80157b0:	681a      	ldr	r2, [r3, #0]
 80157b2:	3220      	adds	r2, #32
 80157b4:	6812      	ldr	r2, [r2, #0]
 80157b6:	4618      	mov	r0, r3
 80157b8:	4790      	blx	r2
 80157ba:	4603      	mov	r3, r0
 80157bc:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157c6:	d012      	beq.n	80157ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 80157c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157cc:	d820      	bhi.n	8015810 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80157ce:	2b80      	cmp	r3, #128	; 0x80
 80157d0:	d00a      	beq.n	80157e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 80157d2:	2b80      	cmp	r3, #128	; 0x80
 80157d4:	d81c      	bhi.n	8015810 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80157d6:	2b40      	cmp	r3, #64	; 0x40
 80157d8:	d017      	beq.n	801580a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80157da:	2b40      	cmp	r3, #64	; 0x40
 80157dc:	d818      	bhi.n	8015810 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80157de:	2b04      	cmp	r3, #4
 80157e0:	d008      	beq.n	80157f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 80157e2:	2b20      	cmp	r3, #32
 80157e4:	d011      	beq.n	801580a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80157e6:	e013      	b.n	8015810 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80157e8:	230a      	movs	r3, #10
 80157ea:	623b      	str	r3, [r7, #32]
        break;
 80157ec:	e01a      	b.n	8015824 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80157ee:	2309      	movs	r3, #9
 80157f0:	623b      	str	r3, [r7, #32]
        break;
 80157f2:	e017      	b.n	8015824 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80157f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80157f8:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80157fa:	7f7b      	ldrb	r3, [r7, #29]
 80157fc:	2b10      	cmp	r3, #16
 80157fe:	d101      	bne.n	8015804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8015800:	2302      	movs	r3, #2
 8015802:	e000      	b.n	8015806 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 8015804:	2301      	movs	r3, #1
 8015806:	623b      	str	r3, [r7, #32]
        break;
 8015808:	e00c      	b.n	8015824 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801580a:	2300      	movs	r3, #0
 801580c:	623b      	str	r3, [r7, #32]
        break;
 801580e:	e009      	b.n	8015824 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8015810:	2300      	movs	r3, #0
 8015812:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015814:	7f7b      	ldrb	r3, [r7, #29]
 8015816:	2b10      	cmp	r3, #16
 8015818:	d101      	bne.n	801581e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 801581a:	2302      	movs	r3, #2
 801581c:	e000      	b.n	8015820 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 801581e:	2301      	movs	r3, #1
 8015820:	623b      	str	r3, [r7, #32]
        break;
 8015822:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8015824:	4a77      	ldr	r2, [pc, #476]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015828:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801582a:	7f7b      	ldrb	r3, [r7, #29]
 801582c:	2b10      	cmp	r3, #16
 801582e:	d101      	bne.n	8015834 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 8015830:	2302      	movs	r3, #2
 8015832:	e000      	b.n	8015836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 8015834:	2301      	movs	r3, #1
 8015836:	4a73      	ldr	r2, [pc, #460]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015838:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	8adb      	ldrh	r3, [r3, #22]
 801583e:	461a      	mov	r2, r3
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	8a1b      	ldrh	r3, [r3, #16]
 8015844:	1ad3      	subs	r3, r2, r3
 8015846:	461a      	mov	r2, r3
 8015848:	4b6e      	ldr	r3, [pc, #440]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801584a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801584c:	7f7b      	ldrb	r3, [r7, #29]
 801584e:	2b10      	cmp	r3, #16
 8015850:	d101      	bne.n	8015856 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8015852:	2202      	movs	r2, #2
 8015854:	e000      	b.n	8015858 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 8015856:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	8adb      	ldrh	r3, [r3, #22]
 801585c:	4619      	mov	r1, r3
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	8a1b      	ldrh	r3, [r3, #16]
 8015862:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015866:	4867      	ldr	r0, [pc, #412]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015868:	f7ff fe96 	bl	8015598 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801586c:	4a65      	ldr	r2, [pc, #404]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801586e:	6a3b      	ldr	r3, [r7, #32]
 8015870:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	8a9b      	ldrh	r3, [r3, #20]
 8015876:	461a      	mov	r2, r3
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	8a1b      	ldrh	r3, [r3, #16]
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	461a      	mov	r2, r3
 8015880:	4b60      	ldr	r3, [pc, #384]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015882:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8015884:	7ffb      	ldrb	r3, [r7, #31]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d103      	bne.n	8015892 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 801588a:	7fbb      	ldrb	r3, [r7, #30]
 801588c:	2b00      	cmp	r3, #0
 801588e:	f000 8084 	beq.w	801599a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
    {
        if (blitOp.alpha < 255)
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	7f1b      	ldrb	r3, [r3, #28]
 8015896:	2bff      	cmp	r3, #255	; 0xff
 8015898:	d008      	beq.n	80158ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801589a:	4b5a      	ldr	r3, [pc, #360]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801589c:	2202      	movs	r2, #2
 801589e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	7f1b      	ldrb	r3, [r3, #28]
 80158a4:	461a      	mov	r2, r3
 80158a6:	4b57      	ldr	r3, [pc, #348]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80158a8:	635a      	str	r2, [r3, #52]	; 0x34
 80158aa:	e002      	b.n	80158b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80158ac:	4b55      	ldr	r3, [pc, #340]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80158ae:	2200      	movs	r2, #0
 80158b0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80158b2:	7fbb      	ldrb	r3, [r7, #30]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d05b      	beq.n	8015970 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
        {
            if (bitDepth == 16)
 80158b8:	7f7b      	ldrb	r3, [r7, #29]
 80158ba:	2b10      	cmp	r3, #16
 80158bc:	d14c      	bne.n	8015958 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	3318      	adds	r3, #24
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7ff fdc6 	bl	8015454 <_ZNK8touchgfx9colortypecvtEv>
 80158c8:	4603      	mov	r3, r0
 80158ca:	0adb      	lsrs	r3, r3, #11
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	f003 021f 	and.w	r2, r3, #31
 80158d2:	4613      	mov	r3, r2
 80158d4:	021b      	lsls	r3, r3, #8
 80158d6:	1a9b      	subs	r3, r3, r2
 80158d8:	4a4b      	ldr	r2, [pc, #300]	; (8015a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80158da:	fb82 1203 	smull	r1, r2, r2, r3
 80158de:	441a      	add	r2, r3
 80158e0:	1112      	asrs	r2, r2, #4
 80158e2:	17db      	asrs	r3, r3, #31
 80158e4:	1ad3      	subs	r3, r2, r3
 80158e6:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	3318      	adds	r3, #24
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff fdb1 	bl	8015454 <_ZNK8touchgfx9colortypecvtEv>
 80158f2:	4603      	mov	r3, r0
 80158f4:	095b      	lsrs	r3, r3, #5
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80158fc:	4613      	mov	r3, r2
 80158fe:	021b      	lsls	r3, r3, #8
 8015900:	1a9b      	subs	r3, r3, r2
 8015902:	4a42      	ldr	r2, [pc, #264]	; (8015a0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8015904:	fb82 1203 	smull	r1, r2, r2, r3
 8015908:	441a      	add	r2, r3
 801590a:	1152      	asrs	r2, r2, #5
 801590c:	17db      	asrs	r3, r3, #31
 801590e:	1ad3      	subs	r3, r2, r3
 8015910:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	3318      	adds	r3, #24
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff fd9c 	bl	8015454 <_ZNK8touchgfx9colortypecvtEv>
 801591c:	4603      	mov	r3, r0
 801591e:	f003 021f 	and.w	r2, r3, #31
 8015922:	4613      	mov	r3, r2
 8015924:	021b      	lsls	r3, r3, #8
 8015926:	1a9b      	subs	r3, r3, r2
 8015928:	4a37      	ldr	r2, [pc, #220]	; (8015a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801592a:	fb82 1203 	smull	r1, r2, r2, r3
 801592e:	441a      	add	r2, r3
 8015930:	1112      	asrs	r2, r2, #4
 8015932:	17db      	asrs	r3, r3, #31
 8015934:	1ad3      	subs	r3, r2, r3
 8015936:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	7f1b      	ldrb	r3, [r3, #28]
 801593c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	061a      	lsls	r2, r3, #24
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	041b      	lsls	r3, r3, #16
 8015946:	431a      	orrs	r2, r3
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	021b      	lsls	r3, r3, #8
 801594c:	431a      	orrs	r2, r3
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	4313      	orrs	r3, r2
 8015952:	4a2c      	ldr	r2, [pc, #176]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015954:	6353      	str	r3, [r2, #52]	; 0x34
 8015956:	e00b      	b.n	8015970 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	3318      	adds	r3, #24
 801595c:	4618      	mov	r0, r3
 801595e:	f7ff fd6d 	bl	801543c <_ZNK8touchgfx9colortype10getColor32Ev>
 8015962:	4602      	mov	r2, r0
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	7f1b      	ldrb	r3, [r3, #28]
 8015968:	061b      	lsls	r3, r3, #24
 801596a:	4313      	orrs	r3, r2
 801596c:	4a25      	ldr	r2, [pc, #148]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801596e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	8adb      	ldrh	r3, [r3, #22]
 8015974:	461a      	mov	r2, r3
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	8a1b      	ldrh	r3, [r3, #16]
 801597a:	1ad3      	subs	r3, r2, r3
 801597c:	461a      	mov	r2, r3
 801597e:	4b21      	ldr	r3, [pc, #132]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015980:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015982:	7f7b      	ldrb	r3, [r7, #29]
 8015984:	2b10      	cmp	r3, #16
 8015986:	d101      	bne.n	801598c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 8015988:	2302      	movs	r3, #2
 801598a:	e000      	b.n	801598e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 801598c:	2301      	movs	r3, #1
 801598e:	4a1d      	ldr	r2, [pc, #116]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015990:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8015992:	2100      	movs	r1, #0
 8015994:	481b      	ldr	r0, [pc, #108]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015996:	f7f0 f855 	bl	8005a44 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801599a:	2101      	movs	r1, #1
 801599c:	4819      	ldr	r0, [pc, #100]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801599e:	f7f0 f851 	bl	8005a44 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80159a2:	7ffb      	ldrb	r3, [r7, #31]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d102      	bne.n	80159ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 80159a8:	7fbb      	ldrb	r3, [r7, #30]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d015      	beq.n	80159da <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80159b2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80159b8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80159be:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80159c4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80159ca:	9301      	str	r3, [sp, #4]
 80159cc:	9200      	str	r2, [sp, #0]
 80159ce:	4623      	mov	r3, r4
 80159d0:	4602      	mov	r2, r0
 80159d2:	480c      	ldr	r0, [pc, #48]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80159d4:	f7ef fe59 	bl	800568a <HAL_DMA2D_BlendingStart_IT>
 80159d8:	e010      	b.n	80159fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80159de:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80159e4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80159ea:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80159f0:	9300      	str	r3, [sp, #0]
 80159f2:	4603      	mov	r3, r0
 80159f4:	4803      	ldr	r0, [pc, #12]	; (8015a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80159f6:	f7ef fe15 	bl	8005624 <HAL_DMA2D_Start_IT>
    }
}
 80159fa:	bf00      	nop
 80159fc:	bf00      	nop
 80159fe:	372c      	adds	r7, #44	; 0x2c
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd90      	pop	{r4, r7, pc}
 8015a04:	20000480 	.word	0x20000480
 8015a08:	84210843 	.word	0x84210843
 8015a0c:	82082083 	.word	0x82082083

08015a10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8015a10:	b590      	push	{r4, r7, lr}
 8015a12:	b08d      	sub	sp, #52	; 0x34
 8015a14:	af02      	add	r7, sp, #8
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8015a1a:	f7fa fab5 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	3220      	adds	r2, #32
 8015a24:	6812      	ldr	r2, [r2, #0]
 8015a26:	4618      	mov	r0, r3
 8015a28:	4790      	blx	r2
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015a2e:	7ffb      	ldrb	r3, [r7, #31]
 8015a30:	2b10      	cmp	r3, #16
 8015a32:	d101      	bne.n	8015a38 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8015a34:	2302      	movs	r3, #2
 8015a36:	e000      	b.n	8015a3a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8015a40:	7ffb      	ldrb	r3, [r7, #31]
 8015a42:	2b10      	cmp	r3, #16
 8015a44:	d14b      	bne.n	8015ade <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	3318      	adds	r3, #24
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7ff fd02 	bl	8015454 <_ZNK8touchgfx9colortypecvtEv>
 8015a50:	4603      	mov	r3, r0
 8015a52:	0adb      	lsrs	r3, r3, #11
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	f003 021f 	and.w	r2, r3, #31
 8015a5a:	4613      	mov	r3, r2
 8015a5c:	021b      	lsls	r3, r3, #8
 8015a5e:	1a9b      	subs	r3, r3, r2
 8015a60:	4a69      	ldr	r2, [pc, #420]	; (8015c08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8015a62:	fb82 1203 	smull	r1, r2, r2, r3
 8015a66:	441a      	add	r2, r3
 8015a68:	1112      	asrs	r2, r2, #4
 8015a6a:	17db      	asrs	r3, r3, #31
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	3318      	adds	r3, #24
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff fced 	bl	8015454 <_ZNK8touchgfx9colortypecvtEv>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	095b      	lsrs	r3, r3, #5
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015a84:	4613      	mov	r3, r2
 8015a86:	021b      	lsls	r3, r3, #8
 8015a88:	1a9b      	subs	r3, r3, r2
 8015a8a:	4a60      	ldr	r2, [pc, #384]	; (8015c0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8015a90:	441a      	add	r2, r3
 8015a92:	1152      	asrs	r2, r2, #5
 8015a94:	17db      	asrs	r3, r3, #31
 8015a96:	1ad3      	subs	r3, r2, r3
 8015a98:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	3318      	adds	r3, #24
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7ff fcd8 	bl	8015454 <_ZNK8touchgfx9colortypecvtEv>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	f003 021f 	and.w	r2, r3, #31
 8015aaa:	4613      	mov	r3, r2
 8015aac:	021b      	lsls	r3, r3, #8
 8015aae:	1a9b      	subs	r3, r3, r2
 8015ab0:	4a55      	ldr	r2, [pc, #340]	; (8015c08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8015ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8015ab6:	441a      	add	r2, r3
 8015ab8:	1112      	asrs	r2, r2, #4
 8015aba:	17db      	asrs	r3, r3, #31
 8015abc:	1ad3      	subs	r3, r2, r3
 8015abe:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	7f1b      	ldrb	r3, [r3, #28]
 8015ac4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	061a      	lsls	r2, r3, #24
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	041b      	lsls	r3, r3, #16
 8015ace:	431a      	orrs	r2, r3
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	021b      	lsls	r3, r3, #8
 8015ad4:	4313      	orrs	r3, r2
 8015ad6:	68fa      	ldr	r2, [r7, #12]
 8015ad8:	4313      	orrs	r3, r2
 8015ada:	623b      	str	r3, [r7, #32]
 8015adc:	e00b      	b.n	8015af6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	7f1b      	ldrb	r3, [r3, #28]
 8015ae2:	061b      	lsls	r3, r3, #24
 8015ae4:	461c      	mov	r4, r3
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	3318      	adds	r3, #24
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7ff fca6 	bl	801543c <_ZNK8touchgfx9colortype10getColor32Ev>
 8015af0:	4603      	mov	r3, r0
 8015af2:	4323      	orrs	r3, r4
 8015af4:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2b08      	cmp	r3, #8
 8015afc:	d103      	bne.n	8015b06 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8015afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015b04:	e003      	b.n	8015b0e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8015b06:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015b0c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8015b0e:	4a40      	ldr	r2, [pc, #256]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b12:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8015b14:	7ffb      	ldrb	r3, [r7, #31]
 8015b16:	2b10      	cmp	r3, #16
 8015b18:	d101      	bne.n	8015b1e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
 8015b1a:	2302      	movs	r3, #2
 8015b1c:	e000      	b.n	8015b20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8015b1e:	2301      	movs	r3, #1
 8015b20:	4a3b      	ldr	r2, [pc, #236]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b22:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	8adb      	ldrh	r3, [r3, #22]
 8015b28:	461a      	mov	r2, r3
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	8a1b      	ldrh	r3, [r3, #16]
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	461a      	mov	r2, r3
 8015b32:	4b37      	ldr	r3, [pc, #220]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b34:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015b36:	7ffb      	ldrb	r3, [r7, #31]
 8015b38:	2b10      	cmp	r3, #16
 8015b3a:	d101      	bne.n	8015b40 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x130>
 8015b3c:	2202      	movs	r2, #2
 8015b3e:	e000      	b.n	8015b42 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x132>
 8015b40:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	8adb      	ldrh	r3, [r3, #22]
 8015b46:	4619      	mov	r1, r3
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	8a1b      	ldrh	r3, [r3, #16]
 8015b4c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015b50:	482f      	ldr	r0, [pc, #188]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b52:	f7ff fd21 	bl	8015598 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8015b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015b5c:	d11e      	bne.n	8015b9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18c>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8015b5e:	4b2c      	ldr	r3, [pc, #176]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b60:	2201      	movs	r2, #1
 8015b62:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8015b64:	4a2a      	ldr	r2, [pc, #168]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b66:	6a3b      	ldr	r3, [r7, #32]
 8015b68:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8015b6a:	4b29      	ldr	r3, [pc, #164]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b6c:	2209      	movs	r2, #9
 8015b6e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	8adb      	ldrh	r3, [r3, #22]
 8015b74:	461a      	mov	r2, r3
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	8a1b      	ldrh	r3, [r3, #16]
 8015b7a:	1ad3      	subs	r3, r2, r3
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	4b24      	ldr	r3, [pc, #144]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b80:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015b82:	7ffb      	ldrb	r3, [r7, #31]
 8015b84:	2b10      	cmp	r3, #16
 8015b86:	d101      	bne.n	8015b8c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17c>
 8015b88:	2302      	movs	r3, #2
 8015b8a:	e000      	b.n	8015b8e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17e>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	4a20      	ldr	r2, [pc, #128]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b90:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8015b92:	2100      	movs	r1, #0
 8015b94:	481e      	ldr	r0, [pc, #120]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b96:	f7ef ff55 	bl	8005a44 <HAL_DMA2D_ConfigLayer>
 8015b9a:	e005      	b.n	8015ba8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x198>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8015b9c:	4a1c      	ldr	r2, [pc, #112]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8015ba2:	4b1b      	ldr	r3, [pc, #108]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8015ba8:	2101      	movs	r1, #1
 8015baa:	4819      	ldr	r0, [pc, #100]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015bac:	f7ef ff4a 	bl	8005a44 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8015bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015bb6:	d115      	bne.n	8015be4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d4>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bbc:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bc2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bc8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bce:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bd4:	9301      	str	r3, [sp, #4]
 8015bd6:	9200      	str	r2, [sp, #0]
 8015bd8:	4623      	mov	r3, r4
 8015bda:	4602      	mov	r2, r0
 8015bdc:	480c      	ldr	r0, [pc, #48]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015bde:	f7ef fd54 	bl	800568a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8015be2:	e00d      	b.n	8015c00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f0>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015bee:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015bf4:	9300      	str	r3, [sp, #0]
 8015bf6:	460b      	mov	r3, r1
 8015bf8:	6a39      	ldr	r1, [r7, #32]
 8015bfa:	4805      	ldr	r0, [pc, #20]	; (8015c10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015bfc:	f7ef fd12 	bl	8005624 <HAL_DMA2D_Start_IT>
}
 8015c00:	bf00      	nop
 8015c02:	372c      	adds	r7, #44	; 0x2c
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd90      	pop	{r4, r7, pc}
 8015c08:	84210843 	.word	0x84210843
 8015c0c:	82082083 	.word	0x82082083
 8015c10:	20000480 	.word	0x20000480

08015c14 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	4a05      	ldr	r2, [pc, #20]	; (8015c34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	601a      	str	r2, [r3, #0]
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7ff fc23 	bl	8015470 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}
 8015c34:	080296ac 	.word	0x080296ac

08015c38 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f7ff ffe7 	bl	8015c14 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015c46:	2114      	movs	r1, #20
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f010 fcb1 	bl	80265b0 <_ZdlPvj>
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	4618      	mov	r0, r3
 8015c52:	3708      	adds	r7, #8
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8015c58:	b480      	push	{r7}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
        texts = t;
 8015c60:	4a04      	ldr	r2, [pc, #16]	; (8015c74 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6013      	str	r3, [r2, #0]
    }
 8015c66:	bf00      	nop
 8015c68:	370c      	adds	r7, #12
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c70:	4770      	bx	lr
 8015c72:	bf00      	nop
 8015c74:	2000c6d8 	.word	0x2000c6d8

08015c78 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8015c78:	b480      	push	{r7}
 8015c7a:	b085      	sub	sp, #20
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	607a      	str	r2, [r7, #4]
 8015c84:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8015c86:	4a0b      	ldr	r2, [pc, #44]	; (8015cb4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	601a      	str	r2, [r3, #0]
            MVPApplication& app) : presenterStorage(pres),
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	68ba      	ldr	r2, [r7, #8]
 8015c90:	605a      	str	r2, [r3, #4]
        screenStorage(scr),
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	609a      	str	r2, [r3, #8]
        transitionStorage(tra),
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	683a      	ldr	r2, [r7, #0]
 8015c9c:	60da      	str	r2, [r3, #12]
        frontendApplication(app)
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	69ba      	ldr	r2, [r7, #24]
 8015ca2:	611a      	str	r2, [r3, #16]
    {
    }
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3714      	adds	r7, #20
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	0802873c 	.word	0x0802873c

08015cb8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8015cb8:	b480      	push	{r7}
 8015cba:	b083      	sub	sp, #12
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
    {
 8015cc0:	4a04      	ldr	r2, [pc, #16]	; (8015cd4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	601a      	str	r2, [r3, #0]
    }
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	4618      	mov	r0, r3
 8015cca:	370c      	adds	r7, #12
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd2:	4770      	bx	lr
 8015cd4:	0802873c 	.word	0x0802873c

08015cd8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
    }
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f7ff ffe9 	bl	8015cb8 <_ZN8touchgfx7MVPHeapD1Ev>
 8015ce6:	2114      	movs	r1, #20
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f010 fc61 	bl	80265b0 <_ZdlPvj>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8015cf8:	b480      	push	{r7}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
    {
 8015d00:	4a04      	ldr	r2, [pc, #16]	; (8015d14 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	601a      	str	r2, [r3, #0]
    }
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	370c      	adds	r7, #12
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d12:	4770      	bx	lr
 8015d14:	08029f90 	.word	0x08029f90

08015d18 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
    }
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f7ff ffe9 	bl	8015cf8 <_ZN8touchgfx3LCDD1Ev>
 8015d26:	2108      	movs	r1, #8
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f010 fc41 	bl	80265b0 <_ZdlPvj>
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	4618      	mov	r0, r3
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8015d38:	b480      	push	{r7}
 8015d3a:	b083      	sub	sp, #12
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2200      	movs	r2, #0
 8015d44:	801a      	strh	r2, [r3, #0]
            startY(0),
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	805a      	strh	r2, [r3, #2]
            downX(0),
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	809a      	strh	r2, [r3, #4]
            downY(0),
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2200      	movs	r2, #0
 8015d56:	80da      	strh	r2, [r3, #6]
            tickCount(0),
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	811a      	strh	r2, [r3, #8]
            velocityX(0),
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2200      	movs	r2, #0
 8015d62:	815a      	strh	r2, [r3, #10]
            velocityY(0),
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2200      	movs	r2, #0
 8015d68:	819a      	strh	r2, [r3, #12]
            inProgress(false)
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	739a      	strb	r2, [r3, #14]
        {
        }
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	4618      	mov	r0, r3
 8015d74:	370c      	adds	r7, #12
 8015d76:	46bd      	mov	sp, r7
 8015d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7c:	4770      	bx	lr

08015d7e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8015d7e:	b580      	push	{r7, lr}
 8015d80:	b082      	sub	sp, #8
 8015d82:	af00      	add	r7, sp, #0
 8015d84:	6078      	str	r0, [r7, #4]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f7ff ffd5 	bl	8015d38 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2200      	movs	r2, #0
 8015d92:	611a      	str	r2, [r3, #16]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2200      	movs	r2, #0
 8015d98:	829a      	strh	r2, [r3, #20]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3708      	adds	r7, #8
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}

08015da4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b084      	sub	sp, #16
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	607a      	str	r2, [r7, #4]
 8015db0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8015db2:	4a44      	ldr	r2, [pc, #272]	; (8015ec4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	601a      	str	r2, [r3, #0]
        dma(dmaInterface),
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	605a      	str	r2, [r3, #4]
        lcdRef(display),
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	687a      	ldr	r2, [r7, #4]
 8015dc2:	609a      	str	r2, [r3, #8]
        touchController(touchCtrl),
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	683a      	ldr	r2, [r7, #0]
 8015dc8:	60da      	str	r2, [r3, #12]
        mcuInstrumentation(0),
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	611a      	str	r2, [r3, #16]
        buttonController(0),
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	615a      	str	r2, [r3, #20]
        frameBufferAllocator(0),
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	619a      	str	r2, [r3, #24]
        displayOrientationChangeRequested(false)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	331c      	adds	r3, #28
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff ffcc 	bl	8015d7e <_ZN8touchgfx8GesturesC1Ev>
        taskDelayFunc(0),
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	2200      	movs	r2, #0
 8015dea:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer0(0),
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2200      	movs	r2, #0
 8015df0:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1(0),
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2200      	movs	r2, #0
 8015df6:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2(0),
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	645a      	str	r2, [r3, #68]	; 0x44
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        fingerSize(1),
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2201      	movs	r2, #1
 8015e0a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        lockDMAToPorch(true),
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	2201      	movs	r2, #1
 8015e12:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        auxiliaryLCD(0),
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	2200      	movs	r2, #0
 8015e1a:	64da      	str	r2, [r3, #76]	; 0x4c
        displayOrientationChangeRequested(false)
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	3350      	adds	r3, #80	; 0x50
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7fa fcce 	bl	80107c2 <_ZN8touchgfx4RectC1Ev>
        touchSampleRate(1),
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2201      	movs	r2, #1
 8015e2a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        mcuLoadPct(0),
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	2200      	movs	r2, #0
 8015e32:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        vSyncCnt(0),
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        vSyncForFrame(1),
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2201      	movs	r2, #1
 8015e42:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        vSyncCompensationEnabled(false),
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        clientDirty(false),
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2200      	movs	r2, #0
 8015e52:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        swapRequested(false),
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	2200      	movs	r2, #0
 8015e5a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        lastTouched(false),
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2200      	movs	r2, #0
 8015e62:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        updateMCULoad(0),
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        cc_begin(0),
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	2200      	movs	r2, #0
 8015e72:	671a      	str	r2, [r3, #112]	; 0x70
        displayOrientationChangeRequested(false)
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2200      	movs	r2, #0
 8015e78:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8015e7c:	4a12      	ldr	r2, [pc, #72]	; (8015ec8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8015e82:	4a12      	ldr	r2, [pc, #72]	; (8015ecc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8015e84:	8b3b      	ldrh	r3, [r7, #24]
 8015e86:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8015e88:	4a11      	ldr	r2, [pc, #68]	; (8015ed0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8015e8a:	8bbb      	ldrh	r3, [r7, #28]
 8015e8c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8015e8e:	4b11      	ldr	r3, [pc, #68]	; (8015ed4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8015e90:	2200      	movs	r2, #0
 8015e92:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015e94:	4b0d      	ldr	r3, [pc, #52]	; (8015ecc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8015e96:	881a      	ldrh	r2, [r3, #0]
 8015e98:	4b0f      	ldr	r3, [pc, #60]	; (8015ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8015e9a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015e9c:	4b0c      	ldr	r3, [pc, #48]	; (8015ed0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8015e9e:	881a      	ldrh	r2, [r3, #0]
 8015ea0:	4b0e      	ldr	r3, [pc, #56]	; (8015edc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8015ea2:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8015ea4:	8b3a      	ldrh	r2, [r7, #24]
 8015ea6:	8bbb      	ldrh	r3, [r7, #28]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	bf34      	ite	cc
 8015eac:	2301      	movcc	r3, #1
 8015eae:	2300      	movcs	r3, #0
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3710      	adds	r7, #16
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}
 8015ec4:	08029218 	.word	0x08029218
 8015ec8:	2000c63c 	.word	0x2000c63c
 8015ecc:	2000c630 	.word	0x2000c630
 8015ed0:	2000c632 	.word	0x2000c632
 8015ed4:	2000c634 	.word	0x2000c634
 8015ed8:	2000c636 	.word	0x2000c636
 8015edc:	2000c638 	.word	0x2000c638

08015ee0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7fa fa6f 	bl	80103d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8015ef2:	bf00      	nop
 8015ef4:	3708      	adds	r7, #8
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
	...

08015efc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b086      	sub	sp, #24
 8015f00:	af02      	add	r7, sp, #8
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	607a      	str	r2, [r7, #4]
 8015f08:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	9300      	str	r3, [sp, #0]
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	687a      	ldr	r2, [r7, #4]
 8015f14:	68b9      	ldr	r1, [r7, #8]
 8015f16:	f7ff feaf 	bl	8015c78 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015f1a:	4a04      	ldr	r2, [pc, #16]	; (8015f2c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	601a      	str	r2, [r3, #0]
    {

    }
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	4618      	mov	r0, r3
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	08028728 	.word	0x08028728

08015f30 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8015f30:	b580      	push	{r7, lr}
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	4801      	ldr	r0, [pc, #4]	; (8015f3c <__tcf_0+0xc>)
 8015f36:	f000 f9ef 	bl	8016318 <_ZN12FrontendHeapD1Ev>
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	20008ee0 	.word	0x20008ee0

08015f40 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8015f40:	b580      	push	{r7, lr}
 8015f42:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8015f44:	4b11      	ldr	r3, [pc, #68]	; (8015f8c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	f3bf 8f5b 	dmb	ish
 8015f4c:	f003 0301 	and.w	r3, r3, #1
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	bf0c      	ite	eq
 8015f54:	2301      	moveq	r3, #1
 8015f56:	2300      	movne	r3, #0
 8015f58:	b2db      	uxtb	r3, r3
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d013      	beq.n	8015f86 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8015f5e:	480b      	ldr	r0, [pc, #44]	; (8015f8c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015f60:	f010 fb28 	bl	80265b4 <__cxa_guard_acquire>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	bf14      	ite	ne
 8015f6a:	2301      	movne	r3, #1
 8015f6c:	2300      	moveq	r3, #0
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d008      	beq.n	8015f86 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8015f74:	4806      	ldr	r0, [pc, #24]	; (8015f90 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015f76:	f000 f831 	bl	8015fdc <_ZN12FrontendHeapC1Ev>
 8015f7a:	4806      	ldr	r0, [pc, #24]	; (8015f94 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8015f7c:	f010 fb64 	bl	8026648 <atexit>
 8015f80:	4802      	ldr	r0, [pc, #8]	; (8015f8c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015f82:	f010 fb23 	bl	80265cc <__cxa_guard_release>
        return instance;
 8015f86:	4b02      	ldr	r3, [pc, #8]	; (8015f90 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8015f88:	4618      	mov	r0, r3
 8015f8a:	bd80      	pop	{r7, pc}
 8015f8c:	2000b930 	.word	0x2000b930
 8015f90:	20008ee0 	.word	0x20008ee0
 8015f94:	08015f31 	.word	0x08015f31

08015f98 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b082      	sub	sp, #8
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	4a05      	ldr	r2, [pc, #20]	; (8015fb8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	601a      	str	r2, [r3, #0]
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7ff fe85 	bl	8015cb8 <_ZN8touchgfx7MVPHeapD1Ev>
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3708      	adds	r7, #8
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}
 8015fb8:	08028728 	.word	0x08028728

08015fbc <_ZN16FrontendHeapBaseD0Ev>:
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7ff ffe7 	bl	8015f98 <_ZN16FrontendHeapBaseD1Ev>
 8015fca:	2114      	movs	r1, #20
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f010 faef 	bl	80265b0 <_ZdlPvj>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3708      	adds	r7, #8
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015fdc:	b5b0      	push	{r4, r5, r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af02      	add	r7, sp, #8
 8015fe2:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f103 0414 	add.w	r4, r3, #20
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f642 02e8 	movw	r2, #10472	; 0x28e8
 8015ff8:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015ffa:	6879      	ldr	r1, [r7, #4]
 8015ffc:	f642 03fc 	movw	r3, #10492	; 0x28fc
 8016000:	440b      	add	r3, r1
        app(model, *this)
 8016002:	9300      	str	r3, [sp, #0]
 8016004:	4613      	mov	r3, r2
 8016006:	462a      	mov	r2, r5
 8016008:	4621      	mov	r1, r4
 801600a:	f7ff ff77 	bl	8015efc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801600e:	4a1a      	ldr	r2, [pc, #104]	; (8016078 <_ZN12FrontendHeapC1Ev+0x9c>)
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	601a      	str	r2, [r3, #0]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	3314      	adds	r3, #20
 8016018:	4618      	mov	r0, r3
 801601a:	f000 f8df 	bl	80161dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	332c      	adds	r3, #44	; 0x2c
 8016022:	4618      	mov	r0, r3
 8016024:	f000 f90e 	bl	8016244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	f642 03e8 	movw	r3, #10472	; 0x28e8
 801602e:	4413      	add	r3, r2
 8016030:	4618      	mov	r0, r3
 8016032:	f000 f93d 	bl	80162b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016036:	687a      	ldr	r2, [r7, #4]
 8016038:	f642 03fc 	movw	r3, #10492	; 0x28fc
 801603c:	4413      	add	r3, r2
 801603e:	687a      	ldr	r2, [r7, #4]
 8016040:	f642 214c 	movw	r1, #10828	; 0x2a4c
 8016044:	4411      	add	r1, r2
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	4618      	mov	r0, r3
 801604a:	f7fd ffdb 	bl	8014004 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801604e:	687a      	ldr	r2, [r7, #4]
 8016050:	f642 234c 	movw	r3, #10828	; 0x2a4c
 8016054:	4413      	add	r3, r2
 8016056:	4618      	mov	r0, r3
 8016058:	f7fe fdde 	bl	8014c18 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	f642 03fc 	movw	r3, #10492	; 0x28fc
 8016064:	4413      	add	r3, r2
 8016066:	4619      	mov	r1, r3
 8016068:	f7ff ff3a 	bl	8015ee0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	4618      	mov	r0, r3
 8016070:	3708      	adds	r7, #8
 8016072:	46bd      	mov	sp, r7
 8016074:	bdb0      	pop	{r4, r5, r7, pc}
 8016076:	bf00      	nop
 8016078:	08028678 	.word	0x08028678

0801607c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
    {
 8016084:	4a05      	ldr	r2, [pc, #20]	; (801609c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	601a      	str	r2, [r3, #0]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	4618      	mov	r0, r3
 801608e:	f7ff fe33 	bl	8015cf8 <_ZN8touchgfx3LCDD1Ev>
    }
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	4618      	mov	r0, r3
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	0802b36c 	.word	0x0802b36c

080160a0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
    }
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7ff ffe7 	bl	801607c <_ZN8touchgfx8LCD24bppD1Ev>
 80160ae:	2158      	movs	r1, #88	; 0x58
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f010 fa7d 	bl	80265b0 <_ZdlPvj>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	4618      	mov	r0, r3
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b086      	sub	sp, #24
 80160c4:	af02      	add	r7, sp, #8
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
 80160cc:	603b      	str	r3, [r7, #0]
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	8bbb      	ldrh	r3, [r7, #28]
 80160d2:	9301      	str	r3, [sp, #4]
 80160d4:	8b3b      	ldrh	r3, [r7, #24]
 80160d6:	9300      	str	r3, [sp, #0]
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	68b9      	ldr	r1, [r7, #8]
 80160de:	f7ff fe61 	bl	8015da4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80160e2:	4a04      	ldr	r2, [pc, #16]	; (80160f4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	601a      	str	r2, [r3, #0]
    }
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	4618      	mov	r0, r3
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	0802874c 	.word	0x0802874c

080160f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b086      	sub	sp, #24
 80160fc:	af02      	add	r7, sp, #8
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	607a      	str	r2, [r7, #4]
 8016104:	603b      	str	r3, [r7, #0]
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	8bbb      	ldrh	r3, [r7, #28]
 801610a:	9301      	str	r3, [sp, #4]
 801610c:	8b3b      	ldrh	r3, [r7, #24]
 801610e:	9300      	str	r3, [sp, #0]
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	68b9      	ldr	r1, [r7, #8]
 8016116:	f7ff ffd3 	bl	80160c0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801611a:	4a04      	ldr	r2, [pc, #16]	; (801612c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	601a      	str	r2, [r3, #0]
    }
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	4618      	mov	r0, r3
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	08028550 	.word	0x08028550

08016130 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	4a04      	ldr	r2, [pc, #16]	; (801614c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	601a      	str	r2, [r3, #0]
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	4618      	mov	r0, r3
 8016142:	370c      	adds	r7, #12
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr
 801614c:	08028538 	.word	0x08028538

08016150 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016150:	b580      	push	{r7, lr}
 8016152:	b082      	sub	sp, #8
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	4618      	mov	r0, r3
 801615c:	f7ff ffe8 	bl	8016130 <_ZN8touchgfx15TouchControllerC1Ev>
 8016160:	4a03      	ldr	r2, [pc, #12]	; (8016170 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	601a      	str	r2, [r3, #0]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4618      	mov	r0, r3
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}
 8016170:	08028520 	.word	0x08028520

08016174 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8016174:	b590      	push	{r4, r7, lr}
 8016176:	b085      	sub	sp, #20
 8016178:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801617a:	f7fd fe1f 	bl	8013dbc <_ZN14BitmapDatabase11getInstanceEv>
 801617e:	4604      	mov	r4, r0
 8016180:	f7fd fe26 	bl	8013dd0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016184:	4603      	mov	r3, r0
 8016186:	4619      	mov	r1, r3
 8016188:	2300      	movs	r3, #0
 801618a:	9300      	str	r3, [sp, #0]
 801618c:	2300      	movs	r3, #0
 801618e:	2200      	movs	r2, #0
 8016190:	4620      	mov	r0, r4
 8016192:	f006 fcd5 	bl	801cb40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8016196:	4809      	ldr	r0, [pc, #36]	; (80161bc <touchgfx_init+0x48>)
 8016198:	f7ff fd5e 	bl	8015c58 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801619c:	2000      	movs	r0, #0
 801619e:	f7fd fe3b 	bl	8013e18 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80161a2:	4807      	ldr	r0, [pc, #28]	; (80161c0 <touchgfx_init+0x4c>)
 80161a4:	f006 fc1a 	bl	801c9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80161a8:	f7ff feca 	bl	8015f40 <_ZN12FrontendHeap11getInstanceEv>
 80161ac:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80161ae:	4805      	ldr	r0, [pc, #20]	; (80161c4 <touchgfx_init+0x50>)
 80161b0:	f7fe ffc2 	bl	8015138 <_ZN11TouchGFXHAL10initializeEv>
}
 80161b4:	bf00      	nop
 80161b6:	370c      	adds	r7, #12
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd90      	pop	{r4, r7, pc}
 80161bc:	2000c5b0 	.word	0x2000c5b0
 80161c0:	20000048 	.word	0x20000048
 80161c4:	2000c5b4 	.word	0x2000c5b4

080161c8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80161cc:	4802      	ldr	r0, [pc, #8]	; (80161d8 <touchgfx_taskEntry+0x10>)
 80161ce:	f001 fa00 	bl	80175d2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80161d2:	bf00      	nop
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	2000c5b4 	.word	0x2000c5b4

080161dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80161dc:	b580      	push	{r7, lr}
 80161de:	b082      	sub	sp, #8
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	4618      	mov	r0, r3
 80161e8:	f000 fc70 	bl	8016acc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80161ec:	4a03      	ldr	r2, [pc, #12]	; (80161fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	601a      	str	r2, [r3, #0]
    {
    }
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	4618      	mov	r0, r3
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	080286f4 	.word	0x080286f4

08016200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
    {
    }
 8016208:	4a05      	ldr	r2, [pc, #20]	; (8016220 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	601a      	str	r2, [r3, #0]
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	4618      	mov	r0, r3
 8016212:	f000 fc59 	bl	8016ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	4618      	mov	r0, r3
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}
 8016220:	080286f4 	.word	0x080286f4

08016224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8016224:	b580      	push	{r7, lr}
 8016226:	b082      	sub	sp, #8
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
    }
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7ff ffe7 	bl	8016200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016232:	2118      	movs	r1, #24
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f010 f9bb 	bl	80265b0 <_ZdlPvj>
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	4618      	mov	r0, r3
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	4618      	mov	r0, r3
 8016250:	f000 fc3c 	bl	8016acc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016254:	4a03      	ldr	r2, [pc, #12]	; (8016264 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	601a      	str	r2, [r3, #0]
    }
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	4618      	mov	r0, r3
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}
 8016264:	080286c0 	.word	0x080286c0

08016268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
    }
 8016270:	4a05      	ldr	r2, [pc, #20]	; (8016288 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	601a      	str	r2, [r3, #0]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	4618      	mov	r0, r3
 801627a:	f000 fc25 	bl	8016ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	4618      	mov	r0, r3
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}
 8016288:	080286c0 	.word	0x080286c0

0801628c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
    }
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f7ff ffe7 	bl	8016268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801629a:	f642 01bc 	movw	r1, #10428	; 0x28bc
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f010 f986 	bl	80265b0 <_ZdlPvj>
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	4618      	mov	r0, r3
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
	...

080162b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f000 fc06 	bl	8016acc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80162c0:	4a03      	ldr	r2, [pc, #12]	; (80162d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	601a      	str	r2, [r3, #0]
    }
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	4618      	mov	r0, r3
 80162ca:	3708      	adds	r7, #8
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}
 80162d0:	0802868c 	.word	0x0802868c

080162d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b082      	sub	sp, #8
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
    }
 80162dc:	4a05      	ldr	r2, [pc, #20]	; (80162f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	601a      	str	r2, [r3, #0]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	4618      	mov	r0, r3
 80162e6:	f000 fbef 	bl	8016ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	4618      	mov	r0, r3
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	0802868c 	.word	0x0802868c

080162f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
    }
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	f7ff ffe7 	bl	80162d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016306:	2114      	movs	r1, #20
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f010 f951 	bl	80265b0 <_ZdlPvj>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	4618      	mov	r0, r3
 8016312:	3708      	adds	r7, #8
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016318:	b580      	push	{r7, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	4a11      	ldr	r2, [pc, #68]	; (8016368 <_ZN12FrontendHeapD1Ev+0x50>)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	601a      	str	r2, [r3, #0]
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	f642 03fc 	movw	r3, #10492	; 0x28fc
 801632c:	4413      	add	r3, r2
 801632e:	4618      	mov	r0, r3
 8016330:	f7fd fe32 	bl	8013f98 <_ZN19FrontendApplicationD1Ev>
 8016334:	687a      	ldr	r2, [r7, #4]
 8016336:	f642 03e8 	movw	r3, #10472	; 0x28e8
 801633a:	4413      	add	r3, r2
 801633c:	4618      	mov	r0, r3
 801633e:	f7ff ffc9 	bl	80162d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	332c      	adds	r3, #44	; 0x2c
 8016346:	4618      	mov	r0, r3
 8016348:	f7ff ff8e 	bl	8016268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	3314      	adds	r3, #20
 8016350:	4618      	mov	r0, r3
 8016352:	f7ff ff55 	bl	8016200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	f7ff fe1d 	bl	8015f98 <_ZN16FrontendHeapBaseD1Ev>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	4618      	mov	r0, r3
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	08028678 	.word	0x08028678

0801636c <_ZN12FrontendHeapD0Ev>:
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f7ff ffcf 	bl	8016318 <_ZN12FrontendHeapD1Ev>
 801637a:	f642 2150 	movw	r1, #10832	; 0x2a50
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f010 f916 	bl	80265b0 <_ZdlPvj>
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	4618      	mov	r0, r3
 8016388:	3708      	adds	r7, #8
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
	...

08016390 <_Z41__static_initialization_and_destruction_0ii>:
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af02      	add	r7, sp, #8
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	6039      	str	r1, [r7, #0]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b01      	cmp	r3, #1
 801639e:	d119      	bne.n	80163d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80163a6:	4293      	cmp	r3, r2
 80163a8:	d114      	bne.n	80163d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80163aa:	4818      	ldr	r0, [pc, #96]	; (801640c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80163ac:	f7ff fed0 	bl	8016150 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80163b0:	4817      	ldr	r0, [pc, #92]	; (8016410 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80163b2:	f7ff f94b 	bl	801564c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80163b6:	4817      	ldr	r0, [pc, #92]	; (8016414 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80163b8:	f008 fde8 	bl	801ef8c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80163bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80163c0:	9301      	str	r3, [sp, #4]
 80163c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80163c6:	9300      	str	r3, [sp, #0]
 80163c8:	4b10      	ldr	r3, [pc, #64]	; (801640c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80163ca:	4a12      	ldr	r2, [pc, #72]	; (8016414 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80163cc:	4910      	ldr	r1, [pc, #64]	; (8016410 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80163ce:	4812      	ldr	r0, [pc, #72]	; (8016418 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80163d0:	f7ff fe92 	bl	80160f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d113      	bne.n	8016402 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80163e0:	4293      	cmp	r3, r2
 80163e2:	d10e      	bne.n	8016402 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80163e4:	480c      	ldr	r0, [pc, #48]	; (8016418 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80163e6:	f7fe ff0d 	bl	8015204 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80163ea:	480c      	ldr	r0, [pc, #48]	; (801641c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80163ec:	f7f9 f87a 	bl	800f4e4 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80163f0:	4808      	ldr	r0, [pc, #32]	; (8016414 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80163f2:	f7ff fe43 	bl	801607c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80163f6:	4806      	ldr	r0, [pc, #24]	; (8016410 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80163f8:	f7ff f952 	bl	80156a0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80163fc:	4803      	ldr	r0, [pc, #12]	; (801640c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80163fe:	f7fe fca5 	bl	8014d4c <_ZN20STM32TouchControllerD1Ev>
}
 8016402:	bf00      	nop
 8016404:	3708      	adds	r7, #8
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
 801640a:	bf00      	nop
 801640c:	2000b934 	.word	0x2000b934
 8016410:	2000b938 	.word	0x2000b938
 8016414:	2000c558 	.word	0x2000c558
 8016418:	2000c5b4 	.word	0x2000c5b4
 801641c:	20000048 	.word	0x20000048

08016420 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8016420:	b480      	push	{r7}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016428:	2301      	movs	r3, #1
    }
 801642a:	4618      	mov	r0, r3
 801642c:	370c      	adds	r7, #12
 801642e:	46bd      	mov	sp, r7
 8016430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016434:	4770      	bx	lr

08016436 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8016436:	b480      	push	{r7}
 8016438:	b083      	sub	sp, #12
 801643a:	af00      	add	r7, sp, #0
 801643c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801643e:	230c      	movs	r3, #12
    }
 8016440:	4618      	mov	r0, r3
 8016442:	370c      	adds	r7, #12
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	460b      	mov	r3, r1
 8016456:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016458:	887a      	ldrh	r2, [r7, #2]
 801645a:	4613      	mov	r3, r2
 801645c:	005b      	lsls	r3, r3, #1
 801645e:	4413      	add	r3, r2
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	3308      	adds	r3, #8
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	4413      	add	r3, r2
    }
 8016468:	4618      	mov	r0, r3
 801646a:	370c      	adds	r7, #12
 801646c:	46bd      	mov	sp, r7
 801646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016472:	4770      	bx	lr

08016474 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8016474:	b480      	push	{r7}
 8016476:	b083      	sub	sp, #12
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	460b      	mov	r3, r1
 801647e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016480:	887a      	ldrh	r2, [r7, #2]
 8016482:	4613      	mov	r3, r2
 8016484:	005b      	lsls	r3, r3, #1
 8016486:	4413      	add	r3, r2
 8016488:	009b      	lsls	r3, r3, #2
 801648a:	3308      	adds	r3, #8
 801648c:	687a      	ldr	r2, [r7, #4]
 801648e:	4413      	add	r3, r2
    }
 8016490:	4618      	mov	r0, r3
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr

0801649c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80164a4:	2301      	movs	r3, #1
    }
 80164a6:	4618      	mov	r0, r3
 80164a8:	370c      	adds	r7, #12
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr

080164b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80164b2:	b480      	push	{r7}
 80164b4:	b083      	sub	sp, #12
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80164ba:	f642 03b4 	movw	r3, #10420	; 0x28b4
    }
 80164be:	4618      	mov	r0, r3
 80164c0:	370c      	adds	r7, #12
 80164c2:	46bd      	mov	sp, r7
 80164c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c8:	4770      	bx	lr

080164ca <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80164ca:	b480      	push	{r7}
 80164cc:	b083      	sub	sp, #12
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	6078      	str	r0, [r7, #4]
 80164d2:	460b      	mov	r3, r1
 80164d4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80164d6:	887b      	ldrh	r3, [r7, #2]
 80164d8:	f642 02b4 	movw	r2, #10420	; 0x28b4
 80164dc:	fb02 f303 	mul.w	r3, r2, r3
 80164e0:	3308      	adds	r3, #8
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	4413      	add	r3, r2
    }
 80164e6:	4618      	mov	r0, r3
 80164e8:	370c      	adds	r7, #12
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr

080164f2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80164f2:	b480      	push	{r7}
 80164f4:	b083      	sub	sp, #12
 80164f6:	af00      	add	r7, sp, #0
 80164f8:	6078      	str	r0, [r7, #4]
 80164fa:	460b      	mov	r3, r1
 80164fc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80164fe:	887b      	ldrh	r3, [r7, #2]
 8016500:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8016504:	fb02 f303 	mul.w	r3, r2, r3
 8016508:	3308      	adds	r3, #8
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	4413      	add	r3, r2
    }
 801650e:	4618      	mov	r0, r3
 8016510:	370c      	adds	r7, #12
 8016512:	46bd      	mov	sp, r7
 8016514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016518:	4770      	bx	lr

0801651a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801651a:	b480      	push	{r7}
 801651c:	b083      	sub	sp, #12
 801651e:	af00      	add	r7, sp, #0
 8016520:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016522:	2301      	movs	r3, #1
    }
 8016524:	4618      	mov	r0, r3
 8016526:	370c      	adds	r7, #12
 8016528:	46bd      	mov	sp, r7
 801652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652e:	4770      	bx	lr

08016530 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016538:	2310      	movs	r3, #16
    }
 801653a:	4618      	mov	r0, r3
 801653c:	370c      	adds	r7, #12
 801653e:	46bd      	mov	sp, r7
 8016540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016544:	4770      	bx	lr

08016546 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016546:	b480      	push	{r7}
 8016548:	b083      	sub	sp, #12
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	460b      	mov	r3, r1
 8016550:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016552:	887b      	ldrh	r3, [r7, #2]
 8016554:	011b      	lsls	r3, r3, #4
 8016556:	3308      	adds	r3, #8
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	4413      	add	r3, r2
    }
 801655c:	4618      	mov	r0, r3
 801655e:	370c      	adds	r7, #12
 8016560:	46bd      	mov	sp, r7
 8016562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016566:	4770      	bx	lr

08016568 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016568:	b480      	push	{r7}
 801656a:	b083      	sub	sp, #12
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	460b      	mov	r3, r1
 8016572:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016574:	887b      	ldrh	r3, [r7, #2]
 8016576:	011b      	lsls	r3, r3, #4
 8016578:	3308      	adds	r3, #8
 801657a:	687a      	ldr	r2, [r7, #4]
 801657c:	4413      	add	r3, r2
    }
 801657e:	4618      	mov	r0, r3
 8016580:	370c      	adds	r7, #12
 8016582:	46bd      	mov	sp, r7
 8016584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016588:	4770      	bx	lr

0801658a <_GLOBAL__sub_I_touchgfx_init>:
 801658a:	b580      	push	{r7, lr}
 801658c:	af00      	add	r7, sp, #0
 801658e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016592:	2001      	movs	r0, #1
 8016594:	f7ff fefc 	bl	8016390 <_Z41__static_initialization_and_destruction_0ii>
 8016598:	bd80      	pop	{r7, pc}

0801659a <_GLOBAL__sub_D_touchgfx_init>:
 801659a:	b580      	push	{r7, lr}
 801659c:	af00      	add	r7, sp, #0
 801659e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80165a2:	2000      	movs	r0, #0
 80165a4:	f7ff fef4 	bl	8016390 <_Z41__static_initialization_and_destruction_0ii>
 80165a8:	bd80      	pop	{r7, pc}

080165aa <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80165aa:	b580      	push	{r7, lr}
 80165ac:	b082      	sub	sp, #8
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	3318      	adds	r3, #24
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	4798      	blx	r3
    }
 80165be:	bf00      	nop
 80165c0:	3708      	adds	r7, #8
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}

080165c6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80165c6:	b480      	push	{r7}
 80165c8:	b083      	sub	sp, #12
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
 80165ce:	460b      	mov	r3, r1
 80165d0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	78fa      	ldrb	r2, [r7, #3]
 80165d6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80165da:	bf00      	nop
 80165dc:	370c      	adds	r7, #12
 80165de:	46bd      	mov	sp, r7
 80165e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e4:	4770      	bx	lr

080165e6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80165e6:	b480      	push	{r7}
 80165e8:	b083      	sub	sp, #12
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80165f4:	3301      	adds	r3, #1
 80165f6:	b2da      	uxtb	r2, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80165fe:	bf00      	nop
 8016600:	370c      	adds	r7, #12
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr
	...

0801660c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	460b      	mov	r3, r1
 8016616:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8016618:	78fb      	ldrb	r3, [r7, #3]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d002      	beq.n	8016624 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801661e:	78fb      	ldrb	r3, [r7, #3]
 8016620:	2b02      	cmp	r3, #2
 8016622:	d105      	bne.n	8016630 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	78fa      	ldrb	r2, [r7, #3]
 8016628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801662c:	2301      	movs	r3, #1
 801662e:	e027      	b.n	8016680 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8016630:	78fb      	ldrb	r3, [r7, #3]
 8016632:	2b01      	cmp	r3, #1
 8016634:	d123      	bne.n	801667e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801663a:	2b00      	cmp	r3, #0
 801663c:	d014      	beq.n	8016668 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	3380      	adds	r3, #128	; 0x80
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	4798      	blx	r3
 801664a:	4603      	mov	r3, r0
 801664c:	461a      	mov	r2, r3
 801664e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016652:	429a      	cmp	r2, r3
 8016654:	d008      	beq.n	8016668 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016656:	4b0c      	ldr	r3, [pc, #48]	; (8016688 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	f083 0301 	eor.w	r3, r3, #1
 801665e:	b2db      	uxtb	r3, r3
 8016660:	2b00      	cmp	r3, #0
 8016662:	d001      	beq.n	8016668 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016664:	2301      	movs	r3, #1
 8016666:	e000      	b.n	801666a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8016668:	2300      	movs	r3, #0
 801666a:	2b00      	cmp	r3, #0
 801666c:	d005      	beq.n	801667a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	78fa      	ldrb	r2, [r7, #3]
 8016672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8016676:	2301      	movs	r3, #1
 8016678:	e002      	b.n	8016680 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801667a:	2300      	movs	r3, #0
 801667c:	e000      	b.n	8016680 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801667e:	2300      	movs	r3, #0
    }
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	2000c63a 	.word	0x2000c63a

0801668c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 801668c:	b480      	push	{r7}
 801668e:	b083      	sub	sp, #12
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	683a      	ldr	r2, [r7, #0]
 801669a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801669c:	bf00      	nop
 801669e:	370c      	adds	r7, #12
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr

080166a8 <__NVIC_EnableIRQ>:
{
 80166a8:	b480      	push	{r7}
 80166aa:	b083      	sub	sp, #12
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	4603      	mov	r3, r0
 80166b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80166b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	db0b      	blt.n	80166d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80166ba:	79fb      	ldrb	r3, [r7, #7]
 80166bc:	f003 021f 	and.w	r2, r3, #31
 80166c0:	4907      	ldr	r1, [pc, #28]	; (80166e0 <__NVIC_EnableIRQ+0x38>)
 80166c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166c6:	095b      	lsrs	r3, r3, #5
 80166c8:	2001      	movs	r0, #1
 80166ca:	fa00 f202 	lsl.w	r2, r0, r2
 80166ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80166d2:	bf00      	nop
 80166d4:	370c      	adds	r7, #12
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr
 80166de:	bf00      	nop
 80166e0:	e000e100 	.word	0xe000e100

080166e4 <__NVIC_DisableIRQ>:
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	4603      	mov	r3, r0
 80166ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80166ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	db12      	blt.n	801671c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80166f6:	79fb      	ldrb	r3, [r7, #7]
 80166f8:	f003 021f 	and.w	r2, r3, #31
 80166fc:	490a      	ldr	r1, [pc, #40]	; (8016728 <__NVIC_DisableIRQ+0x44>)
 80166fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016702:	095b      	lsrs	r3, r3, #5
 8016704:	2001      	movs	r0, #1
 8016706:	fa00 f202 	lsl.w	r2, r0, r2
 801670a:	3320      	adds	r3, #32
 801670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016710:	f3bf 8f4f 	dsb	sy
}
 8016714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016716:	f3bf 8f6f 	isb	sy
}
 801671a:	bf00      	nop
}
 801671c:	bf00      	nop
 801671e:	370c      	adds	r7, #12
 8016720:	46bd      	mov	sp, r7
 8016722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016726:	4770      	bx	lr
 8016728:	e000e100 	.word	0xe000e100

0801672c <__NVIC_SetPriority>:
{
 801672c:	b480      	push	{r7}
 801672e:	b083      	sub	sp, #12
 8016730:	af00      	add	r7, sp, #0
 8016732:	4603      	mov	r3, r0
 8016734:	6039      	str	r1, [r7, #0]
 8016736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801673c:	2b00      	cmp	r3, #0
 801673e:	db0a      	blt.n	8016756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	b2da      	uxtb	r2, r3
 8016744:	490c      	ldr	r1, [pc, #48]	; (8016778 <__NVIC_SetPriority+0x4c>)
 8016746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801674a:	0112      	lsls	r2, r2, #4
 801674c:	b2d2      	uxtb	r2, r2
 801674e:	440b      	add	r3, r1
 8016750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016754:	e00a      	b.n	801676c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	b2da      	uxtb	r2, r3
 801675a:	4908      	ldr	r1, [pc, #32]	; (801677c <__NVIC_SetPriority+0x50>)
 801675c:	79fb      	ldrb	r3, [r7, #7]
 801675e:	f003 030f 	and.w	r3, r3, #15
 8016762:	3b04      	subs	r3, #4
 8016764:	0112      	lsls	r2, r2, #4
 8016766:	b2d2      	uxtb	r2, r2
 8016768:	440b      	add	r3, r1
 801676a:	761a      	strb	r2, [r3, #24]
}
 801676c:	bf00      	nop
 801676e:	370c      	adds	r7, #12
 8016770:	46bd      	mov	sp, r7
 8016772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016776:	4770      	bx	lr
 8016778:	e000e100 	.word	0xe000e100
 801677c:	e000ed00 	.word	0xe000ed00

08016780 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016780:	b5b0      	push	{r4, r5, r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	4618      	mov	r0, r3
 801678c:	f001 f9e6 	bl	8017b5c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8016790:	687d      	ldr	r5, [r7, #4]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	334c      	adds	r3, #76	; 0x4c
 8016798:	681c      	ldr	r4, [r3, #0]
 801679a:	f003 ff43 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 801679e:	4603      	mov	r3, r0
 80167a0:	4619      	mov	r1, r3
 80167a2:	4628      	mov	r0, r5
 80167a4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	490d      	ldr	r1, [pc, #52]	; (80167e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ff ff6e 	bl	801668c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2101      	movs	r1, #1
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7ff ff29 	bl	801660c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	3374      	adds	r3, #116	; 0x74
 80167c2:	681c      	ldr	r4, [r3, #0]
 80167c4:	2300      	movs	r3, #0
 80167c6:	2200      	movs	r2, #0
 80167c8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80167cc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2101      	movs	r1, #1
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7ff fef7 	bl	80165c6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80167d8:	bf00      	nop
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bdb0      	pop	{r4, r5, r7, pc}
 80167e0:	0801539d 	.word	0x0801539d

080167e4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80167ec:	2109      	movs	r1, #9
 80167ee:	205a      	movs	r0, #90	; 0x5a
 80167f0:	f7ff ff9c 	bl	801672c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80167f4:	2109      	movs	r1, #9
 80167f6:	2058      	movs	r0, #88	; 0x58
 80167f8:	f7ff ff98 	bl	801672c <__NVIC_SetPriority>
}
 80167fc:	bf00      	nop
 80167fe:	3708      	adds	r7, #8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801680c:	205a      	movs	r0, #90	; 0x5a
 801680e:	f7ff ff4b 	bl	80166a8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016812:	2058      	movs	r0, #88	; 0x58
 8016814:	f7ff ff48 	bl	80166a8 <__NVIC_EnableIRQ>
}
 8016818:	bf00      	nop
 801681a:	3708      	adds	r7, #8
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}

08016820 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016828:	205a      	movs	r0, #90	; 0x5a
 801682a:	f7ff ff5b 	bl	80166e4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801682e:	2058      	movs	r0, #88	; 0x58
 8016830:	f7ff ff58 	bl	80166e4 <__NVIC_DisableIRQ>
}
 8016834:	bf00      	nop
 8016836:	3708      	adds	r7, #8
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}

0801683c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801683c:	b480      	push	{r7}
 801683e:	b083      	sub	sp, #12
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016844:	4b11      	ldr	r3, [pc, #68]	; (801688c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016846:	68db      	ldr	r3, [r3, #12]
 8016848:	b29b      	uxth	r3, r3
 801684a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801684e:	b29b      	uxth	r3, r3
 8016850:	3b01      	subs	r3, #1
 8016852:	b29a      	uxth	r2, r3
 8016854:	4b0e      	ldr	r3, [pc, #56]	; (8016890 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016856:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016858:	4b0c      	ldr	r3, [pc, #48]	; (801688c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801685a:	691b      	ldr	r3, [r3, #16]
 801685c:	b29b      	uxth	r3, r3
 801685e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016862:	b29b      	uxth	r3, r3
 8016864:	3b01      	subs	r3, #1
 8016866:	b29a      	uxth	r2, r3
 8016868:	4b0a      	ldr	r3, [pc, #40]	; (8016894 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801686a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801686c:	4b08      	ldr	r3, [pc, #32]	; (8016890 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801686e:	881a      	ldrh	r2, [r3, #0]
 8016870:	4b06      	ldr	r3, [pc, #24]	; (801688c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016872:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016874:	4b05      	ldr	r3, [pc, #20]	; (801688c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016878:	4a04      	ldr	r2, [pc, #16]	; (801688c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801687a:	f043 0301 	orr.w	r3, r3, #1
 801687e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016880:	bf00      	nop
 8016882:	370c      	adds	r7, #12
 8016884:	46bd      	mov	sp, r7
 8016886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688a:	4770      	bx	lr
 801688c:	40016800 	.word	0x40016800
 8016890:	2000c62c 	.word	0x2000c62c
 8016894:	2000c62e 	.word	0x2000c62e

08016898 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80168a0:	4b03      	ldr	r3, [pc, #12]	; (80168b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80168a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	370c      	adds	r7, #12
 80168a8:	46bd      	mov	sp, r7
 80168aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ae:	4770      	bx	lr
 80168b0:	40016884 	.word	0x40016884

080168b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80168b4:	b480      	push	{r7}
 80168b6:	b083      	sub	sp, #12
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80168be:	4a06      	ldr	r2, [pc, #24]	; (80168d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80168c4:	4b05      	ldr	r3, [pc, #20]	; (80168dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80168c6:	2201      	movs	r2, #1
 80168c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80168ca:	bf00      	nop
 80168cc:	370c      	adds	r7, #12
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	40016884 	.word	0x40016884
 80168dc:	40016800 	.word	0x40016800

080168e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
 80168e8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6839      	ldr	r1, [r7, #0]
 80168ee:	4618      	mov	r0, r3
 80168f0:	f000 fe44 	bl	801757c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80168f4:	bf00      	nop
 80168f6:	3708      	adds	r7, #8
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80168fc:	b480      	push	{r7}
 80168fe:	b085      	sub	sp, #20
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8016904:	4b0d      	ldr	r3, [pc, #52]	; (801693c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016908:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801690a:	4b0c      	ldr	r3, [pc, #48]	; (801693c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	b29b      	uxth	r3, r3
 8016910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016914:	b29b      	uxth	r3, r3
 8016916:	3301      	adds	r3, #1
 8016918:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801691a:	89fa      	ldrh	r2, [r7, #14]
 801691c:	89bb      	ldrh	r3, [r7, #12]
 801691e:	429a      	cmp	r2, r3
 8016920:	d201      	bcs.n	8016926 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8016922:	2300      	movs	r3, #0
 8016924:	e003      	b.n	801692e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8016926:	89fa      	ldrh	r2, [r7, #14]
 8016928:	89bb      	ldrh	r3, [r7, #12]
 801692a:	1ad3      	subs	r3, r2, r3
 801692c:	b29b      	uxth	r3, r3
    }
}
 801692e:	4618      	mov	r0, r3
 8016930:	3714      	adds	r7, #20
 8016932:	46bd      	mov	sp, r7
 8016934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop
 801693c:	40016800 	.word	0x40016800

08016940 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8016940:	b580      	push	{r7, lr}
 8016942:	b082      	sub	sp, #8
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016948:	4b1a      	ldr	r3, [pc, #104]	; (80169b4 <HAL_LTDC_LineEventCallback+0x74>)
 801694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801694c:	4a1a      	ldr	r2, [pc, #104]	; (80169b8 <HAL_LTDC_LineEventCallback+0x78>)
 801694e:	8812      	ldrh	r2, [r2, #0]
 8016950:	4293      	cmp	r3, r2
 8016952:	bf0c      	ite	eq
 8016954:	2301      	moveq	r3, #1
 8016956:	2300      	movne	r3, #0
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b00      	cmp	r3, #0
 801695c:	d017      	beq.n	801698e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801695e:	4b17      	ldr	r3, [pc, #92]	; (80169bc <HAL_LTDC_LineEventCallback+0x7c>)
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	4619      	mov	r1, r3
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f7ef fd3f 	bl	80063e8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801696a:	f7f9 fb01 	bl	800ff70 <_ZN8touchgfx3HAL11getInstanceEv>
 801696e:	4603      	mov	r3, r0
 8016970:	4618      	mov	r0, r3
 8016972:	f7ff fe38 	bl	80165e6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016976:	f7fe fcd3 	bl	8015320 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801697a:	f7f9 faf9 	bl	800ff70 <_ZN8touchgfx3HAL11getInstanceEv>
 801697e:	4603      	mov	r3, r0
 8016980:	4618      	mov	r0, r3
 8016982:	f001 fb73 	bl	801806c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016986:	2000      	movs	r0, #0
 8016988:	f7fe fa02 	bl	8014d90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801698c:	e00e      	b.n	80169ac <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801698e:	4b0a      	ldr	r3, [pc, #40]	; (80169b8 <HAL_LTDC_LineEventCallback+0x78>)
 8016990:	881b      	ldrh	r3, [r3, #0]
 8016992:	4619      	mov	r1, r3
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f7ef fd27 	bl	80063e8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801699a:	2000      	movs	r0, #0
 801699c:	f7fe fa03 	bl	8014da6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80169a0:	f7f9 fae6 	bl	800ff70 <_ZN8touchgfx3HAL11getInstanceEv>
 80169a4:	4603      	mov	r3, r0
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7ff fdff 	bl	80165aa <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}
 80169b4:	40016800 	.word	0x40016800
 80169b8:	2000c62c 	.word	0x2000c62c
 80169bc:	2000c62e 	.word	0x2000c62e

080169c0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80169c0:	8880      	ldrh	r0, [r0, #4]
 80169c2:	4770      	bx	lr

080169c4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80169c4:	2300      	movs	r3, #0
 80169c6:	8083      	strh	r3, [r0, #4]
 80169c8:	4770      	bx	lr
	...

080169cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80169cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ce:	6803      	ldr	r3, [r0, #0]
 80169d0:	460e      	mov	r6, r1
 80169d2:	2100      	movs	r1, #0
 80169d4:	4605      	mov	r5, r0
 80169d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169d8:	4798      	blx	r3
 80169da:	4604      	mov	r4, r0
 80169dc:	682b      	ldr	r3, [r5, #0]
 80169de:	4628      	mov	r0, r5
 80169e0:	1b34      	subs	r4, r6, r4
 80169e2:	6a1b      	ldr	r3, [r3, #32]
 80169e4:	b2a4      	uxth	r4, r4
 80169e6:	4798      	blx	r3
 80169e8:	88ab      	ldrh	r3, [r5, #4]
 80169ea:	fbb4 f4f0 	udiv	r4, r4, r0
 80169ee:	42a3      	cmp	r3, r4
 80169f0:	d805      	bhi.n	80169fe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80169f2:	4b0e      	ldr	r3, [pc, #56]	; (8016a2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80169f4:	211e      	movs	r1, #30
 80169f6:	4a0e      	ldr	r2, [pc, #56]	; (8016a30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80169f8:	480e      	ldr	r0, [pc, #56]	; (8016a34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80169fa:	f00f fe07 	bl	802660c <__assert_func>
 80169fe:	682b      	ldr	r3, [r5, #0]
 8016a00:	2100      	movs	r1, #0
 8016a02:	4628      	mov	r0, r5
 8016a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a06:	4798      	blx	r3
 8016a08:	682b      	ldr	r3, [r5, #0]
 8016a0a:	4607      	mov	r7, r0
 8016a0c:	4628      	mov	r0, r5
 8016a0e:	6a1b      	ldr	r3, [r3, #32]
 8016a10:	4798      	blx	r3
 8016a12:	1bf3      	subs	r3, r6, r7
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	fbb3 f2f0 	udiv	r2, r3, r0
 8016a1a:	fb02 3010 	mls	r0, r2, r0, r3
 8016a1e:	b118      	cbz	r0, 8016a28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016a20:	4b05      	ldr	r3, [pc, #20]	; (8016a38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016a22:	211f      	movs	r1, #31
 8016a24:	4a02      	ldr	r2, [pc, #8]	; (8016a30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016a26:	e7e7      	b.n	80169f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016a28:	4620      	mov	r0, r4
 8016a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a2c:	080287f8 	.word	0x080287f8
 8016a30:	08028966 	.word	0x08028966
 8016a34:	0802880d 	.word	0x0802880d
 8016a38:	0802883b 	.word	0x0802883b

08016a3c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016a3c:	b538      	push	{r3, r4, r5, lr}
 8016a3e:	6803      	ldr	r3, [r0, #0]
 8016a40:	460d      	mov	r5, r1
 8016a42:	4604      	mov	r4, r0
 8016a44:	6a1b      	ldr	r3, [r3, #32]
 8016a46:	4798      	blx	r3
 8016a48:	4285      	cmp	r5, r0
 8016a4a:	d905      	bls.n	8016a58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016a4c:	4b0c      	ldr	r3, [pc, #48]	; (8016a80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016a4e:	212f      	movs	r1, #47	; 0x2f
 8016a50:	4a0c      	ldr	r2, [pc, #48]	; (8016a84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016a52:	480d      	ldr	r0, [pc, #52]	; (8016a88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016a54:	f00f fdda 	bl	802660c <__assert_func>
 8016a58:	6823      	ldr	r3, [r4, #0]
 8016a5a:	4620      	mov	r0, r4
 8016a5c:	88a5      	ldrh	r5, [r4, #4]
 8016a5e:	69db      	ldr	r3, [r3, #28]
 8016a60:	4798      	blx	r3
 8016a62:	4285      	cmp	r5, r0
 8016a64:	d303      	bcc.n	8016a6e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016a66:	4b09      	ldr	r3, [pc, #36]	; (8016a8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016a68:	2130      	movs	r1, #48	; 0x30
 8016a6a:	4a06      	ldr	r2, [pc, #24]	; (8016a84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016a6c:	e7f1      	b.n	8016a52 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016a6e:	6823      	ldr	r3, [r4, #0]
 8016a70:	4620      	mov	r0, r4
 8016a72:	88a1      	ldrh	r1, [r4, #4]
 8016a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a76:	4798      	blx	r3
 8016a78:	88a3      	ldrh	r3, [r4, #4]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	80a3      	strh	r3, [r4, #4]
 8016a7e:	bd38      	pop	{r3, r4, r5, pc}
 8016a80:	080288b5 	.word	0x080288b5
 8016a84:	080289a9 	.word	0x080289a9
 8016a88:	0802880d 	.word	0x0802880d
 8016a8c:	080288cc 	.word	0x080288cc

08016a90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	6803      	ldr	r3, [r0, #0]
 8016a94:	4616      	mov	r6, r2
 8016a96:	4604      	mov	r4, r0
 8016a98:	460d      	mov	r5, r1
 8016a9a:	6a1b      	ldr	r3, [r3, #32]
 8016a9c:	4798      	blx	r3
 8016a9e:	4286      	cmp	r6, r0
 8016aa0:	d905      	bls.n	8016aae <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016aa2:	4b06      	ldr	r3, [pc, #24]	; (8016abc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016aa4:	2139      	movs	r1, #57	; 0x39
 8016aa6:	4a06      	ldr	r2, [pc, #24]	; (8016ac0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016aa8:	4806      	ldr	r0, [pc, #24]	; (8016ac4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016aaa:	f00f fdaf 	bl	802660c <__assert_func>
 8016aae:	6823      	ldr	r3, [r4, #0]
 8016ab0:	4629      	mov	r1, r5
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aba:	4718      	bx	r3
 8016abc:	080288b5 	.word	0x080288b5
 8016ac0:	0802891c 	.word	0x0802891c
 8016ac4:	0802880d 	.word	0x0802880d

08016ac8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016ac8:	4770      	bx	lr
	...

08016acc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016acc:	4a02      	ldr	r2, [pc, #8]	; (8016ad8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016ace:	6002      	str	r2, [r0, #0]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	8082      	strh	r2, [r0, #4]
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop
 8016ad8:	080288f0 	.word	0x080288f0

08016adc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8016adc:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8016ae0:	4770      	bx	lr

08016ae2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8016ae2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8016ae6:	4770      	bx	lr

08016ae8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8016ae8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8016aec:	4770      	bx	lr

08016aee <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8016aee:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8016af2:	4770      	bx	lr

08016af4 <_ZN8touchgfx11BoxProgressD1Ev>:
 8016af4:	4b03      	ldr	r3, [pc, #12]	; (8016b04 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8016af6:	b510      	push	{r4, lr}
 8016af8:	4604      	mov	r4, r0
 8016afa:	6003      	str	r3, [r0, #0]
 8016afc:	f000 f8b6 	bl	8016c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016b00:	4620      	mov	r0, r4
 8016b02:	bd10      	pop	{r4, pc}
 8016b04:	080289f0 	.word	0x080289f0

08016b08 <_ZN8touchgfx11BoxProgressD0Ev>:
 8016b08:	b510      	push	{r4, lr}
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	f7ff fff2 	bl	8016af4 <_ZN8touchgfx11BoxProgressD1Ev>
 8016b10:	21c0      	movs	r1, #192	; 0xc0
 8016b12:	4620      	mov	r0, r4
 8016b14:	f00f fd4c 	bl	80265b0 <_ZdlPvj>
 8016b18:	4620      	mov	r0, r4
 8016b1a:	bd10      	pop	{r4, pc}

08016b1c <_ZN8touchgfx11BoxProgressC1Ev>:
 8016b1c:	b510      	push	{r4, lr}
 8016b1e:	4604      	mov	r4, r0
 8016b20:	f000 f8b8 	bl	8016c94 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016b24:	2201      	movs	r2, #1
 8016b26:	4b16      	ldr	r3, [pc, #88]	; (8016b80 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8016b28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b2c:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8016b30:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8016b34:	4a13      	ldr	r2, [pc, #76]	; (8016b84 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8016b36:	6023      	str	r3, [r4, #0]
 8016b38:	2300      	movs	r3, #0
 8016b3a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8016b3e:	22ff      	movs	r2, #255	; 0xff
 8016b40:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8016b44:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8016b48:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8016b4c:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8016b50:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8016b54:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8016b58:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8016b5c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8016b60:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8016b64:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8016b68:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8016b6c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8016b70:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8016b74:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8016b78:	f000 fbb8 	bl	80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	bd10      	pop	{r4, pc}
 8016b80:	080289f0 	.word	0x080289f0
 8016b84:	08029ca8 	.word	0x08029ca8

08016b88 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8016b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016b8c:	4617      	mov	r7, r2
 8016b8e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8016b92:	2200      	movs	r2, #0
 8016b94:	4604      	mov	r4, r0
 8016b96:	460e      	mov	r6, r1
 8016b98:	4698      	mov	r8, r3
 8016b9a:	4611      	mov	r1, r2
 8016b9c:	9500      	str	r5, [sp, #0]
 8016b9e:	3090      	adds	r0, #144	; 0x90
 8016ba0:	f7f9 fea4 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016ba4:	4643      	mov	r3, r8
 8016ba6:	463a      	mov	r2, r7
 8016ba8:	4631      	mov	r1, r6
 8016baa:	4620      	mov	r0, r4
 8016bac:	9508      	str	r5, [sp, #32]
 8016bae:	b002      	add	sp, #8
 8016bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb4:	f000 b9fa 	b.w	8016fac <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016bb8 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8016bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bba:	4604      	mov	r4, r0
 8016bbc:	f000 fa40 	bl	8017040 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016bc0:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f004 f95b 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016bca:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016bce:	2b03      	cmp	r3, #3
 8016bd0:	d814      	bhi.n	8016bfc <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8016bd2:	e8df f003 	tbb	[pc, r3]
 8016bd6:	0202      	.short	0x0202
 8016bd8:	1010      	.short	0x1010
 8016bda:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016bde:	4620      	mov	r0, r4
 8016be0:	f000 fa88 	bl	80170f4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016be4:	b200      	sxth	r0, r0
 8016be6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016bea:	2b03      	cmp	r3, #3
 8016bec:	d81a      	bhi.n	8016c24 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8016bee:	e8df f003 	tbb	[pc, r3]
 8016bf2:	0e07      	.short	0x0e07
 8016bf4:	231f      	.short	0x231f
 8016bf6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8016bfa:	e7f0      	b.n	8016bde <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	e7f2      	b.n	8016be6 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8016c00:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016c04:	9300      	str	r3, [sp, #0]
 8016c06:	4603      	mov	r3, r0
 8016c08:	2200      	movs	r2, #0
 8016c0a:	2100      	movs	r1, #0
 8016c0c:	e007      	b.n	8016c1e <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8016c0e:	8921      	ldrh	r1, [r4, #8]
 8016c10:	2200      	movs	r2, #0
 8016c12:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016c16:	1a09      	subs	r1, r1, r0
 8016c18:	9300      	str	r3, [sp, #0]
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	b209      	sxth	r1, r1
 8016c1e:	4628      	mov	r0, r5
 8016c20:	f7f9 fe64 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016c24:	4628      	mov	r0, r5
 8016c26:	b003      	add	sp, #12
 8016c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c2c:	f004 b928 	b.w	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016c30:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016c34:	9000      	str	r0, [sp, #0]
 8016c36:	e7e7      	b.n	8016c08 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8016c38:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016c3c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016c40:	1a12      	subs	r2, r2, r0
 8016c42:	9000      	str	r0, [sp, #0]
 8016c44:	b212      	sxth	r2, r2
 8016c46:	e7e0      	b.n	8016c0a <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08016c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8016c48:	b570      	push	{r4, r5, r6, lr}
 8016c4a:	6803      	ldr	r3, [r0, #0]
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8016c52:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8016c56:	4798      	blx	r3
 8016c58:	4601      	mov	r1, r0
 8016c5a:	462b      	mov	r3, r5
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c62:	4718      	bx	r3

08016c64 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8016c64:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8016c68:	4770      	bx	lr
	...

08016c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8016c6c:	4b03      	ldr	r3, [pc, #12]	; (8016c7c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8016c6e:	b510      	push	{r4, lr}
 8016c70:	4604      	mov	r4, r0
 8016c72:	6003      	str	r3, [r0, #0]
 8016c74:	f000 f999 	bl	8016faa <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8016c78:	4620      	mov	r0, r4
 8016c7a:	bd10      	pop	{r4, pc}
 8016c7c:	08028ac8 	.word	0x08028ac8

08016c80 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8016c80:	b510      	push	{r4, lr}
 8016c82:	4604      	mov	r4, r0
 8016c84:	f7ff fff2 	bl	8016c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016c88:	2190      	movs	r1, #144	; 0x90
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	f00f fc90 	bl	80265b0 <_ZdlPvj>
 8016c90:	4620      	mov	r0, r4
 8016c92:	bd10      	pop	{r4, pc}

08016c94 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8016c94:	b510      	push	{r4, lr}
 8016c96:	4604      	mov	r4, r0
 8016c98:	f000 fa4c 	bl	8017134 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8016c9c:	4b03      	ldr	r3, [pc, #12]	; (8016cac <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	6023      	str	r3, [r4, #0]
 8016ca4:	f7ff ffd0 	bl	8016c48 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8016ca8:	4620      	mov	r0, r4
 8016caa:	bd10      	pop	{r4, pc}
 8016cac:	08028ac8 	.word	0x08028ac8

08016cb0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8016cb0:	b570      	push	{r4, r5, r6, lr}
 8016cb2:	6803      	ldr	r3, [r0, #0]
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8016cba:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8016cbe:	4798      	blx	r3
 8016cc0:	4601      	mov	r1, r0
 8016cc2:	462b      	mov	r3, r5
 8016cc4:	4620      	mov	r0, r4
 8016cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cca:	4718      	bx	r3

08016ccc <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8016ccc:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8016cd0:	4770      	bx	lr

08016cd2 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8016cd2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8016cd6:	4770      	bx	lr

08016cd8 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8016cd8:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8016cdc:	4770      	bx	lr

08016cde <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8016cde:	b507      	push	{r0, r1, r2, lr}
 8016ce0:	ab02      	add	r3, sp, #8
 8016ce2:	30bc      	adds	r0, #188	; 0xbc
 8016ce4:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8016ce8:	4619      	mov	r1, r3
 8016cea:	f002 f9a9 	bl	8019040 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8016cee:	b003      	add	sp, #12
 8016cf0:	f85d fb04 	ldr.w	pc, [sp], #4

08016cf4 <_ZN8touchgfx13ImageProgressD1Ev>:
 8016cf4:	4b03      	ldr	r3, [pc, #12]	; (8016d04 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8016cf6:	b510      	push	{r4, lr}
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	6003      	str	r3, [r0, #0]
 8016cfc:	f7ff ffb6 	bl	8016c6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016d00:	4620      	mov	r0, r4
 8016d02:	bd10      	pop	{r4, pc}
 8016d04:	08028bf4 	.word	0x08028bf4

08016d08 <_ZN8touchgfx13ImageProgressD0Ev>:
 8016d08:	b510      	push	{r4, lr}
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	f7ff fff2 	bl	8016cf4 <_ZN8touchgfx13ImageProgressD1Ev>
 8016d10:	21f0      	movs	r1, #240	; 0xf0
 8016d12:	4620      	mov	r0, r4
 8016d14:	f00f fc4c 	bl	80265b0 <_ZdlPvj>
 8016d18:	4620      	mov	r0, r4
 8016d1a:	bd10      	pop	{r4, pc}

08016d1c <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8016d1c:	b508      	push	{r3, lr}
 8016d1e:	4b06      	ldr	r3, [pc, #24]	; (8016d38 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	b92b      	cbnz	r3, 8016d30 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8016d24:	4b05      	ldr	r3, [pc, #20]	; (8016d3c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8016d26:	21b8      	movs	r1, #184	; 0xb8
 8016d28:	4a05      	ldr	r2, [pc, #20]	; (8016d40 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8016d2a:	4806      	ldr	r0, [pc, #24]	; (8016d44 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8016d2c:	f00f fc6e 	bl	802660c <__assert_func>
 8016d30:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8016d34:	bd08      	pop	{r3, pc}
 8016d36:	bf00      	nop
 8016d38:	2000c704 	.word	0x2000c704
 8016d3c:	08028b88 	.word	0x08028b88
 8016d40:	08028ccc 	.word	0x08028ccc
 8016d44:	08028bc4 	.word	0x08028bc4

08016d48 <_ZN8touchgfx13ImageProgressC1Ev>:
 8016d48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	f7ff ffa1 	bl	8016c94 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016d52:	4b31      	ldr	r3, [pc, #196]	; (8016e18 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8016d54:	a902      	add	r1, sp, #8
 8016d56:	4626      	mov	r6, r4
 8016d58:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8016d5c:	2500      	movs	r5, #0
 8016d5e:	4a2f      	ldr	r2, [pc, #188]	; (8016e1c <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8016d60:	f846 3b90 	str.w	r3, [r6], #144
 8016d64:	2701      	movs	r7, #1
 8016d66:	4b2e      	ldr	r3, [pc, #184]	; (8016e20 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8016d68:	4640      	mov	r0, r8
 8016d6a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8016d6e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d76:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8016d7a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8016d7e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8016d82:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8016d86:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8016d8a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8016d8e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8016d92:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8016d96:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8016d9a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8016d9e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8016da2:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8016da6:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8016daa:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8016dae:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8016db2:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8016db6:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8016dba:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8016dbe:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8016dc2:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8016dc6:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8016dca:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8016dce:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8016dd2:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8016dd6:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8016dda:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016dde:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8016de2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8016de6:	f002 fb6f 	bl	80194c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016dea:	4b0e      	ldr	r3, [pc, #56]	; (8016e24 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8016dec:	4641      	mov	r1, r8
 8016dee:	4630      	mov	r0, r6
 8016df0:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8016df4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8016df8:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8016dfc:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8016e00:	f000 fa74 	bl	80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e08:	4631      	mov	r1, r6
 8016e0a:	f000 fa6f 	bl	80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016e0e:	4620      	mov	r0, r4
 8016e10:	b002      	add	sp, #8
 8016e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e16:	bf00      	nop
 8016e18:	08028bf4 	.word	0x08028bf4
 8016e1c:	08029e10 	.word	0x08029e10
 8016e20:	08028f70 	.word	0x08028f70
 8016e24:	08029d10 	.word	0x08029d10

08016e28 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8016e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016e2c:	4617      	mov	r7, r2
 8016e2e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8016e32:	2200      	movs	r2, #0
 8016e34:	4604      	mov	r4, r0
 8016e36:	460e      	mov	r6, r1
 8016e38:	4698      	mov	r8, r3
 8016e3a:	4611      	mov	r1, r2
 8016e3c:	9500      	str	r5, [sp, #0]
 8016e3e:	3090      	adds	r0, #144	; 0x90
 8016e40:	f7f9 fd54 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016e44:	4643      	mov	r3, r8
 8016e46:	463a      	mov	r2, r7
 8016e48:	4631      	mov	r1, r6
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	9508      	str	r5, [sp, #32]
 8016e4e:	b002      	add	sp, #8
 8016e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e54:	f000 b8aa 	b.w	8016fac <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016e58 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8016e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e5a:	4604      	mov	r4, r0
 8016e5c:	f000 f8f0 	bl	8017040 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016e60:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8016e64:	4638      	mov	r0, r7
 8016e66:	f004 f80b 	bl	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016e6a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016e6e:	4620      	mov	r0, r4
 8016e70:	2b01      	cmp	r3, #1
 8016e72:	bf94      	ite	ls
 8016e74:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8016e78:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8016e7c:	f000 f93a 	bl	80170f4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016e80:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8016e84:	4606      	mov	r6, r0
 8016e86:	b205      	sxth	r5, r0
 8016e88:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016e8c:	2a00      	cmp	r2, #0
 8016e8e:	d056      	beq.n	8016f3e <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8016e90:	2b03      	cmp	r3, #3
 8016e92:	d82c      	bhi.n	8016eee <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016e94:	e8df f003 	tbb	[pc, r3]
 8016e98:	3d311202 	.word	0x3d311202
 8016e9c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	9300      	str	r3, [sp, #0]
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	462b      	mov	r3, r5
 8016ea8:	4638      	mov	r0, r7
 8016eaa:	f7f9 fd1f 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016eae:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016eb2:	9300      	str	r3, [sp, #0]
 8016eb4:	462b      	mov	r3, r5
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	4611      	mov	r1, r2
 8016eba:	e014      	b.n	8016ee6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8016ebc:	8921      	ldrh	r1, [r4, #8]
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016ec4:	1a09      	subs	r1, r1, r0
 8016ec6:	4638      	mov	r0, r7
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	462b      	mov	r3, r5
 8016ecc:	b209      	sxth	r1, r1
 8016ece:	f7f9 fd0d 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016ed2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8016ed6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016eda:	4249      	negs	r1, r1
 8016edc:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8016ee0:	9200      	str	r2, [sp, #0]
 8016ee2:	b209      	sxth	r1, r1
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8016eea:	f7f9 fcff 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016eee:	4638      	mov	r0, r7
 8016ef0:	b003      	add	sp, #12
 8016ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ef6:	f003 bfc3 	b.w	801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016efa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016efe:	2200      	movs	r2, #0
 8016f00:	9500      	str	r5, [sp, #0]
 8016f02:	2100      	movs	r1, #0
 8016f04:	4638      	mov	r0, r7
 8016f06:	f7f9 fcf1 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016f0a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f0e:	9500      	str	r5, [sp, #0]
 8016f10:	e7d1      	b.n	8016eb6 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8016f12:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016f16:	2100      	movs	r1, #0
 8016f18:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f1c:	1a12      	subs	r2, r2, r0
 8016f1e:	9500      	str	r5, [sp, #0]
 8016f20:	4638      	mov	r0, r7
 8016f22:	b212      	sxth	r2, r2
 8016f24:	f7f9 fce2 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016f28:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8016f2c:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8016f30:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f34:	4252      	negs	r2, r2
 8016f36:	9100      	str	r1, [sp, #0]
 8016f38:	b212      	sxth	r2, r2
 8016f3a:	2100      	movs	r1, #0
 8016f3c:	e7d3      	b.n	8016ee6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8016f3e:	2b03      	cmp	r3, #3
 8016f40:	d8d5      	bhi.n	8016eee <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016f42:	e8df f003 	tbb	[pc, r3]
 8016f46:	1102      	.short	0x1102
 8016f48:	2a1b      	.short	0x2a1b
 8016f4a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016f4e:	2200      	movs	r2, #0
 8016f50:	4638      	mov	r0, r7
 8016f52:	4611      	mov	r1, r2
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	462b      	mov	r3, r5
 8016f58:	f7f9 fcc8 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016f5c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f60:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016f64:	1af1      	subs	r1, r6, r3
 8016f66:	e7bb      	b.n	8016ee0 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8016f68:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016f72:	1a09      	subs	r1, r1, r0
 8016f74:	9300      	str	r3, [sp, #0]
 8016f76:	462b      	mov	r3, r5
 8016f78:	b209      	sxth	r1, r1
 8016f7a:	e795      	b.n	8016ea8 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f82:	4638      	mov	r0, r7
 8016f84:	9500      	str	r5, [sp, #0]
 8016f86:	4611      	mov	r1, r2
 8016f88:	f7f9 fcb0 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016f8c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8016f90:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f94:	1a32      	subs	r2, r6, r0
 8016f96:	9000      	str	r0, [sp, #0]
 8016f98:	e7ce      	b.n	8016f38 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8016f9a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016f9e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016fa2:	1a12      	subs	r2, r2, r0
 8016fa4:	9500      	str	r5, [sp, #0]
 8016fa6:	b212      	sxth	r2, r2
 8016fa8:	e7ab      	b.n	8016f02 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08016faa <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8016faa:	4770      	bx	lr

08016fac <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016fb0:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	460e      	mov	r6, r1
 8016fb8:	4698      	mov	r8, r3
 8016fba:	9700      	str	r7, [sp, #0]
 8016fbc:	3058      	adds	r0, #88	; 0x58
 8016fbe:	4615      	mov	r5, r2
 8016fc0:	f7f9 fc94 	bl	80108ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8016fc4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016fc8:	eb06 0308 	add.w	r3, r6, r8
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	eb05 0207 	add.w	r2, r5, r7
 8016fd2:	bfb8      	it	lt
 8016fd4:	8123      	strhlt	r3, [r4, #8]
 8016fd6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	bfb8      	it	lt
 8016fde:	8162      	strhlt	r2, [r4, #10]
 8016fe0:	b002      	add	sp, #8
 8016fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fe6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016fe6:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016fea:	4770      	bx	lr

08016fec <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016fec:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016ff0:	4770      	bx	lr

08016ff2 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016ff2:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016ff6:	4770      	bx	lr

08016ff8 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016ff8:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016ffc:	4770      	bx	lr

08016ffe <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8016ffe:	b510      	push	{r4, lr}
 8017000:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017004:	800c      	strh	r4, [r1, #0]
 8017006:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801700a:	8011      	strh	r1, [r2, #0]
 801700c:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8017010:	801a      	strh	r2, [r3, #0]
 8017012:	9b02      	ldr	r3, [sp, #8]
 8017014:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8017018:	801a      	strh	r2, [r3, #0]
 801701a:	bd10      	pop	{r4, pc}

0801701c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801701c:	b510      	push	{r4, lr}
 801701e:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017022:	800c      	strh	r4, [r1, #0]
 8017024:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8017028:	8011      	strh	r1, [r2, #0]
 801702a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801702e:	801a      	strh	r2, [r3, #0]
 8017030:	bd10      	pop	{r4, pc}

08017032 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8017032:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017036:	800b      	strh	r3, [r1, #0]
 8017038:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801703c:	8013      	strh	r3, [r2, #0]
 801703e:	4770      	bx	lr

08017040 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017040:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017044:	4299      	cmp	r1, r3
 8017046:	bfb8      	it	lt
 8017048:	4619      	movlt	r1, r3
 801704a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801704e:	4299      	cmp	r1, r3
 8017050:	bfa8      	it	ge
 8017052:	4619      	movge	r1, r3
 8017054:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8017058:	4770      	bx	lr

0801705a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801705a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801705e:	4770      	bx	lr

08017060 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8017060:	b510      	push	{r4, lr}
 8017062:	4604      	mov	r4, r0
 8017064:	2190      	movs	r1, #144	; 0x90
 8017066:	f00f faa3 	bl	80265b0 <_ZdlPvj>
 801706a:	4620      	mov	r0, r4
 801706c:	bd10      	pop	{r4, pc}

0801706e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801706e:	b510      	push	{r4, lr}
 8017070:	4604      	mov	r4, r0
 8017072:	302c      	adds	r0, #44	; 0x2c
 8017074:	f002 fa28 	bl	80194c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017078:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801707a:	8123      	strh	r3, [r4, #8]
 801707c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801707e:	8163      	strh	r3, [r4, #10]
 8017080:	bd10      	pop	{r4, pc}
	...

08017084 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8017084:	4291      	cmp	r1, r2
 8017086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801708a:	4604      	mov	r4, r0
 801708c:	460e      	mov	r6, r1
 801708e:	4615      	mov	r5, r2
 8017090:	4698      	mov	r8, r3
 8017092:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017096:	db05      	blt.n	80170a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8017098:	4b12      	ldr	r3, [pc, #72]	; (80170e4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801709a:	214d      	movs	r1, #77	; 0x4d
 801709c:	4a12      	ldr	r2, [pc, #72]	; (80170e8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801709e:	4813      	ldr	r0, [pc, #76]	; (80170ec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 80170a0:	f00f fab4 	bl	802660c <__assert_func>
 80170a4:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 80170a8:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 80170ac:	6803      	ldr	r3, [r0, #0]
 80170ae:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 80170b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80170b6:	4798      	blx	r3
 80170b8:	f1b8 0f00 	cmp.w	r8, #0
 80170bc:	d10c      	bne.n	80170d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80170be:	1bad      	subs	r5, r5, r6
 80170c0:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80170c4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80170c8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80170cc:	42bb      	cmp	r3, r7
 80170ce:	d806      	bhi.n	80170de <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80170d0:	4b07      	ldr	r3, [pc, #28]	; (80170f0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80170d2:	215a      	movs	r1, #90	; 0x5a
 80170d4:	4a04      	ldr	r2, [pc, #16]	; (80170e8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80170d6:	e7e2      	b.n	801709e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80170d8:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80170dc:	e7f2      	b.n	80170c4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80170de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170e2:	bf00      	nop
 80170e4:	08028cff 	.word	0x08028cff
 80170e8:	08028e3c 	.word	0x08028e3c
 80170ec:	08028d09 	.word	0x08028d09
 80170f0:	08028d60 	.word	0x08028d60

080170f4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80170f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170f6:	4604      	mov	r4, r0
 80170f8:	460d      	mov	r5, r1
 80170fa:	b1b9      	cbz	r1, 801712c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80170fc:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8017100:	ab01      	add	r3, sp, #4
 8017102:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8017106:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801710a:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801710e:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8017112:	1a12      	subs	r2, r2, r0
 8017114:	1b89      	subs	r1, r1, r6
 8017116:	1a38      	subs	r0, r7, r0
 8017118:	f003 fff3 	bl	801b102 <_ZN8touchgfx6muldivElllRl>
 801711c:	4629      	mov	r1, r5
 801711e:	ab01      	add	r3, sp, #4
 8017120:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8017124:	4430      	add	r0, r6
 8017126:	f003 ffec 	bl	801b102 <_ZN8touchgfx6muldivElllRl>
 801712a:	b285      	uxth	r5, r0
 801712c:	4628      	mov	r0, r5
 801712e:	b003      	add	sp, #12
 8017130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017134 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017138:	4604      	mov	r4, r0
 801713a:	2600      	movs	r6, #0
 801713c:	f7f9 fb88 	bl	8010850 <_ZN8touchgfx8DrawableC1Ev>
 8017140:	4b1b      	ldr	r3, [pc, #108]	; (80171b0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8017142:	4625      	mov	r5, r4
 8017144:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8017148:	af02      	add	r7, sp, #8
 801714a:	62a6      	str	r6, [r4, #40]	; 0x28
 801714c:	f845 3b2c 	str.w	r3, [r5], #44
 8017150:	4628      	mov	r0, r5
 8017152:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8017156:	f7f9 fb7b 	bl	8010850 <_ZN8touchgfx8DrawableC1Ev>
 801715a:	4b16      	ldr	r3, [pc, #88]	; (80171b4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801715c:	4639      	mov	r1, r7
 801715e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017162:	4628      	mov	r0, r5
 8017164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017166:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801716a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801716e:	f002 f9ab 	bl	80194c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017172:	4638      	mov	r0, r7
 8017174:	f7f9 fb6c 	bl	8010850 <_ZN8touchgfx8DrawableC1Ev>
 8017178:	4b0f      	ldr	r3, [pc, #60]	; (80171b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801717a:	4632      	mov	r2, r6
 801717c:	4631      	mov	r1, r6
 801717e:	65a3      	str	r3, [r4, #88]	; 0x58
 8017180:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8017184:	4628      	mov	r0, r5
 8017186:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801718a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801718e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8017192:	f7f9 fbf6 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
 8017196:	4629      	mov	r1, r5
 8017198:	4620      	mov	r0, r4
 801719a:	f000 f8a7 	bl	80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801719e:	4620      	mov	r0, r4
 80171a0:	4639      	mov	r1, r7
 80171a2:	f000 f8a3 	bl	80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80171a6:	4620      	mov	r0, r4
 80171a8:	b002      	add	sp, #8
 80171aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171ae:	bf00      	nop
 80171b0:	08028d84 	.word	0x08028d84
 80171b4:	08029e10 	.word	0x08029e10
 80171b8:	08028f70 	.word	0x08028f70

080171bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80171bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171be:	2000      	movs	r0, #0
 80171c0:	b12b      	cbz	r3, 80171ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80171c2:	b920      	cbnz	r0, 80171ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80171c4:	1a5a      	subs	r2, r3, r1
 80171c6:	699b      	ldr	r3, [r3, #24]
 80171c8:	4250      	negs	r0, r2
 80171ca:	4150      	adcs	r0, r2
 80171cc:	e7f8      	b.n	80171c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80171ce:	4770      	bx	lr

080171d0 <_ZN8touchgfx9Container9removeAllEv>:
 80171d0:	2200      	movs	r2, #0
 80171d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171d4:	b123      	cbz	r3, 80171e0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80171d6:	6999      	ldr	r1, [r3, #24]
 80171d8:	6281      	str	r1, [r0, #40]	; 0x28
 80171da:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80171de:	e7f8      	b.n	80171d2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80171e0:	4770      	bx	lr

080171e2 <_ZN8touchgfx9Container6unlinkEv>:
 80171e2:	2300      	movs	r3, #0
 80171e4:	6283      	str	r3, [r0, #40]	; 0x28
 80171e6:	4770      	bx	lr

080171e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80171e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ec:	461f      	mov	r7, r3
 80171ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80171f2:	460d      	mov	r5, r1
 80171f4:	4616      	mov	r6, r2
 80171f6:	b103      	cbz	r3, 80171fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80171f8:	6038      	str	r0, [r7, #0]
 80171fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80171fc:	b314      	cbz	r4, 8017244 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80171fe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017202:	b1eb      	cbz	r3, 8017240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017204:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017208:	428d      	cmp	r5, r1
 801720a:	db19      	blt.n	8017240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801720c:	b289      	uxth	r1, r1
 801720e:	8923      	ldrh	r3, [r4, #8]
 8017210:	440b      	add	r3, r1
 8017212:	b21b      	sxth	r3, r3
 8017214:	429d      	cmp	r5, r3
 8017216:	da13      	bge.n	8017240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017218:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801721c:	4296      	cmp	r6, r2
 801721e:	db0f      	blt.n	8017240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017220:	b292      	uxth	r2, r2
 8017222:	8963      	ldrh	r3, [r4, #10]
 8017224:	4413      	add	r3, r2
 8017226:	b21b      	sxth	r3, r3
 8017228:	429e      	cmp	r6, r3
 801722a:	da09      	bge.n	8017240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	1ab2      	subs	r2, r6, r2
 8017230:	1a69      	subs	r1, r5, r1
 8017232:	4620      	mov	r0, r4
 8017234:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8017238:	b212      	sxth	r2, r2
 801723a:	463b      	mov	r3, r7
 801723c:	b209      	sxth	r1, r1
 801723e:	47c0      	blx	r8
 8017240:	69a4      	ldr	r4, [r4, #24]
 8017242:	e7db      	b.n	80171fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017248 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017248:	2200      	movs	r2, #0
 801724a:	8002      	strh	r2, [r0, #0]
 801724c:	8042      	strh	r2, [r0, #2]
 801724e:	8082      	strh	r2, [r0, #4]
 8017250:	80c2      	strh	r2, [r0, #6]
 8017252:	4770      	bx	lr

08017254 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	460d      	mov	r5, r1
 8017258:	4616      	mov	r6, r2
 801725a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801725c:	b13c      	cbz	r4, 801726e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801725e:	6823      	ldr	r3, [r4, #0]
 8017260:	4620      	mov	r0, r4
 8017262:	4632      	mov	r2, r6
 8017264:	4629      	mov	r1, r5
 8017266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017268:	4798      	blx	r3
 801726a:	69a4      	ldr	r4, [r4, #24]
 801726c:	e7f6      	b.n	801725c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801726e:	bd70      	pop	{r4, r5, r6, pc}

08017270 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017270:	b538      	push	{r3, r4, r5, lr}
 8017272:	460d      	mov	r5, r1
 8017274:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017276:	b134      	cbz	r4, 8017286 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017278:	682b      	ldr	r3, [r5, #0]
 801727a:	4621      	mov	r1, r4
 801727c:	4628      	mov	r0, r5
 801727e:	689b      	ldr	r3, [r3, #8]
 8017280:	4798      	blx	r3
 8017282:	69a4      	ldr	r4, [r4, #24]
 8017284:	e7f7      	b.n	8017276 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017286:	bd38      	pop	{r3, r4, r5, pc}

08017288 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017288:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801728a:	b19b      	cbz	r3, 80172b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801728c:	428b      	cmp	r3, r1
 801728e:	d109      	bne.n	80172a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017290:	699a      	ldr	r2, [r3, #24]
 8017292:	2100      	movs	r1, #0
 8017294:	6159      	str	r1, [r3, #20]
 8017296:	6282      	str	r2, [r0, #40]	; 0x28
 8017298:	b902      	cbnz	r2, 801729c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801729a:	4770      	bx	lr
 801729c:	6199      	str	r1, [r3, #24]
 801729e:	4770      	bx	lr
 80172a0:	4613      	mov	r3, r2
 80172a2:	b13a      	cbz	r2, 80172b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80172a4:	699a      	ldr	r2, [r3, #24]
 80172a6:	428a      	cmp	r2, r1
 80172a8:	d1fa      	bne.n	80172a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80172aa:	698a      	ldr	r2, [r1, #24]
 80172ac:	619a      	str	r2, [r3, #24]
 80172ae:	2300      	movs	r3, #0
 80172b0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80172b4:	4770      	bx	lr

080172b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80172b6:	b410      	push	{r4}
 80172b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80172ba:	4604      	mov	r4, r0
 80172bc:	b92b      	cbnz	r3, 80172ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80172be:	6803      	ldr	r3, [r0, #0]
 80172c0:	4611      	mov	r1, r2
 80172c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80172c8:	4718      	bx	r3
 80172ca:	b941      	cbnz	r1, 80172de <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80172cc:	6193      	str	r3, [r2, #24]
 80172ce:	6282      	str	r2, [r0, #40]	; 0x28
 80172d0:	6154      	str	r4, [r2, #20]
 80172d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172d6:	4770      	bx	lr
 80172d8:	4603      	mov	r3, r0
 80172da:	2800      	cmp	r0, #0
 80172dc:	d0f9      	beq.n	80172d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80172de:	4299      	cmp	r1, r3
 80172e0:	6998      	ldr	r0, [r3, #24]
 80172e2:	d1f9      	bne.n	80172d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80172e4:	6190      	str	r0, [r2, #24]
 80172e6:	618a      	str	r2, [r1, #24]
 80172e8:	e7f2      	b.n	80172d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080172ec <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80172ec:	4288      	cmp	r0, r1
 80172ee:	b508      	push	{r3, lr}
 80172f0:	d105      	bne.n	80172fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80172f2:	4b11      	ldr	r3, [pc, #68]	; (8017338 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80172f4:	2123      	movs	r1, #35	; 0x23
 80172f6:	4a11      	ldr	r2, [pc, #68]	; (801733c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80172f8:	4811      	ldr	r0, [pc, #68]	; (8017340 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80172fa:	f00f f987 	bl	802660c <__assert_func>
 80172fe:	694b      	ldr	r3, [r1, #20]
 8017300:	b11b      	cbz	r3, 801730a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017302:	4b10      	ldr	r3, [pc, #64]	; (8017344 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017304:	2124      	movs	r1, #36	; 0x24
 8017306:	4a0d      	ldr	r2, [pc, #52]	; (801733c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017308:	e7f6      	b.n	80172f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801730a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801730e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017310:	b913      	cbnz	r3, 8017318 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017312:	6281      	str	r1, [r0, #40]	; 0x28
 8017314:	bd08      	pop	{r3, pc}
 8017316:	4613      	mov	r3, r2
 8017318:	699a      	ldr	r2, [r3, #24]
 801731a:	b12a      	cbz	r2, 8017328 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801731c:	428b      	cmp	r3, r1
 801731e:	d1fa      	bne.n	8017316 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017320:	4b09      	ldr	r3, [pc, #36]	; (8017348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017322:	2135      	movs	r1, #53	; 0x35
 8017324:	4a05      	ldr	r2, [pc, #20]	; (801733c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017326:	e7e7      	b.n	80172f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017328:	428b      	cmp	r3, r1
 801732a:	d103      	bne.n	8017334 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801732c:	4b06      	ldr	r3, [pc, #24]	; (8017348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801732e:	2138      	movs	r1, #56	; 0x38
 8017330:	4a02      	ldr	r2, [pc, #8]	; (801733c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017332:	e7e1      	b.n	80172f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017334:	6199      	str	r1, [r3, #24]
 8017336:	e7ed      	b.n	8017314 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017338:	08028e9d 	.word	0x08028e9d
 801733c:	08028ff4 	.word	0x08028ff4
 8017340:	08028ec9 	.word	0x08028ec9
 8017344:	08028efc 	.word	0x08028efc
 8017348:	08028f32 	.word	0x08028f32

0801734c <_ZN8touchgfx4RectaNERKS0_>:
 801734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017350:	888b      	ldrh	r3, [r1, #4]
 8017352:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017356:	f9b0 a000 	ldrsh.w	sl, [r0]
 801735a:	444b      	add	r3, r9
 801735c:	b29b      	uxth	r3, r3
 801735e:	fa0f f883 	sxth.w	r8, r3
 8017362:	45c2      	cmp	sl, r8
 8017364:	da30      	bge.n	80173c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017366:	8882      	ldrh	r2, [r0, #4]
 8017368:	4452      	add	r2, sl
 801736a:	b292      	uxth	r2, r2
 801736c:	fa0f fe82 	sxth.w	lr, r2
 8017370:	45f1      	cmp	r9, lr
 8017372:	da29      	bge.n	80173c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017374:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017378:	88cc      	ldrh	r4, [r1, #6]
 801737a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801737e:	442c      	add	r4, r5
 8017380:	b224      	sxth	r4, r4
 8017382:	42a6      	cmp	r6, r4
 8017384:	da20      	bge.n	80173c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017386:	88c7      	ldrh	r7, [r0, #6]
 8017388:	4437      	add	r7, r6
 801738a:	b2bf      	uxth	r7, r7
 801738c:	fa0f fc87 	sxth.w	ip, r7
 8017390:	4565      	cmp	r5, ip
 8017392:	da19      	bge.n	80173c8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017394:	45ca      	cmp	sl, r9
 8017396:	4654      	mov	r4, sl
 8017398:	bfb8      	it	lt
 801739a:	464c      	movlt	r4, r9
 801739c:	42b5      	cmp	r5, r6
 801739e:	bfb8      	it	lt
 80173a0:	4635      	movlt	r5, r6
 80173a2:	45f0      	cmp	r8, lr
 80173a4:	bfc8      	it	gt
 80173a6:	4613      	movgt	r3, r2
 80173a8:	1b1b      	subs	r3, r3, r4
 80173aa:	8083      	strh	r3, [r0, #4]
 80173ac:	88ca      	ldrh	r2, [r1, #6]
 80173ae:	884b      	ldrh	r3, [r1, #2]
 80173b0:	8004      	strh	r4, [r0, #0]
 80173b2:	4413      	add	r3, r2
 80173b4:	8045      	strh	r5, [r0, #2]
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	b21a      	sxth	r2, r3
 80173ba:	4594      	cmp	ip, r2
 80173bc:	bfb8      	it	lt
 80173be:	463b      	movlt	r3, r7
 80173c0:	1b5b      	subs	r3, r3, r5
 80173c2:	80c3      	strh	r3, [r0, #6]
 80173c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173c8:	2300      	movs	r3, #0
 80173ca:	8003      	strh	r3, [r0, #0]
 80173cc:	8043      	strh	r3, [r0, #2]
 80173ce:	8083      	strh	r3, [r0, #4]
 80173d0:	80c3      	strh	r3, [r0, #6]
 80173d2:	e7f7      	b.n	80173c4 <_ZN8touchgfx4RectaNERKS0_+0x78>

080173d4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80173d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80173d8:	b12b      	cbz	r3, 80173e6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80173da:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80173de:	fab0 f080 	clz	r0, r0
 80173e2:	0940      	lsrs	r0, r0, #5
 80173e4:	4770      	bx	lr
 80173e6:	2001      	movs	r0, #1
 80173e8:	4770      	bx	lr

080173ea <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80173ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ee:	2300      	movs	r3, #0
 80173f0:	4604      	mov	r4, r0
 80173f2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80173f4:	8003      	strh	r3, [r0, #0]
 80173f6:	8043      	strh	r3, [r0, #2]
 80173f8:	8083      	strh	r3, [r0, #4]
 80173fa:	80c3      	strh	r3, [r0, #6]
 80173fc:	2d00      	cmp	r5, #0
 80173fe:	d040      	beq.n	8017482 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017400:	1d28      	adds	r0, r5, #4
 8017402:	f7ff ffe7 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017406:	b988      	cbnz	r0, 801742c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017408:	4620      	mov	r0, r4
 801740a:	f7ff ffe3 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801740e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017412:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017416:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801741a:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801741e:	b138      	cbz	r0, 8017430 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017420:	8022      	strh	r2, [r4, #0]
 8017422:	8063      	strh	r3, [r4, #2]
 8017424:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017428:	f8a4 c006 	strh.w	ip, [r4, #6]
 801742c:	69ad      	ldr	r5, [r5, #24]
 801742e:	e7e5      	b.n	80173fc <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017430:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017434:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017438:	4290      	cmp	r0, r2
 801743a:	4607      	mov	r7, r0
 801743c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017440:	460e      	mov	r6, r1
 8017442:	bfa8      	it	ge
 8017444:	4617      	movge	r7, r2
 8017446:	4299      	cmp	r1, r3
 8017448:	4472      	add	r2, lr
 801744a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801744e:	bfa8      	it	ge
 8017450:	461e      	movge	r6, r3
 8017452:	4440      	add	r0, r8
 8017454:	4471      	add	r1, lr
 8017456:	4463      	add	r3, ip
 8017458:	b200      	sxth	r0, r0
 801745a:	8027      	strh	r7, [r4, #0]
 801745c:	b212      	sxth	r2, r2
 801745e:	8066      	strh	r6, [r4, #2]
 8017460:	b209      	sxth	r1, r1
 8017462:	b21b      	sxth	r3, r3
 8017464:	4290      	cmp	r0, r2
 8017466:	bfac      	ite	ge
 8017468:	ebc7 0200 	rsbge	r2, r7, r0
 801746c:	ebc7 0202 	rsblt	r2, r7, r2
 8017470:	4299      	cmp	r1, r3
 8017472:	bfac      	ite	ge
 8017474:	ebc6 0301 	rsbge	r3, r6, r1
 8017478:	ebc6 0303 	rsblt	r3, r6, r3
 801747c:	80a2      	strh	r2, [r4, #4]
 801747e:	80e3      	strh	r3, [r4, #6]
 8017480:	e7d4      	b.n	801742c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017482:	4620      	mov	r0, r4
 8017484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017488 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801748c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017490:	b383      	cbz	r3, 80174f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017492:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017494:	b374      	cbz	r4, 80174f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017496:	f9b1 5000 	ldrsh.w	r5, [r1]
 801749a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801749e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80174a2:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80174a6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80174aa:	b303      	cbz	r3, 80174ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80174ac:	4668      	mov	r0, sp
 80174ae:	1d21      	adds	r1, r4, #4
 80174b0:	f8ad 5000 	strh.w	r5, [sp]
 80174b4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80174b8:	f8ad 7004 	strh.w	r7, [sp, #4]
 80174bc:	f8ad 8006 	strh.w	r8, [sp, #6]
 80174c0:	f7ff ff44 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 80174c4:	4668      	mov	r0, sp
 80174c6:	f7ff ff85 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80174ca:	b980      	cbnz	r0, 80174ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80174cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80174d0:	4669      	mov	r1, sp
 80174d2:	88a2      	ldrh	r2, [r4, #4]
 80174d4:	4620      	mov	r0, r4
 80174d6:	1a9b      	subs	r3, r3, r2
 80174d8:	88e2      	ldrh	r2, [r4, #6]
 80174da:	f8ad 3000 	strh.w	r3, [sp]
 80174de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80174e2:	1a9b      	subs	r3, r3, r2
 80174e4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80174e8:	6823      	ldr	r3, [r4, #0]
 80174ea:	689b      	ldr	r3, [r3, #8]
 80174ec:	4798      	blx	r3
 80174ee:	69a4      	ldr	r4, [r4, #24]
 80174f0:	2c00      	cmp	r4, #0
 80174f2:	d1d8      	bne.n	80174a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80174f4:	b002      	add	sp, #8
 80174f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80174fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174fc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017500:	460d      	mov	r5, r1
 8017502:	4616      	mov	r6, r2
 8017504:	b323      	cbz	r3, 8017550 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017506:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017508:	b314      	cbz	r4, 8017550 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801750a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801750e:	b1eb      	cbz	r3, 801754c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017510:	6828      	ldr	r0, [r5, #0]
 8017512:	466b      	mov	r3, sp
 8017514:	6869      	ldr	r1, [r5, #4]
 8017516:	c303      	stmia	r3!, {r0, r1}
 8017518:	4668      	mov	r0, sp
 801751a:	1d21      	adds	r1, r4, #4
 801751c:	f7ff ff16 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 8017520:	4668      	mov	r0, sp
 8017522:	f7ff ff57 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017526:	b988      	cbnz	r0, 801754c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017528:	f8bd 3000 	ldrh.w	r3, [sp]
 801752c:	4669      	mov	r1, sp
 801752e:	88a2      	ldrh	r2, [r4, #4]
 8017530:	4620      	mov	r0, r4
 8017532:	1a9b      	subs	r3, r3, r2
 8017534:	88e2      	ldrh	r2, [r4, #6]
 8017536:	f8ad 3000 	strh.w	r3, [sp]
 801753a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801753e:	1a9b      	subs	r3, r3, r2
 8017540:	4632      	mov	r2, r6
 8017542:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017546:	6823      	ldr	r3, [r4, #0]
 8017548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801754a:	4798      	blx	r3
 801754c:	69a4      	ldr	r4, [r4, #24]
 801754e:	e7db      	b.n	8017508 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017550:	b002      	add	sp, #8
 8017552:	bd70      	pop	{r4, r5, r6, pc}

08017554 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017554:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017558:	4770      	bx	lr

0801755a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801755a:	6803      	ldr	r3, [r0, #0]
 801755c:	b513      	push	{r0, r1, r4, lr}
 801755e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017562:	2300      	movs	r3, #0
 8017564:	e9cd 3300 	strd	r3, r3, [sp]
 8017568:	466b      	mov	r3, sp
 801756a:	47a0      	blx	r4
 801756c:	b002      	add	sp, #8
 801756e:	bd10      	pop	{r4, pc}

08017570 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017570:	2301      	movs	r3, #1
 8017572:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017576:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801757a:	4770      	bx	lr

0801757c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801757c:	2301      	movs	r3, #1
 801757e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017582:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017586:	4770      	bx	lr

08017588 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017588:	6843      	ldr	r3, [r0, #4]
 801758a:	2201      	movs	r2, #1
 801758c:	725a      	strb	r2, [r3, #9]
 801758e:	6840      	ldr	r0, [r0, #4]
 8017590:	6803      	ldr	r3, [r0, #0]
 8017592:	691b      	ldr	r3, [r3, #16]
 8017594:	4718      	bx	r3

08017596 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017596:	6840      	ldr	r0, [r0, #4]
 8017598:	6803      	ldr	r3, [r0, #0]
 801759a:	689b      	ldr	r3, [r3, #8]
 801759c:	4718      	bx	r3
	...

080175a0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80175a0:	4b04      	ldr	r3, [pc, #16]	; (80175b4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	b123      	cbz	r3, 80175b0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80175a6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80175aa:	f080 0001 	eor.w	r0, r0, #1
 80175ae:	4770      	bx	lr
 80175b0:	2001      	movs	r0, #1
 80175b2:	4770      	bx	lr
 80175b4:	2000c63a 	.word	0x2000c63a

080175b8 <_ZN8touchgfx3HAL8endFrameEv>:
 80175b8:	b510      	push	{r4, lr}
 80175ba:	4604      	mov	r4, r0
 80175bc:	6840      	ldr	r0, [r0, #4]
 80175be:	6803      	ldr	r3, [r0, #0]
 80175c0:	689b      	ldr	r3, [r3, #8]
 80175c2:	4798      	blx	r3
 80175c4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80175c8:	b113      	cbz	r3, 80175d0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80175ca:	2301      	movs	r3, #1
 80175cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80175d0:	bd10      	pop	{r4, pc}

080175d2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80175d2:	b508      	push	{r3, lr}
 80175d4:	6803      	ldr	r3, [r0, #0]
 80175d6:	4604      	mov	r4, r0
 80175d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80175da:	4798      	blx	r3
 80175dc:	6823      	ldr	r3, [r4, #0]
 80175de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80175e0:	4620      	mov	r0, r4
 80175e2:	4798      	blx	r3
 80175e4:	f7fd fec2 	bl	801536c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80175e8:	6823      	ldr	r3, [r4, #0]
 80175ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80175ec:	e7f8      	b.n	80175e0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080175f0 <_ZN8touchgfx3HAL4tickEv>:
 80175f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80175f2:	6803      	ldr	r3, [r0, #0]
 80175f4:	4604      	mov	r4, r0
 80175f6:	4d5c      	ldr	r5, [pc, #368]	; (8017768 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80175f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80175fc:	4798      	blx	r3
 80175fe:	2800      	cmp	r0, #0
 8017600:	f000 8097 	beq.w	8017732 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017604:	2001      	movs	r0, #1
 8017606:	2600      	movs	r6, #0
 8017608:	f7fd fbc2 	bl	8014d90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801760c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017610:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017614:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017618:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801761c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017620:	b133      	cbz	r3, 8017630 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017622:	6823      	ldr	r3, [r4, #0]
 8017624:	4620      	mov	r0, r4
 8017626:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801762a:	4798      	blx	r3
 801762c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017630:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017634:	2601      	movs	r6, #1
 8017636:	6862      	ldr	r2, [r4, #4]
 8017638:	f083 0301 	eor.w	r3, r3, #1
 801763c:	702e      	strb	r6, [r5, #0]
 801763e:	7253      	strb	r3, [r2, #9]
 8017640:	f002 fff0 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 8017644:	6803      	ldr	r3, [r0, #0]
 8017646:	4631      	mov	r1, r6
 8017648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801764a:	4798      	blx	r3
 801764c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017650:	b90b      	cbnz	r3, 8017656 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017652:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017656:	f002 ffe5 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 801765a:	6803      	ldr	r3, [r0, #0]
 801765c:	695b      	ldr	r3, [r3, #20]
 801765e:	4798      	blx	r3
 8017660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017662:	6803      	ldr	r3, [r0, #0]
 8017664:	691b      	ldr	r3, [r3, #16]
 8017666:	4798      	blx	r3
 8017668:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801766c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017670:	3b01      	subs	r3, #1
 8017672:	b2db      	uxtb	r3, r3
 8017674:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017678:	b10a      	cbz	r2, 801767e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801767a:	2b00      	cmp	r3, #0
 801767c:	d1eb      	bne.n	8017656 <_ZN8touchgfx3HAL4tickEv+0x66>
 801767e:	4a3b      	ldr	r2, [pc, #236]	; (801776c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017680:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017684:	7813      	ldrb	r3, [r2, #0]
 8017686:	3301      	adds	r3, #1
 8017688:	b25b      	sxtb	r3, r3
 801768a:	4299      	cmp	r1, r3
 801768c:	7013      	strb	r3, [r2, #0]
 801768e:	dc10      	bgt.n	80176b2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017690:	2300      	movs	r3, #0
 8017692:	68e0      	ldr	r0, [r4, #12]
 8017694:	a902      	add	r1, sp, #8
 8017696:	7013      	strb	r3, [r2, #0]
 8017698:	aa03      	add	r2, sp, #12
 801769a:	6803      	ldr	r3, [r0, #0]
 801769c:	68db      	ldr	r3, [r3, #12]
 801769e:	4798      	blx	r3
 80176a0:	6823      	ldr	r3, [r4, #0]
 80176a2:	2800      	cmp	r0, #0
 80176a4:	d051      	beq.n	801774a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80176a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80176aa:	4620      	mov	r0, r4
 80176ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80176b0:	4798      	blx	r3
 80176b2:	2300      	movs	r3, #0
 80176b4:	6960      	ldr	r0, [r4, #20]
 80176b6:	f88d 3007 	strb.w	r3, [sp, #7]
 80176ba:	b158      	cbz	r0, 80176d4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80176bc:	6803      	ldr	r3, [r0, #0]
 80176be:	f10d 0107 	add.w	r1, sp, #7
 80176c2:	68db      	ldr	r3, [r3, #12]
 80176c4:	4798      	blx	r3
 80176c6:	b128      	cbz	r0, 80176d4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80176c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80176ce:	6803      	ldr	r3, [r0, #0]
 80176d0:	68db      	ldr	r3, [r3, #12]
 80176d2:	4798      	blx	r3
 80176d4:	f104 001c 	add.w	r0, r4, #28
 80176d8:	f00d facc 	bl	8024c74 <_ZN8touchgfx8Gestures4tickEv>
 80176dc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80176e0:	b30b      	cbz	r3, 8017726 <_ZN8touchgfx3HAL4tickEv+0x136>
 80176e2:	6920      	ldr	r0, [r4, #16]
 80176e4:	6803      	ldr	r3, [r0, #0]
 80176e6:	691b      	ldr	r3, [r3, #16]
 80176e8:	4798      	blx	r3
 80176ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80176ec:	4606      	mov	r6, r0
 80176ee:	b903      	cbnz	r3, 80176f2 <_ZN8touchgfx3HAL4tickEv+0x102>
 80176f0:	6720      	str	r0, [r4, #112]	; 0x70
 80176f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80176f4:	4a1e      	ldr	r2, [pc, #120]	; (8017770 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80176f6:	1af3      	subs	r3, r6, r3
 80176f8:	4293      	cmp	r3, r2
 80176fa:	d914      	bls.n	8017726 <_ZN8touchgfx3HAL4tickEv+0x136>
 80176fc:	6920      	ldr	r0, [r4, #16]
 80176fe:	6803      	ldr	r3, [r0, #0]
 8017700:	699b      	ldr	r3, [r3, #24]
 8017702:	4798      	blx	r3
 8017704:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017706:	2264      	movs	r2, #100	; 0x64
 8017708:	1af3      	subs	r3, r6, r3
 801770a:	fbb3 f3f2 	udiv	r3, r3, r2
 801770e:	fbb0 f0f3 	udiv	r0, r0, r3
 8017712:	2800      	cmp	r0, #0
 8017714:	dc1e      	bgt.n	8017754 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017716:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801771a:	6920      	ldr	r0, [r4, #16]
 801771c:	2100      	movs	r1, #0
 801771e:	6803      	ldr	r3, [r0, #0]
 8017720:	69db      	ldr	r3, [r3, #28]
 8017722:	4798      	blx	r3
 8017724:	6726      	str	r6, [r4, #112]	; 0x70
 8017726:	f002 ff7d 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 801772a:	6803      	ldr	r3, [r0, #0]
 801772c:	2100      	movs	r1, #0
 801772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017730:	4798      	blx	r3
 8017732:	6823      	ldr	r3, [r4, #0]
 8017734:	4620      	mov	r0, r4
 8017736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801773a:	4798      	blx	r3
 801773c:	2001      	movs	r0, #1
 801773e:	f7fd fb32 	bl	8014da6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017742:	2300      	movs	r3, #0
 8017744:	702b      	strb	r3, [r5, #0]
 8017746:	b004      	add	sp, #16
 8017748:	bd70      	pop	{r4, r5, r6, pc}
 801774a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801774e:	4620      	mov	r0, r4
 8017750:	4798      	blx	r3
 8017752:	e7ae      	b.n	80176b2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017754:	2863      	cmp	r0, #99	; 0x63
 8017756:	bfcb      	itete	gt
 8017758:	2300      	movgt	r3, #0
 801775a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801775e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017762:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017766:	e7d8      	b.n	801771a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8017768:	2000c640 	.word	0x2000c640
 801776c:	2000c641 	.word	0x2000c641
 8017770:	05f5e100 	.word	0x05f5e100

08017774 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017774:	f7fd bd9a 	b.w	80152ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017778 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017778:	6581      	str	r1, [r0, #88]	; 0x58
 801777a:	301c      	adds	r0, #28
 801777c:	f00d ba78 	b.w	8024c70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017780 <_ZN8touchgfx3HAL5touchEll>:
 8017780:	b530      	push	{r4, r5, lr}
 8017782:	b087      	sub	sp, #28
 8017784:	4604      	mov	r4, r0
 8017786:	a804      	add	r0, sp, #16
 8017788:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801778c:	f002 fd4e 	bl	801a22c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017790:	9b04      	ldr	r3, [sp, #16]
 8017792:	a906      	add	r1, sp, #24
 8017794:	a803      	add	r0, sp, #12
 8017796:	f8ad 300c 	strh.w	r3, [sp, #12]
 801779a:	9b05      	ldr	r3, [sp, #20]
 801779c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80177a0:	f002 fd92 	bl	801a2c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80177a4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80177a8:	f104 001c 	add.w	r0, r4, #28
 80177ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80177b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80177b4:	b189      	cbz	r1, 80177da <_ZN8touchgfx3HAL5touchEll+0x5a>
 80177b6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80177ba:	9300      	str	r3, [sp, #0]
 80177bc:	4613      	mov	r3, r2
 80177be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80177c2:	462a      	mov	r2, r5
 80177c4:	f00d fa64 	bl	8024c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80177c8:	b128      	cbz	r0, 80177d6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80177ca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80177ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80177d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80177d4:	6623      	str	r3, [r4, #96]	; 0x60
 80177d6:	b007      	add	sp, #28
 80177d8:	bd30      	pop	{r4, r5, pc}
 80177da:	f00d fa9d 	bl	8024d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80177de:	2301      	movs	r3, #1
 80177e0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80177e4:	e7f1      	b.n	80177ca <_ZN8touchgfx3HAL5touchEll+0x4a>

080177e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80177e6:	b570      	push	{r4, r5, r6, lr}
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d050      	beq.n	801788e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80177ec:	ea81 0002 	eor.w	r0, r1, r2
 80177f0:	07c6      	lsls	r6, r0, #31
 80177f2:	d508      	bpl.n	8017806 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80177f4:	3a01      	subs	r2, #1
 80177f6:	18cc      	adds	r4, r1, r3
 80177f8:	42a1      	cmp	r1, r4
 80177fa:	d048      	beq.n	801788e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80177fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017800:	f801 0b01 	strb.w	r0, [r1], #1
 8017804:	e7f8      	b.n	80177f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017806:	07d5      	lsls	r5, r2, #31
 8017808:	bf42      	ittt	mi
 801780a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801780e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017812:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017816:	2b01      	cmp	r3, #1
 8017818:	d915      	bls.n	8017846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801781a:	ea82 0001 	eor.w	r0, r2, r1
 801781e:	0784      	lsls	r4, r0, #30
 8017820:	d02d      	beq.n	801787e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8017822:	1e94      	subs	r4, r2, #2
 8017824:	4608      	mov	r0, r1
 8017826:	18ce      	adds	r6, r1, r3
 8017828:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801782c:	f820 5b02 	strh.w	r5, [r0], #2
 8017830:	1a35      	subs	r5, r6, r0
 8017832:	2d01      	cmp	r5, #1
 8017834:	d8f8      	bhi.n	8017828 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8017836:	1e98      	subs	r0, r3, #2
 8017838:	f003 0301 	and.w	r3, r3, #1
 801783c:	f020 0001 	bic.w	r0, r0, #1
 8017840:	3002      	adds	r0, #2
 8017842:	4401      	add	r1, r0
 8017844:	4402      	add	r2, r0
 8017846:	1f14      	subs	r4, r2, #4
 8017848:	4608      	mov	r0, r1
 801784a:	18ce      	adds	r6, r1, r3
 801784c:	1a35      	subs	r5, r6, r0
 801784e:	2d03      	cmp	r5, #3
 8017850:	d810      	bhi.n	8017874 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8017852:	089c      	lsrs	r4, r3, #2
 8017854:	00a0      	lsls	r0, r4, #2
 8017856:	4401      	add	r1, r0
 8017858:	3801      	subs	r0, #1
 801785a:	4402      	add	r2, r0
 801785c:	f06f 0003 	mvn.w	r0, #3
 8017860:	fb00 3404 	mla	r4, r0, r4, r3
 8017864:	440c      	add	r4, r1
 8017866:	42a1      	cmp	r1, r4
 8017868:	d011      	beq.n	801788e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801786a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801786e:	f801 3b01 	strb.w	r3, [r1], #1
 8017872:	e7f8      	b.n	8017866 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8017874:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8017878:	f840 5b04 	str.w	r5, [r0], #4
 801787c:	e7e6      	b.n	801784c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801787e:	0790      	lsls	r0, r2, #30
 8017880:	d0e1      	beq.n	8017846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017882:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017886:	3b02      	subs	r3, #2
 8017888:	f821 0b02 	strh.w	r0, [r1], #2
 801788c:	e7db      	b.n	8017846 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801788e:	2001      	movs	r0, #1
 8017890:	bd70      	pop	{r4, r5, r6, pc}

08017892 <_ZN8touchgfx3HAL7noTouchEv>:
 8017892:	b510      	push	{r4, lr}
 8017894:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017898:	4604      	mov	r4, r0
 801789a:	b153      	cbz	r3, 80178b2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801789c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80178a0:	2101      	movs	r1, #1
 80178a2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80178a6:	301c      	adds	r0, #28
 80178a8:	f00d fa36 	bl	8024d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80178ac:	2300      	movs	r3, #0
 80178ae:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80178b2:	bd10      	pop	{r4, pc}

080178b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80178b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178b8:	4605      	mov	r5, r0
 80178ba:	6980      	ldr	r0, [r0, #24]
 80178bc:	b085      	sub	sp, #20
 80178be:	460f      	mov	r7, r1
 80178c0:	4690      	mov	r8, r2
 80178c2:	4699      	mov	r9, r3
 80178c4:	b930      	cbnz	r0, 80178d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80178c6:	4b1f      	ldr	r3, [pc, #124]	; (8017944 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80178c8:	f44f 7198 	mov.w	r1, #304	; 0x130
 80178cc:	4a1e      	ldr	r2, [pc, #120]	; (8017948 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80178ce:	481f      	ldr	r0, [pc, #124]	; (801794c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80178d0:	f00e fe9c 	bl	802660c <__assert_func>
 80178d4:	ac04      	add	r4, sp, #16
 80178d6:	2600      	movs	r6, #0
 80178d8:	f844 6d04 	str.w	r6, [r4, #-4]!
 80178dc:	6806      	ldr	r6, [r0, #0]
 80178de:	9401      	str	r4, [sp, #4]
 80178e0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80178e4:	9400      	str	r4, [sp, #0]
 80178e6:	6834      	ldr	r4, [r6, #0]
 80178e8:	47a0      	blx	r4
 80178ea:	4c19      	ldr	r4, [pc, #100]	; (8017950 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80178ec:	4606      	mov	r6, r0
 80178ee:	f8a4 9000 	strh.w	r9, [r4]
 80178f2:	f7f8 fb49 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 80178f6:	6803      	ldr	r3, [r0, #0]
 80178f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178fa:	4798      	blx	r3
 80178fc:	280c      	cmp	r0, #12
 80178fe:	d80f      	bhi.n	8017920 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8017900:	e8df f000 	tbb	[pc, r0]
 8017904:	1b1b1207 	.word	0x1b1b1207
 8017908:	1b1b1b1b 	.word	0x1b1b1b1b
 801790c:	1b1b1b1b 	.word	0x1b1b1b1b
 8017910:	1b          	.byte	0x1b
 8017911:	00          	.byte	0x00
 8017912:	8823      	ldrh	r3, [r4, #0]
 8017914:	fb08 7203 	mla	r2, r8, r3, r7
 8017918:	9b03      	ldr	r3, [sp, #12]
 801791a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801791e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017920:	4630      	mov	r0, r6
 8017922:	b005      	add	sp, #20
 8017924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017928:	8822      	ldrh	r2, [r4, #0]
 801792a:	9b03      	ldr	r3, [sp, #12]
 801792c:	fb08 7202 	mla	r2, r8, r2, r7
 8017930:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017934:	1a9a      	subs	r2, r3, r2
 8017936:	63ea      	str	r2, [r5, #60]	; 0x3c
 8017938:	e7f2      	b.n	8017920 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801793a:	4b06      	ldr	r3, [pc, #24]	; (8017954 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801793c:	f240 114d 	movw	r1, #333	; 0x14d
 8017940:	4a01      	ldr	r2, [pc, #4]	; (8017948 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017942:	e7c4      	b.n	80178ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017944:	0802909d 	.word	0x0802909d
 8017948:	080293ae 	.word	0x080293ae
 801794c:	080290e2 	.word	0x080290e2
 8017950:	2000c636 	.word	0x2000c636
 8017954:	08029108 	.word	0x08029108

08017958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8017958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801795c:	4698      	mov	r8, r3
 801795e:	6803      	ldr	r3, [r0, #0]
 8017960:	b087      	sub	sp, #28
 8017962:	460e      	mov	r6, r1
 8017964:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8017966:	4617      	mov	r7, r2
 8017968:	4b0d      	ldr	r3, [pc, #52]	; (80179a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801796a:	4604      	mov	r4, r0
 801796c:	f8b3 9000 	ldrh.w	r9, [r3]
 8017970:	f7f8 fb0a 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017974:	6803      	ldr	r3, [r0, #0]
 8017976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017978:	4798      	blx	r3
 801797a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801797e:	463a      	mov	r2, r7
 8017980:	4631      	mov	r1, r6
 8017982:	9302      	str	r3, [sp, #8]
 8017984:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017988:	9301      	str	r3, [sp, #4]
 801798a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801798e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8017992:	9300      	str	r3, [sp, #0]
 8017994:	4620      	mov	r0, r4
 8017996:	4643      	mov	r3, r8
 8017998:	47a8      	blx	r5
 801799a:	b007      	add	sp, #28
 801799c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179a0:	2000c636 	.word	0x2000c636

080179a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80179a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a8:	4606      	mov	r6, r0
 80179aa:	b089      	sub	sp, #36	; 0x24
 80179ac:	4610      	mov	r0, r2
 80179ae:	460c      	mov	r4, r1
 80179b0:	4691      	mov	r9, r2
 80179b2:	4698      	mov	r8, r3
 80179b4:	f005 f818 	bl	801c9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	f000 8092 	beq.w	8017ae2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80179be:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8017afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80179c2:	ad08      	add	r5, sp, #32
 80179c4:	f8df b138 	ldr.w	fp, [pc, #312]	; 8017b00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80179c8:	f8da 0000 	ldr.w	r0, [sl]
 80179cc:	4f4a      	ldr	r7, [pc, #296]	; (8017af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80179ce:	6802      	ldr	r2, [r0, #0]
 80179d0:	6a12      	ldr	r2, [r2, #32]
 80179d2:	4790      	blx	r2
 80179d4:	f8da 0000 	ldr.w	r0, [sl]
 80179d8:	6802      	ldr	r2, [r0, #0]
 80179da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80179dc:	4790      	blx	r2
 80179de:	f8bb 3000 	ldrh.w	r3, [fp]
 80179e2:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80179e6:	4628      	mov	r0, r5
 80179e8:	9300      	str	r3, [sp, #0]
 80179ea:	883b      	ldrh	r3, [r7, #0]
 80179ec:	9301      	str	r3, [sp, #4]
 80179ee:	f005 f8bb 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179f2:	f8ab 0000 	strh.w	r0, [fp]
 80179f6:	4628      	mov	r0, r5
 80179f8:	f005 f8f0 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80179fc:	f8da b000 	ldr.w	fp, [sl]
 8017a00:	8038      	strh	r0, [r7, #0]
 8017a02:	4648      	mov	r0, r9
 8017a04:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8017a08:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8017a0c:	9302      	str	r3, [sp, #8]
 8017a0e:	f004 ffeb 	bl	801c9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017a12:	f8da 2000 	ldr.w	r2, [sl]
 8017a16:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8017a1a:	63d0      	str	r0, [r2, #60]	; 0x3c
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	6822      	ldr	r2, [r4, #0]
 8017a20:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8017a24:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8017a26:	2200      	movs	r2, #0
 8017a28:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	4798      	blx	r3
 8017a30:	2201      	movs	r2, #1
 8017a32:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8017a36:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8017a3a:	1d22      	adds	r2, r4, #4
 8017a3c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8017a40:	2900      	cmp	r1, #0
 8017a42:	d051      	beq.n	8017ae8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8017a44:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8017a48:	2900      	cmp	r1, #0
 8017a4a:	d04d      	beq.n	8017ae8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8017a4c:	6810      	ldr	r0, [r2, #0]
 8017a4e:	f10d 0c18 	add.w	ip, sp, #24
 8017a52:	6851      	ldr	r1, [r2, #4]
 8017a54:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017a58:	4641      	mov	r1, r8
 8017a5a:	a806      	add	r0, sp, #24
 8017a5c:	f7ff fc76 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 8017a60:	4628      	mov	r0, r5
 8017a62:	f005 fa0d 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017a66:	4680      	mov	r8, r0
 8017a68:	f7f8 fa8e 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017a6c:	6802      	ldr	r2, [r0, #0]
 8017a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017a70:	4790      	blx	r2
 8017a72:	4580      	cmp	r8, r0
 8017a74:	d03d      	beq.n	8017af2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8017a76:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8017a78:	b150      	cbz	r0, 8017a90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	f005 fa00 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017a80:	4605      	mov	r5, r0
 8017a82:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8017a84:	6803      	ldr	r3, [r0, #0]
 8017a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a88:	4798      	blx	r3
 8017a8a:	1a2b      	subs	r3, r5, r0
 8017a8c:	4258      	negs	r0, r3
 8017a8e:	4158      	adcs	r0, r3
 8017a90:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8017a94:	2500      	movs	r5, #0
 8017a96:	6963      	ldr	r3, [r4, #20]
 8017a98:	4620      	mov	r0, r4
 8017a9a:	6822      	ldr	r2, [r4, #0]
 8017a9c:	a906      	add	r1, sp, #24
 8017a9e:	6165      	str	r5, [r4, #20]
 8017aa0:	9303      	str	r3, [sp, #12]
 8017aa2:	6892      	ldr	r2, [r2, #8]
 8017aa4:	4790      	blx	r2
 8017aa6:	9b03      	ldr	r3, [sp, #12]
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	4652      	mov	r2, sl
 8017aac:	6163      	str	r3, [r4, #20]
 8017aae:	4649      	mov	r1, r9
 8017ab0:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8017ab4:	6823      	ldr	r3, [r4, #0]
 8017ab6:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8017aba:	4c10      	ldr	r4, [pc, #64]	; (8017afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8017abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017abe:	4798      	blx	r3
 8017ac0:	6820      	ldr	r0, [r4, #0]
 8017ac2:	9b02      	ldr	r3, [sp, #8]
 8017ac4:	9a00      	ldr	r2, [sp, #0]
 8017ac6:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8017aca:	4b0d      	ldr	r3, [pc, #52]	; (8017b00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8017acc:	801a      	strh	r2, [r3, #0]
 8017ace:	4b0a      	ldr	r3, [pc, #40]	; (8017af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8017ad0:	9a01      	ldr	r2, [sp, #4]
 8017ad2:	801a      	strh	r2, [r3, #0]
 8017ad4:	6803      	ldr	r3, [r0, #0]
 8017ad6:	6a1b      	ldr	r3, [r3, #32]
 8017ad8:	4798      	blx	r3
 8017ada:	6820      	ldr	r0, [r4, #0]
 8017adc:	6803      	ldr	r3, [r0, #0]
 8017ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae0:	4798      	blx	r3
 8017ae2:	b009      	add	sp, #36	; 0x24
 8017ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ae8:	ab06      	add	r3, sp, #24
 8017aea:	6810      	ldr	r0, [r2, #0]
 8017aec:	6851      	ldr	r1, [r2, #4]
 8017aee:	c303      	stmia	r3!, {r0, r1}
 8017af0:	e7b6      	b.n	8017a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8017af2:	2000      	movs	r0, #0
 8017af4:	e7cc      	b.n	8017a90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8017af6:	bf00      	nop
 8017af8:	2000c638 	.word	0x2000c638
 8017afc:	2000c63c 	.word	0x2000c63c
 8017b00:	2000c636 	.word	0x2000c636

08017b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017b04:	4b07      	ldr	r3, [pc, #28]	; (8017b24 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017b06:	b510      	push	{r4, lr}
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	b13b      	cbz	r3, 8017b1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017b0e:	6803      	ldr	r3, [r0, #0]
 8017b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b12:	4798      	blx	r3
 8017b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017b16:	4283      	cmp	r3, r0
 8017b18:	d101      	bne.n	8017b1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017b1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017b1c:	bd10      	pop	{r4, pc}
 8017b1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017b20:	e7fc      	b.n	8017b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017b22:	bf00      	nop
 8017b24:	2000c63a 	.word	0x2000c63a

08017b28 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017b28:	4b0b      	ldr	r3, [pc, #44]	; (8017b58 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8017b2a:	b510      	push	{r4, lr}
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	4604      	mov	r4, r0
 8017b30:	b95b      	cbnz	r3, 8017b4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017b32:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017b36:	2b02      	cmp	r3, #2
 8017b38:	d007      	beq.n	8017b4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017b3a:	6840      	ldr	r0, [r0, #4]
 8017b3c:	f000 fbc8 	bl	80182d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017b40:	b118      	cbz	r0, 8017b4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017b42:	6862      	ldr	r2, [r4, #4]
 8017b44:	7a53      	ldrb	r3, [r2, #9]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d0fc      	beq.n	8017b44 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017b4a:	f7fd fba1 	bl	8015290 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f7ff ffd8 	bl	8017b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017b54:	bd10      	pop	{r4, pc}
 8017b56:	bf00      	nop
 8017b58:	2000c63a 	.word	0x2000c63a

08017b5c <_ZN8touchgfx3HAL10initializeEv>:
 8017b5c:	b510      	push	{r4, lr}
 8017b5e:	4604      	mov	r4, r0
 8017b60:	f7fd fb72 	bl	8015248 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017b64:	6860      	ldr	r0, [r4, #4]
 8017b66:	6803      	ldr	r3, [r0, #0]
 8017b68:	68db      	ldr	r3, [r3, #12]
 8017b6a:	4798      	blx	r3
 8017b6c:	68e0      	ldr	r0, [r4, #12]
 8017b6e:	6803      	ldr	r3, [r0, #0]
 8017b70:	689b      	ldr	r3, [r3, #8]
 8017b72:	4798      	blx	r3
 8017b74:	6823      	ldr	r3, [r4, #0]
 8017b76:	4620      	mov	r0, r4
 8017b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b7e:	4718      	bx	r3

08017b80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017b80:	b508      	push	{r3, lr}
 8017b82:	290c      	cmp	r1, #12
 8017b84:	d817      	bhi.n	8017bb6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8017b86:	e8df f001 	tbb	[pc, r1]
 8017b8a:	090b      	.short	0x090b
 8017b8c:	0d0d0d07 	.word	0x0d0d0d07
 8017b90:	1414140d 	.word	0x1414140d
 8017b94:	1414      	.short	0x1414
 8017b96:	0d          	.byte	0x0d
 8017b97:	00          	.byte	0x00
 8017b98:	2020      	movs	r0, #32
 8017b9a:	bd08      	pop	{r3, pc}
 8017b9c:	2018      	movs	r0, #24
 8017b9e:	e7fc      	b.n	8017b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017ba0:	2010      	movs	r0, #16
 8017ba2:	e7fa      	b.n	8017b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017ba4:	4b05      	ldr	r3, [pc, #20]	; (8017bbc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8017ba6:	f44f 710c 	mov.w	r1, #560	; 0x230
 8017baa:	4a05      	ldr	r2, [pc, #20]	; (8017bc0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017bac:	4805      	ldr	r0, [pc, #20]	; (8017bc4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017bae:	f00e fd2d 	bl	802660c <__assert_func>
 8017bb2:	2008      	movs	r0, #8
 8017bb4:	e7f1      	b.n	8017b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017bb6:	2000      	movs	r0, #0
 8017bb8:	e7ef      	b.n	8017b9a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017bba:	bf00      	nop
 8017bbc:	080291db 	.word	0x080291db
 8017bc0:	08029570 	.word	0x08029570
 8017bc4:	080290e2 	.word	0x080290e2

08017bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017bc8:	b570      	push	{r4, r5, r6, lr}
 8017bca:	460d      	mov	r5, r1
 8017bcc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017bd0:	4616      	mov	r6, r2
 8017bd2:	461c      	mov	r4, r3
 8017bd4:	f7ff ffd4 	bl	8017b80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017bd8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017bdc:	10c0      	asrs	r0, r0, #3
 8017bde:	fb06 5101 	mla	r1, r6, r1, r5
 8017be2:	fb00 4001 	mla	r0, r0, r1, r4
 8017be6:	bd70      	pop	{r4, r5, r6, pc}

08017be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8017be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bec:	b08a      	sub	sp, #40	; 0x28
 8017bee:	f04f 0c00 	mov.w	ip, #0
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	469a      	mov	sl, r3
 8017bf6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8017bfa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017bfe:	f1b8 0f02 	cmp.w	r8, #2
 8017c02:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8017c06:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017c0a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017c0e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017c12:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017c16:	f8cd c020 	str.w	ip, [sp, #32]
 8017c1a:	d030      	beq.n	8017c7e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017c1c:	2bff      	cmp	r3, #255	; 0xff
 8017c1e:	d12c      	bne.n	8017c7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017c20:	4560      	cmp	r0, ip
 8017c22:	bf14      	ite	ne
 8017c24:	2004      	movne	r0, #4
 8017c26:	2001      	moveq	r0, #1
 8017c28:	9204      	str	r2, [sp, #16]
 8017c2a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017c2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017c32:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017c36:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017c3a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c42:	4620      	mov	r0, r4
 8017c44:	f7ff ff5e 	bl	8017b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017c48:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	4651      	mov	r1, sl
 8017c50:	4620      	mov	r0, r4
 8017c52:	e9cd 9700 	strd	r9, r7, [sp]
 8017c56:	f7ff ffb7 	bl	8017bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017c5a:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017c5e:	9005      	str	r0, [sp, #20]
 8017c60:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8017c64:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8017c68:	b106      	cbz	r6, 8017c6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8017c6a:	b98d      	cbnz	r5, 8017c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017c6c:	4b12      	ldr	r3, [pc, #72]	; (8017cb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017c6e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8017c72:	4a12      	ldr	r2, [pc, #72]	; (8017cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017c74:	4812      	ldr	r0, [pc, #72]	; (8017cc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8017c76:	f00e fcc9 	bl	802660c <__assert_func>
 8017c7a:	2004      	movs	r0, #4
 8017c7c:	e7d4      	b.n	8017c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017c7e:	2bff      	cmp	r3, #255	; 0xff
 8017c80:	d104      	bne.n	8017c8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8017c82:	2800      	cmp	r0, #0
 8017c84:	bf14      	ite	ne
 8017c86:	2040      	movne	r0, #64	; 0x40
 8017c88:	2020      	moveq	r0, #32
 8017c8a:	e7cd      	b.n	8017c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017c8c:	2040      	movs	r0, #64	; 0x40
 8017c8e:	e7cb      	b.n	8017c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017c90:	6823      	ldr	r3, [r4, #0]
 8017c92:	4620      	mov	r0, r4
 8017c94:	9d02      	ldr	r5, [sp, #8]
 8017c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c98:	4798      	blx	r3
 8017c9a:	4228      	tst	r0, r5
 8017c9c:	d104      	bne.n	8017ca8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8017c9e:	4b09      	ldr	r3, [pc, #36]	; (8017cc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8017ca0:	f240 11b1 	movw	r1, #433	; 0x1b1
 8017ca4:	4a05      	ldr	r2, [pc, #20]	; (8017cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017ca6:	e7e5      	b.n	8017c74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8017ca8:	6860      	ldr	r0, [r4, #4]
 8017caa:	a902      	add	r1, sp, #8
 8017cac:	6803      	ldr	r3, [r0, #0]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	4798      	blx	r3
 8017cb2:	b00a      	add	sp, #40	; 0x28
 8017cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cb8:	0802915e 	.word	0x0802915e
 8017cbc:	08029412 	.word	0x08029412
 8017cc0:	080290e2 	.word	0x080290e2
 8017cc4:	08029196 	.word	0x08029196

08017cc8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8017cc8:	b510      	push	{r4, lr}
 8017cca:	b08a      	sub	sp, #40	; 0x28
 8017ccc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8017cd0:	9408      	str	r4, [sp, #32]
 8017cd2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8017cd6:	9407      	str	r4, [sp, #28]
 8017cd8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8017cdc:	9406      	str	r4, [sp, #24]
 8017cde:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8017ce2:	9405      	str	r4, [sp, #20]
 8017ce4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8017ce8:	9404      	str	r4, [sp, #16]
 8017cea:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8017cee:	9403      	str	r4, [sp, #12]
 8017cf0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8017cf4:	9402      	str	r4, [sp, #8]
 8017cf6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017cfa:	e9cd 3400 	strd	r3, r4, [sp]
 8017cfe:	4613      	mov	r3, r2
 8017d00:	2200      	movs	r2, #0
 8017d02:	f7ff ff71 	bl	8017be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017d06:	b00a      	add	sp, #40	; 0x28
 8017d08:	bd10      	pop	{r4, pc}
	...

08017d0c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8017d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d0e:	b08b      	sub	sp, #44	; 0x2c
 8017d10:	4616      	mov	r6, r2
 8017d12:	460d      	mov	r5, r1
 8017d14:	461f      	mov	r7, r3
 8017d16:	4604      	mov	r4, r0
 8017d18:	f7f8 f936 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017d1c:	6803      	ldr	r3, [r0, #0]
 8017d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d20:	4798      	blx	r3
 8017d22:	4b0e      	ldr	r3, [pc, #56]	; (8017d5c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8017d24:	2200      	movs	r2, #0
 8017d26:	4629      	mov	r1, r5
 8017d28:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017d2c:	881b      	ldrh	r3, [r3, #0]
 8017d2e:	4620      	mov	r0, r4
 8017d30:	9306      	str	r3, [sp, #24]
 8017d32:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017d36:	9305      	str	r3, [sp, #20]
 8017d38:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017d3c:	9304      	str	r3, [sp, #16]
 8017d3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017d42:	9303      	str	r3, [sp, #12]
 8017d44:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017d48:	9302      	str	r3, [sp, #8]
 8017d4a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017d4e:	e9cd 7300 	strd	r7, r3, [sp]
 8017d52:	4633      	mov	r3, r6
 8017d54:	f7ff ff48 	bl	8017be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017d58:	b00b      	add	sp, #44	; 0x2c
 8017d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d5c:	2000c636 	.word	0x2000c636

08017d60 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d64:	461f      	mov	r7, r3
 8017d66:	4b14      	ldr	r3, [pc, #80]	; (8017db8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017d68:	b08a      	sub	sp, #40	; 0x28
 8017d6a:	4616      	mov	r6, r2
 8017d6c:	f8b3 8000 	ldrh.w	r8, [r3]
 8017d70:	460d      	mov	r5, r1
 8017d72:	4604      	mov	r4, r0
 8017d74:	f7f8 f908 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017d78:	6803      	ldr	r3, [r0, #0]
 8017d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d7c:	4798      	blx	r3
 8017d7e:	2302      	movs	r3, #2
 8017d80:	9008      	str	r0, [sp, #32]
 8017d82:	2200      	movs	r2, #0
 8017d84:	4629      	mov	r1, r5
 8017d86:	4620      	mov	r0, r4
 8017d88:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	9305      	str	r3, [sp, #20]
 8017d90:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017d94:	9304      	str	r3, [sp, #16]
 8017d96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017d9a:	9303      	str	r3, [sp, #12]
 8017d9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017da0:	9302      	str	r3, [sp, #8]
 8017da2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017da6:	e9cd 7300 	strd	r7, r3, [sp]
 8017daa:	4633      	mov	r3, r6
 8017dac:	f7ff ff1c 	bl	8017be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017db0:	b00a      	add	sp, #40	; 0x28
 8017db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017db6:	bf00      	nop
 8017db8:	2000c636 	.word	0x2000c636

08017dbc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8017dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc0:	b08b      	sub	sp, #44	; 0x2c
 8017dc2:	469b      	mov	fp, r3
 8017dc4:	4604      	mov	r4, r0
 8017dc6:	4692      	mov	sl, r2
 8017dc8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017dcc:	2600      	movs	r6, #0
 8017dce:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8017dd2:	4689      	mov	r9, r1
 8017dd4:	2fff      	cmp	r7, #255	; 0xff
 8017dd6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8017dda:	9608      	str	r6, [sp, #32]
 8017ddc:	bf14      	ite	ne
 8017dde:	2308      	movne	r3, #8
 8017de0:	2302      	moveq	r3, #2
 8017de2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8017de6:	f7ff fe8d 	bl	8017b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017dea:	465a      	mov	r2, fp
 8017dec:	4603      	mov	r3, r0
 8017dee:	4651      	mov	r1, sl
 8017df0:	4620      	mov	r0, r4
 8017df2:	e9cd 8500 	strd	r8, r5, [sp]
 8017df6:	f7ff fee7 	bl	8017bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017dfa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017dfe:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8017e02:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017e06:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017e0a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8017e0e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	9d02      	ldr	r5, [sp, #8]
 8017e16:	9005      	str	r0, [sp, #20]
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017e1e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017e22:	f8cd 9020 	str.w	r9, [sp, #32]
 8017e26:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8017e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e2c:	4798      	blx	r3
 8017e2e:	4228      	tst	r0, r5
 8017e30:	d106      	bne.n	8017e40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8017e32:	4b07      	ldr	r3, [pc, #28]	; (8017e50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8017e34:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8017e38:	4a06      	ldr	r2, [pc, #24]	; (8017e54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8017e3a:	4807      	ldr	r0, [pc, #28]	; (8017e58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8017e3c:	f00e fbe6 	bl	802660c <__assert_func>
 8017e40:	6860      	ldr	r0, [r4, #4]
 8017e42:	a902      	add	r1, sp, #8
 8017e44:	6803      	ldr	r3, [r0, #0]
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	4798      	blx	r3
 8017e4a:	b00b      	add	sp, #44	; 0x2c
 8017e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e50:	08029196 	.word	0x08029196
 8017e54:	080294db 	.word	0x080294db
 8017e58:	080290e2 	.word	0x080290e2

08017e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017e5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017e60:	461f      	mov	r7, r3
 8017e62:	4b0b      	ldr	r3, [pc, #44]	; (8017e90 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017e64:	460d      	mov	r5, r1
 8017e66:	4616      	mov	r6, r2
 8017e68:	f8b3 8000 	ldrh.w	r8, [r3]
 8017e6c:	4604      	mov	r4, r0
 8017e6e:	f7f8 f88b 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017e72:	6803      	ldr	r3, [r0, #0]
 8017e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e76:	4798      	blx	r3
 8017e78:	463b      	mov	r3, r7
 8017e7a:	4632      	mov	r2, r6
 8017e7c:	4629      	mov	r1, r5
 8017e7e:	e9cd 8000 	strd	r8, r0, [sp]
 8017e82:	4620      	mov	r0, r4
 8017e84:	f7ff fea0 	bl	8017bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017e88:	b002      	add	sp, #8
 8017e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e8e:	bf00      	nop
 8017e90:	2000c636 	.word	0x2000c636

08017e94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8017e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e98:	4698      	mov	r8, r3
 8017e9a:	b088      	sub	sp, #32
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	4617      	mov	r7, r2
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8017ea6:	9306      	str	r3, [sp, #24]
 8017ea8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017eac:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017eb0:	f8ad 6010 	strh.w	r6, [sp, #16]
 8017eb4:	f8ad 5012 	strh.w	r5, [sp, #18]
 8017eb8:	e9cd 3100 	strd	r3, r1, [sp]
 8017ebc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ec4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017ec8:	f88d 301c 	strb.w	r3, [sp, #28]
 8017ecc:	f7ff fe1a 	bl	8017b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017ed0:	4642      	mov	r2, r8
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	4639      	mov	r1, r7
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f7ff ffc0 	bl	8017e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017edc:	4b16      	ldr	r3, [pc, #88]	; (8017f38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8017ede:	9003      	str	r0, [sp, #12]
 8017ee0:	881b      	ldrh	r3, [r3, #0]
 8017ee2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ee6:	f7f8 f84f 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017eea:	6803      	ldr	r3, [r0, #0]
 8017eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017eee:	4798      	blx	r3
 8017ef0:	f88d 001e 	strb.w	r0, [sp, #30]
 8017ef4:	f88d 001d 	strb.w	r0, [sp, #29]
 8017ef8:	b106      	cbz	r6, 8017efc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8017efa:	b935      	cbnz	r5, 8017f0a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8017efc:	4b0f      	ldr	r3, [pc, #60]	; (8017f3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8017efe:	f240 11cd 	movw	r1, #461	; 0x1cd
 8017f02:	4a0f      	ldr	r2, [pc, #60]	; (8017f40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017f04:	480f      	ldr	r0, [pc, #60]	; (8017f44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8017f06:	f00e fb81 	bl	802660c <__assert_func>
 8017f0a:	6823      	ldr	r3, [r4, #0]
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	9d00      	ldr	r5, [sp, #0]
 8017f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f12:	4798      	blx	r3
 8017f14:	4228      	tst	r0, r5
 8017f16:	d104      	bne.n	8017f22 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8017f18:	4b0b      	ldr	r3, [pc, #44]	; (8017f48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8017f1a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8017f1e:	4a08      	ldr	r2, [pc, #32]	; (8017f40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017f20:	e7f0      	b.n	8017f04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8017f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017f24:	4669      	mov	r1, sp
 8017f26:	6860      	ldr	r0, [r4, #4]
 8017f28:	9306      	str	r3, [sp, #24]
 8017f2a:	6803      	ldr	r3, [r0, #0]
 8017f2c:	685b      	ldr	r3, [r3, #4]
 8017f2e:	4798      	blx	r3
 8017f30:	b008      	add	sp, #32
 8017f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f36:	bf00      	nop
 8017f38:	2000c636 	.word	0x2000c636
 8017f3c:	0802915e 	.word	0x0802915e
 8017f40:	080292c4 	.word	0x080292c4
 8017f44:	080290e2 	.word	0x080290e2
 8017f48:	08029196 	.word	0x08029196

08017f4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017f4c:	b570      	push	{r4, r5, r6, lr}
 8017f4e:	b08a      	sub	sp, #40	; 0x28
 8017f50:	4604      	mov	r4, r0
 8017f52:	466b      	mov	r3, sp
 8017f54:	e883 0006 	stmia.w	r3, {r1, r2}
 8017f58:	4b1f      	ldr	r3, [pc, #124]	; (8017fd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	b933      	cbnz	r3, 8017f6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8017f5e:	4b1f      	ldr	r3, [pc, #124]	; (8017fdc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8017f60:	f240 11f9 	movw	r1, #505	; 0x1f9
 8017f64:	4a1e      	ldr	r2, [pc, #120]	; (8017fe0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8017f66:	481f      	ldr	r0, [pc, #124]	; (8017fe4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8017f68:	f00e fb50 	bl	802660c <__assert_func>
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	f8bd 5000 	ldrh.w	r5, [sp]
 8017f72:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8017f76:	9308      	str	r3, [sp, #32]
 8017f78:	2301      	movs	r3, #1
 8017f7a:	9302      	str	r3, [sp, #8]
 8017f7c:	6803      	ldr	r3, [r0, #0]
 8017f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f80:	4798      	blx	r3
 8017f82:	4632      	mov	r2, r6
 8017f84:	4629      	mov	r1, r5
 8017f86:	4603      	mov	r3, r0
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f7ff ff67 	bl	8017e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017f8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017f90:	9003      	str	r0, [sp, #12]
 8017f92:	9305      	str	r3, [sp, #20]
 8017f94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017f98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017f9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017fa0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017fa4:	4b10      	ldr	r3, [pc, #64]	; (8017fe8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8017fa6:	881b      	ldrh	r3, [r3, #0]
 8017fa8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017fac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017fb0:	f7f7 ffea 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8017fb4:	6803      	ldr	r3, [r0, #0]
 8017fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fb8:	4798      	blx	r3
 8017fba:	23ff      	movs	r3, #255	; 0xff
 8017fbc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017fc0:	a902      	add	r1, sp, #8
 8017fc2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017fc6:	6860      	ldr	r0, [r4, #4]
 8017fc8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017fcc:	6803      	ldr	r3, [r0, #0]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	4798      	blx	r3
 8017fd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017fd4:	b00a      	add	sp, #40	; 0x28
 8017fd6:	bd70      	pop	{r4, r5, r6, pc}
 8017fd8:	2000c63b 	.word	0x2000c63b
 8017fdc:	0802902f 	.word	0x0802902f
 8017fe0:	08029368 	.word	0x08029368
 8017fe4:	080290e2 	.word	0x080290e2
 8017fe8:	2000c636 	.word	0x2000c636

08017fec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fee:	b08b      	sub	sp, #44	; 0x2c
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	466d      	mov	r5, sp
 8017ff4:	e885 0006 	stmia.w	r5, {r1, r2}
 8017ff8:	461d      	mov	r5, r3
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	f8bd 6000 	ldrh.w	r6, [sp]
 8018000:	9308      	str	r3, [sp, #32]
 8018002:	2301      	movs	r3, #1
 8018004:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018008:	9302      	str	r3, [sp, #8]
 801800a:	6803      	ldr	r3, [r0, #0]
 801800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801800e:	4798      	blx	r3
 8018010:	463a      	mov	r2, r7
 8018012:	4631      	mov	r1, r6
 8018014:	4603      	mov	r3, r0
 8018016:	4620      	mov	r0, r4
 8018018:	f7ff ff20 	bl	8017e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801801c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018020:	9003      	str	r0, [sp, #12]
 8018022:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018026:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801802a:	9505      	str	r5, [sp, #20]
 801802c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018030:	4b0d      	ldr	r3, [pc, #52]	; (8018068 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8018032:	881b      	ldrh	r3, [r3, #0]
 8018034:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801803a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801803e:	f7f7 ffa3 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8018042:	6803      	ldr	r3, [r0, #0]
 8018044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018046:	4798      	blx	r3
 8018048:	23ff      	movs	r3, #255	; 0xff
 801804a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801804e:	a902      	add	r1, sp, #8
 8018050:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018054:	6860      	ldr	r0, [r4, #4]
 8018056:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801805a:	6803      	ldr	r3, [r0, #0]
 801805c:	685b      	ldr	r3, [r3, #4]
 801805e:	4798      	blx	r3
 8018060:	4628      	mov	r0, r5
 8018062:	b00b      	add	sp, #44	; 0x2c
 8018064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018066:	bf00      	nop
 8018068:	2000c636 	.word	0x2000c636

0801806c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801806c:	b570      	push	{r4, r5, r6, lr}
 801806e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018072:	4604      	mov	r4, r0
 8018074:	b19b      	cbz	r3, 801809e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018076:	2002      	movs	r0, #2
 8018078:	f7fc fea0 	bl	8014dbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801807c:	2300      	movs	r3, #0
 801807e:	4620      	mov	r0, r4
 8018080:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018084:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018088:	6823      	ldr	r3, [r4, #0]
 801808a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801808e:	f7ff fd39 	bl	8017b04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018092:	4601      	mov	r1, r0
 8018094:	4620      	mov	r0, r4
 8018096:	462b      	mov	r3, r5
 8018098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801809c:	4718      	bx	r3
 801809e:	bd70      	pop	{r4, r5, r6, pc}

080180a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80180a0:	4770      	bx	lr

080180a2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80180a2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80180a6:	1a13      	subs	r3, r2, r0
 80180a8:	4258      	negs	r0, r3
 80180aa:	4158      	adcs	r0, r3
 80180ac:	4770      	bx	lr

080180ae <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80180ae:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80180b2:	1a9b      	subs	r3, r3, r2
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	bfdc      	itt	le
 80180b8:	6882      	ldrle	r2, [r0, #8]
 80180ba:	189b      	addle	r3, r3, r2
 80180bc:	2b01      	cmp	r3, #1
 80180be:	bfcc      	ite	gt
 80180c0:	2000      	movgt	r0, #0
 80180c2:	2001      	movle	r0, #1
 80180c4:	4770      	bx	lr

080180c6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80180c6:	6902      	ldr	r2, [r0, #16]
 80180c8:	6840      	ldr	r0, [r0, #4]
 80180ca:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80180ce:	4770      	bx	lr

080180d0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80180d0:	6803      	ldr	r3, [r0, #0]
 80180d2:	691b      	ldr	r3, [r3, #16]
 80180d4:	4718      	bx	r3

080180d6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80180d6:	4770      	bx	lr

080180d8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80180d8:	4770      	bx	lr
	...

080180dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80180dc:	2301      	movs	r3, #1
 80180de:	b570      	push	{r4, r5, r6, lr}
 80180e0:	7203      	strb	r3, [r0, #8]
 80180e2:	4604      	mov	r4, r0
 80180e4:	6840      	ldr	r0, [r0, #4]
 80180e6:	6803      	ldr	r3, [r0, #0]
 80180e8:	699b      	ldr	r3, [r3, #24]
 80180ea:	4798      	blx	r3
 80180ec:	6803      	ldr	r3, [r0, #0]
 80180ee:	4605      	mov	r5, r0
 80180f0:	2b08      	cmp	r3, #8
 80180f2:	d01e      	beq.n	8018132 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80180f4:	d80b      	bhi.n	801810e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80180f6:	2b02      	cmp	r3, #2
 80180f8:	d027      	beq.n	801814a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80180fa:	2b04      	cmp	r3, #4
 80180fc:	d011      	beq.n	8018122 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80180fe:	2b01      	cmp	r3, #1
 8018100:	d028      	beq.n	8018154 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018102:	4b17      	ldr	r3, [pc, #92]	; (8018160 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8018104:	218b      	movs	r1, #139	; 0x8b
 8018106:	4a17      	ldr	r2, [pc, #92]	; (8018164 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8018108:	4817      	ldr	r0, [pc, #92]	; (8018168 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801810a:	f00e fa7f 	bl	802660c <__assert_func>
 801810e:	2b40      	cmp	r3, #64	; 0x40
 8018110:	d020      	beq.n	8018154 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018112:	d801      	bhi.n	8018118 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018114:	2b20      	cmp	r3, #32
 8018116:	e7f3      	b.n	8018100 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018118:	2b80      	cmp	r3, #128	; 0x80
 801811a:	d01b      	beq.n	8018154 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801811c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018120:	e7ee      	b.n	8018100 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018122:	6823      	ldr	r3, [r4, #0]
 8018124:	7f01      	ldrb	r1, [r0, #28]
 8018126:	4620      	mov	r0, r4
 8018128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801812a:	4798      	blx	r3
 801812c:	6823      	ldr	r3, [r4, #0]
 801812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018130:	e006      	b.n	8018140 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018132:	6823      	ldr	r3, [r4, #0]
 8018134:	7f01      	ldrb	r1, [r0, #28]
 8018136:	4620      	mov	r0, r4
 8018138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801813a:	4798      	blx	r3
 801813c:	6823      	ldr	r3, [r4, #0]
 801813e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018140:	4629      	mov	r1, r5
 8018142:	4620      	mov	r0, r4
 8018144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018148:	4718      	bx	r3
 801814a:	6823      	ldr	r3, [r4, #0]
 801814c:	4620      	mov	r0, r4
 801814e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018150:	4798      	blx	r3
 8018152:	e7f3      	b.n	801813c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8018154:	6823      	ldr	r3, [r4, #0]
 8018156:	4620      	mov	r0, r4
 8018158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801815a:	4798      	blx	r3
 801815c:	e7e6      	b.n	801812c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801815e:	bf00      	nop
 8018160:	080295b9 	.word	0x080295b9
 8018164:	080296c8 	.word	0x080296c8
 8018168:	080295de 	.word	0x080295de

0801816c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801816c:	b570      	push	{r4, r5, r6, lr}
 801816e:	4604      	mov	r4, r0
 8018170:	460e      	mov	r6, r1
 8018172:	6860      	ldr	r0, [r4, #4]
 8018174:	6803      	ldr	r3, [r0, #0]
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	4798      	blx	r3
 801817a:	2800      	cmp	r0, #0
 801817c:	d1f9      	bne.n	8018172 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801817e:	4d0b      	ldr	r5, [pc, #44]	; (80181ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8018180:	6828      	ldr	r0, [r5, #0]
 8018182:	6803      	ldr	r3, [r0, #0]
 8018184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018186:	4798      	blx	r3
 8018188:	f7fd f89e 	bl	80152c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801818c:	6860      	ldr	r0, [r4, #4]
 801818e:	4631      	mov	r1, r6
 8018190:	6803      	ldr	r3, [r0, #0]
 8018192:	689b      	ldr	r3, [r3, #8]
 8018194:	4798      	blx	r3
 8018196:	6823      	ldr	r3, [r4, #0]
 8018198:	4620      	mov	r0, r4
 801819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801819c:	4798      	blx	r3
 801819e:	6828      	ldr	r0, [r5, #0]
 80181a0:	6803      	ldr	r3, [r0, #0]
 80181a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181a8:	4718      	bx	r3
 80181aa:	bf00      	nop
 80181ac:	2000c63c 	.word	0x2000c63c

080181b0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80181b0:	b508      	push	{r3, lr}
 80181b2:	f7fd f86d 	bl	8015290 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80181b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80181ba:	f7fd b877 	b.w	80152ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080181be <_ZN8touchgfx13DMA_Interface5startEv>:
 80181be:	b510      	push	{r4, lr}
 80181c0:	4604      	mov	r4, r0
 80181c2:	6840      	ldr	r0, [r0, #4]
 80181c4:	6803      	ldr	r3, [r0, #0]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	4798      	blx	r3
 80181ca:	b948      	cbnz	r0, 80181e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80181cc:	7a63      	ldrb	r3, [r4, #9]
 80181ce:	b13b      	cbz	r3, 80181e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80181d0:	7a23      	ldrb	r3, [r4, #8]
 80181d2:	b92b      	cbnz	r3, 80181e0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80181d4:	6823      	ldr	r3, [r4, #0]
 80181d6:	4620      	mov	r0, r4
 80181d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181de:	4718      	bx	r3
 80181e0:	bd10      	pop	{r4, pc}
	...

080181e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80181e4:	b510      	push	{r4, lr}
 80181e6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80181ea:	1b12      	subs	r2, r2, r4
 80181ec:	2a00      	cmp	r2, #0
 80181ee:	bfdc      	itt	le
 80181f0:	6883      	ldrle	r3, [r0, #8]
 80181f2:	18d2      	addle	r2, r2, r3
 80181f4:	2a01      	cmp	r2, #1
 80181f6:	dd18      	ble.n	801822a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80181f8:	6843      	ldr	r3, [r0, #4]
 80181fa:	f101 021c 	add.w	r2, r1, #28
 80181fe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8018202:	f851 4b04 	ldr.w	r4, [r1], #4
 8018206:	4291      	cmp	r1, r2
 8018208:	f843 4b04 	str.w	r4, [r3], #4
 801820c:	d1f9      	bne.n	8018202 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801820e:	880a      	ldrh	r2, [r1, #0]
 8018210:	801a      	strh	r2, [r3, #0]
 8018212:	788a      	ldrb	r2, [r1, #2]
 8018214:	709a      	strb	r2, [r3, #2]
 8018216:	68c3      	ldr	r3, [r0, #12]
 8018218:	6882      	ldr	r2, [r0, #8]
 801821a:	f3bf 8f5b 	dmb	ish
 801821e:	3301      	adds	r3, #1
 8018220:	429a      	cmp	r2, r3
 8018222:	bfd8      	it	le
 8018224:	1a9b      	suble	r3, r3, r2
 8018226:	60c3      	str	r3, [r0, #12]
 8018228:	bd10      	pop	{r4, pc}
 801822a:	4b03      	ldr	r3, [pc, #12]	; (8018238 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801822c:	2139      	movs	r1, #57	; 0x39
 801822e:	4a03      	ldr	r2, [pc, #12]	; (801823c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8018230:	4803      	ldr	r0, [pc, #12]	; (8018240 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8018232:	f00e f9eb 	bl	802660c <__assert_func>
 8018236:	bf00      	nop
 8018238:	08029604 	.word	0x08029604
 801823c:	080296f8 	.word	0x080296f8
 8018240:	080295de 	.word	0x080295de

08018244 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018244:	b510      	push	{r4, lr}
 8018246:	6803      	ldr	r3, [r0, #0]
 8018248:	4604      	mov	r4, r0
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	4798      	blx	r3
 801824e:	b128      	cbz	r0, 801825c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018250:	4b07      	ldr	r3, [pc, #28]	; (8018270 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018252:	213f      	movs	r1, #63	; 0x3f
 8018254:	4a07      	ldr	r2, [pc, #28]	; (8018274 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018256:	4808      	ldr	r0, [pc, #32]	; (8018278 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018258:	f00e f9d8 	bl	802660c <__assert_func>
 801825c:	6923      	ldr	r3, [r4, #16]
 801825e:	68a2      	ldr	r2, [r4, #8]
 8018260:	f3bf 8f5b 	dmb	ish
 8018264:	3301      	adds	r3, #1
 8018266:	429a      	cmp	r2, r3
 8018268:	bfd8      	it	le
 801826a:	1a9b      	suble	r3, r3, r2
 801826c:	6123      	str	r3, [r4, #16]
 801826e:	bd10      	pop	{r4, pc}
 8018270:	08029627 	.word	0x08029627
 8018274:	08029746 	.word	0x08029746
 8018278:	080295de 	.word	0x080295de

0801827c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801827c:	b570      	push	{r4, r5, r6, lr}
 801827e:	4604      	mov	r4, r0
 8018280:	6840      	ldr	r0, [r0, #4]
 8018282:	6803      	ldr	r3, [r0, #0]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	4798      	blx	r3
 8018288:	4605      	mov	r5, r0
 801828a:	b930      	cbnz	r0, 801829a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801828c:	7a23      	ldrb	r3, [r4, #8]
 801828e:	b123      	cbz	r3, 801829a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018290:	6860      	ldr	r0, [r4, #4]
 8018292:	6803      	ldr	r3, [r0, #0]
 8018294:	695b      	ldr	r3, [r3, #20]
 8018296:	4798      	blx	r3
 8018298:	7225      	strb	r5, [r4, #8]
 801829a:	6860      	ldr	r0, [r4, #4]
 801829c:	6803      	ldr	r3, [r0, #0]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4798      	blx	r3
 80182a2:	b928      	cbnz	r0, 80182b0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80182a4:	6823      	ldr	r3, [r4, #0]
 80182a6:	4620      	mov	r0, r4
 80182a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182ae:	4718      	bx	r3
 80182b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182b4:	f7fd b814 	b.w	80152e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080182b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80182b8:	b510      	push	{r4, lr}
 80182ba:	6082      	str	r2, [r0, #8]
 80182bc:	2200      	movs	r2, #0
 80182be:	4c03      	ldr	r4, [pc, #12]	; (80182cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80182c0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80182c4:	e9c0 4100 	strd	r4, r1, [r0]
 80182c8:	bd10      	pop	{r4, pc}
 80182ca:	bf00      	nop
 80182cc:	080296ac 	.word	0x080296ac

080182d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80182d0:	6840      	ldr	r0, [r0, #4]
 80182d2:	6803      	ldr	r3, [r0, #0]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	4718      	bx	r3

080182d8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80182d8:	2001      	movs	r0, #1
 80182da:	4770      	bx	lr

080182dc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80182dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182e0:	460d      	mov	r5, r1
 80182e2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80182e6:	b085      	sub	sp, #20
 80182e8:	4690      	mov	r8, r2
 80182ea:	4411      	add	r1, r2
 80182ec:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80182f0:	4699      	mov	r9, r3
 80182f2:	6803      	ldr	r3, [r0, #0]
 80182f4:	60c1      	str	r1, [r0, #12]
 80182f6:	4604      	mov	r4, r0
 80182f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80182fa:	440a      	add	r2, r1
 80182fc:	6102      	str	r2, [r0, #16]
 80182fe:	68db      	ldr	r3, [r3, #12]
 8018300:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8018304:	4798      	blx	r3
 8018306:	2800      	cmp	r0, #0
 8018308:	d039      	beq.n	801837e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801830a:	44c8      	add	r8, r9
 801830c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018310:	4445      	add	r5, r8
 8018312:	6823      	ldr	r3, [r4, #0]
 8018314:	f10d 020f 	add.w	r2, sp, #15
 8018318:	a903      	add	r1, sp, #12
 801831a:	4620      	mov	r0, r4
 801831c:	9200      	str	r2, [sp, #0]
 801831e:	f10d 020d 	add.w	r2, sp, #13
 8018322:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8018326:	f10d 030e 	add.w	r3, sp, #14
 801832a:	47c0      	blx	r8
 801832c:	b1f8      	cbz	r0, 801836e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801832e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018332:	7a20      	ldrb	r0, [r4, #8]
 8018334:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018338:	4358      	muls	r0, r3
 801833a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801833e:	1c43      	adds	r3, r0, #1
 8018340:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8018344:	f817 0b01 	ldrb.w	r0, [r7], #1
 8018348:	121b      	asrs	r3, r3, #8
 801834a:	fb10 f003 	smulbb	r0, r0, r3
 801834e:	b283      	uxth	r3, r0
 8018350:	1c58      	adds	r0, r3, #1
 8018352:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	1200      	asrs	r0, r0, #8
 801835a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801835e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018362:	28ff      	cmp	r0, #255	; 0xff
 8018364:	d10e      	bne.n	8018384 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8018366:	9100      	str	r1, [sp, #0]
 8018368:	4629      	mov	r1, r5
 801836a:	4620      	mov	r0, r4
 801836c:	47c0      	blx	r8
 801836e:	68e3      	ldr	r3, [r4, #12]
 8018370:	3e01      	subs	r6, #1
 8018372:	f105 0503 	add.w	r5, r5, #3
 8018376:	f103 0301 	add.w	r3, r3, #1
 801837a:	60e3      	str	r3, [r4, #12]
 801837c:	d1c9      	bne.n	8018312 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801837e:	b005      	add	sp, #20
 8018380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018384:	fa1f fc80 	uxth.w	ip, r0
 8018388:	43c0      	mvns	r0, r0
 801838a:	f895 e002 	ldrb.w	lr, [r5, #2]
 801838e:	fb12 f20c 	smulbb	r2, r2, ip
 8018392:	b2c0      	uxtb	r0, r0
 8018394:	fb13 f30c 	smulbb	r3, r3, ip
 8018398:	fb0e 2200 	mla	r2, lr, r0, r2
 801839c:	f895 e001 	ldrb.w	lr, [r5, #1]
 80183a0:	fb11 f10c 	smulbb	r1, r1, ip
 80183a4:	fb0e 3300 	mla	r3, lr, r0, r3
 80183a8:	f895 e000 	ldrb.w	lr, [r5]
 80183ac:	b292      	uxth	r2, r2
 80183ae:	b29b      	uxth	r3, r3
 80183b0:	fb0e 1000 	mla	r0, lr, r0, r1
 80183b4:	1c59      	adds	r1, r3, #1
 80183b6:	b280      	uxth	r0, r0
 80183b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80183bc:	1c51      	adds	r1, r2, #1
 80183be:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80183c2:	1c41      	adds	r1, r0, #1
 80183c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80183c8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80183cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80183d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80183d4:	9000      	str	r0, [sp, #0]
 80183d6:	e7c7      	b.n	8018368 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080183d8 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80183d8:	f89d 0000 	ldrb.w	r0, [sp]
 80183dc:	704b      	strb	r3, [r1, #1]
 80183de:	7008      	strb	r0, [r1, #0]
 80183e0:	708a      	strb	r2, [r1, #2]
 80183e2:	4770      	bx	lr

080183e4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80183e4:	4413      	add	r3, r2
 80183e6:	7dc2      	ldrb	r2, [r0, #23]
 80183e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80183ec:	4419      	add	r1, r3
 80183ee:	7a03      	ldrb	r3, [r0, #8]
 80183f0:	435a      	muls	r2, r3
 80183f2:	1c53      	adds	r3, r2, #1
 80183f4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80183f8:	121b      	asrs	r3, r3, #8
 80183fa:	2bff      	cmp	r3, #255	; 0xff
 80183fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183fe:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8018402:	d13e      	bne.n	8018482 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8018404:	4427      	add	r7, r4
 8018406:	f814 3b01 	ldrb.w	r3, [r4], #1
 801840a:	3103      	adds	r1, #3
 801840c:	7d86      	ldrb	r6, [r0, #22]
 801840e:	2bff      	cmp	r3, #255	; 0xff
 8018410:	d10a      	bne.n	8018428 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8018412:	f801 6c03 	strb.w	r6, [r1, #-3]
 8018416:	7d43      	ldrb	r3, [r0, #21]
 8018418:	f801 3c02 	strb.w	r3, [r1, #-2]
 801841c:	7d03      	ldrb	r3, [r0, #20]
 801841e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8018422:	42a7      	cmp	r7, r4
 8018424:	d1ef      	bne.n	8018406 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8018426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018428:	b29a      	uxth	r2, r3
 801842a:	43db      	mvns	r3, r3
 801842c:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8018430:	fb16 f602 	smulbb	r6, r6, r2
 8018434:	b2db      	uxtb	r3, r3
 8018436:	fb05 6503 	mla	r5, r5, r3, r6
 801843a:	b2ad      	uxth	r5, r5
 801843c:	1c6e      	adds	r6, r5, #1
 801843e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8018442:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8018446:	fb16 f603 	smulbb	r6, r6, r3
 801844a:	122d      	asrs	r5, r5, #8
 801844c:	f801 5c03 	strb.w	r5, [r1, #-3]
 8018450:	7d45      	ldrb	r5, [r0, #21]
 8018452:	fb05 6502 	mla	r5, r5, r2, r6
 8018456:	b2ad      	uxth	r5, r5
 8018458:	1c6e      	adds	r6, r5, #1
 801845a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801845e:	122d      	asrs	r5, r5, #8
 8018460:	f801 5c02 	strb.w	r5, [r1, #-2]
 8018464:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018468:	7d06      	ldrb	r6, [r0, #20]
 801846a:	fb15 f303 	smulbb	r3, r5, r3
 801846e:	fb06 3202 	mla	r2, r6, r2, r3
 8018472:	b292      	uxth	r2, r2
 8018474:	1c53      	adds	r3, r2, #1
 8018476:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801847a:	1212      	asrs	r2, r2, #8
 801847c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8018480:	e7cf      	b.n	8018422 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8018482:	b2de      	uxtb	r6, r3
 8018484:	2b00      	cmp	r3, #0
 8018486:	d0ce      	beq.n	8018426 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8018488:	3103      	adds	r1, #3
 801848a:	4427      	add	r7, r4
 801848c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8018490:	3103      	adds	r1, #3
 8018492:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8018496:	fb02 f306 	mul.w	r3, r2, r6
 801849a:	42bc      	cmp	r4, r7
 801849c:	f103 0201 	add.w	r2, r3, #1
 80184a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80184a4:	ea4f 2222 	mov.w	r2, r2, asr #8
 80184a8:	b295      	uxth	r5, r2
 80184aa:	ea6f 0202 	mvn.w	r2, r2
 80184ae:	b2d3      	uxtb	r3, r2
 80184b0:	7d82      	ldrb	r2, [r0, #22]
 80184b2:	fb1c fc03 	smulbb	ip, ip, r3
 80184b6:	fb02 c205 	mla	r2, r2, r5, ip
 80184ba:	b292      	uxth	r2, r2
 80184bc:	f102 0c01 	add.w	ip, r2, #1
 80184c0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80184c4:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80184c8:	fb1c fc03 	smulbb	ip, ip, r3
 80184cc:	ea4f 2222 	mov.w	r2, r2, asr #8
 80184d0:	f801 2c06 	strb.w	r2, [r1, #-6]
 80184d4:	7d42      	ldrb	r2, [r0, #21]
 80184d6:	fb02 c205 	mla	r2, r2, r5, ip
 80184da:	b292      	uxth	r2, r2
 80184dc:	f102 0c01 	add.w	ip, r2, #1
 80184e0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80184e4:	ea4f 2222 	mov.w	r2, r2, asr #8
 80184e8:	f801 2c05 	strb.w	r2, [r1, #-5]
 80184ec:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80184f0:	f890 c014 	ldrb.w	ip, [r0, #20]
 80184f4:	fb12 f303 	smulbb	r3, r2, r3
 80184f8:	fb0c 3305 	mla	r3, ip, r5, r3
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	f103 0201 	add.w	r2, r3, #1
 8018502:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018506:	ea4f 2323 	mov.w	r3, r3, asr #8
 801850a:	f801 3c04 	strb.w	r3, [r1, #-4]
 801850e:	d1bd      	bne.n	801848c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8018510:	e789      	b.n	8018426 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08018512 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8018512:	b510      	push	{r4, lr}
 8018514:	7d04      	ldrb	r4, [r0, #20]
 8018516:	700c      	strb	r4, [r1, #0]
 8018518:	7d41      	ldrb	r1, [r0, #21]
 801851a:	7011      	strb	r1, [r2, #0]
 801851c:	7d82      	ldrb	r2, [r0, #22]
 801851e:	701a      	strb	r2, [r3, #0]
 8018520:	9b02      	ldr	r3, [sp, #8]
 8018522:	7dc2      	ldrb	r2, [r0, #23]
 8018524:	2001      	movs	r0, #1
 8018526:	701a      	strb	r2, [r3, #0]
 8018528:	bd10      	pop	{r4, pc}

0801852a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801852a:	b570      	push	{r4, r5, r6, lr}
 801852c:	4616      	mov	r6, r2
 801852e:	4604      	mov	r4, r0
 8018530:	460d      	mov	r5, r1
 8018532:	f7f7 fd29 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8018536:	6803      	ldr	r3, [r0, #0]
 8018538:	4629      	mov	r1, r5
 801853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801853c:	4798      	blx	r3
 801853e:	7520      	strb	r0, [r4, #20]
 8018540:	f7f7 fd22 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8018544:	6803      	ldr	r3, [r0, #0]
 8018546:	4629      	mov	r1, r5
 8018548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801854a:	4798      	blx	r3
 801854c:	7560      	strb	r0, [r4, #21]
 801854e:	f7f7 fd1b 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8018552:	6803      	ldr	r3, [r0, #0]
 8018554:	4629      	mov	r1, r5
 8018556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018558:	4798      	blx	r3
 801855a:	75e6      	strb	r6, [r4, #23]
 801855c:	75a0      	strb	r0, [r4, #22]
 801855e:	bd70      	pop	{r4, r5, r6, pc}

08018560 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8018560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018562:	460e      	mov	r6, r1
 8018564:	4617      	mov	r7, r2
 8018566:	4604      	mov	r4, r0
 8018568:	f000 f832 	bl	80185d0 <_ZN8touchgfx15AbstractPainterC1Ev>
 801856c:	4b12      	ldr	r3, [pc, #72]	; (80185b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801856e:	6023      	str	r3, [r4, #0]
 8018570:	f7f7 fd0a 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8018574:	6803      	ldr	r3, [r0, #0]
 8018576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018578:	4798      	blx	r3
 801857a:	1e43      	subs	r3, r0, #1
 801857c:	425d      	negs	r5, r3
 801857e:	415d      	adcs	r5, r3
 8018580:	4b0e      	ldr	r3, [pc, #56]	; (80185bc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018586:	b130      	cbz	r0, 8018596 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8018588:	6803      	ldr	r3, [r0, #0]
 801858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801858c:	4798      	blx	r3
 801858e:	2801      	cmp	r0, #1
 8018590:	bf08      	it	eq
 8018592:	f045 0501 	orreq.w	r5, r5, #1
 8018596:	b92d      	cbnz	r5, 80185a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8018598:	4b09      	ldr	r3, [pc, #36]	; (80185c0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801859a:	2129      	movs	r1, #41	; 0x29
 801859c:	4a09      	ldr	r2, [pc, #36]	; (80185c4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801859e:	480a      	ldr	r0, [pc, #40]	; (80185c8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 80185a0:	f00e f834 	bl	802660c <__assert_func>
 80185a4:	4b09      	ldr	r3, [pc, #36]	; (80185cc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 80185a6:	4620      	mov	r0, r4
 80185a8:	463a      	mov	r2, r7
 80185aa:	4631      	mov	r1, r6
 80185ac:	6023      	str	r3, [r4, #0]
 80185ae:	f7ff ffbc 	bl	801852a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80185b2:	4620      	mov	r0, r4
 80185b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185b6:	bf00      	nop
 80185b8:	08029780 	.word	0x08029780
 80185bc:	2000c63c 	.word	0x2000c63c
 80185c0:	08029798 	.word	0x08029798
 80185c4:	0802985c 	.word	0x0802985c
 80185c8:	080297f6 	.word	0x080297f6
 80185cc:	08029844 	.word	0x08029844

080185d0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80185d0:	4a03      	ldr	r2, [pc, #12]	; (80185e0 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80185d2:	6002      	str	r2, [r0, #0]
 80185d4:	2200      	movs	r2, #0
 80185d6:	6042      	str	r2, [r0, #4]
 80185d8:	22ff      	movs	r2, #255	; 0xff
 80185da:	7202      	strb	r2, [r0, #8]
 80185dc:	4770      	bx	lr
 80185de:	bf00      	nop
 80185e0:	080298a0 	.word	0x080298a0

080185e4 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80185e4:	4770      	bx	lr

080185e6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80185e6:	8081      	strh	r1, [r0, #4]
 80185e8:	80c2      	strh	r2, [r0, #6]
 80185ea:	4770      	bx	lr

080185ec <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80185ec:	7201      	strb	r1, [r0, #8]
 80185ee:	4770      	bx	lr

080185f0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80185f0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80185f4:	4770      	bx	lr

080185f6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80185f6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80185fa:	4770      	bx	lr

080185fc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80185fc:	6281      	str	r1, [r0, #40]	; 0x28
 80185fe:	4770      	bx	lr

08018600 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8018600:	b513      	push	{r0, r1, r4, lr}
 8018602:	6803      	ldr	r3, [r0, #0]
 8018604:	4604      	mov	r4, r0
 8018606:	4601      	mov	r1, r0
 8018608:	4668      	mov	r0, sp
 801860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801860c:	4798      	blx	r3
 801860e:	6823      	ldr	r3, [r4, #0]
 8018610:	4669      	mov	r1, sp
 8018612:	4620      	mov	r0, r4
 8018614:	691b      	ldr	r3, [r3, #16]
 8018616:	4798      	blx	r3
 8018618:	b002      	add	sp, #8
 801861a:	bd10      	pop	{r4, pc}

0801861c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801861c:	b510      	push	{r4, lr}
 801861e:	2200      	movs	r2, #0
 8018620:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018624:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8018628:	8002      	strh	r2, [r0, #0]
 801862a:	8042      	strh	r2, [r0, #2]
 801862c:	8084      	strh	r4, [r0, #4]
 801862e:	80c1      	strh	r1, [r0, #6]
 8018630:	bd10      	pop	{r4, pc}

08018632 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018632:	2200      	movs	r2, #0
 8018634:	8002      	strh	r2, [r0, #0]
 8018636:	8042      	strh	r2, [r0, #2]
 8018638:	8082      	strh	r2, [r0, #4]
 801863a:	80c2      	strh	r2, [r0, #6]
 801863c:	4770      	bx	lr
	...

08018640 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8018640:	b508      	push	{r3, lr}
 8018642:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018644:	b928      	cbnz	r0, 8018652 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8018646:	4b03      	ldr	r3, [pc, #12]	; (8018654 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8018648:	2127      	movs	r1, #39	; 0x27
 801864a:	4a03      	ldr	r2, [pc, #12]	; (8018658 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801864c:	4803      	ldr	r0, [pc, #12]	; (801865c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801864e:	f00d ffdd 	bl	802660c <__assert_func>
 8018652:	bd08      	pop	{r3, pc}
 8018654:	080298ac 	.word	0x080298ac
 8018658:	08029990 	.word	0x08029990
 801865c:	080298d3 	.word	0x080298d3

08018660 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018664:	b089      	sub	sp, #36	; 0x24
 8018666:	4604      	mov	r4, r0
 8018668:	6808      	ldr	r0, [r1, #0]
 801866a:	f04f 0a00 	mov.w	sl, #0
 801866e:	6849      	ldr	r1, [r1, #4]
 8018670:	ab02      	add	r3, sp, #8
 8018672:	f04f 0b01 	mov.w	fp, #1
 8018676:	c303      	stmia	r3!, {r0, r1}
 8018678:	4b3f      	ldr	r3, [pc, #252]	; (8018778 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801867a:	4621      	mov	r1, r4
 801867c:	a804      	add	r0, sp, #16
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	2b01      	cmp	r3, #1
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018686:	bf1f      	itttt	ne
 8018688:	f10d 0906 	addne.w	r9, sp, #6
 801868c:	ae03      	addne	r6, sp, #12
 801868e:	f10d 050e 	addne.w	r5, sp, #14
 8018692:	f10d 080a 	addne.w	r8, sp, #10
 8018696:	bf01      	itttt	eq
 8018698:	f10d 090e 	addeq.w	r9, sp, #14
 801869c:	f10d 0606 	addeq.w	r6, sp, #6
 80186a0:	ad03      	addeq	r5, sp, #12
 80186a2:	f10d 0808 	addeq.w	r8, sp, #8
 80186a6:	4798      	blx	r3
 80186a8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80186ac:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d056      	beq.n	8018762 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80186b4:	4293      	cmp	r3, r2
 80186b6:	bfa8      	it	ge
 80186b8:	4613      	movge	r3, r2
 80186ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80186be:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80186c2:	2f00      	cmp	r7, #0
 80186c4:	dd34      	ble.n	8018730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80186c6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80186ca:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80186ce:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80186d2:	4484      	add	ip, r0
 80186d4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80186d8:	f9b6 e000 	ldrsh.w	lr, [r6]
 80186dc:	fa0f fc8c 	sxth.w	ip, ip
 80186e0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80186e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80186e8:	4562      	cmp	r2, ip
 80186ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80186ee:	f8ad e01c 	strh.w	lr, [sp, #28]
 80186f2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80186f6:	da29      	bge.n	801874c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80186f8:	4472      	add	r2, lr
 80186fa:	b212      	sxth	r2, r2
 80186fc:	4290      	cmp	r0, r2
 80186fe:	da25      	bge.n	801874c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018700:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8018704:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018708:	4402      	add	r2, r0
 801870a:	b212      	sxth	r2, r2
 801870c:	4293      	cmp	r3, r2
 801870e:	da1d      	bge.n	801874c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018710:	440b      	add	r3, r1
 8018712:	b21b      	sxth	r3, r3
 8018714:	4298      	cmp	r0, r3
 8018716:	da19      	bge.n	801874c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018718:	6823      	ldr	r3, [r4, #0]
 801871a:	a906      	add	r1, sp, #24
 801871c:	4620      	mov	r0, r4
 801871e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018720:	4798      	blx	r3
 8018722:	b998      	cbnz	r0, 801874c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018724:	107f      	asrs	r7, r7, #1
 8018726:	f04f 0a01 	mov.w	sl, #1
 801872a:	f8ad 7006 	strh.w	r7, [sp, #6]
 801872e:	e7c6      	b.n	80186be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018730:	d10c      	bne.n	801874c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018732:	f8ad b006 	strh.w	fp, [sp, #6]
 8018736:	f8b8 2000 	ldrh.w	r2, [r8]
 801873a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801873e:	440a      	add	r2, r1
 8018740:	f8a8 2000 	strh.w	r2, [r8]
 8018744:	882b      	ldrh	r3, [r5, #0]
 8018746:	1a5b      	subs	r3, r3, r1
 8018748:	802b      	strh	r3, [r5, #0]
 801874a:	e7ad      	b.n	80186a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801874c:	f1ba 0f00 	cmp.w	sl, #0
 8018750:	d0f1      	beq.n	8018736 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8018752:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018756:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801875a:	429a      	cmp	r2, r3
 801875c:	bf08      	it	eq
 801875e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8018760:	e7e9      	b.n	8018736 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8018762:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018766:	429a      	cmp	r2, r3
 8018768:	bf04      	itt	eq
 801876a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801876e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8018770:	b009      	add	sp, #36	; 0x24
 8018772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018776:	bf00      	nop
 8018778:	2000c634 	.word	0x2000c634

0801877c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801877c:	2200      	movs	r2, #0
 801877e:	2101      	movs	r1, #1
 8018780:	8082      	strh	r2, [r0, #4]
 8018782:	80c2      	strh	r2, [r0, #6]
 8018784:	8102      	strh	r2, [r0, #8]
 8018786:	8142      	strh	r2, [r0, #10]
 8018788:	8182      	strh	r2, [r0, #12]
 801878a:	81c2      	strh	r2, [r0, #14]
 801878c:	8202      	strh	r2, [r0, #16]
 801878e:	8242      	strh	r2, [r0, #18]
 8018790:	61c2      	str	r2, [r0, #28]
 8018792:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8018796:	6282      	str	r2, [r0, #40]	; 0x28
 8018798:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801879c:	4905      	ldr	r1, [pc, #20]	; (80187b4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801879e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80187a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80187a6:	6001      	str	r1, [r0, #0]
 80187a8:	8582      	strh	r2, [r0, #44]	; 0x2c
 80187aa:	22ff      	movs	r2, #255	; 0xff
 80187ac:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80187b0:	4770      	bx	lr
 80187b2:	bf00      	nop
 80187b4:	08029918 	.word	0x08029918

080187b8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80187b8:	4770      	bx	lr

080187ba <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80187ba:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80187be:	4602      	mov	r2, r0
 80187c0:	cb03      	ldmia	r3!, {r0, r1}
 80187c2:	6010      	str	r0, [r2, #0]
 80187c4:	4610      	mov	r0, r2
 80187c6:	6051      	str	r1, [r2, #4]
 80187c8:	4770      	bx	lr

080187ca <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80187ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ce:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80187d2:	b395      	cbz	r5, 801883a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80187d4:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80187d8:	f1bc 0f00 	cmp.w	ip, #0
 80187dc:	d02d      	beq.n	801883a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80187de:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80187e2:	f9b1 e000 	ldrsh.w	lr, [r1]
 80187e6:	b354      	cbz	r4, 801883e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80187e8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80187ec:	b33f      	cbz	r7, 801883e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80187ee:	f9b0 8000 	ldrsh.w	r8, [r0]
 80187f2:	4475      	add	r5, lr
 80187f4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80187f8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80187fc:	45f0      	cmp	r8, lr
 80187fe:	4646      	mov	r6, r8
 8018800:	4444      	add	r4, r8
 8018802:	bfa8      	it	ge
 8018804:	4676      	movge	r6, lr
 8018806:	4293      	cmp	r3, r2
 8018808:	4619      	mov	r1, r3
 801880a:	443b      	add	r3, r7
 801880c:	bfa8      	it	ge
 801880e:	4611      	movge	r1, r2
 8018810:	4462      	add	r2, ip
 8018812:	b22d      	sxth	r5, r5
 8018814:	8006      	strh	r6, [r0, #0]
 8018816:	b224      	sxth	r4, r4
 8018818:	8041      	strh	r1, [r0, #2]
 801881a:	b212      	sxth	r2, r2
 801881c:	b21b      	sxth	r3, r3
 801881e:	42a5      	cmp	r5, r4
 8018820:	bfac      	ite	ge
 8018822:	ebc6 0405 	rsbge	r4, r6, r5
 8018826:	ebc6 0404 	rsblt	r4, r6, r4
 801882a:	429a      	cmp	r2, r3
 801882c:	bfac      	ite	ge
 801882e:	ebc1 0302 	rsbge	r3, r1, r2
 8018832:	ebc1 0303 	rsblt	r3, r1, r3
 8018836:	8084      	strh	r4, [r0, #4]
 8018838:	80c3      	strh	r3, [r0, #6]
 801883a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801883e:	f8a0 e000 	strh.w	lr, [r0]
 8018842:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018846:	8043      	strh	r3, [r0, #2]
 8018848:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801884c:	8083      	strh	r3, [r0, #4]
 801884e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018852:	e7f1      	b.n	8018838 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08018854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018854:	b507      	push	{r0, r1, r2, lr}
 8018856:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801885a:	ab01      	add	r3, sp, #4
 801885c:	6809      	ldr	r1, [r1, #0]
 801885e:	6800      	ldr	r0, [r0, #0]
 8018860:	f002 fc4f 	bl	801b102 <_ZN8touchgfx6muldivElllRl>
 8018864:	b003      	add	sp, #12
 8018866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801886c <_ZN8touchgfx7CWRUtil4sineEi>:
 801886c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018870:	fb90 f3f2 	sdiv	r3, r0, r2
 8018874:	fb03 0312 	mls	r3, r3, r2, r0
 8018878:	4413      	add	r3, r2
 801887a:	fb93 f0f2 	sdiv	r0, r3, r2
 801887e:	fb02 3010 	mls	r0, r2, r0, r3
 8018882:	4b0a      	ldr	r3, [pc, #40]	; (80188ac <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8018884:	285a      	cmp	r0, #90	; 0x5a
 8018886:	dc02      	bgt.n	801888e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8018888:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801888c:	4770      	bx	lr
 801888e:	28b4      	cmp	r0, #180	; 0xb4
 8018890:	dc02      	bgt.n	8018898 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8018892:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018896:	e7f7      	b.n	8018888 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8018898:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801889c:	bfd4      	ite	le
 801889e:	38b4      	suble	r0, #180	; 0xb4
 80188a0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80188a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80188a8:	4240      	negs	r0, r0
 80188aa:	4770      	bx	lr
 80188ac:	08029a3a 	.word	0x08029a3a

080188b0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80188b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80188b4:	f04f 0300 	mov.w	r3, #0
 80188b8:	bf2c      	ite	cs
 80188ba:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80188be:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80188c2:	1899      	adds	r1, r3, r2
 80188c4:	4288      	cmp	r0, r1
 80188c6:	bf24      	itt	cs
 80188c8:	1853      	addcs	r3, r2, r1
 80188ca:	1a40      	subcs	r0, r0, r1
 80188cc:	0892      	lsrs	r2, r2, #2
 80188ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80188d2:	d1f6      	bne.n	80188c2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80188d4:	4618      	mov	r0, r3
 80188d6:	4770      	bx	lr

080188d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80188d8:	2800      	cmp	r0, #0
 80188da:	b508      	push	{r3, lr}
 80188dc:	da05      	bge.n	80188ea <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80188de:	4240      	negs	r0, r0
 80188e0:	f7ff fffa 	bl	80188d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80188e4:	4240      	negs	r0, r0
 80188e6:	b240      	sxtb	r0, r0
 80188e8:	bd08      	pop	{r3, pc}
 80188ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80188ee:	dc11      	bgt.n	8018914 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80188f0:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80188f4:	dd09      	ble.n	801890a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80188f6:	4340      	muls	r0, r0
 80188f8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80188fc:	f7ff ffd8 	bl	80188b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018900:	f7ff ffea 	bl	80188d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018904:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018908:	e7ed      	b.n	80188e6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801890a:	3003      	adds	r0, #3
 801890c:	4b02      	ldr	r3, [pc, #8]	; (8018918 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801890e:	10c0      	asrs	r0, r0, #3
 8018910:	5618      	ldrsb	r0, [r3, r0]
 8018912:	e7e9      	b.n	80188e8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018914:	2000      	movs	r0, #0
 8018916:	e7e7      	b.n	80188e8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018918:	080299de 	.word	0x080299de

0801891c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801891c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801891e:	460c      	mov	r4, r1
 8018920:	1e01      	subs	r1, r0, #0
 8018922:	4615      	mov	r5, r2
 8018924:	db01      	blt.n	801892a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8018926:	2c00      	cmp	r4, #0
 8018928:	da06      	bge.n	8018938 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801892a:	4b11      	ldr	r3, [pc, #68]	; (8018970 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801892c:	f240 3197 	movw	r1, #919	; 0x397
 8018930:	4a10      	ldr	r2, [pc, #64]	; (8018974 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8018932:	4811      	ldr	r0, [pc, #68]	; (8018978 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8018934:	f00d fe6a 	bl	802660c <__assert_func>
 8018938:	428c      	cmp	r4, r1
 801893a:	dd06      	ble.n	801894a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801893c:	4620      	mov	r0, r4
 801893e:	f7ff ffed 	bl	801891c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018942:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018946:	b003      	add	sp, #12
 8018948:	bd30      	pop	{r4, r5, pc}
 801894a:	4349      	muls	r1, r1
 801894c:	fb04 1004 	mla	r0, r4, r4, r1
 8018950:	f7ff ffae 	bl	80188b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018954:	6028      	str	r0, [r5, #0]
 8018956:	2800      	cmp	r0, #0
 8018958:	d0f5      	beq.n	8018946 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801895a:	4602      	mov	r2, r0
 801895c:	ab01      	add	r3, sp, #4
 801895e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018962:	4620      	mov	r0, r4
 8018964:	f002 fbcd 	bl	801b102 <_ZN8touchgfx6muldivElllRl>
 8018968:	f7ff ffb6 	bl	80188d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801896c:	e7eb      	b.n	8018946 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801896e:	bf00      	nop
 8018970:	08029af0 	.word	0x08029af0
 8018974:	08029bb8 	.word	0x08029bb8
 8018978:	08029b01 	.word	0x08029b01

0801897c <_ZN8touchgfx4LineC1Ev>:
 801897c:	b510      	push	{r4, lr}
 801897e:	4604      	mov	r4, r0
 8018980:	f7ff fefc 	bl	801877c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018984:	4b0c      	ldr	r3, [pc, #48]	; (80189b8 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8018986:	2220      	movs	r2, #32
 8018988:	4620      	mov	r0, r4
 801898a:	6023      	str	r3, [r4, #0]
 801898c:	2300      	movs	r3, #0
 801898e:	6422      	str	r2, [r4, #64]	; 0x40
 8018990:	2212      	movs	r2, #18
 8018992:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8018996:	6722      	str	r2, [r4, #112]	; 0x70
 8018998:	60a3      	str	r3, [r4, #8]
 801899a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801899e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80189a2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80189a6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80189aa:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80189ae:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80189b2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80189b6:	bd10      	pop	{r4, pc}
 80189b8:	08029b40 	.word	0x08029b40

080189bc <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80189bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80189c2:	b085      	sub	sp, #20
 80189c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80189c6:	4604      	mov	r4, r0
 80189c8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80189ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80189cc:	1af6      	subs	r6, r6, r3
 80189ce:	eba5 0502 	sub.w	r5, r5, r2
 80189d2:	f040 809b 	bne.w	8018b0c <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80189d6:	b955      	cbnz	r5, 80189ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80189d8:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80189dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80189e0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80189e4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80189e8:	b005      	add	sp, #20
 80189ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ee:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80189f2:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80189f6:	f04f 0802 	mov.w	r8, #2
 80189fa:	463a      	mov	r2, r7
 80189fc:	4629      	mov	r1, r5
 80189fe:	ab03      	add	r3, sp, #12
 8018a00:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018a02:	f002 fb7e 	bl	801b102 <_ZN8touchgfx6muldivElllRl>
 8018a06:	ab03      	add	r3, sp, #12
 8018a08:	463a      	mov	r2, r7
 8018a0a:	4631      	mov	r1, r6
 8018a0c:	fb90 f5f8 	sdiv	r5, r0, r8
 8018a10:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018a12:	f002 fb76 	bl	801b102 <_ZN8touchgfx6muldivElllRl>
 8018a16:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8018a1a:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8018a1e:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8018a22:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8018a24:	fb90 f0f8 	sdiv	r0, r0, r8
 8018a28:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8018a2c:	eba8 0305 	sub.w	r3, r8, r5
 8018a30:	f1ba 0f00 	cmp.w	sl, #0
 8018a34:	f040 80c3 	bne.w	8018bbe <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8018a38:	64a3      	str	r3, [r4, #72]	; 0x48
 8018a3a:	19c3      	adds	r3, r0, r7
 8018a3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8018a3e:	ebae 0305 	sub.w	r3, lr, r5
 8018a42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018a44:	eb00 030c 	add.w	r3, r0, ip
 8018a48:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018a4a:	eb05 030e 	add.w	r3, r5, lr
 8018a4e:	6523      	str	r3, [r4, #80]	; 0x50
 8018a50:	ebac 0300 	sub.w	r3, ip, r0
 8018a54:	6623      	str	r3, [r4, #96]	; 0x60
 8018a56:	eb05 0308 	add.w	r3, r5, r8
 8018a5a:	6563      	str	r3, [r4, #84]	; 0x54
 8018a5c:	1a3b      	subs	r3, r7, r0
 8018a5e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8018a60:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8018a64:	6663      	str	r3, [r4, #100]	; 0x64
 8018a66:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8018a6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018a6c:	4632      	mov	r2, r6
 8018a6e:	9301      	str	r3, [sp, #4]
 8018a70:	9100      	str	r1, [sp, #0]
 8018a72:	f859 bb04 	ldr.w	fp, [r9], #4
 8018a76:	9b00      	ldr	r3, [sp, #0]
 8018a78:	455e      	cmp	r6, fp
 8018a7a:	bfa8      	it	ge
 8018a7c:	465e      	movge	r6, fp
 8018a7e:	455a      	cmp	r2, fp
 8018a80:	bfb8      	it	lt
 8018a82:	465a      	movlt	r2, fp
 8018a84:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8018a88:	4559      	cmp	r1, fp
 8018a8a:	bfa8      	it	ge
 8018a8c:	4659      	movge	r1, fp
 8018a8e:	455b      	cmp	r3, fp
 8018a90:	bfb8      	it	lt
 8018a92:	465b      	movlt	r3, fp
 8018a94:	9300      	str	r3, [sp, #0]
 8018a96:	9b01      	ldr	r3, [sp, #4]
 8018a98:	454b      	cmp	r3, r9
 8018a9a:	d1ea      	bne.n	8018a72 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8018a9c:	f04f 0b20 	mov.w	fp, #32
 8018aa0:	b209      	sxth	r1, r1
 8018aa2:	b212      	sxth	r2, r2
 8018aa4:	f1ba 0f01 	cmp.w	sl, #1
 8018aa8:	b236      	sxth	r6, r6
 8018aaa:	fb91 f9fb 	sdiv	r9, r1, fp
 8018aae:	f9bd 1000 	ldrsh.w	r1, [sp]
 8018ab2:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8018ab6:	fb92 f2fb 	sdiv	r2, r2, fp
 8018aba:	fb91 f1fb 	sdiv	r1, r1, fp
 8018abe:	fb96 f6fb 	sdiv	r6, r6, fp
 8018ac2:	f102 0201 	add.w	r2, r2, #1
 8018ac6:	f101 0101 	add.w	r1, r1, #1
 8018aca:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8018ace:	eba1 0109 	sub.w	r1, r1, r9
 8018ad2:	eba2 0606 	sub.w	r6, r2, r6
 8018ad6:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8018ada:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8018ade:	d183      	bne.n	80189e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018ae0:	eba8 0305 	sub.w	r3, r8, r5
 8018ae4:	64a3      	str	r3, [r4, #72]	; 0x48
 8018ae6:	19c3      	adds	r3, r0, r7
 8018ae8:	65a3      	str	r3, [r4, #88]	; 0x58
 8018aea:	ebae 0305 	sub.w	r3, lr, r5
 8018aee:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018af0:	eb00 030c 	add.w	r3, r0, ip
 8018af4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018af6:	eb05 030e 	add.w	r3, r5, lr
 8018afa:	4445      	add	r5, r8
 8018afc:	6523      	str	r3, [r4, #80]	; 0x50
 8018afe:	ebac 0300 	sub.w	r3, ip, r0
 8018b02:	1a38      	subs	r0, r7, r0
 8018b04:	6565      	str	r5, [r4, #84]	; 0x54
 8018b06:	6623      	str	r3, [r4, #96]	; 0x60
 8018b08:	6660      	str	r0, [r4, #100]	; 0x64
 8018b0a:	e76d      	b.n	80189e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018b0c:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8018b10:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8018b14:	2d00      	cmp	r5, #0
 8018b16:	f43f af6e 	beq.w	80189f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8018b1a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8018b1e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8018b22:	fb93 f2f7 	sdiv	r2, r3, r7
 8018b26:	fb07 3312 	mls	r3, r7, r2, r3
 8018b2a:	b34b      	cbz	r3, 8018b80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8018b2c:	fb97 f2f3 	sdiv	r2, r7, r3
 8018b30:	fb03 7712 	mls	r7, r3, r2, r7
 8018b34:	2f00      	cmp	r7, #0
 8018b36:	d1f4      	bne.n	8018b22 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8018b38:	2b01      	cmp	r3, #1
 8018b3a:	f24b 5204 	movw	r2, #46340	; 0xb504
 8018b3e:	bf18      	it	ne
 8018b40:	fb96 f6f3 	sdivne	r6, r6, r3
 8018b44:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8018b48:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8018b4c:	bf18      	it	ne
 8018b4e:	fb95 f5f3 	sdivne	r5, r5, r3
 8018b52:	4291      	cmp	r1, r2
 8018b54:	dd16      	ble.n	8018b84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8018b56:	2d00      	cmp	r5, #0
 8018b58:	da4d      	bge.n	8018bf6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8018b5a:	4b29      	ldr	r3, [pc, #164]	; (8018c00 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8018b5c:	429d      	cmp	r5, r3
 8018b5e:	da27      	bge.n	8018bb0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8018b60:	426a      	negs	r2, r5
 8018b62:	f24b 5304 	movw	r3, #46340	; 0xb504
 8018b66:	fb91 f1f3 	sdiv	r1, r1, r3
 8018b6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b6e:	4299      	cmp	r1, r3
 8018b70:	bfcc      	ite	gt
 8018b72:	1c4b      	addgt	r3, r1, #1
 8018b74:	3301      	addle	r3, #1
 8018b76:	fb96 f6f3 	sdiv	r6, r6, r3
 8018b7a:	fb95 f5f3 	sdiv	r5, r5, r3
 8018b7e:	e00f      	b.n	8018ba0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8018b80:	463b      	mov	r3, r7
 8018b82:	e7d9      	b.n	8018b38 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8018b84:	2d00      	cmp	r5, #0
 8018b86:	fb92 f2f1 	sdiv	r2, r2, r1
 8018b8a:	da13      	bge.n	8018bb4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8018b8c:	4269      	negs	r1, r5
 8018b8e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8018b92:	fb93 f3f1 	sdiv	r3, r3, r1
 8018b96:	429a      	cmp	r2, r3
 8018b98:	bfa8      	it	ge
 8018b9a:	461a      	movge	r2, r3
 8018b9c:	4356      	muls	r6, r2
 8018b9e:	4355      	muls	r5, r2
 8018ba0:	fb05 f005 	mul.w	r0, r5, r5
 8018ba4:	fb06 0006 	mla	r0, r6, r6, r0
 8018ba8:	f7ff fe82 	bl	80188b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018bac:	4607      	mov	r7, r0
 8018bae:	e722      	b.n	80189f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	e7eb      	b.n	8018b8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8018bb4:	4629      	mov	r1, r5
 8018bb6:	e7ea      	b.n	8018b8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8018bb8:	4629      	mov	r1, r5
 8018bba:	2200      	movs	r2, #0
 8018bbc:	e7e7      	b.n	8018b8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8018bbe:	1a1b      	subs	r3, r3, r0
 8018bc0:	64a3      	str	r3, [r4, #72]	; 0x48
 8018bc2:	19c3      	adds	r3, r0, r7
 8018bc4:	1b5b      	subs	r3, r3, r5
 8018bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8018bc8:	ebae 0305 	sub.w	r3, lr, r5
 8018bcc:	4403      	add	r3, r0
 8018bce:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018bd0:	eb00 030c 	add.w	r3, r0, ip
 8018bd4:	442b      	add	r3, r5
 8018bd6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018bd8:	eb05 030e 	add.w	r3, r5, lr
 8018bdc:	4403      	add	r3, r0
 8018bde:	6523      	str	r3, [r4, #80]	; 0x50
 8018be0:	ebac 0300 	sub.w	r3, ip, r0
 8018be4:	442b      	add	r3, r5
 8018be6:	6623      	str	r3, [r4, #96]	; 0x60
 8018be8:	eb05 0308 	add.w	r3, r5, r8
 8018bec:	1a1b      	subs	r3, r3, r0
 8018bee:	6563      	str	r3, [r4, #84]	; 0x54
 8018bf0:	1a3b      	subs	r3, r7, r0
 8018bf2:	1b5b      	subs	r3, r3, r5
 8018bf4:	e733      	b.n	8018a5e <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8018bf6:	4295      	cmp	r5, r2
 8018bf8:	ddde      	ble.n	8018bb8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8018bfa:	462a      	mov	r2, r5
 8018bfc:	e7b1      	b.n	8018b62 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8018bfe:	bf00      	nop
 8018c00:	ffff4afc 	.word	0xffff4afc

08018c04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8018c04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018c06:	428b      	cmp	r3, r1
 8018c08:	d102      	bne.n	8018c10 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8018c0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d003      	beq.n	8018c18 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8018c10:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8018c14:	f7ff bed2 	b.w	80189bc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018c18:	4770      	bx	lr

08018c1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8018c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018c1c:	428b      	cmp	r3, r1
 8018c1e:	d102      	bne.n	8018c26 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8018c20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018c22:	4293      	cmp	r3, r2
 8018c24:	d003      	beq.n	8018c2e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8018c26:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8018c2a:	f7ff bec7 	b.w	80189bc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018c2e:	4770      	bx	lr

08018c30 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8018c30:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8018c34:	f7ff bec2 	b.w	80189bc <_ZN8touchgfx4Line17updateCachedShapeEv>

08018c38 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8018c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c3c:	b0b3      	sub	sp, #204	; 0xcc
 8018c3e:	4604      	mov	r4, r0
 8018c40:	460a      	mov	r2, r1
 8018c42:	4601      	mov	r1, r0
 8018c44:	a804      	add	r0, sp, #16
 8018c46:	ad32      	add	r5, sp, #200	; 0xc8
 8018c48:	f00c f914 	bl	8024e74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8018c50:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8018c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018c56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018c58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018c5a:	1ac0      	subs	r0, r0, r3
 8018c5c:	eba1 0102 	sub.w	r1, r1, r2
 8018c60:	d43c      	bmi.n	8018cdc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8018c62:	2900      	cmp	r1, #0
 8018c64:	462a      	mov	r2, r5
 8018c66:	db33      	blt.n	8018cd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8018c68:	f7ff fe58 	bl	801891c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018c6c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8018c70:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8018c72:	a804      	add	r0, sp, #16
 8018c74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018c76:	f00c fac6 	bl	8025206 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018c7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8018c7c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018c7e:	a804      	add	r0, sp, #16
 8018c80:	f00c fa50 	bl	8025124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018c84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018c88:	2b01      	cmp	r3, #1
 8018c8a:	d137      	bne.n	8018cfc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8018c8c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8018c8e:	2eb3      	cmp	r6, #179	; 0xb3
 8018c90:	dc34      	bgt.n	8018cfc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8018c92:	eba7 0906 	sub.w	r9, r7, r6
 8018c96:	4648      	mov	r0, r9
 8018c98:	f7ff fde8 	bl	801886c <_ZN8touchgfx7CWRUtil4sineEi>
 8018c9c:	a902      	add	r1, sp, #8
 8018c9e:	9002      	str	r0, [sp, #8]
 8018ca0:	4628      	mov	r0, r5
 8018ca2:	f7ff fdd7 	bl	8018854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018ca8:	eb00 0801 	add.w	r8, r0, r1
 8018cac:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8018cb0:	f7ff fddc 	bl	801886c <_ZN8touchgfx7CWRUtil4sineEi>
 8018cb4:	a903      	add	r1, sp, #12
 8018cb6:	9003      	str	r0, [sp, #12]
 8018cb8:	4628      	mov	r0, r5
 8018cba:	f7ff fdcb 	bl	8018854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018cbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018cc0:	4641      	mov	r1, r8
 8018cc2:	1a12      	subs	r2, r2, r0
 8018cc4:	a804      	add	r0, sp, #16
 8018cc6:	f00c fa2d 	bl	8025124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018cca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018ccc:	441e      	add	r6, r3
 8018cce:	e7de      	b.n	8018c8e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8018cd0:	4249      	negs	r1, r1
 8018cd2:	f7ff fe23 	bl	801891c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018cd6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8018cda:	e7c9      	b.n	8018c70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018cdc:	2900      	cmp	r1, #0
 8018cde:	f1c0 0000 	rsb	r0, r0, #0
 8018ce2:	462a      	mov	r2, r5
 8018ce4:	db04      	blt.n	8018cf0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8018ce6:	f7ff fe19 	bl	801891c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018cea:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8018cee:	e7bf      	b.n	8018c70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018cf0:	4249      	negs	r1, r1
 8018cf2:	f7ff fe13 	bl	801891c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018cf6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8018cfa:	e7b9      	b.n	8018c70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018cfc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8018cfe:	a804      	add	r0, sp, #16
 8018d00:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018d02:	f00c fa0f 	bl	8025124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018d08:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018d0a:	a804      	add	r0, sp, #16
 8018d0c:	f00c fa0a 	bl	8025124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018d14:	2b01      	cmp	r3, #1
 8018d16:	d123      	bne.n	8018d60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8018d18:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8018d1a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8018d1e:	2e00      	cmp	r6, #0
 8018d20:	dd1e      	ble.n	8018d60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8018d22:	eb06 0907 	add.w	r9, r6, r7
 8018d26:	4648      	mov	r0, r9
 8018d28:	f7ff fda0 	bl	801886c <_ZN8touchgfx7CWRUtil4sineEi>
 8018d2c:	a902      	add	r1, sp, #8
 8018d2e:	9002      	str	r0, [sp, #8]
 8018d30:	4628      	mov	r0, r5
 8018d32:	f7ff fd8f 	bl	8018854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018d38:	eb00 0801 	add.w	r8, r0, r1
 8018d3c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8018d40:	f7ff fd94 	bl	801886c <_ZN8touchgfx7CWRUtil4sineEi>
 8018d44:	a903      	add	r1, sp, #12
 8018d46:	9003      	str	r0, [sp, #12]
 8018d48:	4628      	mov	r0, r5
 8018d4a:	f7ff fd83 	bl	8018854 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018d50:	4641      	mov	r1, r8
 8018d52:	1a12      	subs	r2, r2, r0
 8018d54:	a804      	add	r0, sp, #16
 8018d56:	f00c f9e5 	bl	8025124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d5c:	1af6      	subs	r6, r6, r3
 8018d5e:	e7de      	b.n	8018d1e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8018d60:	a804      	add	r0, sp, #16
 8018d62:	f00c fb54 	bl	802540e <_ZN8touchgfx6Canvas6renderEv>
 8018d66:	4604      	mov	r4, r0
 8018d68:	a804      	add	r0, sp, #16
 8018d6a:	f00c fb91 	bl	8025490 <_ZN8touchgfx6CanvasD1Ev>
 8018d6e:	4620      	mov	r0, r4
 8018d70:	b033      	add	sp, #204	; 0xcc
 8018d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018d76 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018d76:	b570      	push	{r4, r5, r6, lr}
 8018d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d7c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018d7e:	4604      	mov	r4, r0
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d00c      	beq.n	8018d9e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8018d84:	f850 3b26 	ldr.w	r3, [r0], #38
 8018d88:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8018d8a:	f7f8 f825 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8018d8e:	2300      	movs	r3, #0
 8018d90:	4601      	mov	r1, r0
 8018d92:	46ac      	mov	ip, r5
 8018d94:	4620      	mov	r0, r4
 8018d96:	461a      	mov	r2, r3
 8018d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d9c:	4760      	bx	ip
 8018d9e:	2000      	movs	r0, #0
 8018da0:	bd70      	pop	{r4, r5, r6, pc}

08018da2 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018da8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d016      	beq.n	8018ddc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8018dae:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8018db2:	4620      	mov	r0, r4
 8018db4:	f7f6 fc8a 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 8018db8:	6803      	ldr	r3, [r0, #0]
 8018dba:	4605      	mov	r5, r0
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	69de      	ldr	r6, [r3, #28]
 8018dc0:	f7f6 fca0 	bl	800f704 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018dc4:	4607      	mov	r7, r0
 8018dc6:	4620      	mov	r0, r4
 8018dc8:	f7f8 f806 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8018dcc:	2300      	movs	r3, #0
 8018dce:	4602      	mov	r2, r0
 8018dd0:	4639      	mov	r1, r7
 8018dd2:	9300      	str	r3, [sp, #0]
 8018dd4:	4628      	mov	r0, r5
 8018dd6:	47b0      	blx	r6
 8018dd8:	b003      	add	sp, #12
 8018dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ddc:	2000      	movs	r0, #0
 8018dde:	e7fb      	b.n	8018dd8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08018de0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018de0:	b40e      	push	{r1, r2, r3}
 8018de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dea:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018dec:	b09b      	sub	sp, #108	; 0x6c
 8018dee:	4604      	mov	r4, r0
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d03f      	beq.n	8018e74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8018df4:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8018df8:	ab22      	add	r3, sp, #136	; 0x88
 8018dfa:	4638      	mov	r0, r7
 8018dfc:	9303      	str	r3, [sp, #12]
 8018dfe:	f7f6 fc65 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 8018e02:	6803      	ldr	r3, [r0, #0]
 8018e04:	4680      	mov	r8, r0
 8018e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e08:	4798      	blx	r3
 8018e0a:	4606      	mov	r6, r0
 8018e0c:	b205      	sxth	r5, r0
 8018e0e:	a804      	add	r0, sp, #16
 8018e10:	f002 ff7e 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 8018e14:	f8d8 3000 	ldr.w	r3, [r8]
 8018e18:	4640      	mov	r0, r8
 8018e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e1c:	4798      	blx	r3
 8018e1e:	9a03      	ldr	r2, [sp, #12]
 8018e20:	4603      	mov	r3, r0
 8018e22:	9921      	ldr	r1, [sp, #132]	; 0x84
 8018e24:	a804      	add	r0, sp, #16
 8018e26:	f002 ff90 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018e2a:	4638      	mov	r0, r7
 8018e2c:	f7f6 fc6a 	bl	800f704 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018e30:	4680      	mov	r8, r0
 8018e32:	4638      	mov	r0, r7
 8018e34:	f7f6 fc4a 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 8018e38:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8018e3c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8018e40:	4642      	mov	r2, r8
 8018e42:	9300      	str	r3, [sp, #0]
 8018e44:	4603      	mov	r3, r0
 8018e46:	a804      	add	r0, sp, #16
 8018e48:	f001 f815 	bl	8019e76 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018e4c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018e50:	b203      	sxth	r3, r0
 8018e52:	18a9      	adds	r1, r5, r2
 8018e54:	2900      	cmp	r1, #0
 8018e56:	dd0b      	ble.n	8018e70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8018e58:	3b01      	subs	r3, #1
 8018e5a:	fb13 f302 	smulbb	r3, r3, r2
 8018e5e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018e62:	b21d      	sxth	r5, r3
 8018e64:	4628      	mov	r0, r5
 8018e66:	b01b      	add	sp, #108	; 0x6c
 8018e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e6c:	b003      	add	sp, #12
 8018e6e:	4770      	bx	lr
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	dcf7      	bgt.n	8018e64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8018e74:	2500      	movs	r5, #0
 8018e76:	e7f5      	b.n	8018e64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08018e78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e80:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8018e82:	b08d      	sub	sp, #52	; 0x34
 8018e84:	4604      	mov	r4, r0
 8018e86:	429e      	cmp	r6, r3
 8018e88:	4688      	mov	r8, r1
 8018e8a:	d04b      	beq.n	8018f24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8018e8c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8018e90:	4628      	mov	r0, r5
 8018e92:	f7f6 fc1b 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 8018e96:	4607      	mov	r7, r0
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	d043      	beq.n	8018f24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8018e9c:	4628      	mov	r0, r5
 8018e9e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8018ea2:	f7f6 fc47 	bl	800f734 <_ZNK8touchgfx9TypedText11assertValidEv>
 8018ea6:	4b21      	ldr	r3, [pc, #132]	; (8018f2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8018eb4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8018eb8:	785e      	ldrb	r6, [r3, #1]
 8018eba:	f7f6 fc23 	bl	800f704 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018ec0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8018ec4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8018ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8018eca:	4b19      	ldr	r3, [pc, #100]	; (8018f30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8018ecc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8018ed6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018eda:	9707      	str	r7, [sp, #28]
 8018edc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8018ee0:	f88d 6020 	strb.w	r6, [sp, #32]
 8018ee4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018ee8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8018eec:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018ef0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018ef4:	b10a      	cbz	r2, 8018efa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8018ef6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8018ef8:	b906      	cbnz	r6, 8018efc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8018efa:	689e      	ldr	r6, [r3, #8]
 8018efc:	af05      	add	r7, sp, #20
 8018efe:	4621      	mov	r1, r4
 8018f00:	4638      	mov	r0, r7
 8018f02:	f002 f864 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f06:	4628      	mov	r0, r5
 8018f08:	f7f7 ff66 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	9001      	str	r0, [sp, #4]
 8018f10:	4630      	mov	r0, r6
 8018f12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018f16:	ab07      	add	r3, sp, #28
 8018f18:	9300      	str	r3, [sp, #0]
 8018f1a:	4643      	mov	r3, r8
 8018f1c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018f20:	f000 fd76 	bl	8019a10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018f24:	b00d      	add	sp, #52	; 0x34
 8018f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f2a:	bf00      	nop
 8018f2c:	2000c6cc 	.word	0x2000c6cc
 8018f30:	2000c63c 	.word	0x2000c63c

08018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018f34:	b570      	push	{r4, r5, r6, lr}
 8018f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f3a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d021      	beq.n	8018f86 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8018f42:	6803      	ldr	r3, [r0, #0]
 8018f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f46:	4798      	blx	r3
 8018f48:	6823      	ldr	r3, [r4, #0]
 8018f4a:	4605      	mov	r5, r0
 8018f4c:	4620      	mov	r0, r4
 8018f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018f50:	4798      	blx	r3
 8018f52:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8018f56:	4606      	mov	r6, r0
 8018f58:	b22d      	sxth	r5, r5
 8018f5a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018f5e:	6823      	ldr	r3, [r4, #0]
 8018f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f62:	d109      	bne.n	8018f78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8018f64:	4629      	mov	r1, r5
 8018f66:	4620      	mov	r0, r4
 8018f68:	4798      	blx	r3
 8018f6a:	6823      	ldr	r3, [r4, #0]
 8018f6c:	4631      	mov	r1, r6
 8018f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f70:	4620      	mov	r0, r4
 8018f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f76:	4718      	bx	r3
 8018f78:	4601      	mov	r1, r0
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	4798      	blx	r3
 8018f7e:	6823      	ldr	r3, [r4, #0]
 8018f80:	4629      	mov	r1, r5
 8018f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f84:	e7f4      	b.n	8018f70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8018f86:	bd70      	pop	{r4, r5, r6, pc}

08018f88 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8018f88:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018f8c:	84c1      	strh	r1, [r0, #38]	; 0x26
 8018f8e:	b922      	cbnz	r2, 8018f9a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8018f90:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018f94:	b90b      	cbnz	r3, 8018f9a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8018f96:	f7ff bfcd 	b.w	8018f34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018f9a:	4770      	bx	lr

08018f9c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	8003      	strh	r3, [r0, #0]
 8018fa0:	8043      	strh	r3, [r0, #2]
 8018fa2:	8083      	strh	r3, [r0, #4]
 8018fa4:	80c3      	strh	r3, [r0, #6]
 8018fa6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8018faa:	b91b      	cbnz	r3, 8018fb4 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8018fac:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018fb0:	2bff      	cmp	r3, #255	; 0xff
 8018fb2:	d103      	bne.n	8018fbc <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8018fb4:	890b      	ldrh	r3, [r1, #8]
 8018fb6:	8083      	strh	r3, [r0, #4]
 8018fb8:	894b      	ldrh	r3, [r1, #10]
 8018fba:	80c3      	strh	r3, [r0, #6]
 8018fbc:	4770      	bx	lr
	...

08018fc0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	466b      	mov	r3, sp
 8018fc6:	6808      	ldr	r0, [r1, #0]
 8018fc8:	6849      	ldr	r1, [r1, #4]
 8018fca:	c303      	stmia	r3!, {r0, r1}
 8018fcc:	6823      	ldr	r3, [r4, #0]
 8018fce:	4669      	mov	r1, sp
 8018fd0:	4620      	mov	r0, r4
 8018fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd4:	4798      	blx	r3
 8018fd6:	4b08      	ldr	r3, [pc, #32]	; (8018ff8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018fde:	b10a      	cbz	r2, 8018fe4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018fe0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018fe2:	b900      	cbnz	r0, 8018fe6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018fe4:	6898      	ldr	r0, [r3, #8]
 8018fe6:	6803      	ldr	r3, [r0, #0]
 8018fe8:	4669      	mov	r1, sp
 8018fea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018fec:	69dd      	ldr	r5, [r3, #28]
 8018fee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018ff2:	47a8      	blx	r5
 8018ff4:	b003      	add	sp, #12
 8018ff6:	bd30      	pop	{r4, r5, pc}
 8018ff8:	2000c63c 	.word	0x2000c63c

08018ffc <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8018ffc:	b570      	push	{r4, r5, r6, lr}
 8018ffe:	6803      	ldr	r3, [r0, #0]
 8019000:	4604      	mov	r4, r0
 8019002:	4615      	mov	r5, r2
 8019004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019006:	4798      	blx	r3
 8019008:	6823      	ldr	r3, [r4, #0]
 801900a:	4629      	mov	r1, r5
 801900c:	4620      	mov	r0, r4
 801900e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019014:	4718      	bx	r3

08019016 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8019016:	b570      	push	{r4, r5, r6, lr}
 8019018:	6803      	ldr	r3, [r0, #0]
 801901a:	4604      	mov	r4, r0
 801901c:	460e      	mov	r6, r1
 801901e:	4615      	mov	r5, r2
 8019020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019022:	4798      	blx	r3
 8019024:	8030      	strh	r0, [r6, #0]
 8019026:	6823      	ldr	r3, [r4, #0]
 8019028:	4620      	mov	r0, r4
 801902a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801902c:	4798      	blx	r3
 801902e:	8028      	strh	r0, [r5, #0]
 8019030:	bd70      	pop	{r4, r5, r6, pc}

08019032 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8019032:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8019036:	4770      	bx	lr

08019038 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8019038:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801903c:	4770      	bx	lr

0801903e <_ZN8touchgfx10TiledImageD1Ev>:
 801903e:	4770      	bx	lr

08019040 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8019040:	b510      	push	{r4, lr}
 8019042:	4604      	mov	r4, r0
 8019044:	f000 fa40 	bl	80194c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019048:	6823      	ldr	r3, [r4, #0]
 801904a:	4620      	mov	r0, r4
 801904c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019050:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8019054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801905a:	4718      	bx	r3

0801905c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801905e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8019062:	4605      	mov	r5, r0
 8019064:	8541      	strh	r1, [r0, #42]	; 0x2a
 8019066:	4630      	mov	r0, r6
 8019068:	f003 fd7e 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801906c:	b1a0      	cbz	r0, 8019098 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801906e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8019072:	4630      	mov	r0, r6
 8019074:	f003 fd78 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019078:	fb97 f4f0 	sdiv	r4, r7, r0
 801907c:	fb04 7410 	mls	r4, r4, r0, r7
 8019080:	4630      	mov	r0, r6
 8019082:	f003 fd71 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019086:	4404      	add	r4, r0
 8019088:	4630      	mov	r0, r6
 801908a:	f003 fd6d 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801908e:	fb94 f3f0 	sdiv	r3, r4, r0
 8019092:	fb03 4010 	mls	r0, r3, r0, r4
 8019096:	8568      	strh	r0, [r5, #42]	; 0x2a
 8019098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801909a <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801909a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801909c:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80190a0:	4605      	mov	r5, r0
 80190a2:	8581      	strh	r1, [r0, #44]	; 0x2c
 80190a4:	4630      	mov	r0, r6
 80190a6:	f003 fd99 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190aa:	b1a0      	cbz	r0, 80190d6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80190ac:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80190b0:	4630      	mov	r0, r6
 80190b2:	f003 fd93 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190b6:	fb97 f4f0 	sdiv	r4, r7, r0
 80190ba:	fb04 7410 	mls	r4, r4, r0, r7
 80190be:	4630      	mov	r0, r6
 80190c0:	f003 fd8c 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190c4:	4404      	add	r4, r0
 80190c6:	4630      	mov	r0, r6
 80190c8:	f003 fd88 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190cc:	fb94 f3f0 	sdiv	r3, r4, r0
 80190d0:	fb03 4010 	mls	r0, r3, r0, r4
 80190d4:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80190d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080190d8 <_ZN8touchgfx10TiledImageD0Ev>:
 80190d8:	b510      	push	{r4, lr}
 80190da:	4604      	mov	r4, r0
 80190dc:	2130      	movs	r1, #48	; 0x30
 80190de:	f00d fa67 	bl	80265b0 <_ZdlPvj>
 80190e2:	4620      	mov	r0, r4
 80190e4:	bd10      	pop	{r4, pc}
	...

080190e8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80190e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ec:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80190f0:	b093      	sub	sp, #76	; 0x4c
 80190f2:	4607      	mov	r7, r0
 80190f4:	460e      	mov	r6, r1
 80190f6:	4658      	mov	r0, fp
 80190f8:	f003 fd36 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80190fc:	4605      	mov	r5, r0
 80190fe:	4658      	mov	r0, fp
 8019100:	f003 fd6c 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019104:	4680      	mov	r8, r0
 8019106:	2d00      	cmp	r5, #0
 8019108:	f000 80c5 	beq.w	8019296 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801910c:	2800      	cmp	r0, #0
 801910e:	f000 80c2 	beq.w	8019296 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8019112:	2300      	movs	r3, #0
 8019114:	a90e      	add	r1, sp, #56	; 0x38
 8019116:	4638      	mov	r0, r7
 8019118:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019120:	4798      	blx	r3
 8019122:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8019126:	f9b6 3000 	ldrsh.w	r3, [r6]
 801912a:	88b1      	ldrh	r1, [r6, #4]
 801912c:	189c      	adds	r4, r3, r2
 801912e:	440b      	add	r3, r1
 8019130:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8019134:	fa02 f383 	sxtah	r3, r2, r3
 8019138:	3b01      	subs	r3, #1
 801913a:	fb93 f3f5 	sdiv	r3, r3, r5
 801913e:	fb94 f4f5 	sdiv	r4, r4, r5
 8019142:	fb13 f305 	smulbb	r3, r3, r5
 8019146:	fb14 f405 	smulbb	r4, r4, r5
 801914a:	b21b      	sxth	r3, r3
 801914c:	1aa4      	subs	r4, r4, r2
 801914e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019150:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019154:	b2a4      	uxth	r4, r4
 8019156:	185a      	adds	r2, r3, r1
 8019158:	fb92 f2f8 	sdiv	r2, r2, r8
 801915c:	fb12 f208 	smulbb	r2, r2, r8
 8019160:	1a52      	subs	r2, r2, r1
 8019162:	b212      	sxth	r2, r2
 8019164:	920c      	str	r2, [sp, #48]	; 0x30
 8019166:	88f2      	ldrh	r2, [r6, #6]
 8019168:	4413      	add	r3, r2
 801916a:	fa01 f383 	sxtah	r3, r1, r3
 801916e:	3b01      	subs	r3, #1
 8019170:	fb93 f3f8 	sdiv	r3, r3, r8
 8019174:	fb13 f308 	smulbb	r3, r3, r8
 8019178:	b21b      	sxth	r3, r3
 801917a:	930d      	str	r3, [sp, #52]	; 0x34
 801917c:	1963      	adds	r3, r4, r5
 801917e:	fa1f fa83 	uxth.w	sl, r3
 8019182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019184:	b223      	sxth	r3, r4
 8019186:	4293      	cmp	r3, r2
 8019188:	9305      	str	r3, [sp, #20]
 801918a:	f300 8084 	bgt.w	8019296 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801918e:	fa0f f38a 	sxth.w	r3, sl
 8019192:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8019196:	9309      	str	r3, [sp, #36]	; 0x24
 8019198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801919a:	4599      	cmp	r9, r3
 801919c:	dd04      	ble.n	80191a8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801919e:	442c      	add	r4, r5
 80191a0:	eb05 030a 	add.w	r3, r5, sl
 80191a4:	b2a4      	uxth	r4, r4
 80191a6:	e7ea      	b.n	801917e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 80191a8:	f9b6 c000 	ldrsh.w	ip, [r6]
 80191ac:	88b2      	ldrh	r2, [r6, #4]
 80191ae:	4462      	add	r2, ip
 80191b0:	b292      	uxth	r2, r2
 80191b2:	b213      	sxth	r3, r2
 80191b4:	9308      	str	r3, [sp, #32]
 80191b6:	fa1f f389 	uxth.w	r3, r9
 80191ba:	eb08 0103 	add.w	r1, r8, r3
 80191be:	9307      	str	r3, [sp, #28]
 80191c0:	b289      	uxth	r1, r1
 80191c2:	b208      	sxth	r0, r1
 80191c4:	9006      	str	r0, [sp, #24]
 80191c6:	9805      	ldr	r0, [sp, #20]
 80191c8:	4603      	mov	r3, r0
 80191ca:	9808      	ldr	r0, [sp, #32]
 80191cc:	4283      	cmp	r3, r0
 80191ce:	da5e      	bge.n	801928e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80191d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191d2:	4584      	cmp	ip, r0
 80191d4:	da5b      	bge.n	801928e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80191d6:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80191da:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80191de:	4486      	add	lr, r0
 80191e0:	fa1f fe8e 	uxth.w	lr, lr
 80191e4:	fa0f f38e 	sxth.w	r3, lr
 80191e8:	4599      	cmp	r9, r3
 80191ea:	930a      	str	r3, [sp, #40]	; 0x28
 80191ec:	da4f      	bge.n	801928e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80191ee:	9b06      	ldr	r3, [sp, #24]
 80191f0:	4298      	cmp	r0, r3
 80191f2:	da4c      	bge.n	801928e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80191f4:	9b05      	ldr	r3, [sp, #20]
 80191f6:	459c      	cmp	ip, r3
 80191f8:	bfb8      	it	lt
 80191fa:	469c      	movlt	ip, r3
 80191fc:	4548      	cmp	r0, r9
 80191fe:	9b08      	ldr	r3, [sp, #32]
 8019200:	bfb8      	it	lt
 8019202:	4648      	movlt	r0, r9
 8019204:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8019208:	4699      	mov	r9, r3
 801920a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801920c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8019210:	4599      	cmp	r9, r3
 8019212:	bfc8      	it	gt
 8019214:	4652      	movgt	r2, sl
 8019216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019218:	eba2 020c 	sub.w	r2, r2, ip
 801921c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8019220:	9a06      	ldr	r2, [sp, #24]
 8019222:	4293      	cmp	r3, r2
 8019224:	bfd8      	it	le
 8019226:	4671      	movle	r1, lr
 8019228:	1a09      	subs	r1, r1, r0
 801922a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801922e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019232:	9b07      	ldr	r3, [sp, #28]
 8019234:	1b12      	subs	r2, r2, r4
 8019236:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801923a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801923e:	1ad2      	subs	r2, r2, r3
 8019240:	4b16      	ldr	r3, [pc, #88]	; (801929c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8019242:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801924c:	b109      	cbz	r1, 8019252 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801924e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8019250:	b900      	cbnz	r0, 8019254 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8019252:	6890      	ldr	r0, [r2, #8]
 8019254:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019258:	f04f 0c01 	mov.w	ip, #1
 801925c:	9b07      	ldr	r3, [sp, #28]
 801925e:	6801      	ldr	r1, [r0, #0]
 8019260:	4413      	add	r3, r2
 8019262:	f8cd c008 	str.w	ip, [sp, #8]
 8019266:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801926a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801926e:	b21b      	sxth	r3, r3
 8019270:	4422      	add	r2, r4
 8019272:	f8cd c004 	str.w	ip, [sp, #4]
 8019276:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801927a:	b212      	sxth	r2, r2
 801927c:	f8cd c000 	str.w	ip, [sp]
 8019280:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8019284:	4659      	mov	r1, fp
 8019286:	47c8      	blx	r9
 8019288:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801928c:	e784      	b.n	8019198 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801928e:	2300      	movs	r3, #0
 8019290:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8019294:	e7cb      	b.n	801922e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8019296:	b013      	add	sp, #76	; 0x4c
 8019298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929c:	2000c63c 	.word	0x2000c63c

080192a0 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80192a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192a4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80192a8:	4606      	mov	r6, r0
 80192aa:	4689      	mov	r9, r1
 80192ac:	2bff      	cmp	r3, #255	; 0xff
 80192ae:	d008      	beq.n	80192c2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80192b0:	2300      	movs	r3, #0
 80192b2:	8003      	strh	r3, [r0, #0]
 80192b4:	8043      	strh	r3, [r0, #2]
 80192b6:	8083      	strh	r3, [r0, #4]
 80192b8:	4630      	mov	r0, r6
 80192ba:	80f3      	strh	r3, [r6, #6]
 80192bc:	b003      	add	sp, #12
 80192be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c2:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80192c6:	4668      	mov	r0, sp
 80192c8:	4659      	mov	r1, fp
 80192ca:	f003 fcc1 	bl	801cc50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80192ce:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80192d2:	4658      	mov	r0, fp
 80192d4:	f9bd 7000 	ldrsh.w	r7, [sp]
 80192d8:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80192dc:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80192e0:	f003 fc42 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192e4:	4284      	cmp	r4, r0
 80192e6:	d10d      	bne.n	8019304 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80192e8:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80192ec:	4658      	mov	r0, fp
 80192ee:	f003 fc75 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192f2:	4580      	cmp	r8, r0
 80192f4:	d12a      	bne.n	801934c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80192f6:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80192fa:	8037      	strh	r7, [r6, #0]
 80192fc:	f8a6 a002 	strh.w	sl, [r6, #2]
 8019300:	80b5      	strh	r5, [r6, #4]
 8019302:	e7d9      	b.n	80192b8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8019304:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8019308:	4658      	mov	r0, fp
 801930a:	f003 fc2d 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801930e:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8019312:	1b7f      	subs	r7, r7, r5
 8019314:	b2a3      	uxth	r3, r4
 8019316:	b2bd      	uxth	r5, r7
 8019318:	b22f      	sxth	r7, r5
 801931a:	4428      	add	r0, r5
 801931c:	2f00      	cmp	r7, #0
 801931e:	b280      	uxth	r0, r0
 8019320:	bfb8      	it	lt
 8019322:	18ed      	addlt	r5, r5, r3
 8019324:	4403      	add	r3, r0
 8019326:	bfac      	ite	ge
 8019328:	4625      	movge	r5, r4
 801932a:	2700      	movlt	r7, #0
 801932c:	b29b      	uxth	r3, r3
 801932e:	bfb8      	it	lt
 8019330:	b22d      	sxthlt	r5, r5
 8019332:	b219      	sxth	r1, r3
 8019334:	bfb8      	it	lt
 8019336:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801933a:	4291      	cmp	r1, r2
 801933c:	bfc4      	itt	gt
 801933e:	1a9c      	subgt	r4, r3, r2
 8019340:	b224      	sxthgt	r4, r4
 8019342:	42ac      	cmp	r4, r5
 8019344:	bfc4      	itt	gt
 8019346:	b207      	sxthgt	r7, r0
 8019348:	4625      	movgt	r5, r4
 801934a:	e7cf      	b.n	80192ec <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801934c:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8019350:	4658      	mov	r0, fp
 8019352:	f003 fc43 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019356:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801935a:	ebaa 0404 	sub.w	r4, sl, r4
 801935e:	fa1f f288 	uxth.w	r2, r8
 8019362:	b2a4      	uxth	r4, r4
 8019364:	fa0f fa84 	sxth.w	sl, r4
 8019368:	4420      	add	r0, r4
 801936a:	f1ba 0f00 	cmp.w	sl, #0
 801936e:	b280      	uxth	r0, r0
 8019370:	bfb8      	it	lt
 8019372:	18a3      	addlt	r3, r4, r2
 8019374:	4402      	add	r2, r0
 8019376:	bfac      	ite	ge
 8019378:	4643      	movge	r3, r8
 801937a:	f04f 0a00 	movlt.w	sl, #0
 801937e:	b292      	uxth	r2, r2
 8019380:	bfb8      	it	lt
 8019382:	b21b      	sxthlt	r3, r3
 8019384:	b214      	sxth	r4, r2
 8019386:	bfb8      	it	lt
 8019388:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801938c:	428c      	cmp	r4, r1
 801938e:	bfc4      	itt	gt
 8019390:	eba2 0801 	subgt.w	r8, r2, r1
 8019394:	fa0f f888 	sxthgt.w	r8, r8
 8019398:	4543      	cmp	r3, r8
 801939a:	bfbc      	itt	lt
 801939c:	fa0f fa80 	sxthlt.w	sl, r0
 80193a0:	4643      	movlt	r3, r8
 80193a2:	e7aa      	b.n	80192fa <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080193a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80193a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80193a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80193ac:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80193ae:	4604      	mov	r4, r0
 80193b0:	429a      	cmp	r2, r3
 80193b2:	d018      	beq.n	80193e6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80193b4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80193b8:	4628      	mov	r0, r5
 80193ba:	f7f6 f987 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 80193be:	6803      	ldr	r3, [r0, #0]
 80193c0:	4606      	mov	r6, r0
 80193c2:	4628      	mov	r0, r5
 80193c4:	69df      	ldr	r7, [r3, #28]
 80193c6:	f7f6 f99d 	bl	800f704 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80193ca:	4680      	mov	r8, r0
 80193cc:	4628      	mov	r0, r5
 80193ce:	f7f7 fd03 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80193d2:	2300      	movs	r3, #0
 80193d4:	4602      	mov	r2, r0
 80193d6:	4641      	mov	r1, r8
 80193d8:	9300      	str	r3, [sp, #0]
 80193da:	4630      	mov	r0, r6
 80193dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193de:	47b8      	blx	r7
 80193e0:	b002      	add	sp, #8
 80193e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e6:	2000      	movs	r0, #0
 80193e8:	e7fa      	b.n	80193e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080193ea <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80193ea:	b570      	push	{r4, r5, r6, lr}
 80193ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80193f0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80193f2:	4604      	mov	r4, r0
 80193f4:	429a      	cmp	r2, r3
 80193f6:	d00c      	beq.n	8019412 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80193f8:	f850 3b26 	ldr.w	r3, [r0], #38
 80193fc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80193fe:	f7f7 fceb 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8019402:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019404:	4601      	mov	r1, r0
 8019406:	46ac      	mov	ip, r5
 8019408:	4620      	mov	r0, r4
 801940a:	2300      	movs	r3, #0
 801940c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019410:	4760      	bx	ip
 8019412:	2000      	movs	r0, #0
 8019414:	bd70      	pop	{r4, r5, r6, pc}
	...

08019418 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801941c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019420:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8019422:	b08d      	sub	sp, #52	; 0x34
 8019424:	4604      	mov	r4, r0
 8019426:	429e      	cmp	r6, r3
 8019428:	460f      	mov	r7, r1
 801942a:	d048      	beq.n	80194be <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801942c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019430:	4628      	mov	r0, r5
 8019432:	f7f6 f94b 	bl	800f6cc <_ZNK8touchgfx9TypedText7getFontEv>
 8019436:	4680      	mov	r8, r0
 8019438:	2800      	cmp	r0, #0
 801943a:	d040      	beq.n	80194be <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801943c:	4628      	mov	r0, r5
 801943e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8019442:	f7f6 f977 	bl	800f734 <_ZNK8touchgfx9TypedText11assertValidEv>
 8019446:	4b1f      	ldr	r3, [pc, #124]	; (80194c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8019448:	4628      	mov	r0, r5
 801944a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8019454:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8019458:	785e      	ldrb	r6, [r3, #1]
 801945a:	f7f6 f953 	bl	800f704 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801945e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8019462:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8019466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019468:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801946c:	f88d 6020 	strb.w	r6, [sp, #32]
 8019470:	ae05      	add	r6, sp, #20
 8019472:	9309      	str	r3, [sp, #36]	; 0x24
 8019474:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8019478:	f8cd 801c 	str.w	r8, [sp, #28]
 801947c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8019480:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8019484:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019488:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801948c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8019490:	f7f6 fd7a 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8019494:	4621      	mov	r1, r4
 8019496:	4680      	mov	r8, r0
 8019498:	4630      	mov	r0, r6
 801949a:	f001 fd98 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801949e:	4628      	mov	r0, r5
 80194a0:	f7f7 fc9a 	bl	8010dd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80194a4:	2300      	movs	r3, #0
 80194a6:	9303      	str	r3, [sp, #12]
 80194a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80194aa:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80194ae:	ab07      	add	r3, sp, #28
 80194b0:	4640      	mov	r0, r8
 80194b2:	9300      	str	r3, [sp, #0]
 80194b4:	463b      	mov	r3, r7
 80194b6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80194ba:	f000 faa9 	bl	8019a10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80194be:	b00d      	add	sp, #52	; 0x34
 80194c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c4:	2000c6cc 	.word	0x2000c6cc

080194c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80194c8:	b570      	push	{r4, r5, r6, lr}
 80194ca:	4605      	mov	r5, r0
 80194cc:	880b      	ldrh	r3, [r1, #0]
 80194ce:	4604      	mov	r4, r0
 80194d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80194d2:	f855 3b26 	ldr.w	r3, [r5], #38
 80194d6:	4628      	mov	r0, r5
 80194d8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80194da:	f003 fb45 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80194de:	b201      	sxth	r1, r0
 80194e0:	4620      	mov	r0, r4
 80194e2:	47b0      	blx	r6
 80194e4:	6823      	ldr	r3, [r4, #0]
 80194e6:	4628      	mov	r0, r5
 80194e8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80194ea:	f003 fb77 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80194ee:	b201      	sxth	r1, r0
 80194f0:	4620      	mov	r0, r4
 80194f2:	47b0      	blx	r6
 80194f4:	4628      	mov	r0, r5
 80194f6:	f003 fc05 	bl	801cd04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80194fa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80194fe:	bd70      	pop	{r4, r5, r6, pc}

08019500 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019500:	b510      	push	{r4, lr}
 8019502:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019506:	4604      	mov	r4, r0
 8019508:	2bff      	cmp	r3, #255	; 0xff
 801950a:	d006      	beq.n	801951a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801950c:	2300      	movs	r3, #0
 801950e:	8003      	strh	r3, [r0, #0]
 8019510:	8043      	strh	r3, [r0, #2]
 8019512:	8083      	strh	r3, [r0, #4]
 8019514:	80c3      	strh	r3, [r0, #6]
 8019516:	4620      	mov	r0, r4
 8019518:	bd10      	pop	{r4, pc}
 801951a:	3126      	adds	r1, #38	; 0x26
 801951c:	f003 fb98 	bl	801cc50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019520:	e7f9      	b.n	8019516 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019524 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019528:	4604      	mov	r4, r0
 801952a:	b088      	sub	sp, #32
 801952c:	2500      	movs	r5, #0
 801952e:	460f      	mov	r7, r1
 8019530:	f854 3b26 	ldr.w	r3, [r4], #38
 8019534:	a904      	add	r1, sp, #16
 8019536:	4606      	mov	r6, r0
 8019538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801953a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801953e:	4798      	blx	r3
 8019540:	4620      	mov	r0, r4
 8019542:	f003 fb11 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019546:	4680      	mov	r8, r0
 8019548:	4620      	mov	r0, r4
 801954a:	f003 fb47 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801954e:	9506      	str	r5, [sp, #24]
 8019550:	ad06      	add	r5, sp, #24
 8019552:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019556:	4639      	mov	r1, r7
 8019558:	f8ad 801c 	strh.w	r8, [sp, #28]
 801955c:	4628      	mov	r0, r5
 801955e:	f7fd fef5 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 8019562:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019566:	b1c3      	cbz	r3, 801959a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8019568:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801956c:	b1ab      	cbz	r3, 801959a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801956e:	4b0c      	ldr	r3, [pc, #48]	; (80195a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019576:	b10a      	cbz	r2, 801957c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8019578:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801957a:	b900      	cbnz	r0, 801957e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801957c:	6898      	ldr	r0, [r3, #8]
 801957e:	2701      	movs	r7, #1
 8019580:	6801      	ldr	r1, [r0, #0]
 8019582:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019586:	9702      	str	r7, [sp, #8]
 8019588:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801958c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019590:	e9cd 5600 	strd	r5, r6, [sp]
 8019594:	68cd      	ldr	r5, [r1, #12]
 8019596:	4621      	mov	r1, r4
 8019598:	47a8      	blx	r5
 801959a:	b008      	add	sp, #32
 801959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195a0:	2000c63c 	.word	0x2000c63c

080195a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80195a4:	4b02      	ldr	r3, [pc, #8]	; (80195b0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80195a6:	6018      	str	r0, [r3, #0]
 80195a8:	4b02      	ldr	r3, [pc, #8]	; (80195b4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80195aa:	6019      	str	r1, [r3, #0]
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop
 80195b0:	2000c644 	.word	0x2000c644
 80195b4:	2000c658 	.word	0x2000c658

080195b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80195b8:	b538      	push	{r3, r4, r5, lr}
 80195ba:	4c2b      	ldr	r4, [pc, #172]	; (8019668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80195bc:	4b2b      	ldr	r3, [pc, #172]	; (801966c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80195be:	6821      	ldr	r1, [r4, #0]
 80195c0:	681a      	ldr	r2, [r3, #0]
 80195c2:	4281      	cmp	r1, r0
 80195c4:	4d2a      	ldr	r5, [pc, #168]	; (8019670 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80195c6:	492b      	ldr	r1, [pc, #172]	; (8019674 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80195c8:	d108      	bne.n	80195dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80195ca:	682b      	ldr	r3, [r5, #0]
 80195cc:	4293      	cmp	r3, r2
 80195ce:	d105      	bne.n	80195dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80195d0:	6808      	ldr	r0, [r1, #0]
 80195d2:	280f      	cmp	r0, #15
 80195d4:	bf94      	ite	ls
 80195d6:	2000      	movls	r0, #0
 80195d8:	2001      	movhi	r0, #1
 80195da:	bd38      	pop	{r3, r4, r5, pc}
 80195dc:	4b26      	ldr	r3, [pc, #152]	; (8019678 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80195de:	6020      	str	r0, [r4, #0]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	602a      	str	r2, [r5, #0]
 80195e4:	4298      	cmp	r0, r3
 80195e6:	d905      	bls.n	80195f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80195e8:	4b24      	ldr	r3, [pc, #144]	; (801967c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80195ea:	2137      	movs	r1, #55	; 0x37
 80195ec:	4a24      	ldr	r2, [pc, #144]	; (8019680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80195ee:	4825      	ldr	r0, [pc, #148]	; (8019684 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80195f0:	f00d f80c 	bl	802660c <__assert_func>
 80195f4:	f010 0403 	ands.w	r4, r0, #3
 80195f8:	bf1f      	itttt	ne
 80195fa:	f1c4 0504 	rsbne	r5, r4, #4
 80195fe:	3b04      	subne	r3, #4
 8019600:	1952      	addne	r2, r2, r5
 8019602:	191b      	addne	r3, r3, r4
 8019604:	4d20      	ldr	r5, [pc, #128]	; (8019688 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8019606:	4402      	add	r2, r0
 8019608:	1a1b      	subs	r3, r3, r0
 801960a:	3001      	adds	r0, #1
 801960c:	602a      	str	r2, [r5, #0]
 801960e:	f020 0401 	bic.w	r4, r0, #1
 8019612:	42a3      	cmp	r3, r4
 8019614:	d203      	bcs.n	801961e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8019616:	4b19      	ldr	r3, [pc, #100]	; (801967c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8019618:	214a      	movs	r1, #74	; 0x4a
 801961a:	4a19      	ldr	r2, [pc, #100]	; (8019680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801961c:	e7e7      	b.n	80195ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801961e:	f010 0002 	ands.w	r0, r0, #2
 8019622:	bf1f      	itttt	ne
 8019624:	f1c0 0504 	rsbne	r5, r0, #4
 8019628:	1952      	addne	r2, r2, r5
 801962a:	1f05      	subne	r5, r0, #4
 801962c:	195b      	addne	r3, r3, r5
 801962e:	4422      	add	r2, r4
 8019630:	4d16      	ldr	r5, [pc, #88]	; (801968c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8019632:	1b1b      	subs	r3, r3, r4
 8019634:	602a      	str	r2, [r5, #0]
 8019636:	429c      	cmp	r4, r3
 8019638:	d903      	bls.n	8019642 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801963a:	4b10      	ldr	r3, [pc, #64]	; (801967c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801963c:	215d      	movs	r1, #93	; 0x5d
 801963e:	4a10      	ldr	r2, [pc, #64]	; (8019680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019640:	e7d5      	b.n	80195ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019642:	b120      	cbz	r0, 801964e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8019644:	f1c0 0504 	rsb	r5, r0, #4
 8019648:	3804      	subs	r0, #4
 801964a:	442a      	add	r2, r5
 801964c:	4403      	add	r3, r0
 801964e:	1b1b      	subs	r3, r3, r4
 8019650:	4422      	add	r2, r4
 8019652:	480f      	ldr	r0, [pc, #60]	; (8019690 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8019654:	2b0f      	cmp	r3, #15
 8019656:	600b      	str	r3, [r1, #0]
 8019658:	6002      	str	r2, [r0, #0]
 801965a:	d803      	bhi.n	8019664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801965c:	4b0d      	ldr	r3, [pc, #52]	; (8019694 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801965e:	2170      	movs	r1, #112	; 0x70
 8019660:	4a07      	ldr	r2, [pc, #28]	; (8019680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019662:	e7c4      	b.n	80195ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019664:	2001      	movs	r0, #1
 8019666:	e7b8      	b.n	80195da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8019668:	2000c64c 	.word	0x2000c64c
 801966c:	2000c644 	.word	0x2000c644
 8019670:	2000c654 	.word	0x2000c654
 8019674:	2000c65c 	.word	0x2000c65c
 8019678:	2000c658 	.word	0x2000c658
 801967c:	08029e74 	.word	0x08029e74
 8019680:	08029f3c 	.word	0x08029f3c
 8019684:	08029ead 	.word	0x08029ead
 8019688:	2000c660 	.word	0x2000c660
 801968c:	2000c650 	.word	0x2000c650
 8019690:	2000c648 	.word	0x2000c648
 8019694:	08029ef7 	.word	0x08029ef7

08019698 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8019698:	4b04      	ldr	r3, [pc, #16]	; (80196ac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801969a:	6818      	ldr	r0, [r3, #0]
 801969c:	b120      	cbz	r0, 80196a8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801969e:	4b04      	ldr	r3, [pc, #16]	; (80196b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80196a0:	6818      	ldr	r0, [r3, #0]
 80196a2:	3000      	adds	r0, #0
 80196a4:	bf18      	it	ne
 80196a6:	2001      	movne	r0, #1
 80196a8:	4770      	bx	lr
 80196aa:	bf00      	nop
 80196ac:	2000c644 	.word	0x2000c644
 80196b0:	2000c658 	.word	0x2000c658

080196b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80196b4:	4b01      	ldr	r3, [pc, #4]	; (80196bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80196b6:	6818      	ldr	r0, [r3, #0]
 80196b8:	4770      	bx	lr
 80196ba:	bf00      	nop
 80196bc:	2000c64c 	.word	0x2000c64c

080196c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80196c0:	4b01      	ldr	r3, [pc, #4]	; (80196c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80196c2:	6818      	ldr	r0, [r3, #0]
 80196c4:	4770      	bx	lr
 80196c6:	bf00      	nop
 80196c8:	2000c654 	.word	0x2000c654

080196cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80196cc:	4b01      	ldr	r3, [pc, #4]	; (80196d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80196ce:	6818      	ldr	r0, [r3, #0]
 80196d0:	4770      	bx	lr
 80196d2:	bf00      	nop
 80196d4:	2000c660 	.word	0x2000c660

080196d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80196d8:	4b01      	ldr	r3, [pc, #4]	; (80196e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80196da:	6818      	ldr	r0, [r3, #0]
 80196dc:	4770      	bx	lr
 80196de:	bf00      	nop
 80196e0:	2000c650 	.word	0x2000c650

080196e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80196e4:	4b01      	ldr	r3, [pc, #4]	; (80196ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80196e6:	6818      	ldr	r0, [r3, #0]
 80196e8:	4770      	bx	lr
 80196ea:	bf00      	nop
 80196ec:	2000c648 	.word	0x2000c648

080196f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80196f0:	4b01      	ldr	r3, [pc, #4]	; (80196f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80196f2:	6818      	ldr	r0, [r3, #0]
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop
 80196f8:	2000c65c 	.word	0x2000c65c

080196fc <_ZN8touchgfx3LCD4initEv>:
 80196fc:	4770      	bx	lr

080196fe <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80196fe:	2000      	movs	r0, #0
 8019700:	4770      	bx	lr

08019702 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019706:	b091      	sub	sp, #68	; 0x44
 8019708:	4699      	mov	r9, r3
 801970a:	4617      	mov	r7, r2
 801970c:	2500      	movs	r5, #0
 801970e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8019712:	4680      	mov	r8, r0
 8019714:	a80e      	add	r0, sp, #56	; 0x38
 8019716:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8019718:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801971c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8019720:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019724:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019728:	910d      	str	r1, [sp, #52]	; 0x34
 801972a:	950e      	str	r5, [sp, #56]	; 0x38
 801972c:	f000 fe3a 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019730:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019732:	f8d9 6000 	ldr.w	r6, [r9]
 8019736:	6818      	ldr	r0, [r3, #0]
 8019738:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801973a:	f9b4 b000 	ldrsh.w	fp, [r4]
 801973e:	1b80      	subs	r0, r0, r6
 8019740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019744:	eb02 0c06 	add.w	ip, r2, r6
 8019748:	ebab 0e0c 	sub.w	lr, fp, ip
 801974c:	4570      	cmp	r0, lr
 801974e:	f340 80bc 	ble.w	80198ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019752:	88a1      	ldrh	r1, [r4, #4]
 8019754:	4459      	add	r1, fp
 8019756:	b209      	sxth	r1, r1
 8019758:	458c      	cmp	ip, r1
 801975a:	f300 80b6 	bgt.w	80198ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801975e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8019762:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8019766:	4283      	cmp	r3, r0
 8019768:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801976c:	edd9 6a07 	vldr	s13, [r9, #28]
 8019770:	bfa8      	it	ge
 8019772:	4603      	movge	r3, r0
 8019774:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8019778:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801977c:	45e3      	cmp	fp, ip
 801977e:	ee07 3a90 	vmov	s15, r3
 8019782:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019786:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801978a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801978e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019792:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019796:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801979a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801979e:	ee32 1a05 	vadd.f32	s2, s4, s10
 80197a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80197a6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80197aa:	ee61 1a87 	vmul.f32	s3, s3, s14
 80197ae:	ee22 2a07 	vmul.f32	s4, s4, s14
 80197b2:	f340 808d 	ble.w	80198d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80197b6:	fb9e f5f3 	sdiv	r5, lr, r3
 80197ba:	ee07 5a10 	vmov	s14, r5
 80197be:	2d00      	cmp	r5, #0
 80197c0:	fb03 e415 	mls	r4, r3, r5, lr
 80197c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197c8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80197cc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80197d0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80197d4:	dd12      	ble.n	80197fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80197d6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80197da:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80197de:	ee31 2a45 	vsub.f32	s4, s2, s10
 80197e2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80197e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ea:	bf14      	ite	ne
 80197ec:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80197f0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80197f4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80197f8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80197fc:	fb05 f703 	mul.w	r7, r5, r3
 8019800:	1bc0      	subs	r0, r0, r7
 8019802:	443e      	add	r6, r7
 8019804:	1997      	adds	r7, r2, r6
 8019806:	4407      	add	r7, r0
 8019808:	42b9      	cmp	r1, r7
 801980a:	bfbc      	itt	lt
 801980c:	1a88      	sublt	r0, r1, r2
 801980e:	1b80      	sublt	r0, r0, r6
 8019810:	2800      	cmp	r0, #0
 8019812:	dd5a      	ble.n	80198ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019814:	fb90 f1f3 	sdiv	r1, r0, r3
 8019818:	fb03 0211 	mls	r2, r3, r1, r0
 801981c:	b90a      	cbnz	r2, 8019822 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801981e:	3901      	subs	r1, #1
 8019820:	461a      	mov	r2, r3
 8019822:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019826:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801982a:	44a4      	add	ip, r4
 801982c:	2900      	cmp	r1, #0
 801982e:	bfcc      	ite	gt
 8019830:	469e      	movgt	lr, r3
 8019832:	4696      	movle	lr, r2
 8019834:	fb03 c505 	mla	r5, r3, r5, ip
 8019838:	eef0 6a42 	vmov.f32	s13, s4
 801983c:	eeb0 7a61 	vmov.f32	s14, s3
 8019840:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019844:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019848:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801984c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019850:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019854:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019858:	ee17 0a90 	vmov	r0, s15
 801985c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019860:	fb90 f6f3 	sdiv	r6, r0, r3
 8019864:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019868:	ee17 0a90 	vmov	r0, s15
 801986c:	fb90 f7f3 	sdiv	r7, r0, r3
 8019870:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019874:	f8d0 8000 	ldr.w	r8, [r0]
 8019878:	900c      	str	r0, [sp, #48]	; 0x30
 801987a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801987c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8019880:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8019884:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019888:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801988c:	f8cd a020 	str.w	sl, [sp, #32]
 8019890:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8019894:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019896:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801989a:	9603      	str	r6, [sp, #12]
 801989c:	44ca      	add	sl, r9
 801989e:	9506      	str	r5, [sp, #24]
 80198a0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80198a4:	ee16 0a90 	vmov	r0, s13
 80198a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80198ac:	fb07 0704 	mla	r7, r7, r4, r0
 80198b0:	ee17 0a10 	vmov	r0, s14
 80198b4:	fb06 0604 	mla	r6, r6, r4, r0
 80198b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80198ba:	9702      	str	r7, [sp, #8]
 80198bc:	e9cd 3600 	strd	r3, r6, [sp]
 80198c0:	ebae 0304 	sub.w	r3, lr, r4
 80198c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80198c8:	47a8      	blx	r5
 80198ca:	b011      	add	sp, #68	; 0x44
 80198cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198d0:	462c      	mov	r4, r5
 80198d2:	e797      	b.n	8019804 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080198d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80198d4:	b570      	push	{r4, r5, r6, lr}
 80198d6:	4604      	mov	r4, r0
 80198d8:	2500      	movs	r5, #0
 80198da:	9804      	ldr	r0, [sp, #16]
 80198dc:	7223      	strb	r3, [r4, #8]
 80198de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80198e2:	8025      	strh	r5, [r4, #0]
 80198e4:	6061      	str	r1, [r4, #4]
 80198e6:	7263      	strb	r3, [r4, #9]
 80198e8:	60e0      	str	r0, [r4, #12]
 80198ea:	8222      	strh	r2, [r4, #16]
 80198ec:	8265      	strh	r5, [r4, #18]
 80198ee:	82a5      	strh	r5, [r4, #20]
 80198f0:	82e5      	strh	r5, [r4, #22]
 80198f2:	8325      	strh	r5, [r4, #24]
 80198f4:	8365      	strh	r5, [r4, #26]
 80198f6:	83a5      	strh	r5, [r4, #28]
 80198f8:	77a5      	strb	r5, [r4, #30]
 80198fa:	6803      	ldr	r3, [r0, #0]
 80198fc:	695b      	ldr	r3, [r3, #20]
 80198fe:	4798      	blx	r3
 8019900:	4606      	mov	r6, r0
 8019902:	b1f8      	cbz	r0, 8019944 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019904:	68e0      	ldr	r0, [r4, #12]
 8019906:	4631      	mov	r1, r6
 8019908:	6803      	ldr	r3, [r0, #0]
 801990a:	68db      	ldr	r3, [r3, #12]
 801990c:	4798      	blx	r3
 801990e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019912:	4605      	mov	r5, r0
 8019914:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019918:	7a83      	ldrb	r3, [r0, #10]
 801991a:	4313      	orrs	r3, r2
 801991c:	83a3      	strh	r3, [r4, #28]
 801991e:	7a63      	ldrb	r3, [r4, #9]
 8019920:	2b04      	cmp	r3, #4
 8019922:	d10f      	bne.n	8019944 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019924:	68e0      	ldr	r0, [r4, #12]
 8019926:	462a      	mov	r2, r5
 8019928:	4631      	mov	r1, r6
 801992a:	6803      	ldr	r3, [r0, #0]
 801992c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801992e:	4798      	blx	r3
 8019930:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8019934:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019938:	7aab      	ldrb	r3, [r5, #10]
 801993a:	4313      	orrs	r3, r2
 801993c:	4418      	add	r0, r3
 801993e:	8ba3      	ldrh	r3, [r4, #28]
 8019940:	4418      	add	r0, r3
 8019942:	83a0      	strh	r0, [r4, #28]
 8019944:	4620      	mov	r0, r4
 8019946:	bd70      	pop	{r4, r5, r6, pc}

08019948 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801994c:	2400      	movs	r4, #0
 801994e:	b085      	sub	sp, #20
 8019950:	4681      	mov	r9, r0
 8019952:	460f      	mov	r7, r1
 8019954:	4692      	mov	sl, r2
 8019956:	469b      	mov	fp, r3
 8019958:	46a0      	mov	r8, r4
 801995a:	4626      	mov	r6, r4
 801995c:	4554      	cmp	r4, sl
 801995e:	da21      	bge.n	80199a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019960:	2300      	movs	r3, #0
 8019962:	463a      	mov	r2, r7
 8019964:	4659      	mov	r1, fp
 8019966:	4648      	mov	r0, r9
 8019968:	9303      	str	r3, [sp, #12]
 801996a:	ab03      	add	r3, sp, #12
 801996c:	f002 fb52 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019970:	4605      	mov	r5, r0
 8019972:	b1b8      	cbz	r0, 80199a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019974:	280a      	cmp	r0, #10
 8019976:	d015      	beq.n	80199a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019978:	9a03      	ldr	r2, [sp, #12]
 801997a:	b182      	cbz	r2, 801999e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801997c:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8019980:	4641      	mov	r1, r8
 8019982:	7a93      	ldrb	r3, [r2, #10]
 8019984:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019988:	8895      	ldrh	r5, [r2, #4]
 801998a:	4303      	orrs	r3, r0
 801998c:	4638      	mov	r0, r7
 801998e:	9301      	str	r3, [sp, #4]
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019994:	4798      	blx	r3
 8019996:	9b01      	ldr	r3, [sp, #4]
 8019998:	4418      	add	r0, r3
 801999a:	4406      	add	r6, r0
 801999c:	b2b6      	uxth	r6, r6
 801999e:	3401      	adds	r4, #1
 80199a0:	46a8      	mov	r8, r5
 80199a2:	e7db      	b.n	801995c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80199a4:	4630      	mov	r0, r6
 80199a6:	b005      	add	sp, #20
 80199a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80199ac:	2a02      	cmp	r2, #2
 80199ae:	b530      	push	{r4, r5, lr}
 80199b0:	d011      	beq.n	80199d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80199b2:	2a03      	cmp	r2, #3
 80199b4:	d01c      	beq.n	80199f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80199b6:	2a01      	cmp	r2, #1
 80199b8:	d10c      	bne.n	80199d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80199ba:	888b      	ldrh	r3, [r1, #4]
 80199bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80199c0:	8801      	ldrh	r1, [r0, #0]
 80199c2:	1a9b      	subs	r3, r3, r2
 80199c4:	8844      	ldrh	r4, [r0, #2]
 80199c6:	1a5b      	subs	r3, r3, r1
 80199c8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80199cc:	8004      	strh	r4, [r0, #0]
 80199ce:	8043      	strh	r3, [r0, #2]
 80199d0:	8081      	strh	r1, [r0, #4]
 80199d2:	80c2      	strh	r2, [r0, #6]
 80199d4:	bd30      	pop	{r4, r5, pc}
 80199d6:	88cb      	ldrh	r3, [r1, #6]
 80199d8:	88c2      	ldrh	r2, [r0, #6]
 80199da:	1a9b      	subs	r3, r3, r2
 80199dc:	8842      	ldrh	r2, [r0, #2]
 80199de:	1a9b      	subs	r3, r3, r2
 80199e0:	888a      	ldrh	r2, [r1, #4]
 80199e2:	8881      	ldrh	r1, [r0, #4]
 80199e4:	8043      	strh	r3, [r0, #2]
 80199e6:	1a52      	subs	r2, r2, r1
 80199e8:	8801      	ldrh	r1, [r0, #0]
 80199ea:	1a52      	subs	r2, r2, r1
 80199ec:	8002      	strh	r2, [r0, #0]
 80199ee:	e7f1      	b.n	80199d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80199f0:	88cb      	ldrh	r3, [r1, #6]
 80199f2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80199f6:	8841      	ldrh	r1, [r0, #2]
 80199f8:	1a9b      	subs	r3, r3, r2
 80199fa:	f9b0 5000 	ldrsh.w	r5, [r0]
 80199fe:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019a02:	1a5b      	subs	r3, r3, r1
 8019a04:	8045      	strh	r5, [r0, #2]
 8019a06:	8082      	strh	r2, [r0, #4]
 8019a08:	8003      	strh	r3, [r0, #0]
 8019a0a:	80c4      	strh	r4, [r0, #6]
 8019a0c:	e7e2      	b.n	80199d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08019a10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8019a10:	b570      	push	{r4, r5, r6, lr}
 8019a12:	b086      	sub	sp, #24
 8019a14:	ac02      	add	r4, sp, #8
 8019a16:	e884 0006 	stmia.w	r4, {r1, r2}
 8019a1a:	461a      	mov	r2, r3
 8019a1c:	ab0c      	add	r3, sp, #48	; 0x30
 8019a1e:	9305      	str	r3, [sp, #20]
 8019a20:	4b0a      	ldr	r3, [pc, #40]	; (8019a4c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8019a22:	685d      	ldr	r5, [r3, #4]
 8019a24:	1069      	asrs	r1, r5, #1
 8019a26:	07ed      	lsls	r5, r5, #31
 8019a28:	eb00 0601 	add.w	r6, r0, r1
 8019a2c:	bf46      	itte	mi
 8019a2e:	681b      	ldrmi	r3, [r3, #0]
 8019a30:	5841      	ldrmi	r1, [r0, r1]
 8019a32:	681d      	ldrpl	r5, [r3, #0]
 8019a34:	4630      	mov	r0, r6
 8019a36:	bf48      	it	mi
 8019a38:	58cd      	ldrmi	r5, [r1, r3]
 8019a3a:	4621      	mov	r1, r4
 8019a3c:	9b05      	ldr	r3, [sp, #20]
 8019a3e:	9301      	str	r3, [sp, #4]
 8019a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a42:	9300      	str	r3, [sp, #0]
 8019a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a46:	47a8      	blx	r5
 8019a48:	b006      	add	sp, #24
 8019a4a:	bd70      	pop	{r4, r5, r6, pc}
 8019a4c:	2000002c 	.word	0x2000002c

08019a50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a54:	b09d      	sub	sp, #116	; 0x74
 8019a56:	9114      	str	r1, [sp, #80]	; 0x50
 8019a58:	9315      	str	r3, [sp, #84]	; 0x54
 8019a5a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019a5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019a5e:	8809      	ldrh	r1, [r1, #0]
 8019a60:	889b      	ldrh	r3, [r3, #4]
 8019a62:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8019a64:	440b      	add	r3, r1
 8019a66:	9210      	str	r2, [sp, #64]	; 0x40
 8019a68:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8019a6c:	b21b      	sxth	r3, r3
 8019a6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8019a70:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8019a74:	930e      	str	r3, [sp, #56]	; 0x38
 8019a76:	6833      	ldr	r3, [r6, #0]
 8019a78:	7a59      	ldrb	r1, [r3, #9]
 8019a7a:	7a1b      	ldrb	r3, [r3, #8]
 8019a7c:	9113      	str	r1, [sp, #76]	; 0x4c
 8019a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8019a80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019a82:	f9b3 4000 	ldrsh.w	r4, [r3]
 8019a86:	2a00      	cmp	r2, #0
 8019a88:	d059      	beq.n	8019b3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8019a8a:	7c33      	ldrb	r3, [r6, #16]
 8019a8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019a8e:	2b04      	cmp	r3, #4
 8019a90:	bf14      	ite	ne
 8019a92:	2301      	movne	r3, #1
 8019a94:	2302      	moveq	r3, #2
 8019a96:	4413      	add	r3, r2
 8019a98:	f04f 0800 	mov.w	r8, #0
 8019a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8019a9e:	4645      	mov	r5, r8
 8019aa0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8019aa4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8019aa8:	4293      	cmp	r3, r2
 8019aaa:	da75      	bge.n	8019b98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8019aac:	2300      	movs	r3, #0
 8019aae:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019ab0:	6832      	ldr	r2, [r6, #0]
 8019ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8019ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ab6:	428b      	cmp	r3, r1
 8019ab8:	db43      	blt.n	8019b42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8019aba:	6813      	ldr	r3, [r2, #0]
 8019abc:	4610      	mov	r0, r2
 8019abe:	695b      	ldr	r3, [r3, #20]
 8019ac0:	4798      	blx	r3
 8019ac2:	4681      	mov	r9, r0
 8019ac4:	6830      	ldr	r0, [r6, #0]
 8019ac6:	aa1b      	add	r2, sp, #108	; 0x6c
 8019ac8:	4649      	mov	r1, r9
 8019aca:	6803      	ldr	r3, [r0, #0]
 8019acc:	689f      	ldr	r7, [r3, #8]
 8019ace:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8019ad2:	47b8      	blx	r7
 8019ad4:	901a      	str	r0, [sp, #104]	; 0x68
 8019ad6:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8019ada:	45d1      	cmp	r9, sl
 8019adc:	d045      	beq.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019ade:	f242 070b 	movw	r7, #8203	; 0x200b
 8019ae2:	45b9      	cmp	r9, r7
 8019ae4:	d041      	beq.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019ae6:	f1b9 0f00 	cmp.w	r9, #0
 8019aea:	f000 80ee 	beq.w	8019cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019aee:	f1b9 0f0a 	cmp.w	r9, #10
 8019af2:	d057      	beq.n	8019ba4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019af4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019af6:	b383      	cbz	r3, 8019b5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8019af8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8019afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019afe:	2a00      	cmp	r2, #0
 8019b00:	f000 80d2 	beq.w	8019ca8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8019b04:	f1bb 0f00 	cmp.w	fp, #0
 8019b08:	d100      	bne.n	8019b0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8019b0a:	4444      	add	r4, r8
 8019b0c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8019b10:	f1bb 0f01 	cmp.w	fp, #1
 8019b14:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8019b18:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019b1c:	ea48 0803 	orr.w	r8, r8, r3
 8019b20:	d128      	bne.n	8019b74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8019b22:	eba4 0408 	sub.w	r4, r4, r8
 8019b26:	2d00      	cmp	r5, #0
 8019b28:	d143      	bne.n	8019bb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8019b2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019b2c:	eb08 0304 	add.w	r3, r8, r4
 8019b30:	4413      	add	r3, r2
 8019b32:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019b34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019b38:	4293      	cmp	r3, r2
 8019b3a:	da44      	bge.n	8019bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019b3c:	e02b      	b.n	8019b96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8019b3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b40:	e7aa      	b.n	8019a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8019b42:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8019b46:	4659      	mov	r1, fp
 8019b48:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8019b4a:	9301      	str	r3, [sp, #4]
 8019b4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8019b4e:	9300      	str	r3, [sp, #0]
 8019b50:	ab1a      	add	r3, sp, #104	; 0x68
 8019b52:	f002 fa93 	bl	801c07c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019b56:	4681      	mov	r9, r0
 8019b58:	e7bd      	b.n	8019ad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8019b5a:	6830      	ldr	r0, [r6, #0]
 8019b5c:	6803      	ldr	r3, [r0, #0]
 8019b5e:	691b      	ldr	r3, [r3, #16]
 8019b60:	4798      	blx	r3
 8019b62:	4550      	cmp	r0, sl
 8019b64:	d001      	beq.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019b66:	42b8      	cmp	r0, r7
 8019b68:	d1c8      	bne.n	8019afc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b6c:	464d      	mov	r5, r9
 8019b6e:	3301      	adds	r3, #1
 8019b70:	930c      	str	r3, [sp, #48]	; 0x30
 8019b72:	e797      	b.n	8019aa4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8019b74:	2d00      	cmp	r5, #0
 8019b76:	f000 80aa 	beq.w	8019cce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8019b7a:	f1bb 0f00 	cmp.w	fp, #0
 8019b7e:	d118      	bne.n	8019bb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8019b80:	6830      	ldr	r0, [r6, #0]
 8019b82:	4629      	mov	r1, r5
 8019b84:	6803      	ldr	r3, [r0, #0]
 8019b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b88:	4798      	blx	r3
 8019b8a:	4404      	add	r4, r0
 8019b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019b90:	1ae3      	subs	r3, r4, r3
 8019b92:	4293      	cmp	r3, r2
 8019b94:	dd17      	ble.n	8019bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019b96:	464d      	mov	r5, r9
 8019b98:	2d00      	cmp	r5, #0
 8019b9a:	f000 8096 	beq.w	8019cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019b9e:	2d0a      	cmp	r5, #10
 8019ba0:	f040 8084 	bne.w	8019cac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8019ba4:	250a      	movs	r5, #10
 8019ba6:	fab5 f085 	clz	r0, r5
 8019baa:	0940      	lsrs	r0, r0, #5
 8019bac:	b01d      	add	sp, #116	; 0x74
 8019bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb2:	6830      	ldr	r0, [r6, #0]
 8019bb4:	4629      	mov	r1, r5
 8019bb6:	6803      	ldr	r3, [r0, #0]
 8019bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bba:	4798      	blx	r3
 8019bbc:	f1bb 0f01 	cmp.w	fp, #1
 8019bc0:	eba4 0400 	sub.w	r4, r4, r0
 8019bc4:	d0b1      	beq.n	8019b2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019bc6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8019bc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019bca:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019bce:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019bd2:	7b43      	ldrb	r3, [r0, #13]
 8019bd4:	4421      	add	r1, r4
 8019bd6:	015b      	lsls	r3, r3, #5
 8019bd8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019bdc:	7983      	ldrb	r3, [r0, #6]
 8019bde:	4313      	orrs	r3, r2
 8019be0:	440b      	add	r3, r1
 8019be2:	42ab      	cmp	r3, r5
 8019be4:	dbc1      	blt.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019be8:	4299      	cmp	r1, r3
 8019bea:	dabe      	bge.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019bec:	6830      	ldr	r0, [r6, #0]
 8019bee:	42a5      	cmp	r5, r4
 8019bf0:	6803      	ldr	r3, [r0, #0]
 8019bf2:	bfcc      	ite	gt
 8019bf4:	1b2d      	subgt	r5, r5, r4
 8019bf6:	2500      	movle	r5, #0
 8019bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bfa:	bfc8      	it	gt
 8019bfc:	b2ad      	uxthgt	r5, r5
 8019bfe:	4798      	blx	r3
 8019c00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019c02:	4935      	ldr	r1, [pc, #212]	; (8019cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8019c04:	7b5a      	ldrb	r2, [r3, #13]
 8019c06:	f893 e008 	ldrb.w	lr, [r3, #8]
 8019c0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8019c0e:	bf18      	it	ne
 8019c10:	468c      	movne	ip, r1
 8019c12:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019c14:	bf08      	it	eq
 8019c16:	f04f 0c00 	moveq.w	ip, #0
 8019c1a:	4408      	add	r0, r1
 8019c1c:	00d1      	lsls	r1, r2, #3
 8019c1e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019c22:	ea41 070e 	orr.w	r7, r1, lr
 8019c26:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019c28:	ea4c 0707 	orr.w	r7, ip, r7
 8019c2c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019c30:	1bc7      	subs	r7, r0, r7
 8019c32:	b2bf      	uxth	r7, r7
 8019c34:	fa0f fa87 	sxth.w	sl, r7
 8019c38:	4551      	cmp	r1, sl
 8019c3a:	dd33      	ble.n	8019ca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8019c3c:	0112      	lsls	r2, r2, #4
 8019c3e:	79d8      	ldrb	r0, [r3, #7]
 8019c40:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019c44:	4302      	orrs	r2, r0
 8019c46:	4492      	add	sl, r2
 8019c48:	4551      	cmp	r1, sl
 8019c4a:	dc8e      	bgt.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019c4c:	1bcf      	subs	r7, r1, r7
 8019c4e:	468a      	mov	sl, r1
 8019c50:	b2bf      	uxth	r7, r7
 8019c52:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c56:	6830      	ldr	r0, [r6, #0]
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	6801      	ldr	r1, [r0, #0]
 8019c5c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8019c5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019c60:	9311      	str	r3, [sp, #68]	; 0x44
 8019c62:	9216      	str	r2, [sp, #88]	; 0x58
 8019c64:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019c66:	4788      	blx	r1
 8019c68:	79b1      	ldrb	r1, [r6, #6]
 8019c6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8019c6e:	7bb1      	ldrb	r1, [r6, #14]
 8019c70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019c72:	910a      	str	r1, [sp, #40]	; 0x28
 8019c74:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8019c78:	9109      	str	r1, [sp, #36]	; 0x24
 8019c7a:	68b1      	ldr	r1, [r6, #8]
 8019c7c:	9305      	str	r3, [sp, #20]
 8019c7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019c80:	9206      	str	r2, [sp, #24]
 8019c82:	e9cd a501 	strd	sl, r5, [sp, #4]
 8019c86:	4425      	add	r5, r4
 8019c88:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019c8c:	b22d      	sxth	r5, r5
 8019c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c90:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019c94:	9500      	str	r5, [sp, #0]
 8019c96:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019c98:	681a      	ldr	r2, [r3, #0]
 8019c9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019c9c:	685b      	ldr	r3, [r3, #4]
 8019c9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019ca0:	47a8      	blx	r5
 8019ca2:	e762      	b.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019ca4:	2700      	movs	r7, #0
 8019ca6:	e7d4      	b.n	8019c52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8019ca8:	4690      	mov	r8, r2
 8019caa:	e75e      	b.n	8019b6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019cac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019cae:	3401      	adds	r4, #1
 8019cb0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019cb2:	429c      	cmp	r4, r3
 8019cb4:	f6bf af77 	bge.w	8019ba6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8019cb8:	4659      	mov	r1, fp
 8019cba:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8019cbc:	f002 f96a 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	b110      	cbz	r0, 8019cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019cc4:	280a      	cmp	r0, #10
 8019cc6:	d1f2      	bne.n	8019cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8019cc8:	e76c      	b.n	8019ba4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019cca:	2500      	movs	r5, #0
 8019ccc:	e76b      	b.n	8019ba6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8019cce:	f1bb 0f00 	cmp.w	fp, #0
 8019cd2:	f43f af5b 	beq.w	8019b8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8019cd6:	e776      	b.n	8019bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019cd8:	fffffe00 	.word	0xfffffe00

08019cdc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019cdc:	b530      	push	{r4, r5, lr}
 8019cde:	8a44      	ldrh	r4, [r0, #18]
 8019ce0:	8ac5      	ldrh	r5, [r0, #22]
 8019ce2:	82c3      	strh	r3, [r0, #22]
 8019ce4:	442c      	add	r4, r5
 8019ce6:	1ae4      	subs	r4, r4, r3
 8019ce8:	8b03      	ldrh	r3, [r0, #24]
 8019cea:	8244      	strh	r4, [r0, #18]
 8019cec:	8a84      	ldrh	r4, [r0, #20]
 8019cee:	4422      	add	r2, r4
 8019cf0:	440c      	add	r4, r1
 8019cf2:	1a59      	subs	r1, r3, r1
 8019cf4:	8342      	strh	r2, [r0, #26]
 8019cf6:	8284      	strh	r4, [r0, #20]
 8019cf8:	8301      	strh	r1, [r0, #24]
 8019cfa:	bd30      	pop	{r4, r5, pc}

08019cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d00:	7a45      	ldrb	r5, [r0, #9]
 8019d02:	b085      	sub	sp, #20
 8019d04:	4604      	mov	r4, r0
 8019d06:	4689      	mov	r9, r1
 8019d08:	1eeb      	subs	r3, r5, #3
 8019d0a:	b2db      	uxtb	r3, r3
 8019d0c:	b329      	cbz	r1, 8019d5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8019d0e:	2b01      	cmp	r3, #1
 8019d10:	d921      	bls.n	8019d56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8019d12:	1e69      	subs	r1, r5, #1
 8019d14:	f1d1 0b00 	rsbs	fp, r1, #0
 8019d18:	eb4b 0b01 	adc.w	fp, fp, r1
 8019d1c:	1eaa      	subs	r2, r5, #2
 8019d1e:	2500      	movs	r5, #0
 8019d20:	4253      	negs	r3, r2
 8019d22:	9500      	str	r5, [sp, #0]
 8019d24:	4153      	adcs	r3, r2
 8019d26:	9301      	str	r3, [sp, #4]
 8019d28:	2600      	movs	r6, #0
 8019d2a:	f242 080b 	movw	r8, #8203	; 0x200b
 8019d2e:	8266      	strh	r6, [r4, #18]
 8019d30:	82a6      	strh	r6, [r4, #20]
 8019d32:	2300      	movs	r3, #0
 8019d34:	68e2      	ldr	r2, [r4, #12]
 8019d36:	7a21      	ldrb	r1, [r4, #8]
 8019d38:	9303      	str	r3, [sp, #12]
 8019d3a:	ab03      	add	r3, sp, #12
 8019d3c:	6860      	ldr	r0, [r4, #4]
 8019d3e:	8827      	ldrh	r7, [r4, #0]
 8019d40:	f002 f968 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019d44:	8020      	strh	r0, [r4, #0]
 8019d46:	b9b0      	cbnz	r0, 8019d76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8019d48:	8b22      	ldrh	r2, [r4, #24]
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	4620      	mov	r0, r4
 8019d50:	f7ff ffc4 	bl	8019cdc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019d54:	e062      	b.n	8019e1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8019d56:	468b      	mov	fp, r1
 8019d58:	e7e0      	b.n	8019d1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	f105 35ff 	add.w	r5, r5, #4294967295
 8019d60:	9101      	str	r1, [sp, #4]
 8019d62:	468b      	mov	fp, r1
 8019d64:	bf8c      	ite	hi
 8019d66:	2300      	movhi	r3, #0
 8019d68:	2301      	movls	r3, #1
 8019d6a:	2d01      	cmp	r5, #1
 8019d6c:	9300      	str	r3, [sp, #0]
 8019d6e:	bf8c      	ite	hi
 8019d70:	2500      	movhi	r5, #0
 8019d72:	2501      	movls	r5, #1
 8019d74:	e7d8      	b.n	8019d28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8019d76:	8ae3      	ldrh	r3, [r4, #22]
 8019d78:	280a      	cmp	r0, #10
 8019d7a:	f103 0301 	add.w	r3, r3, #1
 8019d7e:	82e3      	strh	r3, [r4, #22]
 8019d80:	d0e2      	beq.n	8019d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8019d82:	9a03      	ldr	r2, [sp, #12]
 8019d84:	b972      	cbnz	r2, 8019da4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8019d86:	4540      	cmp	r0, r8
 8019d88:	d1d3      	bne.n	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019d8a:	8823      	ldrh	r3, [r4, #0]
 8019d8c:	8b21      	ldrh	r1, [r4, #24]
 8019d8e:	2b20      	cmp	r3, #32
 8019d90:	d001      	beq.n	8019d96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8019d92:	4543      	cmp	r3, r8
 8019d94:	d11d      	bne.n	8019dd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019d96:	2f20      	cmp	r7, #32
 8019d98:	d002      	beq.n	8019da0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019d9a:	4547      	cmp	r7, r8
 8019d9c:	bf18      	it	ne
 8019d9e:	460e      	movne	r6, r1
 8019da0:	2001      	movs	r0, #1
 8019da2:	e017      	b.n	8019dd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8019da4:	4540      	cmp	r0, r8
 8019da6:	d012      	beq.n	8019dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8019da8:	8893      	ldrh	r3, [r2, #4]
 8019daa:	4639      	mov	r1, r7
 8019dac:	8023      	strh	r3, [r4, #0]
 8019dae:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8019db2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8019db6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8019dba:	ea4a 0a00 	orr.w	sl, sl, r0
 8019dbe:	68e0      	ldr	r0, [r4, #12]
 8019dc0:	6803      	ldr	r3, [r0, #0]
 8019dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dc4:	4798      	blx	r3
 8019dc6:	eb0a 0200 	add.w	r2, sl, r0
 8019dca:	b292      	uxth	r2, r2
 8019dcc:	e7dd      	b.n	8019d8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8019dce:	2200      	movs	r2, #0
 8019dd0:	e7db      	b.n	8019d8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8019dd2:	2000      	movs	r0, #0
 8019dd4:	440a      	add	r2, r1
 8019dd6:	8aa3      	ldrh	r3, [r4, #20]
 8019dd8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019ddc:	b292      	uxth	r2, r2
 8019dde:	8322      	strh	r2, [r4, #24]
 8019de0:	4413      	add	r3, r2
 8019de2:	f1b9 0f00 	cmp.w	r9, #0
 8019de6:	d022      	beq.n	8019e2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8019de8:	f1bb 0f00 	cmp.w	fp, #0
 8019dec:	d102      	bne.n	8019df4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8019dee:	9901      	ldr	r1, [sp, #4]
 8019df0:	b149      	cbz	r1, 8019e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8019df2:	b140      	cbz	r0, 8019e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8019df4:	8ba1      	ldrh	r1, [r4, #28]
 8019df6:	4419      	add	r1, r3
 8019df8:	458c      	cmp	ip, r1
 8019dfa:	da12      	bge.n	8019e22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8019dfc:	8a61      	ldrh	r1, [r4, #18]
 8019dfe:	b181      	cbz	r1, 8019e22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8019e00:	4563      	cmp	r3, ip
 8019e02:	dd96      	ble.n	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e04:	e004      	b.n	8019e10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8019e06:	4563      	cmp	r3, ip
 8019e08:	dd93      	ble.n	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e0a:	8a63      	ldrh	r3, [r4, #18]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d090      	beq.n	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e10:	2301      	movs	r3, #1
 8019e12:	8ba2      	ldrh	r2, [r4, #28]
 8019e14:	77a3      	strb	r3, [r4, #30]
 8019e16:	8b63      	ldrh	r3, [r4, #26]
 8019e18:	4413      	add	r3, r2
 8019e1a:	8363      	strh	r3, [r4, #26]
 8019e1c:	b005      	add	sp, #20
 8019e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e22:	2300      	movs	r3, #0
 8019e24:	4611      	mov	r1, r2
 8019e26:	4620      	mov	r0, r4
 8019e28:	f7ff ff58 	bl	8019cdc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019e2c:	e781      	b.n	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e2e:	4563      	cmp	r3, ip
 8019e30:	dd16      	ble.n	8019e60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8019e32:	9b00      	ldr	r3, [sp, #0]
 8019e34:	b113      	cbz	r3, 8019e3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019e36:	2301      	movs	r3, #1
 8019e38:	460a      	mov	r2, r1
 8019e3a:	e787      	b.n	8019d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8019e3c:	2d00      	cmp	r5, #0
 8019e3e:	f43f af78 	beq.w	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e42:	2800      	cmp	r0, #0
 8019e44:	f47f af75 	bne.w	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e48:	2f20      	cmp	r7, #32
 8019e4a:	d001      	beq.n	8019e50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8019e4c:	4547      	cmp	r7, r8
 8019e4e:	d102      	bne.n	8019e56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8019e50:	2301      	movs	r3, #1
 8019e52:	4632      	mov	r2, r6
 8019e54:	e77b      	b.n	8019d4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8019e56:	8a63      	ldrh	r3, [r4, #18]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	f43f af6a 	beq.w	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e5e:	e7dd      	b.n	8019e1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8019e60:	2800      	cmp	r0, #0
 8019e62:	f47f af66 	bne.w	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e66:	2f20      	cmp	r7, #32
 8019e68:	d002      	beq.n	8019e70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8019e6a:	4547      	cmp	r7, r8
 8019e6c:	f47f af61 	bne.w	8019d32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019e70:	2301      	movs	r3, #1
 8019e72:	4632      	mov	r2, r6
 8019e74:	e7d7      	b.n	8019e26 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08019e76 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019e76:	b570      	push	{r4, r5, r6, lr}
 8019e78:	4606      	mov	r6, r0
 8019e7a:	b08a      	sub	sp, #40	; 0x28
 8019e7c:	4615      	mov	r5, r2
 8019e7e:	b191      	cbz	r1, 8019ea6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8019e80:	2401      	movs	r4, #1
 8019e82:	e9cd 3100 	strd	r3, r1, [sp]
 8019e86:	4613      	mov	r3, r2
 8019e88:	4601      	mov	r1, r0
 8019e8a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019e8e:	a802      	add	r0, sp, #8
 8019e90:	f7ff fd20 	bl	80198d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019e94:	2100      	movs	r1, #0
 8019e96:	a802      	add	r0, sp, #8
 8019e98:	f7ff ff30 	bl	8019cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019e9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019ea0:	b173      	cbz	r3, 8019ec0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8019ea2:	3401      	adds	r4, #1
 8019ea4:	e7f6      	b.n	8019e94 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8019ea6:	2401      	movs	r4, #1
 8019ea8:	4611      	mov	r1, r2
 8019eaa:	f002 f873 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019eae:	280a      	cmp	r0, #10
 8019eb0:	4629      	mov	r1, r5
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	bf08      	it	eq
 8019eb6:	3401      	addeq	r4, #1
 8019eb8:	f002 f86c 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019ebc:	2800      	cmp	r0, #0
 8019ebe:	d1f6      	bne.n	8019eae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8019ec0:	b2a0      	uxth	r0, r4
 8019ec2:	b00a      	add	sp, #40	; 0x28
 8019ec4:	bd70      	pop	{r4, r5, r6, pc}

08019ec6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eca:	b0db      	sub	sp, #364	; 0x16c
 8019ecc:	468a      	mov	sl, r1
 8019ece:	461c      	mov	r4, r3
 8019ed0:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8019ed4:	9009      	str	r0, [sp, #36]	; 0x24
 8019ed6:	f1bb 0f00 	cmp.w	fp, #0
 8019eda:	f000 80c7 	beq.w	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	f000 80c3 	beq.w	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019ee6:	7ba3      	ldrb	r3, [r4, #14]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	f000 80bf 	beq.w	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019eee:	af0c      	add	r7, sp, #48	; 0x30
 8019ef0:	6810      	ldr	r0, [r2, #0]
 8019ef2:	6851      	ldr	r1, [r2, #4]
 8019ef4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8019ef8:	463b      	mov	r3, r7
 8019efa:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8019efe:	c303      	stmia	r3!, {r0, r1}
 8019f00:	2100      	movs	r1, #0
 8019f02:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8019f06:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019f0a:	4638      	mov	r0, r7
 8019f0c:	910e      	str	r1, [sp, #56]	; 0x38
 8019f0e:	a90e      	add	r1, sp, #56	; 0x38
 8019f10:	79a2      	ldrb	r2, [r4, #6]
 8019f12:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019f16:	f7ff fd49 	bl	80199ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019f1a:	a90e      	add	r1, sp, #56	; 0x38
 8019f1c:	79a2      	ldrb	r2, [r4, #6]
 8019f1e:	4608      	mov	r0, r1
 8019f20:	f7ff fd44 	bl	80199ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019f24:	4648      	mov	r0, r9
 8019f26:	f001 fef3 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 8019f2a:	6820      	ldr	r0, [r4, #0]
 8019f2c:	6803      	ldr	r3, [r0, #0]
 8019f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f30:	4798      	blx	r3
 8019f32:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019f34:	4603      	mov	r3, r0
 8019f36:	4659      	mov	r1, fp
 8019f38:	4648      	mov	r0, r9
 8019f3a:	f001 ff06 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019f3e:	a82e      	add	r0, sp, #184	; 0xb8
 8019f40:	f001 fee6 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 8019f44:	f894 8004 	ldrb.w	r8, [r4, #4]
 8019f48:	f1b8 0f00 	cmp.w	r8, #0
 8019f4c:	d009      	beq.n	8019f62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019f4e:	6820      	ldr	r0, [r4, #0]
 8019f50:	6803      	ldr	r3, [r0, #0]
 8019f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f54:	4798      	blx	r3
 8019f56:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019f58:	4603      	mov	r3, r0
 8019f5a:	4659      	mov	r1, fp
 8019f5c:	a82e      	add	r0, sp, #184	; 0xb8
 8019f5e:	f001 fef4 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019f62:	6820      	ldr	r0, [r4, #0]
 8019f64:	6803      	ldr	r3, [r0, #0]
 8019f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f68:	4798      	blx	r3
 8019f6a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019f6e:	182e      	adds	r6, r5, r0
 8019f70:	2e00      	cmp	r6, #0
 8019f72:	dd45      	ble.n	801a000 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8019f74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019f78:	4283      	cmp	r3, r0
 8019f7a:	db41      	blt.n	801a000 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8019f7c:	441d      	add	r5, r3
 8019f7e:	fb95 f5f6 	sdiv	r5, r5, r6
 8019f82:	a844      	add	r0, sp, #272	; 0x110
 8019f84:	f001 fec4 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 8019f88:	7c23      	ldrb	r3, [r4, #16]
 8019f8a:	b14b      	cbz	r3, 8019fa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8019f8c:	6820      	ldr	r0, [r4, #0]
 8019f8e:	6803      	ldr	r3, [r0, #0]
 8019f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f92:	4798      	blx	r3
 8019f94:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019f96:	4603      	mov	r3, r0
 8019f98:	4659      	mov	r1, fp
 8019f9a:	a844      	add	r0, sp, #272	; 0x110
 8019f9c:	f001 fed5 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019fa0:	7c21      	ldrb	r1, [r4, #16]
 8019fa2:	a810      	add	r0, sp, #64	; 0x40
 8019fa4:	7963      	ldrb	r3, [r4, #5]
 8019fa6:	9101      	str	r1, [sp, #4]
 8019fa8:	6821      	ldr	r1, [r4, #0]
 8019faa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8019fae:	9100      	str	r1, [sp, #0]
 8019fb0:	a944      	add	r1, sp, #272	; 0x110
 8019fb2:	f7ff fc8f 	bl	80198d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019fb6:	7c23      	ldrb	r3, [r4, #16]
 8019fb8:	bb23      	cbnz	r3, 801a004 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8019fba:	fa1f fb86 	uxth.w	fp, r6
 8019fbe:	2d00      	cmp	r5, #0
 8019fc0:	dd57      	ble.n	801a072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8019fc2:	7961      	ldrb	r1, [r4, #5]
 8019fc4:	4648      	mov	r0, r9
 8019fc6:	f001 ffe5 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	f1b8 0f00 	cmp.w	r8, #0
 8019fd0:	d005      	beq.n	8019fde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8019fd2:	9008      	str	r0, [sp, #32]
 8019fd4:	a82e      	add	r0, sp, #184	; 0xb8
 8019fd6:	7961      	ldrb	r1, [r4, #5]
 8019fd8:	f001 ffdc 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019fdc:	9b08      	ldr	r3, [sp, #32]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d044      	beq.n	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019fe2:	2b0a      	cmp	r3, #10
 8019fe4:	d1eb      	bne.n	8019fbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8019fe6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019fea:	3d01      	subs	r5, #1
 8019fec:	445b      	add	r3, fp
 8019fee:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019ff2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019ff6:	eba3 030b 	sub.w	r3, r3, fp
 8019ffa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019ffe:	e7de      	b.n	8019fbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801a000:	2500      	movs	r5, #0
 801a002:	e7be      	b.n	8019f82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801a004:	0073      	lsls	r3, r6, #1
 801a006:	9308      	str	r3, [sp, #32]
 801a008:	2d00      	cmp	r5, #0
 801a00a:	dd32      	ble.n	801a072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801a00c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a010:	a810      	add	r0, sp, #64	; 0x40
 801a012:	9b08      	ldr	r3, [sp, #32]
 801a014:	428b      	cmp	r3, r1
 801a016:	bfd4      	ite	le
 801a018:	2100      	movle	r1, #0
 801a01a:	2101      	movgt	r1, #1
 801a01c:	f7ff fe6e 	bl	8019cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a020:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801a024:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a028:	fa1f fb83 	uxth.w	fp, r3
 801a02c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a030:	459b      	cmp	fp, r3
 801a032:	d00b      	beq.n	801a04c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a034:	7961      	ldrb	r1, [r4, #5]
 801a036:	4648      	mov	r0, r9
 801a038:	f001 ffac 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a03c:	f1b8 0f00 	cmp.w	r8, #0
 801a040:	d0f0      	beq.n	801a024 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801a042:	7961      	ldrb	r1, [r4, #5]
 801a044:	a82e      	add	r0, sp, #184	; 0xb8
 801a046:	f001 ffa5 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a04a:	e7eb      	b.n	801a024 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801a04c:	b2b3      	uxth	r3, r6
 801a04e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a052:	3d01      	subs	r5, #1
 801a054:	441a      	add	r2, r3
 801a056:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801a05a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a05e:	1ad3      	subs	r3, r2, r3
 801a060:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a064:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d1cd      	bne.n	801a008 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801a06c:	b05b      	add	sp, #364	; 0x16c
 801a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a072:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801a076:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801a07a:	7c23      	ldrb	r3, [r4, #16]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d05f      	beq.n	801a140 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801a080:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a084:	a810      	add	r0, sp, #64	; 0x40
 801a086:	458b      	cmp	fp, r1
 801a088:	bfd4      	ite	le
 801a08a:	2100      	movle	r1, #0
 801a08c:	2101      	movgt	r1, #1
 801a08e:	f7ff fe35 	bl	8019cfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a092:	f1b8 0f00 	cmp.w	r8, #0
 801a096:	d04c      	beq.n	801a132 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a098:	7c23      	ldrb	r3, [r4, #16]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d053      	beq.n	801a146 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801a09e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801a0a2:	7922      	ldrb	r2, [r4, #4]
 801a0a4:	2a01      	cmp	r2, #1
 801a0a6:	d13c      	bne.n	801a122 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a0a8:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801a0ac:	1ac0      	subs	r0, r0, r3
 801a0ae:	2302      	movs	r3, #2
 801a0b0:	fb90 f0f3 	sdiv	r0, r0, r3
 801a0b4:	b200      	sxth	r0, r0
 801a0b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a0ba:	4418      	add	r0, r3
 801a0bc:	7c23      	ldrb	r3, [r4, #16]
 801a0be:	8028      	strh	r0, [r5, #0]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d03a      	beq.n	801a13a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801a0c4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801a0c8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801a0cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a0d0:	f8cd 9010 	str.w	r9, [sp, #16]
 801a0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a0d6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a0da:	2200      	movs	r2, #0
 801a0dc:	2100      	movs	r1, #0
 801a0de:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801a0e2:	e9cd 5700 	strd	r5, r7, [sp]
 801a0e6:	4652      	mov	r2, sl
 801a0e8:	f7ff fcb2 	bl	8019a50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a0ec:	2800      	cmp	r0, #0
 801a0ee:	d1bd      	bne.n	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a0f0:	b2b2      	uxth	r2, r6
 801a0f2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a0f6:	4611      	mov	r1, r2
 801a0f8:	4413      	add	r3, r2
 801a0fa:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a0fe:	b21b      	sxth	r3, r3
 801a100:	1a52      	subs	r2, r2, r1
 801a102:	7c21      	ldrb	r1, [r4, #16]
 801a104:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a108:	b212      	sxth	r2, r2
 801a10a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a10e:	b109      	cbz	r1, 801a114 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a110:	42b2      	cmp	r2, r6
 801a112:	dbab      	blt.n	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a114:	887a      	ldrh	r2, [r7, #2]
 801a116:	88f9      	ldrh	r1, [r7, #6]
 801a118:	440a      	add	r2, r1
 801a11a:	b212      	sxth	r2, r2
 801a11c:	4293      	cmp	r3, r2
 801a11e:	ddac      	ble.n	801a07a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801a120:	e7a4      	b.n	801a06c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a122:	2a02      	cmp	r2, #2
 801a124:	d107      	bne.n	801a136 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a126:	7be2      	ldrb	r2, [r4, #15]
 801a128:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801a12c:	1a80      	subs	r0, r0, r2
 801a12e:	1ac0      	subs	r0, r0, r3
 801a130:	e7c0      	b.n	801a0b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801a132:	7be0      	ldrb	r0, [r4, #15]
 801a134:	e7bf      	b.n	801a0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801a136:	2000      	movs	r0, #0
 801a138:	e7bd      	b.n	801a0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801a13a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a13e:	e7c3      	b.n	801a0c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801a140:	f1b8 0f00 	cmp.w	r8, #0
 801a144:	d0f5      	beq.n	801a132 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a146:	2300      	movs	r3, #0
 801a148:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a14c:	6821      	ldr	r1, [r4, #0]
 801a14e:	a82e      	add	r0, sp, #184	; 0xb8
 801a150:	f7ff fbfa 	bl	8019948 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a154:	b203      	sxth	r3, r0
 801a156:	e7a4      	b.n	801a0a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801a158 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a158:	2b02      	cmp	r3, #2
 801a15a:	b510      	push	{r4, lr}
 801a15c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a160:	d00b      	beq.n	801a17a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a162:	2b03      	cmp	r3, #3
 801a164:	d00e      	beq.n	801a184 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a166:	2b01      	cmp	r3, #1
 801a168:	d001      	beq.n	801a16e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a16a:	1860      	adds	r0, r4, r1
 801a16c:	bd10      	pop	{r4, pc}
 801a16e:	8880      	ldrh	r0, [r0, #4]
 801a170:	4420      	add	r0, r4
 801a172:	b200      	sxth	r0, r0
 801a174:	1a80      	subs	r0, r0, r2
 801a176:	3801      	subs	r0, #1
 801a178:	e7f8      	b.n	801a16c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a17a:	8880      	ldrh	r0, [r0, #4]
 801a17c:	4420      	add	r0, r4
 801a17e:	b200      	sxth	r0, r0
 801a180:	1a40      	subs	r0, r0, r1
 801a182:	e7f8      	b.n	801a176 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a184:	18a0      	adds	r0, r4, r2
 801a186:	e7f1      	b.n	801a16c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a188 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a188:	2b02      	cmp	r3, #2
 801a18a:	b510      	push	{r4, lr}
 801a18c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a190:	d006      	beq.n	801a1a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a192:	2b03      	cmp	r3, #3
 801a194:	d00a      	beq.n	801a1ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a196:	2b01      	cmp	r3, #1
 801a198:	bf14      	ite	ne
 801a19a:	18a0      	addne	r0, r4, r2
 801a19c:	1860      	addeq	r0, r4, r1
 801a19e:	bd10      	pop	{r4, pc}
 801a1a0:	88c0      	ldrh	r0, [r0, #6]
 801a1a2:	4420      	add	r0, r4
 801a1a4:	b200      	sxth	r0, r0
 801a1a6:	1a80      	subs	r0, r0, r2
 801a1a8:	3801      	subs	r0, #1
 801a1aa:	e7f8      	b.n	801a19e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a1ac:	88c0      	ldrh	r0, [r0, #6]
 801a1ae:	4420      	add	r0, r4
 801a1b0:	b200      	sxth	r0, r0
 801a1b2:	1a40      	subs	r0, r0, r1
 801a1b4:	e7f8      	b.n	801a1a8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a1b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a1b8:	4b01      	ldr	r3, [pc, #4]	; (801a1c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	601a      	str	r2, [r3, #0]
 801a1be:	4770      	bx	lr
 801a1c0:	2000c664 	.word	0x2000c664

0801a1c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801a1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1c6:	1e05      	subs	r5, r0, #0
 801a1c8:	f04f 0601 	mov.w	r6, #1
 801a1cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a1d0:	bfba      	itte	lt
 801a1d2:	f04f 37ff 	movlt.w	r7, #4294967295
 801a1d6:	426d      	neglt	r5, r5
 801a1d8:	2701      	movge	r7, #1
 801a1da:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801a1de:	f1be 0f00 	cmp.w	lr, #0
 801a1e2:	bfbc      	itt	lt
 801a1e4:	f1ce 0e00 	rsblt	lr, lr, #0
 801a1e8:	427f      	neglt	r7, r7
 801a1ea:	2c00      	cmp	r4, #0
 801a1ec:	fa4e f001 	asr.w	r0, lr, r1
 801a1f0:	fa06 f101 	lsl.w	r1, r6, r1
 801a1f4:	bfbc      	itt	lt
 801a1f6:	4264      	neglt	r4, r4
 801a1f8:	427f      	neglt	r7, r7
 801a1fa:	3901      	subs	r1, #1
 801a1fc:	ea01 010e 	and.w	r1, r1, lr
 801a200:	434d      	muls	r5, r1
 801a202:	f8dc 1000 	ldr.w	r1, [ip]
 801a206:	fb03 1300 	mla	r3, r3, r0, r1
 801a20a:	fb95 f1f4 	sdiv	r1, r5, r4
 801a20e:	fb04 5511 	mls	r5, r4, r1, r5
 801a212:	441d      	add	r5, r3
 801a214:	fb95 f3f4 	sdiv	r3, r5, r4
 801a218:	4419      	add	r1, r3
 801a21a:	fb04 5413 	mls	r4, r4, r3, r5
 801a21e:	fb02 1000 	mla	r0, r2, r0, r1
 801a222:	f8cc 4000 	str.w	r4, [ip]
 801a226:	4378      	muls	r0, r7
 801a228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a22c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a230:	4c24      	ldr	r4, [pc, #144]	; (801a2c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801a232:	b086      	sub	sp, #24
 801a234:	4605      	mov	r5, r0
 801a236:	6807      	ldr	r7, [r0, #0]
 801a238:	69a3      	ldr	r3, [r4, #24]
 801a23a:	b92b      	cbnz	r3, 801a248 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801a23c:	6840      	ldr	r0, [r0, #4]
 801a23e:	e9c5 7000 	strd	r7, r0, [r5]
 801a242:	b006      	add	sp, #24
 801a244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a248:	f04f 0802 	mov.w	r8, #2
 801a24c:	68a2      	ldr	r2, [r4, #8]
 801a24e:	ae06      	add	r6, sp, #24
 801a250:	6820      	ldr	r0, [r4, #0]
 801a252:	fb93 f1f8 	sdiv	r1, r3, r8
 801a256:	440a      	add	r2, r1
 801a258:	69e1      	ldr	r1, [r4, #28]
 801a25a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a25e:	9700      	str	r7, [sp, #0]
 801a260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a262:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801a266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a268:	f7ff ffac 	bl	801a1c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a26c:	69a3      	ldr	r3, [r4, #24]
 801a26e:	4607      	mov	r7, r0
 801a270:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a272:	9301      	str	r3, [sp, #4]
 801a274:	686b      	ldr	r3, [r5, #4]
 801a276:	6a21      	ldr	r1, [r4, #32]
 801a278:	9300      	str	r3, [sp, #0]
 801a27a:	9602      	str	r6, [sp, #8]
 801a27c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a27e:	6860      	ldr	r0, [r4, #4]
 801a280:	f7ff ffa0 	bl	801a1c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a284:	69a2      	ldr	r2, [r4, #24]
 801a286:	6963      	ldr	r3, [r4, #20]
 801a288:	4407      	add	r7, r0
 801a28a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a28c:	68e0      	ldr	r0, [r4, #12]
 801a28e:	fb92 f8f8 	sdiv	r8, r2, r8
 801a292:	4443      	add	r3, r8
 801a294:	9305      	str	r3, [sp, #20]
 801a296:	682b      	ldr	r3, [r5, #0]
 801a298:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801a29c:	9300      	str	r3, [sp, #0]
 801a29e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a2a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a2a2:	f7ff ff8f 	bl	801a1c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a2a6:	69a3      	ldr	r3, [r4, #24]
 801a2a8:	4680      	mov	r8, r0
 801a2aa:	9602      	str	r6, [sp, #8]
 801a2ac:	9301      	str	r3, [sp, #4]
 801a2ae:	686b      	ldr	r3, [r5, #4]
 801a2b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a2b2:	9300      	str	r3, [sp, #0]
 801a2b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a2b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a2b8:	6920      	ldr	r0, [r4, #16]
 801a2ba:	f7ff ff83 	bl	801a1c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a2be:	4440      	add	r0, r8
 801a2c0:	e7bd      	b.n	801a23e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801a2c2:	bf00      	nop
 801a2c4:	2000c668 	.word	0x2000c668

0801a2c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a2c8:	4b07      	ldr	r3, [pc, #28]	; (801a2e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a2ca:	b510      	push	{r4, lr}
 801a2cc:	781b      	ldrb	r3, [r3, #0]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d108      	bne.n	801a2e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a2d2:	4b06      	ldr	r3, [pc, #24]	; (801a2ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a2d4:	880c      	ldrh	r4, [r1, #0]
 801a2d6:	881b      	ldrh	r3, [r3, #0]
 801a2d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a2dc:	3b01      	subs	r3, #1
 801a2de:	1b1b      	subs	r3, r3, r4
 801a2e0:	8003      	strh	r3, [r0, #0]
 801a2e2:	800a      	strh	r2, [r1, #0]
 801a2e4:	bd10      	pop	{r4, pc}
 801a2e6:	bf00      	nop
 801a2e8:	2000c634 	.word	0x2000c634
 801a2ec:	2000c638 	.word	0x2000c638

0801a2f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a2f0:	4b0a      	ldr	r3, [pc, #40]	; (801a31c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a2f2:	b510      	push	{r4, lr}
 801a2f4:	781b      	ldrb	r3, [r3, #0]
 801a2f6:	2b01      	cmp	r3, #1
 801a2f8:	d10e      	bne.n	801a318 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a2fa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a2fe:	8843      	ldrh	r3, [r0, #2]
 801a300:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a304:	18ca      	adds	r2, r1, r3
 801a306:	4b06      	ldr	r3, [pc, #24]	; (801a320 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a308:	8044      	strh	r4, [r0, #2]
 801a30a:	881b      	ldrh	r3, [r3, #0]
 801a30c:	1a9b      	subs	r3, r3, r2
 801a30e:	8003      	strh	r3, [r0, #0]
 801a310:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a314:	8081      	strh	r1, [r0, #4]
 801a316:	80c3      	strh	r3, [r0, #6]
 801a318:	bd10      	pop	{r4, pc}
 801a31a:	bf00      	nop
 801a31c:	2000c634 	.word	0x2000c634
 801a320:	2000c630 	.word	0x2000c630

0801a324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a324:	4b07      	ldr	r3, [pc, #28]	; (801a344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a326:	b510      	push	{r4, lr}
 801a328:	781b      	ldrb	r3, [r3, #0]
 801a32a:	2b01      	cmp	r3, #1
 801a32c:	d108      	bne.n	801a340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a32e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a332:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a336:	8003      	strh	r3, [r0, #0]
 801a338:	8893      	ldrh	r3, [r2, #4]
 801a33a:	3b01      	subs	r3, #1
 801a33c:	1b1b      	subs	r3, r3, r4
 801a33e:	800b      	strh	r3, [r1, #0]
 801a340:	bd10      	pop	{r4, pc}
 801a342:	bf00      	nop
 801a344:	2000c634 	.word	0x2000c634

0801a348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a348:	4b08      	ldr	r3, [pc, #32]	; (801a36c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a34a:	b513      	push	{r0, r1, r4, lr}
 801a34c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a350:	2400      	movs	r4, #0
 801a352:	4b07      	ldr	r3, [pc, #28]	; (801a370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a354:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a358:	466a      	mov	r2, sp
 801a35a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a35e:	9400      	str	r4, [sp, #0]
 801a360:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a364:	f7ff ffde 	bl	801a324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a368:	b002      	add	sp, #8
 801a36a:	bd10      	pop	{r4, pc}
 801a36c:	2000c630 	.word	0x2000c630
 801a370:	2000c632 	.word	0x2000c632

0801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a374:	4b0a      	ldr	r3, [pc, #40]	; (801a3a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a376:	460a      	mov	r2, r1
 801a378:	b510      	push	{r4, lr}
 801a37a:	781b      	ldrb	r3, [r3, #0]
 801a37c:	2b01      	cmp	r3, #1
 801a37e:	d10d      	bne.n	801a39c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a380:	8881      	ldrh	r1, [r0, #4]
 801a382:	8803      	ldrh	r3, [r0, #0]
 801a384:	440b      	add	r3, r1
 801a386:	4601      	mov	r1, r0
 801a388:	3b01      	subs	r3, #1
 801a38a:	f821 3b02 	strh.w	r3, [r1], #2
 801a38e:	f7ff ffc9 	bl	801a324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a392:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a396:	88c2      	ldrh	r2, [r0, #6]
 801a398:	80c3      	strh	r3, [r0, #6]
 801a39a:	8082      	strh	r2, [r0, #4]
 801a39c:	bd10      	pop	{r4, pc}
 801a39e:	bf00      	nop
 801a3a0:	2000c634 	.word	0x2000c634

0801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a3a4:	4b09      	ldr	r3, [pc, #36]	; (801a3cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a3a6:	b507      	push	{r0, r1, r2, lr}
 801a3a8:	2100      	movs	r1, #0
 801a3aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3ae:	4b08      	ldr	r3, [pc, #32]	; (801a3d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a3b0:	9100      	str	r1, [sp, #0]
 801a3b2:	4669      	mov	r1, sp
 801a3b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a3bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3c0:	f7ff ffd8 	bl	801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a3c4:	b003      	add	sp, #12
 801a3c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3ca:	bf00      	nop
 801a3cc:	2000c630 	.word	0x2000c630
 801a3d0:	2000c632 	.word	0x2000c632

0801a3d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a3d4:	4b03      	ldr	r3, [pc, #12]	; (801a3e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a3d6:	6818      	ldr	r0, [r3, #0]
 801a3d8:	b110      	cbz	r0, 801a3e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a3da:	6803      	ldr	r3, [r0, #0]
 801a3dc:	699b      	ldr	r3, [r3, #24]
 801a3de:	4718      	bx	r3
 801a3e0:	4770      	bx	lr
 801a3e2:	bf00      	nop
 801a3e4:	2000c6b8 	.word	0x2000c6b8

0801a3e8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a3e8:	4770      	bx	lr
	...

0801a3ec <_ZN8touchgfx11Application4drawEv>:
 801a3ec:	4b09      	ldr	r3, [pc, #36]	; (801a414 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a3ee:	b507      	push	{r0, r1, r2, lr}
 801a3f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3f4:	2100      	movs	r1, #0
 801a3f6:	4b08      	ldr	r3, [pc, #32]	; (801a418 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a3f8:	9100      	str	r1, [sp, #0]
 801a3fa:	4669      	mov	r1, sp
 801a3fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a400:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a404:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a408:	6803      	ldr	r3, [r0, #0]
 801a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a40c:	4798      	blx	r3
 801a40e:	b003      	add	sp, #12
 801a410:	f85d fb04 	ldr.w	pc, [sp], #4
 801a414:	2000c630 	.word	0x2000c630
 801a418:	2000c632 	.word	0x2000c632

0801a41c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a41c:	4b03      	ldr	r3, [pc, #12]	; (801a42c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a41e:	6818      	ldr	r0, [r3, #0]
 801a420:	b110      	cbz	r0, 801a428 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a422:	6803      	ldr	r3, [r0, #0]
 801a424:	69db      	ldr	r3, [r3, #28]
 801a426:	4718      	bx	r3
 801a428:	4770      	bx	lr
 801a42a:	bf00      	nop
 801a42c:	2000c6b8 	.word	0x2000c6b8

0801a430 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a430:	4b03      	ldr	r3, [pc, #12]	; (801a440 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a432:	6818      	ldr	r0, [r3, #0]
 801a434:	b110      	cbz	r0, 801a43c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a436:	6803      	ldr	r3, [r0, #0]
 801a438:	6a1b      	ldr	r3, [r3, #32]
 801a43a:	4718      	bx	r3
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	2000c6b8 	.word	0x2000c6b8

0801a444 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a444:	4b03      	ldr	r3, [pc, #12]	; (801a454 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a446:	6818      	ldr	r0, [r3, #0]
 801a448:	b110      	cbz	r0, 801a450 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a44a:	6803      	ldr	r3, [r0, #0]
 801a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a44e:	4718      	bx	r3
 801a450:	4770      	bx	lr
 801a452:	bf00      	nop
 801a454:	2000c6b8 	.word	0x2000c6b8

0801a458 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a45c:	4d3a      	ldr	r5, [pc, #232]	; (801a548 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801a45e:	4604      	mov	r4, r0
 801a460:	6828      	ldr	r0, [r5, #0]
 801a462:	b140      	cbz	r0, 801a476 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801a464:	7a03      	ldrb	r3, [r0, #8]
 801a466:	b933      	cbnz	r3, 801a476 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801a468:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801a46c:	6803      	ldr	r3, [r0, #0]
 801a46e:	689b      	ldr	r3, [r3, #8]
 801a470:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a474:	4718      	bx	r3
 801a476:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801a47a:	b97b      	cbnz	r3, 801a49c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a47c:	b170      	cbz	r0, 801a49c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a47e:	7a03      	ldrb	r3, [r0, #8]
 801a480:	b163      	cbz	r3, 801a49c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a482:	4b32      	ldr	r3, [pc, #200]	; (801a54c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801a484:	6818      	ldr	r0, [r3, #0]
 801a486:	b110      	cbz	r0, 801a48e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801a488:	6803      	ldr	r3, [r0, #0]
 801a48a:	691b      	ldr	r3, [r3, #16]
 801a48c:	4798      	blx	r3
 801a48e:	6828      	ldr	r0, [r5, #0]
 801a490:	6803      	ldr	r3, [r0, #0]
 801a492:	68db      	ldr	r3, [r3, #12]
 801a494:	4798      	blx	r3
 801a496:	2301      	movs	r3, #1
 801a498:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801a49c:	2500      	movs	r5, #0
 801a49e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a4a2:	42a8      	cmp	r0, r5
 801a4a4:	dd0c      	ble.n	801a4c0 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801a4a6:	1963      	adds	r3, r4, r5
 801a4a8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a4ac:	b132      	cbz	r2, 801a4bc <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801a4ae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a4b2:	4413      	add	r3, r2
 801a4b4:	6858      	ldr	r0, [r3, #4]
 801a4b6:	6803      	ldr	r3, [r0, #0]
 801a4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a4ba:	4798      	blx	r3
 801a4bc:	3501      	adds	r5, #1
 801a4be:	e7ee      	b.n	801a49e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801a4c0:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801a4c4:	3801      	subs	r0, #1
 801a4c6:	f04f 0c00 	mov.w	ip, #0
 801a4ca:	3678      	adds	r6, #120	; 0x78
 801a4cc:	1c43      	adds	r3, r0, #1
 801a4ce:	d033      	beq.n	801a538 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801a4d0:	1823      	adds	r3, r4, r0
 801a4d2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a4d6:	bb6a      	cbnz	r2, 801a534 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801a4d8:	b281      	uxth	r1, r0
 801a4da:	1d25      	adds	r5, r4, #4
 801a4dc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801a4e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801a4e4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801a4e8:	4293      	cmp	r3, r2
 801a4ea:	dc0a      	bgt.n	801a502 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801a4ec:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801a4f0:	4422      	add	r2, r4
 801a4f2:	18b1      	adds	r1, r6, r2
 801a4f4:	b289      	uxth	r1, r1
 801a4f6:	428b      	cmp	r3, r1
 801a4f8:	d919      	bls.n	801a52e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801a4fa:	7851      	ldrb	r1, [r2, #1]
 801a4fc:	f802 1b01 	strb.w	r1, [r2], #1
 801a500:	e7f7      	b.n	801a4f2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801a502:	682f      	ldr	r7, [r5, #0]
 801a504:	f105 0804 	add.w	r8, r5, #4
 801a508:	45b9      	cmp	r9, r7
 801a50a:	d10d      	bne.n	801a528 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801a50c:	4696      	mov	lr, r2
 801a50e:	f1be 0f1e 	cmp.w	lr, #30
 801a512:	dc06      	bgt.n	801a522 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801a514:	f10e 0e01 	add.w	lr, lr, #1
 801a518:	686f      	ldr	r7, [r5, #4]
 801a51a:	4573      	cmp	r3, lr
 801a51c:	f845 7b04 	str.w	r7, [r5], #4
 801a520:	dcf5      	bgt.n	801a50e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801a522:	3b01      	subs	r3, #1
 801a524:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801a528:	3201      	adds	r2, #1
 801a52a:	4645      	mov	r5, r8
 801a52c:	e7da      	b.n	801a4e4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801a52e:	4423      	add	r3, r4
 801a530:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801a534:	3801      	subs	r0, #1
 801a536:	e7c9      	b.n	801a4cc <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801a538:	4b04      	ldr	r3, [pc, #16]	; (801a54c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801a53a:	6818      	ldr	r0, [r3, #0]
 801a53c:	b110      	cbz	r0, 801a544 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801a53e:	6803      	ldr	r3, [r0, #0]
 801a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a542:	e795      	b.n	801a470 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801a544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a548:	2000c6bc 	.word	0x2000c6bc
 801a54c:	2000c6b8 	.word	0x2000c6b8

0801a550 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a550:	b570      	push	{r4, r5, r6, lr}
 801a552:	4606      	mov	r6, r0
 801a554:	460c      	mov	r4, r1
 801a556:	b929      	cbnz	r1, 801a564 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a558:	4b0c      	ldr	r3, [pc, #48]	; (801a58c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a55a:	2164      	movs	r1, #100	; 0x64
 801a55c:	4a0c      	ldr	r2, [pc, #48]	; (801a590 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a55e:	480d      	ldr	r0, [pc, #52]	; (801a594 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a560:	f00c f854 	bl	802660c <__assert_func>
 801a564:	2300      	movs	r3, #0
 801a566:	4d0c      	ldr	r5, [pc, #48]	; (801a598 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a568:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a56c:	6828      	ldr	r0, [r5, #0]
 801a56e:	b110      	cbz	r0, 801a576 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a570:	6803      	ldr	r3, [r0, #0]
 801a572:	695b      	ldr	r3, [r3, #20]
 801a574:	4798      	blx	r3
 801a576:	602c      	str	r4, [r5, #0]
 801a578:	4620      	mov	r0, r4
 801a57a:	6823      	ldr	r3, [r4, #0]
 801a57c:	68db      	ldr	r3, [r3, #12]
 801a57e:	4798      	blx	r3
 801a580:	6833      	ldr	r3, [r6, #0]
 801a582:	4630      	mov	r0, r6
 801a584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a58a:	4718      	bx	r3
 801a58c:	08029fd8 	.word	0x08029fd8
 801a590:	0802a0a0 	.word	0x0802a0a0
 801a594:	08029fe2 	.word	0x08029fe2
 801a598:	2000c6b8 	.word	0x2000c6b8

0801a59c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a59c:	b510      	push	{r4, lr}
 801a59e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a5a2:	888a      	ldrh	r2, [r1, #4]
 801a5a4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a5a8:	4422      	add	r2, r4
 801a5aa:	b212      	sxth	r2, r2
 801a5ac:	4293      	cmp	r3, r2
 801a5ae:	da15      	bge.n	801a5dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a5b0:	8882      	ldrh	r2, [r0, #4]
 801a5b2:	4413      	add	r3, r2
 801a5b4:	b21b      	sxth	r3, r3
 801a5b6:	429c      	cmp	r4, r3
 801a5b8:	da10      	bge.n	801a5dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a5ba:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a5be:	88c9      	ldrh	r1, [r1, #6]
 801a5c0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a5c4:	4419      	add	r1, r3
 801a5c6:	b209      	sxth	r1, r1
 801a5c8:	428a      	cmp	r2, r1
 801a5ca:	da07      	bge.n	801a5dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a5cc:	88c0      	ldrh	r0, [r0, #6]
 801a5ce:	4410      	add	r0, r2
 801a5d0:	b200      	sxth	r0, r0
 801a5d2:	4283      	cmp	r3, r0
 801a5d4:	bfac      	ite	ge
 801a5d6:	2000      	movge	r0, #0
 801a5d8:	2001      	movlt	r0, #1
 801a5da:	bd10      	pop	{r4, pc}
 801a5dc:	2000      	movs	r0, #0
 801a5de:	e7fc      	b.n	801a5da <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a5e0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a5e0:	b570      	push	{r4, r5, r6, lr}
 801a5e2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a5e6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a5ea:	42ac      	cmp	r4, r5
 801a5ec:	db18      	blt.n	801a620 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a5ee:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a5f2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	db12      	blt.n	801a620 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a5fa:	8886      	ldrh	r6, [r0, #4]
 801a5fc:	4435      	add	r5, r6
 801a5fe:	888e      	ldrh	r6, [r1, #4]
 801a600:	4434      	add	r4, r6
 801a602:	b22d      	sxth	r5, r5
 801a604:	b224      	sxth	r4, r4
 801a606:	42a5      	cmp	r5, r4
 801a608:	db0a      	blt.n	801a620 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a60a:	88c0      	ldrh	r0, [r0, #6]
 801a60c:	4418      	add	r0, r3
 801a60e:	88cb      	ldrh	r3, [r1, #6]
 801a610:	441a      	add	r2, r3
 801a612:	b200      	sxth	r0, r0
 801a614:	b212      	sxth	r2, r2
 801a616:	4290      	cmp	r0, r2
 801a618:	bfb4      	ite	lt
 801a61a:	2000      	movlt	r0, #0
 801a61c:	2001      	movge	r0, #1
 801a61e:	bd70      	pop	{r4, r5, r6, pc}
 801a620:	2000      	movs	r0, #0
 801a622:	e7fc      	b.n	801a61e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a624 <_ZN8touchgfx11Application11getInstanceEv>:
 801a624:	4b01      	ldr	r3, [pc, #4]	; (801a62c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a626:	6818      	ldr	r0, [r3, #0]
 801a628:	4770      	bx	lr
 801a62a:	bf00      	nop
 801a62c:	2000c6c8 	.word	0x2000c6c8

0801a630 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a630:	2300      	movs	r3, #0
 801a632:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a636:	30a8      	adds	r0, #168	; 0xa8
 801a638:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a63c:	f802 3b01 	strb.w	r3, [r2], #1
 801a640:	4282      	cmp	r2, r0
 801a642:	d1fb      	bne.n	801a63c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a644:	4770      	bx	lr

0801a646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a646:	4603      	mov	r3, r0
 801a648:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a64c:	2200      	movs	r2, #0
 801a64e:	801a      	strh	r2, [r3, #0]
 801a650:	3308      	adds	r3, #8
 801a652:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a656:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a65a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a65e:	428b      	cmp	r3, r1
 801a660:	d1f5      	bne.n	801a64e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a662:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a666:	4770      	bx	lr

0801a668 <_ZN8touchgfx11ApplicationC1Ev>:
 801a668:	b570      	push	{r4, r5, r6, lr}
 801a66a:	4b16      	ldr	r3, [pc, #88]	; (801a6c4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801a66c:	2500      	movs	r5, #0
 801a66e:	4604      	mov	r4, r0
 801a670:	30a8      	adds	r0, #168	; 0xa8
 801a672:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a676:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a67a:	f7ff ffe4 	bl	801a646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a67e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a682:	f7ff ffe0 	bl	801a646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a686:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801a68a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801a68e:	490e      	ldr	r1, [pc, #56]	; (801a6c8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801a690:	480e      	ldr	r0, [pc, #56]	; (801a6cc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801a692:	f00a faa1 	bl	8024bd8 <CRC_Lock>
 801a696:	4e0e      	ldr	r6, [pc, #56]	; (801a6d0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a698:	4b0e      	ldr	r3, [pc, #56]	; (801a6d4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a69a:	b158      	cbz	r0, 801a6b4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801a69c:	801d      	strh	r5, [r3, #0]
 801a69e:	2300      	movs	r3, #0
 801a6a0:	4a0d      	ldr	r2, [pc, #52]	; (801a6d8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	6013      	str	r3, [r2, #0]
 801a6a6:	4a0d      	ldr	r2, [pc, #52]	; (801a6dc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a6a8:	6033      	str	r3, [r6, #0]
 801a6aa:	6013      	str	r3, [r2, #0]
 801a6ac:	f7ff ffc0 	bl	801a630 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	bd70      	pop	{r4, r5, r6, pc}
 801a6b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a6b8:	2002      	movs	r0, #2
 801a6ba:	801a      	strh	r2, [r3, #0]
 801a6bc:	6030      	str	r0, [r6, #0]
 801a6be:	f000 ff81 	bl	801b5c4 <_ZN8touchgfx6Screen4drawEv>
 801a6c2:	e7ec      	b.n	801a69e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801a6c4:	0802a06c 	.word	0x0802a06c
 801a6c8:	b5e8b5cd 	.word	0xb5e8b5cd
 801a6cc:	f407a5c2 	.word	0xf407a5c2
 801a6d0:	2000c6b8 	.word	0x2000c6b8
 801a6d4:	2000004c 	.word	0x2000004c
 801a6d8:	2000c6c8 	.word	0x2000c6c8
 801a6dc:	2000c6bc 	.word	0x2000c6bc

0801a6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	8003      	strh	r3, [r0, #0]
 801a6e4:	8043      	strh	r3, [r0, #2]
 801a6e6:	8083      	strh	r3, [r0, #4]
 801a6e8:	80c3      	strh	r3, [r0, #6]
 801a6ea:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801a6ee:	4293      	cmp	r3, r2
 801a6f0:	b530      	push	{r4, r5, lr}
 801a6f2:	d912      	bls.n	801a71a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a6f4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a6f8:	3b01      	subs	r3, #1
 801a6fa:	6825      	ldr	r5, [r4, #0]
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	6005      	str	r5, [r0, #0]
 801a700:	4293      	cmp	r3, r2
 801a702:	6865      	ldr	r5, [r4, #4]
 801a704:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801a708:	6045      	str	r5, [r0, #4]
 801a70a:	d906      	bls.n	801a71a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a70c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801a710:	681d      	ldr	r5, [r3, #0]
 801a712:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801a716:	685d      	ldr	r5, [r3, #4]
 801a718:	6065      	str	r5, [r4, #4]
 801a71a:	bd30      	pop	{r4, r5, pc}

0801a71c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a71e:	466b      	mov	r3, sp
 801a720:	4604      	mov	r4, r0
 801a722:	e883 0006 	stmia.w	r3, {r1, r2}
 801a726:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a72a:	2a07      	cmp	r2, #7
 801a72c:	d906      	bls.n	801a73c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a72e:	4b09      	ldr	r3, [pc, #36]	; (801a754 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a730:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a734:	4a08      	ldr	r2, [pc, #32]	; (801a758 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a736:	4809      	ldr	r0, [pc, #36]	; (801a75c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a738:	f00b ff68 	bl	802660c <__assert_func>
 801a73c:	1c51      	adds	r1, r2, #1
 801a73e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a742:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a746:	cb03      	ldmia	r3!, {r0, r1}
 801a748:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a74c:	6069      	str	r1, [r5, #4]
 801a74e:	b003      	add	sp, #12
 801a750:	bd30      	pop	{r4, r5, pc}
 801a752:	bf00      	nop
 801a754:	0802a00c 	.word	0x0802a00c
 801a758:	0802a0e4 	.word	0x0802a0e4
 801a75c:	0802a03b 	.word	0x0802a03b

0801a760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a764:	b089      	sub	sp, #36	; 0x24
 801a766:	4606      	mov	r6, r0
 801a768:	466c      	mov	r4, sp
 801a76a:	4620      	mov	r0, r4
 801a76c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a770:	f7fc fe30 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a774:	bbb0      	cbnz	r0, 801a7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a776:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801a77a:	b1fd      	cbz	r5, 801a7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801a77c:	3d01      	subs	r5, #1
 801a77e:	af04      	add	r7, sp, #16
 801a780:	f04f 090a 	mov.w	r9, #10
 801a784:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801a788:	ab02      	add	r3, sp, #8
 801a78a:	fa1f f885 	uxth.w	r8, r5
 801a78e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a792:	6851      	ldr	r1, [r2, #4]
 801a794:	c303      	stmia	r3!, {r0, r1}
 801a796:	4621      	mov	r1, r4
 801a798:	a802      	add	r0, sp, #8
 801a79a:	f7ff ff21 	bl	801a5e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a79e:	bb08      	cbnz	r0, 801a7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a7a0:	a902      	add	r1, sp, #8
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	f7ff ff1c 	bl	801a5e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a7a8:	b1f8      	cbz	r0, 801a7ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801a7aa:	4642      	mov	r2, r8
 801a7ac:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a7b0:	a806      	add	r0, sp, #24
 801a7b2:	f7ff ff95 	bl	801a6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a7b6:	f115 35ff 	adds.w	r5, r5, #4294967295
 801a7ba:	d2e3      	bcs.n	801a784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801a7bc:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801a7c0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801a7c4:	2b08      	cmp	r3, #8
 801a7c6:	d108      	bne.n	801a7da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801a7c8:	4629      	mov	r1, r5
 801a7ca:	a806      	add	r0, sp, #24
 801a7cc:	2207      	movs	r2, #7
 801a7ce:	f7ff ff87 	bl	801a6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a7d2:	a906      	add	r1, sp, #24
 801a7d4:	4620      	mov	r0, r4
 801a7d6:	f7fd fff8 	bl	80187ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a7da:	4628      	mov	r0, r5
 801a7dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a7e0:	f7ff ff9c 	bl	801a71c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a7e4:	b009      	add	sp, #36	; 0x24
 801a7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7ea:	4621      	mov	r1, r4
 801a7ec:	a802      	add	r0, sp, #8
 801a7ee:	f7ff fed5 	bl	801a59c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a7f2:	b150      	cbz	r0, 801a80a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801a7f4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a7f8:	a806      	add	r0, sp, #24
 801a7fa:	4642      	mov	r2, r8
 801a7fc:	f7ff ff70 	bl	801a6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a800:	a902      	add	r1, sp, #8
 801a802:	4620      	mov	r0, r4
 801a804:	f7fd ffe1 	bl	80187ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a808:	e7d5      	b.n	801a7b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a80a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a80e:	e887 0003 	stmia.w	r7, {r0, r1}
 801a812:	a902      	add	r1, sp, #8
 801a814:	4638      	mov	r0, r7
 801a816:	f7fd ffd8 	bl	80187ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a81a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a81e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a822:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a826:	fb13 f302 	smulbb	r3, r3, r2
 801a82a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a82e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a832:	fb11 f102 	smulbb	r1, r1, r2
 801a836:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a83a:	fb09 f303 	mul.w	r3, r9, r3
 801a83e:	fb12 1100 	smlabb	r1, r2, r0, r1
 801a842:	220b      	movs	r2, #11
 801a844:	434a      	muls	r2, r1
 801a846:	4293      	cmp	r3, r2
 801a848:	dab5      	bge.n	801a7b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a84a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a84e:	a806      	add	r0, sp, #24
 801a850:	4642      	mov	r2, r8
 801a852:	f7ff ff45 	bl	801a6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a856:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a85a:	e884 0003 	stmia.w	r4, {r0, r1}
 801a85e:	e7aa      	b.n	801a7b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801a860 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a860:	4b1d      	ldr	r3, [pc, #116]	; (801a8d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801a862:	b530      	push	{r4, r5, lr}
 801a864:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a868:	b085      	sub	sp, #20
 801a86a:	4b1c      	ldr	r3, [pc, #112]	; (801a8dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801a86c:	460c      	mov	r4, r1
 801a86e:	2100      	movs	r1, #0
 801a870:	4605      	mov	r5, r0
 801a872:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a876:	6820      	ldr	r0, [r4, #0]
 801a878:	9100      	str	r1, [sp, #0]
 801a87a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a87e:	ab02      	add	r3, sp, #8
 801a880:	6861      	ldr	r1, [r4, #4]
 801a882:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a886:	c303      	stmia	r3!, {r0, r1}
 801a888:	4669      	mov	r1, sp
 801a88a:	a802      	add	r0, sp, #8
 801a88c:	f7fc fd5e 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801a890:	ab02      	add	r3, sp, #8
 801a892:	cb03      	ldmia	r3!, {r0, r1}
 801a894:	4b12      	ldr	r3, [pc, #72]	; (801a8e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801a896:	6020      	str	r0, [r4, #0]
 801a898:	6818      	ldr	r0, [r3, #0]
 801a89a:	6061      	str	r1, [r4, #4]
 801a89c:	b138      	cbz	r0, 801a8ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a89e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801a8a2:	b133      	cbz	r3, 801a8b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801a8a4:	6821      	ldr	r1, [r4, #0]
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	6862      	ldr	r2, [r4, #4]
 801a8aa:	f7ff ff59 	bl	801a760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a8ae:	b005      	add	sp, #20
 801a8b0:	bd30      	pop	{r4, r5, pc}
 801a8b2:	6803      	ldr	r3, [r0, #0]
 801a8b4:	4621      	mov	r1, r4
 801a8b6:	689b      	ldr	r3, [r3, #8]
 801a8b8:	4798      	blx	r3
 801a8ba:	4b0a      	ldr	r3, [pc, #40]	; (801a8e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801a8bc:	6818      	ldr	r0, [r3, #0]
 801a8be:	b118      	cbz	r0, 801a8c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801a8c0:	6803      	ldr	r3, [r0, #0]
 801a8c2:	4621      	mov	r1, r4
 801a8c4:	689b      	ldr	r3, [r3, #8]
 801a8c6:	4798      	blx	r3
 801a8c8:	4b07      	ldr	r3, [pc, #28]	; (801a8e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801a8ca:	4621      	mov	r1, r4
 801a8cc:	6818      	ldr	r0, [r3, #0]
 801a8ce:	6803      	ldr	r3, [r0, #0]
 801a8d0:	695b      	ldr	r3, [r3, #20]
 801a8d2:	4798      	blx	r3
 801a8d4:	e7eb      	b.n	801a8ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a8d6:	bf00      	nop
 801a8d8:	2000c630 	.word	0x2000c630
 801a8dc:	2000c632 	.word	0x2000c632
 801a8e0:	2000c6b8 	.word	0x2000c6b8
 801a8e4:	2000c6b4 	.word	0x2000c6b4
 801a8e8:	2000c63c 	.word	0x2000c63c

0801a8ec <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f0:	4604      	mov	r4, r0
 801a8f2:	b09b      	sub	sp, #108	; 0x6c
 801a8f4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801a8f8:	b129      	cbz	r1, 801a906 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a900:	b01b      	add	sp, #108	; 0x6c
 801a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a906:	4baf      	ldr	r3, [pc, #700]	; (801abc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	b33b      	cbz	r3, 801a95c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a90c:	4dae      	ldr	r5, [pc, #696]	; (801abc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801a90e:	4628      	mov	r0, r5
 801a910:	f7fc fd60 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a914:	4606      	mov	r6, r0
 801a916:	bb08      	cbnz	r0, 801a95c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a918:	4628      	mov	r0, r5
 801a91a:	f7ff fce9 	bl	801a2f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a91e:	6829      	ldr	r1, [r5, #0]
 801a920:	686a      	ldr	r2, [r5, #4]
 801a922:	4620      	mov	r0, r4
 801a924:	f7ff ff1c 	bl	801a760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a928:	802e      	strh	r6, [r5, #0]
 801a92a:	806e      	strh	r6, [r5, #2]
 801a92c:	80ae      	strh	r6, [r5, #4]
 801a92e:	80ee      	strh	r6, [r5, #6]
 801a930:	4fa6      	ldr	r7, [pc, #664]	; (801abcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801a932:	a809      	add	r0, sp, #36	; 0x24
 801a934:	f7ff fe87 	bl	801a646 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a938:	883d      	ldrh	r5, [r7, #0]
 801a93a:	462e      	mov	r6, r5
 801a93c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a940:	42b3      	cmp	r3, r6
 801a942:	d910      	bls.n	801a966 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801a944:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a948:	3601      	adds	r6, #1
 801a94a:	a809      	add	r0, sp, #36	; 0x24
 801a94c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a950:	b2b6      	uxth	r6, r6
 801a952:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a956:	f7ff fee1 	bl	801a71c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a95a:	e7ef      	b.n	801a93c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801a95c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a960:	2b00      	cmp	r3, #0
 801a962:	d1e5      	bne.n	801a930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801a964:	e7cc      	b.n	801a900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a966:	462e      	mov	r6, r5
 801a968:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a96c:	42b3      	cmp	r3, r6
 801a96e:	d90b      	bls.n	801a988 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801a970:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a974:	3601      	adds	r6, #1
 801a976:	4620      	mov	r0, r4
 801a978:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a97c:	b2b6      	uxth	r6, r6
 801a97e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a982:	f7ff feed 	bl	801a760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a986:	e7ef      	b.n	801a968 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801a988:	4e91      	ldr	r6, [pc, #580]	; (801abd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801a98a:	6833      	ldr	r3, [r6, #0]
 801a98c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a990:	2b01      	cmp	r3, #1
 801a992:	f040 8092 	bne.w	801aaba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801a996:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a99a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a99e:	f04f 0900 	mov.w	r9, #0
 801a9a2:	33aa      	adds	r3, #170	; 0xaa
 801a9a4:	42a8      	cmp	r0, r5
 801a9a6:	f103 0308 	add.w	r3, r3, #8
 801a9aa:	dd0a      	ble.n	801a9c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801a9ac:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a9b0:	3501      	adds	r5, #1
 801a9b2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a9b6:	440a      	add	r2, r1
 801a9b8:	b212      	sxth	r2, r2
 801a9ba:	4591      	cmp	r9, r2
 801a9bc:	bfb8      	it	lt
 801a9be:	4691      	movlt	r9, r2
 801a9c0:	e7f0      	b.n	801a9a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801a9c2:	4b84      	ldr	r3, [pc, #528]	; (801abd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801a9c4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801abdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801a9c8:	881d      	ldrh	r5, [r3, #0]
 801a9ca:	2300      	movs	r3, #0
 801a9cc:	2d0f      	cmp	r5, #15
 801a9ce:	bf8c      	ite	hi
 801a9d0:	08ed      	lsrhi	r5, r5, #3
 801a9d2:	2501      	movls	r5, #1
 801a9d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a9d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a9dc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801a9e0:	6830      	ldr	r0, [r6, #0]
 801a9e2:	440b      	add	r3, r1
 801a9e4:	6802      	ldr	r2, [r0, #0]
 801a9e6:	b21b      	sxth	r3, r3
 801a9e8:	4599      	cmp	r9, r3
 801a9ea:	dd49      	ble.n	801aa80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801a9ec:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801a9f0:	4798      	blx	r3
 801a9f2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a9f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a9fa:	4413      	add	r3, r2
 801a9fc:	b21b      	sxth	r3, r3
 801a9fe:	195a      	adds	r2, r3, r5
 801aa00:	4290      	cmp	r0, r2
 801aa02:	da07      	bge.n	801aa14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801aa04:	4581      	cmp	r9, r0
 801aa06:	dd05      	ble.n	801aa14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801aa08:	4298      	cmp	r0, r3
 801aa0a:	da33      	bge.n	801aa74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	dd31      	ble.n	801aa74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801aa10:	4648      	mov	r0, r9
 801aa12:	e004      	b.n	801aa1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801aa14:	4298      	cmp	r0, r3
 801aa16:	dbfb      	blt.n	801aa10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801aa18:	4548      	cmp	r0, r9
 801aa1a:	bfa8      	it	ge
 801aa1c:	4648      	movge	r0, r9
 801aa1e:	f9b8 2000 	ldrsh.w	r2, [r8]
 801aa22:	2100      	movs	r1, #0
 801aa24:	1ac0      	subs	r0, r0, r3
 801aa26:	f8b7 a000 	ldrh.w	sl, [r7]
 801aa2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801aa2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa32:	f8ad 2018 	strh.w	r2, [sp, #24]
 801aa36:	f8ad 001a 	strh.w	r0, [sp, #26]
 801aa3a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801aa3e:	4553      	cmp	r3, sl
 801aa40:	d9ca      	bls.n	801a9d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801aa42:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801aa46:	ab07      	add	r3, sp, #28
 801aa48:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801aa4c:	6851      	ldr	r1, [r2, #4]
 801aa4e:	c303      	stmia	r3!, {r0, r1}
 801aa50:	a807      	add	r0, sp, #28
 801aa52:	a905      	add	r1, sp, #20
 801aa54:	f7fc fc7a 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801aa58:	a807      	add	r0, sp, #28
 801aa5a:	f7fc fcbb 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa5e:	b920      	cbnz	r0, 801aa6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801aa60:	6823      	ldr	r3, [r4, #0]
 801aa62:	a907      	add	r1, sp, #28
 801aa64:	4620      	mov	r0, r4
 801aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa68:	4798      	blx	r3
 801aa6a:	f10a 0a01 	add.w	sl, sl, #1
 801aa6e:	fa1f fa8a 	uxth.w	sl, sl
 801aa72:	e7e2      	b.n	801aa3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801aa74:	6830      	ldr	r0, [r6, #0]
 801aa76:	2101      	movs	r1, #1
 801aa78:	6803      	ldr	r3, [r0, #0]
 801aa7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aa7c:	4798      	blx	r3
 801aa7e:	e7ab      	b.n	801a9d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801aa80:	69d3      	ldr	r3, [r2, #28]
 801aa82:	4798      	blx	r3
 801aa84:	4b54      	ldr	r3, [pc, #336]	; (801abd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801aa86:	781b      	ldrb	r3, [r3, #0]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	f43f af39 	beq.w	801a900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801aa8e:	2300      	movs	r3, #0
 801aa90:	883d      	ldrh	r5, [r7, #0]
 801aa92:	34ea      	adds	r4, #234	; 0xea
 801aa94:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801aa98:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801aa9c:	42ab      	cmp	r3, r5
 801aa9e:	f67f af2f 	bls.w	801a900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801aaa2:	ab1a      	add	r3, sp, #104	; 0x68
 801aaa4:	4620      	mov	r0, r4
 801aaa6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aaaa:	3501      	adds	r5, #1
 801aaac:	3b44      	subs	r3, #68	; 0x44
 801aaae:	b2ad      	uxth	r5, r5
 801aab0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aab4:	f7ff fe32 	bl	801a71c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aab8:	e7ee      	b.n	801aa98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801aaba:	2b02      	cmp	r3, #2
 801aabc:	d16a      	bne.n	801ab94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801aabe:	f8df a120 	ldr.w	sl, [pc, #288]	; 801abe0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801aac2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801aac6:	42ab      	cmp	r3, r5
 801aac8:	d9dc      	bls.n	801aa84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801aaca:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801aace:	ab03      	add	r3, sp, #12
 801aad0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801aad4:	6851      	ldr	r1, [r2, #4]
 801aad6:	c303      	stmia	r3!, {r0, r1}
 801aad8:	f89a 3000 	ldrb.w	r3, [sl]
 801aadc:	2b01      	cmp	r3, #1
 801aade:	d102      	bne.n	801aae6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801aae0:	a803      	add	r0, sp, #12
 801aae2:	f7ff fc5f 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aae6:	a803      	add	r0, sp, #12
 801aae8:	f7fc fc74 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aaec:	2800      	cmp	r0, #0
 801aaee:	d14a      	bne.n	801ab86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801aaf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801aaf4:	f10d 0914 	add.w	r9, sp, #20
 801aaf8:	f10d 081c 	add.w	r8, sp, #28
 801aafc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ab00:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ab04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ab08:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ab10:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ab14:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801ab18:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801ab1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ab20:	44dc      	add	ip, fp
 801ab22:	6830      	ldr	r0, [r6, #0]
 801ab24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ab28:	ebac 0c02 	sub.w	ip, ip, r2
 801ab2c:	f8d0 e000 	ldr.w	lr, [r0]
 801ab30:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ab34:	fa1f fc8c 	uxth.w	ip, ip
 801ab38:	f8cd c000 	str.w	ip, [sp]
 801ab3c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801ab40:	47d8      	blx	fp
 801ab42:	f89a 3000 	ldrb.w	r3, [sl]
 801ab46:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ab4a:	2b01      	cmp	r3, #1
 801ab4c:	d11e      	bne.n	801ab8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801ab4e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ab52:	e888 0003 	stmia.w	r8, {r0, r1}
 801ab56:	4640      	mov	r0, r8
 801ab58:	f7ff fbca 	bl	801a2f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ab5c:	6823      	ldr	r3, [r4, #0]
 801ab5e:	4641      	mov	r1, r8
 801ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab62:	4620      	mov	r0, r4
 801ab64:	4798      	blx	r3
 801ab66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ab6a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ab6e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801ab72:	4413      	add	r3, r2
 801ab74:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ab78:	440a      	add	r2, r1
 801ab7a:	b21b      	sxth	r3, r3
 801ab7c:	b212      	sxth	r2, r2
 801ab7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab82:	4293      	cmp	r3, r2
 801ab84:	dbc6      	blt.n	801ab14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801ab86:	3501      	adds	r5, #1
 801ab88:	b2ad      	uxth	r5, r5
 801ab8a:	e79a      	b.n	801aac2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801ab8c:	6823      	ldr	r3, [r4, #0]
 801ab8e:	4649      	mov	r1, r9
 801ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab92:	e7e6      	b.n	801ab62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801ab94:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ab98:	42ab      	cmp	r3, r5
 801ab9a:	f67f af73 	bls.w	801aa84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801ab9e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801aba2:	ab07      	add	r3, sp, #28
 801aba4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801aba8:	6851      	ldr	r1, [r2, #4]
 801abaa:	c303      	stmia	r3!, {r0, r1}
 801abac:	a807      	add	r0, sp, #28
 801abae:	f7fc fc11 	bl	80173d4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801abb2:	b920      	cbnz	r0, 801abbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801abb4:	6823      	ldr	r3, [r4, #0]
 801abb6:	a907      	add	r1, sp, #28
 801abb8:	4620      	mov	r0, r4
 801abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abbc:	4798      	blx	r3
 801abbe:	3501      	adds	r5, #1
 801abc0:	b2ad      	uxth	r5, r5
 801abc2:	e7e7      	b.n	801ab94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801abc4:	2000c6b4 	.word	0x2000c6b4
 801abc8:	2000c6c0 	.word	0x2000c6c0
 801abcc:	2000004c 	.word	0x2000004c
 801abd0:	2000c63c 	.word	0x2000c63c
 801abd4:	2000c632 	.word	0x2000c632
 801abd8:	2000c63a 	.word	0x2000c63a
 801abdc:	2000c630 	.word	0x2000c630
 801abe0:	2000c634 	.word	0x2000c634

0801abe4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801abe4:	4b03      	ldr	r3, [pc, #12]	; (801abf4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801abe6:	2200      	movs	r2, #0
 801abe8:	801a      	strh	r2, [r3, #0]
 801abea:	805a      	strh	r2, [r3, #2]
 801abec:	809a      	strh	r2, [r3, #4]
 801abee:	80da      	strh	r2, [r3, #6]
 801abf0:	4770      	bx	lr
 801abf2:	bf00      	nop
 801abf4:	2000c6c0 	.word	0x2000c6c0

0801abf8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801abf8:	2000      	movs	r0, #0
 801abfa:	4770      	bx	lr

0801abfc <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801abfc:	2000      	movs	r0, #0
 801abfe:	4770      	bx	lr

0801ac00 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ac00:	b508      	push	{r3, lr}
 801ac02:	6803      	ldr	r3, [r0, #0]
 801ac04:	68db      	ldr	r3, [r3, #12]
 801ac06:	4798      	blx	r3
 801ac08:	b128      	cbz	r0, 801ac16 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ac0a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801ac0e:	7a80      	ldrb	r0, [r0, #10]
 801ac10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ac14:	4318      	orrs	r0, r3
 801ac16:	bd08      	pop	{r3, pc}

0801ac18 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801ac18:	b40e      	push	{r1, r2, r3}
 801ac1a:	b533      	push	{r0, r1, r4, r5, lr}
 801ac1c:	ab05      	add	r3, sp, #20
 801ac1e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac22:	9301      	str	r3, [sp, #4]
 801ac24:	4b0a      	ldr	r3, [pc, #40]	; (801ac50 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801ac26:	685c      	ldr	r4, [r3, #4]
 801ac28:	1061      	asrs	r1, r4, #1
 801ac2a:	07e4      	lsls	r4, r4, #31
 801ac2c:	eb00 0501 	add.w	r5, r0, r1
 801ac30:	bf46      	itte	mi
 801ac32:	681b      	ldrmi	r3, [r3, #0]
 801ac34:	5841      	ldrmi	r1, [r0, r1]
 801ac36:	681c      	ldrpl	r4, [r3, #0]
 801ac38:	4628      	mov	r0, r5
 801ac3a:	bf48      	it	mi
 801ac3c:	58cc      	ldrmi	r4, [r1, r3]
 801ac3e:	2100      	movs	r1, #0
 801ac40:	9b01      	ldr	r3, [sp, #4]
 801ac42:	47a0      	blx	r4
 801ac44:	b002      	add	sp, #8
 801ac46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac4a:	b003      	add	sp, #12
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	20000024 	.word	0x20000024

0801ac54 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801ac54:	b40c      	push	{r2, r3}
 801ac56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac58:	ab06      	add	r3, sp, #24
 801ac5a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac5e:	9301      	str	r3, [sp, #4]
 801ac60:	4b09      	ldr	r3, [pc, #36]	; (801ac88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801ac62:	685d      	ldr	r5, [r3, #4]
 801ac64:	106c      	asrs	r4, r5, #1
 801ac66:	07ed      	lsls	r5, r5, #31
 801ac68:	eb00 0604 	add.w	r6, r0, r4
 801ac6c:	bf45      	ittet	mi
 801ac6e:	681b      	ldrmi	r3, [r3, #0]
 801ac70:	5900      	ldrmi	r0, [r0, r4]
 801ac72:	681c      	ldrpl	r4, [r3, #0]
 801ac74:	58c4      	ldrmi	r4, [r0, r3]
 801ac76:	4630      	mov	r0, r6
 801ac78:	9b01      	ldr	r3, [sp, #4]
 801ac7a:	47a0      	blx	r4
 801ac7c:	b002      	add	sp, #8
 801ac7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac82:	b002      	add	sp, #8
 801ac84:	4770      	bx	lr
 801ac86:	bf00      	nop
 801ac88:	20000024 	.word	0x20000024

0801ac8c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ac8c:	b40e      	push	{r1, r2, r3}
 801ac8e:	b530      	push	{r4, r5, lr}
 801ac90:	b098      	sub	sp, #96	; 0x60
 801ac92:	4604      	mov	r4, r0
 801ac94:	ab1b      	add	r3, sp, #108	; 0x6c
 801ac96:	a802      	add	r0, sp, #8
 801ac98:	f853 5b04 	ldr.w	r5, [r3], #4
 801ac9c:	9301      	str	r3, [sp, #4]
 801ac9e:	f001 f837 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 801aca2:	6823      	ldr	r3, [r4, #0]
 801aca4:	4620      	mov	r0, r4
 801aca6:	2401      	movs	r4, #1
 801aca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acaa:	4798      	blx	r3
 801acac:	9a01      	ldr	r2, [sp, #4]
 801acae:	4603      	mov	r3, r0
 801acb0:	4629      	mov	r1, r5
 801acb2:	a802      	add	r0, sp, #8
 801acb4:	f001 f849 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801acb8:	a802      	add	r0, sp, #8
 801acba:	f001 f87f 	bl	801bdbc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801acbe:	b2a3      	uxth	r3, r4
 801acc0:	b138      	cbz	r0, 801acd2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801acc2:	280a      	cmp	r0, #10
 801acc4:	a802      	add	r0, sp, #8
 801acc6:	bf04      	itt	eq
 801acc8:	3301      	addeq	r3, #1
 801acca:	b21c      	sxtheq	r4, r3
 801accc:	f001 f876 	bl	801bdbc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801acd0:	e7f5      	b.n	801acbe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801acd2:	4618      	mov	r0, r3
 801acd4:	b018      	add	sp, #96	; 0x60
 801acd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acda:	b003      	add	sp, #12
 801acdc:	4770      	bx	lr
	...

0801ace0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ace0:	b40e      	push	{r1, r2, r3}
 801ace2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ace4:	b098      	sub	sp, #96	; 0x60
 801ace6:	4605      	mov	r5, r0
 801ace8:	4f25      	ldr	r7, [pc, #148]	; (801ad80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801acea:	ab1d      	add	r3, sp, #116	; 0x74
 801acec:	a802      	add	r0, sp, #8
 801acee:	ae18      	add	r6, sp, #96	; 0x60
 801acf0:	f853 4b04 	ldr.w	r4, [r3], #4
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	f001 f80b 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 801acfa:	682b      	ldr	r3, [r5, #0]
 801acfc:	4628      	mov	r0, r5
 801acfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad00:	4798      	blx	r3
 801ad02:	4621      	mov	r1, r4
 801ad04:	2400      	movs	r4, #0
 801ad06:	4603      	mov	r3, r0
 801ad08:	9a00      	ldr	r2, [sp, #0]
 801ad0a:	a802      	add	r0, sp, #8
 801ad0c:	f001 f81d 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ad10:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801ad14:	462a      	mov	r2, r5
 801ad16:	4633      	mov	r3, r6
 801ad18:	4621      	mov	r1, r4
 801ad1a:	a802      	add	r0, sp, #8
 801ad1c:	f001 f97a 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ad20:	b340      	cbz	r0, 801ad74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801ad22:	280a      	cmp	r0, #10
 801ad24:	d01f      	beq.n	801ad66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ad26:	9901      	ldr	r1, [sp, #4]
 801ad28:	b1e9      	cbz	r1, 801ad66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ad2a:	7b4b      	ldrb	r3, [r1, #13]
 801ad2c:	f891 c008 	ldrb.w	ip, [r1, #8]
 801ad30:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ad34:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801ad38:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801ad3c:	79c9      	ldrb	r1, [r1, #7]
 801ad3e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801ad42:	bf18      	it	ne
 801ad44:	4638      	movne	r0, r7
 801ad46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ad4a:	bf08      	it	eq
 801ad4c:	2000      	moveq	r0, #0
 801ad4e:	88aa      	ldrh	r2, [r5, #4]
 801ad50:	ea41 010e 	orr.w	r1, r1, lr
 801ad54:	ea43 030c 	orr.w	r3, r3, ip
 801ad58:	440a      	add	r2, r1
 801ad5a:	4303      	orrs	r3, r0
 801ad5c:	1ad3      	subs	r3, r2, r3
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	42a3      	cmp	r3, r4
 801ad62:	bfc8      	it	gt
 801ad64:	b21c      	sxthgt	r4, r3
 801ad66:	4633      	mov	r3, r6
 801ad68:	462a      	mov	r2, r5
 801ad6a:	2100      	movs	r1, #0
 801ad6c:	a802      	add	r0, sp, #8
 801ad6e:	f001 f951 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ad72:	e7d5      	b.n	801ad20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801ad74:	b2a0      	uxth	r0, r4
 801ad76:	b018      	add	sp, #96	; 0x60
 801ad78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ad7c:	b003      	add	sp, #12
 801ad7e:	4770      	bx	lr
 801ad80:	fffffe00 	.word	0xfffffe00

0801ad84 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ad84:	b40e      	push	{r1, r2, r3}
 801ad86:	b570      	push	{r4, r5, r6, lr}
 801ad88:	b099      	sub	sp, #100	; 0x64
 801ad8a:	4604      	mov	r4, r0
 801ad8c:	26ff      	movs	r6, #255	; 0xff
 801ad8e:	ab1d      	add	r3, sp, #116	; 0x74
 801ad90:	a802      	add	r0, sp, #8
 801ad92:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad96:	9300      	str	r3, [sp, #0]
 801ad98:	f000 ffba 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	4620      	mov	r0, r4
 801ada0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ada2:	4798      	blx	r3
 801ada4:	4629      	mov	r1, r5
 801ada6:	4603      	mov	r3, r0
 801ada8:	9a00      	ldr	r2, [sp, #0]
 801adaa:	a802      	add	r0, sp, #8
 801adac:	ad18      	add	r5, sp, #96	; 0x60
 801adae:	f000 ffcc 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801adb2:	2100      	movs	r1, #0
 801adb4:	4622      	mov	r2, r4
 801adb6:	a802      	add	r0, sp, #8
 801adb8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801adbc:	462b      	mov	r3, r5
 801adbe:	f001 f929 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801adc2:	b190      	cbz	r0, 801adea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801adc4:	280a      	cmp	r0, #10
 801adc6:	d009      	beq.n	801addc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801adc8:	9a01      	ldr	r2, [sp, #4]
 801adca:	b13a      	cbz	r2, 801addc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801adcc:	7923      	ldrb	r3, [r4, #4]
 801adce:	7a12      	ldrb	r2, [r2, #8]
 801add0:	1a9b      	subs	r3, r3, r2
 801add2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801add6:	429e      	cmp	r6, r3
 801add8:	bf28      	it	cs
 801adda:	461e      	movcs	r6, r3
 801addc:	462b      	mov	r3, r5
 801adde:	4622      	mov	r2, r4
 801ade0:	2100      	movs	r1, #0
 801ade2:	a802      	add	r0, sp, #8
 801ade4:	f001 f916 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ade8:	e7eb      	b.n	801adc2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801adea:	4630      	mov	r0, r6
 801adec:	b019      	add	sp, #100	; 0x64
 801adee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adf2:	b003      	add	sp, #12
 801adf4:	4770      	bx	lr

0801adf6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801adf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adfa:	b099      	sub	sp, #100	; 0x64
 801adfc:	4606      	mov	r6, r0
 801adfe:	4614      	mov	r4, r2
 801ae00:	4688      	mov	r8, r1
 801ae02:	a802      	add	r0, sp, #8
 801ae04:	461d      	mov	r5, r3
 801ae06:	f04f 0b00 	mov.w	fp, #0
 801ae0a:	f000 ff81 	bl	801bd10 <_ZN8touchgfx12TextProviderC1Ev>
 801ae0e:	6833      	ldr	r3, [r6, #0]
 801ae10:	4630      	mov	r0, r6
 801ae12:	465f      	mov	r7, fp
 801ae14:	46da      	mov	sl, fp
 801ae16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae18:	46d9      	mov	r9, fp
 801ae1a:	4798      	blx	r3
 801ae1c:	462a      	mov	r2, r5
 801ae1e:	4603      	mov	r3, r0
 801ae20:	4621      	mov	r1, r4
 801ae22:	a802      	add	r0, sp, #8
 801ae24:	f000 ff91 	bl	801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ae28:	ab01      	add	r3, sp, #4
 801ae2a:	4632      	mov	r2, r6
 801ae2c:	4641      	mov	r1, r8
 801ae2e:	a802      	add	r0, sp, #8
 801ae30:	f8cd 9004 	str.w	r9, [sp, #4]
 801ae34:	f001 f8ee 	bl	801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae38:	4605      	mov	r5, r0
 801ae3a:	b108      	cbz	r0, 801ae40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801ae3c:	280a      	cmp	r0, #10
 801ae3e:	d10b      	bne.n	801ae58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801ae40:	4557      	cmp	r7, sl
 801ae42:	bf38      	it	cc
 801ae44:	4657      	movcc	r7, sl
 801ae46:	f04f 0a00 	mov.w	sl, #0
 801ae4a:	b91d      	cbnz	r5, 801ae54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801ae4c:	4638      	mov	r0, r7
 801ae4e:	b019      	add	sp, #100	; 0x64
 801ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae54:	46ab      	mov	fp, r5
 801ae56:	e7e7      	b.n	801ae28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801ae58:	9a01      	ldr	r2, [sp, #4]
 801ae5a:	2a00      	cmp	r2, #0
 801ae5c:	d0fa      	beq.n	801ae54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801ae5e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801ae62:	4659      	mov	r1, fp
 801ae64:	6833      	ldr	r3, [r6, #0]
 801ae66:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801ae6a:	7a94      	ldrb	r4, [r2, #10]
 801ae6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae6e:	4304      	orrs	r4, r0
 801ae70:	4630      	mov	r0, r6
 801ae72:	8895      	ldrh	r5, [r2, #4]
 801ae74:	4798      	blx	r3
 801ae76:	4420      	add	r0, r4
 801ae78:	4450      	add	r0, sl
 801ae7a:	fa1f fa80 	uxth.w	sl, r0
 801ae7e:	e7e4      	b.n	801ae4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801ae80 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ae80:	b513      	push	{r0, r1, r4, lr}
 801ae82:	1d01      	adds	r1, r0, #4
 801ae84:	4603      	mov	r3, r0
 801ae86:	466a      	mov	r2, sp
 801ae88:	c903      	ldmia	r1, {r0, r1}
 801ae8a:	e882 0003 	stmia.w	r2, {r0, r1}
 801ae8e:	2100      	movs	r1, #0
 801ae90:	4618      	mov	r0, r3
 801ae92:	9100      	str	r1, [sp, #0]
 801ae94:	6819      	ldr	r1, [r3, #0]
 801ae96:	690c      	ldr	r4, [r1, #16]
 801ae98:	4611      	mov	r1, r2
 801ae9a:	47a0      	blx	r4
 801ae9c:	b002      	add	sp, #8
 801ae9e:	bd10      	pop	{r4, pc}

0801aea0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801aea0:	b538      	push	{r3, r4, r5, lr}
 801aea2:	680b      	ldr	r3, [r1, #0]
 801aea4:	460c      	mov	r4, r1
 801aea6:	4605      	mov	r5, r0
 801aea8:	68db      	ldr	r3, [r3, #12]
 801aeaa:	4798      	blx	r3
 801aeac:	6823      	ldr	r3, [r4, #0]
 801aeae:	4620      	mov	r0, r4
 801aeb0:	4629      	mov	r1, r5
 801aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeb4:	4798      	blx	r3
 801aeb6:	4628      	mov	r0, r5
 801aeb8:	bd38      	pop	{r3, r4, r5, pc}

0801aeba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801aeba:	b410      	push	{r4}
 801aebc:	880a      	ldrh	r2, [r1, #0]
 801aebe:	8884      	ldrh	r4, [r0, #4]
 801aec0:	4422      	add	r2, r4
 801aec2:	800a      	strh	r2, [r1, #0]
 801aec4:	884a      	ldrh	r2, [r1, #2]
 801aec6:	88c4      	ldrh	r4, [r0, #6]
 801aec8:	4422      	add	r2, r4
 801aeca:	804a      	strh	r2, [r1, #2]
 801aecc:	6940      	ldr	r0, [r0, #20]
 801aece:	b120      	cbz	r0, 801aeda <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801aed0:	6803      	ldr	r3, [r0, #0]
 801aed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aed8:	4718      	bx	r3
 801aeda:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aede:	4770      	bx	lr

0801aee0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aee2:	460b      	mov	r3, r1
 801aee4:	b085      	sub	sp, #20
 801aee6:	4604      	mov	r4, r0
 801aee8:	b901      	cbnz	r1, 801aeec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801aeea:	b1fa      	cbz	r2, 801af2c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801aeec:	1d27      	adds	r7, r4, #4
 801aeee:	466e      	mov	r6, sp
 801aef0:	ad02      	add	r5, sp, #8
 801aef2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aef6:	e886 0003 	stmia.w	r6, {r0, r1}
 801aefa:	88e1      	ldrh	r1, [r4, #6]
 801aefc:	4620      	mov	r0, r4
 801aefe:	440a      	add	r2, r1
 801af00:	88a1      	ldrh	r1, [r4, #4]
 801af02:	4419      	add	r1, r3
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	b212      	sxth	r2, r2
 801af08:	b209      	sxth	r1, r1
 801af0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af0c:	4798      	blx	r3
 801af0e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801af12:	e885 0003 	stmia.w	r5, {r0, r1}
 801af16:	6960      	ldr	r0, [r4, #20]
 801af18:	b150      	cbz	r0, 801af30 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801af1a:	6803      	ldr	r3, [r0, #0]
 801af1c:	4631      	mov	r1, r6
 801af1e:	691b      	ldr	r3, [r3, #16]
 801af20:	4798      	blx	r3
 801af22:	6960      	ldr	r0, [r4, #20]
 801af24:	6803      	ldr	r3, [r0, #0]
 801af26:	691b      	ldr	r3, [r3, #16]
 801af28:	4629      	mov	r1, r5
 801af2a:	4798      	blx	r3
 801af2c:	b005      	add	sp, #20
 801af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af30:	f7ff fb78 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 801af34:	6803      	ldr	r3, [r0, #0]
 801af36:	4631      	mov	r1, r6
 801af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af3a:	4798      	blx	r3
 801af3c:	f7ff fb72 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 801af40:	6803      	ldr	r3, [r0, #0]
 801af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af44:	e7f0      	b.n	801af28 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801af46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801af46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af48:	8882      	ldrh	r2, [r0, #4]
 801af4a:	4605      	mov	r5, r0
 801af4c:	880b      	ldrh	r3, [r1, #0]
 801af4e:	460c      	mov	r4, r1
 801af50:	4413      	add	r3, r2
 801af52:	800b      	strh	r3, [r1, #0]
 801af54:	884b      	ldrh	r3, [r1, #2]
 801af56:	88c2      	ldrh	r2, [r0, #6]
 801af58:	4413      	add	r3, r2
 801af5a:	4602      	mov	r2, r0
 801af5c:	804b      	strh	r3, [r1, #2]
 801af5e:	466b      	mov	r3, sp
 801af60:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801af64:	6851      	ldr	r1, [r2, #4]
 801af66:	c303      	stmia	r3!, {r0, r1}
 801af68:	4621      	mov	r1, r4
 801af6a:	4668      	mov	r0, sp
 801af6c:	f7fc f9ee 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801af70:	466b      	mov	r3, sp
 801af72:	cb03      	ldmia	r3!, {r0, r1}
 801af74:	6020      	str	r0, [r4, #0]
 801af76:	6061      	str	r1, [r4, #4]
 801af78:	6968      	ldr	r0, [r5, #20]
 801af7a:	b128      	cbz	r0, 801af88 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801af7c:	6803      	ldr	r3, [r0, #0]
 801af7e:	691b      	ldr	r3, [r3, #16]
 801af80:	4621      	mov	r1, r4
 801af82:	4798      	blx	r3
 801af84:	b003      	add	sp, #12
 801af86:	bd30      	pop	{r4, r5, pc}
 801af88:	f7ff fb4c 	bl	801a624 <_ZN8touchgfx11Application11getInstanceEv>
 801af8c:	6803      	ldr	r3, [r0, #0]
 801af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af90:	e7f6      	b.n	801af80 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801af92 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801af92:	b570      	push	{r4, r5, r6, lr}
 801af94:	8882      	ldrh	r2, [r0, #4]
 801af96:	460c      	mov	r4, r1
 801af98:	880b      	ldrh	r3, [r1, #0]
 801af9a:	4605      	mov	r5, r0
 801af9c:	4413      	add	r3, r2
 801af9e:	800b      	strh	r3, [r1, #0]
 801afa0:	884b      	ldrh	r3, [r1, #2]
 801afa2:	88c2      	ldrh	r2, [r0, #6]
 801afa4:	4413      	add	r3, r2
 801afa6:	804b      	strh	r3, [r1, #2]
 801afa8:	1d01      	adds	r1, r0, #4
 801afaa:	4620      	mov	r0, r4
 801afac:	f7fc f9ce 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801afb0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801afb4:	b153      	cbz	r3, 801afcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801afb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801afba:	b13b      	cbz	r3, 801afcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801afbc:	6968      	ldr	r0, [r5, #20]
 801afbe:	b128      	cbz	r0, 801afcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801afc0:	6803      	ldr	r3, [r0, #0]
 801afc2:	4621      	mov	r1, r4
 801afc4:	6a1b      	ldr	r3, [r3, #32]
 801afc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801afca:	4718      	bx	r3
 801afcc:	bd70      	pop	{r4, r5, r6, pc}

0801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801afce:	b510      	push	{r4, lr}
 801afd0:	2300      	movs	r3, #0
 801afd2:	4604      	mov	r4, r0
 801afd4:	4608      	mov	r0, r1
 801afd6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801afda:	8023      	strh	r3, [r4, #0]
 801afdc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801afe0:	8063      	strh	r3, [r4, #2]
 801afe2:	6803      	ldr	r3, [r0, #0]
 801afe4:	80a1      	strh	r1, [r4, #4]
 801afe6:	4621      	mov	r1, r4
 801afe8:	80e2      	strh	r2, [r4, #6]
 801afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afec:	4798      	blx	r3
 801afee:	4620      	mov	r0, r4
 801aff0:	bd10      	pop	{r4, pc}
	...

0801aff4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801aff4:	b530      	push	{r4, r5, lr}
 801aff6:	8083      	strh	r3, [r0, #4]
 801aff8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801affc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b000:	7183      	strb	r3, [r0, #6]
 801b002:	79c3      	ldrb	r3, [r0, #7]
 801b004:	6101      	str	r1, [r0, #16]
 801b006:	f365 0306 	bfi	r3, r5, #0, #7
 801b00a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b00e:	8282      	strh	r2, [r0, #20]
 801b010:	f365 13c7 	bfi	r3, r5, #7, #1
 801b014:	71c3      	strb	r3, [r0, #7]
 801b016:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b01a:	7203      	strb	r3, [r0, #8]
 801b01c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b020:	7243      	strb	r3, [r0, #9]
 801b022:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b026:	8143      	strh	r3, [r0, #10]
 801b028:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b02c:	8183      	strh	r3, [r0, #12]
 801b02e:	4b01      	ldr	r3, [pc, #4]	; (801b034 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b030:	6003      	str	r3, [r0, #0]
 801b032:	bd30      	pop	{r4, r5, pc}
 801b034:	0802a20c 	.word	0x0802a20c

0801b038 <_ZNK8touchgfx9ConstFont4findEt>:
 801b038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b03a:	8a84      	ldrh	r4, [r0, #20]
 801b03c:	2500      	movs	r5, #0
 801b03e:	260e      	movs	r6, #14
 801b040:	3c01      	subs	r4, #1
 801b042:	42a5      	cmp	r5, r4
 801b044:	dc0c      	bgt.n	801b060 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801b046:	192a      	adds	r2, r5, r4
 801b048:	6903      	ldr	r3, [r0, #16]
 801b04a:	1052      	asrs	r2, r2, #1
 801b04c:	fb06 3302 	mla	r3, r6, r2, r3
 801b050:	889f      	ldrh	r7, [r3, #4]
 801b052:	428f      	cmp	r7, r1
 801b054:	d901      	bls.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801b056:	1e54      	subs	r4, r2, #1
 801b058:	e7f3      	b.n	801b042 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b05a:	d202      	bcs.n	801b062 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801b05c:	1c55      	adds	r5, r2, #1
 801b05e:	e7f0      	b.n	801b042 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b060:	2300      	movs	r3, #0
 801b062:	4618      	mov	r0, r3
 801b064:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b066 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b068:	4605      	mov	r5, r0
 801b06a:	4617      	mov	r7, r2
 801b06c:	461e      	mov	r6, r3
 801b06e:	f7ff ffe3 	bl	801b038 <_ZNK8touchgfx9ConstFont4findEt>
 801b072:	b9e0      	cbnz	r0, 801b0ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801b074:	b911      	cbnz	r1, 801b07c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801b076:	2400      	movs	r4, #0
 801b078:	4620      	mov	r0, r4
 801b07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b07c:	290a      	cmp	r1, #10
 801b07e:	d0fa      	beq.n	801b076 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b080:	682b      	ldr	r3, [r5, #0]
 801b082:	4628      	mov	r0, r5
 801b084:	691b      	ldr	r3, [r3, #16]
 801b086:	4798      	blx	r3
 801b088:	4601      	mov	r1, r0
 801b08a:	4628      	mov	r0, r5
 801b08c:	f7ff ffd4 	bl	801b038 <_ZNK8touchgfx9ConstFont4findEt>
 801b090:	4604      	mov	r4, r0
 801b092:	2800      	cmp	r0, #0
 801b094:	d0ef      	beq.n	801b076 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b096:	682b      	ldr	r3, [r5, #0]
 801b098:	4621      	mov	r1, r4
 801b09a:	4628      	mov	r0, r5
 801b09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b09e:	4798      	blx	r3
 801b0a0:	6038      	str	r0, [r7, #0]
 801b0a2:	682b      	ldr	r3, [r5, #0]
 801b0a4:	4628      	mov	r0, r5
 801b0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0a8:	4798      	blx	r3
 801b0aa:	7030      	strb	r0, [r6, #0]
 801b0ac:	e7e4      	b.n	801b078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801b0ae:	4604      	mov	r4, r0
 801b0b0:	e7f1      	b.n	801b096 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801b0b2 <_ZN8touchgfx6memsetEPvhm>:
 801b0b2:	4402      	add	r2, r0
 801b0b4:	4290      	cmp	r0, r2
 801b0b6:	d002      	beq.n	801b0be <_ZN8touchgfx6memsetEPvhm+0xc>
 801b0b8:	f800 1b01 	strb.w	r1, [r0], #1
 801b0bc:	e7fa      	b.n	801b0b4 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b0be:	4770      	bx	lr

0801b0c0 <_ZN8touchgfx3clzEl>:
 801b0c0:	b1e8      	cbz	r0, 801b0fe <_ZN8touchgfx3clzEl+0x3e>
 801b0c2:	2800      	cmp	r0, #0
 801b0c4:	bfb8      	it	lt
 801b0c6:	4240      	neglt	r0, r0
 801b0c8:	0c03      	lsrs	r3, r0, #16
 801b0ca:	041b      	lsls	r3, r3, #16
 801b0cc:	b9ab      	cbnz	r3, 801b0fa <_ZN8touchgfx3clzEl+0x3a>
 801b0ce:	0400      	lsls	r0, r0, #16
 801b0d0:	2310      	movs	r3, #16
 801b0d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b0d6:	bf04      	itt	eq
 801b0d8:	0200      	lsleq	r0, r0, #8
 801b0da:	3308      	addeq	r3, #8
 801b0dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b0e0:	bf04      	itt	eq
 801b0e2:	0100      	lsleq	r0, r0, #4
 801b0e4:	3304      	addeq	r3, #4
 801b0e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b0ea:	bf04      	itt	eq
 801b0ec:	0080      	lsleq	r0, r0, #2
 801b0ee:	3302      	addeq	r3, #2
 801b0f0:	2800      	cmp	r0, #0
 801b0f2:	bfa8      	it	ge
 801b0f4:	3301      	addge	r3, #1
 801b0f6:	1e58      	subs	r0, r3, #1
 801b0f8:	4770      	bx	lr
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	e7e9      	b.n	801b0d2 <_ZN8touchgfx3clzEl+0x12>
 801b0fe:	201f      	movs	r0, #31
 801b100:	4770      	bx	lr

0801b102 <_ZN8touchgfx6muldivElllRl>:
 801b102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b106:	4604      	mov	r4, r0
 801b108:	4698      	mov	r8, r3
 801b10a:	2601      	movs	r6, #1
 801b10c:	f7ff ffd8 	bl	801b0c0 <_ZN8touchgfx3clzEl>
 801b110:	2c00      	cmp	r4, #0
 801b112:	fa04 f500 	lsl.w	r5, r4, r0
 801b116:	fa06 f600 	lsl.w	r6, r6, r0
 801b11a:	bfba      	itte	lt
 801b11c:	f04f 37ff 	movlt.w	r7, #4294967295
 801b120:	4264      	neglt	r4, r4
 801b122:	2701      	movge	r7, #1
 801b124:	2900      	cmp	r1, #0
 801b126:	f106 36ff 	add.w	r6, r6, #4294967295
 801b12a:	bfbc      	itt	lt
 801b12c:	4249      	neglt	r1, r1
 801b12e:	427f      	neglt	r7, r7
 801b130:	2a00      	cmp	r2, #0
 801b132:	fa41 fc00 	asr.w	ip, r1, r0
 801b136:	ea01 0106 	and.w	r1, r1, r6
 801b13a:	bfb8      	it	lt
 801b13c:	427f      	neglt	r7, r7
 801b13e:	fb04 f401 	mul.w	r4, r4, r1
 801b142:	fb95 f3f2 	sdiv	r3, r5, r2
 801b146:	fb02 5513 	mls	r5, r2, r3, r5
 801b14a:	bfb8      	it	lt
 801b14c:	4252      	neglt	r2, r2
 801b14e:	fb94 f0f2 	sdiv	r0, r4, r2
 801b152:	fb02 4410 	mls	r4, r2, r0, r4
 801b156:	fb0c 4405 	mla	r4, ip, r5, r4
 801b15a:	fb94 f1f2 	sdiv	r1, r4, r2
 801b15e:	4408      	add	r0, r1
 801b160:	fb02 4211 	mls	r2, r2, r1, r4
 801b164:	fb0c 0003 	mla	r0, ip, r3, r0
 801b168:	f8c8 2000 	str.w	r2, [r8]
 801b16c:	4378      	muls	r0, r7
 801b16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b172 <_ZN8touchgfx10ClickEventD1Ev>:
 801b172:	4770      	bx	lr

0801b174 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b174:	2000      	movs	r0, #0
 801b176:	4770      	bx	lr

0801b178 <_ZN8touchgfx9DragEventD1Ev>:
 801b178:	4770      	bx	lr

0801b17a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b17a:	2001      	movs	r0, #1
 801b17c:	4770      	bx	lr

0801b17e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b17e:	2002      	movs	r0, #2
 801b180:	4770      	bx	lr

0801b182 <_ZN8touchgfx12GestureEventD1Ev>:
 801b182:	4770      	bx	lr

0801b184 <_ZN8touchgfx10ClickEventD0Ev>:
 801b184:	b510      	push	{r4, lr}
 801b186:	4604      	mov	r4, r0
 801b188:	210c      	movs	r1, #12
 801b18a:	f00b fa11 	bl	80265b0 <_ZdlPvj>
 801b18e:	4620      	mov	r0, r4
 801b190:	bd10      	pop	{r4, pc}

0801b192 <_ZN8touchgfx9DragEventD0Ev>:
 801b192:	b510      	push	{r4, lr}
 801b194:	4604      	mov	r4, r0
 801b196:	2110      	movs	r1, #16
 801b198:	f00b fa0a 	bl	80265b0 <_ZdlPvj>
 801b19c:	4620      	mov	r0, r4
 801b19e:	bd10      	pop	{r4, pc}

0801b1a0 <_ZN8touchgfx12GestureEventD0Ev>:
 801b1a0:	b510      	push	{r4, lr}
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	210c      	movs	r1, #12
 801b1a6:	f00b fa03 	bl	80265b0 <_ZdlPvj>
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	bd10      	pop	{r4, pc}
	...

0801b1b0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b1b0:	b530      	push	{r4, r5, lr}
 801b1b2:	460d      	mov	r5, r1
 801b1b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b1b6:	b087      	sub	sp, #28
 801b1b8:	4604      	mov	r4, r0
 801b1ba:	b301      	cbz	r1, 801b1fe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b1bc:	a801      	add	r0, sp, #4
 801b1be:	f7ff ff06 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b1c2:	892a      	ldrh	r2, [r5, #8]
 801b1c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b1c8:	7928      	ldrb	r0, [r5, #4]
 801b1ca:	1ad2      	subs	r2, r2, r3
 801b1cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b1ce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b1d2:	441a      	add	r2, r3
 801b1d4:	896b      	ldrh	r3, [r5, #10]
 801b1d6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b1da:	f88d 0010 	strb.w	r0, [sp, #16]
 801b1de:	1b5b      	subs	r3, r3, r5
 801b1e0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b1e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b1e4:	442b      	add	r3, r5
 801b1e6:	4d07      	ldr	r5, [pc, #28]	; (801b204 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b1e8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b1ec:	a903      	add	r1, sp, #12
 801b1ee:	9503      	str	r5, [sp, #12]
 801b1f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b1f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b1f8:	6803      	ldr	r3, [r0, #0]
 801b1fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b1fc:	4798      	blx	r3
 801b1fe:	b007      	add	sp, #28
 801b200:	bd30      	pop	{r4, r5, pc}
 801b202:	bf00      	nop
 801b204:	0802a288 	.word	0x0802a288

0801b208 <_ZNK8touchgfx4Rect9intersectEss>:
 801b208:	b510      	push	{r4, lr}
 801b20a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b20e:	428b      	cmp	r3, r1
 801b210:	dc10      	bgt.n	801b234 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b212:	8884      	ldrh	r4, [r0, #4]
 801b214:	4423      	add	r3, r4
 801b216:	b21b      	sxth	r3, r3
 801b218:	4299      	cmp	r1, r3
 801b21a:	da0b      	bge.n	801b234 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b21c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b220:	4293      	cmp	r3, r2
 801b222:	dc07      	bgt.n	801b234 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b224:	88c0      	ldrh	r0, [r0, #6]
 801b226:	4418      	add	r0, r3
 801b228:	b200      	sxth	r0, r0
 801b22a:	4282      	cmp	r2, r0
 801b22c:	bfac      	ite	ge
 801b22e:	2000      	movge	r0, #0
 801b230:	2001      	movlt	r0, #1
 801b232:	bd10      	pop	{r4, pc}
 801b234:	2000      	movs	r0, #0
 801b236:	e7fc      	b.n	801b232 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b238 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b23a:	460c      	mov	r4, r1
 801b23c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b23e:	b089      	sub	sp, #36	; 0x24
 801b240:	4605      	mov	r5, r0
 801b242:	2900      	cmp	r1, #0
 801b244:	d054      	beq.n	801b2f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b246:	4668      	mov	r0, sp
 801b248:	f7ff fec1 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b24c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b24e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b250:	4668      	mov	r0, sp
 801b252:	8922      	ldrh	r2, [r4, #8]
 801b254:	88e1      	ldrh	r1, [r4, #6]
 801b256:	443a      	add	r2, r7
 801b258:	4431      	add	r1, r6
 801b25a:	b212      	sxth	r2, r2
 801b25c:	b209      	sxth	r1, r1
 801b25e:	f7ff ffd3 	bl	801b208 <_ZNK8touchgfx4Rect9intersectEss>
 801b262:	b1d0      	cbz	r0, 801b29a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b264:	89a2      	ldrh	r2, [r4, #12]
 801b266:	4668      	mov	r0, sp
 801b268:	8961      	ldrh	r1, [r4, #10]
 801b26a:	443a      	add	r2, r7
 801b26c:	4431      	add	r1, r6
 801b26e:	b212      	sxth	r2, r2
 801b270:	b209      	sxth	r1, r1
 801b272:	f7ff ffc9 	bl	801b208 <_ZNK8touchgfx4Rect9intersectEss>
 801b276:	4603      	mov	r3, r0
 801b278:	b978      	cbnz	r0, 801b29a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b27a:	4a1e      	ldr	r2, [pc, #120]	; (801b2f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b27c:	a904      	add	r1, sp, #16
 801b27e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b280:	9204      	str	r2, [sp, #16]
 801b282:	2202      	movs	r2, #2
 801b284:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b288:	f88d 2014 	strb.w	r2, [sp, #20]
 801b28c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b290:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b294:	6803      	ldr	r3, [r0, #0]
 801b296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b298:	4798      	blx	r3
 801b29a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b29c:	a802      	add	r0, sp, #8
 801b29e:	f7ff fe96 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b2a6:	88e0      	ldrh	r0, [r4, #6]
 801b2a8:	8961      	ldrh	r1, [r4, #10]
 801b2aa:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b2ae:	1a80      	subs	r0, r0, r2
 801b2b0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b2b4:	1a89      	subs	r1, r1, r2
 801b2b6:	8923      	ldrh	r3, [r4, #8]
 801b2b8:	4460      	add	r0, ip
 801b2ba:	89a2      	ldrh	r2, [r4, #12]
 801b2bc:	4461      	add	r1, ip
 801b2be:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b2c0:	eba3 030e 	sub.w	r3, r3, lr
 801b2c4:	eba2 020e 	sub.w	r2, r2, lr
 801b2c8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b2cc:	7927      	ldrb	r7, [r4, #4]
 801b2ce:	4433      	add	r3, r6
 801b2d0:	4432      	add	r2, r6
 801b2d2:	4c09      	ldr	r4, [pc, #36]	; (801b2f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b2d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b2d6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b2da:	a904      	add	r1, sp, #16
 801b2dc:	9404      	str	r4, [sp, #16]
 801b2de:	f88d 7014 	strb.w	r7, [sp, #20]
 801b2e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b2e6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b2ea:	6803      	ldr	r3, [r0, #0]
 801b2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b2ee:	4798      	blx	r3
 801b2f0:	b009      	add	sp, #36	; 0x24
 801b2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2f4:	0802a260 	.word	0x0802a260
 801b2f8:	0802a274 	.word	0x0802a274

0801b2fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b300:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b304:	b0a1      	sub	sp, #132	; 0x84
 801b306:	4604      	mov	r4, r0
 801b308:	460d      	mov	r5, r1
 801b30a:	790b      	ldrb	r3, [r1, #4]
 801b30c:	f1b9 0f00 	cmp.w	r9, #0
 801b310:	d00f      	beq.n	801b332 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b312:	2b00      	cmp	r3, #0
 801b314:	f040 80a2 	bne.w	801b45c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b318:	b021      	add	sp, #132	; 0x84
 801b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b31e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b322:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b326:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b32a:	1d20      	adds	r0, r4, #4
 801b32c:	f7fb ff5c 	bl	80171e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b330:	e094      	b.n	801b45c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b332:	2b00      	cmp	r3, #0
 801b334:	d1f0      	bne.n	801b318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b336:	4b5f      	ldr	r3, [pc, #380]	; (801b4b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b33e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b342:	f1ba 0f03 	cmp.w	sl, #3
 801b346:	ddea      	ble.n	801b31e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b348:	f1ba 0f0c 	cmp.w	sl, #12
 801b34c:	f04f 0303 	mov.w	r3, #3
 801b350:	f04f 0600 	mov.w	r6, #0
 801b354:	4958      	ldr	r1, [pc, #352]	; (801b4b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b356:	bfd8      	it	le
 801b358:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b35c:	960a      	str	r6, [sp, #40]	; 0x28
 801b35e:	bfd8      	it	le
 801b360:	fb92 f3f3 	sdivle	r3, r2, r3
 801b364:	9301      	str	r3, [sp, #4]
 801b366:	4b55      	ldr	r3, [pc, #340]	; (801b4bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b368:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b36c:	4b54      	ldr	r3, [pc, #336]	; (801b4c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801b36e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b372:	2248      	movs	r2, #72	; 0x48
 801b374:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b378:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b37c:	ab0e      	add	r3, sp, #56	; 0x38
 801b37e:	4618      	mov	r0, r3
 801b380:	f00b fc06 	bl	8026b90 <memcpy>
 801b384:	f04f 32ff 	mov.w	r2, #4294967295
 801b388:	f8cd a008 	str.w	sl, [sp, #8]
 801b38c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b390:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b394:	46b3      	mov	fp, r6
 801b396:	fb93 f3f2 	sdiv	r3, r3, r2
 801b39a:	b29b      	uxth	r3, r3
 801b39c:	9303      	str	r3, [sp, #12]
 801b39e:	2300      	movs	r3, #0
 801b3a0:	9a03      	ldr	r2, [sp, #12]
 801b3a2:	88ef      	ldrh	r7, [r5, #6]
 801b3a4:	a80a      	add	r0, sp, #40	; 0x28
 801b3a6:	9309      	str	r3, [sp, #36]	; 0x24
 801b3a8:	9b07      	ldr	r3, [sp, #28]
 801b3aa:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b3ae:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b3b2:	fb13 f302 	smulbb	r3, r3, r2
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	9304      	str	r3, [sp, #16]
 801b3ba:	9b07      	ldr	r3, [sp, #28]
 801b3bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b3c0:	685b      	ldr	r3, [r3, #4]
 801b3c2:	fb13 f302 	smulbb	r3, r3, r2
 801b3c6:	b29b      	uxth	r3, r3
 801b3c8:	9305      	str	r3, [sp, #20]
 801b3ca:	9b04      	ldr	r3, [sp, #16]
 801b3cc:	441f      	add	r7, r3
 801b3ce:	9b05      	ldr	r3, [sp, #20]
 801b3d0:	4498      	add	r8, r3
 801b3d2:	b23f      	sxth	r7, r7
 801b3d4:	fa0f f888 	sxth.w	r8, r8
 801b3d8:	4639      	mov	r1, r7
 801b3da:	4642      	mov	r2, r8
 801b3dc:	f7ff ff14 	bl	801b208 <_ZNK8touchgfx4Rect9intersectEss>
 801b3e0:	b380      	cbz	r0, 801b444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b3e2:	4639      	mov	r1, r7
 801b3e4:	ab09      	add	r3, sp, #36	; 0x24
 801b3e6:	4642      	mov	r2, r8
 801b3e8:	1d20      	adds	r0, r4, #4
 801b3ea:	f7fb fefd 	bl	80171e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b3ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b3f0:	b341      	cbz	r1, 801b444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b3f2:	4549      	cmp	r1, r9
 801b3f4:	d026      	beq.n	801b444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b3f6:	a80c      	add	r0, sp, #48	; 0x30
 801b3f8:	f7ff fde9 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b3fc:	2002      	movs	r0, #2
 801b3fe:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b402:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b406:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b40a:	fb92 f2f0 	sdiv	r2, r2, r0
 801b40e:	440a      	add	r2, r1
 801b410:	1a99      	subs	r1, r3, r2
 801b412:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b416:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b41a:	fb93 f3f0 	sdiv	r3, r3, r0
 801b41e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b422:	4403      	add	r3, r0
 801b424:	1ad3      	subs	r3, r2, r3
 801b426:	9a06      	ldr	r2, [sp, #24]
 801b428:	435b      	muls	r3, r3
 801b42a:	fb01 3301 	mla	r3, r1, r1, r3
 801b42e:	4293      	cmp	r3, r2
 801b430:	d208      	bcs.n	801b444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b432:	9a04      	ldr	r2, [sp, #16]
 801b434:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b438:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b43a:	9a05      	ldr	r2, [sp, #20]
 801b43c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b440:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b442:	9306      	str	r3, [sp, #24]
 801b444:	f10b 0b02 	add.w	fp, fp, #2
 801b448:	f1bb 0f08 	cmp.w	fp, #8
 801b44c:	dda7      	ble.n	801b39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801b44e:	9b02      	ldr	r3, [sp, #8]
 801b450:	3601      	adds	r6, #1
 801b452:	4453      	add	r3, sl
 801b454:	9302      	str	r3, [sp, #8]
 801b456:	9b01      	ldr	r3, [sp, #4]
 801b458:	42b3      	cmp	r3, r6
 801b45a:	d199      	bne.n	801b390 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b45c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b45e:	2900      	cmp	r1, #0
 801b460:	f43f af5a 	beq.w	801b318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b464:	a80c      	add	r0, sp, #48	; 0x30
 801b466:	2600      	movs	r6, #0
 801b468:	f7ff fdb1 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b46c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b470:	88ea      	ldrh	r2, [r5, #6]
 801b472:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b476:	1ad2      	subs	r2, r2, r3
 801b478:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b47a:	7929      	ldrb	r1, [r5, #4]
 801b47c:	441a      	add	r2, r3
 801b47e:	892b      	ldrh	r3, [r5, #8]
 801b480:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b484:	a90e      	add	r1, sp, #56	; 0x38
 801b486:	1a1b      	subs	r3, r3, r0
 801b488:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801b48a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b48e:	4403      	add	r3, r0
 801b490:	480c      	ldr	r0, [pc, #48]	; (801b4c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b492:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801b496:	900e      	str	r0, [sp, #56]	; 0x38
 801b498:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b49a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801b49e:	6803      	ldr	r3, [r0, #0]
 801b4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4a2:	4798      	blx	r3
 801b4a4:	792b      	ldrb	r3, [r5, #4]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	f43f af36 	beq.w	801b318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b4ac:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b4b0:	e732      	b.n	801b318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b4b2:	bf00      	nop
 801b4b4:	2000c63c 	.word	0x2000c63c
 801b4b8:	08028098 	.word	0x08028098
 801b4bc:	2000c630 	.word	0x2000c630
 801b4c0:	2000c632 	.word	0x2000c632
 801b4c4:	0802a260 	.word	0x0802a260

0801b4c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b4ca:	4604      	mov	r4, r0
 801b4cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b4d0:	3201      	adds	r2, #1
 801b4d2:	d112      	bne.n	801b4fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b4d4:	2500      	movs	r5, #0
 801b4d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b4da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b4de:	6803      	ldr	r3, [r0, #0]
 801b4e0:	9500      	str	r5, [sp, #0]
 801b4e2:	466d      	mov	r5, sp
 801b4e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b4e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b4ec:	4629      	mov	r1, r5
 801b4ee:	6a1b      	ldr	r3, [r3, #32]
 801b4f0:	4798      	blx	r3
 801b4f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b4f6:	e884 0003 	stmia.w	r4, {r0, r1}
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	b003      	add	sp, #12
 801b4fe:	bd30      	pop	{r4, r5, pc}

0801b500 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b500:	b513      	push	{r0, r1, r4, lr}
 801b502:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b506:	4604      	mov	r4, r0
 801b508:	3301      	adds	r3, #1
 801b50a:	d109      	bne.n	801b520 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b50c:	4601      	mov	r1, r0
 801b50e:	4668      	mov	r0, sp
 801b510:	f7ff fd5d 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b514:	f8bd 3000 	ldrh.w	r3, [sp]
 801b518:	8423      	strh	r3, [r4, #32]
 801b51a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b51e:	8463      	strh	r3, [r4, #34]	; 0x22
 801b520:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b524:	b002      	add	sp, #8
 801b526:	bd10      	pop	{r4, pc}

0801b528 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b528:	b513      	push	{r0, r1, r4, lr}
 801b52a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b52e:	4604      	mov	r4, r0
 801b530:	3301      	adds	r3, #1
 801b532:	d109      	bne.n	801b548 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b534:	4601      	mov	r1, r0
 801b536:	4668      	mov	r0, sp
 801b538:	f7ff fd49 	bl	801afce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b53c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b540:	8423      	strh	r3, [r4, #32]
 801b542:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b546:	8463      	strh	r3, [r4, #34]	; 0x22
 801b548:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b54c:	b002      	add	sp, #8
 801b54e:	bd10      	pop	{r4, pc}

0801b550 <_ZN8touchgfx6ScreenC1Ev>:
 801b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b552:	4605      	mov	r5, r0
 801b554:	4b17      	ldr	r3, [pc, #92]	; (801b5b4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b556:	2200      	movs	r2, #0
 801b558:	4917      	ldr	r1, [pc, #92]	; (801b5b8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b55a:	f845 3b04 	str.w	r3, [r5], #4
 801b55e:	2301      	movs	r3, #1
 801b560:	8102      	strh	r2, [r0, #8]
 801b562:	4604      	mov	r4, r0
 801b564:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801b568:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801b56c:	4b13      	ldr	r3, [pc, #76]	; (801b5bc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b56e:	8142      	strh	r2, [r0, #10]
 801b570:	f9b3 7000 	ldrsh.w	r7, [r3]
 801b574:	4b12      	ldr	r3, [pc, #72]	; (801b5c0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801b576:	8182      	strh	r2, [r0, #12]
 801b578:	81c2      	strh	r2, [r0, #14]
 801b57a:	8202      	strh	r2, [r0, #16]
 801b57c:	8242      	strh	r2, [r0, #18]
 801b57e:	8282      	strh	r2, [r0, #20]
 801b580:	82c2      	strh	r2, [r0, #22]
 801b582:	6202      	str	r2, [r0, #32]
 801b584:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b588:	6342      	str	r2, [r0, #52]	; 0x34
 801b58a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b58e:	6041      	str	r1, [r0, #4]
 801b590:	4611      	mov	r1, r2
 801b592:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b596:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801b59a:	4628      	mov	r0, r5
 801b59c:	f7f5 f9f1 	bl	8010982 <_ZN8touchgfx8Drawable5setXYEss>
 801b5a0:	4639      	mov	r1, r7
 801b5a2:	4628      	mov	r0, r5
 801b5a4:	f7f5 fa0b 	bl	80109be <_ZN8touchgfx8Drawable8setWidthEs>
 801b5a8:	4628      	mov	r0, r5
 801b5aa:	4631      	mov	r1, r6
 801b5ac:	f7f5 fa16 	bl	80109dc <_ZN8touchgfx8Drawable9setHeightEs>
 801b5b0:	4620      	mov	r0, r4
 801b5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b5b4:	0802a29c 	.word	0x0802a29c
 801b5b8:	08028f70 	.word	0x08028f70
 801b5bc:	2000c630 	.word	0x2000c630
 801b5c0:	2000c632 	.word	0x2000c632

0801b5c4 <_ZN8touchgfx6Screen4drawEv>:
 801b5c4:	4b09      	ldr	r3, [pc, #36]	; (801b5ec <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b5c6:	b507      	push	{r0, r1, r2, lr}
 801b5c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b5cc:	2100      	movs	r1, #0
 801b5ce:	4b08      	ldr	r3, [pc, #32]	; (801b5f0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b5d0:	9100      	str	r1, [sp, #0]
 801b5d2:	4669      	mov	r1, sp
 801b5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b5dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b5e0:	6803      	ldr	r3, [r0, #0]
 801b5e2:	689b      	ldr	r3, [r3, #8]
 801b5e4:	4798      	blx	r3
 801b5e6:	b003      	add	sp, #12
 801b5e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b5ec:	2000c630 	.word	0x2000c630
 801b5f0:	2000c632 	.word	0x2000c632

0801b5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b5fc:	b089      	sub	sp, #36	; 0x24
 801b5fe:	4680      	mov	r8, r0
 801b600:	460c      	mov	r4, r1
 801b602:	4615      	mov	r5, r2
 801b604:	b16b      	cbz	r3, 801b622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b606:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b60a:	b153      	cbz	r3, 801b622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b60c:	4628      	mov	r0, r5
 801b60e:	f7ff ff5b 	bl	801b4c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b612:	4621      	mov	r1, r4
 801b614:	f7fe ffc2 	bl	801a59c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b618:	69eb      	ldr	r3, [r5, #28]
 801b61a:	b928      	cbnz	r0, 801b628 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801b61c:	461d      	mov	r5, r3
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d1f4      	bne.n	801b60c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801b622:	b009      	add	sp, #36	; 0x24
 801b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b628:	ae04      	add	r6, sp, #16
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d051      	beq.n	801b6d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b62e:	682b      	ldr	r3, [r5, #0]
 801b630:	4629      	mov	r1, r5
 801b632:	a802      	add	r0, sp, #8
 801b634:	68db      	ldr	r3, [r3, #12]
 801b636:	4798      	blx	r3
 801b638:	4628      	mov	r0, r5
 801b63a:	f7ff ff61 	bl	801b500 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b63e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b642:	4407      	add	r7, r0
 801b644:	4628      	mov	r0, r5
 801b646:	f7ff ff6f 	bl	801b528 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b64a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b64e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b652:	b23f      	sxth	r7, r7
 801b654:	4418      	add	r0, r3
 801b656:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b65a:	4621      	mov	r1, r4
 801b65c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b660:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b664:	4630      	mov	r0, r6
 801b666:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b66a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b66e:	f7fb fe6d 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801b672:	4628      	mov	r0, r5
 801b674:	f7ff ff28 	bl	801b4c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b678:	ab06      	add	r3, sp, #24
 801b67a:	4602      	mov	r2, r0
 801b67c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b680:	e883 0003 	stmia.w	r3, {r0, r1}
 801b684:	4611      	mov	r1, r2
 801b686:	4618      	mov	r0, r3
 801b688:	f7fb fe60 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801b68c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b690:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b694:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b698:	4299      	cmp	r1, r3
 801b69a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b69e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b6a2:	d10b      	bne.n	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b6a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b6a8:	4552      	cmp	r2, sl
 801b6aa:	d107      	bne.n	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b6ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b6b0:	455a      	cmp	r2, fp
 801b6b2:	d103      	bne.n	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b6b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b6b8:	454a      	cmp	r2, r9
 801b6ba:	d00a      	beq.n	801b6d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b6bc:	f1bb 0f00 	cmp.w	fp, #0
 801b6c0:	d002      	beq.n	801b6c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801b6c2:	f1b9 0f00 	cmp.w	r9, #0
 801b6c6:	d12e      	bne.n	801b726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801b6c8:	69ea      	ldr	r2, [r5, #28]
 801b6ca:	4621      	mov	r1, r4
 801b6cc:	4640      	mov	r0, r8
 801b6ce:	f7ff ff91 	bl	801b5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b6d2:	4628      	mov	r0, r5
 801b6d4:	f7ff fef8 	bl	801b4c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b6d8:	6861      	ldr	r1, [r4, #4]
 801b6da:	4602      	mov	r2, r0
 801b6dc:	4633      	mov	r3, r6
 801b6de:	6820      	ldr	r0, [r4, #0]
 801b6e0:	c303      	stmia	r3!, {r0, r1}
 801b6e2:	4611      	mov	r1, r2
 801b6e4:	4630      	mov	r0, r6
 801b6e6:	f7fb fe31 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801b6ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d097      	beq.n	801b622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b6f2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d093      	beq.n	801b622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b6fa:	4628      	mov	r0, r5
 801b6fc:	f7ff ff00 	bl	801b500 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b700:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b704:	1a18      	subs	r0, r3, r0
 801b706:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b70a:	4628      	mov	r0, r5
 801b70c:	f7ff ff0c 	bl	801b528 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b710:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b714:	4631      	mov	r1, r6
 801b716:	1a18      	subs	r0, r3, r0
 801b718:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b71c:	4628      	mov	r0, r5
 801b71e:	682b      	ldr	r3, [r5, #0]
 801b720:	689b      	ldr	r3, [r3, #8]
 801b722:	4798      	blx	r3
 801b724:	e77d      	b.n	801b622 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b726:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b72a:	fa1f f08a 	uxth.w	r0, sl
 801b72e:	4552      	cmp	r2, sl
 801b730:	9000      	str	r0, [sp, #0]
 801b732:	da12      	bge.n	801b75a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801b734:	9301      	str	r3, [sp, #4]
 801b736:	9b00      	ldr	r3, [sp, #0]
 801b738:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b73c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b740:	1a9a      	subs	r2, r3, r2
 801b742:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b746:	4631      	mov	r1, r6
 801b748:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b74c:	4640      	mov	r0, r8
 801b74e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b752:	69ea      	ldr	r2, [r5, #28]
 801b754:	f7ff ff4e 	bl	801b5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b758:	9b01      	ldr	r3, [sp, #4]
 801b75a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b75e:	b29f      	uxth	r7, r3
 801b760:	429a      	cmp	r2, r3
 801b762:	da0d      	bge.n	801b780 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801b764:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b768:	1aba      	subs	r2, r7, r2
 801b76a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b76e:	4631      	mov	r1, r6
 801b770:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b774:	4640      	mov	r0, r8
 801b776:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b77a:	69ea      	ldr	r2, [r5, #28]
 801b77c:	f7ff ff3a 	bl	801b5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b780:	8822      	ldrh	r2, [r4, #0]
 801b782:	445f      	add	r7, fp
 801b784:	88a3      	ldrh	r3, [r4, #4]
 801b786:	b2bf      	uxth	r7, r7
 801b788:	4413      	add	r3, r2
 801b78a:	b23a      	sxth	r2, r7
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	b219      	sxth	r1, r3
 801b790:	4291      	cmp	r1, r2
 801b792:	dd0d      	ble.n	801b7b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801b794:	1bdb      	subs	r3, r3, r7
 801b796:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b79a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b79e:	4631      	mov	r1, r6
 801b7a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b7a4:	4640      	mov	r0, r8
 801b7a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b7aa:	69ea      	ldr	r2, [r5, #28]
 801b7ac:	f7ff ff22 	bl	801b5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b7b0:	88e2      	ldrh	r2, [r4, #6]
 801b7b2:	8863      	ldrh	r3, [r4, #2]
 801b7b4:	4413      	add	r3, r2
 801b7b6:	9a00      	ldr	r2, [sp, #0]
 801b7b8:	444a      	add	r2, r9
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	fa1f f982 	uxth.w	r9, r2
 801b7c0:	b219      	sxth	r1, r3
 801b7c2:	fa0f f289 	sxth.w	r2, r9
 801b7c6:	428a      	cmp	r2, r1
 801b7c8:	da83      	bge.n	801b6d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b7ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b7ce:	eba3 0309 	sub.w	r3, r3, r9
 801b7d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b7d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b7da:	4631      	mov	r1, r6
 801b7dc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b7e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b7e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7e8:	69ea      	ldr	r2, [r5, #28]
 801b7ea:	e76f      	b.n	801b6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801b7ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	aa02      	add	r2, sp, #8
 801b7f2:	4604      	mov	r4, r0
 801b7f4:	3004      	adds	r0, #4
 801b7f6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b7fa:	460d      	mov	r5, r1
 801b7fc:	f7fb fe7d 	bl	80174fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b800:	9a01      	ldr	r2, [sp, #4]
 801b802:	b11a      	cbz	r2, 801b80c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b804:	4629      	mov	r1, r5
 801b806:	4620      	mov	r0, r4
 801b808:	f7ff fef4 	bl	801b5f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b80c:	b003      	add	sp, #12
 801b80e:	bd30      	pop	{r4, r5, pc}

0801b810 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b812:	4602      	mov	r2, r0
 801b814:	4604      	mov	r4, r0
 801b816:	460d      	mov	r5, r1
 801b818:	466b      	mov	r3, sp
 801b81a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b81e:	6851      	ldr	r1, [r2, #4]
 801b820:	c303      	stmia	r3!, {r0, r1}
 801b822:	4629      	mov	r1, r5
 801b824:	4668      	mov	r0, sp
 801b826:	f7fb fd91 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801b82a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b82e:	4669      	mov	r1, sp
 801b830:	b123      	cbz	r3, 801b83c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b832:	4620      	mov	r0, r4
 801b834:	f7ff ffda 	bl	801b7ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b838:	b003      	add	sp, #12
 801b83a:	bd30      	pop	{r4, r5, pc}
 801b83c:	1d20      	adds	r0, r4, #4
 801b83e:	f7fb fe23 	bl	8017488 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b842:	e7f9      	b.n	801b838 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b844 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b844:	460b      	mov	r3, r1
 801b846:	680a      	ldr	r2, [r1, #0]
 801b848:	1d01      	adds	r1, r0, #4
 801b84a:	6952      	ldr	r2, [r2, #20]
 801b84c:	4618      	mov	r0, r3
 801b84e:	4710      	bx	r2

0801b850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801b850:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b854:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801b858:	4b03      	ldr	r3, [pc, #12]	; (801b868 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801b85a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b85e:	bf08      	it	eq
 801b860:	2300      	moveq	r3, #0
 801b862:	4308      	orrs	r0, r1
 801b864:	4318      	orrs	r0, r3
 801b866:	4770      	bx	lr
 801b868:	fffffe00 	.word	0xfffffe00

0801b86c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801b86c:	7b43      	ldrb	r3, [r0, #13]
 801b86e:	7201      	strb	r1, [r0, #8]
 801b870:	b289      	uxth	r1, r1
 801b872:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801b876:	05ca      	lsls	r2, r1, #23
 801b878:	bf48      	it	mi
 801b87a:	f043 0320 	orrmi.w	r3, r3, #32
 801b87e:	7343      	strb	r3, [r0, #13]
 801b880:	058b      	lsls	r3, r1, #22
 801b882:	bf42      	ittt	mi
 801b884:	7b43      	ldrbmi	r3, [r0, #13]
 801b886:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801b88a:	7343      	strbmi	r3, [r0, #13]
 801b88c:	4770      	bx	lr

0801b88e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b88e:	b530      	push	{r4, r5, lr}
 801b890:	2500      	movs	r5, #0
 801b892:	2401      	movs	r4, #1
 801b894:	6843      	ldr	r3, [r0, #4]
 801b896:	b913      	cbnz	r3, 801b89e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b898:	6803      	ldr	r3, [r0, #0]
 801b89a:	b1f3      	cbz	r3, 801b8da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b89c:	6043      	str	r3, [r0, #4]
 801b89e:	7c03      	ldrb	r3, [r0, #16]
 801b8a0:	b143      	cbz	r3, 801b8b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b8a2:	68c3      	ldr	r3, [r0, #12]
 801b8a4:	b12b      	cbz	r3, 801b8b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b8a6:	881a      	ldrh	r2, [r3, #0]
 801b8a8:	b11a      	cbz	r2, 801b8b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b8aa:	1c9a      	adds	r2, r3, #2
 801b8ac:	60c2      	str	r2, [r0, #12]
 801b8ae:	8818      	ldrh	r0, [r3, #0]
 801b8b0:	bd30      	pop	{r4, r5, pc}
 801b8b2:	7405      	strb	r5, [r0, #16]
 801b8b4:	6843      	ldr	r3, [r0, #4]
 801b8b6:	8819      	ldrh	r1, [r3, #0]
 801b8b8:	b179      	cbz	r1, 801b8da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b8ba:	1c9a      	adds	r2, r3, #2
 801b8bc:	2902      	cmp	r1, #2
 801b8be:	6042      	str	r2, [r0, #4]
 801b8c0:	d1f5      	bne.n	801b8ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b8c2:	6883      	ldr	r3, [r0, #8]
 801b8c4:	1d1a      	adds	r2, r3, #4
 801b8c6:	6082      	str	r2, [r0, #8]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	60c3      	str	r3, [r0, #12]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d0e1      	beq.n	801b894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b8d0:	881b      	ldrh	r3, [r3, #0]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d0de      	beq.n	801b894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b8d6:	7404      	strb	r4, [r0, #16]
 801b8d8:	e7dc      	b.n	801b894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b8da:	2000      	movs	r0, #0
 801b8dc:	e7e8      	b.n	801b8b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b8de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8e0:	4605      	mov	r5, r0
 801b8e2:	4608      	mov	r0, r1
 801b8e4:	b1f1      	cbz	r1, 801b924 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b8e6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801b8ea:	460b      	mov	r3, r1
 801b8ec:	f101 0708 	add.w	r7, r1, #8
 801b8f0:	4622      	mov	r2, r4
 801b8f2:	6818      	ldr	r0, [r3, #0]
 801b8f4:	3308      	adds	r3, #8
 801b8f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b8fa:	4626      	mov	r6, r4
 801b8fc:	42bb      	cmp	r3, r7
 801b8fe:	c603      	stmia	r6!, {r0, r1}
 801b900:	4634      	mov	r4, r6
 801b902:	d1f6      	bne.n	801b8f2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b904:	6818      	ldr	r0, [r3, #0]
 801b906:	6030      	str	r0, [r6, #0]
 801b908:	4610      	mov	r0, r2
 801b90a:	889b      	ldrh	r3, [r3, #4]
 801b90c:	80b3      	strh	r3, [r6, #4]
 801b90e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801b912:	015b      	lsls	r3, r3, #5
 801b914:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b918:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801b91c:	430b      	orrs	r3, r1
 801b91e:	425b      	negs	r3, r3
 801b920:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801b924:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b926 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b926:	b538      	push	{r3, r4, r5, lr}
 801b928:	460c      	mov	r4, r1
 801b92a:	6811      	ldr	r1, [r2, #0]
 801b92c:	4610      	mov	r0, r2
 801b92e:	68cd      	ldr	r5, [r1, #12]
 801b930:	4619      	mov	r1, r3
 801b932:	47a8      	blx	r5
 801b934:	2800      	cmp	r0, #0
 801b936:	bf08      	it	eq
 801b938:	4620      	moveq	r0, r4
 801b93a:	bd38      	pop	{r3, r4, r5, pc}

0801b93c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b93c:	b570      	push	{r4, r5, r6, lr}
 801b93e:	8810      	ldrh	r0, [r2, #0]
 801b940:	4298      	cmp	r0, r3
 801b942:	d817      	bhi.n	801b974 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b944:	1e48      	subs	r0, r1, #1
 801b946:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b94a:	4298      	cmp	r0, r3
 801b94c:	d312      	bcc.n	801b974 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b94e:	2400      	movs	r4, #0
 801b950:	428c      	cmp	r4, r1
 801b952:	d20f      	bcs.n	801b974 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b954:	1860      	adds	r0, r4, r1
 801b956:	1040      	asrs	r0, r0, #1
 801b958:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b95c:	0085      	lsls	r5, r0, #2
 801b95e:	42b3      	cmp	r3, r6
 801b960:	d902      	bls.n	801b968 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b962:	3001      	adds	r0, #1
 801b964:	b284      	uxth	r4, r0
 801b966:	e7f3      	b.n	801b950 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b968:	d102      	bne.n	801b970 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801b96a:	442a      	add	r2, r5
 801b96c:	8850      	ldrh	r0, [r2, #2]
 801b96e:	bd70      	pop	{r4, r5, r6, pc}
 801b970:	b281      	uxth	r1, r0
 801b972:	e7ed      	b.n	801b950 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b974:	2000      	movs	r0, #0
 801b976:	e7fa      	b.n	801b96e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801b978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801b978:	b510      	push	{r4, lr}
 801b97a:	8ac3      	ldrh	r3, [r0, #22]
 801b97c:	428b      	cmp	r3, r1
 801b97e:	d805      	bhi.n	801b98c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801b980:	4b07      	ldr	r3, [pc, #28]	; (801b9a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801b982:	21fd      	movs	r1, #253	; 0xfd
 801b984:	4a07      	ldr	r2, [pc, #28]	; (801b9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801b986:	4808      	ldr	r0, [pc, #32]	; (801b9a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801b988:	f00a fe40 	bl	802660c <__assert_func>
 801b98c:	8a83      	ldrh	r3, [r0, #20]
 801b98e:	240a      	movs	r4, #10
 801b990:	4419      	add	r1, r3
 801b992:	fbb1 f3f4 	udiv	r3, r1, r4
 801b996:	fb04 1113 	mls	r1, r4, r3, r1
 801b99a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801b99e:	bd10      	pop	{r4, pc}
 801b9a0:	0802a2e9 	.word	0x0802a2e9
 801b9a4:	0802a718 	.word	0x0802a718
 801b9a8:	0802a2f7 	.word	0x0802a2f7

0801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801b9ac:	b508      	push	{r3, lr}
 801b9ae:	8ac3      	ldrh	r3, [r0, #22]
 801b9b0:	428b      	cmp	r3, r1
 801b9b2:	d805      	bhi.n	801b9c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801b9b4:	4b07      	ldr	r3, [pc, #28]	; (801b9d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801b9b6:	21d3      	movs	r1, #211	; 0xd3
 801b9b8:	4a07      	ldr	r2, [pc, #28]	; (801b9d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801b9ba:	4808      	ldr	r0, [pc, #32]	; (801b9dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801b9bc:	f00a fe26 	bl	802660c <__assert_func>
 801b9c0:	8a83      	ldrh	r3, [r0, #20]
 801b9c2:	220a      	movs	r2, #10
 801b9c4:	4419      	add	r1, r3
 801b9c6:	fbb1 f3f2 	udiv	r3, r1, r2
 801b9ca:	fb02 1113 	mls	r1, r2, r3, r1
 801b9ce:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801b9d2:	bd08      	pop	{r3, pc}
 801b9d4:	0802a2e9 	.word	0x0802a2e9
 801b9d8:	0802a468 	.word	0x0802a468
 801b9dc:	0802a2f7 	.word	0x0802a2f7

0801b9e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9e4:	4604      	mov	r4, r0
 801b9e6:	4688      	mov	r8, r1
 801b9e8:	4615      	mov	r5, r2
 801b9ea:	b94a      	cbnz	r2, 801ba00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801b9ec:	4691      	mov	r9, r2
 801b9ee:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801b9f2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801b9f6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b9fa:	4648      	mov	r0, r9
 801b9fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba00:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801ba04:	8892      	ldrh	r2, [r2, #4]
 801ba06:	462b      	mov	r3, r5
 801ba08:	f105 0c08 	add.w	ip, r5, #8
 801ba0c:	46b3      	mov	fp, r6
 801ba0e:	6818      	ldr	r0, [r3, #0]
 801ba10:	3308      	adds	r3, #8
 801ba12:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ba16:	4637      	mov	r7, r6
 801ba18:	4563      	cmp	r3, ip
 801ba1a:	c703      	stmia	r7!, {r0, r1}
 801ba1c:	463e      	mov	r6, r7
 801ba1e:	d1f6      	bne.n	801ba0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801ba20:	6818      	ldr	r0, [r3, #0]
 801ba22:	46d9      	mov	r9, fp
 801ba24:	6038      	str	r0, [r7, #0]
 801ba26:	889b      	ldrh	r3, [r3, #4]
 801ba28:	80bb      	strh	r3, [r7, #4]
 801ba2a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801ba2e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801ba32:	18d3      	adds	r3, r2, r3
 801ba34:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801ba38:	b298      	uxth	r0, r3
 801ba3a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801ba3e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801ba42:	281d      	cmp	r0, #29
 801ba44:	ea4a 0a01 	orr.w	sl, sl, r1
 801ba48:	fa1f f68a 	uxth.w	r6, sl
 801ba4c:	d842      	bhi.n	801bad4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801ba4e:	2301      	movs	r3, #1
 801ba50:	4950      	ldr	r1, [pc, #320]	; (801bb94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801ba52:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801ba56:	4083      	lsls	r3, r0
 801ba58:	420b      	tst	r3, r1
 801ba5a:	d114      	bne.n	801ba86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801ba5c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801ba60:	d03c      	beq.n	801badc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801ba62:	fa1f fa8a 	uxth.w	sl, sl
 801ba66:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801ba6a:	4658      	mov	r0, fp
 801ba6c:	eba1 010a 	sub.w	r1, r1, sl
 801ba70:	b209      	sxth	r1, r1
 801ba72:	f7ff fefb 	bl	801b86c <_ZN8touchgfx9GlyphNode6setTopEs>
 801ba76:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801ba7a:	1b86      	subs	r6, r0, r6
 801ba7c:	eba6 0a0a 	sub.w	sl, r6, sl
 801ba80:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801ba84:	e7b9      	b.n	801b9fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ba86:	2100      	movs	r1, #0
 801ba88:	f104 001a 	add.w	r0, r4, #26
 801ba8c:	f7ff ff8e 	bl	801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ba90:	f640 6333 	movw	r3, #3635	; 0xe33
 801ba94:	4601      	mov	r1, r0
 801ba96:	4298      	cmp	r0, r3
 801ba98:	d10a      	bne.n	801bab0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801ba9a:	f8d8 3000 	ldr.w	r3, [r8]
 801ba9e:	4640      	mov	r0, r8
 801baa0:	68db      	ldr	r3, [r3, #12]
 801baa2:	4798      	blx	r3
 801baa4:	7b41      	ldrb	r1, [r0, #13]
 801baa6:	7a00      	ldrb	r0, [r0, #8]
 801baa8:	f7ff fed2 	bl	801b850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801baac:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801bab0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801bab4:	4658      	mov	r0, fp
 801bab6:	4431      	add	r1, r6
 801bab8:	4451      	add	r1, sl
 801baba:	b209      	sxth	r1, r1
 801babc:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801bac0:	f7ff fed4 	bl	801b86c <_ZN8touchgfx9GlyphNode6setTopEs>
 801bac4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801bac8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801bacc:	1a9b      	subs	r3, r3, r2
 801bace:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801bad2:	e792      	b.n	801b9fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bad4:	f640 631b 	movw	r3, #3611	; 0xe1b
 801bad8:	429a      	cmp	r2, r3
 801bada:	d005      	beq.n	801bae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801badc:	f022 0302 	bic.w	r3, r2, #2
 801bae0:	f640 611d 	movw	r1, #3613	; 0xe1d
 801bae4:	428b      	cmp	r3, r1
 801bae6:	d119      	bne.n	801bb1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801bae8:	1e53      	subs	r3, r2, #1
 801baea:	4629      	mov	r1, r5
 801baec:	4642      	mov	r2, r8
 801baee:	4620      	mov	r0, r4
 801baf0:	b29b      	uxth	r3, r3
 801baf2:	f7ff ff18 	bl	801b926 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801baf6:	7b41      	ldrb	r1, [r0, #13]
 801baf8:	7a00      	ldrb	r0, [r0, #8]
 801bafa:	f7ff fea9 	bl	801b850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bafe:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801bb02:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801bb06:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb0a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801bb0e:	4313      	orrs	r3, r2
 801bb10:	115a      	asrs	r2, r3, #5
 801bb12:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bb16:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bb1a:	e02e      	b.n	801bb7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801bb1c:	4639      	mov	r1, r7
 801bb1e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801bb22:	f7ff fe95 	bl	801b850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bb26:	f640 6109 	movw	r1, #3593	; 0xe09
 801bb2a:	f022 0310 	bic.w	r3, r2, #16
 801bb2e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801bb32:	428b      	cmp	r3, r1
 801bb34:	d003      	beq.n	801bb3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801bb36:	f640 6313 	movw	r3, #3603	; 0xe13
 801bb3a:	429a      	cmp	r2, r3
 801bb3c:	d127      	bne.n	801bb8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801bb3e:	b27f      	sxtb	r7, r7
 801bb40:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801bb44:	4629      	mov	r1, r5
 801bb46:	4620      	mov	r0, r4
 801bb48:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801bb4c:	431f      	orrs	r7, r3
 801bb4e:	f640 6313 	movw	r3, #3603	; 0xe13
 801bb52:	429a      	cmp	r2, r3
 801bb54:	bf14      	ite	ne
 801bb56:	f102 33ff 	addne.w	r3, r2, #4294967295
 801bb5a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bb5e:	4642      	mov	r2, r8
 801bb60:	bf18      	it	ne
 801bb62:	b29b      	uxthne	r3, r3
 801bb64:	f7ff fedf 	bl	801b926 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bb68:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801bb6c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb70:	7a83      	ldrb	r3, [r0, #10]
 801bb72:	4313      	orrs	r3, r2
 801bb74:	1aff      	subs	r7, r7, r3
 801bb76:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801bb7a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801bb7e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801bb82:	f7ff fe65 	bl	801b850 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bb86:	1b80      	subs	r0, r0, r6
 801bb88:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801bb8c:	e735      	b.n	801b9fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bb8e:	2300      	movs	r3, #0
 801bb90:	e7c1      	b.n	801bb16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bb92:	bf00      	nop
 801bb94:	3fc00079 	.word	0x3fc00079

0801bb98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801bb98:	3a01      	subs	r2, #1
 801bb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb9e:	b292      	uxth	r2, r2
 801bba0:	460c      	mov	r4, r1
 801bba2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801bba6:	42b2      	cmp	r2, r6
 801bba8:	d018      	beq.n	801bbdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801bbaa:	8b01      	ldrh	r1, [r0, #24]
 801bbac:	f834 5b02 	ldrh.w	r5, [r4], #2
 801bbb0:	4291      	cmp	r1, r2
 801bbb2:	d805      	bhi.n	801bbc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801bbb4:	4b13      	ldr	r3, [pc, #76]	; (801bc04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801bbb6:	21d3      	movs	r1, #211	; 0xd3
 801bbb8:	4a13      	ldr	r2, [pc, #76]	; (801bc08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801bbba:	4814      	ldr	r0, [pc, #80]	; (801bc0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801bbbc:	f00a fd26 	bl	802660c <__assert_func>
 801bbc0:	8ac1      	ldrh	r1, [r0, #22]
 801bbc2:	4411      	add	r1, r2
 801bbc4:	3a01      	subs	r2, #1
 801bbc6:	f001 0101 	and.w	r1, r1, #1
 801bbca:	b292      	uxth	r2, r2
 801bbcc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801bbd0:	8a49      	ldrh	r1, [r1, #18]
 801bbd2:	428d      	cmp	r5, r1
 801bbd4:	d0e7      	beq.n	801bba6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801bbd6:	2000      	movs	r0, #0
 801bbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbdc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801bbe0:	2600      	movs	r6, #0
 801bbe2:	f100 051a 	add.w	r5, r0, #26
 801bbe6:	441f      	add	r7, r3
 801bbe8:	b2b1      	uxth	r1, r6
 801bbea:	42b9      	cmp	r1, r7
 801bbec:	da08      	bge.n	801bc00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801bbee:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801bbf2:	4628      	mov	r0, r5
 801bbf4:	f7ff feda 	bl	801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bbf8:	3601      	adds	r6, #1
 801bbfa:	4540      	cmp	r0, r8
 801bbfc:	d0f4      	beq.n	801bbe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801bbfe:	e7ea      	b.n	801bbd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801bc00:	2001      	movs	r0, #1
 801bc02:	e7e9      	b.n	801bbd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801bc04:	0802a2e9 	.word	0x0802a2e9
 801bc08:	0802a878 	.word	0x0802a878
 801bc0c:	0802a2f7 	.word	0x0802a2f7

0801bc10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801bc10:	b538      	push	{r3, r4, r5, lr}
 801bc12:	8ac3      	ldrh	r3, [r0, #22]
 801bc14:	428b      	cmp	r3, r1
 801bc16:	d205      	bcs.n	801bc24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801bc18:	4b08      	ldr	r3, [pc, #32]	; (801bc3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801bc1a:	21d8      	movs	r1, #216	; 0xd8
 801bc1c:	4a08      	ldr	r2, [pc, #32]	; (801bc40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801bc1e:	4809      	ldr	r0, [pc, #36]	; (801bc44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801bc20:	f00a fcf4 	bl	802660c <__assert_func>
 801bc24:	8a82      	ldrh	r2, [r0, #20]
 801bc26:	250a      	movs	r5, #10
 801bc28:	1a5b      	subs	r3, r3, r1
 801bc2a:	440a      	add	r2, r1
 801bc2c:	82c3      	strh	r3, [r0, #22]
 801bc2e:	fbb2 f4f5 	udiv	r4, r2, r5
 801bc32:	fb05 2214 	mls	r2, r5, r4, r2
 801bc36:	8282      	strh	r2, [r0, #20]
 801bc38:	bd38      	pop	{r3, r4, r5, pc}
 801bc3a:	bf00      	nop
 801bc3c:	0802a2dd 	.word	0x0802a2dd
 801bc40:	0802a694 	.word	0x0802a694
 801bc44:	0802a2f7 	.word	0x0802a2f7

0801bc48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801bc48:	b538      	push	{r3, r4, r5, lr}
 801bc4a:	8ac3      	ldrh	r3, [r0, #22]
 801bc4c:	2b09      	cmp	r3, #9
 801bc4e:	d905      	bls.n	801bc5c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801bc50:	4b08      	ldr	r3, [pc, #32]	; (801bc74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801bc52:	21f7      	movs	r1, #247	; 0xf7
 801bc54:	4a08      	ldr	r2, [pc, #32]	; (801bc78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801bc56:	4809      	ldr	r0, [pc, #36]	; (801bc7c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801bc58:	f00a fcd8 	bl	802660c <__assert_func>
 801bc5c:	8a82      	ldrh	r2, [r0, #20]
 801bc5e:	250a      	movs	r5, #10
 801bc60:	441a      	add	r2, r3
 801bc62:	3301      	adds	r3, #1
 801bc64:	fbb2 f4f5 	udiv	r4, r2, r5
 801bc68:	fb05 2214 	mls	r2, r5, r4, r2
 801bc6c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801bc70:	82c3      	strh	r3, [r0, #22]
 801bc72:	bd38      	pop	{r3, r4, r5, pc}
 801bc74:	0802a2d1 	.word	0x0802a2d1
 801bc78:	0802a5e5 	.word	0x0802a5e5
 801bc7c:	0802a2f7 	.word	0x0802a2f7

0801bc80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801bc80:	b538      	push	{r3, r4, r5, lr}
 801bc82:	4604      	mov	r4, r0
 801bc84:	f100 051a 	add.w	r5, r0, #26
 801bc88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bc8a:	2b0a      	cmp	r3, #10
 801bc8c:	d01c      	beq.n	801bcc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801bc8e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801bc90:	b962      	cbnz	r2, 801bcac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801bc92:	f104 051a 	add.w	r5, r4, #26
 801bc96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bc98:	2b0a      	cmp	r3, #10
 801bc9a:	d015      	beq.n	801bcc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	f7ff fdf6 	bl	801b88e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bca2:	4601      	mov	r1, r0
 801bca4:	4628      	mov	r0, r5
 801bca6:	f7ff ffcf 	bl	801bc48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801bcaa:	e7f4      	b.n	801bc96 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801bcac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801bcae:	3a01      	subs	r2, #1
 801bcb0:	4628      	mov	r0, r5
 801bcb2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801bcb6:	3301      	adds	r3, #1
 801bcb8:	f003 0301 	and.w	r3, r3, #1
 801bcbc:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801bcbe:	8722      	strh	r2, [r4, #56]	; 0x38
 801bcc0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801bcc2:	f7ff ffc1 	bl	801bc48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801bcc6:	e7df      	b.n	801bc88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801bcc8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bccc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801bccc:	2300      	movs	r3, #0
 801bcce:	b510      	push	{r4, lr}
 801bcd0:	6043      	str	r3, [r0, #4]
 801bcd2:	4604      	mov	r4, r0
 801bcd4:	60c3      	str	r3, [r0, #12]
 801bcd6:	7403      	strb	r3, [r0, #16]
 801bcd8:	8603      	strh	r3, [r0, #48]	; 0x30
 801bcda:	8303      	strh	r3, [r0, #24]
 801bcdc:	8703      	strh	r3, [r0, #56]	; 0x38
 801bcde:	f7ff ffcf 	bl	801bc80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bce2:	4a0a      	ldr	r2, [pc, #40]	; (801bd0c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801bce4:	6813      	ldr	r3, [r2, #0]
 801bce6:	4611      	mov	r1, r2
 801bce8:	b913      	cbnz	r3, 801bcf0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801bcea:	6852      	ldr	r2, [r2, #4]
 801bcec:	07d0      	lsls	r0, r2, #31
 801bcee:	d50b      	bpl.n	801bd08 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801bcf0:	6849      	ldr	r1, [r1, #4]
 801bcf2:	104a      	asrs	r2, r1, #1
 801bcf4:	07c9      	lsls	r1, r1, #31
 801bcf6:	eb04 0002 	add.w	r0, r4, r2
 801bcfa:	bf48      	it	mi
 801bcfc:	58a2      	ldrmi	r2, [r4, r2]
 801bcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd02:	bf48      	it	mi
 801bd04:	58d3      	ldrmi	r3, [r2, r3]
 801bd06:	4718      	bx	r3
 801bd08:	bd10      	pop	{r4, pc}
 801bd0a:	bf00      	nop
 801bd0c:	20008dec 	.word	0x20008dec

0801bd10 <_ZN8touchgfx12TextProviderC1Ev>:
 801bd10:	2300      	movs	r3, #0
 801bd12:	2201      	movs	r2, #1
 801bd14:	b510      	push	{r4, lr}
 801bd16:	4604      	mov	r4, r0
 801bd18:	60c3      	str	r3, [r0, #12]
 801bd1a:	7403      	strb	r3, [r0, #16]
 801bd1c:	82c3      	strh	r3, [r0, #22]
 801bd1e:	8303      	strh	r3, [r0, #24]
 801bd20:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bd22:	8603      	strh	r3, [r0, #48]	; 0x30
 801bd24:	86c3      	strh	r3, [r0, #54]	; 0x36
 801bd26:	8703      	strh	r3, [r0, #56]	; 0x38
 801bd28:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bd2a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801bd2e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bd32:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801bd36:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801bd3a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801bd3e:	e9c0 3300 	strd	r3, r3, [r0]
 801bd42:	f7ff ffc3 	bl	801bccc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bd46:	4620      	mov	r0, r4
 801bd48:	bd10      	pop	{r4, pc}

0801bd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801bd4a:	b410      	push	{r4}
 801bd4c:	6082      	str	r2, [r0, #8]
 801bd4e:	6001      	str	r1, [r0, #0]
 801bd50:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd56:	f7ff bfb9 	b.w	801bccc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801bd5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801bd5c:	b508      	push	{r3, lr}
 801bd5e:	88c2      	ldrh	r2, [r0, #6]
 801bd60:	440a      	add	r2, r1
 801bd62:	2a02      	cmp	r2, #2
 801bd64:	dd05      	ble.n	801bd72 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801bd66:	4b06      	ldr	r3, [pc, #24]	; (801bd80 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801bd68:	21ec      	movs	r1, #236	; 0xec
 801bd6a:	4a06      	ldr	r2, [pc, #24]	; (801bd84 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801bd6c:	4806      	ldr	r0, [pc, #24]	; (801bd88 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801bd6e:	f00a fc4d 	bl	802660c <__assert_func>
 801bd72:	8883      	ldrh	r3, [r0, #4]
 801bd74:	80c2      	strh	r2, [r0, #6]
 801bd76:	1a59      	subs	r1, r3, r1
 801bd78:	f001 0101 	and.w	r1, r1, #1
 801bd7c:	8081      	strh	r1, [r0, #4]
 801bd7e:	bd08      	pop	{r3, pc}
 801bd80:	0802a323 	.word	0x0802a323
 801bd84:	0802a7f1 	.word	0x0802a7f1
 801bd88:	0802a2f7 	.word	0x0802a2f7

0801bd8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801bd8c:	b508      	push	{r3, lr}
 801bd8e:	88c3      	ldrh	r3, [r0, #6]
 801bd90:	428b      	cmp	r3, r1
 801bd92:	d805      	bhi.n	801bda0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801bd94:	4b06      	ldr	r3, [pc, #24]	; (801bdb0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801bd96:	21fd      	movs	r1, #253	; 0xfd
 801bd98:	4a06      	ldr	r2, [pc, #24]	; (801bdb4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801bd9a:	4807      	ldr	r0, [pc, #28]	; (801bdb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801bd9c:	f00a fc36 	bl	802660c <__assert_func>
 801bda0:	8883      	ldrh	r3, [r0, #4]
 801bda2:	4419      	add	r1, r3
 801bda4:	f001 0101 	and.w	r1, r1, #1
 801bda8:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801bdac:	bd08      	pop	{r3, pc}
 801bdae:	bf00      	nop
 801bdb0:	0802a2e9 	.word	0x0802a2e9
 801bdb4:	0802a949 	.word	0x0802a949
 801bdb8:	0802a2f7 	.word	0x0802a2f7

0801bdbc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801bdbc:	b570      	push	{r4, r5, r6, lr}
 801bdbe:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801bdc0:	4604      	mov	r4, r0
 801bdc2:	b92a      	cbnz	r2, 801bdd0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801bdc4:	4b12      	ldr	r3, [pc, #72]	; (801be10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801bdc6:	21de      	movs	r1, #222	; 0xde
 801bdc8:	4a12      	ldr	r2, [pc, #72]	; (801be14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801bdca:	4813      	ldr	r0, [pc, #76]	; (801be18 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801bdcc:	f00a fc1e 	bl	802660c <__assert_func>
 801bdd0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801bdd2:	260a      	movs	r6, #10
 801bdd4:	3a01      	subs	r2, #1
 801bdd6:	3412      	adds	r4, #18
 801bdd8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801bddc:	3301      	adds	r3, #1
 801bdde:	8b4d      	ldrh	r5, [r1, #26]
 801bde0:	8602      	strh	r2, [r0, #48]	; 0x30
 801bde2:	fbb3 f1f6 	udiv	r1, r3, r6
 801bde6:	fb06 3311 	mls	r3, r6, r1, r3
 801bdea:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bdec:	f7ff ff48 	bl	801bc80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bdf0:	88e3      	ldrh	r3, [r4, #6]
 801bdf2:	2101      	movs	r1, #1
 801bdf4:	2b02      	cmp	r3, #2
 801bdf6:	bf04      	itt	eq
 801bdf8:	2301      	moveq	r3, #1
 801bdfa:	80e3      	strheq	r3, [r4, #6]
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f7ff ffad 	bl	801bd5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801be02:	4620      	mov	r0, r4
 801be04:	462a      	mov	r2, r5
 801be06:	2100      	movs	r1, #0
 801be08:	f7ff ffc0 	bl	801bd8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801be0c:	4628      	mov	r0, r5
 801be0e:	bd70      	pop	{r4, r5, r6, pc}
 801be10:	0802a2c8 	.word	0x0802a2c8
 801be14:	0802a53a 	.word	0x0802a53a
 801be18:	0802a2f7 	.word	0x0802a2f7

0801be1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801be1c:	428a      	cmp	r2, r1
 801be1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be22:	4604      	mov	r4, r0
 801be24:	460e      	mov	r6, r1
 801be26:	4615      	mov	r5, r2
 801be28:	469a      	mov	sl, r3
 801be2a:	d92b      	bls.n	801be84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801be2c:	1a57      	subs	r7, r2, r1
 801be2e:	f04f 0800 	mov.w	r8, #0
 801be32:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801be36:	f04f 0b0a 	mov.w	fp, #10
 801be3a:	b2bf      	uxth	r7, r7
 801be3c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801be3e:	b92b      	cbnz	r3, 801be4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801be40:	4b24      	ldr	r3, [pc, #144]	; (801bed4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801be42:	21e6      	movs	r1, #230	; 0xe6
 801be44:	4a24      	ldr	r2, [pc, #144]	; (801bed8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801be46:	4825      	ldr	r0, [pc, #148]	; (801bedc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801be48:	f00a fbe0 	bl	802660c <__assert_func>
 801be4c:	3b01      	subs	r3, #1
 801be4e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801be50:	2101      	movs	r1, #1
 801be52:	4648      	mov	r0, r9
 801be54:	b29b      	uxth	r3, r3
 801be56:	f108 0801 	add.w	r8, r8, #1
 801be5a:	441a      	add	r2, r3
 801be5c:	8623      	strh	r3, [r4, #48]	; 0x30
 801be5e:	fbb2 f3fb 	udiv	r3, r2, fp
 801be62:	fb0b 2313 	mls	r3, fp, r3, r2
 801be66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801be6a:	8b5a      	ldrh	r2, [r3, #26]
 801be6c:	9201      	str	r2, [sp, #4]
 801be6e:	f7ff ff75 	bl	801bd5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801be72:	9a01      	ldr	r2, [sp, #4]
 801be74:	2100      	movs	r1, #0
 801be76:	4648      	mov	r0, r9
 801be78:	f7ff ff88 	bl	801bd8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801be7c:	fa1f f388 	uxth.w	r3, r8
 801be80:	429f      	cmp	r7, r3
 801be82:	d8db      	bhi.n	801be3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801be84:	f104 071a 	add.w	r7, r4, #26
 801be88:	4631      	mov	r1, r6
 801be8a:	260a      	movs	r6, #10
 801be8c:	4638      	mov	r0, r7
 801be8e:	f7ff febf 	bl	801bc10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801be92:	b1c5      	cbz	r5, 801bec6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801be94:	3d01      	subs	r5, #1
 801be96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801be98:	b2ad      	uxth	r5, r5
 801be9a:	2b09      	cmp	r3, #9
 801be9c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801bea0:	d903      	bls.n	801beaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801bea2:	4b0f      	ldr	r3, [pc, #60]	; (801bee0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801bea4:	21ec      	movs	r1, #236	; 0xec
 801bea6:	4a0f      	ldr	r2, [pc, #60]	; (801bee4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801bea8:	e7cd      	b.n	801be46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801beaa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801beac:	3301      	adds	r3, #1
 801beae:	3109      	adds	r1, #9
 801beb0:	8623      	strh	r3, [r4, #48]	; 0x30
 801beb2:	fbb1 f0f6 	udiv	r0, r1, r6
 801beb6:	fb06 1110 	mls	r1, r6, r0, r1
 801beba:	4638      	mov	r0, r7
 801bebc:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801bebe:	2100      	movs	r1, #0
 801bec0:	f7ff fd5a 	bl	801b978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bec4:	e7e5      	b.n	801be92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801bec6:	4620      	mov	r0, r4
 801bec8:	b003      	add	sp, #12
 801beca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bece:	f7ff bed7 	b.w	801bc80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bed2:	bf00      	nop
 801bed4:	0802a2c8 	.word	0x0802a2c8
 801bed8:	0802a3be 	.word	0x0802a3be
 801bedc:	0802a2f7 	.word	0x0802a2f7
 801bee0:	0802a323 	.word	0x0802a323
 801bee4:	0802a336 	.word	0x0802a336

0801bee8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801bee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beec:	4605      	mov	r5, r0
 801beee:	4616      	mov	r6, r2
 801bef0:	1c8c      	adds	r4, r1, #2
 801bef2:	8809      	ldrh	r1, [r1, #0]
 801bef4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801bef8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801befc:	42b3      	cmp	r3, r6
 801befe:	d124      	bne.n	801bf4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801bf00:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801bf04:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801bf08:	f001 070f 	and.w	r7, r1, #15
 801bf0c:	4652      	mov	r2, sl
 801bf0e:	f8cd 8000 	str.w	r8, [sp]
 801bf12:	464b      	mov	r3, r9
 801bf14:	4621      	mov	r1, r4
 801bf16:	4628      	mov	r0, r5
 801bf18:	f7ff fe3e 	bl	801bb98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801bf1c:	4683      	mov	fp, r0
 801bf1e:	b168      	cbz	r0, 801bf3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801bf20:	eb0a 0109 	add.w	r1, sl, r9
 801bf24:	463a      	mov	r2, r7
 801bf26:	4628      	mov	r0, r5
 801bf28:	4441      	add	r1, r8
 801bf2a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801bf2e:	4649      	mov	r1, r9
 801bf30:	f7ff ff74 	bl	801be1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801bf34:	4658      	mov	r0, fp
 801bf36:	b003      	add	sp, #12
 801bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf3c:	eb07 010a 	add.w	r1, r7, sl
 801bf40:	4449      	add	r1, r9
 801bf42:	4441      	add	r1, r8
 801bf44:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801bf48:	e7d2      	b.n	801bef0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801bf4a:	f04f 0b00 	mov.w	fp, #0
 801bf4e:	e7f1      	b.n	801bf34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801bf50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801bf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf54:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801bf56:	4604      	mov	r4, r0
 801bf58:	260b      	movs	r6, #11
 801bf5a:	f100 091a 	add.w	r9, r0, #26
 801bf5e:	886f      	ldrh	r7, [r5, #2]
 801bf60:	087f      	lsrs	r7, r7, #1
 801bf62:	3e01      	subs	r6, #1
 801bf64:	d013      	beq.n	801bf8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801bf66:	2100      	movs	r1, #0
 801bf68:	4648      	mov	r0, r9
 801bf6a:	f7ff fd1f 	bl	801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bf6e:	462a      	mov	r2, r5
 801bf70:	4680      	mov	r8, r0
 801bf72:	4603      	mov	r3, r0
 801bf74:	4639      	mov	r1, r7
 801bf76:	4620      	mov	r0, r4
 801bf78:	f7ff fce0 	bl	801b93c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801bf7c:	b138      	cbz	r0, 801bf8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801bf7e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801bf82:	4642      	mov	r2, r8
 801bf84:	4620      	mov	r0, r4
 801bf86:	f7ff ffaf 	bl	801bee8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801bf8a:	2800      	cmp	r0, #0
 801bf8c:	d1e9      	bne.n	801bf62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801bf8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801bf94:	4b1e      	ldr	r3, [pc, #120]	; (801c010 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801bf96:	b570      	push	{r4, r5, r6, lr}
 801bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9c:	4604      	mov	r4, r0
 801bf9e:	f003 0501 	and.w	r5, r3, #1
 801bfa2:	b902      	cbnz	r2, 801bfa6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801bfa4:	b165      	cbz	r5, 801bfc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801bfa6:	105b      	asrs	r3, r3, #1
 801bfa8:	f104 061a 	add.w	r6, r4, #26
 801bfac:	18e0      	adds	r0, r4, r3
 801bfae:	b10d      	cbz	r5, 801bfb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801bfb0:	58e3      	ldr	r3, [r4, r3]
 801bfb2:	589a      	ldr	r2, [r3, r2]
 801bfb4:	4790      	blx	r2
 801bfb6:	2100      	movs	r1, #0
 801bfb8:	4602      	mov	r2, r0
 801bfba:	4630      	mov	r0, r6
 801bfbc:	f7ff fcdc 	bl	801b978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bfc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bfc2:	b303      	cbz	r3, 801c006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801bfc4:	f104 051a 	add.w	r5, r4, #26
 801bfc8:	2100      	movs	r1, #0
 801bfca:	4628      	mov	r0, r5
 801bfcc:	f7ff fcee 	bl	801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bfd0:	b1c8      	cbz	r0, 801c006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801bfd2:	4620      	mov	r0, r4
 801bfd4:	f7ff ffbc 	bl	801bf50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801bfd8:	2101      	movs	r1, #1
 801bfda:	4628      	mov	r0, r5
 801bfdc:	f7ff fce6 	bl	801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bfe0:	f640 133f 	movw	r3, #2367	; 0x93f
 801bfe4:	4606      	mov	r6, r0
 801bfe6:	4298      	cmp	r0, r3
 801bfe8:	d10d      	bne.n	801c006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801bfea:	2100      	movs	r1, #0
 801bfec:	4628      	mov	r0, r5
 801bfee:	f7ff fcdd 	bl	801b9ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bff2:	2101      	movs	r1, #1
 801bff4:	4602      	mov	r2, r0
 801bff6:	4628      	mov	r0, r5
 801bff8:	f7ff fcbe 	bl	801b978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bffc:	4632      	mov	r2, r6
 801bffe:	2100      	movs	r1, #0
 801c000:	4628      	mov	r0, r5
 801c002:	f7ff fcb9 	bl	801b978 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c006:	4620      	mov	r0, r4
 801c008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c00c:	f7ff bed6 	b.w	801bdbc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c010:	20008df4 	.word	0x20008df4

0801c014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c016:	4617      	mov	r7, r2
 801c018:	461e      	mov	r6, r3
 801c01a:	4605      	mov	r5, r0
 801c01c:	f7ff ffba 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	4604      	mov	r4, r0
 801c024:	4601      	mov	r1, r0
 801c026:	4638      	mov	r0, r7
 801c028:	68db      	ldr	r3, [r3, #12]
 801c02a:	4798      	blx	r3
 801c02c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c030:	4602      	mov	r2, r0
 801c032:	6030      	str	r0, [r6, #0]
 801c034:	b29b      	uxth	r3, r3
 801c036:	2b7f      	cmp	r3, #127	; 0x7f
 801c038:	d813      	bhi.n	801c062 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801c03a:	4639      	mov	r1, r7
 801c03c:	4628      	mov	r0, r5
 801c03e:	f7ff fccf 	bl	801b9e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c042:	6030      	str	r0, [r6, #0]
 801c044:	6833      	ldr	r3, [r6, #0]
 801c046:	b143      	cbz	r3, 801c05a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c048:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801c04c:	7a9b      	ldrb	r3, [r3, #10]
 801c04e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c052:	4313      	orrs	r3, r2
 801c054:	bf0c      	ite	eq
 801c056:	2301      	moveq	r3, #1
 801c058:	2300      	movne	r3, #0
 801c05a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c05e:	4620      	mov	r0, r4
 801c060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c062:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c066:	2b00      	cmp	r3, #0
 801c068:	d0ec      	beq.n	801c044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c06a:	f640 1302 	movw	r3, #2306	; 0x902
 801c06e:	429c      	cmp	r4, r3
 801c070:	d1e8      	bne.n	801c044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c072:	4601      	mov	r1, r0
 801c074:	4628      	mov	r0, r5
 801c076:	f7ff fc32 	bl	801b8de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c07a:	e7e2      	b.n	801c042 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801c07c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c080:	4617      	mov	r7, r2
 801c082:	461e      	mov	r6, r3
 801c084:	4605      	mov	r5, r0
 801c086:	f7ff ff85 	bl	801bf94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c08a:	683b      	ldr	r3, [r7, #0]
 801c08c:	4604      	mov	r4, r0
 801c08e:	4601      	mov	r1, r0
 801c090:	4638      	mov	r0, r7
 801c092:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c09a:	47c0      	blx	r8
 801c09c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	6030      	str	r0, [r6, #0]
 801c0a4:	b29b      	uxth	r3, r3
 801c0a6:	2b7f      	cmp	r3, #127	; 0x7f
 801c0a8:	d814      	bhi.n	801c0d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801c0aa:	4639      	mov	r1, r7
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	f7ff fc97 	bl	801b9e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c0b2:	6030      	str	r0, [r6, #0]
 801c0b4:	6833      	ldr	r3, [r6, #0]
 801c0b6:	b143      	cbz	r3, 801c0ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c0b8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801c0bc:	7a9b      	ldrb	r3, [r3, #10]
 801c0be:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c0c2:	4313      	orrs	r3, r2
 801c0c4:	bf0c      	ite	eq
 801c0c6:	2301      	moveq	r3, #1
 801c0c8:	2300      	movne	r3, #0
 801c0ca:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0d4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d0eb      	beq.n	801c0b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c0dc:	f640 1302 	movw	r3, #2306	; 0x902
 801c0e0:	429c      	cmp	r4, r3
 801c0e2:	d1e7      	bne.n	801c0b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c0e4:	4601      	mov	r1, r0
 801c0e6:	4628      	mov	r0, r5
 801c0e8:	f7ff fbf9 	bl	801b8de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c0ec:	e7e1      	b.n	801c0b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801c0ee <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c0ee:	4602      	mov	r2, r0
 801c0f0:	b148      	cbz	r0, 801c106 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	b298      	uxth	r0, r3
 801c0f6:	3301      	adds	r3, #1
 801c0f8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c0fc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c100:	2900      	cmp	r1, #0
 801c102:	d1f7      	bne.n	801c0f4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c104:	4770      	bx	lr
 801c106:	4770      	bx	lr

0801c108 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801c108:	b140      	cbz	r0, 801c11c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801c10a:	4602      	mov	r2, r0
 801c10c:	1a13      	subs	r3, r2, r0
 801c10e:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c112:	b29b      	uxth	r3, r3
 801c114:	2900      	cmp	r1, #0
 801c116:	d1f9      	bne.n	801c10c <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801c118:	4618      	mov	r0, r3
 801c11a:	4770      	bx	lr
 801c11c:	4603      	mov	r3, r0
 801c11e:	e7fb      	b.n	801c118 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801c120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c120:	b530      	push	{r4, r5, lr}
 801c122:	4604      	mov	r4, r0
 801c124:	b159      	cbz	r1, 801c13e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c126:	b148      	cbz	r0, 801c13c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c128:	2300      	movs	r3, #0
 801c12a:	b298      	uxth	r0, r3
 801c12c:	4282      	cmp	r2, r0
 801c12e:	d905      	bls.n	801c13c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c130:	5ccd      	ldrb	r5, [r1, r3]
 801c132:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c136:	3301      	adds	r3, #1
 801c138:	2d00      	cmp	r5, #0
 801c13a:	d1f6      	bne.n	801c12a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c13c:	bd30      	pop	{r4, r5, pc}
 801c13e:	4608      	mov	r0, r1
 801c140:	e7fc      	b.n	801c13c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c142 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801c142:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c144:	468c      	mov	ip, r1
 801c146:	b08b      	sub	sp, #44	; 0x2c
 801c148:	2100      	movs	r1, #0
 801c14a:	ae01      	add	r6, sp, #4
 801c14c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c150:	211f      	movs	r1, #31
 801c152:	fbb0 f7f3 	udiv	r7, r0, r3
 801c156:	fb03 0517 	mls	r5, r3, r7, r0
 801c15a:	4638      	mov	r0, r7
 801c15c:	b2ec      	uxtb	r4, r5
 801c15e:	2d09      	cmp	r5, #9
 801c160:	bfd4      	ite	le
 801c162:	3430      	addle	r4, #48	; 0x30
 801c164:	3457      	addgt	r4, #87	; 0x57
 801c166:	b2e4      	uxtb	r4, r4
 801c168:	558c      	strb	r4, [r1, r6]
 801c16a:	1e4c      	subs	r4, r1, #1
 801c16c:	b92f      	cbnz	r7, 801c17a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801c16e:	4431      	add	r1, r6
 801c170:	4660      	mov	r0, ip
 801c172:	f7ff ffd5 	bl	801c120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c176:	b00b      	add	sp, #44	; 0x2c
 801c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c17a:	4621      	mov	r1, r4
 801c17c:	e7e9      	b.n	801c152 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801c17e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c17e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c180:	4607      	mov	r7, r0
 801c182:	b08b      	sub	sp, #44	; 0x2c
 801c184:	4608      	mov	r0, r1
 801c186:	b341      	cbz	r1, 801c1da <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c188:	1e99      	subs	r1, r3, #2
 801c18a:	290e      	cmp	r1, #14
 801c18c:	d825      	bhi.n	801c1da <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c18e:	2100      	movs	r1, #0
 801c190:	463c      	mov	r4, r7
 801c192:	261f      	movs	r6, #31
 801c194:	f10d 0c04 	add.w	ip, sp, #4
 801c198:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c19c:	1e71      	subs	r1, r6, #1
 801c19e:	fb94 fef3 	sdiv	lr, r4, r3
 801c1a2:	fb03 441e 	mls	r4, r3, lr, r4
 801c1a6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c1aa:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c1ae:	b2ec      	uxtb	r4, r5
 801c1b0:	2d09      	cmp	r5, #9
 801c1b2:	bfd4      	ite	le
 801c1b4:	3430      	addle	r4, #48	; 0x30
 801c1b6:	3457      	addgt	r4, #87	; 0x57
 801c1b8:	b2e4      	uxtb	r4, r4
 801c1ba:	f80c 4006 	strb.w	r4, [ip, r6]
 801c1be:	4674      	mov	r4, lr
 801c1c0:	b96c      	cbnz	r4, 801c1de <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c1c2:	2f00      	cmp	r7, #0
 801c1c4:	da05      	bge.n	801c1d2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c1c6:	ab0a      	add	r3, sp, #40	; 0x28
 801c1c8:	4419      	add	r1, r3
 801c1ca:	232d      	movs	r3, #45	; 0x2d
 801c1cc:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c1d0:	1eb1      	subs	r1, r6, #2
 801c1d2:	3101      	adds	r1, #1
 801c1d4:	4461      	add	r1, ip
 801c1d6:	f7ff ffa3 	bl	801c120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c1da:	b00b      	add	sp, #44	; 0x2c
 801c1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1de:	460e      	mov	r6, r1
 801c1e0:	e7dc      	b.n	801c19c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c1e2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801c1e2:	b510      	push	{r4, lr}
 801c1e4:	b158      	cbz	r0, 801c1fe <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c1e6:	1e82      	subs	r2, r0, #2
 801c1e8:	210a      	movs	r1, #10
 801c1ea:	2000      	movs	r0, #0
 801c1ec:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c1f0:	3b30      	subs	r3, #48	; 0x30
 801c1f2:	b29c      	uxth	r4, r3
 801c1f4:	2c09      	cmp	r4, #9
 801c1f6:	d802      	bhi.n	801c1fe <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c1f8:	fb01 3000 	mla	r0, r1, r0, r3
 801c1fc:	e7f6      	b.n	801c1ec <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801c1fe:	bd10      	pop	{r4, pc}

0801c200 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c204:	b085      	sub	sp, #20
 801c206:	f8d0 8000 	ldr.w	r8, [r0]
 801c20a:	468a      	mov	sl, r1
 801c20c:	461c      	mov	r4, r3
 801c20e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c212:	4681      	mov	r9, r0
 801c214:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c218:	4640      	mov	r0, r8
 801c21a:	9203      	str	r2, [sp, #12]
 801c21c:	9102      	str	r1, [sp, #8]
 801c21e:	9301      	str	r3, [sp, #4]
 801c220:	f7ff ff65 	bl	801c0ee <_ZN8touchgfx7Unicode6strlenEPKt>
 801c224:	9a03      	ldr	r2, [sp, #12]
 801c226:	f1ba 0f00 	cmp.w	sl, #0
 801c22a:	bf0c      	ite	eq
 801c22c:	4684      	moveq	ip, r0
 801c22e:	f100 0c01 	addne.w	ip, r0, #1
 801c232:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801c236:	8812      	ldrh	r2, [r2, #0]
 801c238:	fa1f fc8c 	uxth.w	ip, ip
 801c23c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c23e:	2a69      	cmp	r2, #105	; 0x69
 801c240:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c242:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801c244:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801c248:	d004      	beq.n	801c254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801c24a:	d844      	bhi.n	801c2d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801c24c:	2a58      	cmp	r2, #88	; 0x58
 801c24e:	d001      	beq.n	801c254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801c250:	2a64      	cmp	r2, #100	; 0x64
 801c252:	d14b      	bne.n	801c2ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801c254:	b1a4      	cbz	r4, 801c280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801c256:	b956      	cbnz	r6, 801c26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801c258:	2801      	cmp	r0, #1
 801c25a:	d108      	bne.n	801c26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801c25c:	f8b8 2000 	ldrh.w	r2, [r8]
 801c260:	2a30      	cmp	r2, #48	; 0x30
 801c262:	bf02      	ittt	eq
 801c264:	f108 0202 	addeq.w	r2, r8, #2
 801c268:	4630      	moveq	r0, r6
 801c26a:	f8c9 2000 	streq.w	r2, [r9]
 801c26e:	45b4      	cmp	ip, r6
 801c270:	da3e      	bge.n	801c2f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801c272:	b2b6      	uxth	r6, r6
 801c274:	eba6 040c 	sub.w	r4, r6, ip
 801c278:	46b4      	mov	ip, r6
 801c27a:	b2a4      	uxth	r4, r4
 801c27c:	f04f 0b00 	mov.w	fp, #0
 801c280:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c284:	3a01      	subs	r2, #1
 801c286:	b169      	cbz	r1, 801c2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c288:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c28a:	458c      	cmp	ip, r1
 801c28c:	da09      	bge.n	801c2a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801c28e:	eba1 010c 	sub.w	r1, r1, ip
 801c292:	b289      	uxth	r1, r1
 801c294:	b933      	cbnz	r3, 801c2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c296:	f1bb 0f00 	cmp.w	fp, #0
 801c29a:	d02b      	beq.n	801c2f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801c29c:	b350      	cbz	r0, 801c2f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801c29e:	440c      	add	r4, r1
 801c2a0:	b2a4      	uxth	r4, r4
 801c2a2:	2100      	movs	r1, #0
 801c2a4:	682b      	ldr	r3, [r5, #0]
 801c2a6:	4293      	cmp	r3, r2
 801c2a8:	da07      	bge.n	801c2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801c2aa:	f1ba 0f00 	cmp.w	sl, #0
 801c2ae:	d004      	beq.n	801c2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801c2b0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801c2b4:	682b      	ldr	r3, [r5, #0]
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	602b      	str	r3, [r5, #0]
 801c2ba:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801c2be:	b354      	cbz	r4, 801c316 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c2c0:	682e      	ldr	r6, [r5, #0]
 801c2c2:	3c01      	subs	r4, #1
 801c2c4:	42b2      	cmp	r2, r6
 801c2c6:	b2a4      	uxth	r4, r4
 801c2c8:	dd25      	ble.n	801c316 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c2ca:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801c2ce:	682b      	ldr	r3, [r5, #0]
 801c2d0:	3301      	adds	r3, #1
 801c2d2:	602b      	str	r3, [r5, #0]
 801c2d4:	e7f3      	b.n	801c2be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801c2d6:	2a73      	cmp	r2, #115	; 0x73
 801c2d8:	d003      	beq.n	801c2e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801c2da:	2a78      	cmp	r2, #120	; 0x78
 801c2dc:	d0ba      	beq.n	801c254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801c2de:	2a6f      	cmp	r2, #111	; 0x6f
 801c2e0:	e7b7      	b.n	801c252 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801c2e2:	2c00      	cmp	r4, #0
 801c2e4:	d0cc      	beq.n	801c280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801c2e6:	42b0      	cmp	r0, r6
 801c2e8:	dd00      	ble.n	801c2ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801c2ea:	b2b0      	uxth	r0, r6
 801c2ec:	2400      	movs	r4, #0
 801c2ee:	e7c7      	b.n	801c280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801c2f0:	2400      	movs	r4, #0
 801c2f2:	e7c3      	b.n	801c27c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801c2f4:	2900      	cmp	r1, #0
 801c2f6:	d0d5      	beq.n	801c2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c2f8:	f04f 0c20 	mov.w	ip, #32
 801c2fc:	682e      	ldr	r6, [r5, #0]
 801c2fe:	2900      	cmp	r1, #0
 801c300:	d0d0      	beq.n	801c2a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c302:	3901      	subs	r1, #1
 801c304:	4296      	cmp	r6, r2
 801c306:	b289      	uxth	r1, r1
 801c308:	dacb      	bge.n	801c2a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801c30a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801c30e:	682b      	ldr	r3, [r5, #0]
 801c310:	3301      	adds	r3, #1
 801c312:	602b      	str	r3, [r5, #0]
 801c314:	e7f2      	b.n	801c2fc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801c316:	b198      	cbz	r0, 801c340 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801c318:	f8d9 3000 	ldr.w	r3, [r9]
 801c31c:	881c      	ldrh	r4, [r3, #0]
 801c31e:	b17c      	cbz	r4, 801c340 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801c320:	682c      	ldr	r4, [r5, #0]
 801c322:	3801      	subs	r0, #1
 801c324:	42a2      	cmp	r2, r4
 801c326:	b280      	uxth	r0, r0
 801c328:	dd0a      	ble.n	801c340 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801c32a:	1c9c      	adds	r4, r3, #2
 801c32c:	f8c9 4000 	str.w	r4, [r9]
 801c330:	881c      	ldrh	r4, [r3, #0]
 801c332:	682b      	ldr	r3, [r5, #0]
 801c334:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801c338:	682b      	ldr	r3, [r5, #0]
 801c33a:	3301      	adds	r3, #1
 801c33c:	602b      	str	r3, [r5, #0]
 801c33e:	e7ea      	b.n	801c316 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c340:	2620      	movs	r6, #32
 801c342:	b151      	cbz	r1, 801c35a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801c344:	6828      	ldr	r0, [r5, #0]
 801c346:	3901      	subs	r1, #1
 801c348:	4282      	cmp	r2, r0
 801c34a:	b289      	uxth	r1, r1
 801c34c:	dd05      	ble.n	801c35a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801c34e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801c352:	682b      	ldr	r3, [r5, #0]
 801c354:	3301      	adds	r3, #1
 801c356:	602b      	str	r3, [r5, #0]
 801c358:	e7f3      	b.n	801c342 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801c35a:	b005      	add	sp, #20
 801c35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c364:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c366:	4604      	mov	r4, r0
 801c368:	f04f 0801 	mov.w	r8, #1
 801c36c:	2000      	movs	r0, #0
 801c36e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801c372:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801c376:	8008      	strh	r0, [r1, #0]
 801c378:	7010      	strb	r0, [r2, #0]
 801c37a:	7018      	strb	r0, [r3, #0]
 801c37c:	f88c 0000 	strb.w	r0, [ip]
 801c380:	f88e 0000 	strb.w	r0, [lr]
 801c384:	7030      	strb	r0, [r6, #0]
 801c386:	6820      	ldr	r0, [r4, #0]
 801c388:	8800      	ldrh	r0, [r0, #0]
 801c38a:	b190      	cbz	r0, 801c3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801c38c:	282b      	cmp	r0, #43	; 0x2b
 801c38e:	d001      	beq.n	801c394 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801c390:	2820      	cmp	r0, #32
 801c392:	d104      	bne.n	801c39e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801c394:	8008      	strh	r0, [r1, #0]
 801c396:	6820      	ldr	r0, [r4, #0]
 801c398:	3002      	adds	r0, #2
 801c39a:	6020      	str	r0, [r4, #0]
 801c39c:	e7f3      	b.n	801c386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801c39e:	282d      	cmp	r0, #45	; 0x2d
 801c3a0:	d102      	bne.n	801c3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801c3a2:	f882 8000 	strb.w	r8, [r2]
 801c3a6:	e7f6      	b.n	801c396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801c3a8:	2823      	cmp	r0, #35	; 0x23
 801c3aa:	d102      	bne.n	801c3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801c3ac:	f883 8000 	strb.w	r8, [r3]
 801c3b0:	e7f1      	b.n	801c396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801c3b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c3b6:	2b09      	cmp	r3, #9
 801c3b8:	d901      	bls.n	801c3be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801c3ba:	282a      	cmp	r0, #42	; 0x2a
 801c3bc:	d114      	bne.n	801c3e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801c3be:	2201      	movs	r2, #1
 801c3c0:	f88e 2000 	strb.w	r2, [lr]
 801c3c4:	6823      	ldr	r3, [r4, #0]
 801c3c6:	8819      	ldrh	r1, [r3, #0]
 801c3c8:	2930      	cmp	r1, #48	; 0x30
 801c3ca:	bf02      	ittt	eq
 801c3cc:	3302      	addeq	r3, #2
 801c3ce:	6023      	streq	r3, [r4, #0]
 801c3d0:	f88c 2000 	strbeq.w	r2, [ip]
 801c3d4:	6820      	ldr	r0, [r4, #0]
 801c3d6:	8803      	ldrh	r3, [r0, #0]
 801c3d8:	2b2a      	cmp	r3, #42	; 0x2a
 801c3da:	d11e      	bne.n	801c41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c3e0:	603b      	str	r3, [r7, #0]
 801c3e2:	6823      	ldr	r3, [r4, #0]
 801c3e4:	3302      	adds	r3, #2
 801c3e6:	6023      	str	r3, [r4, #0]
 801c3e8:	6823      	ldr	r3, [r4, #0]
 801c3ea:	881b      	ldrh	r3, [r3, #0]
 801c3ec:	2b2e      	cmp	r3, #46	; 0x2e
 801c3ee:	d112      	bne.n	801c416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801c3f0:	2301      	movs	r3, #1
 801c3f2:	7033      	strb	r3, [r6, #0]
 801c3f4:	6823      	ldr	r3, [r4, #0]
 801c3f6:	1c98      	adds	r0, r3, #2
 801c3f8:	6020      	str	r0, [r4, #0]
 801c3fa:	885b      	ldrh	r3, [r3, #2]
 801c3fc:	2b2a      	cmp	r3, #42	; 0x2a
 801c3fe:	d117      	bne.n	801c430 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801c400:	f04f 33ff 	mov.w	r3, #4294967295
 801c404:	602b      	str	r3, [r5, #0]
 801c406:	6823      	ldr	r3, [r4, #0]
 801c408:	3302      	adds	r3, #2
 801c40a:	6023      	str	r3, [r4, #0]
 801c40c:	682b      	ldr	r3, [r5, #0]
 801c40e:	2b06      	cmp	r3, #6
 801c410:	bfa8      	it	ge
 801c412:	2306      	movge	r3, #6
 801c414:	602b      	str	r3, [r5, #0]
 801c416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c41a:	f7ff fee2 	bl	801c1e2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801c41e:	6038      	str	r0, [r7, #0]
 801c420:	6823      	ldr	r3, [r4, #0]
 801c422:	881a      	ldrh	r2, [r3, #0]
 801c424:	3a30      	subs	r2, #48	; 0x30
 801c426:	2a09      	cmp	r2, #9
 801c428:	d8de      	bhi.n	801c3e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801c42a:	3302      	adds	r3, #2
 801c42c:	6023      	str	r3, [r4, #0]
 801c42e:	e7f7      	b.n	801c420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801c430:	f7ff fed7 	bl	801c1e2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801c434:	6028      	str	r0, [r5, #0]
 801c436:	6823      	ldr	r3, [r4, #0]
 801c438:	881a      	ldrh	r2, [r3, #0]
 801c43a:	3a30      	subs	r2, #48	; 0x30
 801c43c:	2a09      	cmp	r2, #9
 801c43e:	d8e5      	bhi.n	801c40c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801c440:	3302      	adds	r3, #2
 801c442:	6023      	str	r3, [r4, #0]
 801c444:	e7f7      	b.n	801c436 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801c446 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801c446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c44a:	b0a2      	sub	sp, #136	; 0x88
 801c44c:	2500      	movs	r5, #0
 801c44e:	4606      	mov	r6, r0
 801c450:	460f      	mov	r7, r1
 801c452:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801c456:	9209      	str	r2, [sp, #36]	; 0x24
 801c458:	4629      	mov	r1, r5
 801c45a:	2242      	movs	r2, #66	; 0x42
 801c45c:	4640      	mov	r0, r8
 801c45e:	461c      	mov	r4, r3
 801c460:	950d      	str	r5, [sp, #52]	; 0x34
 801c462:	f7fe fe26 	bl	801b0b2 <_ZN8touchgfx6memsetEPvhm>
 801c466:	b30e      	cbz	r6, 801c4ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801c468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c46a:	b1f3      	cbz	r3, 801c4aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801c46c:	f107 3aff 	add.w	sl, r7, #4294967295
 801c470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c474:	8812      	ldrh	r2, [r2, #0]
 801c476:	2a00      	cmp	r2, #0
 801c478:	f000 80b3 	beq.w	801c5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801c47c:	459a      	cmp	sl, r3
 801c47e:	f340 80b0 	ble.w	801c5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801c482:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c488:	f8b9 2000 	ldrh.w	r2, [r9]
 801c48c:	2a00      	cmp	r2, #0
 801c48e:	d0ef      	beq.n	801c470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c490:	2a25      	cmp	r2, #37	; 0x25
 801c492:	f000 80aa 	beq.w	801c5ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801c496:	459a      	cmp	sl, r3
 801c498:	ddea      	ble.n	801c470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c49a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c49e:	f109 0202 	add.w	r2, r9, #2
 801c4a2:	3301      	adds	r3, #1
 801c4a4:	9209      	str	r2, [sp, #36]	; 0x24
 801c4a6:	930d      	str	r3, [sp, #52]	; 0x34
 801c4a8:	e7eb      	b.n	801c482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801c4aa:	8033      	strh	r3, [r6, #0]
 801c4ac:	4630      	mov	r0, r6
 801c4ae:	b022      	add	sp, #136	; 0x88
 801c4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4b4:	3b63      	subs	r3, #99	; 0x63
 801c4b6:	2b01      	cmp	r3, #1
 801c4b8:	f200 80df 	bhi.w	801c67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801c4bc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c4c0:	8813      	ldrh	r3, [r2, #0]
 801c4c2:	2b69      	cmp	r3, #105	; 0x69
 801c4c4:	d058      	beq.n	801c578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801c4c6:	d81b      	bhi.n	801c500 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801c4c8:	2b63      	cmp	r3, #99	; 0x63
 801c4ca:	d02e      	beq.n	801c52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801c4cc:	2b64      	cmp	r3, #100	; 0x64
 801c4ce:	d053      	beq.n	801c578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801c4d0:	2b58      	cmp	r3, #88	; 0x58
 801c4d2:	d06f      	beq.n	801c5b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801c4d4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801c4d8:	46a1      	mov	r9, r4
 801c4da:	e02d      	b.n	801c538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c4dc:	2b73      	cmp	r3, #115	; 0x73
 801c4de:	d0ed      	beq.n	801c4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c4e0:	d803      	bhi.n	801c4ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801c4e2:	2b6f      	cmp	r3, #111	; 0x6f
 801c4e4:	f040 80c9 	bne.w	801c67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801c4e8:	e7e8      	b.n	801c4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c4ea:	2b75      	cmp	r3, #117	; 0x75
 801c4ec:	d0e6      	beq.n	801c4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c4ee:	2b78      	cmp	r3, #120	; 0x78
 801c4f0:	e7f8      	b.n	801c4e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801c4f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4f4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4fa:	3302      	adds	r3, #2
 801c4fc:	9309      	str	r3, [sp, #36]	; 0x24
 801c4fe:	e7b7      	b.n	801c470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c500:	2b73      	cmp	r3, #115	; 0x73
 801c502:	d034      	beq.n	801c56e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801c504:	d807      	bhi.n	801c516 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801c506:	2b6f      	cmp	r3, #111	; 0x6f
 801c508:	d1e4      	bne.n	801c4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801c50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c50c:	f104 0904 	add.w	r9, r4, #4
 801c510:	2308      	movs	r3, #8
 801c512:	1aba      	subs	r2, r7, r2
 801c514:	e048      	b.n	801c5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801c516:	2b75      	cmp	r3, #117	; 0x75
 801c518:	d041      	beq.n	801c59e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801c51a:	2b78      	cmp	r3, #120	; 0x78
 801c51c:	d1da      	bne.n	801c4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801c51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c520:	f104 0904 	add.w	r9, r4, #4
 801c524:	2310      	movs	r3, #16
 801c526:	1aba      	subs	r2, r7, r2
 801c528:	e03e      	b.n	801c5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801c52a:	7823      	ldrb	r3, [r4, #0]
 801c52c:	f104 0904 	add.w	r9, r4, #4
 801c530:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801c534:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c538:	aa0d      	add	r2, sp, #52	; 0x34
 801c53a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c53e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c542:	a810      	add	r0, sp, #64	; 0x40
 801c544:	9205      	str	r2, [sp, #20]
 801c546:	464c      	mov	r4, r9
 801c548:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801c54c:	9204      	str	r2, [sp, #16]
 801c54e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c550:	9203      	str	r2, [sp, #12]
 801c552:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801c556:	9202      	str	r2, [sp, #8]
 801c558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c55a:	9201      	str	r2, [sp, #4]
 801c55c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801c560:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801c564:	9200      	str	r2, [sp, #0]
 801c566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c568:	f7ff fe4a 	bl	801c200 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801c56c:	e7c4      	b.n	801c4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801c56e:	f104 0904 	add.w	r9, r4, #4
 801c572:	6823      	ldr	r3, [r4, #0]
 801c574:	9310      	str	r3, [sp, #64]	; 0x40
 801c576:	e7df      	b.n	801c538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c57a:	230a      	movs	r3, #10
 801c57c:	4641      	mov	r1, r8
 801c57e:	6820      	ldr	r0, [r4, #0]
 801c580:	1aba      	subs	r2, r7, r2
 801c582:	f104 0904 	add.w	r9, r4, #4
 801c586:	b292      	uxth	r2, r2
 801c588:	f7ff fdf9 	bl	801c17e <_ZN8touchgfx7Unicode4itoaElPtti>
 801c58c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c590:	2b2d      	cmp	r3, #45	; 0x2d
 801c592:	d1d1      	bne.n	801c538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c594:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c59a:	3302      	adds	r3, #2
 801c59c:	e7ea      	b.n	801c574 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801c59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c5a0:	f104 0904 	add.w	r9, r4, #4
 801c5a4:	230a      	movs	r3, #10
 801c5a6:	1aba      	subs	r2, r7, r2
 801c5a8:	b292      	uxth	r2, r2
 801c5aa:	4641      	mov	r1, r8
 801c5ac:	6820      	ldr	r0, [r4, #0]
 801c5ae:	f7ff fdc8 	bl	801c142 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c5b2:	e7c1      	b.n	801c538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c5b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c5b6:	2310      	movs	r3, #16
 801c5b8:	4641      	mov	r1, r8
 801c5ba:	6820      	ldr	r0, [r4, #0]
 801c5bc:	1aba      	subs	r2, r7, r2
 801c5be:	f104 0904 	add.w	r9, r4, #4
 801c5c2:	b292      	uxth	r2, r2
 801c5c4:	f7ff fdbd 	bl	801c142 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c5c8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801c5cc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d0b1      	beq.n	801c538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c5d4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801c5d8:	2919      	cmp	r1, #25
 801c5da:	d8f7      	bhi.n	801c5cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801c5dc:	3b20      	subs	r3, #32
 801c5de:	8013      	strh	r3, [r2, #0]
 801c5e0:	e7f4      	b.n	801c5cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801c5e2:	2200      	movs	r2, #0
 801c5e4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c5e8:	e760      	b.n	801c4ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801c5ea:	459a      	cmp	sl, r3
 801c5ec:	f77f af40 	ble.w	801c470 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c5f0:	f109 0302 	add.w	r3, r9, #2
 801c5f4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801c5f8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801c5fc:	a809      	add	r0, sp, #36	; 0x24
 801c5fe:	9309      	str	r3, [sp, #36]	; 0x24
 801c600:	ab0f      	add	r3, sp, #60	; 0x3c
 801c602:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801c606:	9304      	str	r3, [sp, #16]
 801c608:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c60c:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801c610:	9303      	str	r3, [sp, #12]
 801c612:	ab0e      	add	r3, sp, #56	; 0x38
 801c614:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801c618:	9302      	str	r3, [sp, #8]
 801c61a:	ab0c      	add	r3, sp, #48	; 0x30
 801c61c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801c620:	9301      	str	r3, [sp, #4]
 801c622:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c626:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801c62a:	9300      	str	r3, [sp, #0]
 801c62c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c630:	950e      	str	r5, [sp, #56]	; 0x38
 801c632:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801c636:	950f      	str	r5, [sp, #60]	; 0x3c
 801c638:	f7ff fe92 	bl	801c360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801c63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c640:	2b00      	cmp	r3, #0
 801c642:	bfbf      	itttt	lt
 801c644:	6823      	ldrlt	r3, [r4, #0]
 801c646:	3404      	addlt	r4, #4
 801c648:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c64c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c650:	2b00      	cmp	r3, #0
 801c652:	bfbf      	itttt	lt
 801c654:	6823      	ldrlt	r3, [r4, #0]
 801c656:	3404      	addlt	r4, #4
 801c658:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c65c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c65e:	8813      	ldrh	r3, [r2, #0]
 801c660:	2b69      	cmp	r3, #105	; 0x69
 801c662:	f43f af2b 	beq.w	801c4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c666:	f63f af39 	bhi.w	801c4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801c66a:	2b58      	cmp	r3, #88	; 0x58
 801c66c:	f43f af26 	beq.w	801c4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c670:	f63f af20 	bhi.w	801c4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801c674:	2b25      	cmp	r3, #37	; 0x25
 801c676:	f43f af3c 	beq.w	801c4f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801c67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c67c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c680:	f8b9 2000 	ldrh.w	r2, [r9]
 801c684:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c688:	3301      	adds	r3, #1
 801c68a:	930d      	str	r3, [sp, #52]	; 0x34
 801c68c:	e734      	b.n	801c4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801c690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c692:	4605      	mov	r5, r0
 801c694:	b0a1      	sub	sp, #132	; 0x84
 801c696:	4610      	mov	r0, r2
 801c698:	460e      	mov	r6, r1
 801c69a:	4614      	mov	r4, r2
 801c69c:	461f      	mov	r7, r3
 801c69e:	f7ff fd33 	bl	801c108 <_ZN8touchgfx7Unicode6strlenEPKc>
 801c6a2:	283f      	cmp	r0, #63	; 0x3f
 801c6a4:	d906      	bls.n	801c6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801c6a6:	4b0a      	ldr	r3, [pc, #40]	; (801c6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801c6a8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801c6ac:	4a09      	ldr	r2, [pc, #36]	; (801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801c6ae:	480a      	ldr	r0, [pc, #40]	; (801c6d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801c6b0:	f009 ffac 	bl	802660c <__assert_func>
 801c6b4:	4621      	mov	r1, r4
 801c6b6:	2240      	movs	r2, #64	; 0x40
 801c6b8:	4668      	mov	r0, sp
 801c6ba:	f7ff fd31 	bl	801c120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c6be:	463b      	mov	r3, r7
 801c6c0:	466a      	mov	r2, sp
 801c6c2:	4631      	mov	r1, r6
 801c6c4:	4628      	mov	r0, r5
 801c6c6:	f7ff febe 	bl	801c446 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801c6ca:	b021      	add	sp, #132	; 0x84
 801c6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6ce:	bf00      	nop
 801c6d0:	0802aa21 	.word	0x0802aa21
 801c6d4:	0802aaf3 	.word	0x0802aaf3
 801c6d8:	0802aa3e 	.word	0x0802aa3e

0801c6dc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c6dc:	b40c      	push	{r2, r3}
 801c6de:	b507      	push	{r0, r1, r2, lr}
 801c6e0:	ab04      	add	r3, sp, #16
 801c6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6e6:	9301      	str	r3, [sp, #4]
 801c6e8:	f7ff ffd2 	bl	801c690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c6ec:	b003      	add	sp, #12
 801c6ee:	f85d eb04 	ldr.w	lr, [sp], #4
 801c6f2:	b002      	add	sp, #8
 801c6f4:	4770      	bx	lr
	...

0801c6f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6fc:	b0c3      	sub	sp, #268	; 0x10c
 801c6fe:	2400      	movs	r4, #0
 801c700:	4606      	mov	r6, r0
 801c702:	4689      	mov	r9, r1
 801c704:	af10      	add	r7, sp, #64	; 0x40
 801c706:	9209      	str	r2, [sp, #36]	; 0x24
 801c708:	4621      	mov	r1, r4
 801c70a:	22c8      	movs	r2, #200	; 0xc8
 801c70c:	4638      	mov	r0, r7
 801c70e:	469a      	mov	sl, r3
 801c710:	940c      	str	r4, [sp, #48]	; 0x30
 801c712:	f7fe fcce 	bl	801b0b2 <_ZN8touchgfx6memsetEPvhm>
 801c716:	b116      	cbz	r6, 801c71e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801c718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c71a:	b923      	cbnz	r3, 801c726 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801c71c:	8033      	strh	r3, [r6, #0]
 801c71e:	4630      	mov	r0, r6
 801c720:	b043      	add	sp, #268	; 0x10c
 801c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c726:	f109 3bff 	add.w	fp, r9, #4294967295
 801c72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c72c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c72e:	8812      	ldrh	r2, [r2, #0]
 801c730:	2a00      	cmp	r2, #0
 801c732:	f000 80d1 	beq.w	801c8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801c736:	459b      	cmp	fp, r3
 801c738:	f340 80ce 	ble.w	801c8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801c73c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c73e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c740:	882a      	ldrh	r2, [r5, #0]
 801c742:	2a00      	cmp	r2, #0
 801c744:	d0f1      	beq.n	801c72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c746:	2a25      	cmp	r2, #37	; 0x25
 801c748:	f000 80ca 	beq.w	801c8e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801c74c:	459b      	cmp	fp, r3
 801c74e:	ddec      	ble.n	801c72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c750:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c754:	3502      	adds	r5, #2
 801c756:	3301      	adds	r3, #1
 801c758:	9509      	str	r5, [sp, #36]	; 0x24
 801c75a:	930c      	str	r3, [sp, #48]	; 0x30
 801c75c:	e7ee      	b.n	801c73c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801c75e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c762:	3202      	adds	r2, #2
 801c764:	920c      	str	r2, [sp, #48]	; 0x30
 801c766:	e0ac      	b.n	801c8c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801c768:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c76c:	970f      	str	r7, [sp, #60]	; 0x3c
 801c76e:	3401      	adds	r4, #1
 801c770:	edd3 7a00 	vldr	s15, [r3]
 801c774:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801c778:	b923      	cbnz	r3, 801c784 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801c77a:	2301      	movs	r3, #1
 801c77c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801c780:	2303      	movs	r3, #3
 801c782:	930e      	str	r3, [sp, #56]	; 0x38
 801c784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c788:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c78a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801c78e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801c98c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801c792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c796:	bf42      	ittt	mi
 801c798:	232d      	movmi	r3, #45	; 0x2d
 801c79a:	eef1 7a67 	vnegmi.f32	s15, s15
 801c79e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	4298      	cmp	r0, r3
 801c7a6:	dd03      	ble.n	801c7b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801c7a8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801c7ac:	3301      	adds	r3, #1
 801c7ae:	e7f9      	b.n	801c7a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801c7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c7b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7b8:	eeb0 7a67 	vmov.f32	s14, s15
 801c7bc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801c7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7c4:	da26      	bge.n	801c814 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801c7c6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801c7ca:	eba9 0202 	sub.w	r2, r9, r2
 801c7ce:	2100      	movs	r1, #0
 801c7d0:	eef4 6ae5 	vcmpe.f32	s13, s11
 801c7d4:	b28d      	uxth	r5, r1
 801c7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7da:	db21      	blt.n	801c820 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801c7dc:	1a53      	subs	r3, r2, r1
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	dd1e      	ble.n	801c820 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801c7e2:	2963      	cmp	r1, #99	; 0x63
 801c7e4:	d01b      	beq.n	801c81e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801c7e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c7ea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c7ee:	ee17 3a10 	vmov	r3, s14
 801c7f2:	2b09      	cmp	r3, #9
 801c7f4:	bfa8      	it	ge
 801c7f6:	2309      	movge	r3, #9
 801c7f8:	ee07 3a10 	vmov	s14, r3
 801c7fc:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801c800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c804:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801c808:	3101      	adds	r1, #1
 801c80a:	eee7 7a66 	vfms.f32	s15, s14, s13
 801c80e:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801c812:	e7dd      	b.n	801c7d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801c814:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c818:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801c81c:	e7ce      	b.n	801c7bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801c81e:	460d      	mov	r5, r1
 801c820:	2a63      	cmp	r2, #99	; 0x63
 801c822:	bfd4      	ite	le
 801c824:	ebc5 0202 	rsble	r2, r5, r2
 801c828:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801c82c:	2a00      	cmp	r2, #0
 801c82e:	dd4e      	ble.n	801c8ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801c830:	4603      	mov	r3, r0
 801c832:	f04f 0801 	mov.w	r8, #1
 801c836:	2b00      	cmp	r3, #0
 801c838:	dd0e      	ble.n	801c858 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801c83a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c83e:	210a      	movs	r1, #10
 801c840:	3b01      	subs	r3, #1
 801c842:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c846:	ee17 ca10 	vmov	ip, s14
 801c84a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c84e:	fb01 c808 	mla	r8, r1, r8, ip
 801c852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c856:	e7ee      	b.n	801c836 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801c858:	2800      	cmp	r0, #0
 801c85a:	f100 33ff 	add.w	r3, r0, #4294967295
 801c85e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801c862:	bfac      	ite	ge
 801c864:	1a18      	subge	r0, r3, r0
 801c866:	4618      	movlt	r0, r3
 801c868:	b292      	uxth	r2, r2
 801c86a:	230a      	movs	r3, #10
 801c86c:	900e      	str	r0, [sp, #56]	; 0x38
 801c86e:	1979      	adds	r1, r7, r5
 801c870:	4640      	mov	r0, r8
 801c872:	f7ff fc84 	bl	801c17e <_ZN8touchgfx7Unicode4itoaElPtti>
 801c876:	f1b8 0f01 	cmp.w	r8, #1
 801c87a:	dc26      	bgt.n	801c8ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801c87c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801c880:	2b00      	cmp	r3, #0
 801c882:	bf0c      	ite	eq
 801c884:	2300      	moveq	r3, #0
 801c886:	232e      	movne	r3, #46	; 0x2e
 801c888:	aa42      	add	r2, sp, #264	; 0x108
 801c88a:	4415      	add	r5, r2
 801c88c:	aa0c      	add	r2, sp, #48	; 0x30
 801c88e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801c892:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c896:	a80f      	add	r0, sp, #60	; 0x3c
 801c898:	9205      	str	r2, [sp, #20]
 801c89a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801c89e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801c8a2:	9204      	str	r2, [sp, #16]
 801c8a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c8a6:	9203      	str	r2, [sp, #12]
 801c8a8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801c8ac:	9202      	str	r2, [sp, #8]
 801c8ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c8b0:	9201      	str	r2, [sp, #4]
 801c8b2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801c8b6:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801c8ba:	9200      	str	r2, [sp, #0]
 801c8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c8be:	f7ff fc9f 	bl	801c200 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801c8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8c4:	3302      	adds	r3, #2
 801c8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801c8c8:	e72f      	b.n	801c72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c8ca:	232e      	movs	r3, #46	; 0x2e
 801c8cc:	e7dc      	b.n	801c888 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801c8ce:	ab42      	add	r3, sp, #264	; 0x108
 801c8d0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	e7d9      	b.n	801c88c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801c8d8:	2200      	movs	r2, #0
 801c8da:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c8de:	e71e      	b.n	801c71e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801c8e0:	459b      	cmp	fp, r3
 801c8e2:	f77f af22 	ble.w	801c72a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801c8ec:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801c8f0:	a809      	add	r0, sp, #36	; 0x24
 801c8f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c8f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c8fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c8fe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801c902:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801c906:	930d      	str	r3, [sp, #52]	; 0x34
 801c908:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801c90c:	930e      	str	r3, [sp, #56]	; 0x38
 801c90e:	1cab      	adds	r3, r5, #2
 801c910:	9309      	str	r3, [sp, #36]	; 0x24
 801c912:	ab0e      	add	r3, sp, #56	; 0x38
 801c914:	9304      	str	r3, [sp, #16]
 801c916:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801c91a:	9303      	str	r3, [sp, #12]
 801c91c:	ab0d      	add	r3, sp, #52	; 0x34
 801c91e:	9302      	str	r3, [sp, #8]
 801c920:	ab0b      	add	r3, sp, #44	; 0x2c
 801c922:	9301      	str	r3, [sp, #4]
 801c924:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801c928:	9300      	str	r3, [sp, #0]
 801c92a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801c92e:	f7ff fd17 	bl	801c360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801c932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c934:	2b00      	cmp	r3, #0
 801c936:	da0b      	bge.n	801c950 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801c938:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c93c:	3401      	adds	r4, #1
 801c93e:	edd3 7a00 	vldr	s15, [r3]
 801c942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c946:	ee17 3a90 	vmov	r3, s15
 801c94a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c94e:	930d      	str	r3, [sp, #52]	; 0x34
 801c950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c952:	2b00      	cmp	r3, #0
 801c954:	da0b      	bge.n	801c96e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801c956:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c95a:	3401      	adds	r4, #1
 801c95c:	edd3 7a00 	vldr	s15, [r3]
 801c960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c964:	ee17 3a90 	vmov	r3, s15
 801c968:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c96c:	930e      	str	r3, [sp, #56]	; 0x38
 801c96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c972:	881b      	ldrh	r3, [r3, #0]
 801c974:	2b25      	cmp	r3, #37	; 0x25
 801c976:	f43f aef2 	beq.w	801c75e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801c97a:	2b66      	cmp	r3, #102	; 0x66
 801c97c:	f43f aef4 	beq.w	801c768 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801c980:	9509      	str	r5, [sp, #36]	; 0x24
 801c982:	882b      	ldrh	r3, [r5, #0]
 801c984:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c988:	3201      	adds	r2, #1
 801c98a:	e6eb      	b.n	801c764 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801c98c:	3f000002 	.word	0x3f000002

0801c990 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c992:	4605      	mov	r5, r0
 801c994:	b0a1      	sub	sp, #132	; 0x84
 801c996:	4610      	mov	r0, r2
 801c998:	460e      	mov	r6, r1
 801c99a:	4614      	mov	r4, r2
 801c99c:	461f      	mov	r7, r3
 801c99e:	f7ff fbb3 	bl	801c108 <_ZN8touchgfx7Unicode6strlenEPKc>
 801c9a2:	283f      	cmp	r0, #63	; 0x3f
 801c9a4:	d906      	bls.n	801c9b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801c9a6:	4b0a      	ldr	r3, [pc, #40]	; (801c9d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801c9a8:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801c9ac:	4a09      	ldr	r2, [pc, #36]	; (801c9d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801c9ae:	480a      	ldr	r0, [pc, #40]	; (801c9d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801c9b0:	f009 fe2c 	bl	802660c <__assert_func>
 801c9b4:	4621      	mov	r1, r4
 801c9b6:	2240      	movs	r2, #64	; 0x40
 801c9b8:	4668      	mov	r0, sp
 801c9ba:	f7ff fbb1 	bl	801c120 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c9be:	463b      	mov	r3, r7
 801c9c0:	466a      	mov	r2, sp
 801c9c2:	4631      	mov	r1, r6
 801c9c4:	4628      	mov	r0, r5
 801c9c6:	f7ff fe97 	bl	801c6f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801c9ca:	b021      	add	sp, #132	; 0x84
 801c9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9ce:	bf00      	nop
 801c9d0:	0802aa21 	.word	0x0802aa21
 801c9d4:	0802aa64 	.word	0x0802aa64
 801c9d8:	0802aa3e 	.word	0x0802aa3e

0801c9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c9dc:	4b01      	ldr	r3, [pc, #4]	; (801c9e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c9de:	6018      	str	r0, [r3, #0]
 801c9e0:	4770      	bx	lr
 801c9e2:	bf00      	nop
 801c9e4:	2000c6dc 	.word	0x2000c6dc

0801c9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c9e8:	4b07      	ldr	r3, [pc, #28]	; (801ca08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801c9ea:	881a      	ldrh	r2, [r3, #0]
 801c9ec:	4282      	cmp	r2, r0
 801c9ee:	d809      	bhi.n	801ca04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801c9f0:	4b06      	ldr	r3, [pc, #24]	; (801ca0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801c9f2:	881b      	ldrh	r3, [r3, #0]
 801c9f4:	4413      	add	r3, r2
 801c9f6:	4298      	cmp	r0, r3
 801c9f8:	da04      	bge.n	801ca04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801c9fa:	4b05      	ldr	r3, [pc, #20]	; (801ca10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801ca02:	4770      	bx	lr
 801ca04:	2000      	movs	r0, #0
 801ca06:	4770      	bx	lr
 801ca08:	2000c6fc 	.word	0x2000c6fc
 801ca0c:	2000c700 	.word	0x2000c700
 801ca10:	2000c6e0 	.word	0x2000c6e0

0801ca14 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ca14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca18:	4d26      	ldr	r5, [pc, #152]	; (801cab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ca1a:	682b      	ldr	r3, [r5, #0]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d046      	beq.n	801caae <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801ca20:	4a25      	ldr	r2, [pc, #148]	; (801cab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ca22:	4f26      	ldr	r7, [pc, #152]	; (801cabc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ca24:	8810      	ldrh	r0, [r2, #0]
 801ca26:	883c      	ldrh	r4, [r7, #0]
 801ca28:	4e25      	ldr	r6, [pc, #148]	; (801cac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ca2a:	4420      	add	r0, r4
 801ca2c:	1c42      	adds	r2, r0, #1
 801ca2e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801ca32:	f022 0201 	bic.w	r2, r2, #1
 801ca36:	0412      	lsls	r2, r2, #16
 801ca38:	0c12      	lsrs	r2, r2, #16
 801ca3a:	0051      	lsls	r1, r2, #1
 801ca3c:	220e      	movs	r2, #14
 801ca3e:	eb08 0e01 	add.w	lr, r8, r1
 801ca42:	fb02 fc04 	mul.w	ip, r2, r4
 801ca46:	eb03 0208 	add.w	r2, r3, r8
 801ca4a:	4c1e      	ldr	r4, [pc, #120]	; (801cac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ca4c:	6022      	str	r2, [r4, #0]
 801ca4e:	eb03 020e 	add.w	r2, r3, lr
 801ca52:	44e6      	add	lr, ip
 801ca54:	6032      	str	r2, [r6, #0]
 801ca56:	4473      	add	r3, lr
 801ca58:	4a1b      	ldr	r2, [pc, #108]	; (801cac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ca5a:	6013      	str	r3, [r2, #0]
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	4a1b      	ldr	r2, [pc, #108]	; (801cacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ca60:	8013      	strh	r3, [r2, #0]
 801ca62:	4a1b      	ldr	r2, [pc, #108]	; (801cad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ca64:	6812      	ldr	r2, [r2, #0]
 801ca66:	eba2 0208 	sub.w	r2, r2, r8
 801ca6a:	1a52      	subs	r2, r2, r1
 801ca6c:	4919      	ldr	r1, [pc, #100]	; (801cad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ca6e:	eba2 020c 	sub.w	r2, r2, ip
 801ca72:	469c      	mov	ip, r3
 801ca74:	600a      	str	r2, [r1, #0]
 801ca76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ca7a:	4a17      	ldr	r2, [pc, #92]	; (801cad8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ca7c:	8013      	strh	r3, [r2, #0]
 801ca7e:	4283      	cmp	r3, r0
 801ca80:	d10d      	bne.n	801ca9e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801ca82:	883d      	ldrh	r5, [r7, #0]
 801ca84:	2300      	movs	r3, #0
 801ca86:	6830      	ldr	r0, [r6, #0]
 801ca88:	240e      	movs	r4, #14
 801ca8a:	429d      	cmp	r5, r3
 801ca8c:	d90f      	bls.n	801caae <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801ca8e:	fb04 0203 	mla	r2, r4, r3, r0
 801ca92:	3301      	adds	r3, #1
 801ca94:	7b11      	ldrb	r1, [r2, #12]
 801ca96:	f36f 1145 	bfc	r1, #5, #1
 801ca9a:	7311      	strb	r1, [r2, #12]
 801ca9c:	e7f5      	b.n	801ca8a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801ca9e:	682a      	ldr	r2, [r5, #0]
 801caa0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801caa4:	6822      	ldr	r2, [r4, #0]
 801caa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801caaa:	3301      	adds	r3, #1
 801caac:	e7e7      	b.n	801ca7e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801caae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cab2:	bf00      	nop
 801cab4:	2000c6e0 	.word	0x2000c6e0
 801cab8:	2000c6fc 	.word	0x2000c6fc
 801cabc:	2000c700 	.word	0x2000c700
 801cac0:	2000c6e4 	.word	0x2000c6e4
 801cac4:	2000c6f4 	.word	0x2000c6f4
 801cac8:	2000c6ec 	.word	0x2000c6ec
 801cacc:	2000c6fe 	.word	0x2000c6fe
 801cad0:	2000c6e8 	.word	0x2000c6e8
 801cad4:	2000c6f8 	.word	0x2000c6f8
 801cad8:	2000c6f0 	.word	0x2000c6f0

0801cadc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cadc:	4b10      	ldr	r3, [pc, #64]	; (801cb20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801cade:	b510      	push	{r4, lr}
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	b9db      	cbnz	r3, 801cb1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cae4:	b1d1      	cbz	r1, 801cb1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cae6:	4b0f      	ldr	r3, [pc, #60]	; (801cb24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801cae8:	240e      	movs	r4, #14
 801caea:	801a      	strh	r2, [r3, #0]
 801caec:	b292      	uxth	r2, r2
 801caee:	4b0e      	ldr	r3, [pc, #56]	; (801cb28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801caf0:	881b      	ldrh	r3, [r3, #0]
 801caf2:	4413      	add	r3, r2
 801caf4:	4362      	muls	r2, r4
 801caf6:	2406      	movs	r4, #6
 801caf8:	fb04 2203 	mla	r2, r4, r3, r2
 801cafc:	428a      	cmp	r2, r1
 801cafe:	d305      	bcc.n	801cb0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801cb00:	4b0a      	ldr	r3, [pc, #40]	; (801cb2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801cb02:	2137      	movs	r1, #55	; 0x37
 801cb04:	4a0a      	ldr	r2, [pc, #40]	; (801cb30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801cb06:	480b      	ldr	r0, [pc, #44]	; (801cb34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801cb08:	f009 fd80 	bl	802660c <__assert_func>
 801cb0c:	4b0a      	ldr	r3, [pc, #40]	; (801cb38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801cb0e:	6019      	str	r1, [r3, #0]
 801cb10:	4b0a      	ldr	r3, [pc, #40]	; (801cb3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801cb12:	6018      	str	r0, [r3, #0]
 801cb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb18:	f7ff bf7c 	b.w	801ca14 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801cb1c:	bd10      	pop	{r4, pc}
 801cb1e:	bf00      	nop
 801cb20:	2000c6ec 	.word	0x2000c6ec
 801cb24:	2000c700 	.word	0x2000c700
 801cb28:	2000c6fc 	.word	0x2000c6fc
 801cb2c:	0802abd5 	.word	0x0802abd5
 801cb30:	0802ac2e 	.word	0x0802ac2e
 801cb34:	0802abb0 	.word	0x0802abb0
 801cb38:	2000c6e8 	.word	0x2000c6e8
 801cb3c:	2000c6e0 	.word	0x2000c6e0

0801cb40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cb40:	b470      	push	{r4, r5, r6}
 801cb42:	4c07      	ldr	r4, [pc, #28]	; (801cb60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cb44:	4605      	mov	r5, r0
 801cb46:	4610      	mov	r0, r2
 801cb48:	9a03      	ldr	r2, [sp, #12]
 801cb4a:	6826      	ldr	r6, [r4, #0]
 801cb4c:	b936      	cbnz	r6, 801cb5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cb4e:	6025      	str	r5, [r4, #0]
 801cb50:	4c04      	ldr	r4, [pc, #16]	; (801cb64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cb52:	8021      	strh	r1, [r4, #0]
 801cb54:	4619      	mov	r1, r3
 801cb56:	bc70      	pop	{r4, r5, r6}
 801cb58:	f7ff bfc0 	b.w	801cadc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cb5c:	bc70      	pop	{r4, r5, r6}
 801cb5e:	4770      	bx	lr
 801cb60:	2000c704 	.word	0x2000c704
 801cb64:	2000c6fc 	.word	0x2000c6fc

0801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cb68:	b508      	push	{r3, lr}
 801cb6a:	4b14      	ldr	r3, [pc, #80]	; (801cbbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cb6c:	6819      	ldr	r1, [r3, #0]
 801cb6e:	b931      	cbnz	r1, 801cb7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801cb70:	4b13      	ldr	r3, [pc, #76]	; (801cbc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cb72:	f240 21e6 	movw	r1, #742	; 0x2e6
 801cb76:	4a13      	ldr	r2, [pc, #76]	; (801cbc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cb78:	4813      	ldr	r0, [pc, #76]	; (801cbc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cb7a:	f009 fd47 	bl	802660c <__assert_func>
 801cb7e:	4a13      	ldr	r2, [pc, #76]	; (801cbcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cb80:	8803      	ldrh	r3, [r0, #0]
 801cb82:	8812      	ldrh	r2, [r2, #0]
 801cb84:	4293      	cmp	r3, r2
 801cb86:	d204      	bcs.n	801cb92 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801cb88:	2214      	movs	r2, #20
 801cb8a:	fb02 1303 	mla	r3, r2, r3, r1
 801cb8e:	8918      	ldrh	r0, [r3, #8]
 801cb90:	bd08      	pop	{r3, pc}
 801cb92:	490f      	ldr	r1, [pc, #60]	; (801cbd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801cb94:	8809      	ldrh	r1, [r1, #0]
 801cb96:	4411      	add	r1, r2
 801cb98:	428b      	cmp	r3, r1
 801cb9a:	da06      	bge.n	801cbaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801cb9c:	1a9b      	subs	r3, r3, r2
 801cb9e:	4a0d      	ldr	r2, [pc, #52]	; (801cbd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801cba0:	210e      	movs	r1, #14
 801cba2:	6812      	ldr	r2, [r2, #0]
 801cba4:	fb01 2303 	mla	r3, r1, r3, r2
 801cba8:	e7f1      	b.n	801cb8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801cbaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cbae:	4293      	cmp	r3, r2
 801cbb0:	bf0a      	itet	eq
 801cbb2:	4b09      	ldreq	r3, [pc, #36]	; (801cbd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801cbb4:	2000      	movne	r0, #0
 801cbb6:	8818      	ldrheq	r0, [r3, #0]
 801cbb8:	e7ea      	b.n	801cb90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801cbba:	bf00      	nop
 801cbbc:	2000c704 	.word	0x2000c704
 801cbc0:	08028b88 	.word	0x08028b88
 801cbc4:	0802acdb 	.word	0x0802acdb
 801cbc8:	0802abb0 	.word	0x0802abb0
 801cbcc:	2000c6fc 	.word	0x2000c6fc
 801cbd0:	2000c700 	.word	0x2000c700
 801cbd4:	2000c6e4 	.word	0x2000c6e4
 801cbd8:	2000c630 	.word	0x2000c630

0801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cbdc:	b508      	push	{r3, lr}
 801cbde:	4b14      	ldr	r3, [pc, #80]	; (801cc30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cbe0:	6819      	ldr	r1, [r3, #0]
 801cbe2:	b931      	cbnz	r1, 801cbf2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801cbe4:	4b13      	ldr	r3, [pc, #76]	; (801cc34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cbe6:	f240 21fa 	movw	r1, #762	; 0x2fa
 801cbea:	4a13      	ldr	r2, [pc, #76]	; (801cc38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cbec:	4813      	ldr	r0, [pc, #76]	; (801cc3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cbee:	f009 fd0d 	bl	802660c <__assert_func>
 801cbf2:	4a13      	ldr	r2, [pc, #76]	; (801cc40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cbf4:	8803      	ldrh	r3, [r0, #0]
 801cbf6:	8812      	ldrh	r2, [r2, #0]
 801cbf8:	4293      	cmp	r3, r2
 801cbfa:	d204      	bcs.n	801cc06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801cbfc:	2214      	movs	r2, #20
 801cbfe:	fb02 1303 	mla	r3, r2, r3, r1
 801cc02:	8958      	ldrh	r0, [r3, #10]
 801cc04:	bd08      	pop	{r3, pc}
 801cc06:	490f      	ldr	r1, [pc, #60]	; (801cc44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801cc08:	8809      	ldrh	r1, [r1, #0]
 801cc0a:	4411      	add	r1, r2
 801cc0c:	428b      	cmp	r3, r1
 801cc0e:	da06      	bge.n	801cc1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801cc10:	1a9b      	subs	r3, r3, r2
 801cc12:	4a0d      	ldr	r2, [pc, #52]	; (801cc48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801cc14:	210e      	movs	r1, #14
 801cc16:	6812      	ldr	r2, [r2, #0]
 801cc18:	fb01 2303 	mla	r3, r1, r3, r2
 801cc1c:	e7f1      	b.n	801cc02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801cc1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cc22:	4293      	cmp	r3, r2
 801cc24:	bf0a      	itet	eq
 801cc26:	4b09      	ldreq	r3, [pc, #36]	; (801cc4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801cc28:	2000      	movne	r0, #0
 801cc2a:	8818      	ldrheq	r0, [r3, #0]
 801cc2c:	e7ea      	b.n	801cc04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801cc2e:	bf00      	nop
 801cc30:	2000c704 	.word	0x2000c704
 801cc34:	08028b88 	.word	0x08028b88
 801cc38:	0802ad07 	.word	0x0802ad07
 801cc3c:	0802abb0 	.word	0x0802abb0
 801cc40:	2000c6fc 	.word	0x2000c6fc
 801cc44:	2000c700 	.word	0x2000c700
 801cc48:	2000c6e4 	.word	0x2000c6e4
 801cc4c:	2000c632 	.word	0x2000c632

0801cc50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801cc50:	4b23      	ldr	r3, [pc, #140]	; (801cce0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cc52:	b510      	push	{r4, lr}
 801cc54:	681c      	ldr	r4, [r3, #0]
 801cc56:	b934      	cbnz	r4, 801cc66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801cc58:	4b22      	ldr	r3, [pc, #136]	; (801cce4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801cc5a:	f240 310e 	movw	r1, #782	; 0x30e
 801cc5e:	4a22      	ldr	r2, [pc, #136]	; (801cce8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801cc60:	4822      	ldr	r0, [pc, #136]	; (801ccec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801cc62:	f009 fcd3 	bl	802660c <__assert_func>
 801cc66:	4a22      	ldr	r2, [pc, #136]	; (801ccf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801cc68:	880b      	ldrh	r3, [r1, #0]
 801cc6a:	8812      	ldrh	r2, [r2, #0]
 801cc6c:	4293      	cmp	r3, r2
 801cc6e:	d211      	bcs.n	801cc94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801cc70:	2214      	movs	r2, #20
 801cc72:	fb02 4303 	mla	r3, r2, r3, r4
 801cc76:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801cc7a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801cc7e:	8a1a      	ldrh	r2, [r3, #16]
 801cc80:	8a5b      	ldrh	r3, [r3, #18]
 801cc82:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cc86:	8004      	strh	r4, [r0, #0]
 801cc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc8c:	8041      	strh	r1, [r0, #2]
 801cc8e:	8082      	strh	r2, [r0, #4]
 801cc90:	80c3      	strh	r3, [r0, #6]
 801cc92:	e00e      	b.n	801ccb2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801cc94:	4917      	ldr	r1, [pc, #92]	; (801ccf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801cc96:	8809      	ldrh	r1, [r1, #0]
 801cc98:	4411      	add	r1, r2
 801cc9a:	428b      	cmp	r3, r1
 801cc9c:	da0a      	bge.n	801ccb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801cc9e:	1a9b      	subs	r3, r3, r2
 801cca0:	4a15      	ldr	r2, [pc, #84]	; (801ccf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801cca2:	210e      	movs	r1, #14
 801cca4:	6812      	ldr	r2, [r2, #0]
 801cca6:	fb01 2303 	mla	r3, r1, r3, r2
 801ccaa:	681a      	ldr	r2, [r3, #0]
 801ccac:	6002      	str	r2, [r0, #0]
 801ccae:	685a      	ldr	r2, [r3, #4]
 801ccb0:	6042      	str	r2, [r0, #4]
 801ccb2:	bd10      	pop	{r4, pc}
 801ccb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ccb8:	4293      	cmp	r3, r2
 801ccba:	d10b      	bne.n	801ccd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ccbc:	4b0f      	ldr	r3, [pc, #60]	; (801ccfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ccbe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ccc2:	4b0f      	ldr	r3, [pc, #60]	; (801cd00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ccc4:	8081      	strh	r1, [r0, #4]
 801ccc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ccca:	2300      	movs	r3, #0
 801cccc:	80c2      	strh	r2, [r0, #6]
 801ccce:	8003      	strh	r3, [r0, #0]
 801ccd0:	8043      	strh	r3, [r0, #2]
 801ccd2:	e7ee      	b.n	801ccb2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	8003      	strh	r3, [r0, #0]
 801ccd8:	8043      	strh	r3, [r0, #2]
 801ccda:	8083      	strh	r3, [r0, #4]
 801ccdc:	e7d8      	b.n	801cc90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ccde:	bf00      	nop
 801cce0:	2000c704 	.word	0x2000c704
 801cce4:	08028b88 	.word	0x08028b88
 801cce8:	0802ac74 	.word	0x0802ac74
 801ccec:	0802abb0 	.word	0x0802abb0
 801ccf0:	2000c6fc 	.word	0x2000c6fc
 801ccf4:	2000c700 	.word	0x2000c700
 801ccf8:	2000c6e4 	.word	0x2000c6e4
 801ccfc:	2000c630 	.word	0x2000c630
 801cd00:	2000c632 	.word	0x2000c632

0801cd04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cd04:	4b18      	ldr	r3, [pc, #96]	; (801cd68 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	b34b      	cbz	r3, 801cd5e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cd0a:	4a18      	ldr	r2, [pc, #96]	; (801cd6c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cd0c:	8800      	ldrh	r0, [r0, #0]
 801cd0e:	8812      	ldrh	r2, [r2, #0]
 801cd10:	4290      	cmp	r0, r2
 801cd12:	d211      	bcs.n	801cd38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801cd14:	2214      	movs	r2, #20
 801cd16:	fb02 3300 	mla	r3, r2, r0, r3
 801cd1a:	8a1a      	ldrh	r2, [r3, #16]
 801cd1c:	8919      	ldrh	r1, [r3, #8]
 801cd1e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cd22:	428a      	cmp	r2, r1
 801cd24:	db1d      	blt.n	801cd62 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cd26:	8a58      	ldrh	r0, [r3, #18]
 801cd28:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cd2c:	895b      	ldrh	r3, [r3, #10]
 801cd2e:	4298      	cmp	r0, r3
 801cd30:	bfac      	ite	ge
 801cd32:	2000      	movge	r0, #0
 801cd34:	2001      	movlt	r0, #1
 801cd36:	4770      	bx	lr
 801cd38:	4b0d      	ldr	r3, [pc, #52]	; (801cd70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cd3a:	881b      	ldrh	r3, [r3, #0]
 801cd3c:	4413      	add	r3, r2
 801cd3e:	4298      	cmp	r0, r3
 801cd40:	da0d      	bge.n	801cd5e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cd42:	4b0c      	ldr	r3, [pc, #48]	; (801cd74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801cd44:	1a80      	subs	r0, r0, r2
 801cd46:	220e      	movs	r2, #14
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	fb02 3300 	mla	r3, r2, r0, r3
 801cd4e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cd52:	891a      	ldrh	r2, [r3, #8]
 801cd54:	4291      	cmp	r1, r2
 801cd56:	db04      	blt.n	801cd62 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cd58:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cd5c:	e7e6      	b.n	801cd2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801cd5e:	2000      	movs	r0, #0
 801cd60:	4770      	bx	lr
 801cd62:	2001      	movs	r0, #1
 801cd64:	4770      	bx	lr
 801cd66:	bf00      	nop
 801cd68:	2000c704 	.word	0x2000c704
 801cd6c:	2000c6fc 	.word	0x2000c6fc
 801cd70:	2000c700 	.word	0x2000c700
 801cd74:	2000c6e4 	.word	0x2000c6e4

0801cd78 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cd78:	b508      	push	{r3, lr}
 801cd7a:	4b12      	ldr	r3, [pc, #72]	; (801cdc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cd7c:	6819      	ldr	r1, [r3, #0]
 801cd7e:	b931      	cbnz	r1, 801cd8e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cd80:	4b11      	ldr	r3, [pc, #68]	; (801cdc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cd82:	f240 3132 	movw	r1, #818	; 0x332
 801cd86:	4a11      	ldr	r2, [pc, #68]	; (801cdcc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cd88:	4811      	ldr	r0, [pc, #68]	; (801cdd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cd8a:	f009 fc3f 	bl	802660c <__assert_func>
 801cd8e:	8803      	ldrh	r3, [r0, #0]
 801cd90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cd94:	4293      	cmp	r3, r2
 801cd96:	d012      	beq.n	801cdbe <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cd98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cd9c:	4293      	cmp	r3, r2
 801cd9e:	d103      	bne.n	801cda8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801cda0:	4b0c      	ldr	r3, [pc, #48]	; (801cdd4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801cda6:	bd08      	pop	{r3, pc}
 801cda8:	4a0b      	ldr	r2, [pc, #44]	; (801cdd8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801cdaa:	6812      	ldr	r2, [r2, #0]
 801cdac:	b11a      	cbz	r2, 801cdb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801cdae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cdb2:	2800      	cmp	r0, #0
 801cdb4:	d1f7      	bne.n	801cda6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cdb6:	2214      	movs	r2, #20
 801cdb8:	4353      	muls	r3, r2
 801cdba:	58c8      	ldr	r0, [r1, r3]
 801cdbc:	e7f3      	b.n	801cda6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cdbe:	2000      	movs	r0, #0
 801cdc0:	e7f1      	b.n	801cda6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cdc2:	bf00      	nop
 801cdc4:	2000c704 	.word	0x2000c704
 801cdc8:	08028b88 	.word	0x08028b88
 801cdcc:	0802acaa 	.word	0x0802acaa
 801cdd0:	0802abb0 	.word	0x0802abb0
 801cdd4:	2000c63c 	.word	0x2000c63c
 801cdd8:	2000c6e0 	.word	0x2000c6e0

0801cddc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cddc:	8802      	ldrh	r2, [r0, #0]
 801cdde:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801cde2:	429a      	cmp	r2, r3
 801cde4:	d840      	bhi.n	801ce68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801cde6:	4b21      	ldr	r3, [pc, #132]	; (801ce6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801cde8:	881b      	ldrh	r3, [r3, #0]
 801cdea:	429a      	cmp	r2, r3
 801cdec:	d220      	bcs.n	801ce30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801cdee:	4b20      	ldr	r3, [pc, #128]	; (801ce70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cdf0:	6819      	ldr	r1, [r3, #0]
 801cdf2:	2314      	movs	r3, #20
 801cdf4:	fb03 1302 	mla	r3, r3, r2, r1
 801cdf8:	6858      	ldr	r0, [r3, #4]
 801cdfa:	2800      	cmp	r0, #0
 801cdfc:	d035      	beq.n	801ce6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cdfe:	491d      	ldr	r1, [pc, #116]	; (801ce74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ce00:	6809      	ldr	r1, [r1, #0]
 801ce02:	2900      	cmp	r1, #0
 801ce04:	d031      	beq.n	801ce6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ce06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ce0a:	b371      	cbz	r1, 801ce6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ce0c:	895a      	ldrh	r2, [r3, #10]
 801ce0e:	8918      	ldrh	r0, [r3, #8]
 801ce10:	4350      	muls	r0, r2
 801ce12:	7c5a      	ldrb	r2, [r3, #17]
 801ce14:	7cdb      	ldrb	r3, [r3, #19]
 801ce16:	0952      	lsrs	r2, r2, #5
 801ce18:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ce1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ce20:	2b0b      	cmp	r3, #11
 801ce22:	bf18      	it	ne
 801ce24:	0040      	lslne	r0, r0, #1
 801ce26:	3003      	adds	r0, #3
 801ce28:	f020 0003 	bic.w	r0, r0, #3
 801ce2c:	4408      	add	r0, r1
 801ce2e:	4770      	bx	lr
 801ce30:	4911      	ldr	r1, [pc, #68]	; (801ce78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ce32:	8809      	ldrh	r1, [r1, #0]
 801ce34:	4419      	add	r1, r3
 801ce36:	428a      	cmp	r2, r1
 801ce38:	da16      	bge.n	801ce68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ce3a:	4910      	ldr	r1, [pc, #64]	; (801ce7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ce3c:	1ad3      	subs	r3, r2, r3
 801ce3e:	200e      	movs	r0, #14
 801ce40:	6809      	ldr	r1, [r1, #0]
 801ce42:	fb00 1303 	mla	r3, r0, r3, r1
 801ce46:	7b19      	ldrb	r1, [r3, #12]
 801ce48:	f001 011f 	and.w	r1, r1, #31
 801ce4c:	290b      	cmp	r1, #11
 801ce4e:	d10b      	bne.n	801ce68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ce50:	8919      	ldrh	r1, [r3, #8]
 801ce52:	8958      	ldrh	r0, [r3, #10]
 801ce54:	4b07      	ldr	r3, [pc, #28]	; (801ce74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ce56:	4348      	muls	r0, r1
 801ce58:	6819      	ldr	r1, [r3, #0]
 801ce5a:	3003      	adds	r0, #3
 801ce5c:	f020 0303 	bic.w	r3, r0, #3
 801ce60:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ce64:	4418      	add	r0, r3
 801ce66:	4770      	bx	lr
 801ce68:	2000      	movs	r0, #0
 801ce6a:	4770      	bx	lr
 801ce6c:	2000c6fc 	.word	0x2000c6fc
 801ce70:	2000c704 	.word	0x2000c704
 801ce74:	2000c6e0 	.word	0x2000c6e0
 801ce78:	2000c700 	.word	0x2000c700
 801ce7c:	2000c6e4 	.word	0x2000c6e4

0801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ce80:	4b19      	ldr	r3, [pc, #100]	; (801cee8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ce82:	6819      	ldr	r1, [r3, #0]
 801ce84:	8803      	ldrh	r3, [r0, #0]
 801ce86:	b1e9      	cbz	r1, 801cec4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ce88:	4a18      	ldr	r2, [pc, #96]	; (801ceec <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ce8a:	8812      	ldrh	r2, [r2, #0]
 801ce8c:	429a      	cmp	r2, r3
 801ce8e:	d90a      	bls.n	801cea6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ce90:	2214      	movs	r2, #20
 801ce92:	fb02 1303 	mla	r3, r2, r3, r1
 801ce96:	7c58      	ldrb	r0, [r3, #17]
 801ce98:	0942      	lsrs	r2, r0, #5
 801ce9a:	7cd8      	ldrb	r0, [r3, #19]
 801ce9c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cea0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cea4:	4770      	bx	lr
 801cea6:	4912      	ldr	r1, [pc, #72]	; (801cef0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801cea8:	8809      	ldrh	r1, [r1, #0]
 801ceaa:	4411      	add	r1, r2
 801ceac:	428b      	cmp	r3, r1
 801ceae:	da09      	bge.n	801cec4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ceb0:	1a9b      	subs	r3, r3, r2
 801ceb2:	4a10      	ldr	r2, [pc, #64]	; (801cef4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801ceb4:	210e      	movs	r1, #14
 801ceb6:	6812      	ldr	r2, [r2, #0]
 801ceb8:	fb01 2303 	mla	r3, r1, r3, r2
 801cebc:	7b18      	ldrb	r0, [r3, #12]
 801cebe:	f000 001f 	and.w	r0, r0, #31
 801cec2:	4770      	bx	lr
 801cec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cec8:	4293      	cmp	r3, r2
 801ceca:	d10a      	bne.n	801cee2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801cecc:	4b0a      	ldr	r3, [pc, #40]	; (801cef8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ced4:	b10a      	cbz	r2, 801ceda <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ced6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ced8:	b900      	cbnz	r0, 801cedc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ceda:	6898      	ldr	r0, [r3, #8]
 801cedc:	6803      	ldr	r3, [r0, #0]
 801cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cee0:	4718      	bx	r3
 801cee2:	2000      	movs	r0, #0
 801cee4:	4770      	bx	lr
 801cee6:	bf00      	nop
 801cee8:	2000c704 	.word	0x2000c704
 801ceec:	2000c6fc 	.word	0x2000c6fc
 801cef0:	2000c700 	.word	0x2000c700
 801cef4:	2000c6e4 	.word	0x2000c6e4
 801cef8:	2000c63c 	.word	0x2000c63c

0801cefc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801cefc:	2018      	movs	r0, #24
 801cefe:	4770      	bx	lr

0801cf00 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801cf00:	2001      	movs	r0, #1
 801cf02:	4770      	bx	lr

0801cf04 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801cf04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801cf08:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801cf0c:	4770      	bx	lr

0801cf0e <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801cf0e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801cf12:	4770      	bx	lr

0801cf14 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801cf14:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801cf18:	4770      	bx	lr

0801cf1a <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801cf1a:	b2c8      	uxtb	r0, r1
 801cf1c:	4770      	bx	lr

0801cf1e <_ZN8touchgfx8LCD24bpp4initEv>:
 801cf1e:	4770      	bx	lr

0801cf20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf24:	b085      	sub	sp, #20
 801cf26:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801cf28:	9203      	str	r2, [sp, #12]
 801cf2a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801cf2e:	6878      	ldr	r0, [r7, #4]
 801cf30:	9201      	str	r2, [sp, #4]
 801cf32:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801cf34:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801cf38:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801cf3c:	fa1f fc84 	uxth.w	ip, r4
 801cf40:	43e4      	mvns	r4, r4
 801cf42:	9100      	str	r1, [sp, #0]
 801cf44:	b2e4      	uxtb	r4, r4
 801cf46:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cf4a:	fb00 2505 	mla	r5, r0, r5, r2
 801cf4e:	683a      	ldr	r2, [r7, #0]
 801cf50:	6877      	ldr	r7, [r6, #4]
 801cf52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf56:	3704      	adds	r7, #4
 801cf58:	4415      	add	r5, r2
 801cf5a:	6832      	ldr	r2, [r6, #0]
 801cf5c:	9202      	str	r2, [sp, #8]
 801cf5e:	9a00      	ldr	r2, [sp, #0]
 801cf60:	2a00      	cmp	r2, #0
 801cf62:	dc03      	bgt.n	801cf6c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cf64:	9a03      	ldr	r2, [sp, #12]
 801cf66:	2a00      	cmp	r2, #0
 801cf68:	f340 8116 	ble.w	801d198 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cf6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cf6e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cf72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	dd0f      	ble.n	801cf9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801cf7c:	1406      	asrs	r6, r0, #16
 801cf7e:	d406      	bmi.n	801cf8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cf80:	4546      	cmp	r6, r8
 801cf82:	da04      	bge.n	801cf8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cf84:	1416      	asrs	r6, r2, #16
 801cf86:	d402      	bmi.n	801cf8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cf88:	9901      	ldr	r1, [sp, #4]
 801cf8a:	428e      	cmp	r6, r1
 801cf8c:	db07      	blt.n	801cf9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801cf8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cf90:	3b01      	subs	r3, #1
 801cf92:	3503      	adds	r5, #3
 801cf94:	4408      	add	r0, r1
 801cf96:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cf98:	440a      	add	r2, r1
 801cf9a:	e7ed      	b.n	801cf78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801cf9c:	d011      	beq.n	801cfc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801cf9e:	1e5e      	subs	r6, r3, #1
 801cfa0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cfa2:	fb01 0e06 	mla	lr, r1, r6, r0
 801cfa6:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801cfaa:	d548      	bpl.n	801d03e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801cfac:	4699      	mov	r9, r3
 801cfae:	462e      	mov	r6, r5
 801cfb0:	f1b9 0f00 	cmp.w	r9, #0
 801cfb4:	f300 809e 	bgt.w	801d0f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801cfb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfc0:	441d      	add	r5, r3
 801cfc2:	9b00      	ldr	r3, [sp, #0]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	f340 80e7 	ble.w	801d198 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cfca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cfce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfd8:	eef0 6a62 	vmov.f32	s13, s5
 801cfdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cfe0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cfe8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cfec:	eef0 6a43 	vmov.f32	s13, s6
 801cff0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cff4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cff8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cffc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d000:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d004:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d008:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d00c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d010:	ee12 2a90 	vmov	r2, s5
 801d014:	eef0 2a47 	vmov.f32	s5, s14
 801d018:	fb92 f3f3 	sdiv	r3, r2, r3
 801d01c:	ee13 2a10 	vmov	r2, s6
 801d020:	9311      	str	r3, [sp, #68]	; 0x44
 801d022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d024:	eeb0 3a67 	vmov.f32	s6, s15
 801d028:	fb92 f3f3 	sdiv	r3, r2, r3
 801d02c:	9312      	str	r3, [sp, #72]	; 0x48
 801d02e:	9b00      	ldr	r3, [sp, #0]
 801d030:	9a03      	ldr	r2, [sp, #12]
 801d032:	3b01      	subs	r3, #1
 801d034:	9300      	str	r3, [sp, #0]
 801d036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d038:	bf08      	it	eq
 801d03a:	4613      	moveq	r3, r2
 801d03c:	e78f      	b.n	801cf5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801d03e:	45c6      	cmp	lr, r8
 801d040:	dab4      	bge.n	801cfac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d042:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d044:	fb01 2606 	mla	r6, r1, r6, r2
 801d048:	1436      	asrs	r6, r6, #16
 801d04a:	d4af      	bmi.n	801cfac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d04c:	9901      	ldr	r1, [sp, #4]
 801d04e:	428e      	cmp	r6, r1
 801d050:	daac      	bge.n	801cfac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d052:	1cee      	adds	r6, r5, #3
 801d054:	4699      	mov	r9, r3
 801d056:	f1b9 0f00 	cmp.w	r9, #0
 801d05a:	f106 0603 	add.w	r6, r6, #3
 801d05e:	ddab      	ble.n	801cfb8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d060:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d064:	9902      	ldr	r1, [sp, #8]
 801d066:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d06a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d06e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d072:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d074:	fb1b fb04 	smulbb	fp, fp, r4
 801d078:	f109 39ff 	add.w	r9, r9, #4294967295
 801d07c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d080:	4408      	add	r0, r1
 801d082:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d084:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d088:	440a      	add	r2, r1
 801d08a:	eb07 0a0e 	add.w	sl, r7, lr
 801d08e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d092:	fb0e be0c 	mla	lr, lr, ip, fp
 801d096:	fa1f fe8e 	uxth.w	lr, lr
 801d09a:	f10e 0b01 	add.w	fp, lr, #1
 801d09e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d0a2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d0a6:	fb1b fb04 	smulbb	fp, fp, r4
 801d0aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d0ae:	f806 ec06 	strb.w	lr, [r6, #-6]
 801d0b2:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d0b6:	fb0e be0c 	mla	lr, lr, ip, fp
 801d0ba:	fa1f fe8e 	uxth.w	lr, lr
 801d0be:	f10e 0b01 	add.w	fp, lr, #1
 801d0c2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d0c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d0ca:	f806 ec05 	strb.w	lr, [r6, #-5]
 801d0ce:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d0d2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d0d6:	fb1a fa04 	smulbb	sl, sl, r4
 801d0da:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d0de:	fa1f fe8e 	uxth.w	lr, lr
 801d0e2:	f10e 0a01 	add.w	sl, lr, #1
 801d0e6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d0ea:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d0ee:	f806 ec04 	strb.w	lr, [r6, #-4]
 801d0f2:	e7b0      	b.n	801d056 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d0f4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d0f8:	d446      	bmi.n	801d188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d0fa:	45c2      	cmp	sl, r8
 801d0fc:	da44      	bge.n	801d188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d0fe:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801d102:	d441      	bmi.n	801d188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d104:	9901      	ldr	r1, [sp, #4]
 801d106:	458e      	cmp	lr, r1
 801d108:	da3e      	bge.n	801d188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d10a:	9902      	ldr	r1, [sp, #8]
 801d10c:	f896 b000 	ldrb.w	fp, [r6]
 801d110:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d114:	fb1b fb04 	smulbb	fp, fp, r4
 801d118:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d11c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d120:	eb07 0a0e 	add.w	sl, r7, lr
 801d124:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d128:	fb0e be0c 	mla	lr, lr, ip, fp
 801d12c:	fa1f fe8e 	uxth.w	lr, lr
 801d130:	f10e 0b01 	add.w	fp, lr, #1
 801d134:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d138:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d13c:	fb1b fb04 	smulbb	fp, fp, r4
 801d140:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d144:	f886 e000 	strb.w	lr, [r6]
 801d148:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d14c:	fb0e be0c 	mla	lr, lr, ip, fp
 801d150:	fa1f fe8e 	uxth.w	lr, lr
 801d154:	f10e 0b01 	add.w	fp, lr, #1
 801d158:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d15c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d160:	f886 e001 	strb.w	lr, [r6, #1]
 801d164:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d168:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d16c:	fb1a fa04 	smulbb	sl, sl, r4
 801d170:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d174:	fa1f fe8e 	uxth.w	lr, lr
 801d178:	f10e 0a01 	add.w	sl, lr, #1
 801d17c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d180:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d184:	f886 e002 	strb.w	lr, [r6, #2]
 801d188:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d18a:	3603      	adds	r6, #3
 801d18c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d190:	4408      	add	r0, r1
 801d192:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d194:	440a      	add	r2, r1
 801d196:	e70b      	b.n	801cfb0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801d198:	b005      	add	sp, #20
 801d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d19e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d19e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1a2:	b085      	sub	sp, #20
 801d1a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d1a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d1aa:	9203      	str	r2, [sp, #12]
 801d1ac:	6870      	ldr	r0, [r6, #4]
 801d1ae:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d1b0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d1b4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d1b8:	9101      	str	r1, [sp, #4]
 801d1ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d1be:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801d1c2:	fb00 2404 	mla	r4, r0, r4, r2
 801d1c6:	6832      	ldr	r2, [r6, #0]
 801d1c8:	686e      	ldr	r6, [r5, #4]
 801d1ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d1ce:	3604      	adds	r6, #4
 801d1d0:	4414      	add	r4, r2
 801d1d2:	682a      	ldr	r2, [r5, #0]
 801d1d4:	9202      	str	r2, [sp, #8]
 801d1d6:	9a01      	ldr	r2, [sp, #4]
 801d1d8:	2a00      	cmp	r2, #0
 801d1da:	dc03      	bgt.n	801d1e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801d1dc:	9a03      	ldr	r2, [sp, #12]
 801d1de:	2a00      	cmp	r2, #0
 801d1e0:	f340 80b2 	ble.w	801d348 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d1e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d1e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d1ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d1ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	dd0c      	ble.n	801d20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d1f4:	1405      	asrs	r5, r0, #16
 801d1f6:	d405      	bmi.n	801d204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d1f8:	4575      	cmp	r5, lr
 801d1fa:	da03      	bge.n	801d204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d1fc:	1415      	asrs	r5, r2, #16
 801d1fe:	d401      	bmi.n	801d204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d200:	4545      	cmp	r5, r8
 801d202:	db05      	blt.n	801d210 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d204:	4460      	add	r0, ip
 801d206:	443a      	add	r2, r7
 801d208:	3b01      	subs	r3, #1
 801d20a:	3403      	adds	r4, #3
 801d20c:	e7f0      	b.n	801d1f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801d20e:	d03d      	beq.n	801d28c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801d210:	1e5d      	subs	r5, r3, #1
 801d212:	fb0c 0905 	mla	r9, ip, r5, r0
 801d216:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d21a:	d42c      	bmi.n	801d276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d21c:	45f1      	cmp	r9, lr
 801d21e:	da2a      	bge.n	801d276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d220:	fb07 2505 	mla	r5, r7, r5, r2
 801d224:	142d      	asrs	r5, r5, #16
 801d226:	d426      	bmi.n	801d276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d228:	4545      	cmp	r5, r8
 801d22a:	da24      	bge.n	801d276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d22c:	1ce5      	adds	r5, r4, #3
 801d22e:	469a      	mov	sl, r3
 801d230:	f1ba 0f00 	cmp.w	sl, #0
 801d234:	f105 0503 	add.w	r5, r5, #3
 801d238:	dd23      	ble.n	801d282 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d23a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801d23e:	9902      	ldr	r1, [sp, #8]
 801d240:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801d244:	443a      	add	r2, r7
 801d246:	fb0e 1909 	mla	r9, lr, r9, r1
 801d24a:	4460      	add	r0, ip
 801d24c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d250:	f819 900b 	ldrb.w	r9, [r9, fp]
 801d254:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d258:	eb06 0b09 	add.w	fp, r6, r9
 801d25c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801d260:	f805 9c06 	strb.w	r9, [r5, #-6]
 801d264:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d268:	f805 9c05 	strb.w	r9, [r5, #-5]
 801d26c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d270:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d274:	e7dc      	b.n	801d230 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d276:	2500      	movs	r5, #0
 801d278:	eba3 0905 	sub.w	r9, r3, r5
 801d27c:	f1b9 0f00 	cmp.w	r9, #0
 801d280:	dc3c      	bgt.n	801d2fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801d282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d286:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d28a:	441c      	add	r4, r3
 801d28c:	9b01      	ldr	r3, [sp, #4]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	dd5a      	ble.n	801d348 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d292:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d298:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d29c:	eeb0 6a62 	vmov.f32	s12, s5
 801d2a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d2a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2ac:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d2b0:	eeb0 6a43 	vmov.f32	s12, s6
 801d2b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2b8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d2bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2d4:	ee12 2a90 	vmov	r2, s5
 801d2d8:	eef0 2a47 	vmov.f32	s5, s14
 801d2dc:	fb92 fcf3 	sdiv	ip, r2, r3
 801d2e0:	ee13 2a10 	vmov	r2, s6
 801d2e4:	eeb0 3a67 	vmov.f32	s6, s15
 801d2e8:	fb92 f7f3 	sdiv	r7, r2, r3
 801d2ec:	9b01      	ldr	r3, [sp, #4]
 801d2ee:	9a03      	ldr	r2, [sp, #12]
 801d2f0:	3b01      	subs	r3, #1
 801d2f2:	9301      	str	r3, [sp, #4]
 801d2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2f6:	bf08      	it	eq
 801d2f8:	4613      	moveq	r3, r2
 801d2fa:	e76c      	b.n	801d1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801d2fc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d300:	d41e      	bmi.n	801d340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d302:	45f2      	cmp	sl, lr
 801d304:	da1c      	bge.n	801d340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d306:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d30a:	d419      	bmi.n	801d340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d30c:	45c1      	cmp	r9, r8
 801d30e:	da17      	bge.n	801d340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d310:	9902      	ldr	r1, [sp, #8]
 801d312:	fb0e 1909 	mla	r9, lr, r9, r1
 801d316:	f819 900a 	ldrb.w	r9, [r9, sl]
 801d31a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d31e:	f816 b009 	ldrb.w	fp, [r6, r9]
 801d322:	eb06 0a09 	add.w	sl, r6, r9
 801d326:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801d32a:	f804 b009 	strb.w	fp, [r4, r9]
 801d32e:	44a1      	add	r9, r4
 801d330:	f89a b001 	ldrb.w	fp, [sl, #1]
 801d334:	f889 b001 	strb.w	fp, [r9, #1]
 801d338:	f89a a002 	ldrb.w	sl, [sl, #2]
 801d33c:	f889 a002 	strb.w	sl, [r9, #2]
 801d340:	4460      	add	r0, ip
 801d342:	443a      	add	r2, r7
 801d344:	3501      	adds	r5, #1
 801d346:	e797      	b.n	801d278 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801d348:	b005      	add	sp, #20
 801d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d34e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d34e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d352:	b087      	sub	sp, #28
 801d354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d358:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d35a:	9204      	str	r2, [sp, #16]
 801d35c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d360:	6870      	ldr	r0, [r6, #4]
 801d362:	9205      	str	r2, [sp, #20]
 801d364:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801d366:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d36a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d36e:	9101      	str	r1, [sp, #4]
 801d370:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d374:	fb00 2505 	mla	r5, r0, r5, r2
 801d378:	6832      	ldr	r2, [r6, #0]
 801d37a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d37e:	4415      	add	r5, r2
 801d380:	6822      	ldr	r2, [r4, #0]
 801d382:	9202      	str	r2, [sp, #8]
 801d384:	6862      	ldr	r2, [r4, #4]
 801d386:	3204      	adds	r2, #4
 801d388:	9203      	str	r2, [sp, #12]
 801d38a:	9a01      	ldr	r2, [sp, #4]
 801d38c:	2a00      	cmp	r2, #0
 801d38e:	dc03      	bgt.n	801d398 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d390:	9a04      	ldr	r2, [sp, #16]
 801d392:	2a00      	cmp	r2, #0
 801d394:	f340 8124 	ble.w	801d5e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d398:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d39a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d39e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	dd0e      	ble.n	801d3c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d3a8:	1422      	asrs	r2, r4, #16
 801d3aa:	d405      	bmi.n	801d3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d3ac:	4572      	cmp	r2, lr
 801d3ae:	da03      	bge.n	801d3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d3b0:	1402      	asrs	r2, r0, #16
 801d3b2:	d401      	bmi.n	801d3b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d3b4:	4542      	cmp	r2, r8
 801d3b6:	db07      	blt.n	801d3c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d3b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3ba:	3b01      	subs	r3, #1
 801d3bc:	3503      	adds	r5, #3
 801d3be:	4414      	add	r4, r2
 801d3c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3c2:	4410      	add	r0, r2
 801d3c4:	e7ee      	b.n	801d3a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d3c6:	d010      	beq.n	801d3ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801d3c8:	1e5a      	subs	r2, r3, #1
 801d3ca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d3cc:	fb06 4602 	mla	r6, r6, r2, r4
 801d3d0:	1436      	asrs	r6, r6, #16
 801d3d2:	d546      	bpl.n	801d462 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801d3d4:	4699      	mov	r9, r3
 801d3d6:	462f      	mov	r7, r5
 801d3d8:	f1b9 0f00 	cmp.w	r9, #0
 801d3dc:	f300 80a5 	bgt.w	801d52a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d3e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3e8:	441d      	add	r5, r3
 801d3ea:	9b01      	ldr	r3, [sp, #4]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	f340 80f7 	ble.w	801d5e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d3f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3fc:	eeb0 6a62 	vmov.f32	s12, s5
 801d400:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d404:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d408:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d40c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d410:	eeb0 6a43 	vmov.f32	s12, s6
 801d414:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d418:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d41c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d420:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d424:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d428:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d42c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d430:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d434:	ee12 2a90 	vmov	r2, s5
 801d438:	eef0 2a47 	vmov.f32	s5, s14
 801d43c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d440:	ee13 2a10 	vmov	r2, s6
 801d444:	9313      	str	r3, [sp, #76]	; 0x4c
 801d446:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d448:	eeb0 3a67 	vmov.f32	s6, s15
 801d44c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d450:	9314      	str	r3, [sp, #80]	; 0x50
 801d452:	9b01      	ldr	r3, [sp, #4]
 801d454:	9a04      	ldr	r2, [sp, #16]
 801d456:	3b01      	subs	r3, #1
 801d458:	9301      	str	r3, [sp, #4]
 801d45a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d45c:	bf08      	it	eq
 801d45e:	4613      	moveq	r3, r2
 801d460:	e793      	b.n	801d38a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d462:	4576      	cmp	r6, lr
 801d464:	dab6      	bge.n	801d3d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d466:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d468:	fb06 0202 	mla	r2, r6, r2, r0
 801d46c:	1412      	asrs	r2, r2, #16
 801d46e:	d4b1      	bmi.n	801d3d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d470:	4542      	cmp	r2, r8
 801d472:	daaf      	bge.n	801d3d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d474:	1cef      	adds	r7, r5, #3
 801d476:	4699      	mov	r9, r3
 801d478:	f1b9 0f00 	cmp.w	r9, #0
 801d47c:	ddb0      	ble.n	801d3e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d47e:	9902      	ldr	r1, [sp, #8]
 801d480:	1402      	asrs	r2, r0, #16
 801d482:	1426      	asrs	r6, r4, #16
 801d484:	fb0e 1202 	mla	r2, lr, r2, r1
 801d488:	9903      	ldr	r1, [sp, #12]
 801d48a:	5d92      	ldrb	r2, [r2, r6]
 801d48c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d490:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d494:	d041      	beq.n	801d51a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801d496:	9a05      	ldr	r2, [sp, #20]
 801d498:	fa5f fb86 	uxtb.w	fp, r6
 801d49c:	fb02 fc0c 	mul.w	ip, r2, ip
 801d4a0:	f10c 0201 	add.w	r2, ip, #1
 801d4a4:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d4a8:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801d4ac:	1212      	asrs	r2, r2, #8
 801d4ae:	fa1f fa82 	uxth.w	sl, r2
 801d4b2:	43d2      	mvns	r2, r2
 801d4b4:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4b8:	b2d2      	uxtb	r2, r2
 801d4ba:	fb0c bc02 	mla	ip, ip, r2, fp
 801d4be:	fa1f fc8c 	uxth.w	ip, ip
 801d4c2:	f10c 0b01 	add.w	fp, ip, #1
 801d4c6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d4ca:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d4ce:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d4d2:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4da:	fb16 fa0a 	smulbb	sl, r6, sl
 801d4de:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d4e2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801d4e6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801d4ea:	fb06 aa02 	mla	sl, r6, r2, sl
 801d4ee:	fb0c bc02 	mla	ip, ip, r2, fp
 801d4f2:	fa1f fa8a 	uxth.w	sl, sl
 801d4f6:	fa1f fc8c 	uxth.w	ip, ip
 801d4fa:	f10a 0601 	add.w	r6, sl, #1
 801d4fe:	f10c 0b01 	add.w	fp, ip, #1
 801d502:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d506:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d50a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d50e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d512:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d516:	f807 cc02 	strb.w	ip, [r7, #-2]
 801d51a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d51c:	3703      	adds	r7, #3
 801d51e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d522:	4414      	add	r4, r2
 801d524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d526:	4410      	add	r0, r2
 801d528:	e7a6      	b.n	801d478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801d52a:	1426      	asrs	r6, r4, #16
 801d52c:	d450      	bmi.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d52e:	4576      	cmp	r6, lr
 801d530:	da4e      	bge.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d532:	1402      	asrs	r2, r0, #16
 801d534:	d44c      	bmi.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d536:	4542      	cmp	r2, r8
 801d538:	da4a      	bge.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d53a:	9902      	ldr	r1, [sp, #8]
 801d53c:	fb0e 1202 	mla	r2, lr, r2, r1
 801d540:	9903      	ldr	r1, [sp, #12]
 801d542:	5d92      	ldrb	r2, [r2, r6]
 801d544:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d548:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d54c:	d040      	beq.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d54e:	9a05      	ldr	r2, [sp, #20]
 801d550:	fa5f fb86 	uxtb.w	fp, r6
 801d554:	fb02 fc0c 	mul.w	ip, r2, ip
 801d558:	f10c 0201 	add.w	r2, ip, #1
 801d55c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d560:	f897 c000 	ldrb.w	ip, [r7]
 801d564:	1212      	asrs	r2, r2, #8
 801d566:	fa1f fa82 	uxth.w	sl, r2
 801d56a:	43d2      	mvns	r2, r2
 801d56c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d570:	b2d2      	uxtb	r2, r2
 801d572:	fb0c bc02 	mla	ip, ip, r2, fp
 801d576:	fa1f fc8c 	uxth.w	ip, ip
 801d57a:	f10c 0b01 	add.w	fp, ip, #1
 801d57e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d582:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d586:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d58a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d58e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d592:	fb16 fa0a 	smulbb	sl, r6, sl
 801d596:	78be      	ldrb	r6, [r7, #2]
 801d598:	f887 c000 	strb.w	ip, [r7]
 801d59c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d5a0:	fb06 aa02 	mla	sl, r6, r2, sl
 801d5a4:	fb0c bc02 	mla	ip, ip, r2, fp
 801d5a8:	fa1f fa8a 	uxth.w	sl, sl
 801d5ac:	fa1f fc8c 	uxth.w	ip, ip
 801d5b0:	f10a 0601 	add.w	r6, sl, #1
 801d5b4:	f10c 0b01 	add.w	fp, ip, #1
 801d5b8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d5bc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d5c4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5c8:	f887 a002 	strb.w	sl, [r7, #2]
 801d5cc:	f887 c001 	strb.w	ip, [r7, #1]
 801d5d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5d2:	3703      	adds	r7, #3
 801d5d4:	f109 39ff 	add.w	r9, r9, #4294967295
 801d5d8:	4414      	add	r4, r2
 801d5da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5dc:	4410      	add	r0, r2
 801d5de:	e6fb      	b.n	801d3d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d5e0:	b007      	add	sp, #28
 801d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d5e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d5e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ea:	b085      	sub	sp, #20
 801d5ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d5f2:	9203      	str	r2, [sp, #12]
 801d5f4:	6870      	ldr	r0, [r6, #4]
 801d5f6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d5f8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d5fc:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d600:	9100      	str	r1, [sp, #0]
 801d602:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d606:	fb00 2404 	mla	r4, r0, r4, r2
 801d60a:	6832      	ldr	r2, [r6, #0]
 801d60c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d610:	4414      	add	r4, r2
 801d612:	682a      	ldr	r2, [r5, #0]
 801d614:	9201      	str	r2, [sp, #4]
 801d616:	686a      	ldr	r2, [r5, #4]
 801d618:	3204      	adds	r2, #4
 801d61a:	9202      	str	r2, [sp, #8]
 801d61c:	9a00      	ldr	r2, [sp, #0]
 801d61e:	2a00      	cmp	r2, #0
 801d620:	dc03      	bgt.n	801d62a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801d622:	9a03      	ldr	r2, [sp, #12]
 801d624:	2a00      	cmp	r2, #0
 801d626:	f340 8131 	ble.w	801d88c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801d62a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d62c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d630:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d632:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d636:	2b00      	cmp	r3, #0
 801d638:	dd0e      	ble.n	801d658 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d63a:	1405      	asrs	r5, r0, #16
 801d63c:	d405      	bmi.n	801d64a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d63e:	4575      	cmp	r5, lr
 801d640:	da03      	bge.n	801d64a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d642:	1415      	asrs	r5, r2, #16
 801d644:	d401      	bmi.n	801d64a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d646:	4545      	cmp	r5, r8
 801d648:	db07      	blt.n	801d65a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801d64a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d64c:	3b01      	subs	r3, #1
 801d64e:	3403      	adds	r4, #3
 801d650:	4428      	add	r0, r5
 801d652:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d654:	442a      	add	r2, r5
 801d656:	e7ee      	b.n	801d636 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801d658:	d06f      	beq.n	801d73a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d65a:	1e5d      	subs	r5, r3, #1
 801d65c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d65e:	fb06 0605 	mla	r6, r6, r5, r0
 801d662:	1436      	asrs	r6, r6, #16
 801d664:	d460      	bmi.n	801d728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d666:	4576      	cmp	r6, lr
 801d668:	da5e      	bge.n	801d728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d66a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d66c:	fb06 2505 	mla	r5, r6, r5, r2
 801d670:	142d      	asrs	r5, r5, #16
 801d672:	d459      	bmi.n	801d728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d674:	4545      	cmp	r5, r8
 801d676:	da57      	bge.n	801d728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d678:	1ce5      	adds	r5, r4, #3
 801d67a:	469a      	mov	sl, r3
 801d67c:	f1ba 0f00 	cmp.w	sl, #0
 801d680:	dd56      	ble.n	801d730 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801d682:	9901      	ldr	r1, [sp, #4]
 801d684:	1416      	asrs	r6, r2, #16
 801d686:	1407      	asrs	r7, r0, #16
 801d688:	fb0e 1606 	mla	r6, lr, r6, r1
 801d68c:	9902      	ldr	r1, [sp, #8]
 801d68e:	5df6      	ldrb	r6, [r6, r7]
 801d690:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801d694:	0e37      	lsrs	r7, r6, #24
 801d696:	2fff      	cmp	r7, #255	; 0xff
 801d698:	f000 80ef 	beq.w	801d87a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801d69c:	fa5f fc87 	uxtb.w	ip, r7
 801d6a0:	b3d7      	cbz	r7, 801d718 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801d6a2:	fa1f f78c 	uxth.w	r7, ip
 801d6a6:	ea6f 0c0c 	mvn.w	ip, ip
 801d6aa:	fa5f fb86 	uxtb.w	fp, r6
 801d6ae:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801d6b2:	fa5f fc8c 	uxtb.w	ip, ip
 801d6b6:	fb1b fb07 	smulbb	fp, fp, r7
 801d6ba:	fb09 b90c 	mla	r9, r9, ip, fp
 801d6be:	fa1f f989 	uxth.w	r9, r9
 801d6c2:	f109 0b01 	add.w	fp, r9, #1
 801d6c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d6ca:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d6ce:	fb1b fb0c 	smulbb	fp, fp, ip
 801d6d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d6d6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801d6da:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d6de:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d6e2:	fb09 b907 	mla	r9, r9, r7, fp
 801d6e6:	fa1f f989 	uxth.w	r9, r9
 801d6ea:	f109 0b01 	add.w	fp, r9, #1
 801d6ee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d6f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d6f6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d6fa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801d6fe:	fb19 fc0c 	smulbb	ip, r9, ip
 801d702:	fb06 c607 	mla	r6, r6, r7, ip
 801d706:	b2b6      	uxth	r6, r6
 801d708:	f106 0c01 	add.w	ip, r6, #1
 801d70c:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801d710:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d714:	f805 cc01 	strb.w	ip, [r5, #-1]
 801d718:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d71a:	3503      	adds	r5, #3
 801d71c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d720:	4408      	add	r0, r1
 801d722:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d724:	440a      	add	r2, r1
 801d726:	e7a9      	b.n	801d67c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d728:	2600      	movs	r6, #0
 801d72a:	1b9d      	subs	r5, r3, r6
 801d72c:	2d00      	cmp	r5, #0
 801d72e:	dc40      	bgt.n	801d7b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801d730:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d738:	441c      	add	r4, r3
 801d73a:	9b00      	ldr	r3, [sp, #0]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	f340 80a5 	ble.w	801d88c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801d742:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d748:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d74c:	eeb0 6a62 	vmov.f32	s12, s5
 801d750:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d754:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d758:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d75c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d760:	eeb0 6a43 	vmov.f32	s12, s6
 801d764:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d768:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d76c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d770:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d774:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d778:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d77c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d780:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d784:	ee12 2a90 	vmov	r2, s5
 801d788:	eef0 2a47 	vmov.f32	s5, s14
 801d78c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d790:	ee13 2a10 	vmov	r2, s6
 801d794:	9311      	str	r3, [sp, #68]	; 0x44
 801d796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d798:	eeb0 3a67 	vmov.f32	s6, s15
 801d79c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7a0:	9312      	str	r3, [sp, #72]	; 0x48
 801d7a2:	9b00      	ldr	r3, [sp, #0]
 801d7a4:	9a03      	ldr	r2, [sp, #12]
 801d7a6:	3b01      	subs	r3, #1
 801d7a8:	9300      	str	r3, [sp, #0]
 801d7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7ac:	bf08      	it	eq
 801d7ae:	4613      	moveq	r3, r2
 801d7b0:	e734      	b.n	801d61c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801d7b2:	1407      	asrs	r7, r0, #16
 801d7b4:	d450      	bmi.n	801d858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d7b6:	4577      	cmp	r7, lr
 801d7b8:	da4e      	bge.n	801d858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d7ba:	1415      	asrs	r5, r2, #16
 801d7bc:	d44c      	bmi.n	801d858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d7be:	4545      	cmp	r5, r8
 801d7c0:	da4a      	bge.n	801d858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d7c2:	9901      	ldr	r1, [sp, #4]
 801d7c4:	fb0e 1505 	mla	r5, lr, r5, r1
 801d7c8:	9902      	ldr	r1, [sp, #8]
 801d7ca:	5ded      	ldrb	r5, [r5, r7]
 801d7cc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801d7d0:	0e2f      	lsrs	r7, r5, #24
 801d7d2:	2fff      	cmp	r7, #255	; 0xff
 801d7d4:	d046      	beq.n	801d864 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801d7d6:	fa5f f987 	uxtb.w	r9, r7
 801d7da:	b3ef      	cbz	r7, 801d858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d7dc:	fa1f fc89 	uxth.w	ip, r9
 801d7e0:	ea6f 0909 	mvn.w	r9, r9
 801d7e4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d7e8:	fa5f fb85 	uxtb.w	fp, r5
 801d7ec:	f814 a007 	ldrb.w	sl, [r4, r7]
 801d7f0:	fa5f f989 	uxtb.w	r9, r9
 801d7f4:	fb1b fb0c 	smulbb	fp, fp, ip
 801d7f8:	fb0a ba09 	mla	sl, sl, r9, fp
 801d7fc:	fa1f fa8a 	uxth.w	sl, sl
 801d800:	f10a 0b01 	add.w	fp, sl, #1
 801d804:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d808:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d80c:	f804 a007 	strb.w	sl, [r4, r7]
 801d810:	4427      	add	r7, r4
 801d812:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d816:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801d81a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d81e:	fb1b fb09 	smulbb	fp, fp, r9
 801d822:	fb0a ba0c 	mla	sl, sl, ip, fp
 801d826:	fa1f fa8a 	uxth.w	sl, sl
 801d82a:	f10a 0b01 	add.w	fp, sl, #1
 801d82e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d832:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d836:	f887 a001 	strb.w	sl, [r7, #1]
 801d83a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d83e:	fb1a f909 	smulbb	r9, sl, r9
 801d842:	fb05 950c 	mla	r5, r5, ip, r9
 801d846:	b2ad      	uxth	r5, r5
 801d848:	f105 0901 	add.w	r9, r5, #1
 801d84c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801d850:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d854:	f887 9002 	strb.w	r9, [r7, #2]
 801d858:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d85a:	3601      	adds	r6, #1
 801d85c:	4408      	add	r0, r1
 801d85e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d860:	440a      	add	r2, r1
 801d862:	e762      	b.n	801d72a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801d864:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d868:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801d86c:	55e5      	strb	r5, [r4, r7]
 801d86e:	4427      	add	r7, r4
 801d870:	0c2d      	lsrs	r5, r5, #16
 801d872:	f887 c001 	strb.w	ip, [r7, #1]
 801d876:	70bd      	strb	r5, [r7, #2]
 801d878:	e7ee      	b.n	801d858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d87a:	0a37      	lsrs	r7, r6, #8
 801d87c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801d880:	0c36      	lsrs	r6, r6, #16
 801d882:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d886:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d88a:	e745      	b.n	801d718 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801d88c:	b005      	add	sp, #20
 801d88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d892 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d896:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d898:	9201      	str	r2, [sp, #4]
 801d89a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801d89e:	6870      	ldr	r0, [r6, #4]
 801d8a0:	9200      	str	r2, [sp, #0]
 801d8a2:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801d8a6:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801d8aa:	fa1f fc85 	uxth.w	ip, r5
 801d8ae:	43ed      	mvns	r5, r5
 801d8b0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d8b4:	b2ed      	uxtb	r5, r5
 801d8b6:	fb00 2404 	mla	r4, r0, r4, r2
 801d8ba:	6832      	ldr	r2, [r6, #0]
 801d8bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d8c0:	4414      	add	r4, r2
 801d8c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d8c4:	f8d2 8000 	ldr.w	r8, [r2]
 801d8c8:	2900      	cmp	r1, #0
 801d8ca:	dc03      	bgt.n	801d8d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801d8cc:	9a01      	ldr	r2, [sp, #4]
 801d8ce:	2a00      	cmp	r2, #0
 801d8d0:	f340 8104 	ble.w	801dadc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801d8d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d8d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d8dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	dd0f      	ble.n	801d904 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d8e4:	1406      	asrs	r6, r0, #16
 801d8e6:	d406      	bmi.n	801d8f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d8e8:	4576      	cmp	r6, lr
 801d8ea:	da04      	bge.n	801d8f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d8ec:	1416      	asrs	r6, r2, #16
 801d8ee:	d402      	bmi.n	801d8f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d8f0:	9f00      	ldr	r7, [sp, #0]
 801d8f2:	42be      	cmp	r6, r7
 801d8f4:	db07      	blt.n	801d906 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801d8f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	3403      	adds	r4, #3
 801d8fc:	4430      	add	r0, r6
 801d8fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d900:	4432      	add	r2, r6
 801d902:	e7ed      	b.n	801d8e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d904:	d05f      	beq.n	801d9c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801d906:	1e5e      	subs	r6, r3, #1
 801d908:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d90a:	fb07 0706 	mla	r7, r7, r6, r0
 801d90e:	143f      	asrs	r7, r7, #16
 801d910:	d450      	bmi.n	801d9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d912:	4577      	cmp	r7, lr
 801d914:	da4e      	bge.n	801d9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d916:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d918:	fb07 2606 	mla	r6, r7, r6, r2
 801d91c:	1436      	asrs	r6, r6, #16
 801d91e:	d449      	bmi.n	801d9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d920:	9f00      	ldr	r7, [sp, #0]
 801d922:	42be      	cmp	r6, r7
 801d924:	da46      	bge.n	801d9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d926:	1ce6      	adds	r6, r4, #3
 801d928:	4699      	mov	r9, r3
 801d92a:	f1b9 0f00 	cmp.w	r9, #0
 801d92e:	f106 0603 	add.w	r6, r6, #3
 801d932:	dd43      	ble.n	801d9bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801d934:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d938:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d93c:	1417      	asrs	r7, r2, #16
 801d93e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d942:	fb1b fb05 	smulbb	fp, fp, r5
 801d946:	fb0e a707 	mla	r7, lr, r7, sl
 801d94a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d94e:	eb08 0a07 	add.w	sl, r8, r7
 801d952:	f818 7007 	ldrb.w	r7, [r8, r7]
 801d956:	fb07 b70c 	mla	r7, r7, ip, fp
 801d95a:	b2bf      	uxth	r7, r7
 801d95c:	f107 0b01 	add.w	fp, r7, #1
 801d960:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d964:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d968:	fb1b fb05 	smulbb	fp, fp, r5
 801d96c:	123f      	asrs	r7, r7, #8
 801d96e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d972:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d976:	fb07 b70c 	mla	r7, r7, ip, fp
 801d97a:	b2bf      	uxth	r7, r7
 801d97c:	f107 0b01 	add.w	fp, r7, #1
 801d980:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d984:	123f      	asrs	r7, r7, #8
 801d986:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d98a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d98e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d992:	fb1a fa05 	smulbb	sl, sl, r5
 801d996:	fb07 a70c 	mla	r7, r7, ip, sl
 801d99a:	b2bf      	uxth	r7, r7
 801d99c:	f107 0a01 	add.w	sl, r7, #1
 801d9a0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d9a4:	123f      	asrs	r7, r7, #8
 801d9a6:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d9aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d9ac:	4438      	add	r0, r7
 801d9ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d9b0:	443a      	add	r2, r7
 801d9b2:	e7ba      	b.n	801d92a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d9b4:	2700      	movs	r7, #0
 801d9b6:	1bde      	subs	r6, r3, r7
 801d9b8:	2e00      	cmp	r6, #0
 801d9ba:	dc3f      	bgt.n	801da3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d9bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d9c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9c4:	441c      	add	r4, r3
 801d9c6:	2900      	cmp	r1, #0
 801d9c8:	f340 8088 	ble.w	801dadc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801d9cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d9d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d9d6:	3901      	subs	r1, #1
 801d9d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d9dc:	eef0 6a62 	vmov.f32	s13, s5
 801d9e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d9e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d9e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d9ec:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801d9f0:	eef0 6a43 	vmov.f32	s13, s6
 801d9f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d9f8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801d9fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da14:	ee12 2a90 	vmov	r2, s5
 801da18:	eef0 2a47 	vmov.f32	s5, s14
 801da1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801da20:	ee13 2a10 	vmov	r2, s6
 801da24:	930f      	str	r3, [sp, #60]	; 0x3c
 801da26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da28:	eeb0 3a67 	vmov.f32	s6, s15
 801da2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801da30:	9a01      	ldr	r2, [sp, #4]
 801da32:	9310      	str	r3, [sp, #64]	; 0x40
 801da34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da36:	bf08      	it	eq
 801da38:	4613      	moveq	r3, r2
 801da3a:	e745      	b.n	801d8c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801da3c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801da40:	d446      	bmi.n	801dad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801da42:	45f2      	cmp	sl, lr
 801da44:	da44      	bge.n	801dad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801da46:	ea5f 4922 	movs.w	r9, r2, asr #16
 801da4a:	d441      	bmi.n	801dad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801da4c:	9e00      	ldr	r6, [sp, #0]
 801da4e:	45b1      	cmp	r9, r6
 801da50:	da3e      	bge.n	801dad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801da52:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801da56:	fb0e a909 	mla	r9, lr, r9, sl
 801da5a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801da5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801da62:	fb1b fb05 	smulbb	fp, fp, r5
 801da66:	eb08 0a09 	add.w	sl, r8, r9
 801da6a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801da6e:	fb09 b90c 	mla	r9, r9, ip, fp
 801da72:	fa1f f989 	uxth.w	r9, r9
 801da76:	f109 0b01 	add.w	fp, r9, #1
 801da7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801da7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801da82:	f804 9006 	strb.w	r9, [r4, r6]
 801da86:	4426      	add	r6, r4
 801da88:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801da8c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801da90:	fb1b fb05 	smulbb	fp, fp, r5
 801da94:	fb09 b90c 	mla	r9, r9, ip, fp
 801da98:	fa1f f989 	uxth.w	r9, r9
 801da9c:	f109 0b01 	add.w	fp, r9, #1
 801daa0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801daa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801daa8:	f886 9001 	strb.w	r9, [r6, #1]
 801daac:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dab0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801dab4:	fb1a fa05 	smulbb	sl, sl, r5
 801dab8:	fb09 a90c 	mla	r9, r9, ip, sl
 801dabc:	fa1f f989 	uxth.w	r9, r9
 801dac0:	f109 0a01 	add.w	sl, r9, #1
 801dac4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801dac8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dacc:	f886 9002 	strb.w	r9, [r6, #2]
 801dad0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dad2:	3701      	adds	r7, #1
 801dad4:	4430      	add	r0, r6
 801dad6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dad8:	4432      	add	r2, r6
 801dada:	e76c      	b.n	801d9b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801dadc:	b003      	add	sp, #12
 801dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dae2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daec:	9201      	str	r2, [sp, #4]
 801daee:	6868      	ldr	r0, [r5, #4]
 801daf0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801daf4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801daf8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801dafc:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801db00:	fb00 2404 	mla	r4, r0, r4, r2
 801db04:	682a      	ldr	r2, [r5, #0]
 801db06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db0a:	4414      	add	r4, r2
 801db0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801db0e:	f8d2 9000 	ldr.w	r9, [r2]
 801db12:	2900      	cmp	r1, #0
 801db14:	dc03      	bgt.n	801db1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801db16:	9a01      	ldr	r2, [sp, #4]
 801db18:	2a00      	cmp	r2, #0
 801db1a:	f340 80a8 	ble.w	801dc6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801db1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801db24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801db26:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	dd0c      	ble.n	801db48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801db2e:	1405      	asrs	r5, r0, #16
 801db30:	d405      	bmi.n	801db3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801db32:	4565      	cmp	r5, ip
 801db34:	da03      	bge.n	801db3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801db36:	1415      	asrs	r5, r2, #16
 801db38:	d401      	bmi.n	801db3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801db3a:	4575      	cmp	r5, lr
 801db3c:	db05      	blt.n	801db4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801db3e:	4438      	add	r0, r7
 801db40:	4432      	add	r2, r6
 801db42:	3b01      	subs	r3, #1
 801db44:	3403      	adds	r4, #3
 801db46:	e7f0      	b.n	801db2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801db48:	d03a      	beq.n	801dbc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801db4a:	1e5d      	subs	r5, r3, #1
 801db4c:	fb07 0805 	mla	r8, r7, r5, r0
 801db50:	ea5f 4828 	movs.w	r8, r8, asr #16
 801db54:	d429      	bmi.n	801dbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801db56:	45e0      	cmp	r8, ip
 801db58:	da27      	bge.n	801dbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801db5a:	fb06 2505 	mla	r5, r6, r5, r2
 801db5e:	142d      	asrs	r5, r5, #16
 801db60:	d423      	bmi.n	801dbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801db62:	4575      	cmp	r5, lr
 801db64:	da21      	bge.n	801dbaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801db66:	f104 0803 	add.w	r8, r4, #3
 801db6a:	469a      	mov	sl, r3
 801db6c:	f1ba 0f00 	cmp.w	sl, #0
 801db70:	f108 0803 	add.w	r8, r8, #3
 801db74:	dd1f      	ble.n	801dbb6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801db76:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801db7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801db7e:	1415      	asrs	r5, r2, #16
 801db80:	4438      	add	r0, r7
 801db82:	4432      	add	r2, r6
 801db84:	fb0c b505 	mla	r5, ip, r5, fp
 801db88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801db8c:	eb09 0b05 	add.w	fp, r9, r5
 801db90:	f819 5005 	ldrb.w	r5, [r9, r5]
 801db94:	f808 5c06 	strb.w	r5, [r8, #-6]
 801db98:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801db9c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801dba0:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801dba4:	f808 5c04 	strb.w	r5, [r8, #-4]
 801dba8:	e7e0      	b.n	801db6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801dbaa:	2500      	movs	r5, #0
 801dbac:	eba3 0805 	sub.w	r8, r3, r5
 801dbb0:	f1b8 0f00 	cmp.w	r8, #0
 801dbb4:	dc38      	bgt.n	801dc28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801dbb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbbe:	441c      	add	r4, r3
 801dbc0:	2900      	cmp	r1, #0
 801dbc2:	dd54      	ble.n	801dc6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801dbc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbce:	3901      	subs	r1, #1
 801dbd0:	eeb0 6a62 	vmov.f32	s12, s5
 801dbd4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dbd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbe0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801dbe4:	eeb0 6a43 	vmov.f32	s12, s6
 801dbe8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbec:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dbf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbf8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc08:	ee12 2a90 	vmov	r2, s5
 801dc0c:	eef0 2a47 	vmov.f32	s5, s14
 801dc10:	fb92 f7f3 	sdiv	r7, r2, r3
 801dc14:	ee13 2a10 	vmov	r2, s6
 801dc18:	eeb0 3a67 	vmov.f32	s6, s15
 801dc1c:	fb92 f6f3 	sdiv	r6, r2, r3
 801dc20:	9a01      	ldr	r2, [sp, #4]
 801dc22:	bf08      	it	eq
 801dc24:	4613      	moveq	r3, r2
 801dc26:	e774      	b.n	801db12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801dc28:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801dc2c:	d41b      	bmi.n	801dc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801dc2e:	45e2      	cmp	sl, ip
 801dc30:	da19      	bge.n	801dc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801dc32:	ea5f 4822 	movs.w	r8, r2, asr #16
 801dc36:	d416      	bmi.n	801dc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801dc38:	45f0      	cmp	r8, lr
 801dc3a:	da14      	bge.n	801dc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801dc3c:	fb0c a808 	mla	r8, ip, r8, sl
 801dc40:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dc44:	f819 b008 	ldrb.w	fp, [r9, r8]
 801dc48:	eb09 0a08 	add.w	sl, r9, r8
 801dc4c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801dc50:	f804 b008 	strb.w	fp, [r4, r8]
 801dc54:	44a0      	add	r8, r4
 801dc56:	f89a b001 	ldrb.w	fp, [sl, #1]
 801dc5a:	f888 b001 	strb.w	fp, [r8, #1]
 801dc5e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801dc62:	f888 a002 	strb.w	sl, [r8, #2]
 801dc66:	4438      	add	r0, r7
 801dc68:	4432      	add	r2, r6
 801dc6a:	3501      	adds	r5, #1
 801dc6c:	e79e      	b.n	801dbac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801dc6e:	b003      	add	sp, #12
 801dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc78:	b085      	sub	sp, #20
 801dc7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc80:	9202      	str	r2, [sp, #8]
 801dc82:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dc86:	6860      	ldr	r0, [r4, #4]
 801dc88:	9203      	str	r2, [sp, #12]
 801dc8a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801dc8e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801dc92:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801dc96:	fb00 2505 	mla	r5, r0, r5, r2
 801dc9a:	6822      	ldr	r2, [r4, #0]
 801dc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dca0:	4415      	add	r5, r2
 801dca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801dca4:	6812      	ldr	r2, [r2, #0]
 801dca6:	9201      	str	r2, [sp, #4]
 801dca8:	2900      	cmp	r1, #0
 801dcaa:	dc03      	bgt.n	801dcb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801dcac:	9a02      	ldr	r2, [sp, #8]
 801dcae:	2a00      	cmp	r2, #0
 801dcb0:	f340 811c 	ble.w	801deec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801dcb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcb6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dcba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dcbc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	dd0e      	ble.n	801dce2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dcc4:	1422      	asrs	r2, r4, #16
 801dcc6:	d405      	bmi.n	801dcd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801dcc8:	4572      	cmp	r2, lr
 801dcca:	da03      	bge.n	801dcd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801dccc:	1402      	asrs	r2, r0, #16
 801dcce:	d401      	bmi.n	801dcd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801dcd0:	4542      	cmp	r2, r8
 801dcd2:	db07      	blt.n	801dce4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801dcd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dcd6:	3b01      	subs	r3, #1
 801dcd8:	3503      	adds	r5, #3
 801dcda:	4414      	add	r4, r2
 801dcdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dcde:	4410      	add	r0, r2
 801dce0:	e7ee      	b.n	801dcc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801dce2:	d072      	beq.n	801ddca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801dce4:	1e5a      	subs	r2, r3, #1
 801dce6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dce8:	fb06 4602 	mla	r6, r6, r2, r4
 801dcec:	1436      	asrs	r6, r6, #16
 801dcee:	d461      	bmi.n	801ddb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801dcf0:	4576      	cmp	r6, lr
 801dcf2:	da5f      	bge.n	801ddb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801dcf4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dcf6:	fb06 0202 	mla	r2, r6, r2, r0
 801dcfa:	1412      	asrs	r2, r2, #16
 801dcfc:	d45a      	bmi.n	801ddb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801dcfe:	4542      	cmp	r2, r8
 801dd00:	da58      	bge.n	801ddb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801dd02:	1cef      	adds	r7, r5, #3
 801dd04:	4699      	mov	r9, r3
 801dd06:	f1b9 0f00 	cmp.w	r9, #0
 801dd0a:	dd59      	ble.n	801ddc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801dd0c:	1426      	asrs	r6, r4, #16
 801dd0e:	1402      	asrs	r2, r0, #16
 801dd10:	fb0e 6202 	mla	r2, lr, r2, r6
 801dd14:	9e01      	ldr	r6, [sp, #4]
 801dd16:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801dd1a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801dd1e:	d041      	beq.n	801dda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801dd20:	9a03      	ldr	r2, [sp, #12]
 801dd22:	fa5f fb86 	uxtb.w	fp, r6
 801dd26:	fb02 fc0c 	mul.w	ip, r2, ip
 801dd2a:	f10c 0201 	add.w	r2, ip, #1
 801dd2e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801dd32:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801dd36:	1212      	asrs	r2, r2, #8
 801dd38:	fa1f fa82 	uxth.w	sl, r2
 801dd3c:	43d2      	mvns	r2, r2
 801dd3e:	fb1b fb0a 	smulbb	fp, fp, sl
 801dd42:	b2d2      	uxtb	r2, r2
 801dd44:	fb0c bc02 	mla	ip, ip, r2, fp
 801dd48:	fa1f fc8c 	uxth.w	ip, ip
 801dd4c:	f10c 0b01 	add.w	fp, ip, #1
 801dd50:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dd54:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801dd58:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801dd5c:	fb1b fb0a 	smulbb	fp, fp, sl
 801dd60:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dd64:	fb16 fa0a 	smulbb	sl, r6, sl
 801dd68:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801dd6c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801dd70:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801dd74:	fb06 aa02 	mla	sl, r6, r2, sl
 801dd78:	fb0c bc02 	mla	ip, ip, r2, fp
 801dd7c:	fa1f fa8a 	uxth.w	sl, sl
 801dd80:	fa1f fc8c 	uxth.w	ip, ip
 801dd84:	f10a 0601 	add.w	r6, sl, #1
 801dd88:	f10c 0b01 	add.w	fp, ip, #1
 801dd8c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801dd90:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dd94:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dd98:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dd9c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801dda0:	f807 cc02 	strb.w	ip, [r7, #-2]
 801dda4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dda6:	3703      	adds	r7, #3
 801dda8:	f109 39ff 	add.w	r9, r9, #4294967295
 801ddac:	4414      	add	r4, r2
 801ddae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ddb0:	4410      	add	r0, r2
 801ddb2:	e7a8      	b.n	801dd06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ddb4:	f04f 0c00 	mov.w	ip, #0
 801ddb8:	eba3 020c 	sub.w	r2, r3, ip
 801ddbc:	2a00      	cmp	r2, #0
 801ddbe:	dc3d      	bgt.n	801de3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801ddc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ddc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddc8:	441d      	add	r5, r3
 801ddca:	2900      	cmp	r1, #0
 801ddcc:	f340 808e 	ble.w	801deec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ddd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ddda:	3901      	subs	r1, #1
 801dddc:	eeb0 6a62 	vmov.f32	s12, s5
 801dde0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dde4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dde8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ddf0:	eeb0 6a43 	vmov.f32	s12, s6
 801ddf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddf8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ddfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de14:	ee12 2a90 	vmov	r2, s5
 801de18:	eef0 2a47 	vmov.f32	s5, s14
 801de1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801de20:	ee13 2a10 	vmov	r2, s6
 801de24:	9311      	str	r3, [sp, #68]	; 0x44
 801de26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de28:	eeb0 3a67 	vmov.f32	s6, s15
 801de2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801de30:	9a02      	ldr	r2, [sp, #8]
 801de32:	9312      	str	r3, [sp, #72]	; 0x48
 801de34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de36:	bf08      	it	eq
 801de38:	4613      	moveq	r3, r2
 801de3a:	e735      	b.n	801dca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801de3c:	1426      	asrs	r6, r4, #16
 801de3e:	d44e      	bmi.n	801dede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801de40:	4576      	cmp	r6, lr
 801de42:	da4c      	bge.n	801dede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801de44:	1402      	asrs	r2, r0, #16
 801de46:	d44a      	bmi.n	801dede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801de48:	4542      	cmp	r2, r8
 801de4a:	da48      	bge.n	801dede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801de4c:	fb0e 6202 	mla	r2, lr, r2, r6
 801de50:	9e01      	ldr	r6, [sp, #4]
 801de52:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801de56:	0e3a      	lsrs	r2, r7, #24
 801de58:	d041      	beq.n	801dede <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801de5a:	9e03      	ldr	r6, [sp, #12]
 801de5c:	fa5f fb87 	uxtb.w	fp, r7
 801de60:	4372      	muls	r2, r6
 801de62:	1c56      	adds	r6, r2, #1
 801de64:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801de68:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801de6c:	1212      	asrs	r2, r2, #8
 801de6e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801de72:	fa1f fa82 	uxth.w	sl, r2
 801de76:	43d2      	mvns	r2, r2
 801de78:	fb1b fb0a 	smulbb	fp, fp, sl
 801de7c:	b2d2      	uxtb	r2, r2
 801de7e:	fb09 b902 	mla	r9, r9, r2, fp
 801de82:	fa1f f989 	uxth.w	r9, r9
 801de86:	f109 0b01 	add.w	fp, r9, #1
 801de8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801de8e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801de92:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801de96:	fb1b fb0a 	smulbb	fp, fp, sl
 801de9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de9e:	fb17 fa0a 	smulbb	sl, r7, sl
 801dea2:	f805 9006 	strb.w	r9, [r5, r6]
 801dea6:	442e      	add	r6, r5
 801dea8:	78b7      	ldrb	r7, [r6, #2]
 801deaa:	f896 9001 	ldrb.w	r9, [r6, #1]
 801deae:	fb07 aa02 	mla	sl, r7, r2, sl
 801deb2:	fb09 b902 	mla	r9, r9, r2, fp
 801deb6:	fa1f fa8a 	uxth.w	sl, sl
 801deba:	fa1f f989 	uxth.w	r9, r9
 801debe:	f10a 0701 	add.w	r7, sl, #1
 801dec2:	f109 0b01 	add.w	fp, r9, #1
 801dec6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801deca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dece:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ded2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ded6:	f886 a002 	strb.w	sl, [r6, #2]
 801deda:	f886 9001 	strb.w	r9, [r6, #1]
 801dede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dee0:	f10c 0c01 	add.w	ip, ip, #1
 801dee4:	4414      	add	r4, r2
 801dee6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dee8:	4410      	add	r0, r2
 801deea:	e765      	b.n	801ddb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801deec:	b005      	add	sp, #20
 801deee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801def2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801def2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801def6:	b085      	sub	sp, #20
 801def8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801defc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801defe:	9203      	str	r2, [sp, #12]
 801df00:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801df04:	6860      	ldr	r0, [r4, #4]
 801df06:	9201      	str	r2, [sp, #4]
 801df08:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801df0c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801df10:	fb00 2505 	mla	r5, r0, r5, r2
 801df14:	6822      	ldr	r2, [r4, #0]
 801df16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df1a:	4415      	add	r5, r2
 801df1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801df1e:	6812      	ldr	r2, [r2, #0]
 801df20:	9202      	str	r2, [sp, #8]
 801df22:	2900      	cmp	r1, #0
 801df24:	dc03      	bgt.n	801df2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801df26:	9a03      	ldr	r2, [sp, #12]
 801df28:	2a00      	cmp	r2, #0
 801df2a:	f340 8122 	ble.w	801e172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801df2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df30:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801df34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801df36:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	dd0f      	ble.n	801df5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801df3e:	1422      	asrs	r2, r4, #16
 801df40:	d406      	bmi.n	801df50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801df42:	4572      	cmp	r2, lr
 801df44:	da04      	bge.n	801df50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801df46:	1402      	asrs	r2, r0, #16
 801df48:	d402      	bmi.n	801df50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801df4a:	9e01      	ldr	r6, [sp, #4]
 801df4c:	42b2      	cmp	r2, r6
 801df4e:	db07      	blt.n	801df60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801df50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801df52:	3b01      	subs	r3, #1
 801df54:	3503      	adds	r5, #3
 801df56:	4414      	add	r4, r2
 801df58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801df5a:	4410      	add	r0, r2
 801df5c:	e7ed      	b.n	801df3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801df5e:	d06e      	beq.n	801e03e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801df60:	1e5a      	subs	r2, r3, #1
 801df62:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801df64:	fb06 4602 	mla	r6, r6, r2, r4
 801df68:	1436      	asrs	r6, r6, #16
 801df6a:	d45d      	bmi.n	801e028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801df6c:	4576      	cmp	r6, lr
 801df6e:	da5b      	bge.n	801e028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801df70:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801df72:	fb06 0202 	mla	r2, r6, r2, r0
 801df76:	1412      	asrs	r2, r2, #16
 801df78:	d456      	bmi.n	801e028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801df7a:	9e01      	ldr	r6, [sp, #4]
 801df7c:	42b2      	cmp	r2, r6
 801df7e:	da53      	bge.n	801e028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801df80:	1cee      	adds	r6, r5, #3
 801df82:	469a      	mov	sl, r3
 801df84:	f1ba 0f00 	cmp.w	sl, #0
 801df88:	dd54      	ble.n	801e034 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801df8a:	1427      	asrs	r7, r4, #16
 801df8c:	1402      	asrs	r2, r0, #16
 801df8e:	fb0e 7202 	mla	r2, lr, r2, r7
 801df92:	9f02      	ldr	r7, [sp, #8]
 801df94:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801df98:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801df9c:	d03c      	beq.n	801e018 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801df9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dfa2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801dfa6:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801dfaa:	fa5f f28c 	uxtb.w	r2, ip
 801dfae:	b2ff      	uxtb	r7, r7
 801dfb0:	f000 80d8 	beq.w	801e164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dfb4:	fa1f f882 	uxth.w	r8, r2
 801dfb8:	43d2      	mvns	r2, r2
 801dfba:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801dfbe:	fb17 f708 	smulbb	r7, r7, r8
 801dfc2:	b2d2      	uxtb	r2, r2
 801dfc4:	fb19 f908 	smulbb	r9, r9, r8
 801dfc8:	fb0c 7702 	mla	r7, ip, r2, r7
 801dfcc:	fb1b f808 	smulbb	r8, fp, r8
 801dfd0:	b2bf      	uxth	r7, r7
 801dfd2:	f107 0c01 	add.w	ip, r7, #1
 801dfd6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801dfda:	123f      	asrs	r7, r7, #8
 801dfdc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801dfe0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801dfe4:	fb07 9902 	mla	r9, r7, r2, r9
 801dfe8:	fa1f f989 	uxth.w	r9, r9
 801dfec:	f109 0701 	add.w	r7, r9, #1
 801dff0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801dff4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801dff8:	fb07 8802 	mla	r8, r7, r2, r8
 801dffc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e000:	fa1f f888 	uxth.w	r8, r8
 801e004:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e008:	f108 0201 	add.w	r2, r8, #1
 801e00c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e010:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e014:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e018:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e01a:	3603      	adds	r6, #3
 801e01c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e020:	4414      	add	r4, r2
 801e022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e024:	4410      	add	r0, r2
 801e026:	e7ad      	b.n	801df84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e028:	f04f 0c00 	mov.w	ip, #0
 801e02c:	eba3 020c 	sub.w	r2, r3, ip
 801e030:	2a00      	cmp	r2, #0
 801e032:	dc3d      	bgt.n	801e0b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801e034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e03c:	441d      	add	r5, r3
 801e03e:	2900      	cmp	r1, #0
 801e040:	f340 8097 	ble.w	801e172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e044:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e04a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e04e:	3901      	subs	r1, #1
 801e050:	eeb0 6a62 	vmov.f32	s12, s5
 801e054:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e058:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e05c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e060:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e064:	eeb0 6a43 	vmov.f32	s12, s6
 801e068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e06c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e070:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e074:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e078:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e07c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e080:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e084:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e088:	ee12 2a90 	vmov	r2, s5
 801e08c:	eef0 2a47 	vmov.f32	s5, s14
 801e090:	fb92 f3f3 	sdiv	r3, r2, r3
 801e094:	ee13 2a10 	vmov	r2, s6
 801e098:	9311      	str	r3, [sp, #68]	; 0x44
 801e09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e09c:	eeb0 3a67 	vmov.f32	s6, s15
 801e0a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0a4:	9a03      	ldr	r2, [sp, #12]
 801e0a6:	9312      	str	r3, [sp, #72]	; 0x48
 801e0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0aa:	bf08      	it	eq
 801e0ac:	4613      	moveq	r3, r2
 801e0ae:	e738      	b.n	801df22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e0b0:	1426      	asrs	r6, r4, #16
 801e0b2:	d448      	bmi.n	801e146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e0b4:	4576      	cmp	r6, lr
 801e0b6:	da46      	bge.n	801e146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e0b8:	1402      	asrs	r2, r0, #16
 801e0ba:	d444      	bmi.n	801e146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e0bc:	9f01      	ldr	r7, [sp, #4]
 801e0be:	42ba      	cmp	r2, r7
 801e0c0:	da41      	bge.n	801e146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e0c2:	fb0e 6202 	mla	r2, lr, r2, r6
 801e0c6:	9e02      	ldr	r6, [sp, #8]
 801e0c8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e0cc:	0e3a      	lsrs	r2, r7, #24
 801e0ce:	d03a      	beq.n	801e146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e0d0:	2aff      	cmp	r2, #255	; 0xff
 801e0d2:	b2d6      	uxtb	r6, r2
 801e0d4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e0d8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e0dc:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801e0e0:	b2ff      	uxtb	r7, r7
 801e0e2:	d037      	beq.n	801e154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801e0e4:	fa1f f986 	uxth.w	r9, r6
 801e0e8:	4462      	add	r2, ip
 801e0ea:	43f6      	mvns	r6, r6
 801e0ec:	f815 8002 	ldrb.w	r8, [r5, r2]
 801e0f0:	fb17 f709 	smulbb	r7, r7, r9
 801e0f4:	fb1a fa09 	smulbb	sl, sl, r9
 801e0f8:	b2f6      	uxtb	r6, r6
 801e0fa:	fb1b f909 	smulbb	r9, fp, r9
 801e0fe:	fb08 7706 	mla	r7, r8, r6, r7
 801e102:	b2bf      	uxth	r7, r7
 801e104:	f107 0801 	add.w	r8, r7, #1
 801e108:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e10c:	123f      	asrs	r7, r7, #8
 801e10e:	54af      	strb	r7, [r5, r2]
 801e110:	442a      	add	r2, r5
 801e112:	7857      	ldrb	r7, [r2, #1]
 801e114:	fb07 aa06 	mla	sl, r7, r6, sl
 801e118:	fa1f fa8a 	uxth.w	sl, sl
 801e11c:	f10a 0701 	add.w	r7, sl, #1
 801e120:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e124:	7897      	ldrb	r7, [r2, #2]
 801e126:	fb07 9906 	mla	r9, r7, r6, r9
 801e12a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e12e:	fa1f f989 	uxth.w	r9, r9
 801e132:	f882 a001 	strb.w	sl, [r2, #1]
 801e136:	f109 0601 	add.w	r6, r9, #1
 801e13a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e13e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e142:	f882 9002 	strb.w	r9, [r2, #2]
 801e146:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e148:	f10c 0c01 	add.w	ip, ip, #1
 801e14c:	4414      	add	r4, r2
 801e14e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e150:	4410      	add	r0, r2
 801e152:	e76b      	b.n	801e02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801e154:	4462      	add	r2, ip
 801e156:	54af      	strb	r7, [r5, r2]
 801e158:	442a      	add	r2, r5
 801e15a:	f882 a001 	strb.w	sl, [r2, #1]
 801e15e:	f882 b002 	strb.w	fp, [r2, #2]
 801e162:	e7f0      	b.n	801e146 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e164:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e168:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e16c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801e170:	e752      	b.n	801e018 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e172:	b005      	add	sp, #20
 801e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e178 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e17c:	b087      	sub	sp, #28
 801e17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e182:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e184:	9204      	str	r2, [sp, #16]
 801e186:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801e18a:	6860      	ldr	r0, [r4, #4]
 801e18c:	9205      	str	r2, [sp, #20]
 801e18e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801e192:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801e196:	9101      	str	r1, [sp, #4]
 801e198:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e19c:	fb00 2505 	mla	r5, r0, r5, r2
 801e1a0:	6822      	ldr	r2, [r4, #0]
 801e1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e1a6:	4415      	add	r5, r2
 801e1a8:	f10e 0201 	add.w	r2, lr, #1
 801e1ac:	f022 0201 	bic.w	r2, r2, #1
 801e1b0:	9202      	str	r2, [sp, #8]
 801e1b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e1b4:	6812      	ldr	r2, [r2, #0]
 801e1b6:	9203      	str	r2, [sp, #12]
 801e1b8:	9a01      	ldr	r2, [sp, #4]
 801e1ba:	2a00      	cmp	r2, #0
 801e1bc:	dc03      	bgt.n	801e1c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801e1be:	9a04      	ldr	r2, [sp, #16]
 801e1c0:	2a00      	cmp	r2, #0
 801e1c2:	f340 8132 	ble.w	801e42a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e1c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1c8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e1cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	dd0e      	ble.n	801e1f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e1d6:	1422      	asrs	r2, r4, #16
 801e1d8:	d405      	bmi.n	801e1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e1da:	4596      	cmp	lr, r2
 801e1dc:	dd03      	ble.n	801e1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e1de:	1402      	asrs	r2, r0, #16
 801e1e0:	d401      	bmi.n	801e1e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e1e2:	4542      	cmp	r2, r8
 801e1e4:	db07      	blt.n	801e1f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801e1e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e1e8:	3b01      	subs	r3, #1
 801e1ea:	3503      	adds	r5, #3
 801e1ec:	4414      	add	r4, r2
 801e1ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e1f0:	4410      	add	r0, r2
 801e1f2:	e7ee      	b.n	801e1d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801e1f4:	d010      	beq.n	801e218 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e1f6:	1e5a      	subs	r2, r3, #1
 801e1f8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e1fa:	fb06 4602 	mla	r6, r6, r2, r4
 801e1fe:	1436      	asrs	r6, r6, #16
 801e200:	d546      	bpl.n	801e290 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e202:	4699      	mov	r9, r3
 801e204:	462e      	mov	r6, r5
 801e206:	f1b9 0f00 	cmp.w	r9, #0
 801e20a:	f300 80ac 	bgt.w	801e366 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801e20e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e216:	441d      	add	r5, r3
 801e218:	9b01      	ldr	r3, [sp, #4]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	f340 8105 	ble.w	801e42a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e220:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e226:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e22a:	eeb0 6a62 	vmov.f32	s12, s5
 801e22e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e232:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e236:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e23a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e23e:	eeb0 6a43 	vmov.f32	s12, s6
 801e242:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e246:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e24a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e24e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e252:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e256:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e25a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e25e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e262:	ee12 2a90 	vmov	r2, s5
 801e266:	eef0 2a47 	vmov.f32	s5, s14
 801e26a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e26e:	ee13 2a10 	vmov	r2, s6
 801e272:	9313      	str	r3, [sp, #76]	; 0x4c
 801e274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e276:	eeb0 3a67 	vmov.f32	s6, s15
 801e27a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e27e:	9314      	str	r3, [sp, #80]	; 0x50
 801e280:	9b01      	ldr	r3, [sp, #4]
 801e282:	9a04      	ldr	r2, [sp, #16]
 801e284:	3b01      	subs	r3, #1
 801e286:	9301      	str	r3, [sp, #4]
 801e288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e28a:	bf08      	it	eq
 801e28c:	4613      	moveq	r3, r2
 801e28e:	e793      	b.n	801e1b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e290:	45b6      	cmp	lr, r6
 801e292:	ddb6      	ble.n	801e202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e294:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e296:	fb06 0202 	mla	r2, r6, r2, r0
 801e29a:	1412      	asrs	r2, r2, #16
 801e29c:	d4b1      	bmi.n	801e202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e29e:	4542      	cmp	r2, r8
 801e2a0:	daaf      	bge.n	801e202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e2a2:	1cee      	adds	r6, r5, #3
 801e2a4:	4699      	mov	r9, r3
 801e2a6:	f1b9 0f00 	cmp.w	r9, #0
 801e2aa:	ddb0      	ble.n	801e20e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e2ac:	1422      	asrs	r2, r4, #16
 801e2ae:	9902      	ldr	r1, [sp, #8]
 801e2b0:	1407      	asrs	r7, r0, #16
 801e2b2:	fb01 2707 	mla	r7, r1, r7, r2
 801e2b6:	9903      	ldr	r1, [sp, #12]
 801e2b8:	087a      	lsrs	r2, r7, #1
 801e2ba:	5c8a      	ldrb	r2, [r1, r2]
 801e2bc:	07f9      	lsls	r1, r7, #31
 801e2be:	bf54      	ite	pl
 801e2c0:	f002 020f 	andpl.w	r2, r2, #15
 801e2c4:	1112      	asrmi	r2, r2, #4
 801e2c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e2ca:	b2d2      	uxtb	r2, r2
 801e2cc:	2a00      	cmp	r2, #0
 801e2ce:	d042      	beq.n	801e356 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801e2d0:	4957      	ldr	r1, [pc, #348]	; (801e430 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e2d2:	680f      	ldr	r7, [r1, #0]
 801e2d4:	9905      	ldr	r1, [sp, #20]
 801e2d6:	fa5f fb87 	uxtb.w	fp, r7
 801e2da:	434a      	muls	r2, r1
 801e2dc:	f102 0c01 	add.w	ip, r2, #1
 801e2e0:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e2e4:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e2e8:	1212      	asrs	r2, r2, #8
 801e2ea:	fa1f fa82 	uxth.w	sl, r2
 801e2ee:	43d2      	mvns	r2, r2
 801e2f0:	fb1b fb0a 	smulbb	fp, fp, sl
 801e2f4:	b2d2      	uxtb	r2, r2
 801e2f6:	fb0c bc02 	mla	ip, ip, r2, fp
 801e2fa:	fa1f fc8c 	uxth.w	ip, ip
 801e2fe:	f10c 0b01 	add.w	fp, ip, #1
 801e302:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e306:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e30a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e30e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e312:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e316:	fb17 fa0a 	smulbb	sl, r7, sl
 801e31a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e31e:	f806 cc03 	strb.w	ip, [r6, #-3]
 801e322:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801e326:	fb07 aa02 	mla	sl, r7, r2, sl
 801e32a:	fb0c bc02 	mla	ip, ip, r2, fp
 801e32e:	fa1f fa8a 	uxth.w	sl, sl
 801e332:	fa1f fc8c 	uxth.w	ip, ip
 801e336:	f10a 0701 	add.w	r7, sl, #1
 801e33a:	f10c 0b01 	add.w	fp, ip, #1
 801e33e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e342:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e346:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e34a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e34e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801e352:	f806 cc02 	strb.w	ip, [r6, #-2]
 801e356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e358:	3603      	adds	r6, #3
 801e35a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e35e:	4414      	add	r4, r2
 801e360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e362:	4410      	add	r0, r2
 801e364:	e79f      	b.n	801e2a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801e366:	1422      	asrs	r2, r4, #16
 801e368:	d457      	bmi.n	801e41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e36a:	4596      	cmp	lr, r2
 801e36c:	dd55      	ble.n	801e41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e36e:	1407      	asrs	r7, r0, #16
 801e370:	d453      	bmi.n	801e41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e372:	4547      	cmp	r7, r8
 801e374:	da51      	bge.n	801e41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e376:	9902      	ldr	r1, [sp, #8]
 801e378:	fb07 2701 	mla	r7, r7, r1, r2
 801e37c:	9903      	ldr	r1, [sp, #12]
 801e37e:	087a      	lsrs	r2, r7, #1
 801e380:	07ff      	lsls	r7, r7, #31
 801e382:	5c8a      	ldrb	r2, [r1, r2]
 801e384:	bf54      	ite	pl
 801e386:	f002 020f 	andpl.w	r2, r2, #15
 801e38a:	1112      	asrmi	r2, r2, #4
 801e38c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e390:	b2d2      	uxtb	r2, r2
 801e392:	2a00      	cmp	r2, #0
 801e394:	d041      	beq.n	801e41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e396:	4926      	ldr	r1, [pc, #152]	; (801e430 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e398:	680f      	ldr	r7, [r1, #0]
 801e39a:	9905      	ldr	r1, [sp, #20]
 801e39c:	fa5f fb87 	uxtb.w	fp, r7
 801e3a0:	434a      	muls	r2, r1
 801e3a2:	f102 0c01 	add.w	ip, r2, #1
 801e3a6:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e3aa:	f896 c000 	ldrb.w	ip, [r6]
 801e3ae:	1212      	asrs	r2, r2, #8
 801e3b0:	fa1f fa82 	uxth.w	sl, r2
 801e3b4:	43d2      	mvns	r2, r2
 801e3b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801e3ba:	b2d2      	uxtb	r2, r2
 801e3bc:	fb0c bc02 	mla	ip, ip, r2, fp
 801e3c0:	fa1f fc8c 	uxth.w	ip, ip
 801e3c4:	f10c 0b01 	add.w	fp, ip, #1
 801e3c8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e3cc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e3d0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e3d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801e3d8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e3dc:	fb17 fa0a 	smulbb	sl, r7, sl
 801e3e0:	78b7      	ldrb	r7, [r6, #2]
 801e3e2:	f886 c000 	strb.w	ip, [r6]
 801e3e6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801e3ea:	fb07 aa02 	mla	sl, r7, r2, sl
 801e3ee:	fb0c bc02 	mla	ip, ip, r2, fp
 801e3f2:	fa1f fa8a 	uxth.w	sl, sl
 801e3f6:	fa1f fc8c 	uxth.w	ip, ip
 801e3fa:	f10a 0701 	add.w	r7, sl, #1
 801e3fe:	f10c 0b01 	add.w	fp, ip, #1
 801e402:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e406:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e40a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e40e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e412:	f886 a002 	strb.w	sl, [r6, #2]
 801e416:	f886 c001 	strb.w	ip, [r6, #1]
 801e41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e41c:	3603      	adds	r6, #3
 801e41e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e422:	4414      	add	r4, r2
 801e424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e426:	4410      	add	r0, r2
 801e428:	e6ed      	b.n	801e206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801e42a:	b007      	add	sp, #28
 801e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e430:	2000c664 	.word	0x2000c664

0801e434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e438:	b087      	sub	sp, #28
 801e43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e43e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e440:	9205      	str	r2, [sp, #20]
 801e442:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801e446:	6860      	ldr	r0, [r4, #4]
 801e448:	9202      	str	r2, [sp, #8]
 801e44a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801e44e:	9101      	str	r1, [sp, #4]
 801e450:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801e454:	fb00 2606 	mla	r6, r0, r6, r2
 801e458:	6822      	ldr	r2, [r4, #0]
 801e45a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e45e:	4416      	add	r6, r2
 801e460:	f108 0201 	add.w	r2, r8, #1
 801e464:	f022 0201 	bic.w	r2, r2, #1
 801e468:	9203      	str	r2, [sp, #12]
 801e46a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e46c:	6812      	ldr	r2, [r2, #0]
 801e46e:	9204      	str	r2, [sp, #16]
 801e470:	9a01      	ldr	r2, [sp, #4]
 801e472:	2a00      	cmp	r2, #0
 801e474:	dc03      	bgt.n	801e47e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801e476:	9a05      	ldr	r2, [sp, #20]
 801e478:	2a00      	cmp	r2, #0
 801e47a:	f340 813a 	ble.w	801e6f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801e47e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e480:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801e484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e486:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	dd0f      	ble.n	801e4ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e48e:	142a      	asrs	r2, r5, #16
 801e490:	d406      	bmi.n	801e4a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e492:	4590      	cmp	r8, r2
 801e494:	dd04      	ble.n	801e4a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e496:	1422      	asrs	r2, r4, #16
 801e498:	d402      	bmi.n	801e4a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e49a:	9802      	ldr	r0, [sp, #8]
 801e49c:	4282      	cmp	r2, r0
 801e49e:	db07      	blt.n	801e4b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e4a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e4a2:	3b01      	subs	r3, #1
 801e4a4:	3603      	adds	r6, #3
 801e4a6:	4415      	add	r5, r2
 801e4a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e4aa:	4414      	add	r4, r2
 801e4ac:	e7ed      	b.n	801e48a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801e4ae:	d073      	beq.n	801e598 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801e4b0:	1e5a      	subs	r2, r3, #1
 801e4b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e4b4:	fb00 5002 	mla	r0, r0, r2, r5
 801e4b8:	1400      	asrs	r0, r0, #16
 801e4ba:	d464      	bmi.n	801e586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e4bc:	4580      	cmp	r8, r0
 801e4be:	dd62      	ble.n	801e586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e4c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e4c2:	fb00 4202 	mla	r2, r0, r2, r4
 801e4c6:	1412      	asrs	r2, r2, #16
 801e4c8:	d45d      	bmi.n	801e586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e4ca:	9802      	ldr	r0, [sp, #8]
 801e4cc:	4282      	cmp	r2, r0
 801e4ce:	da5a      	bge.n	801e586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e4d0:	1cf0      	adds	r0, r6, #3
 801e4d2:	469a      	mov	sl, r3
 801e4d4:	f1ba 0f00 	cmp.w	sl, #0
 801e4d8:	dd59      	ble.n	801e58e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e4da:	142a      	asrs	r2, r5, #16
 801e4dc:	9903      	ldr	r1, [sp, #12]
 801e4de:	1427      	asrs	r7, r4, #16
 801e4e0:	fb01 2707 	mla	r7, r1, r7, r2
 801e4e4:	9904      	ldr	r1, [sp, #16]
 801e4e6:	087a      	lsrs	r2, r7, #1
 801e4e8:	5c8a      	ldrb	r2, [r1, r2]
 801e4ea:	07f9      	lsls	r1, r7, #31
 801e4ec:	bf54      	ite	pl
 801e4ee:	f002 020f 	andpl.w	r2, r2, #15
 801e4f2:	1112      	asrmi	r2, r2, #4
 801e4f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e4f8:	b2d2      	uxtb	r2, r2
 801e4fa:	2a00      	cmp	r2, #0
 801e4fc:	d03b      	beq.n	801e576 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e4fe:	497e      	ldr	r1, [pc, #504]	; (801e6f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e500:	2aff      	cmp	r2, #255	; 0xff
 801e502:	680f      	ldr	r7, [r1, #0]
 801e504:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e508:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e50c:	b2ff      	uxtb	r7, r7
 801e50e:	f000 80e9 	beq.w	801e6e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e512:	fa1f fe82 	uxth.w	lr, r2
 801e516:	43d2      	mvns	r2, r2
 801e518:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801e51c:	fb17 f70e 	smulbb	r7, r7, lr
 801e520:	b2d2      	uxtb	r2, r2
 801e522:	fb19 f90e 	smulbb	r9, r9, lr
 801e526:	fb0c 7702 	mla	r7, ip, r2, r7
 801e52a:	fb1b fe0e 	smulbb	lr, fp, lr
 801e52e:	b2bf      	uxth	r7, r7
 801e530:	f107 0c01 	add.w	ip, r7, #1
 801e534:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e538:	123f      	asrs	r7, r7, #8
 801e53a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e53e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801e542:	fb07 9902 	mla	r9, r7, r2, r9
 801e546:	fa1f f989 	uxth.w	r9, r9
 801e54a:	f109 0701 	add.w	r7, r9, #1
 801e54e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e552:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801e556:	fb07 ee02 	mla	lr, r7, r2, lr
 801e55a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e55e:	fa1f fe8e 	uxth.w	lr, lr
 801e562:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e566:	f10e 0201 	add.w	r2, lr, #1
 801e56a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e56e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e572:	f800 ec01 	strb.w	lr, [r0, #-1]
 801e576:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e578:	3003      	adds	r0, #3
 801e57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e57e:	4415      	add	r5, r2
 801e580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e582:	4414      	add	r4, r2
 801e584:	e7a6      	b.n	801e4d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e586:	2700      	movs	r7, #0
 801e588:	1bda      	subs	r2, r3, r7
 801e58a:	2a00      	cmp	r2, #0
 801e58c:	dc40      	bgt.n	801e610 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801e58e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e596:	441e      	add	r6, r3
 801e598:	9b01      	ldr	r3, [sp, #4]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	f340 80a9 	ble.w	801e6f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801e5a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5aa:	eeb0 6a62 	vmov.f32	s12, s5
 801e5ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e5b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5ba:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e5be:	eeb0 6a43 	vmov.f32	s12, s6
 801e5c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5c6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e5ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e5d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5e2:	ee12 2a90 	vmov	r2, s5
 801e5e6:	eef0 2a47 	vmov.f32	s5, s14
 801e5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5ee:	ee13 2a10 	vmov	r2, s6
 801e5f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801e5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5f6:	eeb0 3a67 	vmov.f32	s6, s15
 801e5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5fe:	9314      	str	r3, [sp, #80]	; 0x50
 801e600:	9b01      	ldr	r3, [sp, #4]
 801e602:	9a05      	ldr	r2, [sp, #20]
 801e604:	3b01      	subs	r3, #1
 801e606:	9301      	str	r3, [sp, #4]
 801e608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e60a:	bf08      	it	eq
 801e60c:	4613      	moveq	r3, r2
 801e60e:	e72f      	b.n	801e470 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e610:	142a      	asrs	r2, r5, #16
 801e612:	d458      	bmi.n	801e6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e614:	4590      	cmp	r8, r2
 801e616:	dd56      	ble.n	801e6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e618:	1420      	asrs	r0, r4, #16
 801e61a:	d454      	bmi.n	801e6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e61c:	9902      	ldr	r1, [sp, #8]
 801e61e:	4288      	cmp	r0, r1
 801e620:	da51      	bge.n	801e6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e622:	9903      	ldr	r1, [sp, #12]
 801e624:	fb00 2001 	mla	r0, r0, r1, r2
 801e628:	9904      	ldr	r1, [sp, #16]
 801e62a:	0842      	lsrs	r2, r0, #1
 801e62c:	07c0      	lsls	r0, r0, #31
 801e62e:	5c8a      	ldrb	r2, [r1, r2]
 801e630:	bf54      	ite	pl
 801e632:	f002 020f 	andpl.w	r2, r2, #15
 801e636:	1112      	asrmi	r2, r2, #4
 801e638:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e63c:	b2d2      	uxtb	r2, r2
 801e63e:	2a00      	cmp	r2, #0
 801e640:	d041      	beq.n	801e6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e642:	492d      	ldr	r1, [pc, #180]	; (801e6f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e644:	2aff      	cmp	r2, #255	; 0xff
 801e646:	6808      	ldr	r0, [r1, #0]
 801e648:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801e64c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e650:	fa5f fc80 	uxtb.w	ip, r0
 801e654:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801e658:	d03b      	beq.n	801e6d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801e65a:	fa1f f982 	uxth.w	r9, r2
 801e65e:	4438      	add	r0, r7
 801e660:	43d2      	mvns	r2, r2
 801e662:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e666:	fb1c fc09 	smulbb	ip, ip, r9
 801e66a:	fb1a fa09 	smulbb	sl, sl, r9
 801e66e:	b2d2      	uxtb	r2, r2
 801e670:	fb1b f909 	smulbb	r9, fp, r9
 801e674:	fb0e cc02 	mla	ip, lr, r2, ip
 801e678:	fa1f fc8c 	uxth.w	ip, ip
 801e67c:	f10c 0e01 	add.w	lr, ip, #1
 801e680:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e684:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e688:	f806 c000 	strb.w	ip, [r6, r0]
 801e68c:	4430      	add	r0, r6
 801e68e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801e692:	fb0c aa02 	mla	sl, ip, r2, sl
 801e696:	fa1f fa8a 	uxth.w	sl, sl
 801e69a:	f10a 0c01 	add.w	ip, sl, #1
 801e69e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e6a2:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e6a6:	fb0c 9902 	mla	r9, ip, r2, r9
 801e6aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e6ae:	fa1f f989 	uxth.w	r9, r9
 801e6b2:	f880 a001 	strb.w	sl, [r0, #1]
 801e6b6:	f109 0201 	add.w	r2, r9, #1
 801e6ba:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e6be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e6c2:	f880 9002 	strb.w	r9, [r0, #2]
 801e6c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e6c8:	3701      	adds	r7, #1
 801e6ca:	4415      	add	r5, r2
 801e6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e6ce:	4414      	add	r4, r2
 801e6d0:	e75a      	b.n	801e588 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801e6d2:	4438      	add	r0, r7
 801e6d4:	f806 c000 	strb.w	ip, [r6, r0]
 801e6d8:	4430      	add	r0, r6
 801e6da:	f880 a001 	strb.w	sl, [r0, #1]
 801e6de:	f880 b002 	strb.w	fp, [r0, #2]
 801e6e2:	e7f0      	b.n	801e6c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e6e4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e6e8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e6ec:	f800 bc01 	strb.w	fp, [r0, #-1]
 801e6f0:	e741      	b.n	801e576 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e6f2:	b007      	add	sp, #28
 801e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6f8:	2000c664 	.word	0x2000c664

0801e6fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e6fc:	4770      	bx	lr

0801e6fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e6fe:	4770      	bx	lr

0801e700 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e700:	4770      	bx	lr

0801e702 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e702:	4770      	bx	lr

0801e704 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e704:	4770      	bx	lr

0801e706 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e706:	4770      	bx	lr

0801e708 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e708:	4770      	bx	lr

0801e70a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e70a:	4770      	bx	lr

0801e70c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e70c:	4770      	bx	lr

0801e70e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e70e:	4770      	bx	lr

0801e710 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e710:	4770      	bx	lr

0801e712 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e712:	4770      	bx	lr

0801e714 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e714:	4770      	bx	lr

0801e716 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e716:	4770      	bx	lr

0801e718 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e718:	4770      	bx	lr

0801e71a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e71a:	4770      	bx	lr

0801e71c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e71c:	4770      	bx	lr

0801e71e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e71e:	4770      	bx	lr

0801e720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e720:	4770      	bx	lr

0801e722 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e722:	4770      	bx	lr

0801e724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e724:	2bff      	cmp	r3, #255	; 0xff
 801e726:	b508      	push	{r3, lr}
 801e728:	d04f      	beq.n	801e7ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e72a:	2a2c      	cmp	r2, #44	; 0x2c
 801e72c:	d032      	beq.n	801e794 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801e72e:	d80f      	bhi.n	801e750 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801e730:	2a08      	cmp	r2, #8
 801e732:	d046      	beq.n	801e7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e734:	d805      	bhi.n	801e742 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801e736:	2a04      	cmp	r2, #4
 801e738:	d041      	beq.n	801e7be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e73a:	2a05      	cmp	r2, #5
 801e73c:	d03d      	beq.n	801e7ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e73e:	2000      	movs	r0, #0
 801e740:	e027      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e742:	2a0a      	cmp	r2, #10
 801e744:	d03d      	beq.n	801e7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e746:	d301      	bcc.n	801e74c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e748:	2a0b      	cmp	r2, #11
 801e74a:	d1f8      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e74c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e74e:	e020      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e750:	2a30      	cmp	r2, #48	; 0x30
 801e752:	d038      	beq.n	801e7c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e754:	d808      	bhi.n	801e768 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801e756:	2a2e      	cmp	r2, #46	; 0x2e
 801e758:	684b      	ldr	r3, [r1, #4]
 801e75a:	d029      	beq.n	801e7b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e75c:	d90b      	bls.n	801e776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e75e:	781b      	ldrb	r3, [r3, #0]
 801e760:	2b00      	cmp	r3, #0
 801e762:	d1ec      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e764:	6a00      	ldr	r0, [r0, #32]
 801e766:	e014      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e768:	2a32      	cmp	r2, #50	; 0x32
 801e76a:	d02c      	beq.n	801e7c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e76c:	d301      	bcc.n	801e772 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801e76e:	2a33      	cmp	r2, #51	; 0x33
 801e770:	d1e5      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e772:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e774:	e00d      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e776:	781b      	ldrb	r3, [r3, #0]
 801e778:	2b01      	cmp	r3, #1
 801e77a:	d009      	beq.n	801e790 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e77c:	d3f2      	bcc.n	801e764 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801e77e:	2b02      	cmp	r3, #2
 801e780:	d1dd      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e782:	4b39      	ldr	r3, [pc, #228]	; (801e868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e784:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801e788:	4a38      	ldr	r2, [pc, #224]	; (801e86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e78a:	4839      	ldr	r0, [pc, #228]	; (801e870 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801e78c:	f007 ff3e 	bl	802660c <__assert_func>
 801e790:	6900      	ldr	r0, [r0, #16]
 801e792:	bd08      	pop	{r3, pc}
 801e794:	684b      	ldr	r3, [r1, #4]
 801e796:	781b      	ldrb	r3, [r3, #0]
 801e798:	2b01      	cmp	r3, #1
 801e79a:	d007      	beq.n	801e7ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e79c:	d30b      	bcc.n	801e7b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e79e:	2b02      	cmp	r3, #2
 801e7a0:	d1cd      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e7a2:	4b31      	ldr	r3, [pc, #196]	; (801e868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e7a4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801e7a8:	4a30      	ldr	r2, [pc, #192]	; (801e86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e7aa:	e7ee      	b.n	801e78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e7ac:	6880      	ldr	r0, [r0, #8]
 801e7ae:	e7f0      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7b0:	781b      	ldrb	r3, [r3, #0]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d1c3      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e7b6:	6980      	ldr	r0, [r0, #24]
 801e7b8:	e7eb      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e7bc:	e7e9      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7be:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e7c0:	e7e7      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e7c4:	e7e5      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7c6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e7c8:	e7e3      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7ca:	2a2c      	cmp	r2, #44	; 0x2c
 801e7cc:	d030      	beq.n	801e830 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801e7ce:	d80f      	bhi.n	801e7f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801e7d0:	2a08      	cmp	r2, #8
 801e7d2:	d044      	beq.n	801e85e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e7d4:	d805      	bhi.n	801e7e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e7d6:	2a04      	cmp	r2, #4
 801e7d8:	d03f      	beq.n	801e85a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e7da:	2a05      	cmp	r2, #5
 801e7dc:	d1af      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e7de:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e7e0:	e7d7      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7e2:	2a0a      	cmp	r2, #10
 801e7e4:	d03b      	beq.n	801e85e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e7e6:	d301      	bcc.n	801e7ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e7e8:	2a0b      	cmp	r2, #11
 801e7ea:	d1a8      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e7ec:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e7ee:	e7d0      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7f0:	2a30      	cmp	r2, #48	; 0x30
 801e7f2:	d036      	beq.n	801e862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e7f4:	d808      	bhi.n	801e808 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801e7f6:	2a2e      	cmp	r2, #46	; 0x2e
 801e7f8:	684b      	ldr	r3, [r1, #4]
 801e7fa:	d028      	beq.n	801e84e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e7fc:	d90b      	bls.n	801e816 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801e7fe:	781b      	ldrb	r3, [r3, #0]
 801e800:	2b00      	cmp	r3, #0
 801e802:	d19c      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e804:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e806:	e7c4      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e808:	2a32      	cmp	r2, #50	; 0x32
 801e80a:	d02a      	beq.n	801e862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e80c:	d301      	bcc.n	801e812 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e80e:	2a33      	cmp	r2, #51	; 0x33
 801e810:	d195      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e812:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e814:	e7bd      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e816:	781b      	ldrb	r3, [r3, #0]
 801e818:	2b01      	cmp	r3, #1
 801e81a:	d007      	beq.n	801e82c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801e81c:	d3f2      	bcc.n	801e804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e81e:	2b02      	cmp	r3, #2
 801e820:	d18d      	bne.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e822:	4b11      	ldr	r3, [pc, #68]	; (801e868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e824:	f240 31e1 	movw	r1, #993	; 0x3e1
 801e828:	4a10      	ldr	r2, [pc, #64]	; (801e86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e82a:	e7ae      	b.n	801e78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e82c:	6940      	ldr	r0, [r0, #20]
 801e82e:	e7b0      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e830:	684b      	ldr	r3, [r1, #4]
 801e832:	781b      	ldrb	r3, [r3, #0]
 801e834:	2b01      	cmp	r3, #1
 801e836:	d008      	beq.n	801e84a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e838:	d30d      	bcc.n	801e856 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e83a:	2b02      	cmp	r3, #2
 801e83c:	f47f af7f 	bne.w	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e840:	4b09      	ldr	r3, [pc, #36]	; (801e868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e842:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801e846:	4a09      	ldr	r2, [pc, #36]	; (801e86c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e848:	e79f      	b.n	801e78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e84a:	68c0      	ldr	r0, [r0, #12]
 801e84c:	e7a1      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e84e:	781b      	ldrb	r3, [r3, #0]
 801e850:	2b00      	cmp	r3, #0
 801e852:	f47f af74 	bne.w	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e856:	69c0      	ldr	r0, [r0, #28]
 801e858:	e79b      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e85a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e85c:	e799      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e85e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e860:	e797      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e862:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e864:	e795      	b.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e866:	bf00      	nop
 801e868:	0802aec3 	.word	0x0802aec3
 801e86c:	0802b677 	.word	0x0802b677
 801e870:	0802af0f 	.word	0x0802af0f

0801e874 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e874:	b508      	push	{r3, lr}
 801e876:	4b06      	ldr	r3, [pc, #24]	; (801e890 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801e878:	8818      	ldrh	r0, [r3, #0]
 801e87a:	b928      	cbnz	r0, 801e888 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801e87c:	4b05      	ldr	r3, [pc, #20]	; (801e894 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801e87e:	21d7      	movs	r1, #215	; 0xd7
 801e880:	4a05      	ldr	r2, [pc, #20]	; (801e898 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801e882:	4806      	ldr	r0, [pc, #24]	; (801e89c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801e884:	f007 fec2 	bl	802660c <__assert_func>
 801e888:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e88c:	b280      	uxth	r0, r0
 801e88e:	bd08      	pop	{r3, pc}
 801e890:	2000c636 	.word	0x2000c636
 801e894:	0802b15e 	.word	0x0802b15e
 801e898:	0802b63c 	.word	0x0802b63c
 801e89c:	0802b1a0 	.word	0x0802b1a0

0801e8a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a4:	4616      	mov	r6, r2
 801e8a6:	b087      	sub	sp, #28
 801e8a8:	461f      	mov	r7, r3
 801e8aa:	b33b      	cbz	r3, 801e8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e8ac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e8b0:	b323      	cbz	r3, 801e8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e8b2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e8b6:	b30b      	cbz	r3, 801e8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e8b8:	6808      	ldr	r0, [r1, #0]
 801e8ba:	ab04      	add	r3, sp, #16
 801e8bc:	6849      	ldr	r1, [r1, #4]
 801e8be:	4c5a      	ldr	r4, [pc, #360]	; (801ea28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801e8c0:	c303      	stmia	r3!, {r0, r1}
 801e8c2:	a804      	add	r0, sp, #16
 801e8c4:	f7fb fd6e 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8c8:	6820      	ldr	r0, [r4, #0]
 801e8ca:	6803      	ldr	r3, [r0, #0]
 801e8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8ce:	4798      	blx	r3
 801e8d0:	2fff      	cmp	r7, #255	; 0xff
 801e8d2:	4623      	mov	r3, r4
 801e8d4:	d015      	beq.n	801e902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e8d6:	f010 0f08 	tst.w	r0, #8
 801e8da:	d015      	beq.n	801e908 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801e8dc:	6818      	ldr	r0, [r3, #0]
 801e8de:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e8e2:	6801      	ldr	r1, [r0, #0]
 801e8e4:	9401      	str	r4, [sp, #4]
 801e8e6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e8ea:	9702      	str	r7, [sp, #8]
 801e8ec:	9400      	str	r4, [sp, #0]
 801e8ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e8f2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801e8f4:	4631      	mov	r1, r6
 801e8f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e8fa:	47a0      	blx	r4
 801e8fc:	b007      	add	sp, #28
 801e8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e902:	f010 0f02 	tst.w	r0, #2
 801e906:	e7e8      	b.n	801e8da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801e908:	6818      	ldr	r0, [r3, #0]
 801e90a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801e90e:	6803      	ldr	r3, [r0, #0]
 801e910:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801e914:	6a1b      	ldr	r3, [r3, #32]
 801e916:	4798      	blx	r3
 801e918:	4944      	ldr	r1, [pc, #272]	; (801ea2c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801e91a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e91e:	2fff      	cmp	r7, #255	; 0xff
 801e920:	f8b1 c000 	ldrh.w	ip, [r1]
 801e924:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801e928:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e92c:	4688      	mov	r8, r1
 801e92e:	fb0c 2303 	mla	r3, ip, r3, r2
 801e932:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801e936:	b2f2      	uxtb	r2, r6
 801e938:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801e93c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e940:	4418      	add	r0, r3
 801e942:	d112      	bne.n	801e96a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801e944:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e948:	2100      	movs	r1, #0
 801e94a:	42a9      	cmp	r1, r5
 801e94c:	da66      	bge.n	801ea1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801e94e:	4603      	mov	r3, r0
 801e950:	2700      	movs	r7, #0
 801e952:	42a7      	cmp	r7, r4
 801e954:	f103 0303 	add.w	r3, r3, #3
 801e958:	da57      	bge.n	801ea0a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801e95a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e95e:	3701      	adds	r7, #1
 801e960:	f803 ec02 	strb.w	lr, [r3, #-2]
 801e964:	f803 cc01 	strb.w	ip, [r3, #-1]
 801e968:	e7f3      	b.n	801e952 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801e96a:	b2bb      	uxth	r3, r7
 801e96c:	f04f 0800 	mov.w	r8, #0
 801e970:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e974:	fb0c fc03 	mul.w	ip, ip, r3
 801e978:	fb0e fe03 	mul.w	lr, lr, r3
 801e97c:	435a      	muls	r2, r3
 801e97e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801e982:	460f      	mov	r7, r1
 801e984:	b29b      	uxth	r3, r3
 801e986:	45a8      	cmp	r8, r5
 801e988:	da48      	bge.n	801ea1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801e98a:	4601      	mov	r1, r0
 801e98c:	f04f 0a00 	mov.w	sl, #0
 801e990:	45a2      	cmp	sl, r4
 801e992:	f101 0103 	add.w	r1, r1, #3
 801e996:	da2f      	bge.n	801e9f8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801e998:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801e99c:	f10a 0a01 	add.w	sl, sl, #1
 801e9a0:	fb19 f903 	smulbb	r9, r9, r3
 801e9a4:	4491      	add	r9, r2
 801e9a6:	fa1f f989 	uxth.w	r9, r9
 801e9aa:	f109 0b01 	add.w	fp, r9, #1
 801e9ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e9b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9b6:	f801 9c03 	strb.w	r9, [r1, #-3]
 801e9ba:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801e9be:	fb19 f903 	smulbb	r9, r9, r3
 801e9c2:	44f1      	add	r9, lr
 801e9c4:	fa1f f989 	uxth.w	r9, r9
 801e9c8:	f109 0b01 	add.w	fp, r9, #1
 801e9cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e9d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9d4:	f801 9c02 	strb.w	r9, [r1, #-2]
 801e9d8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801e9dc:	fb19 f903 	smulbb	r9, r9, r3
 801e9e0:	44e1      	add	r9, ip
 801e9e2:	fa1f f989 	uxth.w	r9, r9
 801e9e6:	f109 0b01 	add.w	fp, r9, #1
 801e9ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e9ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9f2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801e9f6:	e7cb      	b.n	801e990 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801e9f8:	8839      	ldrh	r1, [r7, #0]
 801e9fa:	f108 0801 	add.w	r8, r8, #1
 801e9fe:	1b09      	subs	r1, r1, r4
 801ea00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ea04:	4431      	add	r1, r6
 801ea06:	4408      	add	r0, r1
 801ea08:	e7bd      	b.n	801e986 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801ea0a:	f8b8 3000 	ldrh.w	r3, [r8]
 801ea0e:	3101      	adds	r1, #1
 801ea10:	1b1b      	subs	r3, r3, r4
 801ea12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea16:	4433      	add	r3, r6
 801ea18:	4418      	add	r0, r3
 801ea1a:	e796      	b.n	801e94a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801ea1c:	4b02      	ldr	r3, [pc, #8]	; (801ea28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801ea1e:	6818      	ldr	r0, [r3, #0]
 801ea20:	6803      	ldr	r3, [r0, #0]
 801ea22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea24:	4798      	blx	r3
 801ea26:	e769      	b.n	801e8fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ea28:	2000c63c 	.word	0x2000c63c
 801ea2c:	2000c636 	.word	0x2000c636

0801ea30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea34:	b08d      	sub	sp, #52	; 0x34
 801ea36:	460c      	mov	r4, r1
 801ea38:	4617      	mov	r7, r2
 801ea3a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801ea3e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ea42:	2e00      	cmp	r6, #0
 801ea44:	d04a      	beq.n	801eadc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ea46:	6810      	ldr	r0, [r2, #0]
 801ea48:	ad08      	add	r5, sp, #32
 801ea4a:	6851      	ldr	r1, [r2, #4]
 801ea4c:	c503      	stmia	r5!, {r0, r1}
 801ea4e:	6818      	ldr	r0, [r3, #0]
 801ea50:	ad0a      	add	r5, sp, #40	; 0x28
 801ea52:	6859      	ldr	r1, [r3, #4]
 801ea54:	c503      	stmia	r5!, {r0, r1}
 801ea56:	a808      	add	r0, sp, #32
 801ea58:	f7fb fca4 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea5c:	4639      	mov	r1, r7
 801ea5e:	a80a      	add	r0, sp, #40	; 0x28
 801ea60:	4f59      	ldr	r7, [pc, #356]	; (801ebc8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801ea62:	f7fb fc87 	bl	801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ea66:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ea6a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ea6e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ea72:	6838      	ldr	r0, [r7, #0]
 801ea74:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ea78:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ea7c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ea80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ea84:	440c      	add	r4, r1
 801ea86:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ea8a:	440a      	add	r2, r1
 801ea8c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ea90:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ea94:	4413      	add	r3, r2
 801ea96:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ea9a:	6803      	ldr	r3, [r0, #0]
 801ea9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ea9e:	4798      	blx	r3
 801eaa0:	2eff      	cmp	r6, #255	; 0xff
 801eaa2:	f000 8089 	beq.w	801ebb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801eaa6:	0743      	lsls	r3, r0, #29
 801eaa8:	d405      	bmi.n	801eab6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801eaaa:	f1b9 0f00 	cmp.w	r9, #0
 801eaae:	d018      	beq.n	801eae2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801eab0:	f010 0f10 	tst.w	r0, #16
 801eab4:	d015      	beq.n	801eae2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801eab6:	6838      	ldr	r0, [r7, #0]
 801eab8:	b2ad      	uxth	r5, r5
 801eaba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801eabe:	6801      	ldr	r1, [r0, #0]
 801eac0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801eac4:	9500      	str	r5, [sp, #0]
 801eac6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801eaca:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801eace:	9602      	str	r6, [sp, #8]
 801ead0:	fa1f f688 	uxth.w	r6, r8
 801ead4:	9601      	str	r6, [sp, #4]
 801ead6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801ead8:	4621      	mov	r1, r4
 801eada:	47a8      	blx	r5
 801eadc:	b00d      	add	sp, #52	; 0x34
 801eade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eae2:	6838      	ldr	r0, [r7, #0]
 801eae4:	6803      	ldr	r3, [r0, #0]
 801eae6:	6a1b      	ldr	r3, [r3, #32]
 801eae8:	4798      	blx	r3
 801eaea:	4a38      	ldr	r2, [pc, #224]	; (801ebcc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801eaec:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801eaf0:	2eff      	cmp	r6, #255	; 0xff
 801eaf2:	8813      	ldrh	r3, [r2, #0]
 801eaf4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801eaf8:	fb0c 1303 	mla	r3, ip, r3, r1
 801eafc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801eb00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb04:	4418      	add	r0, r3
 801eb06:	d032      	beq.n	801eb6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801eb08:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801eb0c:	f04f 0c00 	mov.w	ip, #0
 801eb10:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801eb14:	9306      	str	r3, [sp, #24]
 801eb16:	45c4      	cmp	ip, r8
 801eb18:	da49      	bge.n	801ebae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801eb1a:	4686      	mov	lr, r0
 801eb1c:	46a1      	mov	r9, r4
 801eb1e:	eba9 0304 	sub.w	r3, r9, r4
 801eb22:	428b      	cmp	r3, r1
 801eb24:	da13      	bge.n	801eb4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801eb26:	f819 3b01 	ldrb.w	r3, [r9], #1
 801eb2a:	f89e b000 	ldrb.w	fp, [lr]
 801eb2e:	9307      	str	r3, [sp, #28]
 801eb30:	9b06      	ldr	r3, [sp, #24]
 801eb32:	fb1b fb03 	smulbb	fp, fp, r3
 801eb36:	9b07      	ldr	r3, [sp, #28]
 801eb38:	fb03 b306 	mla	r3, r3, r6, fp
 801eb3c:	b29b      	uxth	r3, r3
 801eb3e:	f103 0b01 	add.w	fp, r3, #1
 801eb42:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801eb46:	121b      	asrs	r3, r3, #8
 801eb48:	f80e 3b01 	strb.w	r3, [lr], #1
 801eb4c:	e7e7      	b.n	801eb1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801eb4e:	8813      	ldrh	r3, [r2, #0]
 801eb50:	f10c 0c01 	add.w	ip, ip, #1
 801eb54:	1b5b      	subs	r3, r3, r5
 801eb56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb5a:	4453      	add	r3, sl
 801eb5c:	4418      	add	r0, r3
 801eb5e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801eb62:	1b5b      	subs	r3, r3, r5
 801eb64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb68:	4453      	add	r3, sl
 801eb6a:	441c      	add	r4, r3
 801eb6c:	e7d3      	b.n	801eb16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801eb6e:	2600      	movs	r6, #0
 801eb70:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801eb74:	4546      	cmp	r6, r8
 801eb76:	da1a      	bge.n	801ebae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801eb78:	f100 3eff 	add.w	lr, r0, #4294967295
 801eb7c:	4623      	mov	r3, r4
 801eb7e:	eba3 0904 	sub.w	r9, r3, r4
 801eb82:	4589      	cmp	r9, r1
 801eb84:	da04      	bge.n	801eb90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801eb86:	f813 9b01 	ldrb.w	r9, [r3], #1
 801eb8a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801eb8e:	e7f6      	b.n	801eb7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801eb90:	8813      	ldrh	r3, [r2, #0]
 801eb92:	3601      	adds	r6, #1
 801eb94:	1b5b      	subs	r3, r3, r5
 801eb96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb9a:	4463      	add	r3, ip
 801eb9c:	4418      	add	r0, r3
 801eb9e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801eba2:	1b5b      	subs	r3, r3, r5
 801eba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eba8:	4463      	add	r3, ip
 801ebaa:	441c      	add	r4, r3
 801ebac:	e7e2      	b.n	801eb74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801ebae:	6838      	ldr	r0, [r7, #0]
 801ebb0:	6803      	ldr	r3, [r0, #0]
 801ebb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebb4:	4798      	blx	r3
 801ebb6:	e791      	b.n	801eadc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ebb8:	f1b9 0f00 	cmp.w	r9, #0
 801ebbc:	f47f af78 	bne.w	801eab0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801ebc0:	f010 0f01 	tst.w	r0, #1
 801ebc4:	e776      	b.n	801eab4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801ebc6:	bf00      	nop
 801ebc8:	2000c63c 	.word	0x2000c63c
 801ebcc:	2000c636 	.word	0x2000c636

0801ebd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ebd0:	b510      	push	{r4, lr}
 801ebd2:	4604      	mov	r4, r0
 801ebd4:	2104      	movs	r1, #4
 801ebd6:	f007 fceb 	bl	80265b0 <_ZdlPvj>
 801ebda:	4620      	mov	r0, r4
 801ebdc:	bd10      	pop	{r4, pc}

0801ebde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ebde:	b510      	push	{r4, lr}
 801ebe0:	4604      	mov	r4, r0
 801ebe2:	2104      	movs	r1, #4
 801ebe4:	f007 fce4 	bl	80265b0 <_ZdlPvj>
 801ebe8:	4620      	mov	r0, r4
 801ebea:	bd10      	pop	{r4, pc}

0801ebec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ebec:	b510      	push	{r4, lr}
 801ebee:	4604      	mov	r4, r0
 801ebf0:	2104      	movs	r1, #4
 801ebf2:	f007 fcdd 	bl	80265b0 <_ZdlPvj>
 801ebf6:	4620      	mov	r0, r4
 801ebf8:	bd10      	pop	{r4, pc}

0801ebfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ebfa:	b510      	push	{r4, lr}
 801ebfc:	4604      	mov	r4, r0
 801ebfe:	2104      	movs	r1, #4
 801ec00:	f007 fcd6 	bl	80265b0 <_ZdlPvj>
 801ec04:	4620      	mov	r0, r4
 801ec06:	bd10      	pop	{r4, pc}

0801ec08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ec08:	b510      	push	{r4, lr}
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	2104      	movs	r1, #4
 801ec0e:	f007 fccf 	bl	80265b0 <_ZdlPvj>
 801ec12:	4620      	mov	r0, r4
 801ec14:	bd10      	pop	{r4, pc}

0801ec16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ec16:	b510      	push	{r4, lr}
 801ec18:	4604      	mov	r4, r0
 801ec1a:	2104      	movs	r1, #4
 801ec1c:	f007 fcc8 	bl	80265b0 <_ZdlPvj>
 801ec20:	4620      	mov	r0, r4
 801ec22:	bd10      	pop	{r4, pc}

0801ec24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ec24:	b510      	push	{r4, lr}
 801ec26:	4604      	mov	r4, r0
 801ec28:	2104      	movs	r1, #4
 801ec2a:	f007 fcc1 	bl	80265b0 <_ZdlPvj>
 801ec2e:	4620      	mov	r0, r4
 801ec30:	bd10      	pop	{r4, pc}

0801ec32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ec32:	b510      	push	{r4, lr}
 801ec34:	4604      	mov	r4, r0
 801ec36:	2104      	movs	r1, #4
 801ec38:	f007 fcba 	bl	80265b0 <_ZdlPvj>
 801ec3c:	4620      	mov	r0, r4
 801ec3e:	bd10      	pop	{r4, pc}

0801ec40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ec40:	b510      	push	{r4, lr}
 801ec42:	4604      	mov	r4, r0
 801ec44:	2104      	movs	r1, #4
 801ec46:	f007 fcb3 	bl	80265b0 <_ZdlPvj>
 801ec4a:	4620      	mov	r0, r4
 801ec4c:	bd10      	pop	{r4, pc}

0801ec4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ec4e:	b510      	push	{r4, lr}
 801ec50:	4604      	mov	r4, r0
 801ec52:	2104      	movs	r1, #4
 801ec54:	f007 fcac 	bl	80265b0 <_ZdlPvj>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	bd10      	pop	{r4, pc}

0801ec5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ec5c:	b510      	push	{r4, lr}
 801ec5e:	4604      	mov	r4, r0
 801ec60:	2104      	movs	r1, #4
 801ec62:	f007 fca5 	bl	80265b0 <_ZdlPvj>
 801ec66:	4620      	mov	r0, r4
 801ec68:	bd10      	pop	{r4, pc}

0801ec6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ec6a:	b510      	push	{r4, lr}
 801ec6c:	4604      	mov	r4, r0
 801ec6e:	2104      	movs	r1, #4
 801ec70:	f007 fc9e 	bl	80265b0 <_ZdlPvj>
 801ec74:	4620      	mov	r0, r4
 801ec76:	bd10      	pop	{r4, pc}

0801ec78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ec78:	b510      	push	{r4, lr}
 801ec7a:	4604      	mov	r4, r0
 801ec7c:	2104      	movs	r1, #4
 801ec7e:	f007 fc97 	bl	80265b0 <_ZdlPvj>
 801ec82:	4620      	mov	r0, r4
 801ec84:	bd10      	pop	{r4, pc}

0801ec86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ec86:	b510      	push	{r4, lr}
 801ec88:	4604      	mov	r4, r0
 801ec8a:	2104      	movs	r1, #4
 801ec8c:	f007 fc90 	bl	80265b0 <_ZdlPvj>
 801ec90:	4620      	mov	r0, r4
 801ec92:	bd10      	pop	{r4, pc}

0801ec94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ec94:	b510      	push	{r4, lr}
 801ec96:	4604      	mov	r4, r0
 801ec98:	2104      	movs	r1, #4
 801ec9a:	f007 fc89 	bl	80265b0 <_ZdlPvj>
 801ec9e:	4620      	mov	r0, r4
 801eca0:	bd10      	pop	{r4, pc}

0801eca2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801eca2:	b510      	push	{r4, lr}
 801eca4:	4604      	mov	r4, r0
 801eca6:	2104      	movs	r1, #4
 801eca8:	f007 fc82 	bl	80265b0 <_ZdlPvj>
 801ecac:	4620      	mov	r0, r4
 801ecae:	bd10      	pop	{r4, pc}

0801ecb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ecb0:	b510      	push	{r4, lr}
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	2104      	movs	r1, #4
 801ecb6:	f007 fc7b 	bl	80265b0 <_ZdlPvj>
 801ecba:	4620      	mov	r0, r4
 801ecbc:	bd10      	pop	{r4, pc}

0801ecbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ecbe:	b510      	push	{r4, lr}
 801ecc0:	4604      	mov	r4, r0
 801ecc2:	2104      	movs	r1, #4
 801ecc4:	f007 fc74 	bl	80265b0 <_ZdlPvj>
 801ecc8:	4620      	mov	r0, r4
 801ecca:	bd10      	pop	{r4, pc}

0801eccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801eccc:	b510      	push	{r4, lr}
 801ecce:	4604      	mov	r4, r0
 801ecd0:	2104      	movs	r1, #4
 801ecd2:	f007 fc6d 	bl	80265b0 <_ZdlPvj>
 801ecd6:	4620      	mov	r0, r4
 801ecd8:	bd10      	pop	{r4, pc}

0801ecda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ecda:	b510      	push	{r4, lr}
 801ecdc:	4604      	mov	r4, r0
 801ecde:	2104      	movs	r1, #4
 801ece0:	f007 fc66 	bl	80265b0 <_ZdlPvj>
 801ece4:	4620      	mov	r0, r4
 801ece6:	bd10      	pop	{r4, pc}

0801ece8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecec:	4d9e      	ldr	r5, [pc, #632]	; (801ef68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801ecee:	4690      	mov	r8, r2
 801ecf0:	b08f      	sub	sp, #60	; 0x3c
 801ecf2:	4604      	mov	r4, r0
 801ecf4:	682a      	ldr	r2, [r5, #0]
 801ecf6:	4689      	mov	r9, r1
 801ecf8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801ecfc:	2a02      	cmp	r2, #2
 801ecfe:	d106      	bne.n	801ed0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801ed00:	4b9a      	ldr	r3, [pc, #616]	; (801ef6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801ed02:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801ed06:	4a9a      	ldr	r2, [pc, #616]	; (801ef70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ed08:	489a      	ldr	r0, [pc, #616]	; (801ef74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801ed0a:	f007 fc7f 	bl	802660c <__assert_func>
 801ed0e:	ae0e      	add	r6, sp, #56	; 0x38
 801ed10:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801ed14:	4630      	mov	r0, r6
 801ed16:	f7fe f8b3 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ed1a:	6823      	ldr	r3, [r4, #0]
 801ed1c:	4607      	mov	r7, r0
 801ed1e:	4620      	mov	r0, r4
 801ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed22:	4798      	blx	r3
 801ed24:	4287      	cmp	r7, r0
 801ed26:	d004      	beq.n	801ed32 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801ed28:	4b93      	ldr	r3, [pc, #588]	; (801ef78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801ed2a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801ed2e:	4a90      	ldr	r2, [pc, #576]	; (801ef70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ed30:	e7ea      	b.n	801ed08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ed32:	4630      	mov	r0, r6
 801ed34:	f7fe f820 	bl	801cd78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ed38:	4607      	mov	r7, r0
 801ed3a:	b920      	cbnz	r0, 801ed46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801ed3c:	4b8f      	ldr	r3, [pc, #572]	; (801ef7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801ed3e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801ed42:	4a8b      	ldr	r2, [pc, #556]	; (801ef70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ed44:	e7e0      	b.n	801ed08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ed46:	f8d8 0000 	ldr.w	r0, [r8]
 801ed4a:	ab06      	add	r3, sp, #24
 801ed4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ed50:	f9b8 a000 	ldrsh.w	sl, [r8]
 801ed54:	c303      	stmia	r3!, {r0, r1}
 801ed56:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ed5a:	ab08      	add	r3, sp, #32
 801ed5c:	f8d9 0000 	ldr.w	r0, [r9]
 801ed60:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801ed64:	c303      	stmia	r3!, {r0, r1}
 801ed66:	4630      	mov	r0, r6
 801ed68:	f7fd fefe 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ed6c:	4680      	mov	r8, r0
 801ed6e:	4630      	mov	r0, r6
 801ed70:	4e83      	ldr	r6, [pc, #524]	; (801ef80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801ed72:	f7fd ff33 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ed76:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801ed7a:	f10d 0920 	add.w	r9, sp, #32
 801ed7e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801ed82:	a806      	add	r0, sp, #24
 801ed84:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ed88:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801ed8c:	f7fb fb0a 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed90:	4648      	mov	r0, r9
 801ed92:	f7fb fb07 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed96:	a80a      	add	r0, sp, #40	; 0x28
 801ed98:	f7fb fb04 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed9c:	4b79      	ldr	r3, [pc, #484]	; (801ef84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801ed9e:	2100      	movs	r1, #0
 801eda0:	f9b6 2000 	ldrsh.w	r2, [r6]
 801eda4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eda8:	4648      	mov	r0, r9
 801edaa:	910c      	str	r1, [sp, #48]	; 0x30
 801edac:	a90c      	add	r1, sp, #48	; 0x30
 801edae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801edb2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801edb6:	f7f8 fac9 	bl	801734c <_ZN8touchgfx4RectaNERKS0_>
 801edba:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801edbe:	9602      	str	r6, [sp, #8]
 801edc0:	f1bc 0f00 	cmp.w	ip, #0
 801edc4:	f000 80a4 	beq.w	801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801edc8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801edcc:	2e00      	cmp	r6, #0
 801edce:	f000 809f 	beq.w	801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801edd2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801edd6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801edda:	4288      	cmp	r0, r1
 801eddc:	db36      	blt.n	801ee4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801edde:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801ede2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ede6:	429a      	cmp	r2, r3
 801ede8:	db30      	blt.n	801ee4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801edea:	4460      	add	r0, ip
 801edec:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801edf0:	4461      	add	r1, ip
 801edf2:	b200      	sxth	r0, r0
 801edf4:	b209      	sxth	r1, r1
 801edf6:	4288      	cmp	r0, r1
 801edf8:	dc28      	bgt.n	801ee4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801edfa:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801edfe:	4432      	add	r2, r6
 801ee00:	440b      	add	r3, r1
 801ee02:	b212      	sxth	r2, r2
 801ee04:	b21b      	sxth	r3, r3
 801ee06:	429a      	cmp	r2, r3
 801ee08:	dc20      	bgt.n	801ee4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ee0a:	6823      	ldr	r3, [r4, #0]
 801ee0c:	4620      	mov	r0, r4
 801ee0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee10:	4798      	blx	r3
 801ee12:	4682      	mov	sl, r0
 801ee14:	6828      	ldr	r0, [r5, #0]
 801ee16:	6803      	ldr	r3, [r0, #0]
 801ee18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee1a:	4798      	blx	r3
 801ee1c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ee20:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ee24:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ee28:	9303      	str	r3, [sp, #12]
 801ee2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ee2e:	1a9b      	subs	r3, r3, r2
 801ee30:	b29b      	uxth	r3, r3
 801ee32:	b21c      	sxth	r4, r3
 801ee34:	2c00      	cmp	r4, #0
 801ee36:	dc0e      	bgt.n	801ee56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801ee38:	b134      	cbz	r4, 801ee48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801ee3a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ee3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ee42:	4413      	add	r3, r2
 801ee44:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ee48:	463c      	mov	r4, r7
 801ee4a:	e00b      	b.n	801ee64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ee4c:	4b4e      	ldr	r3, [pc, #312]	; (801ef88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ee4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ee52:	4a47      	ldr	r2, [pc, #284]	; (801ef70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ee54:	e758      	b.n	801ed08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ee56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ee5a:	ebab 0303 	sub.w	r3, fp, r3
 801ee5e:	443c      	add	r4, r7
 801ee60:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ee64:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ee68:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ee6c:	1a9b      	subs	r3, r3, r2
 801ee6e:	b29b      	uxth	r3, r3
 801ee70:	b219      	sxth	r1, r3
 801ee72:	2900      	cmp	r1, #0
 801ee74:	dd50      	ble.n	801ef18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801ee76:	9a03      	ldr	r2, [sp, #12]
 801ee78:	fb02 4401 	mla	r4, r2, r1, r4
 801ee7c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ee80:	1ad3      	subs	r3, r2, r3
 801ee82:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ee86:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ee8a:	f1bc 0f00 	cmp.w	ip, #0
 801ee8e:	dd3f      	ble.n	801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ee90:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ee94:	2e00      	cmp	r6, #0
 801ee96:	dd3b      	ble.n	801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ee98:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ee9c:	2203      	movs	r2, #3
 801ee9e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801eea2:	fb0a f801 	mul.w	r8, sl, r1
 801eea6:	fb13 8802 	smlabb	r8, r3, r2, r8
 801eeaa:	9a02      	ldr	r2, [sp, #8]
 801eeac:	4480      	add	r8, r0
 801eeae:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801eeb2:	8812      	ldrh	r2, [r2, #0]
 801eeb4:	4584      	cmp	ip, r0
 801eeb6:	eba2 0303 	sub.w	r3, r2, r3
 801eeba:	bfa8      	it	ge
 801eebc:	4684      	movge	ip, r0
 801eebe:	459c      	cmp	ip, r3
 801eec0:	bfa8      	it	ge
 801eec2:	469c      	movge	ip, r3
 801eec4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801eec8:	429e      	cmp	r6, r3
 801eeca:	bfa8      	it	ge
 801eecc:	461e      	movge	r6, r3
 801eece:	4b2d      	ldr	r3, [pc, #180]	; (801ef84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801eed0:	881b      	ldrh	r3, [r3, #0]
 801eed2:	1a59      	subs	r1, r3, r1
 801eed4:	4633      	mov	r3, r6
 801eed6:	428e      	cmp	r6, r1
 801eed8:	bfa8      	it	ge
 801eeda:	460b      	movge	r3, r1
 801eedc:	4562      	cmp	r2, ip
 801eede:	9302      	str	r3, [sp, #8]
 801eee0:	d12d      	bne.n	801ef3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801eee2:	455a      	cmp	r2, fp
 801eee4:	d12b      	bne.n	801ef3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801eee6:	6828      	ldr	r0, [r5, #0]
 801eee8:	6803      	ldr	r3, [r0, #0]
 801eeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eeec:	4798      	blx	r3
 801eeee:	07c3      	lsls	r3, r0, #31
 801eef0:	d51b      	bpl.n	801ef2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801eef2:	6828      	ldr	r0, [r5, #0]
 801eef4:	9b02      	ldr	r3, [sp, #8]
 801eef6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801eefa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801eefe:	6803      	ldr	r3, [r0, #0]
 801ef00:	f8cd b000 	str.w	fp, [sp]
 801ef04:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801ef06:	4623      	mov	r3, r4
 801ef08:	e899 0006 	ldmia.w	r9, {r1, r2}
 801ef0c:	47a8      	blx	r5
 801ef0e:	4607      	mov	r7, r0
 801ef10:	4638      	mov	r0, r7
 801ef12:	b00f      	add	sp, #60	; 0x3c
 801ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef18:	bf1f      	itttt	ne
 801ef1a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801ef1e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801ef22:	189b      	addne	r3, r3, r2
 801ef24:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801ef28:	e7ad      	b.n	801ee86 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801ef2a:	6828      	ldr	r0, [r5, #0]
 801ef2c:	4642      	mov	r2, r8
 801ef2e:	4621      	mov	r1, r4
 801ef30:	6803      	ldr	r3, [r0, #0]
 801ef32:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801ef34:	9b02      	ldr	r3, [sp, #8]
 801ef36:	fb03 f30a 	mul.w	r3, r3, sl
 801ef3a:	47a8      	blx	r5
 801ef3c:	e7e8      	b.n	801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ef3e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801ef42:	f04f 0900 	mov.w	r9, #0
 801ef46:	9b02      	ldr	r3, [sp, #8]
 801ef48:	454b      	cmp	r3, r9
 801ef4a:	dde1      	ble.n	801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ef4c:	6828      	ldr	r0, [r5, #0]
 801ef4e:	4642      	mov	r2, r8
 801ef50:	4621      	mov	r1, r4
 801ef52:	44d0      	add	r8, sl
 801ef54:	6803      	ldr	r3, [r0, #0]
 801ef56:	f109 0901 	add.w	r9, r9, #1
 801ef5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef5c:	461e      	mov	r6, r3
 801ef5e:	465b      	mov	r3, fp
 801ef60:	47b0      	blx	r6
 801ef62:	9b03      	ldr	r3, [sp, #12]
 801ef64:	441c      	add	r4, r3
 801ef66:	e7ee      	b.n	801ef46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801ef68:	2000c63c 	.word	0x2000c63c
 801ef6c:	0802af41 	.word	0x0802af41
 801ef70:	0802b721 	.word	0x0802b721
 801ef74:	0802af0f 	.word	0x0802af0f
 801ef78:	0802aff5 	.word	0x0802aff5
 801ef7c:	0802b04a 	.word	0x0802b04a
 801ef80:	2000c636 	.word	0x2000c636
 801ef84:	2000c638 	.word	0x2000c638
 801ef88:	0802b088 	.word	0x0802b088

0801ef8c <_ZN8touchgfx8LCD24bppC1Ev>:
 801ef8c:	4a0b      	ldr	r2, [pc, #44]	; (801efbc <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801ef8e:	6002      	str	r2, [r0, #0]
 801ef90:	2200      	movs	r2, #0
 801ef92:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ef96:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ef9a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ef9e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801efa2:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801efa6:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801efaa:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801efae:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801efb2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801efb6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801efba:	4770      	bx	lr
 801efbc:	0802b36c 	.word	0x0802b36c

0801efc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efc4:	b093      	sub	sp, #76	; 0x4c
 801efc6:	880c      	ldrh	r4, [r1, #0]
 801efc8:	4605      	mov	r5, r0
 801efca:	460f      	mov	r7, r1
 801efcc:	4691      	mov	r9, r2
 801efce:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801efd2:	b12c      	cbz	r4, 801efe0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801efd4:	4b71      	ldr	r3, [pc, #452]	; (801f19c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801efd6:	2167      	movs	r1, #103	; 0x67
 801efd8:	4a71      	ldr	r2, [pc, #452]	; (801f1a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801efda:	4872      	ldr	r0, [pc, #456]	; (801f1a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801efdc:	f007 fb16 	bl	802660c <__assert_func>
 801efe0:	6810      	ldr	r0, [r2, #0]
 801efe2:	ae0e      	add	r6, sp, #56	; 0x38
 801efe4:	6851      	ldr	r1, [r2, #4]
 801efe6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801f1ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801efea:	c603      	stmia	r6!, {r0, r1}
 801efec:	6818      	ldr	r0, [r3, #0]
 801efee:	ae10      	add	r6, sp, #64	; 0x40
 801eff0:	6859      	ldr	r1, [r3, #4]
 801eff2:	c603      	stmia	r6!, {r0, r1}
 801eff4:	a80e      	add	r0, sp, #56	; 0x38
 801eff6:	f7fb f9d5 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801effa:	4649      	mov	r1, r9
 801effc:	a810      	add	r0, sp, #64	; 0x40
 801effe:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801f1a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801f002:	f7fb f9b7 	bl	801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f006:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f00a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801f00e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801f012:	f8d9 0000 	ldr.w	r0, [r9]
 801f016:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f01a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801f01e:	440d      	add	r5, r1
 801f020:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801f024:	440a      	add	r2, r1
 801f026:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801f02a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f02e:	4413      	add	r3, r2
 801f030:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801f034:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801f038:	930b      	str	r3, [sp, #44]	; 0x2c
 801f03a:	6803      	ldr	r3, [r0, #0]
 801f03c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f040:	4798      	blx	r3
 801f042:	2801      	cmp	r0, #1
 801f044:	d11e      	bne.n	801f084 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801f046:	220b      	movs	r2, #11
 801f048:	9008      	str	r0, [sp, #32]
 801f04a:	b2b6      	uxth	r6, r6
 801f04c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801f050:	9207      	str	r2, [sp, #28]
 801f052:	4629      	mov	r1, r5
 801f054:	f8ba 2000 	ldrh.w	r2, [sl]
 801f058:	f8cd 8010 	str.w	r8, [sp, #16]
 801f05c:	9601      	str	r6, [sp, #4]
 801f05e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801f062:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801f066:	9203      	str	r2, [sp, #12]
 801f068:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f06c:	9202      	str	r2, [sp, #8]
 801f06e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801f072:	9200      	str	r2, [sp, #0]
 801f074:	463a      	mov	r2, r7
 801f076:	f8d9 0000 	ldr.w	r0, [r9]
 801f07a:	f7f8 fdb5 	bl	8017be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f07e:	b013      	add	sp, #76	; 0x4c
 801f080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f084:	f8d9 0000 	ldr.w	r0, [r9]
 801f088:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801f08c:	6803      	ldr	r3, [r0, #0]
 801f08e:	6a1b      	ldr	r3, [r3, #32]
 801f090:	4798      	blx	r3
 801f092:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801f096:	f8ba 3000 	ldrh.w	r3, [sl]
 801f09a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f09e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f0a2:	fb01 2303 	mla	r3, r1, r3, r2
 801f0a6:	4621      	mov	r1, r4
 801f0a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0ac:	4418      	add	r0, r3
 801f0ae:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801f0b2:	930c      	str	r3, [sp, #48]	; 0x30
 801f0b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f0b6:	4299      	cmp	r1, r3
 801f0b8:	da6a      	bge.n	801f190 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801f0ba:	1cc2      	adds	r2, r0, #3
 801f0bc:	46aa      	mov	sl, r5
 801f0be:	ebaa 0305 	sub.w	r3, sl, r5
 801f0c2:	429e      	cmp	r6, r3
 801f0c4:	dd55      	ble.n	801f172 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801f0c6:	2404      	movs	r4, #4
 801f0c8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801f0cc:	fb14 4303 	smlabb	r3, r4, r3, r4
 801f0d0:	eb07 0e03 	add.w	lr, r7, r3
 801f0d4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801f0d8:	b184      	cbz	r4, 801f0fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f0da:	2cff      	cmp	r4, #255	; 0xff
 801f0dc:	f817 b003 	ldrb.w	fp, [r7, r3]
 801f0e0:	d10e      	bne.n	801f100 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f0e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f0e6:	d10b      	bne.n	801f100 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f0e8:	f802 bc03 	strb.w	fp, [r2, #-3]
 801f0ec:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801f0f0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801f0f4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801f0f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f0fc:	3203      	adds	r2, #3
 801f0fe:	e7de      	b.n	801f0be <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801f100:	fb08 f404 	mul.w	r4, r8, r4
 801f104:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801f108:	1c63      	adds	r3, r4, #1
 801f10a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f10e:	121b      	asrs	r3, r3, #8
 801f110:	b29c      	uxth	r4, r3
 801f112:	43db      	mvns	r3, r3
 801f114:	fb1b fb04 	smulbb	fp, fp, r4
 801f118:	b2db      	uxtb	r3, r3
 801f11a:	fb0c bc03 	mla	ip, ip, r3, fp
 801f11e:	fa1f fc8c 	uxth.w	ip, ip
 801f122:	f10c 0b01 	add.w	fp, ip, #1
 801f126:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f12a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801f12e:	fb1b fb03 	smulbb	fp, fp, r3
 801f132:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f136:	f802 cc03 	strb.w	ip, [r2, #-3]
 801f13a:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f13e:	fb0c bc04 	mla	ip, ip, r4, fp
 801f142:	fa1f fc8c 	uxth.w	ip, ip
 801f146:	f10c 0b01 	add.w	fp, ip, #1
 801f14a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f14e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f152:	f802 cc02 	strb.w	ip, [r2, #-2]
 801f156:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801f15a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801f15e:	fb1c f303 	smulbb	r3, ip, r3
 801f162:	fb0e 3304 	mla	r3, lr, r4, r3
 801f166:	b29b      	uxth	r3, r3
 801f168:	1c5c      	adds	r4, r3, #1
 801f16a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f16e:	121b      	asrs	r3, r3, #8
 801f170:	e7c2      	b.n	801f0f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801f172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f174:	3101      	adds	r1, #1
 801f176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f178:	881b      	ldrh	r3, [r3, #0]
 801f17a:	1b9b      	subs	r3, r3, r6
 801f17c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f180:	4413      	add	r3, r2
 801f182:	4418      	add	r0, r3
 801f184:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801f188:	1b9b      	subs	r3, r3, r6
 801f18a:	444b      	add	r3, r9
 801f18c:	441d      	add	r5, r3
 801f18e:	e791      	b.n	801f0b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f190:	4b05      	ldr	r3, [pc, #20]	; (801f1a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801f192:	6818      	ldr	r0, [r3, #0]
 801f194:	6803      	ldr	r3, [r0, #0]
 801f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f198:	4798      	blx	r3
 801f19a:	e770      	b.n	801f07e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f19c:	0802ae73 	.word	0x0802ae73
 801f1a0:	0802b543 	.word	0x0802b543
 801f1a4:	0802af0f 	.word	0x0802af0f
 801f1a8:	2000c63c 	.word	0x2000c63c
 801f1ac:	2000c636 	.word	0x2000c636

0801f1b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1b4:	4614      	mov	r4, r2
 801f1b6:	880a      	ldrh	r2, [r1, #0]
 801f1b8:	b091      	sub	sp, #68	; 0x44
 801f1ba:	4680      	mov	r8, r0
 801f1bc:	2a01      	cmp	r2, #1
 801f1be:	460e      	mov	r6, r1
 801f1c0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f1c4:	d005      	beq.n	801f1d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801f1c6:	4b6d      	ldr	r3, [pc, #436]	; (801f37c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801f1c8:	21b5      	movs	r1, #181	; 0xb5
 801f1ca:	4a6d      	ldr	r2, [pc, #436]	; (801f380 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801f1cc:	486d      	ldr	r0, [pc, #436]	; (801f384 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801f1ce:	f007 fa1d 	bl	802660c <__assert_func>
 801f1d2:	6820      	ldr	r0, [r4, #0]
 801f1d4:	ad0c      	add	r5, sp, #48	; 0x30
 801f1d6:	6861      	ldr	r1, [r4, #4]
 801f1d8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801f388 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801f1dc:	c503      	stmia	r5!, {r0, r1}
 801f1de:	6818      	ldr	r0, [r3, #0]
 801f1e0:	ad0e      	add	r5, sp, #56	; 0x38
 801f1e2:	6859      	ldr	r1, [r3, #4]
 801f1e4:	c503      	stmia	r5!, {r0, r1}
 801f1e6:	a80c      	add	r0, sp, #48	; 0x30
 801f1e8:	f7fb f8dc 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f1ec:	4621      	mov	r1, r4
 801f1ee:	a80e      	add	r0, sp, #56	; 0x38
 801f1f0:	f7fb f8c0 	bl	801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f1f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f1f8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f1fc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f200:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801f204:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f208:	eb08 0401 	add.w	r4, r8, r1
 801f20c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f210:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801f38c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801f214:	440a      	add	r2, r1
 801f216:	f8d8 0000 	ldr.w	r0, [r8]
 801f21a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f21e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f222:	4413      	add	r3, r2
 801f224:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f228:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f22c:	930a      	str	r3, [sp, #40]	; 0x28
 801f22e:	6803      	ldr	r3, [r0, #0]
 801f230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f234:	4798      	blx	r3
 801f236:	2801      	cmp	r0, #1
 801f238:	d11e      	bne.n	801f278 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801f23a:	220b      	movs	r2, #11
 801f23c:	9008      	str	r0, [sp, #32]
 801f23e:	b2ad      	uxth	r5, r5
 801f240:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f244:	9207      	str	r2, [sp, #28]
 801f246:	4621      	mov	r1, r4
 801f248:	f8b9 2000 	ldrh.w	r2, [r9]
 801f24c:	9501      	str	r5, [sp, #4]
 801f24e:	9206      	str	r2, [sp, #24]
 801f250:	2200      	movs	r2, #0
 801f252:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f256:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f25a:	9203      	str	r2, [sp, #12]
 801f25c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f260:	9202      	str	r2, [sp, #8]
 801f262:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f266:	9200      	str	r2, [sp, #0]
 801f268:	4632      	mov	r2, r6
 801f26a:	f8d8 0000 	ldr.w	r0, [r8]
 801f26e:	f7f8 fcbb 	bl	8017be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f272:	b011      	add	sp, #68	; 0x44
 801f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f278:	f8d8 0000 	ldr.w	r0, [r8]
 801f27c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801f280:	6803      	ldr	r3, [r0, #0]
 801f282:	6a1b      	ldr	r3, [r3, #32]
 801f284:	4798      	blx	r3
 801f286:	f8b9 3000 	ldrh.w	r3, [r9]
 801f28a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f28e:	f04f 0e00 	mov.w	lr, #0
 801f292:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f296:	fa1f f987 	uxth.w	r9, r7
 801f29a:	fb01 2303 	mla	r3, r1, r3, r2
 801f29e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801f2a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2a6:	b289      	uxth	r1, r1
 801f2a8:	4418      	add	r0, r3
 801f2aa:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2b2:	459e      	cmp	lr, r3
 801f2b4:	da5c      	bge.n	801f370 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801f2b6:	1cc3      	adds	r3, r0, #3
 801f2b8:	46a2      	mov	sl, r4
 801f2ba:	ebaa 0204 	sub.w	r2, sl, r4
 801f2be:	4295      	cmp	r5, r2
 801f2c0:	dd46      	ble.n	801f350 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801f2c2:	f04f 0c03 	mov.w	ip, #3
 801f2c6:	f04f 0b04 	mov.w	fp, #4
 801f2ca:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801f2ce:	2fff      	cmp	r7, #255	; 0xff
 801f2d0:	fb1c b202 	smlabb	r2, ip, r2, fp
 801f2d4:	eb06 0c02 	add.w	ip, r6, r2
 801f2d8:	f816 b002 	ldrb.w	fp, [r6, r2]
 801f2dc:	d02f      	beq.n	801f33e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801f2de:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801f2e2:	fb12 f201 	smulbb	r2, r2, r1
 801f2e6:	fb0b 2209 	mla	r2, fp, r9, r2
 801f2ea:	b292      	uxth	r2, r2
 801f2ec:	f102 0b01 	add.w	fp, r2, #1
 801f2f0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f2f4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801f2f8:	fb1b fb01 	smulbb	fp, fp, r1
 801f2fc:	1212      	asrs	r2, r2, #8
 801f2fe:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f302:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f306:	fb02 b209 	mla	r2, r2, r9, fp
 801f30a:	b292      	uxth	r2, r2
 801f30c:	f102 0b01 	add.w	fp, r2, #1
 801f310:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f314:	1212      	asrs	r2, r2, #8
 801f316:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f31a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f31e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801f322:	fb1c fc01 	smulbb	ip, ip, r1
 801f326:	fb02 c209 	mla	r2, r2, r9, ip
 801f32a:	b292      	uxth	r2, r2
 801f32c:	f102 0c01 	add.w	ip, r2, #1
 801f330:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f334:	1212      	asrs	r2, r2, #8
 801f336:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f33a:	3303      	adds	r3, #3
 801f33c:	e7bd      	b.n	801f2ba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801f33e:	f803 bc03 	strb.w	fp, [r3, #-3]
 801f342:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f346:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f34a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f34e:	e7f2      	b.n	801f336 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801f350:	4b0d      	ldr	r3, [pc, #52]	; (801f388 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801f352:	f10e 0e01 	add.w	lr, lr, #1
 801f356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f358:	881b      	ldrh	r3, [r3, #0]
 801f35a:	1b5b      	subs	r3, r3, r5
 801f35c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f360:	4413      	add	r3, r2
 801f362:	4418      	add	r0, r3
 801f364:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f368:	1b5b      	subs	r3, r3, r5
 801f36a:	4443      	add	r3, r8
 801f36c:	441c      	add	r4, r3
 801f36e:	e79f      	b.n	801f2b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801f370:	4b06      	ldr	r3, [pc, #24]	; (801f38c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f372:	6818      	ldr	r0, [r3, #0]
 801f374:	6803      	ldr	r3, [r0, #0]
 801f376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f378:	4798      	blx	r3
 801f37a:	e77a      	b.n	801f272 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801f37c:	0802ad7f 	.word	0x0802ad7f
 801f380:	0802b436 	.word	0x0802b436
 801f384:	0802af0f 	.word	0x0802af0f
 801f388:	2000c636 	.word	0x2000c636
 801f38c:	2000c63c 	.word	0x2000c63c

0801f390 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f390:	b570      	push	{r4, r5, r6, lr}
 801f392:	780d      	ldrb	r5, [r1, #0]
 801f394:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f398:	2d01      	cmp	r5, #1
 801f39a:	d00d      	beq.n	801f3b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f39c:	d307      	bcc.n	801f3ae <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f39e:	2d02      	cmp	r5, #2
 801f3a0:	d10f      	bne.n	801f3c2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f3a2:	4b08      	ldr	r3, [pc, #32]	; (801f3c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f3a4:	215a      	movs	r1, #90	; 0x5a
 801f3a6:	4a08      	ldr	r2, [pc, #32]	; (801f3c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f3a8:	4808      	ldr	r0, [pc, #32]	; (801f3cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f3aa:	f007 f92f 	bl	802660c <__assert_func>
 801f3ae:	9404      	str	r4, [sp, #16]
 801f3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f3b4:	f7ff be04 	b.w	801efc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f3b8:	9404      	str	r4, [sp, #16]
 801f3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f3be:	f7ff bef7 	b.w	801f1b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f3c2:	bd70      	pop	{r4, r5, r6, pc}
 801f3c4:	0802ad34 	.word	0x0802ad34
 801f3c8:	0802b3b4 	.word	0x0802b3b4
 801f3cc:	0802af0f 	.word	0x0802af0f

0801f3d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3d4:	b08b      	sub	sp, #44	; 0x2c
 801f3d6:	460c      	mov	r4, r1
 801f3d8:	4680      	mov	r8, r0
 801f3da:	469a      	mov	sl, r3
 801f3dc:	6808      	ldr	r0, [r1, #0]
 801f3de:	ab06      	add	r3, sp, #24
 801f3e0:	6849      	ldr	r1, [r1, #4]
 801f3e2:	c303      	stmia	r3!, {r0, r1}
 801f3e4:	6810      	ldr	r0, [r2, #0]
 801f3e6:	ab08      	add	r3, sp, #32
 801f3e8:	6851      	ldr	r1, [r2, #4]
 801f3ea:	c303      	stmia	r3!, {r0, r1}
 801f3ec:	a806      	add	r0, sp, #24
 801f3ee:	f7fa ffd9 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3f2:	4621      	mov	r1, r4
 801f3f4:	a808      	add	r0, sp, #32
 801f3f6:	4c61      	ldr	r4, [pc, #388]	; (801f57c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f3f8:	f7fa ffbc 	bl	801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f3fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f400:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f404:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f408:	6820      	ldr	r0, [r4, #0]
 801f40a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f40e:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801f412:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801f416:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801f41a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f41e:	440a      	add	r2, r1
 801f420:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f424:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f428:	4413      	add	r3, r2
 801f42a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f42e:	6803      	ldr	r3, [r0, #0]
 801f430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f432:	4798      	blx	r3
 801f434:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f438:	d118      	bne.n	801f46c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f43a:	f010 0f20 	tst.w	r0, #32
 801f43e:	6820      	ldr	r0, [r4, #0]
 801f440:	d017      	beq.n	801f472 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f442:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f446:	b2bf      	uxth	r7, r7
 801f448:	6801      	ldr	r1, [r0, #0]
 801f44a:	9402      	str	r4, [sp, #8]
 801f44c:	fa1f f489 	uxth.w	r4, r9
 801f450:	f8cd a00c 	str.w	sl, [sp, #12]
 801f454:	9401      	str	r4, [sp, #4]
 801f456:	9700      	str	r7, [sp, #0]
 801f458:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f45c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801f45e:	4641      	mov	r1, r8
 801f460:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f464:	47a0      	blx	r4
 801f466:	b00b      	add	sp, #44	; 0x2c
 801f468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f46c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f470:	e7e5      	b.n	801f43e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f472:	6803      	ldr	r3, [r0, #0]
 801f474:	6a1b      	ldr	r3, [r3, #32]
 801f476:	4798      	blx	r3
 801f478:	4b41      	ldr	r3, [pc, #260]	; (801f580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801f47a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f47e:	f04f 0c00 	mov.w	ip, #0
 801f482:	881a      	ldrh	r2, [r3, #0]
 801f484:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f488:	fb04 1202 	mla	r2, r4, r2, r1
 801f48c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f490:	4410      	add	r0, r2
 801f492:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801f496:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801f49a:	0092      	lsls	r2, r2, #2
 801f49c:	9105      	str	r1, [sp, #20]
 801f49e:	9204      	str	r2, [sp, #16]
 801f4a0:	45cc      	cmp	ip, r9
 801f4a2:	da65      	bge.n	801f570 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801f4a4:	1cc4      	adds	r4, r0, #3
 801f4a6:	f108 0504 	add.w	r5, r8, #4
 801f4aa:	f04f 0e00 	mov.w	lr, #0
 801f4ae:	45be      	cmp	lr, r7
 801f4b0:	da4d      	bge.n	801f54e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801f4b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f4b6:	b181      	cbz	r1, 801f4da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f4b8:	29ff      	cmp	r1, #255	; 0xff
 801f4ba:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801f4be:	d111      	bne.n	801f4e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f4c0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f4c4:	d10e      	bne.n	801f4e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f4c6:	f804 bc03 	strb.w	fp, [r4, #-3]
 801f4ca:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801f4ce:	f804 2c02 	strb.w	r2, [r4, #-2]
 801f4d2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801f4d6:	f804 2c01 	strb.w	r2, [r4, #-1]
 801f4da:	f10e 0e01 	add.w	lr, lr, #1
 801f4de:	3403      	adds	r4, #3
 801f4e0:	3504      	adds	r5, #4
 801f4e2:	e7e4      	b.n	801f4ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f4e4:	fb0a f101 	mul.w	r1, sl, r1
 801f4e8:	1c4a      	adds	r2, r1, #1
 801f4ea:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f4ee:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f4f2:	1212      	asrs	r2, r2, #8
 801f4f4:	b296      	uxth	r6, r2
 801f4f6:	43d2      	mvns	r2, r2
 801f4f8:	fb1b fb06 	smulbb	fp, fp, r6
 801f4fc:	b2d2      	uxtb	r2, r2
 801f4fe:	fb01 b102 	mla	r1, r1, r2, fp
 801f502:	b289      	uxth	r1, r1
 801f504:	f101 0b01 	add.w	fp, r1, #1
 801f508:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f50c:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801f510:	fb1b fb02 	smulbb	fp, fp, r2
 801f514:	1209      	asrs	r1, r1, #8
 801f516:	f804 1c03 	strb.w	r1, [r4, #-3]
 801f51a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801f51e:	fb01 b106 	mla	r1, r1, r6, fp
 801f522:	b289      	uxth	r1, r1
 801f524:	f101 0b01 	add.w	fp, r1, #1
 801f528:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f52c:	1209      	asrs	r1, r1, #8
 801f52e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801f532:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f536:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f53a:	fb11 f202 	smulbb	r2, r1, r2
 801f53e:	fb0b 2206 	mla	r2, fp, r6, r2
 801f542:	b292      	uxth	r2, r2
 801f544:	1c56      	adds	r6, r2, #1
 801f546:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f54a:	1212      	asrs	r2, r2, #8
 801f54c:	e7c3      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f54e:	881a      	ldrh	r2, [r3, #0]
 801f550:	f10c 0c01 	add.w	ip, ip, #1
 801f554:	9905      	ldr	r1, [sp, #20]
 801f556:	1bd2      	subs	r2, r2, r7
 801f558:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f55c:	440a      	add	r2, r1
 801f55e:	9904      	ldr	r1, [sp, #16]
 801f560:	4410      	add	r0, r2
 801f562:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f566:	1bd2      	subs	r2, r2, r7
 801f568:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f56c:	4490      	add	r8, r2
 801f56e:	e797      	b.n	801f4a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801f570:	4b02      	ldr	r3, [pc, #8]	; (801f57c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f572:	6818      	ldr	r0, [r3, #0]
 801f574:	6803      	ldr	r3, [r0, #0]
 801f576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f578:	4798      	blx	r3
 801f57a:	e774      	b.n	801f466 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f57c:	2000c63c 	.word	0x2000c63c
 801f580:	2000c636 	.word	0x2000c636

0801f584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f588:	b085      	sub	sp, #20
 801f58a:	4606      	mov	r6, r0
 801f58c:	460c      	mov	r4, r1
 801f58e:	4691      	mov	r9, r2
 801f590:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f594:	4698      	mov	r8, r3
 801f596:	b385      	cbz	r5, 801f5fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f598:	4608      	mov	r0, r1
 801f59a:	f7fd fae5 	bl	801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f59e:	4607      	mov	r7, r0
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	f7fd fb1b 	bl	801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f5a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f5b0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f5b4:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f5b8:	f7fd fc62 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f5bc:	2801      	cmp	r0, #1
 801f5be:	d00f      	beq.n	801f5e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f5c0:	4620      	mov	r0, r4
 801f5c2:	f7fd fc5d 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f5c6:	2802      	cmp	r0, #2
 801f5c8:	d00a      	beq.n	801f5e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f5ca:	4620      	mov	r0, r4
 801f5cc:	f7fd fc58 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f5d0:	280b      	cmp	r0, #11
 801f5d2:	d005      	beq.n	801f5e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f5d4:	4b1b      	ldr	r3, [pc, #108]	; (801f644 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801f5d6:	2142      	movs	r1, #66	; 0x42
 801f5d8:	4a1b      	ldr	r2, [pc, #108]	; (801f648 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801f5da:	481c      	ldr	r0, [pc, #112]	; (801f64c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801f5dc:	f007 f816 	bl	802660c <__assert_func>
 801f5e0:	4620      	mov	r0, r4
 801f5e2:	f7fd fc4d 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f5e6:	2802      	cmp	r0, #2
 801f5e8:	4620      	mov	r0, r4
 801f5ea:	d109      	bne.n	801f600 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801f5ec:	f7fd fbc4 	bl	801cd78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f5f0:	462b      	mov	r3, r5
 801f5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f5f4:	a902      	add	r1, sp, #8
 801f5f6:	f7ff feeb 	bl	801f3d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f5fa:	b005      	add	sp, #20
 801f5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f600:	f7fd fc3e 	bl	801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f604:	280b      	cmp	r0, #11
 801f606:	d10e      	bne.n	801f626 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801f608:	4620      	mov	r0, r4
 801f60a:	f7fd fbb5 	bl	801cd78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f60e:	4606      	mov	r6, r0
 801f610:	4620      	mov	r0, r4
 801f612:	f7fd fbe3 	bl	801cddc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f616:	9500      	str	r5, [sp, #0]
 801f618:	4601      	mov	r1, r0
 801f61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f61c:	aa02      	add	r2, sp, #8
 801f61e:	4630      	mov	r0, r6
 801f620:	f7ff feb6 	bl	801f390 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f624:	e7e9      	b.n	801f5fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f626:	6833      	ldr	r3, [r6, #0]
 801f628:	4620      	mov	r0, r4
 801f62a:	691f      	ldr	r7, [r3, #16]
 801f62c:	f7fd fba4 	bl	801cd78 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f630:	2300      	movs	r3, #0
 801f632:	4601      	mov	r1, r0
 801f634:	aa02      	add	r2, sp, #8
 801f636:	4630      	mov	r0, r6
 801f638:	e9cd 5300 	strd	r5, r3, [sp]
 801f63c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f63e:	47b8      	blx	r7
 801f640:	e7db      	b.n	801f5fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f642:	bf00      	nop
 801f644:	0802adcd 	.word	0x0802adcd
 801f648:	0802b4bf 	.word	0x0802b4bf
 801f64c:	0802af0f 	.word	0x0802af0f

0801f650 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f650:	b570      	push	{r4, r5, r6, lr}
 801f652:	9d04      	ldr	r5, [sp, #16]
 801f654:	460c      	mov	r4, r1
 801f656:	4619      	mov	r1, r3
 801f658:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f65c:	2a0c      	cmp	r2, #12
 801f65e:	d826      	bhi.n	801f6ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f660:	e8df f002 	tbb	[pc, r2]
 801f664:	200e1407 	.word	0x200e1407
 801f668:	20202020 	.word	0x20202020
 801f66c:	20202020 	.word	0x20202020
 801f670:	20          	.byte	0x20
 801f671:	00          	.byte	0x00
 801f672:	4b0f      	ldr	r3, [pc, #60]	; (801f6b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f674:	f240 117f 	movw	r1, #383	; 0x17f
 801f678:	4a0e      	ldr	r2, [pc, #56]	; (801f6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f67a:	480f      	ldr	r0, [pc, #60]	; (801f6b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f67c:	f006 ffc6 	bl	802660c <__assert_func>
 801f680:	462a      	mov	r2, r5
 801f682:	4620      	mov	r0, r4
 801f684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f688:	f7ff bea2 	b.w	801f3d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f68c:	6802      	ldr	r2, [r0, #0]
 801f68e:	2600      	movs	r6, #0
 801f690:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f694:	6916      	ldr	r6, [r2, #16]
 801f696:	462b      	mov	r3, r5
 801f698:	460a      	mov	r2, r1
 801f69a:	4621      	mov	r1, r4
 801f69c:	46b4      	mov	ip, r6
 801f69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f6a2:	4760      	bx	ip
 801f6a4:	4b05      	ldr	r3, [pc, #20]	; (801f6bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f6a6:	f240 1191 	movw	r1, #401	; 0x191
 801f6aa:	4a02      	ldr	r2, [pc, #8]	; (801f6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f6ac:	e7e5      	b.n	801f67a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f6ae:	bd70      	pop	{r4, r5, r6, pc}
 801f6b0:	0802b0e8 	.word	0x0802b0e8
 801f6b4:	0802b7a7 	.word	0x0802b7a7
 801f6b8:	0802af0f 	.word	0x0802af0f
 801f6bc:	0802b129 	.word	0x0802b129

0801f6c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f6c0:	b158      	cbz	r0, 801f6da <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f6c2:	2902      	cmp	r1, #2
 801f6c4:	d00f      	beq.n	801f6e6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f6c6:	2903      	cmp	r1, #3
 801f6c8:	d010      	beq.n	801f6ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f6ca:	2901      	cmp	r1, #1
 801f6cc:	d101      	bne.n	801f6d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f6ce:	2001      	movs	r0, #1
 801f6d0:	4770      	bx	lr
 801f6d2:	4b08      	ldr	r3, [pc, #32]	; (801f6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f6d4:	8819      	ldrh	r1, [r3, #0]
 801f6d6:	4248      	negs	r0, r1
 801f6d8:	4770      	bx	lr
 801f6da:	2902      	cmp	r1, #2
 801f6dc:	d006      	beq.n	801f6ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f6de:	2903      	cmp	r1, #3
 801f6e0:	d0f7      	beq.n	801f6d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f6e2:	2901      	cmp	r1, #1
 801f6e4:	d1f3      	bne.n	801f6ce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f6e6:	4b03      	ldr	r3, [pc, #12]	; (801f6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f6e8:	8818      	ldrh	r0, [r3, #0]
 801f6ea:	4770      	bx	lr
 801f6ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f6f0:	4770      	bx	lr
 801f6f2:	bf00      	nop
 801f6f4:	2000c636 	.word	0x2000c636

0801f6f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f6f8:	b170      	cbz	r0, 801f718 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801f6fa:	2902      	cmp	r1, #2
 801f6fc:	d012      	beq.n	801f724 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801f6fe:	2903      	cmp	r1, #3
 801f700:	d006      	beq.n	801f710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f702:	2901      	cmp	r1, #1
 801f704:	d001      	beq.n	801f70a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f706:	2001      	movs	r0, #1
 801f708:	4770      	bx	lr
 801f70a:	4b08      	ldr	r3, [pc, #32]	; (801f72c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f70c:	8818      	ldrh	r0, [r3, #0]
 801f70e:	4770      	bx	lr
 801f710:	4b06      	ldr	r3, [pc, #24]	; (801f72c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f712:	8818      	ldrh	r0, [r3, #0]
 801f714:	4240      	negs	r0, r0
 801f716:	4770      	bx	lr
 801f718:	2902      	cmp	r1, #2
 801f71a:	d0f9      	beq.n	801f710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f71c:	2903      	cmp	r1, #3
 801f71e:	d0f2      	beq.n	801f706 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801f720:	2901      	cmp	r1, #1
 801f722:	d1f2      	bne.n	801f70a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f724:	f04f 30ff 	mov.w	r0, #4294967295
 801f728:	4770      	bx	lr
 801f72a:	bf00      	nop
 801f72c:	2000c636 	.word	0x2000c636

0801f730 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f734:	b095      	sub	sp, #84	; 0x54
 801f736:	9109      	str	r1, [sp, #36]	; 0x24
 801f738:	a910      	add	r1, sp, #64	; 0x40
 801f73a:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801f73e:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801f742:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801f746:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801f74a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801f74e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f752:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801f756:	9306      	str	r3, [sp, #24]
 801f758:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f75c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801f760:	930e      	str	r3, [sp, #56]	; 0x38
 801f762:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801f766:	798f      	ldrb	r7, [r1, #6]
 801f768:	930a      	str	r3, [sp, #40]	; 0x28
 801f76a:	7b4b      	ldrb	r3, [r1, #13]
 801f76c:	0158      	lsls	r0, r3, #5
 801f76e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f772:	4338      	orrs	r0, r7
 801f774:	9008      	str	r0, [sp, #32]
 801f776:	f000 8174 	beq.w	801fa62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f77a:	011b      	lsls	r3, r3, #4
 801f77c:	79c8      	ldrb	r0, [r1, #7]
 801f77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f782:	4303      	orrs	r3, r0
 801f784:	9307      	str	r3, [sp, #28]
 801f786:	f000 816c 	beq.w	801fa62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f78a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f78e:	b29b      	uxth	r3, r3
 801f790:	2e00      	cmp	r6, #0
 801f792:	f000 8112 	beq.w	801f9ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801f796:	1af6      	subs	r6, r6, r3
 801f798:	b2b6      	uxth	r6, r6
 801f79a:	0433      	lsls	r3, r6, #16
 801f79c:	d502      	bpl.n	801f7a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f79e:	1bad      	subs	r5, r5, r6
 801f7a0:	2600      	movs	r6, #0
 801f7a2:	b22d      	sxth	r5, r5
 801f7a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f7a8:	a810      	add	r0, sp, #64	; 0x40
 801f7aa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f7ae:	428d      	cmp	r5, r1
 801f7b0:	b28b      	uxth	r3, r1
 801f7b2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801f7b6:	bfbf      	itttt	lt
 801f7b8:	18f6      	addlt	r6, r6, r3
 801f7ba:	1b75      	sublt	r5, r6, r5
 801f7bc:	b2ae      	uxthlt	r6, r5
 801f7be:	460d      	movlt	r5, r1
 801f7c0:	8891      	ldrh	r1, [r2, #4]
 801f7c2:	440b      	add	r3, r1
 801f7c4:	4629      	mov	r1, r5
 801f7c6:	b21b      	sxth	r3, r3
 801f7c8:	930d      	str	r3, [sp, #52]	; 0x34
 801f7ca:	88d3      	ldrh	r3, [r2, #6]
 801f7cc:	9a06      	ldr	r2, [sp, #24]
 801f7ce:	449a      	add	sl, r3
 801f7d0:	fa0f f38a 	sxth.w	r3, sl
 801f7d4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801f7d8:	930c      	str	r3, [sp, #48]	; 0x30
 801f7da:	4bb8      	ldr	r3, [pc, #736]	; (801fabc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f7dc:	f893 b000 	ldrb.w	fp, [r3]
 801f7e0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f7e4:	f1dc 0300 	rsbs	r3, ip, #0
 801f7e8:	eb43 030c 	adc.w	r3, r3, ip
 801f7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7ee:	464b      	mov	r3, r9
 801f7f0:	f7fa fcb2 	bl	801a158 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f7f4:	4629      	mov	r1, r5
 801f7f6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801f7fa:	464b      	mov	r3, r9
 801f7fc:	9a06      	ldr	r2, [sp, #24]
 801f7fe:	a810      	add	r0, sp, #64	; 0x40
 801f800:	f7fa fcc2 	bl	801a188 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f804:	a914      	add	r1, sp, #80	; 0x50
 801f806:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f80a:	a813      	add	r0, sp, #76	; 0x4c
 801f80c:	f7fa fd9c 	bl	801a348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f810:	f1b9 0f00 	cmp.w	r9, #0
 801f814:	f040 80d4 	bne.w	801f9c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801f818:	f1bb 0f01 	cmp.w	fp, #1
 801f81c:	f040 80d8 	bne.w	801f9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801f820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f822:	2b00      	cmp	r3, #0
 801f824:	f040 8122 	bne.w	801fa6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801f828:	4ba5      	ldr	r3, [pc, #660]	; (801fac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801f82a:	6818      	ldr	r0, [r3, #0]
 801f82c:	6803      	ldr	r3, [r0, #0]
 801f82e:	6a1b      	ldr	r3, [r3, #32]
 801f830:	4798      	blx	r3
 801f832:	4aa4      	ldr	r2, [pc, #656]	; (801fac4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f834:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f838:	8811      	ldrh	r1, [r2, #0]
 801f83a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f83e:	fb01 2303 	mla	r3, r1, r3, r2
 801f842:	2201      	movs	r2, #1
 801f844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f848:	4590      	cmp	r8, r2
 801f84a:	4403      	add	r3, r0
 801f84c:	9307      	str	r3, [sp, #28]
 801f84e:	fa02 f308 	lsl.w	r3, r2, r8
 801f852:	f103 33ff 	add.w	r3, r3, #4294967295
 801f856:	b2db      	uxtb	r3, r3
 801f858:	930f      	str	r3, [sp, #60]	; 0x3c
 801f85a:	f000 8109 	beq.w	801fa70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801f85e:	f1b8 0f02 	cmp.w	r8, #2
 801f862:	f000 813e 	beq.w	801fae2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801f866:	f1b8 0f04 	cmp.w	r8, #4
 801f86a:	f000 8132 	beq.w	801fad2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801f86e:	b906      	cbnz	r6, 801f872 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801f870:	b174      	cbz	r4, 801f890 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801f872:	fb17 6304 	smlabb	r3, r7, r4, r6
 801f876:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f878:	ebaa 0a04 	sub.w	sl, sl, r4
 801f87c:	fb13 f308 	smulbb	r3, r3, r8
 801f880:	fa1f fa8a 	uxth.w	sl, sl
 801f884:	b29b      	uxth	r3, r3
 801f886:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801f88a:	f003 0407 	and.w	r4, r3, #7
 801f88e:	9124      	str	r1, [sp, #144]	; 0x90
 801f890:	4649      	mov	r1, r9
 801f892:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f894:	f7ff ff14 	bl	801f6c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f898:	4649      	mov	r1, r9
 801f89a:	4683      	mov	fp, r0
 801f89c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f89e:	f7ff ff2b 	bl	801f6f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f8a2:	9906      	ldr	r1, [sp, #24]
 801f8a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8a6:	1bad      	subs	r5, r5, r6
 801f8a8:	1a5b      	subs	r3, r3, r1
 801f8aa:	459a      	cmp	sl, r3
 801f8ac:	bfa8      	it	ge
 801f8ae:	469a      	movge	sl, r3
 801f8b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8b2:	1b5d      	subs	r5, r3, r5
 801f8b4:	9b08      	ldr	r3, [sp, #32]
 801f8b6:	429d      	cmp	r5, r3
 801f8b8:	bfd4      	ite	le
 801f8ba:	ebc6 0605 	rsble	r6, r6, r5
 801f8be:	ebc6 0603 	rsbgt	r6, r6, r3
 801f8c2:	1bbf      	subs	r7, r7, r6
 801f8c4:	fb0b 0016 	mls	r0, fp, r6, r0
 801f8c8:	fb08 f307 	mul.w	r3, r8, r7
 801f8cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f8d0:	9308      	str	r3, [sp, #32]
 801f8d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f8d8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f8e0:	930c      	str	r3, [sp, #48]	; 0x30
 801f8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8e4:	b2db      	uxtb	r3, r3
 801f8e6:	930d      	str	r3, [sp, #52]	; 0x34
 801f8e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8ea:	7819      	ldrb	r1, [r3, #0]
 801f8ec:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801f8f0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801f8f4:	4121      	asrs	r1, r4
 801f8f6:	9306      	str	r3, [sp, #24]
 801f8f8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801f8fc:	b2c9      	uxtb	r1, r1
 801f8fe:	f1ba 0f00 	cmp.w	sl, #0
 801f902:	f340 80d1 	ble.w	801faa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801f906:	46b6      	mov	lr, r6
 801f908:	9807      	ldr	r0, [sp, #28]
 801f90a:	f1be 0f00 	cmp.w	lr, #0
 801f90e:	f340 80b8 	ble.w	801fa82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801f912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f914:	400b      	ands	r3, r1
 801f916:	d03e      	beq.n	801f996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801f918:	fb13 f302 	smulbb	r3, r3, r2
 801f91c:	2bfe      	cmp	r3, #254	; 0xfe
 801f91e:	dd03      	ble.n	801f928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801f920:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f922:	2dff      	cmp	r5, #255	; 0xff
 801f924:	f000 80a6 	beq.w	801fa74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801f928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f92a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f92c:	fb15 f303 	smulbb	r3, r5, r3
 801f930:	b29b      	uxth	r3, r3
 801f932:	1c5d      	adds	r5, r3, #1
 801f934:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f938:	7805      	ldrb	r5, [r0, #0]
 801f93a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f93e:	fa1f fc83 	uxth.w	ip, r3
 801f942:	43db      	mvns	r3, r3
 801f944:	fb17 f90c 	smulbb	r9, r7, ip
 801f948:	b2db      	uxtb	r3, r3
 801f94a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f94c:	fb05 9503 	mla	r5, r5, r3, r9
 801f950:	b2ad      	uxth	r5, r5
 801f952:	f105 0901 	add.w	r9, r5, #1
 801f956:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f95a:	fb17 f90c 	smulbb	r9, r7, ip
 801f95e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f960:	122d      	asrs	r5, r5, #8
 801f962:	fb17 fc0c 	smulbb	ip, r7, ip
 801f966:	7005      	strb	r5, [r0, #0]
 801f968:	7845      	ldrb	r5, [r0, #1]
 801f96a:	fb05 9503 	mla	r5, r5, r3, r9
 801f96e:	b2ad      	uxth	r5, r5
 801f970:	f105 0901 	add.w	r9, r5, #1
 801f974:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f978:	122d      	asrs	r5, r5, #8
 801f97a:	7045      	strb	r5, [r0, #1]
 801f97c:	7885      	ldrb	r5, [r0, #2]
 801f97e:	fb05 cc03 	mla	ip, r5, r3, ip
 801f982:	fa1f fc8c 	uxth.w	ip, ip
 801f986:	f10c 0301 	add.w	r3, ip, #1
 801f98a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f98e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f992:	f880 c002 	strb.w	ip, [r0, #2]
 801f996:	4444      	add	r4, r8
 801f998:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f99c:	b2a4      	uxth	r4, r4
 801f99e:	2c07      	cmp	r4, #7
 801f9a0:	bf89      	itett	hi
 801f9a2:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801f9a4:	fa41 f108 	asrls.w	r1, r1, r8
 801f9a8:	2400      	movhi	r4, #0
 801f9aa:	7859      	ldrbhi	r1, [r3, #1]
 801f9ac:	bf8a      	itet	hi
 801f9ae:	3301      	addhi	r3, #1
 801f9b0:	b2c9      	uxtbls	r1, r1
 801f9b2:	9324      	strhi	r3, [sp, #144]	; 0x90
 801f9b4:	9b06      	ldr	r3, [sp, #24]
 801f9b6:	4418      	add	r0, r3
 801f9b8:	e7a7      	b.n	801f90a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801f9ba:	441d      	add	r5, r3
 801f9bc:	b22d      	sxth	r5, r5
 801f9be:	e6f1      	b.n	801f7a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f9c0:	f1b9 0f01 	cmp.w	r9, #1
 801f9c4:	f47f af2c 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f9c8:	f1bb 0f01 	cmp.w	fp, #1
 801f9cc:	f47f af28 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f9d0:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801fac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f9d4:	f8db 0000 	ldr.w	r0, [fp]
 801f9d8:	6803      	ldr	r3, [r0, #0]
 801f9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f9dc:	4798      	blx	r3
 801f9de:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801f9e2:	465a      	mov	r2, fp
 801f9e4:	d006      	beq.n	801f9f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801f9e6:	f1b8 0f04 	cmp.w	r8, #4
 801f9ea:	d13d      	bne.n	801fa68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801f9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9ee:	3300      	adds	r3, #0
 801f9f0:	bf18      	it	ne
 801f9f2:	2301      	movne	r3, #1
 801f9f4:	05c0      	lsls	r0, r0, #23
 801f9f6:	d567      	bpl.n	801fac8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801f9f8:	f1b8 0f08 	cmp.w	r8, #8
 801f9fc:	d164      	bne.n	801fac8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	bf0c      	ite	eq
 801fa02:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801fa06:	2180      	movne	r1, #128	; 0x80
 801fa08:	2e00      	cmp	r6, #0
 801fa0a:	f47f af09 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa0e:	2c00      	cmp	r4, #0
 801fa10:	f47f af06 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa14:	9b08      	ldr	r3, [sp, #32]
 801fa16:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fa18:	442b      	add	r3, r5
 801fa1a:	4283      	cmp	r3, r0
 801fa1c:	f73f af00 	bgt.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa20:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801fa24:	4403      	add	r3, r0
 801fa26:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fa28:	4283      	cmp	r3, r0
 801fa2a:	f73f aef9 	bgt.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa2e:	f1b8 0f08 	cmp.w	r8, #8
 801fa32:	6810      	ldr	r0, [r2, #0]
 801fa34:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801fa38:	bf18      	it	ne
 801fa3a:	3701      	addne	r7, #1
 801fa3c:	6804      	ldr	r4, [r0, #0]
 801fa3e:	9105      	str	r1, [sp, #20]
 801fa40:	bf18      	it	ne
 801fa42:	f027 0701 	bicne.w	r7, r7, #1
 801fa46:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fa48:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801fa4c:	bf18      	it	ne
 801fa4e:	b2bf      	uxthne	r7, r7
 801fa50:	9104      	str	r1, [sp, #16]
 801fa52:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fa54:	e9cd 7a00 	strd	r7, sl, [sp]
 801fa58:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801fa5c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa5e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801fa60:	47a0      	blx	r4
 801fa62:	b015      	add	sp, #84	; 0x54
 801fa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa68:	2300      	movs	r3, #0
 801fa6a:	e7c3      	b.n	801f9f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801fa6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa6e:	e6e0      	b.n	801f832 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801fa70:	22ff      	movs	r2, #255	; 0xff
 801fa72:	e6fc      	b.n	801f86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801fa74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa76:	7003      	strb	r3, [r0, #0]
 801fa78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa7a:	7043      	strb	r3, [r0, #1]
 801fa7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa7e:	7083      	strb	r3, [r0, #2]
 801fa80:	e789      	b.n	801f996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801fa82:	9b08      	ldr	r3, [sp, #32]
 801fa84:	b153      	cbz	r3, 801fa9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801fa86:	441c      	add	r4, r3
 801fa88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa8a:	b2a4      	uxth	r4, r4
 801fa8c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fa90:	f004 0407 	and.w	r4, r4, #7
 801fa94:	7819      	ldrb	r1, [r3, #0]
 801fa96:	9324      	str	r3, [sp, #144]	; 0x90
 801fa98:	4121      	asrs	r1, r4
 801fa9a:	b2c9      	uxtb	r1, r1
 801fa9c:	9b07      	ldr	r3, [sp, #28]
 801fa9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801faa2:	445b      	add	r3, fp
 801faa4:	9307      	str	r3, [sp, #28]
 801faa6:	e72a      	b.n	801f8fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801faa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d1d9      	bne.n	801fa62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801faae:	4b04      	ldr	r3, [pc, #16]	; (801fac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801fab0:	6818      	ldr	r0, [r3, #0]
 801fab2:	6803      	ldr	r3, [r0, #0]
 801fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fab6:	4798      	blx	r3
 801fab8:	e7d3      	b.n	801fa62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801faba:	bf00      	nop
 801fabc:	2000c634 	.word	0x2000c634
 801fac0:	2000c63c 	.word	0x2000c63c
 801fac4:	2000c636 	.word	0x2000c636
 801fac8:	2b00      	cmp	r3, #0
 801faca:	f43f aea9 	beq.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801face:	2180      	movs	r1, #128	; 0x80
 801fad0:	e79a      	b.n	801fa08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801fad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fad4:	b11b      	cbz	r3, 801fade <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801fad6:	07fb      	lsls	r3, r7, #31
 801fad8:	d501      	bpl.n	801fade <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801fada:	3701      	adds	r7, #1
 801fadc:	b2bf      	uxth	r7, r7
 801fade:	2211      	movs	r2, #17
 801fae0:	e6c5      	b.n	801f86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801fae2:	2255      	movs	r2, #85	; 0x55
 801fae4:	e6c3      	b.n	801f86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801fae6:	bf00      	nop

0801fae8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fae8:	b538      	push	{r3, r4, r5, lr}
 801faea:	4c15      	ldr	r4, [pc, #84]	; (801fb40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801faec:	4605      	mov	r5, r0
 801faee:	7823      	ldrb	r3, [r4, #0]
 801faf0:	f3bf 8f5b 	dmb	ish
 801faf4:	07da      	lsls	r2, r3, #31
 801faf6:	d40b      	bmi.n	801fb10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801faf8:	4620      	mov	r0, r4
 801fafa:	f006 fd5b 	bl	80265b4 <__cxa_guard_acquire>
 801fafe:	b138      	cbz	r0, 801fb10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb00:	4620      	mov	r0, r4
 801fb02:	f006 fd63 	bl	80265cc <__cxa_guard_release>
 801fb06:	4a0f      	ldr	r2, [pc, #60]	; (801fb44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb08:	490f      	ldr	r1, [pc, #60]	; (801fb48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fb0a:	4810      	ldr	r0, [pc, #64]	; (801fb4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb0c:	f006 fd4b 	bl	80265a6 <__aeabi_atexit>
 801fb10:	4c0f      	ldr	r4, [pc, #60]	; (801fb50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fb12:	7823      	ldrb	r3, [r4, #0]
 801fb14:	f3bf 8f5b 	dmb	ish
 801fb18:	07db      	lsls	r3, r3, #31
 801fb1a:	d40b      	bmi.n	801fb34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f006 fd49 	bl	80265b4 <__cxa_guard_acquire>
 801fb22:	b138      	cbz	r0, 801fb34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb24:	4620      	mov	r0, r4
 801fb26:	f006 fd51 	bl	80265cc <__cxa_guard_release>
 801fb2a:	4a06      	ldr	r2, [pc, #24]	; (801fb44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb2c:	4909      	ldr	r1, [pc, #36]	; (801fb54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fb2e:	480a      	ldr	r0, [pc, #40]	; (801fb58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb30:	f006 fd39 	bl	80265a6 <__aeabi_atexit>
 801fb34:	4b05      	ldr	r3, [pc, #20]	; (801fb4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb36:	612b      	str	r3, [r5, #16]
 801fb38:	4b07      	ldr	r3, [pc, #28]	; (801fb58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb3a:	616b      	str	r3, [r5, #20]
 801fb3c:	bd38      	pop	{r3, r4, r5, pc}
 801fb3e:	bf00      	nop
 801fb40:	2000c748 	.word	0x2000c748
 801fb44:	20000000 	.word	0x20000000
 801fb48:	0801e71f 	.word	0x0801e71f
 801fb4c:	20000090 	.word	0x20000090
 801fb50:	2000c74c 	.word	0x2000c74c
 801fb54:	0801e71d 	.word	0x0801e71d
 801fb58:	20000094 	.word	0x20000094

0801fb5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fb5c:	b538      	push	{r3, r4, r5, lr}
 801fb5e:	4c15      	ldr	r4, [pc, #84]	; (801fbb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fb60:	4605      	mov	r5, r0
 801fb62:	7823      	ldrb	r3, [r4, #0]
 801fb64:	f3bf 8f5b 	dmb	ish
 801fb68:	07da      	lsls	r2, r3, #31
 801fb6a:	d40b      	bmi.n	801fb84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb6c:	4620      	mov	r0, r4
 801fb6e:	f006 fd21 	bl	80265b4 <__cxa_guard_acquire>
 801fb72:	b138      	cbz	r0, 801fb84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb74:	4620      	mov	r0, r4
 801fb76:	f006 fd29 	bl	80265cc <__cxa_guard_release>
 801fb7a:	4a0f      	ldr	r2, [pc, #60]	; (801fbb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fb7c:	490f      	ldr	r1, [pc, #60]	; (801fbbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fb7e:	4810      	ldr	r0, [pc, #64]	; (801fbc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fb80:	f006 fd11 	bl	80265a6 <__aeabi_atexit>
 801fb84:	4c0f      	ldr	r4, [pc, #60]	; (801fbc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fb86:	7823      	ldrb	r3, [r4, #0]
 801fb88:	f3bf 8f5b 	dmb	ish
 801fb8c:	07db      	lsls	r3, r3, #31
 801fb8e:	d40b      	bmi.n	801fba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fb90:	4620      	mov	r0, r4
 801fb92:	f006 fd0f 	bl	80265b4 <__cxa_guard_acquire>
 801fb96:	b138      	cbz	r0, 801fba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fb98:	4620      	mov	r0, r4
 801fb9a:	f006 fd17 	bl	80265cc <__cxa_guard_release>
 801fb9e:	4a06      	ldr	r2, [pc, #24]	; (801fbb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fba0:	4909      	ldr	r1, [pc, #36]	; (801fbc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fba2:	480a      	ldr	r0, [pc, #40]	; (801fbcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fba4:	f006 fcff 	bl	80265a6 <__aeabi_atexit>
 801fba8:	4b05      	ldr	r3, [pc, #20]	; (801fbc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fbaa:	60ab      	str	r3, [r5, #8]
 801fbac:	4b07      	ldr	r3, [pc, #28]	; (801fbcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fbae:	60eb      	str	r3, [r5, #12]
 801fbb0:	bd38      	pop	{r3, r4, r5, pc}
 801fbb2:	bf00      	nop
 801fbb4:	2000c728 	.word	0x2000c728
 801fbb8:	20000000 	.word	0x20000000
 801fbbc:	0801e723 	.word	0x0801e723
 801fbc0:	20000070 	.word	0x20000070
 801fbc4:	2000c72c 	.word	0x2000c72c
 801fbc8:	0801e721 	.word	0x0801e721
 801fbcc:	20000074 	.word	0x20000074

0801fbd0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801fbd0:	b510      	push	{r4, lr}
 801fbd2:	4604      	mov	r4, r0
 801fbd4:	f7ff ff88 	bl	801fae8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fbd8:	4620      	mov	r0, r4
 801fbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbde:	f7ff bfbd 	b.w	801fb5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fbe4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fbe4:	b538      	push	{r3, r4, r5, lr}
 801fbe6:	4c15      	ldr	r4, [pc, #84]	; (801fc3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fbe8:	4605      	mov	r5, r0
 801fbea:	7823      	ldrb	r3, [r4, #0]
 801fbec:	f3bf 8f5b 	dmb	ish
 801fbf0:	07da      	lsls	r2, r3, #31
 801fbf2:	d40b      	bmi.n	801fc0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	f006 fcdd 	bl	80265b4 <__cxa_guard_acquire>
 801fbfa:	b138      	cbz	r0, 801fc0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	f006 fce5 	bl	80265cc <__cxa_guard_release>
 801fc02:	4a0f      	ldr	r2, [pc, #60]	; (801fc40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc04:	490f      	ldr	r1, [pc, #60]	; (801fc44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fc06:	4810      	ldr	r0, [pc, #64]	; (801fc48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc08:	f006 fccd 	bl	80265a6 <__aeabi_atexit>
 801fc0c:	4c0f      	ldr	r4, [pc, #60]	; (801fc4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fc0e:	7823      	ldrb	r3, [r4, #0]
 801fc10:	f3bf 8f5b 	dmb	ish
 801fc14:	07db      	lsls	r3, r3, #31
 801fc16:	d40b      	bmi.n	801fc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f006 fccb 	bl	80265b4 <__cxa_guard_acquire>
 801fc1e:	b138      	cbz	r0, 801fc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc20:	4620      	mov	r0, r4
 801fc22:	f006 fcd3 	bl	80265cc <__cxa_guard_release>
 801fc26:	4a06      	ldr	r2, [pc, #24]	; (801fc40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc28:	4909      	ldr	r1, [pc, #36]	; (801fc50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fc2a:	480a      	ldr	r0, [pc, #40]	; (801fc54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc2c:	f006 fcbb 	bl	80265a6 <__aeabi_atexit>
 801fc30:	4b05      	ldr	r3, [pc, #20]	; (801fc48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc32:	622b      	str	r3, [r5, #32]
 801fc34:	4b07      	ldr	r3, [pc, #28]	; (801fc54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc36:	626b      	str	r3, [r5, #36]	; 0x24
 801fc38:	bd38      	pop	{r3, r4, r5, pc}
 801fc3a:	bf00      	nop
 801fc3c:	2000c750 	.word	0x2000c750
 801fc40:	20000000 	.word	0x20000000
 801fc44:	0801e717 	.word	0x0801e717
 801fc48:	20000098 	.word	0x20000098
 801fc4c:	2000c754 	.word	0x2000c754
 801fc50:	0801e715 	.word	0x0801e715
 801fc54:	2000009c 	.word	0x2000009c

0801fc58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fc58:	b538      	push	{r3, r4, r5, lr}
 801fc5a:	4c15      	ldr	r4, [pc, #84]	; (801fcb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fc5c:	4605      	mov	r5, r0
 801fc5e:	7823      	ldrb	r3, [r4, #0]
 801fc60:	f3bf 8f5b 	dmb	ish
 801fc64:	07da      	lsls	r2, r3, #31
 801fc66:	d40b      	bmi.n	801fc80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc68:	4620      	mov	r0, r4
 801fc6a:	f006 fca3 	bl	80265b4 <__cxa_guard_acquire>
 801fc6e:	b138      	cbz	r0, 801fc80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc70:	4620      	mov	r0, r4
 801fc72:	f006 fcab 	bl	80265cc <__cxa_guard_release>
 801fc76:	4a0f      	ldr	r2, [pc, #60]	; (801fcb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fc78:	490f      	ldr	r1, [pc, #60]	; (801fcb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fc7a:	4810      	ldr	r0, [pc, #64]	; (801fcbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fc7c:	f006 fc93 	bl	80265a6 <__aeabi_atexit>
 801fc80:	4c0f      	ldr	r4, [pc, #60]	; (801fcc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fc82:	7823      	ldrb	r3, [r4, #0]
 801fc84:	f3bf 8f5b 	dmb	ish
 801fc88:	07db      	lsls	r3, r3, #31
 801fc8a:	d40b      	bmi.n	801fca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f006 fc91 	bl	80265b4 <__cxa_guard_acquire>
 801fc92:	b138      	cbz	r0, 801fca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fc94:	4620      	mov	r0, r4
 801fc96:	f006 fc99 	bl	80265cc <__cxa_guard_release>
 801fc9a:	4a06      	ldr	r2, [pc, #24]	; (801fcb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fc9c:	4909      	ldr	r1, [pc, #36]	; (801fcc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fc9e:	480a      	ldr	r0, [pc, #40]	; (801fcc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fca0:	f006 fc81 	bl	80265a6 <__aeabi_atexit>
 801fca4:	4b05      	ldr	r3, [pc, #20]	; (801fcbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fca6:	61ab      	str	r3, [r5, #24]
 801fca8:	4b07      	ldr	r3, [pc, #28]	; (801fcc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fcaa:	61eb      	str	r3, [r5, #28]
 801fcac:	bd38      	pop	{r3, r4, r5, pc}
 801fcae:	bf00      	nop
 801fcb0:	2000c730 	.word	0x2000c730
 801fcb4:	20000000 	.word	0x20000000
 801fcb8:	0801e71b 	.word	0x0801e71b
 801fcbc:	20000078 	.word	0x20000078
 801fcc0:	2000c734 	.word	0x2000c734
 801fcc4:	0801e719 	.word	0x0801e719
 801fcc8:	2000007c 	.word	0x2000007c

0801fccc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fccc:	b510      	push	{r4, lr}
 801fcce:	4604      	mov	r4, r0
 801fcd0:	f7ff ff88 	bl	801fbe4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fcd4:	4620      	mov	r0, r4
 801fcd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcda:	f7ff bfbd 	b.w	801fc58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fce0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fce0:	b538      	push	{r3, r4, r5, lr}
 801fce2:	4c15      	ldr	r4, [pc, #84]	; (801fd38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fce4:	4605      	mov	r5, r0
 801fce6:	7823      	ldrb	r3, [r4, #0]
 801fce8:	f3bf 8f5b 	dmb	ish
 801fcec:	07da      	lsls	r2, r3, #31
 801fcee:	d40b      	bmi.n	801fd08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f006 fc5f 	bl	80265b4 <__cxa_guard_acquire>
 801fcf6:	b138      	cbz	r0, 801fd08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fcf8:	4620      	mov	r0, r4
 801fcfa:	f006 fc67 	bl	80265cc <__cxa_guard_release>
 801fcfe:	4a0f      	ldr	r2, [pc, #60]	; (801fd3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd00:	490f      	ldr	r1, [pc, #60]	; (801fd40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fd02:	4810      	ldr	r0, [pc, #64]	; (801fd44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd04:	f006 fc4f 	bl	80265a6 <__aeabi_atexit>
 801fd08:	4c0f      	ldr	r4, [pc, #60]	; (801fd48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fd0a:	7823      	ldrb	r3, [r4, #0]
 801fd0c:	f3bf 8f5b 	dmb	ish
 801fd10:	07db      	lsls	r3, r3, #31
 801fd12:	d40b      	bmi.n	801fd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd14:	4620      	mov	r0, r4
 801fd16:	f006 fc4d 	bl	80265b4 <__cxa_guard_acquire>
 801fd1a:	b138      	cbz	r0, 801fd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	f006 fc55 	bl	80265cc <__cxa_guard_release>
 801fd22:	4a06      	ldr	r2, [pc, #24]	; (801fd3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd24:	4909      	ldr	r1, [pc, #36]	; (801fd4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801fd26:	480a      	ldr	r0, [pc, #40]	; (801fd50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd28:	f006 fc3d 	bl	80265a6 <__aeabi_atexit>
 801fd2c:	4b05      	ldr	r3, [pc, #20]	; (801fd44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd2e:	632b      	str	r3, [r5, #48]	; 0x30
 801fd30:	4b07      	ldr	r3, [pc, #28]	; (801fd50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd32:	636b      	str	r3, [r5, #52]	; 0x34
 801fd34:	bd38      	pop	{r3, r4, r5, pc}
 801fd36:	bf00      	nop
 801fd38:	2000c738 	.word	0x2000c738
 801fd3c:	20000000 	.word	0x20000000
 801fd40:	0801e70f 	.word	0x0801e70f
 801fd44:	20000080 	.word	0x20000080
 801fd48:	2000c73c 	.word	0x2000c73c
 801fd4c:	0801e70d 	.word	0x0801e70d
 801fd50:	20000084 	.word	0x20000084

0801fd54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801fd54:	b538      	push	{r3, r4, r5, lr}
 801fd56:	4c15      	ldr	r4, [pc, #84]	; (801fdac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801fd58:	4605      	mov	r5, r0
 801fd5a:	7823      	ldrb	r3, [r4, #0]
 801fd5c:	f3bf 8f5b 	dmb	ish
 801fd60:	07da      	lsls	r2, r3, #31
 801fd62:	d40b      	bmi.n	801fd7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fd64:	4620      	mov	r0, r4
 801fd66:	f006 fc25 	bl	80265b4 <__cxa_guard_acquire>
 801fd6a:	b138      	cbz	r0, 801fd7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	f006 fc2d 	bl	80265cc <__cxa_guard_release>
 801fd72:	4a0f      	ldr	r2, [pc, #60]	; (801fdb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fd74:	490f      	ldr	r1, [pc, #60]	; (801fdb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801fd76:	4810      	ldr	r0, [pc, #64]	; (801fdb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fd78:	f006 fc15 	bl	80265a6 <__aeabi_atexit>
 801fd7c:	4c0f      	ldr	r4, [pc, #60]	; (801fdbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801fd7e:	7823      	ldrb	r3, [r4, #0]
 801fd80:	f3bf 8f5b 	dmb	ish
 801fd84:	07db      	lsls	r3, r3, #31
 801fd86:	d40b      	bmi.n	801fda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fd88:	4620      	mov	r0, r4
 801fd8a:	f006 fc13 	bl	80265b4 <__cxa_guard_acquire>
 801fd8e:	b138      	cbz	r0, 801fda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fd90:	4620      	mov	r0, r4
 801fd92:	f006 fc1b 	bl	80265cc <__cxa_guard_release>
 801fd96:	4a06      	ldr	r2, [pc, #24]	; (801fdb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fd98:	4909      	ldr	r1, [pc, #36]	; (801fdc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801fd9a:	480a      	ldr	r0, [pc, #40]	; (801fdc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fd9c:	f006 fc03 	bl	80265a6 <__aeabi_atexit>
 801fda0:	4b05      	ldr	r3, [pc, #20]	; (801fdb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fda2:	62ab      	str	r3, [r5, #40]	; 0x28
 801fda4:	4b07      	ldr	r3, [pc, #28]	; (801fdc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fda6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801fda8:	bd38      	pop	{r3, r4, r5, pc}
 801fdaa:	bf00      	nop
 801fdac:	2000c710 	.word	0x2000c710
 801fdb0:	20000000 	.word	0x20000000
 801fdb4:	0801e713 	.word	0x0801e713
 801fdb8:	20000058 	.word	0x20000058
 801fdbc:	2000c714 	.word	0x2000c714
 801fdc0:	0801e711 	.word	0x0801e711
 801fdc4:	2000005c 	.word	0x2000005c

0801fdc8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801fdc8:	b510      	push	{r4, lr}
 801fdca:	4604      	mov	r4, r0
 801fdcc:	f7ff ff88 	bl	801fce0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdd6:	f7ff bfbd 	b.w	801fd54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801fddc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801fddc:	b538      	push	{r3, r4, r5, lr}
 801fdde:	4c15      	ldr	r4, [pc, #84]	; (801fe34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fde0:	4605      	mov	r5, r0
 801fde2:	7823      	ldrb	r3, [r4, #0]
 801fde4:	f3bf 8f5b 	dmb	ish
 801fde8:	07da      	lsls	r2, r3, #31
 801fdea:	d40b      	bmi.n	801fe04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fdec:	4620      	mov	r0, r4
 801fdee:	f006 fbe1 	bl	80265b4 <__cxa_guard_acquire>
 801fdf2:	b138      	cbz	r0, 801fe04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fdf4:	4620      	mov	r0, r4
 801fdf6:	f006 fbe9 	bl	80265cc <__cxa_guard_release>
 801fdfa:	4a0f      	ldr	r2, [pc, #60]	; (801fe38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fdfc:	490f      	ldr	r1, [pc, #60]	; (801fe3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801fdfe:	4810      	ldr	r0, [pc, #64]	; (801fe40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe00:	f006 fbd1 	bl	80265a6 <__aeabi_atexit>
 801fe04:	4c0f      	ldr	r4, [pc, #60]	; (801fe44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fe06:	7823      	ldrb	r3, [r4, #0]
 801fe08:	f3bf 8f5b 	dmb	ish
 801fe0c:	07db      	lsls	r3, r3, #31
 801fe0e:	d40b      	bmi.n	801fe28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe10:	4620      	mov	r0, r4
 801fe12:	f006 fbcf 	bl	80265b4 <__cxa_guard_acquire>
 801fe16:	b138      	cbz	r0, 801fe28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe18:	4620      	mov	r0, r4
 801fe1a:	f006 fbd7 	bl	80265cc <__cxa_guard_release>
 801fe1e:	4a06      	ldr	r2, [pc, #24]	; (801fe38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fe20:	4909      	ldr	r1, [pc, #36]	; (801fe48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801fe22:	480a      	ldr	r0, [pc, #40]	; (801fe4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe24:	f006 fbbf 	bl	80265a6 <__aeabi_atexit>
 801fe28:	4b05      	ldr	r3, [pc, #20]	; (801fe40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe2a:	642b      	str	r3, [r5, #64]	; 0x40
 801fe2c:	4b07      	ldr	r3, [pc, #28]	; (801fe4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe2e:	646b      	str	r3, [r5, #68]	; 0x44
 801fe30:	bd38      	pop	{r3, r4, r5, pc}
 801fe32:	bf00      	nop
 801fe34:	2000c740 	.word	0x2000c740
 801fe38:	20000000 	.word	0x20000000
 801fe3c:	0801e707 	.word	0x0801e707
 801fe40:	20000088 	.word	0x20000088
 801fe44:	2000c744 	.word	0x2000c744
 801fe48:	0801e705 	.word	0x0801e705
 801fe4c:	2000008c 	.word	0x2000008c

0801fe50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801fe50:	b538      	push	{r3, r4, r5, lr}
 801fe52:	4c15      	ldr	r4, [pc, #84]	; (801fea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801fe54:	4605      	mov	r5, r0
 801fe56:	7823      	ldrb	r3, [r4, #0]
 801fe58:	f3bf 8f5b 	dmb	ish
 801fe5c:	07da      	lsls	r2, r3, #31
 801fe5e:	d40b      	bmi.n	801fe78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fe60:	4620      	mov	r0, r4
 801fe62:	f006 fba7 	bl	80265b4 <__cxa_guard_acquire>
 801fe66:	b138      	cbz	r0, 801fe78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fe68:	4620      	mov	r0, r4
 801fe6a:	f006 fbaf 	bl	80265cc <__cxa_guard_release>
 801fe6e:	4a0f      	ldr	r2, [pc, #60]	; (801feac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fe70:	490f      	ldr	r1, [pc, #60]	; (801feb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801fe72:	4810      	ldr	r0, [pc, #64]	; (801feb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fe74:	f006 fb97 	bl	80265a6 <__aeabi_atexit>
 801fe78:	4c0f      	ldr	r4, [pc, #60]	; (801feb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801fe7a:	7823      	ldrb	r3, [r4, #0]
 801fe7c:	f3bf 8f5b 	dmb	ish
 801fe80:	07db      	lsls	r3, r3, #31
 801fe82:	d40b      	bmi.n	801fe9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fe84:	4620      	mov	r0, r4
 801fe86:	f006 fb95 	bl	80265b4 <__cxa_guard_acquire>
 801fe8a:	b138      	cbz	r0, 801fe9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fe8c:	4620      	mov	r0, r4
 801fe8e:	f006 fb9d 	bl	80265cc <__cxa_guard_release>
 801fe92:	4a06      	ldr	r2, [pc, #24]	; (801feac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fe94:	4909      	ldr	r1, [pc, #36]	; (801febc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801fe96:	480a      	ldr	r0, [pc, #40]	; (801fec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fe98:	f006 fb85 	bl	80265a6 <__aeabi_atexit>
 801fe9c:	4b05      	ldr	r3, [pc, #20]	; (801feb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fe9e:	63ab      	str	r3, [r5, #56]	; 0x38
 801fea0:	4b07      	ldr	r3, [pc, #28]	; (801fec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fea2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fea4:	bd38      	pop	{r3, r4, r5, pc}
 801fea6:	bf00      	nop
 801fea8:	2000c720 	.word	0x2000c720
 801feac:	20000000 	.word	0x20000000
 801feb0:	0801e70b 	.word	0x0801e70b
 801feb4:	20000068 	.word	0x20000068
 801feb8:	2000c724 	.word	0x2000c724
 801febc:	0801e709 	.word	0x0801e709
 801fec0:	2000006c 	.word	0x2000006c

0801fec4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801fec4:	b510      	push	{r4, lr}
 801fec6:	4604      	mov	r4, r0
 801fec8:	f7ff ff88 	bl	801fddc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801fecc:	4620      	mov	r0, r4
 801fece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fed2:	f7ff bfbd 	b.w	801fe50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801fed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801fed8:	b538      	push	{r3, r4, r5, lr}
 801feda:	4c15      	ldr	r4, [pc, #84]	; (801ff30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801fedc:	4605      	mov	r5, r0
 801fede:	7823      	ldrb	r3, [r4, #0]
 801fee0:	f3bf 8f5b 	dmb	ish
 801fee4:	07da      	lsls	r2, r3, #31
 801fee6:	d40b      	bmi.n	801ff00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fee8:	4620      	mov	r0, r4
 801feea:	f006 fb63 	bl	80265b4 <__cxa_guard_acquire>
 801feee:	b138      	cbz	r0, 801ff00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fef0:	4620      	mov	r0, r4
 801fef2:	f006 fb6b 	bl	80265cc <__cxa_guard_release>
 801fef6:	4a0f      	ldr	r2, [pc, #60]	; (801ff34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fef8:	490f      	ldr	r1, [pc, #60]	; (801ff38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801fefa:	4810      	ldr	r0, [pc, #64]	; (801ff3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fefc:	f006 fb53 	bl	80265a6 <__aeabi_atexit>
 801ff00:	4c0f      	ldr	r4, [pc, #60]	; (801ff40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ff02:	7823      	ldrb	r3, [r4, #0]
 801ff04:	f3bf 8f5b 	dmb	ish
 801ff08:	07db      	lsls	r3, r3, #31
 801ff0a:	d40b      	bmi.n	801ff24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f006 fb51 	bl	80265b4 <__cxa_guard_acquire>
 801ff12:	b138      	cbz	r0, 801ff24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff14:	4620      	mov	r0, r4
 801ff16:	f006 fb59 	bl	80265cc <__cxa_guard_release>
 801ff1a:	4a06      	ldr	r2, [pc, #24]	; (801ff34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ff1c:	4909      	ldr	r1, [pc, #36]	; (801ff44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ff1e:	480a      	ldr	r0, [pc, #40]	; (801ff48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff20:	f006 fb41 	bl	80265a6 <__aeabi_atexit>
 801ff24:	4b05      	ldr	r3, [pc, #20]	; (801ff3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ff26:	652b      	str	r3, [r5, #80]	; 0x50
 801ff28:	4b07      	ldr	r3, [pc, #28]	; (801ff48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff2a:	656b      	str	r3, [r5, #84]	; 0x54
 801ff2c:	bd38      	pop	{r3, r4, r5, pc}
 801ff2e:	bf00      	nop
 801ff30:	2000c718 	.word	0x2000c718
 801ff34:	20000000 	.word	0x20000000
 801ff38:	0801e6ff 	.word	0x0801e6ff
 801ff3c:	20000060 	.word	0x20000060
 801ff40:	2000c71c 	.word	0x2000c71c
 801ff44:	0801e6fd 	.word	0x0801e6fd
 801ff48:	20000064 	.word	0x20000064

0801ff4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ff4c:	b538      	push	{r3, r4, r5, lr}
 801ff4e:	4c15      	ldr	r4, [pc, #84]	; (801ffa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ff50:	4605      	mov	r5, r0
 801ff52:	7823      	ldrb	r3, [r4, #0]
 801ff54:	f3bf 8f5b 	dmb	ish
 801ff58:	07da      	lsls	r2, r3, #31
 801ff5a:	d40b      	bmi.n	801ff74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	f006 fb29 	bl	80265b4 <__cxa_guard_acquire>
 801ff62:	b138      	cbz	r0, 801ff74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ff64:	4620      	mov	r0, r4
 801ff66:	f006 fb31 	bl	80265cc <__cxa_guard_release>
 801ff6a:	4a0f      	ldr	r2, [pc, #60]	; (801ffa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ff6c:	490f      	ldr	r1, [pc, #60]	; (801ffac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ff6e:	4810      	ldr	r0, [pc, #64]	; (801ffb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ff70:	f006 fb19 	bl	80265a6 <__aeabi_atexit>
 801ff74:	4c0f      	ldr	r4, [pc, #60]	; (801ffb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ff76:	7823      	ldrb	r3, [r4, #0]
 801ff78:	f3bf 8f5b 	dmb	ish
 801ff7c:	07db      	lsls	r3, r3, #31
 801ff7e:	d40b      	bmi.n	801ff98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ff80:	4620      	mov	r0, r4
 801ff82:	f006 fb17 	bl	80265b4 <__cxa_guard_acquire>
 801ff86:	b138      	cbz	r0, 801ff98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ff88:	4620      	mov	r0, r4
 801ff8a:	f006 fb1f 	bl	80265cc <__cxa_guard_release>
 801ff8e:	4a06      	ldr	r2, [pc, #24]	; (801ffa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ff90:	4909      	ldr	r1, [pc, #36]	; (801ffb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ff92:	480a      	ldr	r0, [pc, #40]	; (801ffbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ff94:	f006 fb07 	bl	80265a6 <__aeabi_atexit>
 801ff98:	4b05      	ldr	r3, [pc, #20]	; (801ffb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ff9a:	64ab      	str	r3, [r5, #72]	; 0x48
 801ff9c:	4b07      	ldr	r3, [pc, #28]	; (801ffbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ff9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ffa0:	bd38      	pop	{r3, r4, r5, pc}
 801ffa2:	bf00      	nop
 801ffa4:	2000c708 	.word	0x2000c708
 801ffa8:	20000000 	.word	0x20000000
 801ffac:	0801e703 	.word	0x0801e703
 801ffb0:	20000050 	.word	0x20000050
 801ffb4:	2000c70c 	.word	0x2000c70c
 801ffb8:	0801e701 	.word	0x0801e701
 801ffbc:	20000054 	.word	0x20000054

0801ffc0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ffc0:	b510      	push	{r4, lr}
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	f7ff ff88 	bl	801fed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ffc8:	4620      	mov	r0, r4
 801ffca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffce:	f7ff bfbd 	b.w	801ff4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801ffd2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801ffd2:	b510      	push	{r4, lr}
 801ffd4:	4604      	mov	r4, r0
 801ffd6:	f7ff fff3 	bl	801ffc0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ffda:	4620      	mov	r0, r4
 801ffdc:	f7ff ff72 	bl	801fec4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ffe0:	4620      	mov	r0, r4
 801ffe2:	f7ff fe73 	bl	801fccc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ffe6:	4620      	mov	r0, r4
 801ffe8:	f7ff fdf2 	bl	801fbd0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ffec:	4620      	mov	r0, r4
 801ffee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fff2:	f7ff bee9 	b.w	801fdc8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801fff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fffc:	b087      	sub	sp, #28
 801fffe:	7888      	ldrb	r0, [r1, #2]
 8020000:	4616      	mov	r6, r2
 8020002:	9001      	str	r0, [sp, #4]
 8020004:	7848      	ldrb	r0, [r1, #1]
 8020006:	9100      	str	r1, [sp, #0]
 8020008:	9002      	str	r0, [sp, #8]
 802000a:	7808      	ldrb	r0, [r1, #0]
 802000c:	9901      	ldr	r1, [sp, #4]
 802000e:	9003      	str	r0, [sp, #12]
 8020010:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020014:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8020018:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 802001c:	9902      	ldr	r1, [sp, #8]
 802001e:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020022:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8020026:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 802002a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802002e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020032:	9005      	str	r0, [sp, #20]
 8020034:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020038:	fb05 ca0e 	mla	sl, r5, lr, ip
 802003c:	2d00      	cmp	r5, #0
 802003e:	eb06 080a 	add.w	r8, r6, sl
 8020042:	db4a      	blt.n	80200da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020044:	45a9      	cmp	r9, r5
 8020046:	dd48      	ble.n	80200da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020048:	f1bc 0f00 	cmp.w	ip, #0
 802004c:	db43      	blt.n	80200d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802004e:	45e6      	cmp	lr, ip
 8020050:	dd41      	ble.n	80200d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8020052:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020056:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802005a:	441e      	add	r6, r3
 802005c:	f11c 0001 	adds.w	r0, ip, #1
 8020060:	d43e      	bmi.n	80200e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020062:	4586      	cmp	lr, r0
 8020064:	dd3c      	ble.n	80200e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020066:	2a00      	cmp	r2, #0
 8020068:	d03a      	beq.n	80200e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802006a:	f898 0001 	ldrb.w	r0, [r8, #1]
 802006e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020072:	4418      	add	r0, r3
 8020074:	3501      	adds	r5, #1
 8020076:	d437      	bmi.n	80200e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8020078:	45a9      	cmp	r9, r5
 802007a:	dd35      	ble.n	80200e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802007c:	b3a4      	cbz	r4, 80200e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802007e:	f1bc 0f00 	cmp.w	ip, #0
 8020082:	db2f      	blt.n	80200e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8020084:	45e6      	cmp	lr, ip
 8020086:	dd2d      	ble.n	80200e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8020088:	f818 500e 	ldrb.w	r5, [r8, lr]
 802008c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020090:	441d      	add	r5, r3
 8020092:	f11c 0c01 	adds.w	ip, ip, #1
 8020096:	d42a      	bmi.n	80200ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8020098:	45e6      	cmp	lr, ip
 802009a:	dd28      	ble.n	80200ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802009c:	b33a      	cbz	r2, 80200ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802009e:	44c6      	add	lr, r8
 80200a0:	f89e c001 	ldrb.w	ip, [lr, #1]
 80200a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80200a8:	4463      	add	r3, ip
 80200aa:	ea6f 0c07 	mvn.w	ip, r7
 80200ae:	2a0f      	cmp	r2, #15
 80200b0:	f896 a000 	ldrb.w	sl, [r6]
 80200b4:	fa5f fc8c 	uxtb.w	ip, ip
 80200b8:	f890 b000 	ldrb.w	fp, [r0]
 80200bc:	f895 9000 	ldrb.w	r9, [r5]
 80200c0:	7819      	ldrb	r1, [r3, #0]
 80200c2:	d801      	bhi.n	80200c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80200c4:	2c0f      	cmp	r4, #15
 80200c6:	d914      	bls.n	80200f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80200c8:	4b40      	ldr	r3, [pc, #256]	; (80201cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80200ca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80200ce:	4a40      	ldr	r2, [pc, #256]	; (80201d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80200d0:	4840      	ldr	r0, [pc, #256]	; (80201d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80200d2:	f006 fa9b 	bl	802660c <__assert_func>
 80200d6:	ae05      	add	r6, sp, #20
 80200d8:	e7c0      	b.n	802005c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80200da:	a805      	add	r0, sp, #20
 80200dc:	4606      	mov	r6, r0
 80200de:	e7c9      	b.n	8020074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80200e0:	a805      	add	r0, sp, #20
 80200e2:	e7c7      	b.n	8020074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80200e4:	ad05      	add	r5, sp, #20
 80200e6:	e7d4      	b.n	8020092 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80200e8:	ab05      	add	r3, sp, #20
 80200ea:	461d      	mov	r5, r3
 80200ec:	e7dd      	b.n	80200aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80200ee:	ab05      	add	r3, sp, #20
 80200f0:	e7db      	b.n	80200aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80200f2:	b292      	uxth	r2, r2
 80200f4:	b2a4      	uxth	r4, r4
 80200f6:	fa1f fc8c 	uxth.w	ip, ip
 80200fa:	fb02 f804 	mul.w	r8, r2, r4
 80200fe:	0112      	lsls	r2, r2, #4
 8020100:	b2bf      	uxth	r7, r7
 8020102:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8020106:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802010a:	eba2 0208 	sub.w	r2, r2, r8
 802010e:	b2a4      	uxth	r4, r4
 8020110:	b292      	uxth	r2, r2
 8020112:	ebae 0e04 	sub.w	lr, lr, r4
 8020116:	fb02 fb0b 	mul.w	fp, r2, fp
 802011a:	fa1f fe8e 	uxth.w	lr, lr
 802011e:	fb0e ba0a 	mla	sl, lr, sl, fp
 8020122:	fb04 aa09 	mla	sl, r4, r9, sl
 8020126:	fb08 aa01 	mla	sl, r8, r1, sl
 802012a:	9903      	ldr	r1, [sp, #12]
 802012c:	fb11 f90c 	smulbb	r9, r1, ip
 8020130:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020134:	9900      	ldr	r1, [sp, #0]
 8020136:	fb0a 9a07 	mla	sl, sl, r7, r9
 802013a:	fa1f fa8a 	uxth.w	sl, sl
 802013e:	f10a 0901 	add.w	r9, sl, #1
 8020142:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8020146:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802014a:	f881 a000 	strb.w	sl, [r1]
 802014e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020152:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020156:	fb02 fa0a 	mul.w	sl, r2, sl
 802015a:	9902      	ldr	r1, [sp, #8]
 802015c:	fb0e aa09 	mla	sl, lr, r9, sl
 8020160:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020164:	fb04 aa09 	mla	sl, r4, r9, sl
 8020168:	f893 9001 	ldrb.w	r9, [r3, #1]
 802016c:	fb08 a909 	mla	r9, r8, r9, sl
 8020170:	fb11 fa0c 	smulbb	sl, r1, ip
 8020174:	9900      	ldr	r1, [sp, #0]
 8020176:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802017a:	fb09 a907 	mla	r9, r9, r7, sl
 802017e:	fa1f f989 	uxth.w	r9, r9
 8020182:	f109 0a01 	add.w	sl, r9, #1
 8020186:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802018a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802018e:	f881 9001 	strb.w	r9, [r1, #1]
 8020192:	7880      	ldrb	r0, [r0, #2]
 8020194:	78b6      	ldrb	r6, [r6, #2]
 8020196:	4342      	muls	r2, r0
 8020198:	78a8      	ldrb	r0, [r5, #2]
 802019a:	789b      	ldrb	r3, [r3, #2]
 802019c:	fb0e 2206 	mla	r2, lr, r6, r2
 80201a0:	fb04 2400 	mla	r4, r4, r0, r2
 80201a4:	fb08 4803 	mla	r8, r8, r3, r4
 80201a8:	9b01      	ldr	r3, [sp, #4]
 80201aa:	fb13 fc0c 	smulbb	ip, r3, ip
 80201ae:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80201b2:	fb08 c707 	mla	r7, r8, r7, ip
 80201b6:	b2bf      	uxth	r7, r7
 80201b8:	f107 0c01 	add.w	ip, r7, #1
 80201bc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80201c0:	123f      	asrs	r7, r7, #8
 80201c2:	708f      	strb	r7, [r1, #2]
 80201c4:	b007      	add	sp, #28
 80201c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ca:	bf00      	nop
 80201cc:	0802b0d7 	.word	0x0802b0d7
 80201d0:	0802b5ce 	.word	0x0802b5ce
 80201d4:	0802b1a0 	.word	0x0802b1a0

080201d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80201d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201dc:	ed2d 8b08 	vpush	{d8-d11}
 80201e0:	b095      	sub	sp, #84	; 0x54
 80201e2:	eeb0 aa40 	vmov.f32	s20, s0
 80201e6:	eef0 9a60 	vmov.f32	s19, s1
 80201ea:	930a      	str	r3, [sp, #40]	; 0x28
 80201ec:	eeb0 9a41 	vmov.f32	s18, s2
 80201f0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80201f4:	eeb0 8a62 	vmov.f32	s16, s5
 80201f8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80201fa:	eef0 8a43 	vmov.f32	s17, s6
 80201fe:	930c      	str	r3, [sp, #48]	; 0x30
 8020200:	eef0 ba44 	vmov.f32	s23, s8
 8020204:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020208:	eeb0 ba64 	vmov.f32	s22, s9
 802020c:	9013      	str	r0, [sp, #76]	; 0x4c
 802020e:	eef0 aa45 	vmov.f32	s21, s10
 8020212:	9310      	str	r3, [sp, #64]	; 0x40
 8020214:	6860      	ldr	r0, [r4, #4]
 8020216:	910f      	str	r1, [sp, #60]	; 0x3c
 8020218:	9212      	str	r2, [sp, #72]	; 0x48
 802021a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802021c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8020220:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020224:	fb00 1303 	mla	r3, r0, r3, r1
 8020228:	6821      	ldr	r1, [r4, #0]
 802022a:	6854      	ldr	r4, [r2, #4]
 802022c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020230:	18cb      	adds	r3, r1, r3
 8020232:	930b      	str	r3, [sp, #44]	; 0x2c
 8020234:	6813      	ldr	r3, [r2, #0]
 8020236:	930e      	str	r3, [sp, #56]	; 0x38
 8020238:	1d23      	adds	r3, r4, #4
 802023a:	9309      	str	r3, [sp, #36]	; 0x24
 802023c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802023e:	43db      	mvns	r3, r3
 8020240:	b2db      	uxtb	r3, r3
 8020242:	930d      	str	r3, [sp, #52]	; 0x34
 8020244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020246:	2b00      	cmp	r3, #0
 8020248:	dc03      	bgt.n	8020252 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802024a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802024c:	2b00      	cmp	r3, #0
 802024e:	f340 823c 	ble.w	80206ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8020252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020254:	2b00      	cmp	r3, #0
 8020256:	f340 8115 	ble.w	8020484 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 802025a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802025c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802025e:	1412      	asrs	r2, r2, #16
 8020260:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020264:	d431      	bmi.n	80202ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020266:	1c51      	adds	r1, r2, #1
 8020268:	428d      	cmp	r5, r1
 802026a:	dd31      	ble.n	80202d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802026c:	2b00      	cmp	r3, #0
 802026e:	db2f      	blt.n	80202d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020270:	1c59      	adds	r1, r3, #1
 8020272:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020274:	4288      	cmp	r0, r1
 8020276:	dd2b      	ble.n	80202d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802027a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802027c:	3b01      	subs	r3, #1
 802027e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8020280:	fb02 1203 	mla	r2, r2, r3, r1
 8020284:	1412      	asrs	r2, r2, #16
 8020286:	d42d      	bmi.n	80202e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020288:	3201      	adds	r2, #1
 802028a:	4295      	cmp	r5, r2
 802028c:	dd2a      	ble.n	80202e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802028e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020290:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020292:	fb02 1303 	mla	r3, r2, r3, r1
 8020296:	141b      	asrs	r3, r3, #16
 8020298:	d424      	bmi.n	80202e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802029a:	3301      	adds	r3, #1
 802029c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802029e:	429a      	cmp	r2, r3
 80202a0:	dd20      	ble.n	80202e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 80202a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202a4:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80202a8:	f103 0c03 	add.w	ip, r3, #3
 80202ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ae:	9311      	str	r3, [sp, #68]	; 0x44
 80202b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	f300 814f 	bgt.w	8020556 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 80202b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80202bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80202c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202c4:	441a      	add	r2, r3
 80202c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80202c8:	e0de      	b.n	8020488 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80202ca:	1c51      	adds	r1, r2, #1
 80202cc:	f040 80cb 	bne.w	8020466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80202d0:	42aa      	cmp	r2, r5
 80202d2:	f280 80c8 	bge.w	8020466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80202d6:	1c5f      	adds	r7, r3, #1
 80202d8:	f2c0 80c5 	blt.w	8020466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80202dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80202de:	4293      	cmp	r3, r2
 80202e0:	f280 80c1 	bge.w	8020466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80202e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80202e8:	9311      	str	r3, [sp, #68]	; 0x44
 80202ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	dde3      	ble.n	80202b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80202f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80202f2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80202f4:	141a      	asrs	r2, r3, #16
 80202f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80202f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80202fa:	1400      	asrs	r0, r0, #16
 80202fc:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8020300:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020304:	f100 810e 	bmi.w	8020524 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020308:	1c46      	adds	r6, r0, #1
 802030a:	42b5      	cmp	r5, r6
 802030c:	f340 810c 	ble.w	8020528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020310:	2a00      	cmp	r2, #0
 8020312:	f2c0 8109 	blt.w	8020528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020316:	1c56      	adds	r6, r2, #1
 8020318:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802031a:	42b4      	cmp	r4, r6
 802031c:	f340 8104 	ble.w	8020528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020320:	fb02 0005 	mla	r0, r2, r5, r0
 8020324:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020328:	f814 e000 	ldrb.w	lr, [r4, r0]
 802032c:	4402      	add	r2, r0
 802032e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020330:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020334:	eb00 080e 	add.w	r8, r0, lr
 8020338:	2b00      	cmp	r3, #0
 802033a:	f000 80e4 	beq.w	8020506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 802033e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8020342:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020346:	4484      	add	ip, r0
 8020348:	2900      	cmp	r1, #0
 802034a:	f000 80e5 	beq.w	8020518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 802034e:	1950      	adds	r0, r2, r5
 8020350:	5d52      	ldrb	r2, [r2, r5]
 8020352:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020354:	7840      	ldrb	r0, [r0, #1]
 8020356:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802035a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802035e:	4422      	add	r2, r4
 8020360:	4420      	add	r0, r4
 8020362:	b29b      	uxth	r3, r3
 8020364:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020366:	b289      	uxth	r1, r1
 8020368:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 802036c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8020370:	fb03 fa01 	mul.w	sl, r3, r1
 8020374:	011b      	lsls	r3, r3, #4
 8020376:	f89c e000 	ldrb.w	lr, [ip]
 802037a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802037e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020382:	eba3 030a 	sub.w	r3, r3, sl
 8020386:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020388:	b289      	uxth	r1, r1
 802038a:	b29b      	uxth	r3, r3
 802038c:	eba9 0901 	sub.w	r9, r9, r1
 8020390:	fb03 fe0e 	mul.w	lr, r3, lr
 8020394:	fa1f f989 	uxth.w	r9, r9
 8020398:	fb09 ee0b 	mla	lr, r9, fp, lr
 802039c:	f892 b000 	ldrb.w	fp, [r2]
 80203a0:	fb01 ee0b 	mla	lr, r1, fp, lr
 80203a4:	f890 b000 	ldrb.w	fp, [r0]
 80203a8:	fb0a ee0b 	mla	lr, sl, fp, lr
 80203ac:	f897 b000 	ldrb.w	fp, [r7]
 80203b0:	fb1b fb04 	smulbb	fp, fp, r4
 80203b4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80203b8:	fb0e be06 	mla	lr, lr, r6, fp
 80203bc:	fa1f fe8e 	uxth.w	lr, lr
 80203c0:	f10e 0b01 	add.w	fp, lr, #1
 80203c4:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 80203c8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80203cc:	f887 b000 	strb.w	fp, [r7]
 80203d0:	f89c e001 	ldrb.w	lr, [ip, #1]
 80203d4:	f898 b001 	ldrb.w	fp, [r8, #1]
 80203d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80203dc:	fb09 ee0b 	mla	lr, r9, fp, lr
 80203e0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80203e4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80203e8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80203ec:	fb0a ee0b 	mla	lr, sl, fp, lr
 80203f0:	f897 b001 	ldrb.w	fp, [r7, #1]
 80203f4:	fb1b fb04 	smulbb	fp, fp, r4
 80203f8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80203fc:	fb0e be06 	mla	lr, lr, r6, fp
 8020400:	fa1f fe8e 	uxth.w	lr, lr
 8020404:	f10e 0b01 	add.w	fp, lr, #1
 8020408:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802040c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020410:	f887 e001 	strb.w	lr, [r7, #1]
 8020414:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020418:	f898 e002 	ldrb.w	lr, [r8, #2]
 802041c:	fb03 f30c 	mul.w	r3, r3, ip
 8020420:	fb09 330e 	mla	r3, r9, lr, r3
 8020424:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020428:	7882      	ldrb	r2, [r0, #2]
 802042a:	fb01 310e 	mla	r1, r1, lr, r3
 802042e:	fb0a 1a02 	mla	sl, sl, r2, r1
 8020432:	78b9      	ldrb	r1, [r7, #2]
 8020434:	fb11 f104 	smulbb	r1, r1, r4
 8020438:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802043c:	fb0a 1606 	mla	r6, sl, r6, r1
 8020440:	b2b6      	uxth	r6, r6
 8020442:	1c73      	adds	r3, r6, #1
 8020444:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020448:	1236      	asrs	r6, r6, #8
 802044a:	70be      	strb	r6, [r7, #2]
 802044c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802044e:	3703      	adds	r7, #3
 8020450:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020452:	4413      	add	r3, r2
 8020454:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020456:	9327      	str	r3, [sp, #156]	; 0x9c
 8020458:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802045a:	4413      	add	r3, r2
 802045c:	9328      	str	r3, [sp, #160]	; 0xa0
 802045e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020460:	3b01      	subs	r3, #1
 8020462:	9311      	str	r3, [sp, #68]	; 0x44
 8020464:	e741      	b.n	80202ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8020466:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020468:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802046a:	4413      	add	r3, r2
 802046c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802046e:	9327      	str	r3, [sp, #156]	; 0x9c
 8020470:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020472:	4413      	add	r3, r2
 8020474:	9328      	str	r3, [sp, #160]	; 0xa0
 8020476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020478:	3b01      	subs	r3, #1
 802047a:	930a      	str	r3, [sp, #40]	; 0x28
 802047c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802047e:	3303      	adds	r3, #3
 8020480:	930b      	str	r3, [sp, #44]	; 0x2c
 8020482:	e6e6      	b.n	8020252 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020484:	f47f aef8 	bne.w	8020278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8020488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802048a:	2b00      	cmp	r3, #0
 802048c:	f340 811d 	ble.w	80206ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8020490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020494:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020496:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802049a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802049e:	eef0 6a48 	vmov.f32	s13, s16
 80204a2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204a6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204ae:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80204b2:	eef0 6a68 	vmov.f32	s13, s17
 80204b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204ba:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80204be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80204d6:	ee18 2a10 	vmov	r2, s16
 80204da:	eeb0 8a47 	vmov.f32	s16, s14
 80204de:	fb92 f3f3 	sdiv	r3, r2, r3
 80204e2:	ee18 2a90 	vmov	r2, s17
 80204e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80204e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80204ea:	eef0 8a67 	vmov.f32	s17, s15
 80204ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80204f2:	932a      	str	r3, [sp, #168]	; 0xa8
 80204f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80204f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80204f8:	3b01      	subs	r3, #1
 80204fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80204fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80204fe:	bf08      	it	eq
 8020500:	4613      	moveq	r3, r2
 8020502:	930a      	str	r3, [sp, #40]	; 0x28
 8020504:	e69e      	b.n	8020244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020506:	b151      	cbz	r1, 802051e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8020508:	5d52      	ldrb	r2, [r2, r5]
 802050a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802050c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020510:	4402      	add	r2, r0
 8020512:	4640      	mov	r0, r8
 8020514:	46c4      	mov	ip, r8
 8020516:	e724      	b.n	8020362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020518:	4640      	mov	r0, r8
 802051a:	4642      	mov	r2, r8
 802051c:	e721      	b.n	8020362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 802051e:	4640      	mov	r0, r8
 8020520:	4642      	mov	r2, r8
 8020522:	e7f7      	b.n	8020514 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8020524:	1c46      	adds	r6, r0, #1
 8020526:	d191      	bne.n	802044c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020528:	4285      	cmp	r5, r0
 802052a:	dd8f      	ble.n	802044c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802052c:	1c54      	adds	r4, r2, #1
 802052e:	db8d      	blt.n	802044c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020530:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020532:	4294      	cmp	r4, r2
 8020534:	dd8a      	ble.n	802044c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020536:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020538:	9002      	str	r0, [sp, #8]
 802053a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802053c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8020540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020544:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020548:	e9cd 5300 	strd	r5, r3, [sp]
 802054c:	4639      	mov	r1, r7
 802054e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020550:	f7ff fd52 	bl	801fff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020554:	e77a      	b.n	802044c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020556:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020558:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802055a:	1410      	asrs	r0, r2, #16
 802055c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020560:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020562:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020564:	1412      	asrs	r2, r2, #16
 8020566:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802056a:	fb05 2000 	mla	r0, r5, r0, r2
 802056e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020570:	f814 8000 	ldrb.w	r8, [r4, r0]
 8020574:	4402      	add	r2, r0
 8020576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020578:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802057c:	eb00 0708 	add.w	r7, r0, r8
 8020580:	2b00      	cmp	r3, #0
 8020582:	f000 8093 	beq.w	80206ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020586:	7856      	ldrb	r6, [r2, #1]
 8020588:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802058c:	4406      	add	r6, r0
 802058e:	2900      	cmp	r1, #0
 8020590:	f000 8095 	beq.w	80206be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020594:	1950      	adds	r0, r2, r5
 8020596:	5d52      	ldrb	r2, [r2, r5]
 8020598:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802059a:	7840      	ldrb	r0, [r0, #1]
 802059c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80205a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80205a4:	4422      	add	r2, r4
 80205a6:	4420      	add	r0, r4
 80205a8:	b29b      	uxth	r3, r3
 80205aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80205ac:	b289      	uxth	r1, r1
 80205ae:	f10c 0c03 	add.w	ip, ip, #3
 80205b2:	f814 b008 	ldrb.w	fp, [r4, r8]
 80205b6:	fb03 f901 	mul.w	r9, r3, r1
 80205ba:	011b      	lsls	r3, r3, #4
 80205bc:	f896 8000 	ldrb.w	r8, [r6]
 80205c0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80205c4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80205c8:	eba3 0309 	sub.w	r3, r3, r9
 80205cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80205ce:	b289      	uxth	r1, r1
 80205d0:	b29b      	uxth	r3, r3
 80205d2:	ebae 0e01 	sub.w	lr, lr, r1
 80205d6:	fb03 f808 	mul.w	r8, r3, r8
 80205da:	fa1f fe8e 	uxth.w	lr, lr
 80205de:	fb0e 880b 	mla	r8, lr, fp, r8
 80205e2:	f892 b000 	ldrb.w	fp, [r2]
 80205e6:	fb01 880b 	mla	r8, r1, fp, r8
 80205ea:	f890 b000 	ldrb.w	fp, [r0]
 80205ee:	fb09 880b 	mla	r8, r9, fp, r8
 80205f2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80205f6:	fb1b fb04 	smulbb	fp, fp, r4
 80205fa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80205fe:	fb08 b80a 	mla	r8, r8, sl, fp
 8020602:	fa1f f888 	uxth.w	r8, r8
 8020606:	f108 0b01 	add.w	fp, r8, #1
 802060a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802060e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020612:	f80c 8c06 	strb.w	r8, [ip, #-6]
 8020616:	f896 8001 	ldrb.w	r8, [r6, #1]
 802061a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802061e:	fb03 f808 	mul.w	r8, r3, r8
 8020622:	fb0e 880b 	mla	r8, lr, fp, r8
 8020626:	f892 b001 	ldrb.w	fp, [r2, #1]
 802062a:	fb01 880b 	mla	r8, r1, fp, r8
 802062e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020632:	fb09 880b 	mla	r8, r9, fp, r8
 8020636:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 802063a:	fb1b fb04 	smulbb	fp, fp, r4
 802063e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020642:	fb08 b80a 	mla	r8, r8, sl, fp
 8020646:	fa1f f888 	uxth.w	r8, r8
 802064a:	f108 0b01 	add.w	fp, r8, #1
 802064e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020652:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020656:	f80c 8c05 	strb.w	r8, [ip, #-5]
 802065a:	78b6      	ldrb	r6, [r6, #2]
 802065c:	78bf      	ldrb	r7, [r7, #2]
 802065e:	4373      	muls	r3, r6
 8020660:	7896      	ldrb	r6, [r2, #2]
 8020662:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020664:	fb0e 3307 	mla	r3, lr, r7, r3
 8020668:	fb01 3306 	mla	r3, r1, r6, r3
 802066c:	7886      	ldrb	r6, [r0, #2]
 802066e:	fb09 3906 	mla	r9, r9, r6, r3
 8020672:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8020676:	fb13 f304 	smulbb	r3, r3, r4
 802067a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802067e:	fb09 390a 	mla	r9, r9, sl, r3
 8020682:	fa1f f989 	uxth.w	r9, r9
 8020686:	f109 0301 	add.w	r3, r9, #1
 802068a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802068e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020690:	4413      	add	r3, r2
 8020692:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020694:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020698:	9327      	str	r3, [sp, #156]	; 0x9c
 802069a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802069c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 80206a0:	4413      	add	r3, r2
 80206a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80206a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80206a6:	3b01      	subs	r3, #1
 80206a8:	9311      	str	r3, [sp, #68]	; 0x44
 80206aa:	e601      	b.n	80202b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80206ac:	b151      	cbz	r1, 80206c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 80206ae:	5d52      	ldrb	r2, [r2, r5]
 80206b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206b6:	4402      	add	r2, r0
 80206b8:	4638      	mov	r0, r7
 80206ba:	463e      	mov	r6, r7
 80206bc:	e774      	b.n	80205a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80206be:	4638      	mov	r0, r7
 80206c0:	463a      	mov	r2, r7
 80206c2:	e771      	b.n	80205a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80206c4:	4638      	mov	r0, r7
 80206c6:	463a      	mov	r2, r7
 80206c8:	e7f7      	b.n	80206ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80206ca:	b015      	add	sp, #84	; 0x54
 80206cc:	ecbd 8b08 	vpop	{d8-d11}
 80206d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80206d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206d8:	780d      	ldrb	r5, [r1, #0]
 80206da:	f891 9002 	ldrb.w	r9, [r1, #2]
 80206de:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 80206e2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80206e6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80206ea:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80206ee:	f891 9001 	ldrb.w	r9, [r1, #1]
 80206f2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80206f6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80206fa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80206fe:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020702:	9501      	str	r5, [sp, #4]
 8020704:	fb06 470c 	mla	r7, r6, ip, r4
 8020708:	2e00      	cmp	r6, #0
 802070a:	eb02 0e07 	add.w	lr, r2, r7
 802070e:	db46      	blt.n	802079e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020710:	45b0      	cmp	r8, r6
 8020712:	dd44      	ble.n	802079e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020714:	2c00      	cmp	r4, #0
 8020716:	db40      	blt.n	802079a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020718:	45a4      	cmp	ip, r4
 802071a:	dd3e      	ble.n	802079a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 802071c:	5dd7      	ldrb	r7, [r2, r7]
 802071e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020722:	441f      	add	r7, r3
 8020724:	1c62      	adds	r2, r4, #1
 8020726:	d43d      	bmi.n	80207a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020728:	4594      	cmp	ip, r2
 802072a:	dd3b      	ble.n	80207a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802072c:	f1ba 0f00 	cmp.w	sl, #0
 8020730:	d038      	beq.n	80207a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020732:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802073a:	441d      	add	r5, r3
 802073c:	3601      	adds	r6, #1
 802073e:	d435      	bmi.n	80207ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020740:	45b0      	cmp	r8, r6
 8020742:	dd33      	ble.n	80207ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020744:	b390      	cbz	r0, 80207ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020746:	2c00      	cmp	r4, #0
 8020748:	db2e      	blt.n	80207a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802074a:	45a4      	cmp	ip, r4
 802074c:	dd2c      	ble.n	80207a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802074e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020752:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020756:	441e      	add	r6, r3
 8020758:	1c62      	adds	r2, r4, #1
 802075a:	d42a      	bmi.n	80207b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802075c:	4594      	cmp	ip, r2
 802075e:	dd28      	ble.n	80207b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020760:	f1ba 0f00 	cmp.w	sl, #0
 8020764:	d025      	beq.n	80207b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020766:	44f4      	add	ip, lr
 8020768:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802076c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020770:	4413      	add	r3, r2
 8020772:	f1ba 0f0f 	cmp.w	sl, #15
 8020776:	f897 8000 	ldrb.w	r8, [r7]
 802077a:	f895 9000 	ldrb.w	r9, [r5]
 802077e:	f896 e000 	ldrb.w	lr, [r6]
 8020782:	f893 c000 	ldrb.w	ip, [r3]
 8020786:	d801      	bhi.n	802078c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8020788:	280f      	cmp	r0, #15
 802078a:	d914      	bls.n	80207b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 802078c:	4b29      	ldr	r3, [pc, #164]	; (8020834 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 802078e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020792:	4a29      	ldr	r2, [pc, #164]	; (8020838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8020794:	4829      	ldr	r0, [pc, #164]	; (802083c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8020796:	f005 ff39 	bl	802660c <__assert_func>
 802079a:	af01      	add	r7, sp, #4
 802079c:	e7c2      	b.n	8020724 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802079e:	ad01      	add	r5, sp, #4
 80207a0:	462f      	mov	r7, r5
 80207a2:	e7cb      	b.n	802073c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80207a4:	ad01      	add	r5, sp, #4
 80207a6:	e7c9      	b.n	802073c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80207a8:	ae01      	add	r6, sp, #4
 80207aa:	e7d5      	b.n	8020758 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 80207ac:	ab01      	add	r3, sp, #4
 80207ae:	461e      	mov	r6, r3
 80207b0:	e7df      	b.n	8020772 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80207b2:	ab01      	add	r3, sp, #4
 80207b4:	e7dd      	b.n	8020772 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80207b6:	fa1f f48a 	uxth.w	r4, sl
 80207ba:	b280      	uxth	r0, r0
 80207bc:	fb04 fa00 	mul.w	sl, r4, r0
 80207c0:	0124      	lsls	r4, r4, #4
 80207c2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80207c6:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80207ca:	b282      	uxth	r2, r0
 80207cc:	eba4 000a 	sub.w	r0, r4, sl
 80207d0:	ebab 0b02 	sub.w	fp, fp, r2
 80207d4:	b280      	uxth	r0, r0
 80207d6:	fa1f fb8b 	uxth.w	fp, fp
 80207da:	fb00 f909 	mul.w	r9, r0, r9
 80207de:	fb0b 9808 	mla	r8, fp, r8, r9
 80207e2:	fb02 8e0e 	mla	lr, r2, lr, r8
 80207e6:	fb0a ec0c 	mla	ip, sl, ip, lr
 80207ea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80207ee:	f881 c000 	strb.w	ip, [r1]
 80207f2:	786c      	ldrb	r4, [r5, #1]
 80207f4:	f897 c001 	ldrb.w	ip, [r7, #1]
 80207f8:	4344      	muls	r4, r0
 80207fa:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80207fe:	7874      	ldrb	r4, [r6, #1]
 8020800:	fb02 cc04 	mla	ip, r2, r4, ip
 8020804:	785c      	ldrb	r4, [r3, #1]
 8020806:	fb0a c404 	mla	r4, sl, r4, ip
 802080a:	1224      	asrs	r4, r4, #8
 802080c:	704c      	strb	r4, [r1, #1]
 802080e:	78ad      	ldrb	r5, [r5, #2]
 8020810:	78bc      	ldrb	r4, [r7, #2]
 8020812:	4368      	muls	r0, r5
 8020814:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020818:	78b0      	ldrb	r0, [r6, #2]
 802081a:	fb02 b000 	mla	r0, r2, r0, fp
 802081e:	789a      	ldrb	r2, [r3, #2]
 8020820:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020824:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020828:	f881 a002 	strb.w	sl, [r1, #2]
 802082c:	b003      	add	sp, #12
 802082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020832:	bf00      	nop
 8020834:	0802b0d7 	.word	0x0802b0d7
 8020838:	0802b5ce 	.word	0x0802b5ce
 802083c:	0802b1a0 	.word	0x0802b1a0

08020840 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020844:	ed2d 8b0a 	vpush	{d8-d12}
 8020848:	b08f      	sub	sp, #60	; 0x3c
 802084a:	eeb0 aa40 	vmov.f32	s20, s0
 802084e:	eef0 9a60 	vmov.f32	s19, s1
 8020852:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8020854:	eeb0 9a41 	vmov.f32	s18, s2
 8020858:	9307      	str	r3, [sp, #28]
 802085a:	eeb0 8a62 	vmov.f32	s16, s5
 802085e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8020862:	eef0 8a43 	vmov.f32	s17, s6
 8020866:	900d      	str	r0, [sp, #52]	; 0x34
 8020868:	eeb0 ca44 	vmov.f32	s24, s8
 802086c:	6860      	ldr	r0, [r4, #4]
 802086e:	eef0 ba64 	vmov.f32	s23, s9
 8020872:	9309      	str	r3, [sp, #36]	; 0x24
 8020874:	eeb0 ba45 	vmov.f32	s22, s10
 8020878:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802087c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8020880:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8020884:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8020888:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802088a:	fb00 1303 	mla	r3, r0, r3, r1
 802088e:	6821      	ldr	r1, [r4, #0]
 8020890:	6854      	ldr	r4, [r2, #4]
 8020892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020896:	3404      	adds	r4, #4
 8020898:	18cb      	adds	r3, r1, r3
 802089a:	9308      	str	r3, [sp, #32]
 802089c:	6813      	ldr	r3, [r2, #0]
 802089e:	930a      	str	r3, [sp, #40]	; 0x28
 80208a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	dc03      	bgt.n	80208ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80208a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	f340 81d2 	ble.w	8020c52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80208ae:	9b07      	ldr	r3, [sp, #28]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	f340 80e3 	ble.w	8020a7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80208b6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80208b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80208ba:	1412      	asrs	r2, r2, #16
 80208bc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80208c0:	d42f      	bmi.n	8020922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80208c2:	1c51      	adds	r1, r2, #1
 80208c4:	428d      	cmp	r5, r1
 80208c6:	dd2f      	ble.n	8020928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	db2d      	blt.n	8020928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80208cc:	1c59      	adds	r1, r3, #1
 80208ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80208d0:	4288      	cmp	r0, r1
 80208d2:	dd29      	ble.n	8020928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80208d4:	9b07      	ldr	r3, [sp, #28]
 80208d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80208d8:	3b01      	subs	r3, #1
 80208da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80208dc:	fb02 1203 	mla	r2, r2, r3, r1
 80208e0:	1412      	asrs	r2, r2, #16
 80208e2:	d42b      	bmi.n	802093c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80208e4:	3201      	adds	r2, #1
 80208e6:	4295      	cmp	r5, r2
 80208e8:	dd28      	ble.n	802093c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80208ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80208ec:	9924      	ldr	r1, [sp, #144]	; 0x90
 80208ee:	fb02 1303 	mla	r3, r2, r3, r1
 80208f2:	141b      	asrs	r3, r3, #16
 80208f4:	d422      	bmi.n	802093c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80208f6:	3301      	adds	r3, #1
 80208f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80208fa:	429a      	cmp	r2, r3
 80208fc:	dd1e      	ble.n	802093c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80208fe:	9b08      	ldr	r3, [sp, #32]
 8020900:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020904:	f103 0803 	add.w	r8, r3, #3
 8020908:	f1ba 0f00 	cmp.w	sl, #0
 802090c:	f300 8119 	bgt.w	8020b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8020910:	9b07      	ldr	r3, [sp, #28]
 8020912:	9a08      	ldr	r2, [sp, #32]
 8020914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020918:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802091c:	441a      	add	r2, r3
 802091e:	9208      	str	r2, [sp, #32]
 8020920:	e0ae      	b.n	8020a80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8020922:	1c51      	adds	r1, r2, #1
 8020924:	f040 809b 	bne.w	8020a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020928:	42aa      	cmp	r2, r5
 802092a:	f280 8098 	bge.w	8020a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802092e:	1c5a      	adds	r2, r3, #1
 8020930:	f2c0 8095 	blt.w	8020a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020936:	4293      	cmp	r3, r2
 8020938:	f280 8091 	bge.w	8020a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802093c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8020940:	f1bb 0f00 	cmp.w	fp, #0
 8020944:	dde4      	ble.n	8020910 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8020946:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020948:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802094a:	141a      	asrs	r2, r3, #16
 802094c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802094e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020950:	1400      	asrs	r0, r0, #16
 8020952:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8020956:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802095a:	f100 80dc 	bmi.w	8020b16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 802095e:	1c47      	adds	r7, r0, #1
 8020960:	42bd      	cmp	r5, r7
 8020962:	f340 80da 	ble.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020966:	2a00      	cmp	r2, #0
 8020968:	f2c0 80d7 	blt.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 802096c:	f102 0c01 	add.w	ip, r2, #1
 8020970:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020972:	4567      	cmp	r7, ip
 8020974:	f340 80d1 	ble.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020978:	fb02 0005 	mla	r0, r2, r5, r0
 802097c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802097e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020980:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020984:	4402      	add	r2, r0
 8020986:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802098a:	eb04 0c08 	add.w	ip, r4, r8
 802098e:	2b00      	cmp	r3, #0
 8020990:	f000 80b3 	beq.w	8020afa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8020994:	7857      	ldrb	r7, [r2, #1]
 8020996:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802099a:	4427      	add	r7, r4
 802099c:	2900      	cmp	r1, #0
 802099e:	f000 80b4 	beq.w	8020b0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 80209a2:	1950      	adds	r0, r2, r5
 80209a4:	5d52      	ldrb	r2, [r2, r5]
 80209a6:	7840      	ldrb	r0, [r0, #1]
 80209a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80209b0:	4422      	add	r2, r4
 80209b2:	4420      	add	r0, r4
 80209b4:	b29b      	uxth	r3, r3
 80209b6:	f814 a008 	ldrb.w	sl, [r4, r8]
 80209ba:	b289      	uxth	r1, r1
 80209bc:	f897 8000 	ldrb.w	r8, [r7]
 80209c0:	fb03 f901 	mul.w	r9, r3, r1
 80209c4:	011b      	lsls	r3, r3, #4
 80209c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80209ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80209ce:	eba3 0309 	sub.w	r3, r3, r9
 80209d2:	b289      	uxth	r1, r1
 80209d4:	b29b      	uxth	r3, r3
 80209d6:	ebae 0e01 	sub.w	lr, lr, r1
 80209da:	fb03 f808 	mul.w	r8, r3, r8
 80209de:	fa1f fe8e 	uxth.w	lr, lr
 80209e2:	fb0e 880a 	mla	r8, lr, sl, r8
 80209e6:	f892 a000 	ldrb.w	sl, [r2]
 80209ea:	fb01 880a 	mla	r8, r1, sl, r8
 80209ee:	f890 a000 	ldrb.w	sl, [r0]
 80209f2:	fb09 880a 	mla	r8, r9, sl, r8
 80209f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80209fa:	f886 8000 	strb.w	r8, [r6]
 80209fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020a02:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020a06:	fb03 f808 	mul.w	r8, r3, r8
 8020a0a:	fb0e 880a 	mla	r8, lr, sl, r8
 8020a0e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020a12:	fb01 880a 	mla	r8, r1, sl, r8
 8020a16:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020a1a:	fb09 880a 	mla	r8, r9, sl, r8
 8020a1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020a22:	f886 8001 	strb.w	r8, [r6, #1]
 8020a26:	78bf      	ldrb	r7, [r7, #2]
 8020a28:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020a2c:	437b      	muls	r3, r7
 8020a2e:	7892      	ldrb	r2, [r2, #2]
 8020a30:	fb0e 330c 	mla	r3, lr, ip, r3
 8020a34:	fb01 3102 	mla	r1, r1, r2, r3
 8020a38:	7882      	ldrb	r2, [r0, #2]
 8020a3a:	fb09 1902 	mla	r9, r9, r2, r1
 8020a3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a42:	f886 9002 	strb.w	r9, [r6, #2]
 8020a46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a48:	3603      	adds	r6, #3
 8020a4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a50:	4413      	add	r3, r2
 8020a52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020a54:	9323      	str	r3, [sp, #140]	; 0x8c
 8020a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a58:	4413      	add	r3, r2
 8020a5a:	9324      	str	r3, [sp, #144]	; 0x90
 8020a5c:	e770      	b.n	8020940 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020a5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a60:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020a62:	4413      	add	r3, r2
 8020a64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020a66:	9323      	str	r3, [sp, #140]	; 0x8c
 8020a68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a6a:	4413      	add	r3, r2
 8020a6c:	9324      	str	r3, [sp, #144]	; 0x90
 8020a6e:	9b07      	ldr	r3, [sp, #28]
 8020a70:	3b01      	subs	r3, #1
 8020a72:	9307      	str	r3, [sp, #28]
 8020a74:	9b08      	ldr	r3, [sp, #32]
 8020a76:	3303      	adds	r3, #3
 8020a78:	9308      	str	r3, [sp, #32]
 8020a7a:	e718      	b.n	80208ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020a7c:	f47f af2a 	bne.w	80208d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8020a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	f340 80e5 	ble.w	8020c52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8020a88:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a8e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020a92:	eef0 6a48 	vmov.f32	s13, s16
 8020a96:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020a9a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020a9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aa2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8020aa6:	eef0 6a68 	vmov.f32	s13, s17
 8020aaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aae:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8020ab2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020ab6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020aba:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020abe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020ac2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020ac6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020aca:	ee18 2a10 	vmov	r2, s16
 8020ace:	eeb0 8a47 	vmov.f32	s16, s14
 8020ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ad6:	ee18 2a90 	vmov	r2, s17
 8020ada:	9325      	str	r3, [sp, #148]	; 0x94
 8020adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020ade:	eef0 8a67 	vmov.f32	s17, s15
 8020ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ae6:	9326      	str	r3, [sp, #152]	; 0x98
 8020ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020aea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020aec:	3b01      	subs	r3, #1
 8020aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8020af0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020af2:	bf08      	it	eq
 8020af4:	4613      	moveq	r3, r2
 8020af6:	9307      	str	r3, [sp, #28]
 8020af8:	e6d2      	b.n	80208a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8020afa:	b149      	cbz	r1, 8020b10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020afc:	5d52      	ldrb	r2, [r2, r5]
 8020afe:	4660      	mov	r0, ip
 8020b00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b04:	4422      	add	r2, r4
 8020b06:	4667      	mov	r7, ip
 8020b08:	e754      	b.n	80209b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8020b0a:	4660      	mov	r0, ip
 8020b0c:	4662      	mov	r2, ip
 8020b0e:	e751      	b.n	80209b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8020b10:	4660      	mov	r0, ip
 8020b12:	4662      	mov	r2, ip
 8020b14:	e7f7      	b.n	8020b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8020b16:	1c47      	adds	r7, r0, #1
 8020b18:	d195      	bne.n	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020b1a:	4285      	cmp	r5, r0
 8020b1c:	dd93      	ble.n	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020b1e:	1c57      	adds	r7, r2, #1
 8020b20:	db91      	blt.n	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020b22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020b24:	4297      	cmp	r7, r2
 8020b26:	dd8e      	ble.n	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020b28:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020b2c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020b30:	e9cd 5700 	strd	r5, r7, [sp]
 8020b34:	4623      	mov	r3, r4
 8020b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b38:	4631      	mov	r1, r6
 8020b3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020b3c:	f7ff fdca 	bl	80206d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020b40:	e781      	b.n	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020b42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020b44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020b46:	1410      	asrs	r0, r2, #16
 8020b48:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020b4c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020b4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020b50:	1412      	asrs	r2, r2, #16
 8020b52:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020b56:	fb05 2000 	mla	r0, r5, r0, r2
 8020b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b5c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020b60:	4402      	add	r2, r0
 8020b62:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020b66:	eb04 070e 	add.w	r7, r4, lr
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d063      	beq.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8020b6e:	7856      	ldrb	r6, [r2, #1]
 8020b70:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020b74:	4426      	add	r6, r4
 8020b76:	2900      	cmp	r1, #0
 8020b78:	d065      	beq.n	8020c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8020b7a:	1950      	adds	r0, r2, r5
 8020b7c:	5d52      	ldrb	r2, [r2, r5]
 8020b7e:	7840      	ldrb	r0, [r0, #1]
 8020b80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020b88:	4422      	add	r2, r4
 8020b8a:	4420      	add	r0, r4
 8020b8c:	b29b      	uxth	r3, r3
 8020b8e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8020b92:	b289      	uxth	r1, r1
 8020b94:	f896 e000 	ldrb.w	lr, [r6]
 8020b98:	f108 0803 	add.w	r8, r8, #3
 8020b9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020ba0:	fb03 f901 	mul.w	r9, r3, r1
 8020ba4:	011b      	lsls	r3, r3, #4
 8020ba6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020baa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020bae:	eba3 0309 	sub.w	r3, r3, r9
 8020bb2:	b289      	uxth	r1, r1
 8020bb4:	b29b      	uxth	r3, r3
 8020bb6:	ebac 0c01 	sub.w	ip, ip, r1
 8020bba:	fb03 fe0e 	mul.w	lr, r3, lr
 8020bbe:	fa1f fc8c 	uxth.w	ip, ip
 8020bc2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020bc6:	f892 b000 	ldrb.w	fp, [r2]
 8020bca:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020bce:	f890 b000 	ldrb.w	fp, [r0]
 8020bd2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020bd6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020bda:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020bde:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020be2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020be6:	fb03 fe0e 	mul.w	lr, r3, lr
 8020bea:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020bee:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020bf2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020bf6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020bfa:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020bfe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c02:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020c06:	78b6      	ldrb	r6, [r6, #2]
 8020c08:	78bf      	ldrb	r7, [r7, #2]
 8020c0a:	4373      	muls	r3, r6
 8020c0c:	7896      	ldrb	r6, [r2, #2]
 8020c0e:	7882      	ldrb	r2, [r0, #2]
 8020c10:	fb0c 3307 	mla	r3, ip, r7, r3
 8020c14:	fb01 3306 	mla	r3, r1, r6, r3
 8020c18:	fb09 3902 	mla	r9, r9, r2, r3
 8020c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c1e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020c20:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c24:	4413      	add	r3, r2
 8020c26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020c28:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020c2c:	9323      	str	r3, [sp, #140]	; 0x8c
 8020c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c30:	4413      	add	r3, r2
 8020c32:	9324      	str	r3, [sp, #144]	; 0x90
 8020c34:	e668      	b.n	8020908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020c36:	b149      	cbz	r1, 8020c4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8020c38:	5d52      	ldrb	r2, [r2, r5]
 8020c3a:	4638      	mov	r0, r7
 8020c3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c40:	4422      	add	r2, r4
 8020c42:	463e      	mov	r6, r7
 8020c44:	e7a2      	b.n	8020b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020c46:	4638      	mov	r0, r7
 8020c48:	463a      	mov	r2, r7
 8020c4a:	e79f      	b.n	8020b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020c4c:	4638      	mov	r0, r7
 8020c4e:	463a      	mov	r2, r7
 8020c50:	e7f7      	b.n	8020c42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8020c52:	b00f      	add	sp, #60	; 0x3c
 8020c54:	ecbd 8b0a 	vpop	{d8-d12}
 8020c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c60:	b087      	sub	sp, #28
 8020c62:	7888      	ldrb	r0, [r1, #2]
 8020c64:	9002      	str	r0, [sp, #8]
 8020c66:	7848      	ldrb	r0, [r1, #1]
 8020c68:	9e02      	ldr	r6, [sp, #8]
 8020c6a:	9003      	str	r0, [sp, #12]
 8020c6c:	7808      	ldrb	r0, [r1, #0]
 8020c6e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020c72:	9004      	str	r0, [sp, #16]
 8020c74:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020c78:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8020c7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020c80:	9e03      	ldr	r6, [sp, #12]
 8020c82:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8020c86:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8020c8a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8020c8e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8020c92:	fb04 7508 	mla	r5, r4, r8, r7
 8020c96:	2c00      	cmp	r4, #0
 8020c98:	eb02 0905 	add.w	r9, r2, r5
 8020c9c:	db45      	blt.n	8020d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8020c9e:	45a2      	cmp	sl, r4
 8020ca0:	dd43      	ble.n	8020d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8020ca2:	2f00      	cmp	r7, #0
 8020ca4:	db3f      	blt.n	8020d26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8020ca6:	45b8      	cmp	r8, r7
 8020ca8:	dd3d      	ble.n	8020d26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8020caa:	5d52      	ldrb	r2, [r2, r5]
 8020cac:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020cb0:	1c7a      	adds	r2, r7, #1
 8020cb2:	d43d      	bmi.n	8020d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020cb4:	4590      	cmp	r8, r2
 8020cb6:	dd3b      	ble.n	8020d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020cb8:	f1bc 0f00 	cmp.w	ip, #0
 8020cbc:	d038      	beq.n	8020d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020cbe:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020cc2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020cc6:	3401      	adds	r4, #1
 8020cc8:	d436      	bmi.n	8020d38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020cca:	45a2      	cmp	sl, r4
 8020ccc:	dd34      	ble.n	8020d38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020cce:	f1be 0f00 	cmp.w	lr, #0
 8020cd2:	d031      	beq.n	8020d38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020cd4:	2f00      	cmp	r7, #0
 8020cd6:	db2d      	blt.n	8020d34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8020cd8:	45b8      	cmp	r8, r7
 8020cda:	dd2b      	ble.n	8020d34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8020cdc:	f819 2008 	ldrb.w	r2, [r9, r8]
 8020ce0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020ce4:	3701      	adds	r7, #1
 8020ce6:	d409      	bmi.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020ce8:	45b8      	cmp	r8, r7
 8020cea:	dd07      	ble.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020cec:	f1bc 0f00 	cmp.w	ip, #0
 8020cf0:	d004      	beq.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020cf2:	44c8      	add	r8, r9
 8020cf4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020cf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020cfc:	f1bc 0f0f 	cmp.w	ip, #15
 8020d00:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020d04:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8020d08:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020d0c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020d10:	d802      	bhi.n	8020d18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8020d12:	f1be 0f0f 	cmp.w	lr, #15
 8020d16:	d911      	bls.n	8020d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8020d18:	4b77      	ldr	r3, [pc, #476]	; (8020ef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8020d1a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020d1e:	4a77      	ldr	r2, [pc, #476]	; (8020efc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8020d20:	4877      	ldr	r0, [pc, #476]	; (8020f00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8020d22:	f005 fc73 	bl	802660c <__assert_func>
 8020d26:	4606      	mov	r6, r0
 8020d28:	e7c2      	b.n	8020cb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8020d2a:	4605      	mov	r5, r0
 8020d2c:	4606      	mov	r6, r0
 8020d2e:	e7ca      	b.n	8020cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020d30:	4605      	mov	r5, r0
 8020d32:	e7c8      	b.n	8020cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020d34:	4604      	mov	r4, r0
 8020d36:	e7d5      	b.n	8020ce4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8020d38:	4604      	mov	r4, r0
 8020d3a:	e7df      	b.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020d3c:	fa1f fc8c 	uxth.w	ip, ip
 8020d40:	fa1f f28e 	uxth.w	r2, lr
 8020d44:	fb02 fe0c 	mul.w	lr, r2, ip
 8020d48:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020d4c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8020d50:	ebac 070e 	sub.w	r7, ip, lr
 8020d54:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020d58:	b292      	uxth	r2, r2
 8020d5a:	b2bf      	uxth	r7, r7
 8020d5c:	1a9b      	subs	r3, r3, r2
 8020d5e:	fb07 fc0a 	mul.w	ip, r7, sl
 8020d62:	b29b      	uxth	r3, r3
 8020d64:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020d68:	9301      	str	r3, [sp, #4]
 8020d6a:	fb02 cc09 	mla	ip, r2, r9, ip
 8020d6e:	fb0e cc08 	mla	ip, lr, r8, ip
 8020d72:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020d76:	9305      	str	r3, [sp, #20]
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	f000 80b9 	beq.w	8020ef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8020d7e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020d82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d86:	fb0b fc0c 	mul.w	ip, fp, ip
 8020d8a:	fb0b f606 	mul.w	r6, fp, r6
 8020d8e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020d92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020d96:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020d9a:	44dc      	add	ip, fp
 8020d9c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020da0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020da4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020da8:	fb0a fb0b 	mul.w	fp, sl, fp
 8020dac:	fb0a fa05 	mul.w	sl, sl, r5
 8020db0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020db4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020db8:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8020dbc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020dc0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020dc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020dc8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8020dcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dd0:	0a36      	lsrs	r6, r6, #8
 8020dd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020dd6:	44dc      	add	ip, fp
 8020dd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020ddc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020de0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020de4:	fb09 fb0b 	mul.w	fp, r9, fp
 8020de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dec:	fb09 f904 	mul.w	r9, r9, r4
 8020df0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020df4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8020df8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dfc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020e00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e04:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020e08:	fb0c fc07 	mul.w	ip, ip, r7
 8020e0c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020e10:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8020e14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020e18:	445d      	add	r5, fp
 8020e1a:	fb08 f404 	mul.w	r4, r8, r4
 8020e1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020e22:	fb08 f800 	mul.w	r8, r8, r0
 8020e26:	0a2d      	lsrs	r5, r5, #8
 8020e28:	0a20      	lsrs	r0, r4, #8
 8020e2a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020e2e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020e32:	fb07 f70a 	mul.w	r7, r7, sl
 8020e36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020e3a:	4404      	add	r4, r0
 8020e3c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8020e40:	0a24      	lsrs	r4, r4, #8
 8020e42:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8020e46:	9801      	ldr	r0, [sp, #4]
 8020e48:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e4c:	fb03 cc00 	mla	ip, r3, r0, ip
 8020e50:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e54:	fb00 7606 	mla	r6, r0, r6, r7
 8020e58:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8020e5c:	fb04 cc0e 	mla	ip, r4, lr, ip
 8020e60:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020e64:	b280      	uxth	r0, r0
 8020e66:	9c04      	ldr	r4, [sp, #16]
 8020e68:	fb05 cc02 	mla	ip, r5, r2, ip
 8020e6c:	fb0e 6e08 	mla	lr, lr, r8, r6
 8020e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e74:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020e78:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8020e7c:	fb02 ec0c 	mla	ip, r2, ip, lr
 8020e80:	9a05      	ldr	r2, [sp, #20]
 8020e82:	4342      	muls	r2, r0
 8020e84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e88:	1c53      	adds	r3, r2, #1
 8020e8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020e92:	ea45 0c0c 	orr.w	ip, r5, ip
 8020e96:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020e9a:	fa5f f28c 	uxtb.w	r2, ip
 8020e9e:	b2db      	uxtb	r3, r3
 8020ea0:	fb14 f403 	smulbb	r4, r4, r3
 8020ea4:	fb02 4200 	mla	r2, r2, r0, r4
 8020ea8:	b292      	uxth	r2, r2
 8020eaa:	1c54      	adds	r4, r2, #1
 8020eac:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8020eb0:	9c03      	ldr	r4, [sp, #12]
 8020eb2:	fb14 f403 	smulbb	r4, r4, r3
 8020eb6:	1212      	asrs	r2, r2, #8
 8020eb8:	700a      	strb	r2, [r1, #0]
 8020eba:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8020ebe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020ec2:	fb02 4200 	mla	r2, r2, r0, r4
 8020ec6:	b292      	uxth	r2, r2
 8020ec8:	1c54      	adds	r4, r2, #1
 8020eca:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8020ece:	1212      	asrs	r2, r2, #8
 8020ed0:	704a      	strb	r2, [r1, #1]
 8020ed2:	9a02      	ldr	r2, [sp, #8]
 8020ed4:	fb12 f303 	smulbb	r3, r2, r3
 8020ed8:	fb0c 3c00 	mla	ip, ip, r0, r3
 8020edc:	fa1f fc8c 	uxth.w	ip, ip
 8020ee0:	f10c 0301 	add.w	r3, ip, #1
 8020ee4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020ee8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020eec:	f881 c002 	strb.w	ip, [r1, #2]
 8020ef0:	b007      	add	sp, #28
 8020ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ef6:	bf00      	nop
 8020ef8:	0802b0d7 	.word	0x0802b0d7
 8020efc:	0802b5ce 	.word	0x0802b5ce
 8020f00:	0802b1a0 	.word	0x0802b1a0

08020f04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f08:	ed2d 8b08 	vpush	{d8-d11}
 8020f0c:	b09b      	sub	sp, #108	; 0x6c
 8020f0e:	eeb0 aa40 	vmov.f32	s20, s0
 8020f12:	eef0 9a60 	vmov.f32	s19, s1
 8020f16:	930a      	str	r3, [sp, #40]	; 0x28
 8020f18:	eeb0 9a41 	vmov.f32	s18, s2
 8020f1c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8020f20:	eeb0 8a62 	vmov.f32	s16, s5
 8020f24:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8020f26:	eef0 8a43 	vmov.f32	s17, s6
 8020f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8020f2c:	eef0 ba44 	vmov.f32	s23, s8
 8020f30:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020f34:	eeb0 ba64 	vmov.f32	s22, s9
 8020f38:	9019      	str	r0, [sp, #100]	; 0x64
 8020f3a:	eef0 aa45 	vmov.f32	s21, s10
 8020f3e:	9114      	str	r1, [sp, #80]	; 0x50
 8020f40:	9317      	str	r3, [sp, #92]	; 0x5c
 8020f42:	6868      	ldr	r0, [r5, #4]
 8020f44:	9218      	str	r2, [sp, #96]	; 0x60
 8020f46:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020f48:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8020f4c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020f50:	fb00 1303 	mla	r3, r0, r3, r1
 8020f54:	6829      	ldr	r1, [r5, #0]
 8020f56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f5a:	18cb      	adds	r3, r1, r3
 8020f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8020f5e:	6813      	ldr	r3, [r2, #0]
 8020f60:	9313      	str	r3, [sp, #76]	; 0x4c
 8020f62:	6853      	ldr	r3, [r2, #4]
 8020f64:	3304      	adds	r3, #4
 8020f66:	9309      	str	r3, [sp, #36]	; 0x24
 8020f68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	dc03      	bgt.n	8020f76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020f6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	f340 8352 	ble.w	802161a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	f340 81a2 	ble.w	80212c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8020f7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020f80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020f82:	1412      	asrs	r2, r2, #16
 8020f84:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020f88:	d431      	bmi.n	8020fee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020f8a:	1c51      	adds	r1, r2, #1
 8020f8c:	428c      	cmp	r4, r1
 8020f8e:	dd31      	ble.n	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	db2f      	blt.n	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020f94:	1c59      	adds	r1, r3, #1
 8020f96:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020f98:	4288      	cmp	r0, r1
 8020f9a:	dd2b      	ble.n	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f9e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020fa0:	3b01      	subs	r3, #1
 8020fa2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020fa4:	fb02 1203 	mla	r2, r2, r3, r1
 8020fa8:	1412      	asrs	r2, r2, #16
 8020faa:	d42d      	bmi.n	8021008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020fac:	3201      	adds	r2, #1
 8020fae:	4294      	cmp	r4, r2
 8020fb0:	dd2a      	ble.n	8021008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020fb2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020fb4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020fb6:	fb02 1303 	mla	r3, r2, r3, r1
 8020fba:	141b      	asrs	r3, r3, #16
 8020fbc:	d424      	bmi.n	8021008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020fbe:	3301      	adds	r3, #1
 8020fc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020fc2:	429a      	cmp	r2, r3
 8020fc4:	dd20      	ble.n	8021008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020fc8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8020fcc:	f103 0e03 	add.w	lr, r3, #3
 8020fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fd2:	9315      	str	r3, [sp, #84]	; 0x54
 8020fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	f300 81de 	bgt.w	8021398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8020fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020fe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020fe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fe8:	441a      	add	r2, r3
 8020fea:	920d      	str	r2, [sp, #52]	; 0x34
 8020fec:	e16b      	b.n	80212c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8020fee:	1c51      	adds	r1, r2, #1
 8020ff0:	f040 8158 	bne.w	80212a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020ff4:	42a2      	cmp	r2, r4
 8020ff6:	f280 8155 	bge.w	80212a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020ffa:	1c5a      	adds	r2, r3, #1
 8020ffc:	f2c0 8152 	blt.w	80212a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021002:	4293      	cmp	r3, r2
 8021004:	f280 814e 	bge.w	80212a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802100a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802100c:	9316      	str	r3, [sp, #88]	; 0x58
 802100e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8021012:	9315      	str	r3, [sp, #84]	; 0x54
 8021014:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021016:	2b00      	cmp	r3, #0
 8021018:	dde0      	ble.n	8020fdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802101a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802101c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802101e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021022:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021024:	141b      	asrs	r3, r3, #16
 8021026:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802102a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802102c:	1412      	asrs	r2, r2, #16
 802102e:	f100 819a 	bmi.w	8021366 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8021032:	1c55      	adds	r5, r2, #1
 8021034:	42ac      	cmp	r4, r5
 8021036:	f340 8198 	ble.w	802136a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802103a:	2b00      	cmp	r3, #0
 802103c:	f2c0 8195 	blt.w	802136a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021040:	1c5d      	adds	r5, r3, #1
 8021042:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021044:	42af      	cmp	r7, r5
 8021046:	f340 8190 	ble.w	802136a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802104a:	fb03 2304 	mla	r3, r3, r4, r2
 802104e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021050:	18d5      	adds	r5, r2, r3
 8021052:	5cd3      	ldrb	r3, [r2, r3]
 8021054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802105a:	0e1f      	lsrs	r7, r3, #24
 802105c:	2800      	cmp	r0, #0
 802105e:	f000 8171 	beq.w	8021344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021062:	f895 c001 	ldrb.w	ip, [r5, #1]
 8021066:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802106a:	920e      	str	r2, [sp, #56]	; 0x38
 802106c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021070:	2900      	cmp	r1, #0
 8021072:	f000 8172 	beq.w	802135a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021076:	eb05 0c04 	add.w	ip, r5, r4
 802107a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802107c:	5d2d      	ldrb	r5, [r5, r4]
 802107e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8021082:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021086:	950b      	str	r5, [sp, #44]	; 0x2c
 8021088:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802108c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802108e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021092:	0e15      	lsrs	r5, r2, #24
 8021094:	920f      	str	r2, [sp, #60]	; 0x3c
 8021096:	b280      	uxth	r0, r0
 8021098:	b289      	uxth	r1, r1
 802109a:	fb00 fa01 	mul.w	sl, r0, r1
 802109e:	0100      	lsls	r0, r0, #4
 80210a0:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80210a4:	eba0 080a 	sub.w	r8, r0, sl
 80210a8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80210ac:	b289      	uxth	r1, r1
 80210ae:	fa1f f888 	uxth.w	r8, r8
 80210b2:	1a52      	subs	r2, r2, r1
 80210b4:	fb08 f00e 	mul.w	r0, r8, lr
 80210b8:	b292      	uxth	r2, r2
 80210ba:	fb02 0007 	mla	r0, r2, r7, r0
 80210be:	fb01 0009 	mla	r0, r1, r9, r0
 80210c2:	fb0a 0005 	mla	r0, sl, r5, r0
 80210c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80210ca:	2800      	cmp	r0, #0
 80210cc:	f000 80dd 	beq.w	802128a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80210d0:	2fff      	cmp	r7, #255	; 0xff
 80210d2:	d01a      	beq.n	802110a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80210d4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80210d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210dc:	fb07 fc0c 	mul.w	ip, r7, ip
 80210e0:	435f      	muls	r7, r3
 80210e2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80210e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80210ea:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80210ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210f2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80210f6:	4463      	add	r3, ip
 80210f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80210fc:	0a1b      	lsrs	r3, r3, #8
 80210fe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021106:	ea43 030b 	orr.w	r3, r3, fp
 802110a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802110e:	d01e      	beq.n	802114e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8021110:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021112:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021116:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802111a:	fb0e fb0b 	mul.w	fp, lr, fp
 802111e:	fb0e fe07 	mul.w	lr, lr, r7
 8021122:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021126:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802112a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802112e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021132:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021136:	44dc      	add	ip, fp
 8021138:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802113c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021140:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021144:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021148:	ea4c 070e 	orr.w	r7, ip, lr
 802114c:	970e      	str	r7, [sp, #56]	; 0x38
 802114e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021152:	d01e      	beq.n	8021192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021154:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021156:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802115a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802115e:	fb09 fe0e 	mul.w	lr, r9, lr
 8021162:	fb09 f907 	mul.w	r9, r9, r7
 8021166:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802116a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802116e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021172:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021176:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802117a:	44f4      	add	ip, lr
 802117c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021184:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802118c:	ea4c 0709 	orr.w	r7, ip, r9
 8021190:	970b      	str	r7, [sp, #44]	; 0x2c
 8021192:	2dff      	cmp	r5, #255	; 0xff
 8021194:	d01c      	beq.n	80211d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8021196:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021198:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802119c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80211a0:	fb05 fe0e 	mul.w	lr, r5, lr
 80211a4:	437d      	muls	r5, r7
 80211a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80211aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80211ae:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80211b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211b6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80211ba:	44f4      	add	ip, lr
 80211bc:	0a2d      	lsrs	r5, r5, #8
 80211be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211c2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80211c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211ca:	ea4c 0505 	orr.w	r5, ip, r5
 80211ce:	950f      	str	r5, [sp, #60]	; 0x3c
 80211d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80211d2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80211d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80211de:	fb08 f505 	mul.w	r5, r8, r5
 80211e2:	fb02 5507 	mla	r5, r2, r7, r5
 80211e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80211e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80211ec:	fb01 5507 	mla	r5, r1, r7, r5
 80211f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80211f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80211f6:	fb0a 5507 	mla	r5, sl, r7, r5
 80211fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80211fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021200:	0a2d      	lsrs	r5, r5, #8
 8021202:	fb08 f807 	mul.w	r8, r8, r7
 8021206:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802120a:	fb02 8303 	mla	r3, r2, r3, r8
 802120e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021210:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021216:	fb01 330c 	mla	r3, r1, ip, r3
 802121a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802121e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8021222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021224:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021226:	4343      	muls	r3, r0
 8021228:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802122c:	1c58      	adds	r0, r3, #1
 802122e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021232:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021236:	ea45 050a 	orr.w	r5, r5, sl
 802123a:	7833      	ldrb	r3, [r6, #0]
 802123c:	b2ea      	uxtb	r2, r5
 802123e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021242:	fb12 f201 	smulbb	r2, r2, r1
 8021246:	b2c0      	uxtb	r0, r0
 8021248:	fb03 2300 	mla	r3, r3, r0, r2
 802124c:	b29b      	uxth	r3, r3
 802124e:	1c5a      	adds	r2, r3, #1
 8021250:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021254:	7872      	ldrb	r2, [r6, #1]
 8021256:	fb12 f200 	smulbb	r2, r2, r0
 802125a:	121b      	asrs	r3, r3, #8
 802125c:	7033      	strb	r3, [r6, #0]
 802125e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021262:	0c2d      	lsrs	r5, r5, #16
 8021264:	fb03 2301 	mla	r3, r3, r1, r2
 8021268:	b29b      	uxth	r3, r3
 802126a:	1c5a      	adds	r2, r3, #1
 802126c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021270:	121b      	asrs	r3, r3, #8
 8021272:	7073      	strb	r3, [r6, #1]
 8021274:	78b3      	ldrb	r3, [r6, #2]
 8021276:	fb13 f000 	smulbb	r0, r3, r0
 802127a:	fb05 0501 	mla	r5, r5, r1, r0
 802127e:	b2ad      	uxth	r5, r5
 8021280:	1c6b      	adds	r3, r5, #1
 8021282:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021286:	122d      	asrs	r5, r5, #8
 8021288:	70b5      	strb	r5, [r6, #2]
 802128a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802128c:	3603      	adds	r6, #3
 802128e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021290:	4413      	add	r3, r2
 8021292:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021294:	932d      	str	r3, [sp, #180]	; 0xb4
 8021296:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021298:	4413      	add	r3, r2
 802129a:	932e      	str	r3, [sp, #184]	; 0xb8
 802129c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802129e:	3b01      	subs	r3, #1
 80212a0:	9316      	str	r3, [sp, #88]	; 0x58
 80212a2:	e6b7      	b.n	8021014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80212a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80212a6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80212a8:	4413      	add	r3, r2
 80212aa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80212ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80212ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80212b0:	4413      	add	r3, r2
 80212b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80212b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212b6:	3b01      	subs	r3, #1
 80212b8:	930a      	str	r3, [sp, #40]	; 0x28
 80212ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80212bc:	3303      	adds	r3, #3
 80212be:	930d      	str	r3, [sp, #52]	; 0x34
 80212c0:	e659      	b.n	8020f76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80212c2:	f47f ae6b 	bne.w	8020f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80212c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	f340 81a6 	ble.w	802161a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80212ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80212d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80212d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80212d8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80212dc:	eef0 6a48 	vmov.f32	s13, s16
 80212e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80212e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80212e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212ec:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80212f0:	eef0 6a68 	vmov.f32	s13, s17
 80212f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212f8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80212fc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021300:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021304:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021308:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802130c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021310:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021314:	ee18 2a10 	vmov	r2, s16
 8021318:	eeb0 8a47 	vmov.f32	s16, s14
 802131c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021320:	ee18 2a90 	vmov	r2, s17
 8021324:	932f      	str	r3, [sp, #188]	; 0xbc
 8021326:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021328:	eef0 8a67 	vmov.f32	s17, s15
 802132c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021330:	9330      	str	r3, [sp, #192]	; 0xc0
 8021332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021334:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021336:	3b01      	subs	r3, #1
 8021338:	9314      	str	r3, [sp, #80]	; 0x50
 802133a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802133c:	bf08      	it	eq
 802133e:	4613      	moveq	r3, r2
 8021340:	930a      	str	r3, [sp, #40]	; 0x28
 8021342:	e611      	b.n	8020f68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021344:	b161      	cbz	r1, 8021360 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8021346:	5d2a      	ldrb	r2, [r5, r4]
 8021348:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802134a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802134e:	25ff      	movs	r5, #255	; 0xff
 8021350:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021354:	920b      	str	r2, [sp, #44]	; 0x2c
 8021356:	46ae      	mov	lr, r5
 8021358:	e69d      	b.n	8021096 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802135a:	25ff      	movs	r5, #255	; 0xff
 802135c:	46a9      	mov	r9, r5
 802135e:	e69a      	b.n	8021096 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8021360:	25ff      	movs	r5, #255	; 0xff
 8021362:	46a9      	mov	r9, r5
 8021364:	e7f7      	b.n	8021356 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8021366:	1c57      	adds	r7, r2, #1
 8021368:	d18f      	bne.n	802128a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802136a:	4294      	cmp	r4, r2
 802136c:	dd8d      	ble.n	802128a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802136e:	1c5d      	adds	r5, r3, #1
 8021370:	db8b      	blt.n	802128a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021372:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021374:	429d      	cmp	r5, r3
 8021376:	dd88      	ble.n	802128a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021378:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802137a:	9202      	str	r2, [sp, #8]
 802137c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802137e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8021382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021384:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021386:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802138a:	e9cd 4300 	strd	r4, r3, [sp]
 802138e:	4631      	mov	r1, r6
 8021390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021392:	f7ff fc63 	bl	8020c5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021396:	e778      	b.n	802128a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021398:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802139a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802139c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80213a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80213a2:	1412      	asrs	r2, r2, #16
 80213a4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80213a8:	141b      	asrs	r3, r3, #16
 80213aa:	fb04 2303 	mla	r3, r4, r3, r2
 80213ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80213b0:	18d5      	adds	r5, r2, r3
 80213b2:	5cd3      	ldrb	r3, [r2, r3]
 80213b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80213b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80213ba:	0e1e      	lsrs	r6, r3, #24
 80213bc:	2900      	cmp	r1, #0
 80213be:	f000 811b 	beq.w	80215f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80213c2:	786a      	ldrb	r2, [r5, #1]
 80213c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80213c6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80213ca:	9210      	str	r2, [sp, #64]	; 0x40
 80213cc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80213d0:	2800      	cmp	r0, #0
 80213d2:	f000 811c 	beq.w	802160e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80213d6:	192a      	adds	r2, r5, r4
 80213d8:	5d2d      	ldrb	r5, [r5, r4]
 80213da:	7852      	ldrb	r2, [r2, #1]
 80213dc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80213e0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80213e4:	950c      	str	r5, [sp, #48]	; 0x30
 80213e6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80213ea:	0e15      	lsrs	r5, r2, #24
 80213ec:	9211      	str	r2, [sp, #68]	; 0x44
 80213ee:	b289      	uxth	r1, r1
 80213f0:	b280      	uxth	r0, r0
 80213f2:	fb01 fa00 	mul.w	sl, r1, r0
 80213f6:	0109      	lsls	r1, r1, #4
 80213f8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80213fc:	eba1 080a 	sub.w	r8, r1, sl
 8021400:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021404:	b280      	uxth	r0, r0
 8021406:	fa1f f888 	uxth.w	r8, r8
 802140a:	1a12      	subs	r2, r2, r0
 802140c:	fb08 f10c 	mul.w	r1, r8, ip
 8021410:	b292      	uxth	r2, r2
 8021412:	fb02 1106 	mla	r1, r2, r6, r1
 8021416:	fb00 1109 	mla	r1, r0, r9, r1
 802141a:	fb0a 1105 	mla	r1, sl, r5, r1
 802141e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021422:	2900      	cmp	r1, #0
 8021424:	f000 80da 	beq.w	80215dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8021428:	2eff      	cmp	r6, #255	; 0xff
 802142a:	d016      	beq.n	802145a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802142c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021430:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021434:	4377      	muls	r7, r6
 8021436:	435e      	muls	r6, r3
 8021438:	0a3b      	lsrs	r3, r7, #8
 802143a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802143e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021442:	443b      	add	r3, r7
 8021444:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021448:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802144c:	0a1b      	lsrs	r3, r3, #8
 802144e:	0a3f      	lsrs	r7, r7, #8
 8021450:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021454:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021458:	433b      	orrs	r3, r7
 802145a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802145e:	d01d      	beq.n	802149c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8021460:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021462:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021464:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021468:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802146c:	fb0c f606 	mul.w	r6, ip, r6
 8021470:	fb0c fc07 	mul.w	ip, ip, r7
 8021474:	0a37      	lsrs	r7, r6, #8
 8021476:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802147a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802147e:	4437      	add	r7, r6
 8021480:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021484:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021488:	0a3f      	lsrs	r7, r7, #8
 802148a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802148e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021492:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021496:	ea47 060c 	orr.w	r6, r7, ip
 802149a:	9610      	str	r6, [sp, #64]	; 0x40
 802149c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80214a0:	d01d      	beq.n	80214de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 80214a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80214a4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80214a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80214ac:	fb09 fc0c 	mul.w	ip, r9, ip
 80214b0:	fb09 f906 	mul.w	r9, r9, r6
 80214b4:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80214b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80214bc:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80214c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80214c4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80214c8:	4467      	add	r7, ip
 80214ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80214ce:	0a3f      	lsrs	r7, r7, #8
 80214d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80214d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80214d8:	ea47 0609 	orr.w	r6, r7, r9
 80214dc:	960c      	str	r6, [sp, #48]	; 0x30
 80214de:	2dff      	cmp	r5, #255	; 0xff
 80214e0:	d01a      	beq.n	8021518 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80214e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80214e4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80214e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80214ec:	fb05 fc0c 	mul.w	ip, r5, ip
 80214f0:	4375      	muls	r5, r6
 80214f2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80214f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80214fa:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80214fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021502:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021506:	4467      	add	r7, ip
 8021508:	0a2d      	lsrs	r5, r5, #8
 802150a:	0a3f      	lsrs	r7, r7, #8
 802150c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021510:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021514:	433d      	orrs	r5, r7
 8021516:	9511      	str	r5, [sp, #68]	; 0x44
 8021518:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802151a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802151e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021522:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021526:	fb08 f505 	mul.w	r5, r8, r5
 802152a:	fb02 5506 	mla	r5, r2, r6, r5
 802152e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021530:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021534:	fb00 5506 	mla	r5, r0, r6, r5
 8021538:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802153a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802153e:	fb0a 5506 	mla	r5, sl, r6, r5
 8021542:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021544:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021548:	0a2d      	lsrs	r5, r5, #8
 802154a:	fb08 f806 	mul.w	r8, r8, r6
 802154e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021552:	fb02 8303 	mla	r3, r2, r3, r8
 8021556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021558:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802155c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802155e:	fb00 3307 	mla	r3, r0, r7, r3
 8021562:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021566:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802156a:	fb01 f30b 	mul.w	r3, r1, fp
 802156e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021572:	1c59      	adds	r1, r3, #1
 8021574:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021578:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802157c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021580:	ea45 050c 	orr.w	r5, r5, ip
 8021584:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021588:	b2ea      	uxtb	r2, r5
 802158a:	b2c9      	uxtb	r1, r1
 802158c:	fb12 f20b 	smulbb	r2, r2, fp
 8021590:	fb03 2301 	mla	r3, r3, r1, r2
 8021594:	b29b      	uxth	r3, r3
 8021596:	1c5a      	adds	r2, r3, #1
 8021598:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802159c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80215a0:	fb12 f201 	smulbb	r2, r2, r1
 80215a4:	121b      	asrs	r3, r3, #8
 80215a6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80215aa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80215ae:	0c2d      	lsrs	r5, r5, #16
 80215b0:	fb03 230b 	mla	r3, r3, fp, r2
 80215b4:	b29b      	uxth	r3, r3
 80215b6:	1c5a      	adds	r2, r3, #1
 80215b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80215bc:	121b      	asrs	r3, r3, #8
 80215be:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80215c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80215c6:	fb13 f101 	smulbb	r1, r3, r1
 80215ca:	fb05 150b 	mla	r5, r5, fp, r1
 80215ce:	b2ad      	uxth	r5, r5
 80215d0:	1c69      	adds	r1, r5, #1
 80215d2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80215d6:	122d      	asrs	r5, r5, #8
 80215d8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80215dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80215de:	f10e 0e03 	add.w	lr, lr, #3
 80215e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80215e4:	4413      	add	r3, r2
 80215e6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80215e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80215ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80215ec:	4413      	add	r3, r2
 80215ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80215f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215f2:	3b01      	subs	r3, #1
 80215f4:	9315      	str	r3, [sp, #84]	; 0x54
 80215f6:	e4ed      	b.n	8020fd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80215f8:	b160      	cbz	r0, 8021614 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80215fa:	5d2a      	ldrb	r2, [r5, r4]
 80215fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80215fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021602:	25ff      	movs	r5, #255	; 0xff
 8021604:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021608:	920c      	str	r2, [sp, #48]	; 0x30
 802160a:	46ac      	mov	ip, r5
 802160c:	e6ef      	b.n	80213ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 802160e:	25ff      	movs	r5, #255	; 0xff
 8021610:	46a9      	mov	r9, r5
 8021612:	e6ec      	b.n	80213ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021614:	25ff      	movs	r5, #255	; 0xff
 8021616:	46a9      	mov	r9, r5
 8021618:	e7f7      	b.n	802160a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802161a:	b01b      	add	sp, #108	; 0x6c
 802161c:	ecbd 8b08 	vpop	{d8-d11}
 8021620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021628:	b085      	sub	sp, #20
 802162a:	7888      	ldrb	r0, [r1, #2]
 802162c:	4692      	mov	sl, r2
 802162e:	4698      	mov	r8, r3
 8021630:	9000      	str	r0, [sp, #0]
 8021632:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021636:	7848      	ldrb	r0, [r1, #1]
 8021638:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802163c:	9001      	str	r0, [sp, #4]
 802163e:	7808      	ldrb	r0, [r1, #0]
 8021640:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8021644:	9002      	str	r0, [sp, #8]
 8021646:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802164a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802164e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8021652:	fb04 560c 	mla	r6, r4, ip, r5
 8021656:	2c00      	cmp	r4, #0
 8021658:	eb02 0e06 	add.w	lr, r2, r6
 802165c:	9a00      	ldr	r2, [sp, #0]
 802165e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021662:	9a01      	ldr	r2, [sp, #4]
 8021664:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021668:	db3e      	blt.n	80216e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802166a:	45a1      	cmp	r9, r4
 802166c:	dd3c      	ble.n	80216e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802166e:	2d00      	cmp	r5, #0
 8021670:	db38      	blt.n	80216e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021672:	45ac      	cmp	ip, r5
 8021674:	dd36      	ble.n	80216e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021676:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802167a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802167e:	1c6e      	adds	r6, r5, #1
 8021680:	d435      	bmi.n	80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021682:	45b4      	cmp	ip, r6
 8021684:	dd33      	ble.n	80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021686:	b393      	cbz	r3, 80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021688:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802168c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8021690:	3401      	adds	r4, #1
 8021692:	d430      	bmi.n	80216f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021694:	45a1      	cmp	r9, r4
 8021696:	dd2e      	ble.n	80216f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021698:	b36f      	cbz	r7, 80216f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802169a:	2d00      	cmp	r5, #0
 802169c:	db29      	blt.n	80216f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802169e:	45ac      	cmp	ip, r5
 80216a0:	dd27      	ble.n	80216f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 80216a2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80216a6:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80216aa:	3501      	adds	r5, #1
 80216ac:	d407      	bmi.n	80216be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80216ae:	45ac      	cmp	ip, r5
 80216b0:	dd05      	ble.n	80216be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80216b2:	b123      	cbz	r3, 80216be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80216b4:	44f4      	add	ip, lr
 80216b6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80216ba:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80216be:	2b0f      	cmp	r3, #15
 80216c0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80216c4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80216c8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80216cc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80216d0:	d801      	bhi.n	80216d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80216d2:	2f0f      	cmp	r7, #15
 80216d4:	d911      	bls.n	80216fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80216d6:	4b76      	ldr	r3, [pc, #472]	; (80218b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80216d8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80216dc:	4a75      	ldr	r2, [pc, #468]	; (80218b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80216de:	4876      	ldr	r0, [pc, #472]	; (80218b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80216e0:	f004 ff94 	bl	802660c <__assert_func>
 80216e4:	4602      	mov	r2, r0
 80216e6:	e7ca      	b.n	802167e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80216e8:	4606      	mov	r6, r0
 80216ea:	4602      	mov	r2, r0
 80216ec:	e7d0      	b.n	8021690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80216ee:	4606      	mov	r6, r0
 80216f0:	e7ce      	b.n	8021690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80216f2:	4604      	mov	r4, r0
 80216f4:	e7d9      	b.n	80216aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80216f6:	4604      	mov	r4, r0
 80216f8:	e7e1      	b.n	80216be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80216fa:	b29b      	uxth	r3, r3
 80216fc:	b2bf      	uxth	r7, r7
 80216fe:	fb07 fe03 	mul.w	lr, r7, r3
 8021702:	011b      	lsls	r3, r3, #4
 8021704:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021708:	eba3 0c0e 	sub.w	ip, r3, lr
 802170c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021710:	b2bf      	uxth	r7, r7
 8021712:	fa1f fc8c 	uxth.w	ip, ip
 8021716:	1bed      	subs	r5, r5, r7
 8021718:	fb0c f30a 	mul.w	r3, ip, sl
 802171c:	b2ad      	uxth	r5, r5
 802171e:	fb05 330b 	mla	r3, r5, fp, r3
 8021722:	fb07 3309 	mla	r3, r7, r9, r3
 8021726:	fb0e 3308 	mla	r3, lr, r8, r3
 802172a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802172e:	9303      	str	r3, [sp, #12]
 8021730:	2b00      	cmp	r3, #0
 8021732:	f000 80b9 	beq.w	80218a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8021736:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802173a:	d018      	beq.n	802176e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 802173c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021740:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021744:	fb0b f303 	mul.w	r3, fp, r3
 8021748:	fb0b fb02 	mul.w	fp, fp, r2
 802174c:	0a1a      	lsrs	r2, r3, #8
 802174e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021752:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021756:	441a      	add	r2, r3
 8021758:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802175c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021760:	0a12      	lsrs	r2, r2, #8
 8021762:	0a1b      	lsrs	r3, r3, #8
 8021764:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802176c:	431a      	orrs	r2, r3
 802176e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021772:	d019      	beq.n	80217a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8021774:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021778:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802177c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021780:	fb0a fa06 	mul.w	sl, sl, r6
 8021784:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021788:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802178c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021790:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021794:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021798:	445e      	add	r6, fp
 802179a:	0a1b      	lsrs	r3, r3, #8
 802179c:	0a36      	lsrs	r6, r6, #8
 802179e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80217a6:	431e      	orrs	r6, r3
 80217a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80217ac:	d019      	beq.n	80217e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 80217ae:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80217b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80217b6:	fb09 fa0a 	mul.w	sl, r9, sl
 80217ba:	fb09 f904 	mul.w	r9, r9, r4
 80217be:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80217c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80217c6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80217ca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80217ce:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80217d2:	4454      	add	r4, sl
 80217d4:	0a1b      	lsrs	r3, r3, #8
 80217d6:	0a24      	lsrs	r4, r4, #8
 80217d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80217e0:	431c      	orrs	r4, r3
 80217e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80217e6:	d019      	beq.n	802181c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80217e8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80217ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80217f0:	fb08 f909 	mul.w	r9, r8, r9
 80217f4:	fb08 f800 	mul.w	r8, r8, r0
 80217f8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80217fc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021800:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021804:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021808:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802180c:	4448      	add	r0, r9
 802180e:	0a1b      	lsrs	r3, r3, #8
 8021810:	0a00      	lsrs	r0, r0, #8
 8021812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021816:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802181a:	4318      	orrs	r0, r3
 802181c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021820:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021824:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021828:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802182c:	fb0c f808 	mul.w	r8, ip, r8
 8021830:	fb0c f606 	mul.w	r6, ip, r6
 8021834:	fb05 8803 	mla	r8, r5, r3, r8
 8021838:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802183c:	fb05 6202 	mla	r2, r5, r2, r6
 8021840:	fb07 8803 	mla	r8, r7, r3, r8
 8021844:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021848:	fb0e 8303 	mla	r3, lr, r3, r8
 802184c:	0a1b      	lsrs	r3, r3, #8
 802184e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021852:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8021856:	9c02      	ldr	r4, [sp, #8]
 8021858:	fb07 2703 	mla	r7, r7, r3, r2
 802185c:	9a03      	ldr	r2, [sp, #12]
 802185e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021862:	43d2      	mvns	r2, r2
 8021864:	fb0e 7303 	mla	r3, lr, r3, r7
 8021868:	b2d2      	uxtb	r2, r2
 802186a:	0a1b      	lsrs	r3, r3, #8
 802186c:	4354      	muls	r4, r2
 802186e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021872:	1c60      	adds	r0, r4, #1
 8021874:	ea48 0303 	orr.w	r3, r8, r3
 8021878:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802187c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021880:	7008      	strb	r0, [r1, #0]
 8021882:	9801      	ldr	r0, [sp, #4]
 8021884:	4350      	muls	r0, r2
 8021886:	1c44      	adds	r4, r0, #1
 8021888:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 802188c:	0a18      	lsrs	r0, r3, #8
 802188e:	0c1b      	lsrs	r3, r3, #16
 8021890:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8021894:	7048      	strb	r0, [r1, #1]
 8021896:	9800      	ldr	r0, [sp, #0]
 8021898:	4350      	muls	r0, r2
 802189a:	4602      	mov	r2, r0
 802189c:	3001      	adds	r0, #1
 802189e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80218a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80218a6:	708b      	strb	r3, [r1, #2]
 80218a8:	b005      	add	sp, #20
 80218aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218ae:	bf00      	nop
 80218b0:	0802b0d7 	.word	0x0802b0d7
 80218b4:	0802b5ce 	.word	0x0802b5ce
 80218b8:	0802b1a0 	.word	0x0802b1a0

080218bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80218bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c0:	ed2d 8b08 	vpush	{d8-d11}
 80218c4:	b097      	sub	sp, #92	; 0x5c
 80218c6:	eeb0 aa40 	vmov.f32	s20, s0
 80218ca:	eef0 9a60 	vmov.f32	s19, s1
 80218ce:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80218d0:	eeb0 9a41 	vmov.f32	s18, s2
 80218d4:	9308      	str	r3, [sp, #32]
 80218d6:	eeb0 8a62 	vmov.f32	s16, s5
 80218da:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80218de:	eef0 8a43 	vmov.f32	s17, s6
 80218e2:	9015      	str	r0, [sp, #84]	; 0x54
 80218e4:	eef0 ba44 	vmov.f32	s23, s8
 80218e8:	6868      	ldr	r0, [r5, #4]
 80218ea:	eeb0 ba64 	vmov.f32	s22, s9
 80218ee:	9112      	str	r1, [sp, #72]	; 0x48
 80218f0:	eef0 aa45 	vmov.f32	s21, s10
 80218f4:	9310      	str	r3, [sp, #64]	; 0x40
 80218f6:	9214      	str	r2, [sp, #80]	; 0x50
 80218f8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80218fa:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80218fe:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021902:	fb00 1303 	mla	r3, r0, r3, r1
 8021906:	6829      	ldr	r1, [r5, #0]
 8021908:	6855      	ldr	r5, [r2, #4]
 802190a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802190e:	3504      	adds	r5, #4
 8021910:	18cb      	adds	r3, r1, r3
 8021912:	930b      	str	r3, [sp, #44]	; 0x2c
 8021914:	6813      	ldr	r3, [r2, #0]
 8021916:	9311      	str	r3, [sp, #68]	; 0x44
 8021918:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802191a:	2b00      	cmp	r3, #0
 802191c:	dc03      	bgt.n	8021926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802191e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021920:	2b00      	cmp	r3, #0
 8021922:	f340 8333 	ble.w	8021f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8021926:	9b08      	ldr	r3, [sp, #32]
 8021928:	2b00      	cmp	r3, #0
 802192a:	f340 8190 	ble.w	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802192e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021930:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021932:	1412      	asrs	r2, r2, #16
 8021934:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021938:	d42f      	bmi.n	802199a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802193a:	1c51      	adds	r1, r2, #1
 802193c:	428c      	cmp	r4, r1
 802193e:	dd2f      	ble.n	80219a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021940:	2b00      	cmp	r3, #0
 8021942:	db2d      	blt.n	80219a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021944:	1c59      	adds	r1, r3, #1
 8021946:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021948:	4288      	cmp	r0, r1
 802194a:	dd29      	ble.n	80219a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802194c:	9b08      	ldr	r3, [sp, #32]
 802194e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021950:	3b01      	subs	r3, #1
 8021952:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021954:	fb02 1203 	mla	r2, r2, r3, r1
 8021958:	1412      	asrs	r2, r2, #16
 802195a:	d42b      	bmi.n	80219b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802195c:	3201      	adds	r2, #1
 802195e:	4294      	cmp	r4, r2
 8021960:	dd28      	ble.n	80219b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021962:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021964:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021966:	fb02 1303 	mla	r3, r2, r3, r1
 802196a:	141b      	asrs	r3, r3, #16
 802196c:	d422      	bmi.n	80219b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802196e:	3301      	adds	r3, #1
 8021970:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021972:	429a      	cmp	r2, r3
 8021974:	dd1e      	ble.n	80219b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021978:	f103 0803 	add.w	r8, r3, #3
 802197c:	9b08      	ldr	r3, [sp, #32]
 802197e:	9307      	str	r3, [sp, #28]
 8021980:	9b07      	ldr	r3, [sp, #28]
 8021982:	2b00      	cmp	r3, #0
 8021984:	f300 81ca 	bgt.w	8021d1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8021988:	9b08      	ldr	r3, [sp, #32]
 802198a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802198c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021994:	441a      	add	r2, r3
 8021996:	920b      	str	r2, [sp, #44]	; 0x2c
 8021998:	e15b      	b.n	8021c52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 802199a:	1c51      	adds	r1, r2, #1
 802199c:	f040 8148 	bne.w	8021c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80219a0:	42a2      	cmp	r2, r4
 80219a2:	f280 8145 	bge.w	8021c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80219a6:	1c5a      	adds	r2, r3, #1
 80219a8:	f2c0 8142 	blt.w	8021c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80219ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80219ae:	4293      	cmp	r3, r2
 80219b0:	f280 813e 	bge.w	8021c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80219b4:	9b08      	ldr	r3, [sp, #32]
 80219b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80219b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219ba:	9307      	str	r3, [sp, #28]
 80219bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80219be:	2b00      	cmp	r3, #0
 80219c0:	dde2      	ble.n	8021988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80219c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80219c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80219c6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80219ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80219cc:	141b      	asrs	r3, r3, #16
 80219ce:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80219d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80219d4:	1412      	asrs	r2, r2, #16
 80219d6:	f100 818b 	bmi.w	8021cf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 80219da:	1c56      	adds	r6, r2, #1
 80219dc:	42b4      	cmp	r4, r6
 80219de:	f340 8189 	ble.w	8021cf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	f2c0 8186 	blt.w	8021cf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80219e8:	1c5e      	adds	r6, r3, #1
 80219ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80219ec:	42b7      	cmp	r7, r6
 80219ee:	f340 8181 	ble.w	8021cf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80219f2:	fb03 2304 	mla	r3, r3, r4, r2
 80219f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80219f8:	18d6      	adds	r6, r2, r3
 80219fa:	5cd3      	ldrb	r3, [r2, r3]
 80219fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021a00:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021a04:	2900      	cmp	r1, #0
 8021a06:	f000 8163 	beq.w	8021cd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8021a0a:	7872      	ldrb	r2, [r6, #1]
 8021a0c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021a10:	920c      	str	r2, [sp, #48]	; 0x30
 8021a12:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021a16:	2800      	cmp	r0, #0
 8021a18:	f000 8164 	beq.w	8021ce4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8021a1c:	1932      	adds	r2, r6, r4
 8021a1e:	5d36      	ldrb	r6, [r6, r4]
 8021a20:	7852      	ldrb	r2, [r2, #1]
 8021a22:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8021a26:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021a2a:	9609      	str	r6, [sp, #36]	; 0x24
 8021a2c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021a30:	0e16      	lsrs	r6, r2, #24
 8021a32:	920d      	str	r2, [sp, #52]	; 0x34
 8021a34:	b289      	uxth	r1, r1
 8021a36:	b280      	uxth	r0, r0
 8021a38:	fb01 fb00 	mul.w	fp, r1, r0
 8021a3c:	0109      	lsls	r1, r1, #4
 8021a3e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021a42:	eba1 090b 	sub.w	r9, r1, fp
 8021a46:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021a4a:	b280      	uxth	r0, r0
 8021a4c:	fa1f f989 	uxth.w	r9, r9
 8021a50:	1a12      	subs	r2, r2, r0
 8021a52:	fb09 f108 	mul.w	r1, r9, r8
 8021a56:	b292      	uxth	r2, r2
 8021a58:	fb02 110c 	mla	r1, r2, ip, r1
 8021a5c:	fb00 110a 	mla	r1, r0, sl, r1
 8021a60:	fb0b 1106 	mla	r1, fp, r6, r1
 8021a64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021a68:	2900      	cmp	r1, #0
 8021a6a:	f000 80d2 	beq.w	8021c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021a6e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021a72:	d01b      	beq.n	8021aac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8021a74:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021a78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a7c:	fb0c fe0e 	mul.w	lr, ip, lr
 8021a80:	fb0c fc03 	mul.w	ip, ip, r3
 8021a84:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021a88:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021a8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021a90:	4473      	add	r3, lr
 8021a92:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021a96:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021a9a:	0a1b      	lsrs	r3, r3, #8
 8021a9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021aa0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021aa4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021aa8:	ea43 030e 	orr.w	r3, r3, lr
 8021aac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021ab0:	d01e      	beq.n	8021af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8021ab2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021ab4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021ab8:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021abc:	fb08 fc0c 	mul.w	ip, r8, ip
 8021ac0:	fb08 f80e 	mul.w	r8, r8, lr
 8021ac4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021ac8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021acc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ad0:	44e6      	add	lr, ip
 8021ad2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021ad6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021ada:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ade:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021ae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ae6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021aea:	ea4e 0708 	orr.w	r7, lr, r8
 8021aee:	970c      	str	r7, [sp, #48]	; 0x30
 8021af0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021af4:	d01e      	beq.n	8021b34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021af6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021af8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021afc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021b00:	fb0a f808 	mul.w	r8, sl, r8
 8021b04:	fb0a fa0c 	mul.w	sl, sl, ip
 8021b08:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021b0c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021b10:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b1c:	44c6      	add	lr, r8
 8021b1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b2e:	ea4e 070a 	orr.w	r7, lr, sl
 8021b32:	9709      	str	r7, [sp, #36]	; 0x24
 8021b34:	2eff      	cmp	r6, #255	; 0xff
 8021b36:	d01d      	beq.n	8021b74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8021b38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021b3a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021b3e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021b42:	fb06 f808 	mul.w	r8, r6, r8
 8021b46:	fb06 f60c 	mul.w	r6, r6, ip
 8021b4a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021b4e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021b52:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021b56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b5a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021b5e:	44c6      	add	lr, r8
 8021b60:	0a36      	lsrs	r6, r6, #8
 8021b62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b66:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b6e:	ea4e 0606 	orr.w	r6, lr, r6
 8021b72:	960d      	str	r6, [sp, #52]	; 0x34
 8021b74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021b76:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021b7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021b7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021b84:	43c9      	mvns	r1, r1
 8021b86:	fb09 f606 	mul.w	r6, r9, r6
 8021b8a:	b2c9      	uxtb	r1, r1
 8021b8c:	fb02 660c 	mla	r6, r2, ip, r6
 8021b90:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021b94:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021b96:	fb00 660c 	mla	r6, r0, ip, r6
 8021b9a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021b9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021ba0:	fb0b 660c 	mla	r6, fp, ip, r6
 8021ba4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021ba8:	fb09 f90c 	mul.w	r9, r9, ip
 8021bac:	0a36      	lsrs	r6, r6, #8
 8021bae:	fb02 9303 	mla	r3, r2, r3, r9
 8021bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bb4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021bb8:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021bbe:	fb00 330e 	mla	r3, r0, lr, r3
 8021bc2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021bc6:	fb0b 3b00 	mla	fp, fp, r0, r3
 8021bca:	9b07      	ldr	r3, [sp, #28]
 8021bcc:	781b      	ldrb	r3, [r3, #0]
 8021bce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021bd2:	fb03 f201 	mul.w	r2, r3, r1
 8021bd6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021bda:	1c53      	adds	r3, r2, #1
 8021bdc:	ea46 060b 	orr.w	r6, r6, fp
 8021be0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021be4:	9a07      	ldr	r2, [sp, #28]
 8021be6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021bea:	7013      	strb	r3, [r2, #0]
 8021bec:	7853      	ldrb	r3, [r2, #1]
 8021bee:	434b      	muls	r3, r1
 8021bf0:	1c5a      	adds	r2, r3, #1
 8021bf2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021bf6:	0a33      	lsrs	r3, r6, #8
 8021bf8:	0c36      	lsrs	r6, r6, #16
 8021bfa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021bfe:	9a07      	ldr	r2, [sp, #28]
 8021c00:	7053      	strb	r3, [r2, #1]
 8021c02:	7893      	ldrb	r3, [r2, #2]
 8021c04:	4359      	muls	r1, r3
 8021c06:	1c4b      	adds	r3, r1, #1
 8021c08:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021c0c:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8021c10:	7096      	strb	r6, [r2, #2]
 8021c12:	9b07      	ldr	r3, [sp, #28]
 8021c14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021c16:	3303      	adds	r3, #3
 8021c18:	9307      	str	r3, [sp, #28]
 8021c1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021c1c:	4413      	add	r3, r2
 8021c1e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021c20:	9329      	str	r3, [sp, #164]	; 0xa4
 8021c22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021c24:	4413      	add	r3, r2
 8021c26:	932a      	str	r3, [sp, #168]	; 0xa8
 8021c28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c2a:	3b01      	subs	r3, #1
 8021c2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c2e:	e6c5      	b.n	80219bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8021c30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021c32:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021c34:	4413      	add	r3, r2
 8021c36:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021c38:	9329      	str	r3, [sp, #164]	; 0xa4
 8021c3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021c3c:	4413      	add	r3, r2
 8021c3e:	932a      	str	r3, [sp, #168]	; 0xa8
 8021c40:	9b08      	ldr	r3, [sp, #32]
 8021c42:	3b01      	subs	r3, #1
 8021c44:	9308      	str	r3, [sp, #32]
 8021c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c48:	3303      	adds	r3, #3
 8021c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c4c:	e66b      	b.n	8021926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021c4e:	f47f ae7d 	bne.w	802194c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8021c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021c54:	2b00      	cmp	r3, #0
 8021c56:	f340 8199 	ble.w	8021f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8021c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c60:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021c64:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021c68:	eef0 6a48 	vmov.f32	s13, s16
 8021c6c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021c70:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021c74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c78:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021c7c:	eef0 6a68 	vmov.f32	s13, s17
 8021c80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c84:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8021c88:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021c8c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021c90:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021c94:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021c98:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021c9c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021ca0:	ee18 2a10 	vmov	r2, s16
 8021ca4:	eeb0 8a47 	vmov.f32	s16, s14
 8021ca8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cac:	ee18 2a90 	vmov	r2, s17
 8021cb0:	932b      	str	r3, [sp, #172]	; 0xac
 8021cb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021cb4:	eef0 8a67 	vmov.f32	s17, s15
 8021cb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cbc:	932c      	str	r3, [sp, #176]	; 0xb0
 8021cbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021cc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021cc2:	3b01      	subs	r3, #1
 8021cc4:	9312      	str	r3, [sp, #72]	; 0x48
 8021cc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021cc8:	bf08      	it	eq
 8021cca:	4613      	moveq	r3, r2
 8021ccc:	9308      	str	r3, [sp, #32]
 8021cce:	e623      	b.n	8021918 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8021cd0:	b158      	cbz	r0, 8021cea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021cd2:	5d32      	ldrb	r2, [r6, r4]
 8021cd4:	26ff      	movs	r6, #255	; 0xff
 8021cd6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021cda:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8021cde:	9209      	str	r2, [sp, #36]	; 0x24
 8021ce0:	46b0      	mov	r8, r6
 8021ce2:	e6a7      	b.n	8021a34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8021ce4:	26ff      	movs	r6, #255	; 0xff
 8021ce6:	46b2      	mov	sl, r6
 8021ce8:	e6a4      	b.n	8021a34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8021cea:	26ff      	movs	r6, #255	; 0xff
 8021cec:	46b2      	mov	sl, r6
 8021cee:	e7f7      	b.n	8021ce0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021cf0:	1c57      	adds	r7, r2, #1
 8021cf2:	d18e      	bne.n	8021c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021cf4:	4294      	cmp	r4, r2
 8021cf6:	dd8c      	ble.n	8021c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021cf8:	1c5e      	adds	r6, r3, #1
 8021cfa:	db8a      	blt.n	8021c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021cfc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021cfe:	429e      	cmp	r6, r3
 8021d00:	dd87      	ble.n	8021c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021d02:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8021d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8021d0a:	e9cd 4600 	strd	r4, r6, [sp]
 8021d0e:	462b      	mov	r3, r5
 8021d10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021d12:	9907      	ldr	r1, [sp, #28]
 8021d14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021d16:	f7ff fc85 	bl	8021624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021d1a:	e77a      	b.n	8021c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021d1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021d20:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021d24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d26:	1409      	asrs	r1, r1, #16
 8021d28:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021d2c:	141b      	asrs	r3, r3, #16
 8021d2e:	fb04 1303 	mla	r3, r4, r3, r1
 8021d32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021d34:	18ce      	adds	r6, r1, r3
 8021d36:	5ccb      	ldrb	r3, [r1, r3]
 8021d38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021d3c:	0e1f      	lsrs	r7, r3, #24
 8021d3e:	2a00      	cmp	r2, #0
 8021d40:	f000 8114 	beq.w	8021f6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8021d44:	7871      	ldrb	r1, [r6, #1]
 8021d46:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021d4a:	910e      	str	r1, [sp, #56]	; 0x38
 8021d4c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021d50:	2800      	cmp	r0, #0
 8021d52:	f000 8115 	beq.w	8021f80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8021d56:	1931      	adds	r1, r6, r4
 8021d58:	5d36      	ldrb	r6, [r6, r4]
 8021d5a:	7849      	ldrb	r1, [r1, #1]
 8021d5c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8021d60:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021d64:	960a      	str	r6, [sp, #40]	; 0x28
 8021d66:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021d6a:	0e0e      	lsrs	r6, r1, #24
 8021d6c:	910f      	str	r1, [sp, #60]	; 0x3c
 8021d6e:	b292      	uxth	r2, r2
 8021d70:	b280      	uxth	r0, r0
 8021d72:	fb02 fb00 	mul.w	fp, r2, r0
 8021d76:	0112      	lsls	r2, r2, #4
 8021d78:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021d7c:	eba2 090b 	sub.w	r9, r2, fp
 8021d80:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021d84:	b280      	uxth	r0, r0
 8021d86:	fa1f f989 	uxth.w	r9, r9
 8021d8a:	1a09      	subs	r1, r1, r0
 8021d8c:	fb09 f20e 	mul.w	r2, r9, lr
 8021d90:	b289      	uxth	r1, r1
 8021d92:	fb01 2207 	mla	r2, r1, r7, r2
 8021d96:	fb00 220a 	mla	r2, r0, sl, r2
 8021d9a:	fb0b 2206 	mla	r2, fp, r6, r2
 8021d9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021da2:	9213      	str	r2, [sp, #76]	; 0x4c
 8021da4:	2a00      	cmp	r2, #0
 8021da6:	f000 80d4 	beq.w	8021f52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8021daa:	2fff      	cmp	r7, #255	; 0xff
 8021dac:	d01a      	beq.n	8021de4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8021dae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021db6:	fb07 fc0c 	mul.w	ip, r7, ip
 8021dba:	435f      	muls	r7, r3
 8021dbc:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021dc0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021dc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021dc8:	4463      	add	r3, ip
 8021dca:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8021dce:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8021dd2:	0a1b      	lsrs	r3, r3, #8
 8021dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ddc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021de0:	ea43 030c 	orr.w	r3, r3, ip
 8021de4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021de8:	d01f      	beq.n	8021e2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8021dea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021dee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021df2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021df6:	fb0e f707 	mul.w	r7, lr, r7
 8021dfa:	fb0e fe0c 	mul.w	lr, lr, ip
 8021dfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021e02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021e06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e0a:	44bc      	add	ip, r7
 8021e0c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021e10:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021e14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e20:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021e24:	ea4c 020e 	orr.w	r2, ip, lr
 8021e28:	920e      	str	r2, [sp, #56]	; 0x38
 8021e2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021e2e:	d01e      	beq.n	8021e6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8021e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e32:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021e36:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021e3a:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e3e:	fb0a fa07 	mul.w	sl, sl, r7
 8021e42:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021e46:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021e4a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021e4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e52:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021e56:	44f4      	add	ip, lr
 8021e58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e68:	ea4c 020a 	orr.w	r2, ip, sl
 8021e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8021e6e:	2eff      	cmp	r6, #255	; 0xff
 8021e70:	d01c      	beq.n	8021eac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8021e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021e74:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021e78:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021e7c:	fb06 fe0e 	mul.w	lr, r6, lr
 8021e80:	437e      	muls	r6, r7
 8021e82:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021e86:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021e8a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021e8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e92:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021e96:	44f4      	add	ip, lr
 8021e98:	0a36      	lsrs	r6, r6, #8
 8021e9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e9e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ea2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ea6:	ea4c 0206 	orr.w	r2, ip, r6
 8021eaa:	920f      	str	r2, [sp, #60]	; 0x3c
 8021eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021eae:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021eb6:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ebc:	fb09 f606 	mul.w	r6, r9, r6
 8021ec0:	fb01 6607 	mla	r6, r1, r7, r6
 8021ec4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8021ec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021eca:	fb00 6607 	mla	r6, r0, r7, r6
 8021ece:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8021ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021ed4:	fb0b 6607 	mla	r6, fp, r7, r6
 8021ed8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ede:	fb09 f907 	mul.w	r9, r9, r7
 8021ee2:	0a36      	lsrs	r6, r6, #8
 8021ee4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021ee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021eea:	fb01 9303 	mla	r3, r1, r3, r9
 8021eee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021ef2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021ef6:	fb00 330c 	mla	r3, r0, ip, r3
 8021efa:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8021efe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f00:	43da      	mvns	r2, r3
 8021f02:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8021f06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f0a:	b2d2      	uxtb	r2, r2
 8021f0c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021f10:	fb03 f102 	mul.w	r1, r3, r2
 8021f14:	ea46 060e 	orr.w	r6, r6, lr
 8021f18:	1c4b      	adds	r3, r1, #1
 8021f1a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021f1e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021f22:	f808 3c03 	strb.w	r3, [r8, #-3]
 8021f26:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8021f2a:	4353      	muls	r3, r2
 8021f2c:	1c59      	adds	r1, r3, #1
 8021f2e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021f32:	0a33      	lsrs	r3, r6, #8
 8021f34:	0c36      	lsrs	r6, r6, #16
 8021f36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021f3a:	f808 3c02 	strb.w	r3, [r8, #-2]
 8021f3e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021f42:	435a      	muls	r2, r3
 8021f44:	1c53      	adds	r3, r2, #1
 8021f46:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021f4a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021f4e:	f808 6c01 	strb.w	r6, [r8, #-1]
 8021f52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021f54:	f108 0803 	add.w	r8, r8, #3
 8021f58:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f5a:	4413      	add	r3, r2
 8021f5c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021f5e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021f60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021f62:	4413      	add	r3, r2
 8021f64:	932a      	str	r3, [sp, #168]	; 0xa8
 8021f66:	9b07      	ldr	r3, [sp, #28]
 8021f68:	3b01      	subs	r3, #1
 8021f6a:	e508      	b.n	802197e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8021f6c:	b158      	cbz	r0, 8021f86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8021f6e:	5d31      	ldrb	r1, [r6, r4]
 8021f70:	26ff      	movs	r6, #255	; 0xff
 8021f72:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021f76:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021f7a:	910a      	str	r1, [sp, #40]	; 0x28
 8021f7c:	46b6      	mov	lr, r6
 8021f7e:	e6f6      	b.n	8021d6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021f80:	26ff      	movs	r6, #255	; 0xff
 8021f82:	46b2      	mov	sl, r6
 8021f84:	e6f3      	b.n	8021d6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021f86:	26ff      	movs	r6, #255	; 0xff
 8021f88:	46b2      	mov	sl, r6
 8021f8a:	e7f7      	b.n	8021f7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8021f8c:	b017      	add	sp, #92	; 0x5c
 8021f8e:	ecbd 8b08 	vpop	{d8-d11}
 8021f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021f98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f9c:	b08d      	sub	sp, #52	; 0x34
 8021f9e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021fa2:	9103      	str	r1, [sp, #12]
 8021fa4:	fb07 5803 	mla	r8, r7, r3, r5
 8021fa8:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021fac:	9803      	ldr	r0, [sp, #12]
 8021fae:	2f00      	cmp	r7, #0
 8021fb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8021fb2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021fb6:	9903      	ldr	r1, [sp, #12]
 8021fb8:	9c03      	ldr	r4, [sp, #12]
 8021fba:	eb02 0608 	add.w	r6, r2, r8
 8021fbe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021fc2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021fc6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021fca:	7809      	ldrb	r1, [r1, #0]
 8021fcc:	7840      	ldrb	r0, [r0, #1]
 8021fce:	78a4      	ldrb	r4, [r4, #2]
 8021fd0:	db51      	blt.n	8022076 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021fd2:	45be      	cmp	lr, r7
 8021fd4:	dd4f      	ble.n	8022076 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021fd6:	2d00      	cmp	r5, #0
 8021fd8:	db49      	blt.n	802206e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021fda:	42ab      	cmp	r3, r5
 8021fdc:	dd47      	ble.n	802206e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021fde:	f812 2008 	ldrb.w	r2, [r2, r8]
 8021fe2:	9204      	str	r2, [sp, #16]
 8021fe4:	7872      	ldrb	r2, [r6, #1]
 8021fe6:	9205      	str	r2, [sp, #20]
 8021fe8:	78b2      	ldrb	r2, [r6, #2]
 8021fea:	9206      	str	r2, [sp, #24]
 8021fec:	1c6a      	adds	r2, r5, #1
 8021fee:	d449      	bmi.n	8022084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021ff0:	4293      	cmp	r3, r2
 8021ff2:	dd47      	ble.n	8022084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021ff4:	f1bc 0f00 	cmp.w	ip, #0
 8021ff8:	d044      	beq.n	8022084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021ffa:	7972      	ldrb	r2, [r6, #5]
 8021ffc:	f896 b003 	ldrb.w	fp, [r6, #3]
 8022000:	f896 a004 	ldrb.w	sl, [r6, #4]
 8022004:	9201      	str	r2, [sp, #4]
 8022006:	3701      	adds	r7, #1
 8022008:	d444      	bmi.n	8022094 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802200a:	45be      	cmp	lr, r7
 802200c:	dd42      	ble.n	8022094 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802200e:	f1b9 0f00 	cmp.w	r9, #0
 8022012:	f000 80c1 	beq.w	8022198 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8022016:	2d00      	cmp	r5, #0
 8022018:	db38      	blt.n	802208c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802201a:	42ab      	cmp	r3, r5
 802201c:	dd36      	ble.n	802208c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802201e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022022:	f816 8002 	ldrb.w	r8, [r6, r2]
 8022026:	2203      	movs	r2, #3
 8022028:	fb03 6702 	mla	r7, r3, r2, r6
 802202c:	fb03 6202 	mla	r2, r3, r2, r6
 8022030:	787f      	ldrb	r7, [r7, #1]
 8022032:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022036:	9702      	str	r7, [sp, #8]
 8022038:	3501      	adds	r5, #1
 802203a:	d432      	bmi.n	80220a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802203c:	42ab      	cmp	r3, r5
 802203e:	dd30      	ble.n	80220a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022040:	f1bc 0f00 	cmp.w	ip, #0
 8022044:	d031      	beq.n	80220aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8022046:	2703      	movs	r7, #3
 8022048:	fb13 7207 	smlabb	r2, r3, r7, r7
 802204c:	5cb5      	ldrb	r5, [r6, r2]
 802204e:	fb03 6207 	mla	r2, r3, r7, r6
 8022052:	fb03 6307 	mla	r3, r3, r7, r6
 8022056:	7912      	ldrb	r2, [r2, #4]
 8022058:	795e      	ldrb	r6, [r3, #5]
 802205a:	f1bc 0f0f 	cmp.w	ip, #15
 802205e:	d927      	bls.n	80220b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8022060:	4b53      	ldr	r3, [pc, #332]	; (80221b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8022062:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022066:	4a53      	ldr	r2, [pc, #332]	; (80221b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022068:	4853      	ldr	r0, [pc, #332]	; (80221b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802206a:	f004 facf 	bl	802660c <__assert_func>
 802206e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8022072:	9104      	str	r1, [sp, #16]
 8022074:	e7ba      	b.n	8021fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8022076:	9401      	str	r4, [sp, #4]
 8022078:	4682      	mov	sl, r0
 802207a:	468b      	mov	fp, r1
 802207c:	9104      	str	r1, [sp, #16]
 802207e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8022082:	e7c0      	b.n	8022006 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022084:	9401      	str	r4, [sp, #4]
 8022086:	4682      	mov	sl, r0
 8022088:	468b      	mov	fp, r1
 802208a:	e7bc      	b.n	8022006 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802208c:	46a6      	mov	lr, r4
 802208e:	9002      	str	r0, [sp, #8]
 8022090:	4688      	mov	r8, r1
 8022092:	e7d1      	b.n	8022038 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8022094:	4626      	mov	r6, r4
 8022096:	4602      	mov	r2, r0
 8022098:	460d      	mov	r5, r1
 802209a:	46a6      	mov	lr, r4
 802209c:	9002      	str	r0, [sp, #8]
 802209e:	4688      	mov	r8, r1
 80220a0:	e7db      	b.n	802205a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80220a2:	4626      	mov	r6, r4
 80220a4:	4602      	mov	r2, r0
 80220a6:	460d      	mov	r5, r1
 80220a8:	e7d7      	b.n	802205a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80220aa:	4626      	mov	r6, r4
 80220ac:	4602      	mov	r2, r0
 80220ae:	460d      	mov	r5, r1
 80220b0:	f1b9 0f0f 	cmp.w	r9, #15
 80220b4:	d8d4      	bhi.n	8022060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80220b6:	fa1f f38c 	uxth.w	r3, ip
 80220ba:	fa1f fc89 	uxth.w	ip, r9
 80220be:	fb03 f70c 	mul.w	r7, r3, ip
 80220c2:	011b      	lsls	r3, r3, #4
 80220c4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80220c8:	9707      	str	r7, [sp, #28]
 80220ca:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80220ce:	fa1f fc8c 	uxth.w	ip, ip
 80220d2:	eba7 070c 	sub.w	r7, r7, ip
 80220d6:	b2bf      	uxth	r7, r7
 80220d8:	9709      	str	r7, [sp, #36]	; 0x24
 80220da:	9f07      	ldr	r7, [sp, #28]
 80220dc:	1bdb      	subs	r3, r3, r7
 80220de:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	9708      	str	r7, [sp, #32]
 80220e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80220e8:	930a      	str	r3, [sp, #40]	; 0x28
 80220ea:	ea6f 0907 	mvn.w	r9, r7
 80220ee:	fb03 fb0b 	mul.w	fp, r3, fp
 80220f2:	9f04      	ldr	r7, [sp, #16]
 80220f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220f6:	fa5f f989 	uxtb.w	r9, r9
 80220fa:	fb03 bb07 	mla	fp, r3, r7, fp
 80220fe:	9f07      	ldr	r7, [sp, #28]
 8022100:	fb11 f109 	smulbb	r1, r1, r9
 8022104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022106:	fb0c b808 	mla	r8, ip, r8, fp
 802210a:	fb10 f009 	smulbb	r0, r0, r9
 802210e:	fb14 f409 	smulbb	r4, r4, r9
 8022112:	fb07 8805 	mla	r8, r7, r5, r8
 8022116:	9d08      	ldr	r5, [sp, #32]
 8022118:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802211a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802211e:	fb08 1805 	mla	r8, r8, r5, r1
 8022122:	9d05      	ldr	r5, [sp, #20]
 8022124:	fa1f f888 	uxth.w	r8, r8
 8022128:	f108 0101 	add.w	r1, r8, #1
 802212c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022130:	9903      	ldr	r1, [sp, #12]
 8022132:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022136:	f881 8000 	strb.w	r8, [r1]
 802213a:	fb03 f10a 	mul.w	r1, r3, sl
 802213e:	fb07 1105 	mla	r1, r7, r5, r1
 8022142:	9d02      	ldr	r5, [sp, #8]
 8022144:	fb0c 1105 	mla	r1, ip, r5, r1
 8022148:	9d07      	ldr	r5, [sp, #28]
 802214a:	fb05 1102 	mla	r1, r5, r2, r1
 802214e:	9a08      	ldr	r2, [sp, #32]
 8022150:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022154:	fb01 0102 	mla	r1, r1, r2, r0
 8022158:	9a03      	ldr	r2, [sp, #12]
 802215a:	b289      	uxth	r1, r1
 802215c:	1c48      	adds	r0, r1, #1
 802215e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022162:	1209      	asrs	r1, r1, #8
 8022164:	7051      	strb	r1, [r2, #1]
 8022166:	9a01      	ldr	r2, [sp, #4]
 8022168:	4353      	muls	r3, r2
 802216a:	9a06      	ldr	r2, [sp, #24]
 802216c:	fb07 3702 	mla	r7, r7, r2, r3
 8022170:	9b08      	ldr	r3, [sp, #32]
 8022172:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8022176:	fb05 c606 	mla	r6, r5, r6, ip
 802217a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802217e:	fb06 4603 	mla	r6, r6, r3, r4
 8022182:	9b03      	ldr	r3, [sp, #12]
 8022184:	b2b6      	uxth	r6, r6
 8022186:	f106 0e01 	add.w	lr, r6, #1
 802218a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802218e:	1236      	asrs	r6, r6, #8
 8022190:	709e      	strb	r6, [r3, #2]
 8022192:	b00d      	add	sp, #52	; 0x34
 8022194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022198:	f1bc 0f0f 	cmp.w	ip, #15
 802219c:	f63f af60 	bhi.w	8022060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80221a0:	4626      	mov	r6, r4
 80221a2:	4602      	mov	r2, r0
 80221a4:	460d      	mov	r5, r1
 80221a6:	46a6      	mov	lr, r4
 80221a8:	9002      	str	r0, [sp, #8]
 80221aa:	4688      	mov	r8, r1
 80221ac:	e783      	b.n	80220b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80221ae:	bf00      	nop
 80221b0:	0802b0d7 	.word	0x0802b0d7
 80221b4:	0802b5ce 	.word	0x0802b5ce
 80221b8:	0802b1a0 	.word	0x0802b1a0

080221bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80221bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221c0:	ed2d 8b08 	vpush	{d8-d11}
 80221c4:	b0a1      	sub	sp, #132	; 0x84
 80221c6:	eeb0 aa40 	vmov.f32	s20, s0
 80221ca:	eef0 9a60 	vmov.f32	s19, s1
 80221ce:	9307      	str	r3, [sp, #28]
 80221d0:	eeb0 9a41 	vmov.f32	s18, s2
 80221d4:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80221d8:	eeb0 8a62 	vmov.f32	s16, s5
 80221dc:	9210      	str	r2, [sp, #64]	; 0x40
 80221de:	eef0 8a43 	vmov.f32	s17, s6
 80221e2:	9308      	str	r3, [sp, #32]
 80221e4:	eef0 ba44 	vmov.f32	s23, s8
 80221e8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80221ec:	eeb0 ba64 	vmov.f32	s22, s9
 80221f0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80221f2:	eef0 aa45 	vmov.f32	s21, s10
 80221f6:	930a      	str	r3, [sp, #40]	; 0x28
 80221f8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80221fc:	901f      	str	r0, [sp, #124]	; 0x7c
 80221fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8022200:	6850      	ldr	r0, [r2, #4]
 8022202:	910e      	str	r1, [sp, #56]	; 0x38
 8022204:	6812      	ldr	r2, [r2, #0]
 8022206:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 802220a:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802220e:	fb00 1303 	mla	r3, r0, r3, r1
 8022212:	9908      	ldr	r1, [sp, #32]
 8022214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022218:	18d3      	adds	r3, r2, r3
 802221a:	2203      	movs	r2, #3
 802221c:	9309      	str	r3, [sp, #36]	; 0x24
 802221e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8022220:	681b      	ldr	r3, [r3, #0]
 8022222:	930c      	str	r3, [sp, #48]	; 0x30
 8022224:	f06f 0304 	mvn.w	r3, #4
 8022228:	fb11 3302 	smlabb	r3, r1, r2, r3
 802222c:	930d      	str	r3, [sp, #52]	; 0x34
 802222e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022230:	43db      	mvns	r3, r3
 8022232:	b2db      	uxtb	r3, r3
 8022234:	930b      	str	r3, [sp, #44]	; 0x2c
 8022236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022238:	2b00      	cmp	r3, #0
 802223a:	dc03      	bgt.n	8022244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802223c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802223e:	2b00      	cmp	r3, #0
 8022240:	f340 81df 	ble.w	8022602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022244:	9b07      	ldr	r3, [sp, #28]
 8022246:	2b00      	cmp	r3, #0
 8022248:	f340 80f2 	ble.w	8022430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802224c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8022250:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022254:	d430      	bmi.n	80222b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022256:	1c51      	adds	r1, r2, #1
 8022258:	9808      	ldr	r0, [sp, #32]
 802225a:	4281      	cmp	r1, r0
 802225c:	da2f      	bge.n	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802225e:	2b00      	cmp	r3, #0
 8022260:	db2d      	blt.n	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022262:	1c59      	adds	r1, r3, #1
 8022264:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022266:	4288      	cmp	r0, r1
 8022268:	dd29      	ble.n	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802226a:	9b07      	ldr	r3, [sp, #28]
 802226c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802226e:	3b01      	subs	r3, #1
 8022270:	fb02 8203 	mla	r2, r2, r3, r8
 8022274:	1412      	asrs	r2, r2, #16
 8022276:	d42d      	bmi.n	80222d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022278:	3201      	adds	r2, #1
 802227a:	9908      	ldr	r1, [sp, #32]
 802227c:	4291      	cmp	r1, r2
 802227e:	dd29      	ble.n	80222d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022280:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022282:	fb02 b303 	mla	r3, r2, r3, fp
 8022286:	141b      	asrs	r3, r3, #16
 8022288:	d424      	bmi.n	80222d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802228a:	3301      	adds	r3, #1
 802228c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802228e:	429a      	cmp	r2, r3
 8022290:	dd20      	ble.n	80222d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022294:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022298:	1cde      	adds	r6, r3, #3
 802229a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802229e:	f1bc 0f00 	cmp.w	ip, #0
 80222a2:	f300 811f 	bgt.w	80224e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 80222a6:	9b07      	ldr	r3, [sp, #28]
 80222a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80222ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80222b2:	4423      	add	r3, r4
 80222b4:	9309      	str	r3, [sp, #36]	; 0x24
 80222b6:	e0bd      	b.n	8022434 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80222b8:	1c57      	adds	r7, r2, #1
 80222ba:	f040 80ae 	bne.w	802241a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80222be:	9908      	ldr	r1, [sp, #32]
 80222c0:	428a      	cmp	r2, r1
 80222c2:	f280 80aa 	bge.w	802241a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80222c6:	1c5e      	adds	r6, r3, #1
 80222c8:	f2c0 80a7 	blt.w	802241a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80222cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80222ce:	4293      	cmp	r3, r2
 80222d0:	f280 80a3 	bge.w	802241a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80222d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80222d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80222da:	f1ba 0f00 	cmp.w	sl, #0
 80222de:	dde2      	ble.n	80222a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80222e0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80222e4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80222e8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80222ec:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80222f0:	f100 80df 	bmi.w	80224b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80222f4:	1c45      	adds	r5, r0, #1
 80222f6:	9f08      	ldr	r7, [sp, #32]
 80222f8:	42af      	cmp	r7, r5
 80222fa:	f340 80dc 	ble.w	80224b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80222fe:	2900      	cmp	r1, #0
 8022300:	f2c0 80d9 	blt.w	80224b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8022304:	1c4d      	adds	r5, r1, #1
 8022306:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022308:	42af      	cmp	r7, r5
 802230a:	f340 80d4 	ble.w	80224b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802230e:	9d08      	ldr	r5, [sp, #32]
 8022310:	fb05 0101 	mla	r1, r5, r1, r0
 8022314:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022316:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802231a:	1845      	adds	r5, r0, r1
 802231c:	5c40      	ldrb	r0, [r0, r1]
 802231e:	792f      	ldrb	r7, [r5, #4]
 8022320:	7869      	ldrb	r1, [r5, #1]
 8022322:	9711      	str	r7, [sp, #68]	; 0x44
 8022324:	796f      	ldrb	r7, [r5, #5]
 8022326:	f895 e002 	ldrb.w	lr, [r5, #2]
 802232a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802232e:	9712      	str	r7, [sp, #72]	; 0x48
 8022330:	b17a      	cbz	r2, 8022352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8022332:	3505      	adds	r5, #5
 8022334:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022336:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022338:	19ef      	adds	r7, r5, r7
 802233a:	5d2d      	ldrb	r5, [r5, r4]
 802233c:	787c      	ldrb	r4, [r7, #1]
 802233e:	9513      	str	r5, [sp, #76]	; 0x4c
 8022340:	9415      	str	r4, [sp, #84]	; 0x54
 8022342:	78bc      	ldrb	r4, [r7, #2]
 8022344:	9417      	str	r4, [sp, #92]	; 0x5c
 8022346:	78fc      	ldrb	r4, [r7, #3]
 8022348:	9414      	str	r4, [sp, #80]	; 0x50
 802234a:	793c      	ldrb	r4, [r7, #4]
 802234c:	9416      	str	r4, [sp, #88]	; 0x58
 802234e:	797c      	ldrb	r4, [r7, #5]
 8022350:	9418      	str	r4, [sp, #96]	; 0x60
 8022352:	b29b      	uxth	r3, r3
 8022354:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022356:	b292      	uxth	r2, r2
 8022358:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802235c:	fb03 f702 	mul.w	r7, r3, r2
 8022360:	011b      	lsls	r3, r3, #4
 8022362:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8022366:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802236a:	1bdb      	subs	r3, r3, r7
 802236c:	b292      	uxth	r2, r2
 802236e:	b29b      	uxth	r3, r3
 8022370:	ebac 0c02 	sub.w	ip, ip, r2
 8022374:	fb03 f909 	mul.w	r9, r3, r9
 8022378:	fa1f fc8c 	uxth.w	ip, ip
 802237c:	fb0c 9000 	mla	r0, ip, r0, r9
 8022380:	f896 9000 	ldrb.w	r9, [r6]
 8022384:	fb02 0004 	mla	r0, r2, r4, r0
 8022388:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802238a:	fb07 0004 	mla	r0, r7, r4, r0
 802238e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022390:	fb19 f904 	smulbb	r9, r9, r4
 8022394:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022398:	fb00 9005 	mla	r0, r0, r5, r9
 802239c:	b280      	uxth	r0, r0
 802239e:	f100 0901 	add.w	r9, r0, #1
 80223a2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80223a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80223a8:	4358      	muls	r0, r3
 80223aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80223ae:	fb0c 0101 	mla	r1, ip, r1, r0
 80223b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80223b4:	f886 9000 	strb.w	r9, [r6]
 80223b8:	fb02 1100 	mla	r1, r2, r0, r1
 80223bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80223be:	fb07 1100 	mla	r1, r7, r0, r1
 80223c2:	7870      	ldrb	r0, [r6, #1]
 80223c4:	fb10 f004 	smulbb	r0, r0, r4
 80223c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80223cc:	fb01 0105 	mla	r1, r1, r5, r0
 80223d0:	b289      	uxth	r1, r1
 80223d2:	1c48      	adds	r0, r1, #1
 80223d4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80223d8:	1209      	asrs	r1, r1, #8
 80223da:	7071      	strb	r1, [r6, #1]
 80223dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80223de:	434b      	muls	r3, r1
 80223e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80223e2:	fb0c 330e 	mla	r3, ip, lr, r3
 80223e6:	fb02 3201 	mla	r2, r2, r1, r3
 80223ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80223ec:	fb07 2703 	mla	r7, r7, r3, r2
 80223f0:	78b2      	ldrb	r2, [r6, #2]
 80223f2:	fb12 f204 	smulbb	r2, r2, r4
 80223f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80223fa:	fb07 2505 	mla	r5, r7, r5, r2
 80223fe:	b2ad      	uxth	r5, r5
 8022400:	1c6f      	adds	r7, r5, #1
 8022402:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8022406:	122d      	asrs	r5, r5, #8
 8022408:	70b5      	strb	r5, [r6, #2]
 802240a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802240c:	3603      	adds	r6, #3
 802240e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022412:	4498      	add	r8, r3
 8022414:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022416:	449b      	add	fp, r3
 8022418:	e75f      	b.n	80222da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802241a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802241c:	4498      	add	r8, r3
 802241e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022420:	449b      	add	fp, r3
 8022422:	9b07      	ldr	r3, [sp, #28]
 8022424:	3b01      	subs	r3, #1
 8022426:	9307      	str	r3, [sp, #28]
 8022428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802242a:	3303      	adds	r3, #3
 802242c:	9309      	str	r3, [sp, #36]	; 0x24
 802242e:	e709      	b.n	8022244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022430:	f47f af1b 	bne.w	802226a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8022434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022436:	2b00      	cmp	r3, #0
 8022438:	f340 80e3 	ble.w	8022602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802243c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022440:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022442:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022446:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802244a:	eef0 6a48 	vmov.f32	s13, s16
 802244e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022452:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022456:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802245a:	ee16 8a90 	vmov	r8, s13
 802245e:	eef0 6a68 	vmov.f32	s13, s17
 8022462:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022466:	ee16 ba90 	vmov	fp, s13
 802246a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802246e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022472:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022476:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802247a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802247e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022482:	ee18 2a10 	vmov	r2, s16
 8022486:	eeb0 8a47 	vmov.f32	s16, s14
 802248a:	fb92 f3f3 	sdiv	r3, r2, r3
 802248e:	ee18 2a90 	vmov	r2, s17
 8022492:	9335      	str	r3, [sp, #212]	; 0xd4
 8022494:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022496:	eef0 8a67 	vmov.f32	s17, s15
 802249a:	fb92 f3f3 	sdiv	r3, r2, r3
 802249e:	9336      	str	r3, [sp, #216]	; 0xd8
 80224a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80224a4:	3b01      	subs	r3, #1
 80224a6:	930e      	str	r3, [sp, #56]	; 0x38
 80224a8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80224aa:	bf08      	it	eq
 80224ac:	4613      	moveq	r3, r2
 80224ae:	9307      	str	r3, [sp, #28]
 80224b0:	e6c1      	b.n	8022236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80224b2:	1c45      	adds	r5, r0, #1
 80224b4:	d1a9      	bne.n	802240a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80224b6:	9c08      	ldr	r4, [sp, #32]
 80224b8:	42a0      	cmp	r0, r4
 80224ba:	daa6      	bge.n	802240a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80224bc:	1c4c      	adds	r4, r1, #1
 80224be:	dba4      	blt.n	802240a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80224c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80224c2:	428c      	cmp	r4, r1
 80224c4:	dda1      	ble.n	802240a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80224c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80224c8:	9001      	str	r0, [sp, #4]
 80224ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80224cc:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80224d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224d2:	4631      	mov	r1, r6
 80224d4:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80224d8:	9300      	str	r3, [sp, #0]
 80224da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80224dc:	9b08      	ldr	r3, [sp, #32]
 80224de:	f7ff fd5b 	bl	8021f98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80224e2:	e792      	b.n	802240a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80224e4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80224e8:	9c08      	ldr	r4, [sp, #32]
 80224ea:	ea4f 402b 	mov.w	r0, fp, asr #16
 80224ee:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80224f2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80224f6:	fb04 2000 	mla	r0, r4, r0, r2
 80224fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80224fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80224fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022502:	4402      	add	r2, r0
 8022504:	5c25      	ldrb	r5, [r4, r0]
 8022506:	7894      	ldrb	r4, [r2, #2]
 8022508:	7850      	ldrb	r0, [r2, #1]
 802250a:	9411      	str	r4, [sp, #68]	; 0x44
 802250c:	7954      	ldrb	r4, [r2, #5]
 802250e:	f892 a003 	ldrb.w	sl, [r2, #3]
 8022512:	f892 9004 	ldrb.w	r9, [r2, #4]
 8022516:	9412      	str	r4, [sp, #72]	; 0x48
 8022518:	b171      	cbz	r1, 8022538 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802251a:	3205      	adds	r2, #5
 802251c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802251e:	1917      	adds	r7, r2, r4
 8022520:	5d12      	ldrb	r2, [r2, r4]
 8022522:	9219      	str	r2, [sp, #100]	; 0x64
 8022524:	787a      	ldrb	r2, [r7, #1]
 8022526:	921b      	str	r2, [sp, #108]	; 0x6c
 8022528:	78ba      	ldrb	r2, [r7, #2]
 802252a:	921d      	str	r2, [sp, #116]	; 0x74
 802252c:	78fa      	ldrb	r2, [r7, #3]
 802252e:	921a      	str	r2, [sp, #104]	; 0x68
 8022530:	793a      	ldrb	r2, [r7, #4]
 8022532:	921c      	str	r2, [sp, #112]	; 0x70
 8022534:	797a      	ldrb	r2, [r7, #5]
 8022536:	921e      	str	r2, [sp, #120]	; 0x78
 8022538:	b29b      	uxth	r3, r3
 802253a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802253c:	b289      	uxth	r1, r1
 802253e:	3603      	adds	r6, #3
 8022540:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022544:	fb03 f201 	mul.w	r2, r3, r1
 8022548:	011b      	lsls	r3, r3, #4
 802254a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802254e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022552:	1a9b      	subs	r3, r3, r2
 8022554:	b289      	uxth	r1, r1
 8022556:	b29b      	uxth	r3, r3
 8022558:	1a7f      	subs	r7, r7, r1
 802255a:	fb03 fa0a 	mul.w	sl, r3, sl
 802255e:	b2bf      	uxth	r7, r7
 8022560:	fb03 f909 	mul.w	r9, r3, r9
 8022564:	fb07 a505 	mla	r5, r7, r5, sl
 8022568:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802256c:	fb07 9000 	mla	r0, r7, r0, r9
 8022570:	fb01 5504 	mla	r5, r1, r4, r5
 8022574:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022576:	fb02 5504 	mla	r5, r2, r4, r5
 802257a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802257c:	fb1a fa04 	smulbb	sl, sl, r4
 8022580:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022584:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8022586:	fb05 a50e 	mla	r5, r5, lr, sl
 802258a:	fb01 0004 	mla	r0, r1, r4, r0
 802258e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022590:	b2ad      	uxth	r5, r5
 8022592:	fb02 0004 	mla	r0, r2, r4, r0
 8022596:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022598:	f105 0a01 	add.w	sl, r5, #1
 802259c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80225a0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80225a4:	122d      	asrs	r5, r5, #8
 80225a6:	f806 5c06 	strb.w	r5, [r6, #-6]
 80225aa:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80225ae:	fb15 f504 	smulbb	r5, r5, r4
 80225b2:	fb00 500e 	mla	r0, r0, lr, r5
 80225b6:	b280      	uxth	r0, r0
 80225b8:	1c45      	adds	r5, r0, #1
 80225ba:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80225be:	1200      	asrs	r0, r0, #8
 80225c0:	f806 0c05 	strb.w	r0, [r6, #-5]
 80225c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80225c6:	4343      	muls	r3, r0
 80225c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80225ca:	fb07 3300 	mla	r3, r7, r0, r3
 80225ce:	981d      	ldr	r0, [sp, #116]	; 0x74
 80225d0:	fb01 3100 	mla	r1, r1, r0, r3
 80225d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80225d6:	fb02 1203 	mla	r2, r2, r3, r1
 80225da:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80225de:	fb11 f104 	smulbb	r1, r1, r4
 80225e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80225e6:	fb02 120e 	mla	r2, r2, lr, r1
 80225ea:	b292      	uxth	r2, r2
 80225ec:	1c53      	adds	r3, r2, #1
 80225ee:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80225f2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80225f4:	1212      	asrs	r2, r2, #8
 80225f6:	4498      	add	r8, r3
 80225f8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80225fa:	f806 2c04 	strb.w	r2, [r6, #-4]
 80225fe:	449b      	add	fp, r3
 8022600:	e64d      	b.n	802229e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022602:	b021      	add	sp, #132	; 0x84
 8022604:	ecbd 8b08 	vpop	{d8-d11}
 8022608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802260c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022610:	b085      	sub	sp, #20
 8022612:	784d      	ldrb	r5, [r1, #1]
 8022614:	788e      	ldrb	r6, [r1, #2]
 8022616:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802261a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802261e:	9403      	str	r4, [sp, #12]
 8022620:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022624:	780c      	ldrb	r4, [r1, #0]
 8022626:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802262a:	fb07 ce03 	mla	lr, r7, r3, ip
 802262e:	2f00      	cmp	r7, #0
 8022630:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022634:	eb02 0b0e 	add.w	fp, r2, lr
 8022638:	db56      	blt.n	80226e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802263a:	45b9      	cmp	r9, r7
 802263c:	dd54      	ble.n	80226e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802263e:	f1bc 0f00 	cmp.w	ip, #0
 8022642:	db4d      	blt.n	80226e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022644:	4563      	cmp	r3, ip
 8022646:	dd4b      	ble.n	80226e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022648:	f812 200e 	ldrb.w	r2, [r2, lr]
 802264c:	9200      	str	r2, [sp, #0]
 802264e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8022652:	9201      	str	r2, [sp, #4]
 8022654:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8022658:	9202      	str	r2, [sp, #8]
 802265a:	f11c 0201 	adds.w	r2, ip, #1
 802265e:	d44a      	bmi.n	80226f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022660:	4293      	cmp	r3, r2
 8022662:	dd48      	ble.n	80226f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022664:	2800      	cmp	r0, #0
 8022666:	d046      	beq.n	80226f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022668:	f89b e003 	ldrb.w	lr, [fp, #3]
 802266c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022670:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022674:	3701      	adds	r7, #1
 8022676:	d446      	bmi.n	8022706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022678:	45b9      	cmp	r9, r7
 802267a:	dd44      	ble.n	8022706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802267c:	9a03      	ldr	r2, [sp, #12]
 802267e:	2a00      	cmp	r2, #0
 8022680:	d045      	beq.n	802270e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8022682:	f1bc 0f00 	cmp.w	ip, #0
 8022686:	db3a      	blt.n	80226fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022688:	4563      	cmp	r3, ip
 802268a:	dd38      	ble.n	80226fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802268c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022690:	f04f 0903 	mov.w	r9, #3
 8022694:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022698:	fb03 b209 	mla	r2, r3, r9, fp
 802269c:	fb03 b909 	mla	r9, r3, r9, fp
 80226a0:	7852      	ldrb	r2, [r2, #1]
 80226a2:	f899 9002 	ldrb.w	r9, [r9, #2]
 80226a6:	f11c 0c01 	adds.w	ip, ip, #1
 80226aa:	d40d      	bmi.n	80226c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80226ac:	4563      	cmp	r3, ip
 80226ae:	dd0b      	ble.n	80226c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80226b0:	b160      	cbz	r0, 80226cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80226b2:	2603      	movs	r6, #3
 80226b4:	fb13 6406 	smlabb	r4, r3, r6, r6
 80226b8:	fb03 b506 	mla	r5, r3, r6, fp
 80226bc:	fb03 b306 	mla	r3, r3, r6, fp
 80226c0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80226c4:	792d      	ldrb	r5, [r5, #4]
 80226c6:	795e      	ldrb	r6, [r3, #5]
 80226c8:	280f      	cmp	r0, #15
 80226ca:	d802      	bhi.n	80226d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80226cc:	9b03      	ldr	r3, [sp, #12]
 80226ce:	2b0f      	cmp	r3, #15
 80226d0:	d922      	bls.n	8022718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80226d2:	4b2f      	ldr	r3, [pc, #188]	; (8022790 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80226d4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80226d8:	4a2e      	ldr	r2, [pc, #184]	; (8022794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80226da:	482f      	ldr	r0, [pc, #188]	; (8022798 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80226dc:	f003 ff96 	bl	802660c <__assert_func>
 80226e0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80226e4:	9400      	str	r4, [sp, #0]
 80226e6:	e7b8      	b.n	802265a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80226e8:	46b2      	mov	sl, r6
 80226ea:	46a8      	mov	r8, r5
 80226ec:	46a6      	mov	lr, r4
 80226ee:	9400      	str	r4, [sp, #0]
 80226f0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80226f4:	e7be      	b.n	8022674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80226f6:	46b2      	mov	sl, r6
 80226f8:	46a8      	mov	r8, r5
 80226fa:	46a6      	mov	lr, r4
 80226fc:	e7ba      	b.n	8022674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80226fe:	46b1      	mov	r9, r6
 8022700:	462a      	mov	r2, r5
 8022702:	4627      	mov	r7, r4
 8022704:	e7cf      	b.n	80226a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8022706:	46b1      	mov	r9, r6
 8022708:	462a      	mov	r2, r5
 802270a:	4627      	mov	r7, r4
 802270c:	e7dc      	b.n	80226c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802270e:	280f      	cmp	r0, #15
 8022710:	d8df      	bhi.n	80226d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022712:	46b1      	mov	r9, r6
 8022714:	462a      	mov	r2, r5
 8022716:	4627      	mov	r7, r4
 8022718:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 802271c:	b280      	uxth	r0, r0
 802271e:	fb00 f30b 	mul.w	r3, r0, fp
 8022722:	0100      	lsls	r0, r0, #4
 8022724:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8022728:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802272c:	1ac0      	subs	r0, r0, r3
 802272e:	fa1f fb8b 	uxth.w	fp, fp
 8022732:	b280      	uxth	r0, r0
 8022734:	ebac 0c0b 	sub.w	ip, ip, fp
 8022738:	9003      	str	r0, [sp, #12]
 802273a:	fa1f fc8c 	uxth.w	ip, ip
 802273e:	fb00 fe0e 	mul.w	lr, r0, lr
 8022742:	9800      	ldr	r0, [sp, #0]
 8022744:	fb0c ee00 	mla	lr, ip, r0, lr
 8022748:	9803      	ldr	r0, [sp, #12]
 802274a:	fb00 f808 	mul.w	r8, r0, r8
 802274e:	9801      	ldr	r0, [sp, #4]
 8022750:	fb0b ee07 	mla	lr, fp, r7, lr
 8022754:	fb0c 8800 	mla	r8, ip, r0, r8
 8022758:	fb03 ee04 	mla	lr, r3, r4, lr
 802275c:	fb0b 8202 	mla	r2, fp, r2, r8
 8022760:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022764:	fb03 2505 	mla	r5, r3, r5, r2
 8022768:	9a03      	ldr	r2, [sp, #12]
 802276a:	f881 e000 	strb.w	lr, [r1]
 802276e:	fb02 f00a 	mul.w	r0, r2, sl
 8022772:	9a02      	ldr	r2, [sp, #8]
 8022774:	122d      	asrs	r5, r5, #8
 8022776:	fb0c 0c02 	mla	ip, ip, r2, r0
 802277a:	704d      	strb	r5, [r1, #1]
 802277c:	fb0b c909 	mla	r9, fp, r9, ip
 8022780:	fb03 9606 	mla	r6, r3, r6, r9
 8022784:	1236      	asrs	r6, r6, #8
 8022786:	708e      	strb	r6, [r1, #2]
 8022788:	b005      	add	sp, #20
 802278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802278e:	bf00      	nop
 8022790:	0802b0d7 	.word	0x0802b0d7
 8022794:	0802b5ce 	.word	0x0802b5ce
 8022798:	0802b1a0 	.word	0x0802b1a0

0802279c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227a0:	ed2d 8b0a 	vpush	{d8-d12}
 80227a4:	b09d      	sub	sp, #116	; 0x74
 80227a6:	eeb0 aa40 	vmov.f32	s20, s0
 80227aa:	eef0 9a60 	vmov.f32	s19, s1
 80227ae:	9306      	str	r3, [sp, #24]
 80227b0:	eeb0 9a41 	vmov.f32	s18, s2
 80227b4:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80227b8:	eeb0 8a62 	vmov.f32	s16, s5
 80227bc:	901b      	str	r0, [sp, #108]	; 0x6c
 80227be:	eef0 8a43 	vmov.f32	s17, s6
 80227c2:	9307      	str	r3, [sp, #28]
 80227c4:	eeb0 ca44 	vmov.f32	s24, s8
 80227c8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80227cc:	eef0 ba64 	vmov.f32	s23, s9
 80227d0:	eeb0 ba45 	vmov.f32	s22, s10
 80227d4:	9309      	str	r3, [sp, #36]	; 0x24
 80227d6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80227da:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80227de:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80227e0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80227e4:	6850      	ldr	r0, [r2, #4]
 80227e6:	6812      	ldr	r2, [r2, #0]
 80227e8:	fb00 1303 	mla	r3, r0, r3, r1
 80227ec:	9907      	ldr	r1, [sp, #28]
 80227ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227f2:	18d3      	adds	r3, r2, r3
 80227f4:	2203      	movs	r2, #3
 80227f6:	9308      	str	r3, [sp, #32]
 80227f8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80227fa:	681b      	ldr	r3, [r3, #0]
 80227fc:	930a      	str	r3, [sp, #40]	; 0x28
 80227fe:	f06f 0304 	mvn.w	r3, #4
 8022802:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8022806:	fb11 3302 	smlabb	r3, r1, r2, r3
 802280a:	930b      	str	r3, [sp, #44]	; 0x2c
 802280c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802280e:	2b00      	cmp	r3, #0
 8022810:	dc03      	bgt.n	802281a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022814:	2b00      	cmp	r3, #0
 8022816:	f340 8193 	ble.w	8022b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802281a:	9b06      	ldr	r3, [sp, #24]
 802281c:	2b00      	cmp	r3, #0
 802281e:	f340 80d0 	ble.w	80229c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8022822:	1432      	asrs	r2, r6, #16
 8022824:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022828:	d42f      	bmi.n	802288a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802282a:	1c51      	adds	r1, r2, #1
 802282c:	9807      	ldr	r0, [sp, #28]
 802282e:	4281      	cmp	r1, r0
 8022830:	da2e      	bge.n	8022890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022832:	2b00      	cmp	r3, #0
 8022834:	db2c      	blt.n	8022890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022836:	1c59      	adds	r1, r3, #1
 8022838:	9809      	ldr	r0, [sp, #36]	; 0x24
 802283a:	4288      	cmp	r0, r1
 802283c:	dd28      	ble.n	8022890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802283e:	9b06      	ldr	r3, [sp, #24]
 8022840:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022842:	3b01      	subs	r3, #1
 8022844:	fb02 6203 	mla	r2, r2, r3, r6
 8022848:	1412      	asrs	r2, r2, #16
 802284a:	d42c      	bmi.n	80228a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802284c:	3201      	adds	r2, #1
 802284e:	9907      	ldr	r1, [sp, #28]
 8022850:	4291      	cmp	r1, r2
 8022852:	dd28      	ble.n	80228a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022854:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8022856:	fb02 5303 	mla	r3, r2, r3, r5
 802285a:	141b      	asrs	r3, r3, #16
 802285c:	d423      	bmi.n	80228a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802285e:	3301      	adds	r3, #1
 8022860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022862:	429a      	cmp	r2, r3
 8022864:	dd1f      	ble.n	80228a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022866:	9b08      	ldr	r3, [sp, #32]
 8022868:	f8dd e018 	ldr.w	lr, [sp, #24]
 802286c:	f103 0c03 	add.w	ip, r3, #3
 8022870:	f1be 0f00 	cmp.w	lr, #0
 8022874:	f300 80fa 	bgt.w	8022a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022878:	9b06      	ldr	r3, [sp, #24]
 802287a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802287e:	9b08      	ldr	r3, [sp, #32]
 8022880:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022884:	4423      	add	r3, r4
 8022886:	9308      	str	r3, [sp, #32]
 8022888:	e09d      	b.n	80229c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802288a:	1c51      	adds	r1, r2, #1
 802288c:	f040 808e 	bne.w	80229ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022890:	9907      	ldr	r1, [sp, #28]
 8022892:	428a      	cmp	r2, r1
 8022894:	f280 808a 	bge.w	80229ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022898:	1c5f      	adds	r7, r3, #1
 802289a:	f2c0 8087 	blt.w	80229ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802289e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228a0:	4293      	cmp	r3, r2
 80228a2:	f280 8083 	bge.w	80229ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80228a6:	9f06      	ldr	r7, [sp, #24]
 80228a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80228ac:	2f00      	cmp	r7, #0
 80228ae:	dde3      	ble.n	8022878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80228b0:	1432      	asrs	r2, r6, #16
 80228b2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80228b6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80228ba:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80228be:	f100 80bf 	bmi.w	8022a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80228c2:	1c50      	adds	r0, r2, #1
 80228c4:	9c07      	ldr	r4, [sp, #28]
 80228c6:	4284      	cmp	r4, r0
 80228c8:	f340 80bc 	ble.w	8022a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	f2c0 80b9 	blt.w	8022a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80228d2:	1c58      	adds	r0, r3, #1
 80228d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80228d6:	4284      	cmp	r4, r0
 80228d8:	f340 80b4 	ble.w	8022a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80228dc:	9807      	ldr	r0, [sp, #28]
 80228de:	fb00 2303 	mla	r3, r0, r3, r2
 80228e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80228e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228ea:	441a      	add	r2, r3
 80228ec:	f810 c003 	ldrb.w	ip, [r0, r3]
 80228f0:	7953      	ldrb	r3, [r2, #5]
 80228f2:	7850      	ldrb	r0, [r2, #1]
 80228f4:	f892 e002 	ldrb.w	lr, [r2, #2]
 80228f8:	f892 9003 	ldrb.w	r9, [r2, #3]
 80228fc:	f892 8004 	ldrb.w	r8, [r2, #4]
 8022900:	930e      	str	r3, [sp, #56]	; 0x38
 8022902:	f1bb 0f00 	cmp.w	fp, #0
 8022906:	d00f      	beq.n	8022928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8022908:	3205      	adds	r2, #5
 802290a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802290c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802290e:	18d3      	adds	r3, r2, r3
 8022910:	5d12      	ldrb	r2, [r2, r4]
 8022912:	920f      	str	r2, [sp, #60]	; 0x3c
 8022914:	785a      	ldrb	r2, [r3, #1]
 8022916:	9211      	str	r2, [sp, #68]	; 0x44
 8022918:	789a      	ldrb	r2, [r3, #2]
 802291a:	9213      	str	r2, [sp, #76]	; 0x4c
 802291c:	78da      	ldrb	r2, [r3, #3]
 802291e:	9210      	str	r2, [sp, #64]	; 0x40
 8022920:	791a      	ldrb	r2, [r3, #4]
 8022922:	795b      	ldrb	r3, [r3, #5]
 8022924:	9212      	str	r2, [sp, #72]	; 0x48
 8022926:	9314      	str	r3, [sp, #80]	; 0x50
 8022928:	b28b      	uxth	r3, r1
 802292a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802292c:	fa1f f28b 	uxth.w	r2, fp
 8022930:	fb03 fb02 	mul.w	fp, r3, r2
 8022934:	011b      	lsls	r3, r3, #4
 8022936:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802293a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802293e:	eba3 030b 	sub.w	r3, r3, fp
 8022942:	b292      	uxth	r2, r2
 8022944:	b29b      	uxth	r3, r3
 8022946:	1a89      	subs	r1, r1, r2
 8022948:	fb03 f808 	mul.w	r8, r3, r8
 802294c:	b289      	uxth	r1, r1
 802294e:	fb03 f909 	mul.w	r9, r3, r9
 8022952:	fb01 8800 	mla	r8, r1, r0, r8
 8022956:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022958:	fb01 990c 	mla	r9, r1, ip, r9
 802295c:	fb02 8800 	mla	r8, r2, r0, r8
 8022960:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022962:	fb02 9904 	mla	r9, r2, r4, r9
 8022966:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022968:	fb0b 8800 	mla	r8, fp, r0, r8
 802296c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802296e:	fb0b 9904 	mla	r9, fp, r4, r9
 8022972:	4343      	muls	r3, r0
 8022974:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022978:	ea4f 2929 	mov.w	r9, r9, asr #8
 802297c:	fb01 330e 	mla	r3, r1, lr, r3
 8022980:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022982:	f88a 9000 	strb.w	r9, [sl]
 8022986:	fb02 3201 	mla	r2, r2, r1, r3
 802298a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802298c:	f88a 8001 	strb.w	r8, [sl, #1]
 8022990:	fb0b 2b03 	mla	fp, fp, r3, r2
 8022994:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022998:	f88a b002 	strb.w	fp, [sl, #2]
 802299c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802299e:	f10a 0a03 	add.w	sl, sl, #3
 80229a2:	3f01      	subs	r7, #1
 80229a4:	441e      	add	r6, r3
 80229a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80229a8:	441d      	add	r5, r3
 80229aa:	e77f      	b.n	80228ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80229ac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80229ae:	441e      	add	r6, r3
 80229b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80229b2:	441d      	add	r5, r3
 80229b4:	9b06      	ldr	r3, [sp, #24]
 80229b6:	3b01      	subs	r3, #1
 80229b8:	9306      	str	r3, [sp, #24]
 80229ba:	9b08      	ldr	r3, [sp, #32]
 80229bc:	3303      	adds	r3, #3
 80229be:	9308      	str	r3, [sp, #32]
 80229c0:	e72b      	b.n	802281a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80229c2:	f47f af3c 	bne.w	802283e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80229c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229c8:	2b00      	cmp	r3, #0
 80229ca:	f340 80b9 	ble.w	8022b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80229ce:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80229d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80229d4:	ee79 9aab 	vadd.f32	s19, s19, s23
 80229d8:	eef0 6a48 	vmov.f32	s13, s16
 80229dc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80229e0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80229e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229e8:	ee16 6a90 	vmov	r6, s13
 80229ec:	eef0 6a68 	vmov.f32	s13, s17
 80229f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229f4:	ee16 5a90 	vmov	r5, s13
 80229f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80229fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a00:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a04:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022a08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022a0c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022a10:	ee18 2a10 	vmov	r2, s16
 8022a14:	eeb0 8a47 	vmov.f32	s16, s14
 8022a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a1c:	ee18 2a90 	vmov	r2, s17
 8022a20:	9333      	str	r3, [sp, #204]	; 0xcc
 8022a22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022a24:	eef0 8a67 	vmov.f32	s17, s15
 8022a28:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a2c:	9334      	str	r3, [sp, #208]	; 0xd0
 8022a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022a32:	3b01      	subs	r3, #1
 8022a34:	930c      	str	r3, [sp, #48]	; 0x30
 8022a36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022a38:	bf08      	it	eq
 8022a3a:	4613      	moveq	r3, r2
 8022a3c:	9306      	str	r3, [sp, #24]
 8022a3e:	e6e5      	b.n	802280c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022a40:	1c54      	adds	r4, r2, #1
 8022a42:	d1ab      	bne.n	802299c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022a44:	9807      	ldr	r0, [sp, #28]
 8022a46:	4282      	cmp	r2, r0
 8022a48:	daa8      	bge.n	802299c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022a4a:	1c58      	adds	r0, r3, #1
 8022a4c:	dba6      	blt.n	802299c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022a50:	4298      	cmp	r0, r3
 8022a52:	dda3      	ble.n	802299c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022a54:	9000      	str	r0, [sp, #0]
 8022a56:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022a58:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8022a5c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8022a60:	9b07      	ldr	r3, [sp, #28]
 8022a62:	4651      	mov	r1, sl
 8022a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a66:	f7ff fdd1 	bl	802260c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022a6a:	e797      	b.n	802299c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022a6c:	1431      	asrs	r1, r6, #16
 8022a6e:	9c07      	ldr	r4, [sp, #28]
 8022a70:	1428      	asrs	r0, r5, #16
 8022a72:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022a76:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8022a7a:	fb04 1000 	mla	r0, r4, r0, r1
 8022a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022a80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a86:	4401      	add	r1, r0
 8022a88:	5c20      	ldrb	r0, [r4, r0]
 8022a8a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8022a8e:	900e      	str	r0, [sp, #56]	; 0x38
 8022a90:	f891 a003 	ldrb.w	sl, [r1, #3]
 8022a94:	7848      	ldrb	r0, [r1, #1]
 8022a96:	f891 9004 	ldrb.w	r9, [r1, #4]
 8022a9a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8022a9e:	b172      	cbz	r2, 8022abe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8022aa0:	3105      	adds	r1, #5
 8022aa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022aa4:	190f      	adds	r7, r1, r4
 8022aa6:	5d09      	ldrb	r1, [r1, r4]
 8022aa8:	9115      	str	r1, [sp, #84]	; 0x54
 8022aaa:	7879      	ldrb	r1, [r7, #1]
 8022aac:	9117      	str	r1, [sp, #92]	; 0x5c
 8022aae:	78b9      	ldrb	r1, [r7, #2]
 8022ab0:	9119      	str	r1, [sp, #100]	; 0x64
 8022ab2:	78f9      	ldrb	r1, [r7, #3]
 8022ab4:	9116      	str	r1, [sp, #88]	; 0x58
 8022ab6:	7939      	ldrb	r1, [r7, #4]
 8022ab8:	9118      	str	r1, [sp, #96]	; 0x60
 8022aba:	7979      	ldrb	r1, [r7, #5]
 8022abc:	911a      	str	r1, [sp, #104]	; 0x68
 8022abe:	b29b      	uxth	r3, r3
 8022ac0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022ac2:	b292      	uxth	r2, r2
 8022ac4:	f10c 0c03 	add.w	ip, ip, #3
 8022ac8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022acc:	fb03 f102 	mul.w	r1, r3, r2
 8022ad0:	011b      	lsls	r3, r3, #4
 8022ad2:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8022ad6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022ada:	1a5b      	subs	r3, r3, r1
 8022adc:	b292      	uxth	r2, r2
 8022ade:	b29b      	uxth	r3, r3
 8022ae0:	1abf      	subs	r7, r7, r2
 8022ae2:	fb03 f909 	mul.w	r9, r3, r9
 8022ae6:	b2bf      	uxth	r7, r7
 8022ae8:	fb03 fa0a 	mul.w	sl, r3, sl
 8022aec:	fb03 f30b 	mul.w	r3, r3, fp
 8022af0:	fb07 9900 	mla	r9, r7, r0, r9
 8022af4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022af6:	fb07 aa04 	mla	sl, r7, r4, sl
 8022afa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022afc:	fb02 9900 	mla	r9, r2, r0, r9
 8022b00:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022b02:	fb07 3308 	mla	r3, r7, r8, r3
 8022b06:	fb01 9900 	mla	r9, r1, r0, r9
 8022b0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022b0c:	fb02 aa04 	mla	sl, r2, r4, sl
 8022b10:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022b12:	fb02 3200 	mla	r2, r2, r0, r3
 8022b16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022b18:	fb01 aa04 	mla	sl, r1, r4, sl
 8022b1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b20:	fb01 2103 	mla	r1, r1, r3, r2
 8022b24:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022b26:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022b2a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8022b2e:	1209      	asrs	r1, r1, #8
 8022b30:	441e      	add	r6, r3
 8022b32:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b34:	f80c ac06 	strb.w	sl, [ip, #-6]
 8022b38:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8022b3c:	441d      	add	r5, r3
 8022b3e:	e697      	b.n	8022870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8022b40:	b01d      	add	sp, #116	; 0x74
 8022b42:	ecbd 8b0a 	vpop	{d8-d12}
 8022b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b50:	b085      	sub	sp, #20
 8022b52:	7888      	ldrb	r0, [r1, #2]
 8022b54:	4691      	mov	r9, r2
 8022b56:	9000      	str	r0, [sp, #0]
 8022b58:	7848      	ldrb	r0, [r1, #1]
 8022b5a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8022b5e:	9001      	str	r0, [sp, #4]
 8022b60:	7808      	ldrb	r0, [r1, #0]
 8022b62:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8022b66:	9002      	str	r0, [sp, #8]
 8022b68:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022b6c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8022b70:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022b74:	fb04 c603 	mla	r6, r4, r3, ip
 8022b78:	2c00      	cmp	r4, #0
 8022b7a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8022b7e:	9a00      	ldr	r2, [sp, #0]
 8022b80:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022b84:	9a01      	ldr	r2, [sp, #4]
 8022b86:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022b8a:	db3a      	blt.n	8022c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8022b8c:	45a0      	cmp	r8, r4
 8022b8e:	dd38      	ble.n	8022c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8022b90:	f1bc 0f00 	cmp.w	ip, #0
 8022b94:	db33      	blt.n	8022bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8022b96:	4563      	cmp	r3, ip
 8022b98:	dd31      	ble.n	8022bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8022b9a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8022b9e:	f11c 0601 	adds.w	r6, ip, #1
 8022ba2:	d431      	bmi.n	8022c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022ba4:	42b3      	cmp	r3, r6
 8022ba6:	dd2f      	ble.n	8022c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022ba8:	b375      	cbz	r5, 8022c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022baa:	f8de 6004 	ldr.w	r6, [lr, #4]
 8022bae:	3401      	adds	r4, #1
 8022bb0:	d42e      	bmi.n	8022c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022bb2:	45a0      	cmp	r8, r4
 8022bb4:	dd2c      	ble.n	8022c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022bb6:	b35f      	cbz	r7, 8022c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022bb8:	f1bc 0f00 	cmp.w	ip, #0
 8022bbc:	db26      	blt.n	8022c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8022bbe:	4563      	cmp	r3, ip
 8022bc0:	dd24      	ble.n	8022c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8022bc2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022bc6:	f11c 0c01 	adds.w	ip, ip, #1
 8022bca:	d405      	bmi.n	8022bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022bcc:	4563      	cmp	r3, ip
 8022bce:	dd03      	ble.n	8022bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022bd0:	b115      	cbz	r5, 8022bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022bd2:	3301      	adds	r3, #1
 8022bd4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022bd8:	2d0f      	cmp	r5, #15
 8022bda:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022bde:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022be2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022be6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022bea:	d801      	bhi.n	8022bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8022bec:	2f0f      	cmp	r7, #15
 8022bee:	d911      	bls.n	8022c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8022bf0:	4b80      	ldr	r3, [pc, #512]	; (8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022bf2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022bf6:	4a80      	ldr	r2, [pc, #512]	; (8022df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022bf8:	4880      	ldr	r0, [pc, #512]	; (8022dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8022bfa:	f003 fd07 	bl	802660c <__assert_func>
 8022bfe:	4602      	mov	r2, r0
 8022c00:	e7cd      	b.n	8022b9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8022c02:	4606      	mov	r6, r0
 8022c04:	4602      	mov	r2, r0
 8022c06:	e7d2      	b.n	8022bae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8022c08:	4606      	mov	r6, r0
 8022c0a:	e7d0      	b.n	8022bae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8022c0c:	4604      	mov	r4, r0
 8022c0e:	e7da      	b.n	8022bc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8022c10:	4604      	mov	r4, r0
 8022c12:	e7e1      	b.n	8022bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022c14:	b2ab      	uxth	r3, r5
 8022c16:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022c1a:	b2bf      	uxth	r7, r7
 8022c1c:	fb03 fe07 	mul.w	lr, r3, r7
 8022c20:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022c24:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022c28:	eba3 0c0e 	sub.w	ip, r3, lr
 8022c2c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022c30:	b2bf      	uxth	r7, r7
 8022c32:	fa1f fc8c 	uxth.w	ip, ip
 8022c36:	eba5 0507 	sub.w	r5, r5, r7
 8022c3a:	fb0c f30a 	mul.w	r3, ip, sl
 8022c3e:	b2ad      	uxth	r5, r5
 8022c40:	fb05 330b 	mla	r3, r5, fp, r3
 8022c44:	fb07 3309 	mla	r3, r7, r9, r3
 8022c48:	fb0e 3308 	mla	r3, lr, r8, r3
 8022c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c50:	9303      	str	r3, [sp, #12]
 8022c52:	d018      	beq.n	8022c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8022c54:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022c58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022c5c:	fb0b f303 	mul.w	r3, fp, r3
 8022c60:	fb0b fb02 	mul.w	fp, fp, r2
 8022c64:	0a1a      	lsrs	r2, r3, #8
 8022c66:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022c6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022c6e:	441a      	add	r2, r3
 8022c70:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022c74:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022c78:	0a12      	lsrs	r2, r2, #8
 8022c7a:	0a1b      	lsrs	r3, r3, #8
 8022c7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022c80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c84:	431a      	orrs	r2, r3
 8022c86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022c8a:	d019      	beq.n	8022cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8022c8c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022c90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c94:	fb0a fb0b 	mul.w	fp, sl, fp
 8022c98:	fb0a fa06 	mul.w	sl, sl, r6
 8022c9c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022ca0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ca4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022ca8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022cac:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022cb0:	445e      	add	r6, fp
 8022cb2:	0a1b      	lsrs	r3, r3, #8
 8022cb4:	0a36      	lsrs	r6, r6, #8
 8022cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022cba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022cbe:	431e      	orrs	r6, r3
 8022cc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022cc4:	d019      	beq.n	8022cfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8022cc6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022cca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022cce:	fb09 fa0a 	mul.w	sl, r9, sl
 8022cd2:	fb09 f904 	mul.w	r9, r9, r4
 8022cd6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022cda:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022cde:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022ce2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022ce6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022cea:	4454      	add	r4, sl
 8022cec:	0a1b      	lsrs	r3, r3, #8
 8022cee:	0a24      	lsrs	r4, r4, #8
 8022cf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022cf4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022cf8:	431c      	orrs	r4, r3
 8022cfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022cfe:	d019      	beq.n	8022d34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8022d00:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022d04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d08:	fb08 f909 	mul.w	r9, r8, r9
 8022d0c:	fb08 f800 	mul.w	r8, r8, r0
 8022d10:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022d14:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022d18:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022d1c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022d20:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022d24:	4448      	add	r0, r9
 8022d26:	0a1b      	lsrs	r3, r3, #8
 8022d28:	0a00      	lsrs	r0, r0, #8
 8022d2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022d32:	4318      	orrs	r0, r3
 8022d34:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022d38:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d3c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022d40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d44:	fb0c f808 	mul.w	r8, ip, r8
 8022d48:	fb0c f606 	mul.w	r6, ip, r6
 8022d4c:	fb05 8803 	mla	r8, r5, r3, r8
 8022d50:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022d54:	fb05 6202 	mla	r2, r5, r2, r6
 8022d58:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022d5c:	fb07 8803 	mla	r8, r7, r3, r8
 8022d60:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022d64:	fb07 2704 	mla	r7, r7, r4, r2
 8022d68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d6c:	fb0e 8303 	mla	r3, lr, r3, r8
 8022d70:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8022d74:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022d78:	9803      	ldr	r0, [sp, #12]
 8022d7a:	b292      	uxth	r2, r2
 8022d7c:	9c02      	ldr	r4, [sp, #8]
 8022d7e:	0a1b      	lsrs	r3, r3, #8
 8022d80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d84:	4350      	muls	r0, r2
 8022d86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022d8e:	ea43 0e0e 	orr.w	lr, r3, lr
 8022d92:	1c43      	adds	r3, r0, #1
 8022d94:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022d98:	fa5f f08e 	uxtb.w	r0, lr
 8022d9c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022da0:	b2db      	uxtb	r3, r3
 8022da2:	fb14 f403 	smulbb	r4, r4, r3
 8022da6:	fb00 4002 	mla	r0, r0, r2, r4
 8022daa:	b280      	uxth	r0, r0
 8022dac:	1c44      	adds	r4, r0, #1
 8022dae:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022db2:	9c01      	ldr	r4, [sp, #4]
 8022db4:	fb14 f403 	smulbb	r4, r4, r3
 8022db8:	1200      	asrs	r0, r0, #8
 8022dba:	7008      	strb	r0, [r1, #0]
 8022dbc:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8022dc0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022dc4:	fb00 4002 	mla	r0, r0, r2, r4
 8022dc8:	b280      	uxth	r0, r0
 8022dca:	1c44      	adds	r4, r0, #1
 8022dcc:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022dd0:	1200      	asrs	r0, r0, #8
 8022dd2:	7048      	strb	r0, [r1, #1]
 8022dd4:	9800      	ldr	r0, [sp, #0]
 8022dd6:	fb10 f303 	smulbb	r3, r0, r3
 8022dda:	fb0e 3202 	mla	r2, lr, r2, r3
 8022dde:	b292      	uxth	r2, r2
 8022de0:	f102 0e01 	add.w	lr, r2, #1
 8022de4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022de8:	1212      	asrs	r2, r2, #8
 8022dea:	708a      	strb	r2, [r1, #2]
 8022dec:	b005      	add	sp, #20
 8022dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022df2:	bf00      	nop
 8022df4:	0802b0d7 	.word	0x0802b0d7
 8022df8:	0802b5ce 	.word	0x0802b5ce
 8022dfc:	0802b1a0 	.word	0x0802b1a0

08022e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e04:	ed2d 8b08 	vpush	{d8-d11}
 8022e08:	b099      	sub	sp, #100	; 0x64
 8022e0a:	eeb0 aa40 	vmov.f32	s20, s0
 8022e0e:	eef0 9a60 	vmov.f32	s19, s1
 8022e12:	9306      	str	r3, [sp, #24]
 8022e14:	eeb0 9a41 	vmov.f32	s18, s2
 8022e18:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8022e1c:	eeb0 8a62 	vmov.f32	s16, s5
 8022e20:	9216      	str	r2, [sp, #88]	; 0x58
 8022e22:	eef0 8a43 	vmov.f32	s17, s6
 8022e26:	9307      	str	r3, [sp, #28]
 8022e28:	eef0 ba44 	vmov.f32	s23, s8
 8022e2c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8022e30:	eeb0 ba64 	vmov.f32	s22, s9
 8022e34:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022e36:	eef0 aa45 	vmov.f32	s21, s10
 8022e3a:	9310      	str	r3, [sp, #64]	; 0x40
 8022e3c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8022e40:	9017      	str	r0, [sp, #92]	; 0x5c
 8022e42:	9112      	str	r1, [sp, #72]	; 0x48
 8022e44:	6850      	ldr	r0, [r2, #4]
 8022e46:	9315      	str	r3, [sp, #84]	; 0x54
 8022e48:	6812      	ldr	r2, [r2, #0]
 8022e4a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8022e4c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022e50:	fb00 1303 	mla	r3, r0, r3, r1
 8022e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e58:	18d3      	adds	r3, r2, r3
 8022e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8022e5c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022e5e:	681b      	ldr	r3, [r3, #0]
 8022e60:	9311      	str	r3, [sp, #68]	; 0x44
 8022e62:	9b07      	ldr	r3, [sp, #28]
 8022e64:	009b      	lsls	r3, r3, #2
 8022e66:	930e      	str	r3, [sp, #56]	; 0x38
 8022e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022e6a:	2b00      	cmp	r3, #0
 8022e6c:	dc03      	bgt.n	8022e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022e6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	f340 833b 	ble.w	80234ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022e76:	9b06      	ldr	r3, [sp, #24]
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	f340 8197 	ble.w	80231ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8022e7e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022e80:	1423      	asrs	r3, r4, #16
 8022e82:	1412      	asrs	r2, r2, #16
 8022e84:	d432      	bmi.n	8022eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8022e86:	1c51      	adds	r1, r2, #1
 8022e88:	9807      	ldr	r0, [sp, #28]
 8022e8a:	4288      	cmp	r0, r1
 8022e8c:	dd31      	ble.n	8022ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	db2f      	blt.n	8022ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022e92:	1c59      	adds	r1, r3, #1
 8022e94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022e96:	4288      	cmp	r0, r1
 8022e98:	dd2b      	ble.n	8022ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022e9a:	9b06      	ldr	r3, [sp, #24]
 8022e9c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022e9e:	3b01      	subs	r3, #1
 8022ea0:	992b      	ldr	r1, [sp, #172]	; 0xac
 8022ea2:	fb02 1203 	mla	r2, r2, r3, r1
 8022ea6:	1412      	asrs	r2, r2, #16
 8022ea8:	d42e      	bmi.n	8022f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022eaa:	3201      	adds	r2, #1
 8022eac:	9907      	ldr	r1, [sp, #28]
 8022eae:	4291      	cmp	r1, r2
 8022eb0:	dd2a      	ble.n	8022f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022eb2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022eb4:	fb02 4303 	mla	r3, r2, r3, r4
 8022eb8:	141b      	asrs	r3, r3, #16
 8022eba:	d425      	bmi.n	8022f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022ebc:	3301      	adds	r3, #1
 8022ebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ec0:	429a      	cmp	r2, r3
 8022ec2:	dd21      	ble.n	8022f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ec6:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8022eca:	f103 0e03 	add.w	lr, r3, #3
 8022ece:	9b06      	ldr	r3, [sp, #24]
 8022ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8022ed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	f300 81d2 	bgt.w	802327e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8022eda:	9b06      	ldr	r3, [sp, #24]
 8022edc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ee2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022ee6:	4423      	add	r3, r4
 8022ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8022eea:	e161      	b.n	80231b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8022eec:	1c51      	adds	r1, r2, #1
 8022eee:	f040 8150 	bne.w	8023192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022ef2:	9907      	ldr	r1, [sp, #28]
 8022ef4:	428a      	cmp	r2, r1
 8022ef6:	f280 814c 	bge.w	8023192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022efa:	1c5a      	adds	r2, r3, #1
 8022efc:	f2c0 8149 	blt.w	8023192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022f00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022f02:	4293      	cmp	r3, r2
 8022f04:	f280 8145 	bge.w	8023192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022f08:	9b06      	ldr	r3, [sp, #24]
 8022f0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022f0c:	9314      	str	r3, [sp, #80]	; 0x50
 8022f0e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8022f12:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022f16:	2b00      	cmp	r3, #0
 8022f18:	dddf      	ble.n	8022eda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8022f1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022f1c:	1423      	asrs	r3, r4, #16
 8022f1e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022f22:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022f26:	1412      	asrs	r2, r2, #16
 8022f28:	f100 8190 	bmi.w	802324c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8022f2c:	1c55      	adds	r5, r2, #1
 8022f2e:	9f07      	ldr	r7, [sp, #28]
 8022f30:	42af      	cmp	r7, r5
 8022f32:	f340 818d 	ble.w	8023250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022f36:	2b00      	cmp	r3, #0
 8022f38:	f2c0 818a 	blt.w	8023250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022f3c:	1c5d      	adds	r5, r3, #1
 8022f3e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022f40:	42af      	cmp	r7, r5
 8022f42:	f340 8185 	ble.w	8023250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022f46:	9d07      	ldr	r5, [sp, #28]
 8022f48:	fb03 2305 	mla	r3, r3, r5, r2
 8022f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022f4e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022f56:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022f5a:	2800      	cmp	r0, #0
 8022f5c:	f000 8167 	beq.w	802322e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022f60:	686a      	ldr	r2, [r5, #4]
 8022f62:	920b      	str	r2, [sp, #44]	; 0x2c
 8022f64:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022f68:	2900      	cmp	r1, #0
 8022f6a:	f000 8169 	beq.w	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8022f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f70:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022f72:	18aa      	adds	r2, r5, r2
 8022f74:	59ed      	ldr	r5, [r5, r7]
 8022f76:	6852      	ldr	r2, [r2, #4]
 8022f78:	9508      	str	r5, [sp, #32]
 8022f7a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022f7e:	0e15      	lsrs	r5, r2, #24
 8022f80:	920c      	str	r2, [sp, #48]	; 0x30
 8022f82:	b280      	uxth	r0, r0
 8022f84:	b289      	uxth	r1, r1
 8022f86:	fb00 fb01 	mul.w	fp, r0, r1
 8022f8a:	0100      	lsls	r0, r0, #4
 8022f8c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022f90:	eba0 090b 	sub.w	r9, r0, fp
 8022f94:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022f98:	b289      	uxth	r1, r1
 8022f9a:	fa1f f989 	uxth.w	r9, r9
 8022f9e:	1a52      	subs	r2, r2, r1
 8022fa0:	fb09 f008 	mul.w	r0, r9, r8
 8022fa4:	b292      	uxth	r2, r2
 8022fa6:	fb02 000c 	mla	r0, r2, ip, r0
 8022faa:	fb01 000a 	mla	r0, r1, sl, r0
 8022fae:	fb0b 0005 	mla	r0, fp, r5, r0
 8022fb2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022fb6:	2800      	cmp	r0, #0
 8022fb8:	f000 80e0 	beq.w	802317c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022fbc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022fc0:	d01b      	beq.n	8022ffa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8022fc2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022fc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022fca:	fb0c fe0e 	mul.w	lr, ip, lr
 8022fce:	fb0c fc03 	mul.w	ip, ip, r3
 8022fd2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022fd6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022fda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022fde:	4473      	add	r3, lr
 8022fe0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022fe4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022fe8:	0a1b      	lsrs	r3, r3, #8
 8022fea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ff2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ff6:	ea43 030e 	orr.w	r3, r3, lr
 8022ffa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022ffe:	d01e      	beq.n	802303e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8023000:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023002:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023006:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802300a:	fb08 fc0c 	mul.w	ip, r8, ip
 802300e:	fb08 f80e 	mul.w	r8, r8, lr
 8023012:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023016:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802301a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802301e:	44e6      	add	lr, ip
 8023020:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023024:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023028:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802302c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023034:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023038:	ea4e 0708 	orr.w	r7, lr, r8
 802303c:	970b      	str	r7, [sp, #44]	; 0x2c
 802303e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023042:	d01e      	beq.n	8023082 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023044:	9f08      	ldr	r7, [sp, #32]
 8023046:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802304a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802304e:	fb0a f808 	mul.w	r8, sl, r8
 8023052:	fb0a fa0c 	mul.w	sl, sl, ip
 8023056:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802305a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802305e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023062:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023066:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802306a:	44c6      	add	lr, r8
 802306c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023070:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023074:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802307c:	ea4e 070a 	orr.w	r7, lr, sl
 8023080:	9708      	str	r7, [sp, #32]
 8023082:	2dff      	cmp	r5, #255	; 0xff
 8023084:	d01d      	beq.n	80230c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8023086:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023088:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802308c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023090:	fb05 f808 	mul.w	r8, r5, r8
 8023094:	fb05 f50c 	mul.w	r5, r5, ip
 8023098:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802309c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80230a0:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80230a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230a8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80230ac:	44c6      	add	lr, r8
 80230ae:	0a2d      	lsrs	r5, r5, #8
 80230b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230b4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80230b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230bc:	ea4e 0505 	orr.w	r5, lr, r5
 80230c0:	950c      	str	r5, [sp, #48]	; 0x30
 80230c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80230c4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80230c8:	9f08      	ldr	r7, [sp, #32]
 80230ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80230ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80230d2:	fb09 f505 	mul.w	r5, r9, r5
 80230d6:	fb02 550c 	mla	r5, r2, ip, r5
 80230da:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80230de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80230e0:	fb01 550c 	mla	r5, r1, ip, r5
 80230e4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80230e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80230ea:	fb0b 550c 	mla	r5, fp, ip, r5
 80230ee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80230f2:	fb09 f90c 	mul.w	r9, r9, ip
 80230f6:	0a2d      	lsrs	r5, r5, #8
 80230f8:	fb02 9303 	mla	r3, r2, r3, r9
 80230fc:	9a08      	ldr	r2, [sp, #32]
 80230fe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023102:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023108:	fb01 330e 	mla	r3, r1, lr, r3
 802310c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023110:	fb0b 3b01 	mla	fp, fp, r1, r3
 8023114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023116:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023118:	4343      	muls	r3, r0
 802311a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802311e:	1c58      	adds	r0, r3, #1
 8023120:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023124:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023128:	ea45 050b 	orr.w	r5, r5, fp
 802312c:	7833      	ldrb	r3, [r6, #0]
 802312e:	b2ea      	uxtb	r2, r5
 8023130:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023134:	fb12 f201 	smulbb	r2, r2, r1
 8023138:	b2c0      	uxtb	r0, r0
 802313a:	fb03 2300 	mla	r3, r3, r0, r2
 802313e:	b29b      	uxth	r3, r3
 8023140:	1c5a      	adds	r2, r3, #1
 8023142:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023146:	7872      	ldrb	r2, [r6, #1]
 8023148:	fb12 f200 	smulbb	r2, r2, r0
 802314c:	121b      	asrs	r3, r3, #8
 802314e:	7033      	strb	r3, [r6, #0]
 8023150:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023154:	0c2d      	lsrs	r5, r5, #16
 8023156:	fb03 2301 	mla	r3, r3, r1, r2
 802315a:	b29b      	uxth	r3, r3
 802315c:	1c5a      	adds	r2, r3, #1
 802315e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023162:	121b      	asrs	r3, r3, #8
 8023164:	7073      	strb	r3, [r6, #1]
 8023166:	78b3      	ldrb	r3, [r6, #2]
 8023168:	fb13 f000 	smulbb	r0, r3, r0
 802316c:	fb05 0501 	mla	r5, r5, r1, r0
 8023170:	b2ad      	uxth	r5, r5
 8023172:	1c6b      	adds	r3, r5, #1
 8023174:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023178:	122d      	asrs	r5, r5, #8
 802317a:	70b5      	strb	r5, [r6, #2]
 802317c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802317e:	3603      	adds	r6, #3
 8023180:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023182:	4413      	add	r3, r2
 8023184:	932b      	str	r3, [sp, #172]	; 0xac
 8023186:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023188:	441c      	add	r4, r3
 802318a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802318c:	3b01      	subs	r3, #1
 802318e:	9314      	str	r3, [sp, #80]	; 0x50
 8023190:	e6c0      	b.n	8022f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8023192:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023194:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023196:	4413      	add	r3, r2
 8023198:	932b      	str	r3, [sp, #172]	; 0xac
 802319a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802319c:	441c      	add	r4, r3
 802319e:	9b06      	ldr	r3, [sp, #24]
 80231a0:	3b01      	subs	r3, #1
 80231a2:	9306      	str	r3, [sp, #24]
 80231a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231a6:	3303      	adds	r3, #3
 80231a8:	930a      	str	r3, [sp, #40]	; 0x28
 80231aa:	e664      	b.n	8022e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80231ac:	f47f ae75 	bne.w	8022e9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80231b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80231b2:	2b00      	cmp	r3, #0
 80231b4:	f340 819a 	ble.w	80234ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80231b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80231bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80231c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80231c6:	eef0 6a48 	vmov.f32	s13, s16
 80231ca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80231ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80231d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231d6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80231da:	eef0 6a68 	vmov.f32	s13, s17
 80231de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231e2:	ee16 4a90 	vmov	r4, s13
 80231e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80231ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80231ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 80231f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80231f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80231fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80231fe:	ee18 2a10 	vmov	r2, s16
 8023202:	eeb0 8a47 	vmov.f32	s16, s14
 8023206:	fb92 f3f3 	sdiv	r3, r2, r3
 802320a:	ee18 2a90 	vmov	r2, s17
 802320e:	932d      	str	r3, [sp, #180]	; 0xb4
 8023210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023212:	eef0 8a67 	vmov.f32	s17, s15
 8023216:	fb92 f3f3 	sdiv	r3, r2, r3
 802321a:	932e      	str	r3, [sp, #184]	; 0xb8
 802321c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802321e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023220:	3b01      	subs	r3, #1
 8023222:	9312      	str	r3, [sp, #72]	; 0x48
 8023224:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023226:	bf08      	it	eq
 8023228:	4613      	moveq	r3, r2
 802322a:	9306      	str	r3, [sp, #24]
 802322c:	e61c      	b.n	8022e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802322e:	b151      	cbz	r1, 8023246 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023232:	58aa      	ldr	r2, [r5, r2]
 8023234:	25ff      	movs	r5, #255	; 0xff
 8023236:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802323a:	9208      	str	r2, [sp, #32]
 802323c:	46a8      	mov	r8, r5
 802323e:	e6a0      	b.n	8022f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023240:	25ff      	movs	r5, #255	; 0xff
 8023242:	46aa      	mov	sl, r5
 8023244:	e69d      	b.n	8022f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023246:	25ff      	movs	r5, #255	; 0xff
 8023248:	46aa      	mov	sl, r5
 802324a:	e7f7      	b.n	802323c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802324c:	1c57      	adds	r7, r2, #1
 802324e:	d195      	bne.n	802317c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023250:	9d07      	ldr	r5, [sp, #28]
 8023252:	4295      	cmp	r5, r2
 8023254:	dd92      	ble.n	802317c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023256:	1c5d      	adds	r5, r3, #1
 8023258:	db90      	blt.n	802317c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802325a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802325c:	429d      	cmp	r5, r3
 802325e:	dd8d      	ble.n	802317c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023260:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023262:	9201      	str	r2, [sp, #4]
 8023264:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023266:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802326a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802326c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802326e:	9300      	str	r3, [sp, #0]
 8023270:	9b07      	ldr	r3, [sp, #28]
 8023272:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023276:	4631      	mov	r1, r6
 8023278:	f7ff fc68 	bl	8022b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802327c:	e77e      	b.n	802317c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802327e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023280:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023284:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023286:	9d07      	ldr	r5, [sp, #28]
 8023288:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802328c:	1412      	asrs	r2, r2, #16
 802328e:	1423      	asrs	r3, r4, #16
 8023290:	fb05 2303 	mla	r3, r5, r3, r2
 8023294:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023296:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802329e:	0e1e      	lsrs	r6, r3, #24
 80232a0:	2900      	cmp	r1, #0
 80232a2:	f000 8114 	beq.w	80234ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80232a6:	686a      	ldr	r2, [r5, #4]
 80232a8:	920d      	str	r2, [sp, #52]	; 0x34
 80232aa:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80232ae:	2800      	cmp	r0, #0
 80232b0:	f000 8116 	beq.w	80234e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80232b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80232b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80232b8:	18aa      	adds	r2, r5, r2
 80232ba:	59ed      	ldr	r5, [r5, r7]
 80232bc:	6852      	ldr	r2, [r2, #4]
 80232be:	9509      	str	r5, [sp, #36]	; 0x24
 80232c0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80232c4:	0e15      	lsrs	r5, r2, #24
 80232c6:	920f      	str	r2, [sp, #60]	; 0x3c
 80232c8:	b289      	uxth	r1, r1
 80232ca:	b280      	uxth	r0, r0
 80232cc:	fb01 fa00 	mul.w	sl, r1, r0
 80232d0:	0109      	lsls	r1, r1, #4
 80232d2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80232d6:	eba1 080a 	sub.w	r8, r1, sl
 80232da:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80232de:	b280      	uxth	r0, r0
 80232e0:	fa1f f888 	uxth.w	r8, r8
 80232e4:	1a12      	subs	r2, r2, r0
 80232e6:	fb08 f10c 	mul.w	r1, r8, ip
 80232ea:	b292      	uxth	r2, r2
 80232ec:	fb02 1106 	mla	r1, r2, r6, r1
 80232f0:	fb00 1109 	mla	r1, r0, r9, r1
 80232f4:	fb0a 1105 	mla	r1, sl, r5, r1
 80232f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80232fc:	2900      	cmp	r1, #0
 80232fe:	f000 80da 	beq.w	80234b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8023302:	2eff      	cmp	r6, #255	; 0xff
 8023304:	d016      	beq.n	8023334 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8023306:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802330a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802330e:	4377      	muls	r7, r6
 8023310:	435e      	muls	r6, r3
 8023312:	0a3b      	lsrs	r3, r7, #8
 8023314:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023318:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802331c:	443b      	add	r3, r7
 802331e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023322:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023326:	0a1b      	lsrs	r3, r3, #8
 8023328:	0a3f      	lsrs	r7, r7, #8
 802332a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802332e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023332:	433b      	orrs	r3, r7
 8023334:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023338:	d01d      	beq.n	8023376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802333a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802333c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802333e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023342:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023346:	fb0c f606 	mul.w	r6, ip, r6
 802334a:	fb0c fc07 	mul.w	ip, ip, r7
 802334e:	0a37      	lsrs	r7, r6, #8
 8023350:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023354:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023358:	4437      	add	r7, r6
 802335a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802335e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023362:	0a3f      	lsrs	r7, r7, #8
 8023364:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023368:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802336c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023370:	ea47 060c 	orr.w	r6, r7, ip
 8023374:	960d      	str	r6, [sp, #52]	; 0x34
 8023376:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802337a:	d01d      	beq.n	80233b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802337c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802337e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023382:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023386:	fb09 fc0c 	mul.w	ip, r9, ip
 802338a:	fb09 f906 	mul.w	r9, r9, r6
 802338e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023392:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023396:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802339a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802339e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80233a2:	4467      	add	r7, ip
 80233a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80233a8:	0a3f      	lsrs	r7, r7, #8
 80233aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80233ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80233b2:	ea47 0609 	orr.w	r6, r7, r9
 80233b6:	9609      	str	r6, [sp, #36]	; 0x24
 80233b8:	2dff      	cmp	r5, #255	; 0xff
 80233ba:	d01a      	beq.n	80233f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80233bc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80233be:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80233c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80233c6:	fb05 fc0c 	mul.w	ip, r5, ip
 80233ca:	4375      	muls	r5, r6
 80233cc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80233d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80233d4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80233d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80233dc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80233e0:	4467      	add	r7, ip
 80233e2:	0a2d      	lsrs	r5, r5, #8
 80233e4:	0a3f      	lsrs	r7, r7, #8
 80233e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80233ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80233ee:	433d      	orrs	r5, r7
 80233f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80233f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80233f4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80233f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233fc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023400:	fb08 f505 	mul.w	r5, r8, r5
 8023404:	fb02 5506 	mla	r5, r2, r6, r5
 8023408:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802340a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802340e:	fb00 5506 	mla	r5, r0, r6, r5
 8023412:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023414:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023418:	fb0a 5506 	mla	r5, sl, r6, r5
 802341c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802341e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023422:	0a2d      	lsrs	r5, r5, #8
 8023424:	fb08 f806 	mul.w	r8, r8, r6
 8023428:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802342c:	fb02 8303 	mla	r3, r2, r3, r8
 8023430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023432:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023438:	fb00 3307 	mla	r3, r0, r7, r3
 802343c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023440:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023444:	fb01 f30b 	mul.w	r3, r1, fp
 8023448:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802344c:	1c59      	adds	r1, r3, #1
 802344e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023452:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023456:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802345a:	ea45 050c 	orr.w	r5, r5, ip
 802345e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023462:	b2ea      	uxtb	r2, r5
 8023464:	b2c9      	uxtb	r1, r1
 8023466:	fb12 f20b 	smulbb	r2, r2, fp
 802346a:	fb03 2301 	mla	r3, r3, r1, r2
 802346e:	b29b      	uxth	r3, r3
 8023470:	1c5a      	adds	r2, r3, #1
 8023472:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023476:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802347a:	fb12 f201 	smulbb	r2, r2, r1
 802347e:	121b      	asrs	r3, r3, #8
 8023480:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023484:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023488:	0c2d      	lsrs	r5, r5, #16
 802348a:	fb03 230b 	mla	r3, r3, fp, r2
 802348e:	b29b      	uxth	r3, r3
 8023490:	1c5a      	adds	r2, r3, #1
 8023492:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023496:	121b      	asrs	r3, r3, #8
 8023498:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802349c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80234a0:	fb13 f101 	smulbb	r1, r3, r1
 80234a4:	fb05 150b 	mla	r5, r5, fp, r1
 80234a8:	b2ad      	uxth	r5, r5
 80234aa:	1c69      	adds	r1, r5, #1
 80234ac:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80234b0:	122d      	asrs	r5, r5, #8
 80234b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80234b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80234b8:	f10e 0e03 	add.w	lr, lr, #3
 80234bc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80234be:	4413      	add	r3, r2
 80234c0:	932b      	str	r3, [sp, #172]	; 0xac
 80234c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80234c4:	441c      	add	r4, r3
 80234c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80234c8:	3b01      	subs	r3, #1
 80234ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80234cc:	e501      	b.n	8022ed2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80234ce:	b150      	cbz	r0, 80234e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80234d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80234d2:	58aa      	ldr	r2, [r5, r2]
 80234d4:	25ff      	movs	r5, #255	; 0xff
 80234d6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80234da:	9209      	str	r2, [sp, #36]	; 0x24
 80234dc:	46ac      	mov	ip, r5
 80234de:	e6f3      	b.n	80232c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80234e0:	25ff      	movs	r5, #255	; 0xff
 80234e2:	46a9      	mov	r9, r5
 80234e4:	e6f0      	b.n	80232c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80234e6:	25ff      	movs	r5, #255	; 0xff
 80234e8:	46a9      	mov	r9, r5
 80234ea:	e7f7      	b.n	80234dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80234ec:	b019      	add	sp, #100	; 0x64
 80234ee:	ecbd 8b08 	vpop	{d8-d11}
 80234f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080234f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80234f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234fc:	b085      	sub	sp, #20
 80234fe:	7888      	ldrb	r0, [r1, #2]
 8023500:	4691      	mov	r9, r2
 8023502:	9000      	str	r0, [sp, #0]
 8023504:	7848      	ldrb	r0, [r1, #1]
 8023506:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802350a:	9001      	str	r0, [sp, #4]
 802350c:	7808      	ldrb	r0, [r1, #0]
 802350e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023512:	9002      	str	r0, [sp, #8]
 8023514:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023518:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802351c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023520:	fb04 c603 	mla	r6, r4, r3, ip
 8023524:	2c00      	cmp	r4, #0
 8023526:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802352a:	9a00      	ldr	r2, [sp, #0]
 802352c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023530:	9a01      	ldr	r2, [sp, #4]
 8023532:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023536:	db3a      	blt.n	80235ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023538:	45a0      	cmp	r8, r4
 802353a:	dd38      	ble.n	80235ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802353c:	f1bc 0f00 	cmp.w	ip, #0
 8023540:	db33      	blt.n	80235aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023542:	4563      	cmp	r3, ip
 8023544:	dd31      	ble.n	80235aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023546:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802354a:	f11c 0601 	adds.w	r6, ip, #1
 802354e:	d431      	bmi.n	80235b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023550:	42b3      	cmp	r3, r6
 8023552:	dd2f      	ble.n	80235b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023554:	b375      	cbz	r5, 80235b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023556:	f8de 6004 	ldr.w	r6, [lr, #4]
 802355a:	3401      	adds	r4, #1
 802355c:	d42e      	bmi.n	80235bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802355e:	45a0      	cmp	r8, r4
 8023560:	dd2c      	ble.n	80235bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023562:	b35f      	cbz	r7, 80235bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023564:	f1bc 0f00 	cmp.w	ip, #0
 8023568:	db26      	blt.n	80235b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802356a:	4563      	cmp	r3, ip
 802356c:	dd24      	ble.n	80235b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802356e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023572:	f11c 0c01 	adds.w	ip, ip, #1
 8023576:	d405      	bmi.n	8023584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023578:	4563      	cmp	r3, ip
 802357a:	dd03      	ble.n	8023584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802357c:	b115      	cbz	r5, 8023584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802357e:	3301      	adds	r3, #1
 8023580:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023584:	2d0f      	cmp	r5, #15
 8023586:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802358a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802358e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023592:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023596:	d801      	bhi.n	802359c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8023598:	2f0f      	cmp	r7, #15
 802359a:	d911      	bls.n	80235c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802359c:	4b77      	ldr	r3, [pc, #476]	; (802377c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802359e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80235a2:	4a77      	ldr	r2, [pc, #476]	; (8023780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 80235a4:	4877      	ldr	r0, [pc, #476]	; (8023784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 80235a6:	f003 f831 	bl	802660c <__assert_func>
 80235aa:	4602      	mov	r2, r0
 80235ac:	e7cd      	b.n	802354a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80235ae:	4606      	mov	r6, r0
 80235b0:	4602      	mov	r2, r0
 80235b2:	e7d2      	b.n	802355a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80235b4:	4606      	mov	r6, r0
 80235b6:	e7d0      	b.n	802355a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80235b8:	4604      	mov	r4, r0
 80235ba:	e7da      	b.n	8023572 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80235bc:	4604      	mov	r4, r0
 80235be:	e7e1      	b.n	8023584 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80235c0:	b2ab      	uxth	r3, r5
 80235c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80235c6:	b2bf      	uxth	r7, r7
 80235c8:	fb03 fe07 	mul.w	lr, r3, r7
 80235cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80235d0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80235d4:	eba3 0c0e 	sub.w	ip, r3, lr
 80235d8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80235dc:	b2bf      	uxth	r7, r7
 80235de:	fa1f fc8c 	uxth.w	ip, ip
 80235e2:	eba5 0507 	sub.w	r5, r5, r7
 80235e6:	fb0c f30a 	mul.w	r3, ip, sl
 80235ea:	b2ad      	uxth	r5, r5
 80235ec:	fb05 330b 	mla	r3, r5, fp, r3
 80235f0:	fb07 3309 	mla	r3, r7, r9, r3
 80235f4:	fb0e 3308 	mla	r3, lr, r8, r3
 80235f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80235fc:	9303      	str	r3, [sp, #12]
 80235fe:	d018      	beq.n	8023632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8023600:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023604:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023608:	fb0b f303 	mul.w	r3, fp, r3
 802360c:	fb0b fb02 	mul.w	fp, fp, r2
 8023610:	0a1a      	lsrs	r2, r3, #8
 8023612:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023616:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802361a:	441a      	add	r2, r3
 802361c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023620:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023624:	0a12      	lsrs	r2, r2, #8
 8023626:	0a1b      	lsrs	r3, r3, #8
 8023628:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802362c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023630:	431a      	orrs	r2, r3
 8023632:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023636:	d019      	beq.n	802366c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8023638:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802363c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023640:	fb0a fb0b 	mul.w	fp, sl, fp
 8023644:	fb0a fa06 	mul.w	sl, sl, r6
 8023648:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802364c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023650:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023654:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023658:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802365c:	445e      	add	r6, fp
 802365e:	0a1b      	lsrs	r3, r3, #8
 8023660:	0a36      	lsrs	r6, r6, #8
 8023662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023666:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802366a:	431e      	orrs	r6, r3
 802366c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023670:	d019      	beq.n	80236a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8023672:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023676:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802367a:	fb09 fa0a 	mul.w	sl, r9, sl
 802367e:	fb09 f904 	mul.w	r9, r9, r4
 8023682:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023686:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802368a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802368e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023692:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023696:	4454      	add	r4, sl
 8023698:	0a1b      	lsrs	r3, r3, #8
 802369a:	0a24      	lsrs	r4, r4, #8
 802369c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80236a0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80236a4:	431c      	orrs	r4, r3
 80236a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80236aa:	d019      	beq.n	80236e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80236ac:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80236b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80236b4:	fb08 f909 	mul.w	r9, r8, r9
 80236b8:	fb08 f800 	mul.w	r8, r8, r0
 80236bc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80236c0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80236c4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80236c8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80236cc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80236d0:	4448      	add	r0, r9
 80236d2:	0a1b      	lsrs	r3, r3, #8
 80236d4:	0a00      	lsrs	r0, r0, #8
 80236d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80236da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80236de:	4318      	orrs	r0, r3
 80236e0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80236e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80236e8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80236ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80236f0:	fb0c f808 	mul.w	r8, ip, r8
 80236f4:	fb0c f606 	mul.w	r6, ip, r6
 80236f8:	fb05 8803 	mla	r8, r5, r3, r8
 80236fc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023700:	fb05 6202 	mla	r2, r5, r2, r6
 8023704:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023708:	fb07 8803 	mla	r8, r7, r3, r8
 802370c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023710:	fb07 2704 	mla	r7, r7, r4, r2
 8023714:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023718:	fb0e 8303 	mla	r3, lr, r3, r8
 802371c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023720:	9802      	ldr	r0, [sp, #8]
 8023722:	0a1b      	lsrs	r3, r3, #8
 8023724:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023728:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802372c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023730:	ea43 0e0e 	orr.w	lr, r3, lr
 8023734:	9b03      	ldr	r3, [sp, #12]
 8023736:	43db      	mvns	r3, r3
 8023738:	b2db      	uxtb	r3, r3
 802373a:	4358      	muls	r0, r3
 802373c:	1c42      	adds	r2, r0, #1
 802373e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023742:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023746:	700a      	strb	r2, [r1, #0]
 8023748:	9a01      	ldr	r2, [sp, #4]
 802374a:	435a      	muls	r2, r3
 802374c:	1c50      	adds	r0, r2, #1
 802374e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023752:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023756:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802375a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802375e:	704a      	strb	r2, [r1, #1]
 8023760:	9a00      	ldr	r2, [sp, #0]
 8023762:	435a      	muls	r2, r3
 8023764:	4613      	mov	r3, r2
 8023766:	3201      	adds	r2, #1
 8023768:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802376c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023770:	f881 e002 	strb.w	lr, [r1, #2]
 8023774:	b005      	add	sp, #20
 8023776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802377a:	bf00      	nop
 802377c:	0802b0d7 	.word	0x0802b0d7
 8023780:	0802b5ce 	.word	0x0802b5ce
 8023784:	0802b1a0 	.word	0x0802b1a0

08023788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802378c:	ed2d 8b08 	vpush	{d8-d11}
 8023790:	b097      	sub	sp, #92	; 0x5c
 8023792:	eeb0 aa40 	vmov.f32	s20, s0
 8023796:	eef0 9a60 	vmov.f32	s19, s1
 802379a:	9306      	str	r3, [sp, #24]
 802379c:	eeb0 9a41 	vmov.f32	s18, s2
 80237a0:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80237a4:	eeb0 8a62 	vmov.f32	s16, s5
 80237a8:	9214      	str	r2, [sp, #80]	; 0x50
 80237aa:	eef0 8a43 	vmov.f32	s17, s6
 80237ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80237b0:	eef0 ba44 	vmov.f32	s23, s8
 80237b4:	9307      	str	r3, [sp, #28]
 80237b6:	eeb0 ba64 	vmov.f32	s22, s9
 80237ba:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80237be:	eef0 aa45 	vmov.f32	s21, s10
 80237c2:	9015      	str	r0, [sp, #84]	; 0x54
 80237c4:	9112      	str	r1, [sp, #72]	; 0x48
 80237c6:	6850      	ldr	r0, [r2, #4]
 80237c8:	9310      	str	r3, [sp, #64]	; 0x40
 80237ca:	6812      	ldr	r2, [r2, #0]
 80237cc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80237ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80237d2:	fb00 1303 	mla	r3, r0, r3, r1
 80237d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80237da:	18d3      	adds	r3, r2, r3
 80237dc:	930a      	str	r3, [sp, #40]	; 0x28
 80237de:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80237e0:	681b      	ldr	r3, [r3, #0]
 80237e2:	9311      	str	r3, [sp, #68]	; 0x44
 80237e4:	9b07      	ldr	r3, [sp, #28]
 80237e6:	009b      	lsls	r3, r3, #2
 80237e8:	930e      	str	r3, [sp, #56]	; 0x38
 80237ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	dc03      	bgt.n	80237f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80237f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80237f2:	2b00      	cmp	r3, #0
 80237f4:	f340 832e 	ble.w	8023e54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80237f8:	9b06      	ldr	r3, [sp, #24]
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	f340 8186 	ble.w	8023b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8023800:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023802:	1423      	asrs	r3, r4, #16
 8023804:	1412      	asrs	r2, r2, #16
 8023806:	d42f      	bmi.n	8023868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023808:	1c51      	adds	r1, r2, #1
 802380a:	9807      	ldr	r0, [sp, #28]
 802380c:	4288      	cmp	r0, r1
 802380e:	dd2e      	ble.n	802386e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023810:	2b00      	cmp	r3, #0
 8023812:	db2c      	blt.n	802386e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023814:	1c59      	adds	r1, r3, #1
 8023816:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023818:	4288      	cmp	r0, r1
 802381a:	dd28      	ble.n	802386e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802381c:	9b06      	ldr	r3, [sp, #24]
 802381e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023820:	3b01      	subs	r3, #1
 8023822:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023824:	fb02 1203 	mla	r2, r2, r3, r1
 8023828:	1412      	asrs	r2, r2, #16
 802382a:	d42b      	bmi.n	8023884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802382c:	3201      	adds	r2, #1
 802382e:	9907      	ldr	r1, [sp, #28]
 8023830:	4291      	cmp	r1, r2
 8023832:	dd27      	ble.n	8023884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023834:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023836:	fb02 4303 	mla	r3, r2, r3, r4
 802383a:	141b      	asrs	r3, r3, #16
 802383c:	d422      	bmi.n	8023884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802383e:	3301      	adds	r3, #1
 8023840:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023842:	429a      	cmp	r2, r3
 8023844:	dd1e      	ble.n	8023884 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023848:	f8dd b018 	ldr.w	fp, [sp, #24]
 802384c:	1cdd      	adds	r5, r3, #3
 802384e:	f1bb 0f00 	cmp.w	fp, #0
 8023852:	f300 81c4 	bgt.w	8023bde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8023856:	9b06      	ldr	r3, [sp, #24]
 8023858:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802385c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802385e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023862:	4423      	add	r3, r4
 8023864:	930a      	str	r3, [sp, #40]	; 0x28
 8023866:	e153      	b.n	8023b10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8023868:	1c51      	adds	r1, r2, #1
 802386a:	f040 8142 	bne.w	8023af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802386e:	9907      	ldr	r1, [sp, #28]
 8023870:	428a      	cmp	r2, r1
 8023872:	f280 813e 	bge.w	8023af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023876:	1c5a      	adds	r2, r3, #1
 8023878:	f2c0 813b 	blt.w	8023af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802387c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802387e:	4293      	cmp	r3, r2
 8023880:	f280 8137 	bge.w	8023af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023884:	9b06      	ldr	r3, [sp, #24]
 8023886:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023888:	9313      	str	r3, [sp, #76]	; 0x4c
 802388a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802388c:	2b00      	cmp	r3, #0
 802388e:	dde2      	ble.n	8023856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8023890:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023892:	1423      	asrs	r3, r4, #16
 8023894:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023896:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802389a:	1409      	asrs	r1, r1, #16
 802389c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80238a0:	f100 8187 	bmi.w	8023bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80238a4:	1c4e      	adds	r6, r1, #1
 80238a6:	9f07      	ldr	r7, [sp, #28]
 80238a8:	42b7      	cmp	r7, r6
 80238aa:	f340 8184 	ble.w	8023bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80238ae:	2b00      	cmp	r3, #0
 80238b0:	f2c0 8181 	blt.w	8023bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80238b4:	1c5e      	adds	r6, r3, #1
 80238b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80238b8:	42b7      	cmp	r7, r6
 80238ba:	f340 817c 	ble.w	8023bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80238be:	9e07      	ldr	r6, [sp, #28]
 80238c0:	fb03 1306 	mla	r3, r3, r6, r1
 80238c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80238c6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80238ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80238ce:	0e1f      	lsrs	r7, r3, #24
 80238d0:	2a00      	cmp	r2, #0
 80238d2:	f000 815c 	beq.w	8023b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80238d6:	6871      	ldr	r1, [r6, #4]
 80238d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80238da:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80238de:	2800      	cmp	r0, #0
 80238e0:	f000 815e 	beq.w	8023ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80238e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80238e6:	eb06 0c01 	add.w	ip, r6, r1
 80238ea:	5876      	ldr	r6, [r6, r1]
 80238ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80238f0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80238f4:	9608      	str	r6, [sp, #32]
 80238f6:	0e0e      	lsrs	r6, r1, #24
 80238f8:	910c      	str	r1, [sp, #48]	; 0x30
 80238fa:	b292      	uxth	r2, r2
 80238fc:	b280      	uxth	r0, r0
 80238fe:	fb02 fa00 	mul.w	sl, r2, r0
 8023902:	0112      	lsls	r2, r2, #4
 8023904:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023908:	eba2 080a 	sub.w	r8, r2, sl
 802390c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023910:	b280      	uxth	r0, r0
 8023912:	fa1f f888 	uxth.w	r8, r8
 8023916:	1a09      	subs	r1, r1, r0
 8023918:	fb08 f20e 	mul.w	r2, r8, lr
 802391c:	b289      	uxth	r1, r1
 802391e:	fb01 2207 	mla	r2, r1, r7, r2
 8023922:	fb00 2209 	mla	r2, r0, r9, r2
 8023926:	fb0a 2206 	mla	r2, sl, r6, r2
 802392a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802392e:	2a00      	cmp	r2, #0
 8023930:	f000 80d4 	beq.w	8023adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023934:	2fff      	cmp	r7, #255	; 0xff
 8023936:	d01a      	beq.n	802396e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8023938:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802393c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023940:	fb07 fc0c 	mul.w	ip, r7, ip
 8023944:	435f      	muls	r7, r3
 8023946:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802394a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802394e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8023952:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023956:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802395a:	4463      	add	r3, ip
 802395c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023960:	0a1b      	lsrs	r3, r3, #8
 8023962:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023966:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802396a:	ea43 030b 	orr.w	r3, r3, fp
 802396e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023972:	d01e      	beq.n	80239b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8023974:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023976:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802397a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802397e:	fb0e fb0b 	mul.w	fp, lr, fp
 8023982:	fb0e fe07 	mul.w	lr, lr, r7
 8023986:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802398a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802398e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023992:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023996:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802399a:	44dc      	add	ip, fp
 802399c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239a4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80239a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80239ac:	ea4c 070e 	orr.w	r7, ip, lr
 80239b0:	970b      	str	r7, [sp, #44]	; 0x2c
 80239b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80239b6:	d01e      	beq.n	80239f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80239b8:	9f08      	ldr	r7, [sp, #32]
 80239ba:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80239be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80239c2:	fb09 fe0e 	mul.w	lr, r9, lr
 80239c6:	fb09 f907 	mul.w	r9, r9, r7
 80239ca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80239ce:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80239d2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80239d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80239da:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80239de:	44f4      	add	ip, lr
 80239e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80239e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239e8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80239ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80239f0:	ea4c 0709 	orr.w	r7, ip, r9
 80239f4:	9708      	str	r7, [sp, #32]
 80239f6:	2eff      	cmp	r6, #255	; 0xff
 80239f8:	d01c      	beq.n	8023a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80239fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80239fc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023a00:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023a04:	fb06 fe0e 	mul.w	lr, r6, lr
 8023a08:	437e      	muls	r6, r7
 8023a0a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023a0e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023a12:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023a16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023a1a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023a1e:	44f4      	add	ip, lr
 8023a20:	0a36      	lsrs	r6, r6, #8
 8023a22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023a2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023a2e:	ea4c 0606 	orr.w	r6, ip, r6
 8023a32:	960c      	str	r6, [sp, #48]	; 0x30
 8023a34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8023a36:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023a3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023a3e:	2aff      	cmp	r2, #255	; 0xff
 8023a40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023a44:	fb08 f606 	mul.w	r6, r8, r6
 8023a48:	fb01 6607 	mla	r6, r1, r7, r6
 8023a4c:	9f08      	ldr	r7, [sp, #32]
 8023a4e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023a52:	fb00 6607 	mla	r6, r0, r7, r6
 8023a56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023a58:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023a5c:	fb0a 6607 	mla	r6, sl, r7, r6
 8023a60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023a62:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023a66:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8023a6a:	fb08 f807 	mul.w	r8, r8, r7
 8023a6e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023a72:	fb01 8303 	mla	r3, r1, r3, r8
 8023a76:	9908      	ldr	r1, [sp, #32]
 8023a78:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023a7e:	fb00 330c 	mla	r3, r0, ip, r3
 8023a82:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023a86:	fb0a 3a00 	mla	sl, sl, r0, r3
 8023a8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a92:	ea46 060a 	orr.w	r6, r6, sl
 8023a96:	b2f0      	uxtb	r0, r6
 8023a98:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8023a9c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8023aa0:	f000 8084 	beq.w	8023bac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023aa4:	43d2      	mvns	r2, r2
 8023aa6:	782b      	ldrb	r3, [r5, #0]
 8023aa8:	b2d2      	uxtb	r2, r2
 8023aaa:	fb03 f702 	mul.w	r7, r3, r2
 8023aae:	1c7b      	adds	r3, r7, #1
 8023ab0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023ab4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023ab8:	702b      	strb	r3, [r5, #0]
 8023aba:	786b      	ldrb	r3, [r5, #1]
 8023abc:	fb03 f002 	mul.w	r0, r3, r2
 8023ac0:	1c43      	adds	r3, r0, #1
 8023ac2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023ac6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023aca:	706b      	strb	r3, [r5, #1]
 8023acc:	78ab      	ldrb	r3, [r5, #2]
 8023ace:	4353      	muls	r3, r2
 8023ad0:	1c5a      	adds	r2, r3, #1
 8023ad2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023ad6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023ada:	70ae      	strb	r6, [r5, #2]
 8023adc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ade:	3503      	adds	r5, #3
 8023ae0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023ae2:	4413      	add	r3, r2
 8023ae4:	9329      	str	r3, [sp, #164]	; 0xa4
 8023ae6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ae8:	441c      	add	r4, r3
 8023aea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023aec:	3b01      	subs	r3, #1
 8023aee:	9313      	str	r3, [sp, #76]	; 0x4c
 8023af0:	e6cb      	b.n	802388a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023af2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023af4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023af6:	4413      	add	r3, r2
 8023af8:	9329      	str	r3, [sp, #164]	; 0xa4
 8023afa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023afc:	441c      	add	r4, r3
 8023afe:	9b06      	ldr	r3, [sp, #24]
 8023b00:	3b01      	subs	r3, #1
 8023b02:	9306      	str	r3, [sp, #24]
 8023b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b06:	3303      	adds	r3, #3
 8023b08:	930a      	str	r3, [sp, #40]	; 0x28
 8023b0a:	e675      	b.n	80237f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023b0c:	f47f ae86 	bne.w	802381c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	f340 819e 	ble.w	8023e54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8023b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023b22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023b26:	eef0 6a48 	vmov.f32	s13, s16
 8023b2a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023b2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023b32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b36:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023b3a:	eef0 6a68 	vmov.f32	s13, s17
 8023b3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b42:	ee16 4a90 	vmov	r4, s13
 8023b46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023b4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023b4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023b52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023b56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023b5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023b5e:	ee18 2a10 	vmov	r2, s16
 8023b62:	eeb0 8a47 	vmov.f32	s16, s14
 8023b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b6a:	ee18 2a90 	vmov	r2, s17
 8023b6e:	932b      	str	r3, [sp, #172]	; 0xac
 8023b70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b72:	eef0 8a67 	vmov.f32	s17, s15
 8023b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b7a:	932c      	str	r3, [sp, #176]	; 0xb0
 8023b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023b80:	3b01      	subs	r3, #1
 8023b82:	9312      	str	r3, [sp, #72]	; 0x48
 8023b84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b86:	bf08      	it	eq
 8023b88:	4613      	moveq	r3, r2
 8023b8a:	9306      	str	r3, [sp, #24]
 8023b8c:	e62d      	b.n	80237ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8023b8e:	b150      	cbz	r0, 8023ba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8023b90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023b92:	5871      	ldr	r1, [r6, r1]
 8023b94:	26ff      	movs	r6, #255	; 0xff
 8023b96:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023b9a:	9108      	str	r1, [sp, #32]
 8023b9c:	46b6      	mov	lr, r6
 8023b9e:	e6ac      	b.n	80238fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023ba0:	26ff      	movs	r6, #255	; 0xff
 8023ba2:	46b1      	mov	r9, r6
 8023ba4:	e6a9      	b.n	80238fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023ba6:	26ff      	movs	r6, #255	; 0xff
 8023ba8:	46b1      	mov	r9, r6
 8023baa:	e7f7      	b.n	8023b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8023bac:	7028      	strb	r0, [r5, #0]
 8023bae:	7069      	strb	r1, [r5, #1]
 8023bb0:	e793      	b.n	8023ada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8023bb2:	1c4f      	adds	r7, r1, #1
 8023bb4:	d192      	bne.n	8023adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023bb6:	9e07      	ldr	r6, [sp, #28]
 8023bb8:	428e      	cmp	r6, r1
 8023bba:	dd8f      	ble.n	8023adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023bbc:	1c5e      	adds	r6, r3, #1
 8023bbe:	db8d      	blt.n	8023adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023bc0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023bc2:	429e      	cmp	r6, r3
 8023bc4:	dd8a      	ble.n	8023adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023bc6:	9600      	str	r6, [sp, #0]
 8023bc8:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8023bcc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8023bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023bd2:	4629      	mov	r1, r5
 8023bd4:	9b07      	ldr	r3, [sp, #28]
 8023bd6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023bd8:	f7ff fc8e 	bl	80234f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023bdc:	e77e      	b.n	8023adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023bde:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023be0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023be4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023be6:	9e07      	ldr	r6, [sp, #28]
 8023be8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023bec:	1409      	asrs	r1, r1, #16
 8023bee:	1423      	asrs	r3, r4, #16
 8023bf0:	fb06 1303 	mla	r3, r6, r3, r1
 8023bf4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023bf6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023bfe:	0e1f      	lsrs	r7, r3, #24
 8023c00:	2a00      	cmp	r2, #0
 8023c02:	f000 8113 	beq.w	8023e2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8023c06:	6871      	ldr	r1, [r6, #4]
 8023c08:	910d      	str	r1, [sp, #52]	; 0x34
 8023c0a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023c0e:	2800      	cmp	r0, #0
 8023c10:	f000 8115 	beq.w	8023e3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8023c14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023c16:	eb06 0c01 	add.w	ip, r6, r1
 8023c1a:	5876      	ldr	r6, [r6, r1]
 8023c1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023c20:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023c24:	9609      	str	r6, [sp, #36]	; 0x24
 8023c26:	0e0e      	lsrs	r6, r1, #24
 8023c28:	910f      	str	r1, [sp, #60]	; 0x3c
 8023c2a:	b292      	uxth	r2, r2
 8023c2c:	b280      	uxth	r0, r0
 8023c2e:	fb02 fa00 	mul.w	sl, r2, r0
 8023c32:	0112      	lsls	r2, r2, #4
 8023c34:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023c38:	eba2 080a 	sub.w	r8, r2, sl
 8023c3c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023c40:	b280      	uxth	r0, r0
 8023c42:	fa1f f888 	uxth.w	r8, r8
 8023c46:	1a09      	subs	r1, r1, r0
 8023c48:	fb08 f20e 	mul.w	r2, r8, lr
 8023c4c:	b289      	uxth	r1, r1
 8023c4e:	fb01 2207 	mla	r2, r1, r7, r2
 8023c52:	fb00 2209 	mla	r2, r0, r9, r2
 8023c56:	fb0a 2206 	mla	r2, sl, r6, r2
 8023c5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023c5e:	2a00      	cmp	r2, #0
 8023c60:	f000 80da 	beq.w	8023e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8023c64:	2fff      	cmp	r7, #255	; 0xff
 8023c66:	d01a      	beq.n	8023c9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8023c68:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023c6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c70:	fb07 fc0c 	mul.w	ip, r7, ip
 8023c74:	435f      	muls	r7, r3
 8023c76:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023c7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023c7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c82:	4463      	add	r3, ip
 8023c84:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023c88:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023c8c:	0a1b      	lsrs	r3, r3, #8
 8023c8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c96:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c9a:	ea43 030c 	orr.w	r3, r3, ip
 8023c9e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023ca2:	d021      	beq.n	8023ce8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8023ca4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023ca6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023caa:	fb0e f707 	mul.w	r7, lr, r7
 8023cae:	9713      	str	r7, [sp, #76]	; 0x4c
 8023cb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023cb2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023cb6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8023cb8:	fb0e fe0c 	mul.w	lr, lr, ip
 8023cbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023cc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023cc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cc8:	44bc      	add	ip, r7
 8023cca:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023cce:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023cd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cde:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023ce2:	ea4c 070e 	orr.w	r7, ip, lr
 8023ce6:	970d      	str	r7, [sp, #52]	; 0x34
 8023ce8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023cec:	d01e      	beq.n	8023d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8023cee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023cf0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023cf4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023cf8:	fb09 fe0e 	mul.w	lr, r9, lr
 8023cfc:	fb09 f907 	mul.w	r9, r9, r7
 8023d00:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023d04:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023d08:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d10:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023d14:	44f4      	add	ip, lr
 8023d16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d1e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d26:	ea4c 0709 	orr.w	r7, ip, r9
 8023d2a:	9709      	str	r7, [sp, #36]	; 0x24
 8023d2c:	2eff      	cmp	r6, #255	; 0xff
 8023d2e:	d01c      	beq.n	8023d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8023d30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023d32:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023d36:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023d3a:	fb06 fe0e 	mul.w	lr, r6, lr
 8023d3e:	437e      	muls	r6, r7
 8023d40:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023d44:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023d48:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023d4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d50:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023d54:	44f4      	add	ip, lr
 8023d56:	0a36      	lsrs	r6, r6, #8
 8023d58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023d60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d64:	ea4c 0606 	orr.w	r6, ip, r6
 8023d68:	960f      	str	r6, [sp, #60]	; 0x3c
 8023d6a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023d6c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d74:	2aff      	cmp	r2, #255	; 0xff
 8023d76:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023d7a:	fb08 f606 	mul.w	r6, r8, r6
 8023d7e:	fb01 6607 	mla	r6, r1, r7, r6
 8023d82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023d84:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023d88:	fb00 6607 	mla	r6, r0, r7, r6
 8023d8c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023d8e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023d92:	fb0a 6607 	mla	r6, sl, r7, r6
 8023d96:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023d98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023d9c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8023da0:	fb08 f807 	mul.w	r8, r8, r7
 8023da4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023da8:	fb01 8303 	mla	r3, r1, r3, r8
 8023dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023dae:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023db4:	fb00 330c 	mla	r3, r0, ip, r3
 8023db8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023dbc:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8023dc0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023dc4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023dc8:	ea46 060e 	orr.w	r6, r6, lr
 8023dcc:	b2f0      	uxtb	r0, r6
 8023dce:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8023dd2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8023dd6:	d038      	beq.n	8023e4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8023dd8:	43d2      	mvns	r2, r2
 8023dda:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8023dde:	b2d2      	uxtb	r2, r2
 8023de0:	4357      	muls	r7, r2
 8023de2:	1c7b      	adds	r3, r7, #1
 8023de4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023de8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023dec:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8023df0:	4350      	muls	r0, r2
 8023df2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8023df6:	1c43      	adds	r3, r0, #1
 8023df8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023dfc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023e00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023e04:	4353      	muls	r3, r2
 8023e06:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023e0a:	1c5a      	adds	r2, r3, #1
 8023e0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023e10:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023e14:	f805 6c01 	strb.w	r6, [r5, #-1]
 8023e18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e1a:	3503      	adds	r5, #3
 8023e1c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023e1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023e22:	4413      	add	r3, r2
 8023e24:	9329      	str	r3, [sp, #164]	; 0xa4
 8023e26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e28:	441c      	add	r4, r3
 8023e2a:	e510      	b.n	802384e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8023e2c:	b150      	cbz	r0, 8023e44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8023e2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023e30:	5871      	ldr	r1, [r6, r1]
 8023e32:	26ff      	movs	r6, #255	; 0xff
 8023e34:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023e38:	9109      	str	r1, [sp, #36]	; 0x24
 8023e3a:	46b6      	mov	lr, r6
 8023e3c:	e6f5      	b.n	8023c2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023e3e:	26ff      	movs	r6, #255	; 0xff
 8023e40:	46b1      	mov	r9, r6
 8023e42:	e6f2      	b.n	8023c2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023e44:	26ff      	movs	r6, #255	; 0xff
 8023e46:	46b1      	mov	r9, r6
 8023e48:	e7f7      	b.n	8023e3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8023e4a:	f805 0c03 	strb.w	r0, [r5, #-3]
 8023e4e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023e52:	e7df      	b.n	8023e14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8023e54:	b017      	add	sp, #92	; 0x5c
 8023e56:	ecbd 8b08 	vpop	{d8-d11}
 8023e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023e60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e64:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023e68:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023e6c:	2800      	cmp	r0, #0
 8023e6e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023e72:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023e76:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023e7a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023e7e:	db6b      	blt.n	8023f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023e80:	4580      	cmp	r8, r0
 8023e82:	dd69      	ble.n	8023f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023e84:	f1bc 0f00 	cmp.w	ip, #0
 8023e88:	db66      	blt.n	8023f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023e8a:	45e1      	cmp	r9, ip
 8023e8c:	dd64      	ble.n	8023f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023e8e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023e92:	f01e 0f01 	tst.w	lr, #1
 8023e96:	5d16      	ldrb	r6, [r2, r4]
 8023e98:	bf0c      	ite	eq
 8023e9a:	f006 060f 	andeq.w	r6, r6, #15
 8023e9e:	1136      	asrne	r6, r6, #4
 8023ea0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023ea4:	b2f6      	uxtb	r6, r6
 8023ea6:	f110 0a01 	adds.w	sl, r0, #1
 8023eaa:	d457      	bmi.n	8023f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023eac:	45d0      	cmp	r8, sl
 8023eae:	dd55      	ble.n	8023f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023eb0:	f1bc 0f00 	cmp.w	ip, #0
 8023eb4:	db52      	blt.n	8023f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023eb6:	45e1      	cmp	r9, ip
 8023eb8:	dd50      	ble.n	8023f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023eba:	2f00      	cmp	r7, #0
 8023ebc:	f000 80ac 	beq.w	8024018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8023ec0:	f10e 0b01 	add.w	fp, lr, #1
 8023ec4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023ec8:	f01b 0f01 	tst.w	fp, #1
 8023ecc:	5d14      	ldrb	r4, [r2, r4]
 8023ece:	bf0c      	ite	eq
 8023ed0:	f004 040f 	andeq.w	r4, r4, #15
 8023ed4:	1124      	asrne	r4, r4, #4
 8023ed6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023eda:	b2e4      	uxtb	r4, r4
 8023edc:	2d00      	cmp	r5, #0
 8023ede:	f000 8096 	beq.w	802400e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023ee2:	2800      	cmp	r0, #0
 8023ee4:	f10c 0c01 	add.w	ip, ip, #1
 8023ee8:	db3c      	blt.n	8023f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023eea:	4580      	cmp	r8, r0
 8023eec:	dd3a      	ble.n	8023f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023eee:	f1bc 0f00 	cmp.w	ip, #0
 8023ef2:	db37      	blt.n	8023f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023ef4:	45e1      	cmp	r9, ip
 8023ef6:	dd35      	ble.n	8023f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023ef8:	eb03 0b0e 	add.w	fp, r3, lr
 8023efc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023f00:	f01b 0f01 	tst.w	fp, #1
 8023f04:	5c10      	ldrb	r0, [r2, r0]
 8023f06:	bf0c      	ite	eq
 8023f08:	f000 000f 	andeq.w	r0, r0, #15
 8023f0c:	1100      	asrne	r0, r0, #4
 8023f0e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023f12:	b2c0      	uxtb	r0, r0
 8023f14:	f1ba 0f00 	cmp.w	sl, #0
 8023f18:	db26      	blt.n	8023f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023f1a:	45d0      	cmp	r8, sl
 8023f1c:	dd24      	ble.n	8023f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023f1e:	f1bc 0f00 	cmp.w	ip, #0
 8023f22:	db21      	blt.n	8023f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023f24:	45e1      	cmp	r9, ip
 8023f26:	dd1f      	ble.n	8023f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023f28:	b307      	cbz	r7, 8023f6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8023f2a:	3301      	adds	r3, #1
 8023f2c:	449e      	add	lr, r3
 8023f2e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023f32:	f01e 0f01 	tst.w	lr, #1
 8023f36:	5cd3      	ldrb	r3, [r2, r3]
 8023f38:	bf0c      	ite	eq
 8023f3a:	f003 030f 	andeq.w	r3, r3, #15
 8023f3e:	111b      	asrne	r3, r3, #4
 8023f40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023f44:	b2db      	uxtb	r3, r3
 8023f46:	2f0f      	cmp	r7, #15
 8023f48:	d911      	bls.n	8023f6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8023f4a:	4b35      	ldr	r3, [pc, #212]	; (8024020 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8023f4c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023f50:	4a34      	ldr	r2, [pc, #208]	; (8024024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023f52:	4835      	ldr	r0, [pc, #212]	; (8024028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023f54:	f002 fb5a 	bl	802660c <__assert_func>
 8023f58:	2600      	movs	r6, #0
 8023f5a:	e7a4      	b.n	8023ea6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8023f5c:	2400      	movs	r4, #0
 8023f5e:	e7bd      	b.n	8023edc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023f60:	463c      	mov	r4, r7
 8023f62:	e7be      	b.n	8023ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023f64:	2000      	movs	r0, #0
 8023f66:	e7d5      	b.n	8023f14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023f68:	2300      	movs	r3, #0
 8023f6a:	e7ec      	b.n	8023f46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8023f6c:	463b      	mov	r3, r7
 8023f6e:	2d0f      	cmp	r5, #15
 8023f70:	d8eb      	bhi.n	8023f4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023f72:	b2bf      	uxth	r7, r7
 8023f74:	b2ad      	uxth	r5, r5
 8023f76:	fb07 f205 	mul.w	r2, r7, r5
 8023f7a:	013f      	lsls	r7, r7, #4
 8023f7c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023f80:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023f84:	1abf      	subs	r7, r7, r2
 8023f86:	b2ad      	uxth	r5, r5
 8023f88:	b2bf      	uxth	r7, r7
 8023f8a:	ebac 0c05 	sub.w	ip, ip, r5
 8023f8e:	437c      	muls	r4, r7
 8023f90:	fa1f fc8c 	uxth.w	ip, ip
 8023f94:	fb06 440c 	mla	r4, r6, ip, r4
 8023f98:	fb05 4400 	mla	r4, r5, r0, r4
 8023f9c:	fb02 4203 	mla	r2, r2, r3, r4
 8023fa0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023fa4:	b38a      	cbz	r2, 802400a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023fa6:	4b21      	ldr	r3, [pc, #132]	; (802402c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023fa8:	681c      	ldr	r4, [r3, #0]
 8023faa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8023fae:	b2e5      	uxtb	r5, r4
 8023fb0:	4353      	muls	r3, r2
 8023fb2:	1c5a      	adds	r2, r3, #1
 8023fb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023fb8:	1212      	asrs	r2, r2, #8
 8023fba:	b290      	uxth	r0, r2
 8023fbc:	43d2      	mvns	r2, r2
 8023fbe:	fb15 f500 	smulbb	r5, r5, r0
 8023fc2:	b2d3      	uxtb	r3, r2
 8023fc4:	780a      	ldrb	r2, [r1, #0]
 8023fc6:	fb02 5203 	mla	r2, r2, r3, r5
 8023fca:	b292      	uxth	r2, r2
 8023fcc:	1c55      	adds	r5, r2, #1
 8023fce:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023fd2:	784d      	ldrb	r5, [r1, #1]
 8023fd4:	fb15 f503 	smulbb	r5, r5, r3
 8023fd8:	1212      	asrs	r2, r2, #8
 8023fda:	700a      	strb	r2, [r1, #0]
 8023fdc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023fe0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023fe4:	fb02 5200 	mla	r2, r2, r0, r5
 8023fe8:	b292      	uxth	r2, r2
 8023fea:	1c55      	adds	r5, r2, #1
 8023fec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023ff0:	1212      	asrs	r2, r2, #8
 8023ff2:	704a      	strb	r2, [r1, #1]
 8023ff4:	788a      	ldrb	r2, [r1, #2]
 8023ff6:	fb12 f303 	smulbb	r3, r2, r3
 8023ffa:	fb04 3300 	mla	r3, r4, r0, r3
 8023ffe:	b29b      	uxth	r3, r3
 8024000:	1c5a      	adds	r2, r3, #1
 8024002:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024006:	121b      	asrs	r3, r3, #8
 8024008:	708b      	strb	r3, [r1, #2]
 802400a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802400e:	2f0f      	cmp	r7, #15
 8024010:	d89b      	bhi.n	8023f4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024012:	462b      	mov	r3, r5
 8024014:	4628      	mov	r0, r5
 8024016:	e7ac      	b.n	8023f72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024018:	2d00      	cmp	r5, #0
 802401a:	d1a1      	bne.n	8023f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802401c:	462c      	mov	r4, r5
 802401e:	e7f8      	b.n	8024012 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8024020:	0802b0d7 	.word	0x0802b0d7
 8024024:	0802b5ce 	.word	0x0802b5ce
 8024028:	0802b1a0 	.word	0x0802b1a0
 802402c:	2000c664 	.word	0x2000c664

08024030 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024034:	ed2d 8b08 	vpush	{d8-d11}
 8024038:	b097      	sub	sp, #92	; 0x5c
 802403a:	eeb0 aa40 	vmov.f32	s20, s0
 802403e:	eef0 9a60 	vmov.f32	s19, s1
 8024042:	9308      	str	r3, [sp, #32]
 8024044:	eeb0 9a41 	vmov.f32	s18, s2
 8024048:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802404c:	eeb0 8a62 	vmov.f32	s16, s5
 8024050:	9214      	str	r2, [sp, #80]	; 0x50
 8024052:	eef0 8a43 	vmov.f32	s17, s6
 8024056:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024058:	eef0 ba44 	vmov.f32	s23, s8
 802405c:	9309      	str	r3, [sp, #36]	; 0x24
 802405e:	eeb0 ba64 	vmov.f32	s22, s9
 8024062:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024066:	eef0 aa45 	vmov.f32	s21, s10
 802406a:	9015      	str	r0, [sp, #84]	; 0x54
 802406c:	910c      	str	r1, [sp, #48]	; 0x30
 802406e:	930e      	str	r3, [sp, #56]	; 0x38
 8024070:	6850      	ldr	r0, [r2, #4]
 8024072:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8024076:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802407a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802407e:	fb00 1803 	mla	r8, r0, r3, r1
 8024082:	6813      	ldr	r3, [r2, #0]
 8024084:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024088:	4498      	add	r8, r3
 802408a:	f10b 0301 	add.w	r3, fp, #1
 802408e:	f023 0301 	bic.w	r3, r3, #1
 8024092:	930f      	str	r3, [sp, #60]	; 0x3c
 8024094:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024096:	681f      	ldr	r7, [r3, #0]
 8024098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802409a:	2b00      	cmp	r3, #0
 802409c:	dc03      	bgt.n	80240a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802409e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	f340 8238 	ble.w	8024516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80240a6:	9b08      	ldr	r3, [sp, #32]
 80240a8:	2b00      	cmp	r3, #0
 80240aa:	f340 810c 	ble.w	80242c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80240ae:	142a      	asrs	r2, r5, #16
 80240b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80240b4:	d42c      	bmi.n	8024110 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80240b6:	1c51      	adds	r1, r2, #1
 80240b8:	458b      	cmp	fp, r1
 80240ba:	dd2c      	ble.n	8024116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80240bc:	2b00      	cmp	r3, #0
 80240be:	db2a      	blt.n	8024116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80240c0:	1c59      	adds	r1, r3, #1
 80240c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80240c4:	4288      	cmp	r0, r1
 80240c6:	dd26      	ble.n	8024116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80240c8:	9b08      	ldr	r3, [sp, #32]
 80240ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80240cc:	3b01      	subs	r3, #1
 80240ce:	fb02 5203 	mla	r2, r2, r3, r5
 80240d2:	1412      	asrs	r2, r2, #16
 80240d4:	d429      	bmi.n	802412a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80240d6:	3201      	adds	r2, #1
 80240d8:	4593      	cmp	fp, r2
 80240da:	dd26      	ble.n	802412a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80240dc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80240de:	fb02 6303 	mla	r3, r2, r3, r6
 80240e2:	141b      	asrs	r3, r3, #16
 80240e4:	d421      	bmi.n	802412a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80240e6:	3301      	adds	r3, #1
 80240e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240ea:	429a      	cmp	r2, r3
 80240ec:	dd1d      	ble.n	802412a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80240ee:	f108 0e03 	add.w	lr, r8, #3
 80240f2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80240f6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80240fa:	f1b9 0f00 	cmp.w	r9, #0
 80240fe:	f300 814f 	bgt.w	80243a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8024102:	9b08      	ldr	r3, [sp, #32]
 8024104:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024108:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802410c:	44a0      	add	r8, r4
 802410e:	e0dc      	b.n	80242ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8024110:	1c51      	adds	r1, r2, #1
 8024112:	f040 80ce 	bne.w	80242b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024116:	4593      	cmp	fp, r2
 8024118:	f340 80cb 	ble.w	80242b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802411c:	1c5a      	adds	r2, r3, #1
 802411e:	f2c0 80c8 	blt.w	80242b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024124:	4293      	cmp	r3, r2
 8024126:	f280 80c4 	bge.w	80242b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802412a:	9b08      	ldr	r3, [sp, #32]
 802412c:	46c1      	mov	r9, r8
 802412e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8024132:	930d      	str	r3, [sp, #52]	; 0x34
 8024134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024136:	2b00      	cmp	r3, #0
 8024138:	dde3      	ble.n	8024102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802413a:	1428      	asrs	r0, r5, #16
 802413c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024140:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024144:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024148:	f100 8111 	bmi.w	802436e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802414c:	f100 0c01 	add.w	ip, r0, #1
 8024150:	45e3      	cmp	fp, ip
 8024152:	f340 810e 	ble.w	8024372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024156:	2b00      	cmp	r3, #0
 8024158:	f2c0 810b 	blt.w	8024372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802415c:	f103 0c01 	add.w	ip, r3, #1
 8024160:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024162:	4564      	cmp	r4, ip
 8024164:	f340 8105 	ble.w	8024372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024168:	fb03 030a 	mla	r3, r3, sl, r0
 802416c:	0858      	lsrs	r0, r3, #1
 802416e:	07dc      	lsls	r4, r3, #31
 8024170:	5c38      	ldrb	r0, [r7, r0]
 8024172:	bf54      	ite	pl
 8024174:	f000 000f 	andpl.w	r0, r0, #15
 8024178:	1100      	asrmi	r0, r0, #4
 802417a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802417e:	b2c0      	uxtb	r0, r0
 8024180:	2a00      	cmp	r2, #0
 8024182:	f000 80e1 	beq.w	8024348 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8024186:	f103 0e01 	add.w	lr, r3, #1
 802418a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802418e:	f01e 0f01 	tst.w	lr, #1
 8024192:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024196:	bf0c      	ite	eq
 8024198:	f00c 0c0f 	andeq.w	ip, ip, #15
 802419c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80241a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80241a4:	fa5f f48c 	uxtb.w	r4, ip
 80241a8:	9410      	str	r4, [sp, #64]	; 0x40
 80241aa:	b1f9      	cbz	r1, 80241ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80241ac:	4453      	add	r3, sl
 80241ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80241b2:	07dc      	lsls	r4, r3, #31
 80241b4:	f103 0301 	add.w	r3, r3, #1
 80241b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80241bc:	bf54      	ite	pl
 80241be:	f00c 0c0f 	andpl.w	ip, ip, #15
 80241c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80241c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80241ca:	fa5f f48c 	uxtb.w	r4, ip
 80241ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80241d2:	940a      	str	r4, [sp, #40]	; 0x28
 80241d4:	07dc      	lsls	r4, r3, #31
 80241d6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80241da:	bf54      	ite	pl
 80241dc:	f00c 030f 	andpl.w	r3, ip, #15
 80241e0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80241e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80241e8:	b2db      	uxtb	r3, r3
 80241ea:	9311      	str	r3, [sp, #68]	; 0x44
 80241ec:	b292      	uxth	r2, r2
 80241ee:	b289      	uxth	r1, r1
 80241f0:	0113      	lsls	r3, r2, #4
 80241f2:	fb02 fc01 	mul.w	ip, r2, r1
 80241f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80241f8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80241fc:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8024200:	eba3 030c 	sub.w	r3, r3, ip
 8024204:	b289      	uxth	r1, r1
 8024206:	b29b      	uxth	r3, r3
 8024208:	ebae 0e01 	sub.w	lr, lr, r1
 802420c:	4353      	muls	r3, r2
 802420e:	fa1f fe8e 	uxth.w	lr, lr
 8024212:	fb00 320e 	mla	r2, r0, lr, r3
 8024216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024218:	fb01 2203 	mla	r2, r1, r3, r2
 802421c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802421e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024222:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024226:	2a00      	cmp	r2, #0
 8024228:	d039      	beq.n	802429e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802422a:	4bbd      	ldr	r3, [pc, #756]	; (8024520 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802422c:	6819      	ldr	r1, [r3, #0]
 802422e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024230:	fa5f fc81 	uxtb.w	ip, r1
 8024234:	435a      	muls	r2, r3
 8024236:	1c53      	adds	r3, r2, #1
 8024238:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802423c:	1212      	asrs	r2, r2, #8
 802423e:	b290      	uxth	r0, r2
 8024240:	43d2      	mvns	r2, r2
 8024242:	fb1c fc00 	smulbb	ip, ip, r0
 8024246:	b2d3      	uxtb	r3, r2
 8024248:	f899 2000 	ldrb.w	r2, [r9]
 802424c:	fb02 c203 	mla	r2, r2, r3, ip
 8024250:	b292      	uxth	r2, r2
 8024252:	f102 0c01 	add.w	ip, r2, #1
 8024256:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802425a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802425e:	fb1c fc03 	smulbb	ip, ip, r3
 8024262:	1212      	asrs	r2, r2, #8
 8024264:	f889 2000 	strb.w	r2, [r9]
 8024268:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802426c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8024270:	fb02 c200 	mla	r2, r2, r0, ip
 8024274:	b292      	uxth	r2, r2
 8024276:	f102 0c01 	add.w	ip, r2, #1
 802427a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802427e:	1212      	asrs	r2, r2, #8
 8024280:	f889 2001 	strb.w	r2, [r9, #1]
 8024284:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024288:	fb12 f303 	smulbb	r3, r2, r3
 802428c:	fb01 3300 	mla	r3, r1, r0, r3
 8024290:	b29b      	uxth	r3, r3
 8024292:	1c5a      	adds	r2, r3, #1
 8024294:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024298:	121b      	asrs	r3, r3, #8
 802429a:	f889 3002 	strb.w	r3, [r9, #2]
 802429e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80242a0:	f109 0903 	add.w	r9, r9, #3
 80242a4:	441d      	add	r5, r3
 80242a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80242a8:	441e      	add	r6, r3
 80242aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80242ac:	3b01      	subs	r3, #1
 80242ae:	930d      	str	r3, [sp, #52]	; 0x34
 80242b0:	e740      	b.n	8024134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80242b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80242b4:	f108 0803 	add.w	r8, r8, #3
 80242b8:	441d      	add	r5, r3
 80242ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80242bc:	441e      	add	r6, r3
 80242be:	9b08      	ldr	r3, [sp, #32]
 80242c0:	3b01      	subs	r3, #1
 80242c2:	9308      	str	r3, [sp, #32]
 80242c4:	e6ef      	b.n	80240a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80242c6:	f47f aeff 	bne.w	80240c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80242ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80242cc:	2b00      	cmp	r3, #0
 80242ce:	f340 8122 	ble.w	8024516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80242d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80242d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80242d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80242dc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80242e0:	eef0 6a48 	vmov.f32	s13, s16
 80242e4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80242e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80242ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242f0:	ee16 5a90 	vmov	r5, s13
 80242f4:	eef0 6a68 	vmov.f32	s13, s17
 80242f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242fc:	ee16 6a90 	vmov	r6, s13
 8024300:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024304:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024308:	ee37 8a48 	vsub.f32	s16, s14, s16
 802430c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024310:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024314:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024318:	ee18 2a10 	vmov	r2, s16
 802431c:	eeb0 8a47 	vmov.f32	s16, s14
 8024320:	fb92 f3f3 	sdiv	r3, r2, r3
 8024324:	ee18 2a90 	vmov	r2, s17
 8024328:	932b      	str	r3, [sp, #172]	; 0xac
 802432a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802432c:	eef0 8a67 	vmov.f32	s17, s15
 8024330:	fb92 f3f3 	sdiv	r3, r2, r3
 8024334:	932c      	str	r3, [sp, #176]	; 0xb0
 8024336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802433a:	3b01      	subs	r3, #1
 802433c:	930c      	str	r3, [sp, #48]	; 0x30
 802433e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024340:	bf08      	it	eq
 8024342:	4613      	moveq	r3, r2
 8024344:	9308      	str	r3, [sp, #32]
 8024346:	e6a7      	b.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024348:	2900      	cmp	r1, #0
 802434a:	f43f af4f 	beq.w	80241ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802434e:	4453      	add	r3, sl
 8024350:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024354:	07db      	lsls	r3, r3, #31
 8024356:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802435a:	bf54      	ite	pl
 802435c:	f00c 030f 	andpl.w	r3, ip, #15
 8024360:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024364:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024368:	b2db      	uxtb	r3, r3
 802436a:	930a      	str	r3, [sp, #40]	; 0x28
 802436c:	e73e      	b.n	80241ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802436e:	1c44      	adds	r4, r0, #1
 8024370:	d195      	bne.n	802429e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024372:	4583      	cmp	fp, r0
 8024374:	dd93      	ble.n	802429e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024376:	1c5c      	adds	r4, r3, #1
 8024378:	db91      	blt.n	802429e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802437a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802437c:	429c      	cmp	r4, r3
 802437e:	dd8e      	ble.n	802429e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024380:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024382:	9002      	str	r0, [sp, #8]
 8024384:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024386:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802438a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802438c:	463a      	mov	r2, r7
 802438e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024392:	e9cd b300 	strd	fp, r3, [sp]
 8024396:	4649      	mov	r1, r9
 8024398:	4653      	mov	r3, sl
 802439a:	f7ff fd61 	bl	8023e60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802439e:	e77e      	b.n	802429e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80243a0:	142a      	asrs	r2, r5, #16
 80243a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80243a6:	1433      	asrs	r3, r6, #16
 80243a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80243ac:	fb0a 2303 	mla	r3, sl, r3, r2
 80243b0:	085a      	lsrs	r2, r3, #1
 80243b2:	07dc      	lsls	r4, r3, #31
 80243b4:	5cba      	ldrb	r2, [r7, r2]
 80243b6:	bf54      	ite	pl
 80243b8:	f002 020f 	andpl.w	r2, r2, #15
 80243bc:	1112      	asrmi	r2, r2, #4
 80243be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80243c2:	b2d2      	uxtb	r2, r2
 80243c4:	2900      	cmp	r1, #0
 80243c6:	f000 8093 	beq.w	80244f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80243ca:	1c5c      	adds	r4, r3, #1
 80243cc:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80243d0:	07e4      	lsls	r4, r4, #31
 80243d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243d6:	bf54      	ite	pl
 80243d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80243dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80243e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80243e4:	fa5f f48c 	uxtb.w	r4, ip
 80243e8:	9412      	str	r4, [sp, #72]	; 0x48
 80243ea:	b300      	cbz	r0, 802442e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80243ec:	4453      	add	r3, sl
 80243ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243f2:	07dc      	lsls	r4, r3, #31
 80243f4:	f103 0301 	add.w	r3, r3, #1
 80243f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243fc:	bf54      	ite	pl
 80243fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024402:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024406:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802440a:	fa5f f48c 	uxtb.w	r4, ip
 802440e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024412:	940b      	str	r4, [sp, #44]	; 0x2c
 8024414:	07dc      	lsls	r4, r3, #31
 8024416:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802441a:	bf54      	ite	pl
 802441c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024420:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024424:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024428:	fa5f f38c 	uxtb.w	r3, ip
 802442c:	9313      	str	r3, [sp, #76]	; 0x4c
 802442e:	b289      	uxth	r1, r1
 8024430:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024432:	b280      	uxth	r0, r0
 8024434:	fb01 f300 	mul.w	r3, r1, r0
 8024438:	0109      	lsls	r1, r1, #4
 802443a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802443e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024442:	1ac9      	subs	r1, r1, r3
 8024444:	b280      	uxth	r0, r0
 8024446:	b289      	uxth	r1, r1
 8024448:	ebac 0c00 	sub.w	ip, ip, r0
 802444c:	4361      	muls	r1, r4
 802444e:	fa1f fc8c 	uxth.w	ip, ip
 8024452:	fb02 120c 	mla	r2, r2, ip, r1
 8024456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024458:	fb00 2001 	mla	r0, r0, r1, r2
 802445c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802445e:	fb03 0302 	mla	r3, r3, r2, r0
 8024462:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024466:	2b00      	cmp	r3, #0
 8024468:	d039      	beq.n	80244de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802446a:	4a2d      	ldr	r2, [pc, #180]	; (8024520 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802446c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024470:	6810      	ldr	r0, [r2, #0]
 8024472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024474:	fa5f fc80 	uxtb.w	ip, r0
 8024478:	4353      	muls	r3, r2
 802447a:	1c5a      	adds	r2, r3, #1
 802447c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024480:	121b      	asrs	r3, r3, #8
 8024482:	b29a      	uxth	r2, r3
 8024484:	43db      	mvns	r3, r3
 8024486:	fb1c fc02 	smulbb	ip, ip, r2
 802448a:	b2db      	uxtb	r3, r3
 802448c:	fb01 c103 	mla	r1, r1, r3, ip
 8024490:	b289      	uxth	r1, r1
 8024492:	f101 0c01 	add.w	ip, r1, #1
 8024496:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802449a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802449e:	fb1c fc03 	smulbb	ip, ip, r3
 80244a2:	1209      	asrs	r1, r1, #8
 80244a4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80244a8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80244ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80244b0:	fb01 c102 	mla	r1, r1, r2, ip
 80244b4:	b289      	uxth	r1, r1
 80244b6:	f101 0c01 	add.w	ip, r1, #1
 80244ba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80244be:	1209      	asrs	r1, r1, #8
 80244c0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80244c4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80244c8:	fb11 f303 	smulbb	r3, r1, r3
 80244cc:	fb00 3002 	mla	r0, r0, r2, r3
 80244d0:	b280      	uxth	r0, r0
 80244d2:	1c42      	adds	r2, r0, #1
 80244d4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80244d8:	1200      	asrs	r0, r0, #8
 80244da:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80244de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80244e0:	f10e 0e03 	add.w	lr, lr, #3
 80244e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80244e8:	441d      	add	r5, r3
 80244ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244ec:	441e      	add	r6, r3
 80244ee:	e604      	b.n	80240fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80244f0:	2800      	cmp	r0, #0
 80244f2:	d09c      	beq.n	802442e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80244f4:	4453      	add	r3, sl
 80244f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80244fa:	07db      	lsls	r3, r3, #31
 80244fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024500:	bf54      	ite	pl
 8024502:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024506:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802450a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802450e:	fa5f f38c 	uxtb.w	r3, ip
 8024512:	930b      	str	r3, [sp, #44]	; 0x2c
 8024514:	e78b      	b.n	802442e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024516:	b017      	add	sp, #92	; 0x5c
 8024518:	ecbd 8b08 	vpop	{d8-d11}
 802451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024520:	2000c664 	.word	0x2000c664

08024524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024528:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802452c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024530:	2800      	cmp	r0, #0
 8024532:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024536:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802453a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802453e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024542:	db6b      	blt.n	802461c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024544:	4580      	cmp	r8, r0
 8024546:	dd69      	ble.n	802461c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024548:	f1bc 0f00 	cmp.w	ip, #0
 802454c:	db66      	blt.n	802461c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802454e:	45e1      	cmp	r9, ip
 8024550:	dd64      	ble.n	802461c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024552:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024556:	f01e 0f01 	tst.w	lr, #1
 802455a:	5d16      	ldrb	r6, [r2, r4]
 802455c:	bf0c      	ite	eq
 802455e:	f006 060f 	andeq.w	r6, r6, #15
 8024562:	1136      	asrne	r6, r6, #4
 8024564:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024568:	b2f6      	uxtb	r6, r6
 802456a:	f110 0a01 	adds.w	sl, r0, #1
 802456e:	d457      	bmi.n	8024620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024570:	45d0      	cmp	r8, sl
 8024572:	dd55      	ble.n	8024620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024574:	f1bc 0f00 	cmp.w	ip, #0
 8024578:	db52      	blt.n	8024620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802457a:	45e1      	cmp	r9, ip
 802457c:	dd50      	ble.n	8024620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802457e:	2f00      	cmp	r7, #0
 8024580:	f000 80a5 	beq.w	80246ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8024584:	f10e 0b01 	add.w	fp, lr, #1
 8024588:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802458c:	f01b 0f01 	tst.w	fp, #1
 8024590:	5d14      	ldrb	r4, [r2, r4]
 8024592:	bf0c      	ite	eq
 8024594:	f004 040f 	andeq.w	r4, r4, #15
 8024598:	1124      	asrne	r4, r4, #4
 802459a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802459e:	b2e4      	uxtb	r4, r4
 80245a0:	2d00      	cmp	r5, #0
 80245a2:	f000 808f 	beq.w	80246c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80245a6:	2800      	cmp	r0, #0
 80245a8:	f10c 0c01 	add.w	ip, ip, #1
 80245ac:	db3c      	blt.n	8024628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80245ae:	4580      	cmp	r8, r0
 80245b0:	dd3a      	ble.n	8024628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80245b2:	f1bc 0f00 	cmp.w	ip, #0
 80245b6:	db37      	blt.n	8024628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80245b8:	45e1      	cmp	r9, ip
 80245ba:	dd35      	ble.n	8024628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80245bc:	eb03 0b0e 	add.w	fp, r3, lr
 80245c0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80245c4:	f01b 0f01 	tst.w	fp, #1
 80245c8:	5c10      	ldrb	r0, [r2, r0]
 80245ca:	bf0c      	ite	eq
 80245cc:	f000 000f 	andeq.w	r0, r0, #15
 80245d0:	1100      	asrne	r0, r0, #4
 80245d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80245d6:	b2c0      	uxtb	r0, r0
 80245d8:	f1ba 0f00 	cmp.w	sl, #0
 80245dc:	db26      	blt.n	802462c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80245de:	45d0      	cmp	r8, sl
 80245e0:	dd24      	ble.n	802462c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80245e2:	f1bc 0f00 	cmp.w	ip, #0
 80245e6:	db21      	blt.n	802462c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80245e8:	45e1      	cmp	r9, ip
 80245ea:	dd1f      	ble.n	802462c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80245ec:	b307      	cbz	r7, 8024630 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80245ee:	3301      	adds	r3, #1
 80245f0:	449e      	add	lr, r3
 80245f2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80245f6:	f01e 0f01 	tst.w	lr, #1
 80245fa:	5cd3      	ldrb	r3, [r2, r3]
 80245fc:	bf0c      	ite	eq
 80245fe:	f003 030f 	andeq.w	r3, r3, #15
 8024602:	111b      	asrne	r3, r3, #4
 8024604:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024608:	b2db      	uxtb	r3, r3
 802460a:	2f0f      	cmp	r7, #15
 802460c:	d911      	bls.n	8024632 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802460e:	4b32      	ldr	r3, [pc, #200]	; (80246d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024610:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024614:	4a31      	ldr	r2, [pc, #196]	; (80246dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8024616:	4832      	ldr	r0, [pc, #200]	; (80246e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8024618:	f001 fff8 	bl	802660c <__assert_func>
 802461c:	2600      	movs	r6, #0
 802461e:	e7a4      	b.n	802456a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024620:	2400      	movs	r4, #0
 8024622:	e7bd      	b.n	80245a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024624:	463c      	mov	r4, r7
 8024626:	e7be      	b.n	80245a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8024628:	2000      	movs	r0, #0
 802462a:	e7d5      	b.n	80245d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802462c:	2300      	movs	r3, #0
 802462e:	e7ec      	b.n	802460a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024630:	463b      	mov	r3, r7
 8024632:	2d0f      	cmp	r5, #15
 8024634:	d8eb      	bhi.n	802460e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024636:	b2bf      	uxth	r7, r7
 8024638:	b2ad      	uxth	r5, r5
 802463a:	fb07 f205 	mul.w	r2, r7, r5
 802463e:	013f      	lsls	r7, r7, #4
 8024640:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024644:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024648:	1abf      	subs	r7, r7, r2
 802464a:	b2ad      	uxth	r5, r5
 802464c:	b2bf      	uxth	r7, r7
 802464e:	ebac 0c05 	sub.w	ip, ip, r5
 8024652:	437c      	muls	r4, r7
 8024654:	fa1f fc8c 	uxth.w	ip, ip
 8024658:	fb06 440c 	mla	r4, r6, ip, r4
 802465c:	fb05 4400 	mla	r4, r5, r0, r4
 8024660:	fb02 4303 	mla	r3, r2, r3, r4
 8024664:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024668:	b353      	cbz	r3, 80246c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802466a:	4a1e      	ldr	r2, [pc, #120]	; (80246e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802466c:	7808      	ldrb	r0, [r1, #0]
 802466e:	6814      	ldr	r4, [r2, #0]
 8024670:	b29a      	uxth	r2, r3
 8024672:	43db      	mvns	r3, r3
 8024674:	b2e5      	uxtb	r5, r4
 8024676:	b2db      	uxtb	r3, r3
 8024678:	fb15 f502 	smulbb	r5, r5, r2
 802467c:	fb00 5003 	mla	r0, r0, r3, r5
 8024680:	b280      	uxth	r0, r0
 8024682:	1c45      	adds	r5, r0, #1
 8024684:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024688:	784d      	ldrb	r5, [r1, #1]
 802468a:	fb15 f503 	smulbb	r5, r5, r3
 802468e:	1200      	asrs	r0, r0, #8
 8024690:	7008      	strb	r0, [r1, #0]
 8024692:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024696:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802469a:	fb00 5002 	mla	r0, r0, r2, r5
 802469e:	b280      	uxth	r0, r0
 80246a0:	1c45      	adds	r5, r0, #1
 80246a2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80246a6:	1200      	asrs	r0, r0, #8
 80246a8:	7048      	strb	r0, [r1, #1]
 80246aa:	7888      	ldrb	r0, [r1, #2]
 80246ac:	fb10 f303 	smulbb	r3, r0, r3
 80246b0:	fb04 3202 	mla	r2, r4, r2, r3
 80246b4:	b292      	uxth	r2, r2
 80246b6:	1c53      	adds	r3, r2, #1
 80246b8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80246bc:	1212      	asrs	r2, r2, #8
 80246be:	708a      	strb	r2, [r1, #2]
 80246c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246c4:	2f0f      	cmp	r7, #15
 80246c6:	d8a2      	bhi.n	802460e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80246c8:	462b      	mov	r3, r5
 80246ca:	4628      	mov	r0, r5
 80246cc:	e7b3      	b.n	8024636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80246ce:	2d00      	cmp	r5, #0
 80246d0:	d1a8      	bne.n	8024624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80246d2:	462c      	mov	r4, r5
 80246d4:	e7f8      	b.n	80246c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80246d6:	bf00      	nop
 80246d8:	0802b0d7 	.word	0x0802b0d7
 80246dc:	0802b5ce 	.word	0x0802b5ce
 80246e0:	0802b1a0 	.word	0x0802b1a0
 80246e4:	2000c664 	.word	0x2000c664

080246e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80246e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246ec:	ed2d 8b08 	vpush	{d8-d11}
 80246f0:	b095      	sub	sp, #84	; 0x54
 80246f2:	461c      	mov	r4, r3
 80246f4:	eeb0 aa40 	vmov.f32	s20, s0
 80246f8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80246fc:	eef0 9a60 	vmov.f32	s19, s1
 8024700:	920e      	str	r2, [sp, #56]	; 0x38
 8024702:	eeb0 9a41 	vmov.f32	s18, s2
 8024706:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024708:	eeb0 8a62 	vmov.f32	s16, s5
 802470c:	9307      	str	r3, [sp, #28]
 802470e:	eef0 8a43 	vmov.f32	s17, s6
 8024712:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024716:	eef0 ba44 	vmov.f32	s23, s8
 802471a:	9013      	str	r0, [sp, #76]	; 0x4c
 802471c:	eeb0 ba64 	vmov.f32	s22, s9
 8024720:	9109      	str	r1, [sp, #36]	; 0x24
 8024722:	eef0 aa45 	vmov.f32	s21, s10
 8024726:	9308      	str	r3, [sp, #32]
 8024728:	6850      	ldr	r0, [r2, #4]
 802472a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802472e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8024732:	fb00 1803 	mla	r8, r0, r3, r1
 8024736:	6813      	ldr	r3, [r2, #0]
 8024738:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802473c:	4498      	add	r8, r3
 802473e:	9b07      	ldr	r3, [sp, #28]
 8024740:	3301      	adds	r3, #1
 8024742:	f023 0301 	bic.w	r3, r3, #1
 8024746:	930b      	str	r3, [sp, #44]	; 0x2c
 8024748:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802474a:	681f      	ldr	r7, [r3, #0]
 802474c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802474e:	2b00      	cmp	r3, #0
 8024750:	dc03      	bgt.n	802475a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024754:	2b00      	cmp	r3, #0
 8024756:	f340 8238 	ble.w	8024bca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802475a:	2c00      	cmp	r4, #0
 802475c:	f340 8109 	ble.w	8024972 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8024760:	142a      	asrs	r2, r5, #16
 8024762:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024766:	d42b      	bmi.n	80247c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8024768:	1c51      	adds	r1, r2, #1
 802476a:	9807      	ldr	r0, [sp, #28]
 802476c:	4288      	cmp	r0, r1
 802476e:	dd2a      	ble.n	80247c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024770:	2b00      	cmp	r3, #0
 8024772:	db28      	blt.n	80247c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024774:	1c59      	adds	r1, r3, #1
 8024776:	9808      	ldr	r0, [sp, #32]
 8024778:	4288      	cmp	r0, r1
 802477a:	dd24      	ble.n	80247c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802477c:	1e63      	subs	r3, r4, #1
 802477e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024780:	fb02 5203 	mla	r2, r2, r3, r5
 8024784:	1412      	asrs	r2, r2, #16
 8024786:	d429      	bmi.n	80247dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024788:	3201      	adds	r2, #1
 802478a:	9907      	ldr	r1, [sp, #28]
 802478c:	4291      	cmp	r1, r2
 802478e:	dd25      	ble.n	80247dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024790:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024792:	fb02 6303 	mla	r3, r2, r3, r6
 8024796:	141b      	asrs	r3, r3, #16
 8024798:	d420      	bmi.n	80247dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802479a:	3301      	adds	r3, #1
 802479c:	9a08      	ldr	r2, [sp, #32]
 802479e:	429a      	cmp	r2, r3
 80247a0:	dd1c      	ble.n	80247dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80247a2:	f108 0e03 	add.w	lr, r8, #3
 80247a6:	46a1      	mov	r9, r4
 80247a8:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80247ac:	f1b9 0f00 	cmp.w	r9, #0
 80247b0:	f300 8155 	bgt.w	8024a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80247b4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80247b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80247bc:	44a0      	add	r8, r4
 80247be:	e0da      	b.n	8024976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80247c0:	1c50      	adds	r0, r2, #1
 80247c2:	f040 80ce 	bne.w	8024962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80247c6:	9907      	ldr	r1, [sp, #28]
 80247c8:	4291      	cmp	r1, r2
 80247ca:	f340 80ca 	ble.w	8024962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80247ce:	1c59      	adds	r1, r3, #1
 80247d0:	f2c0 80c7 	blt.w	8024962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80247d4:	9a08      	ldr	r2, [sp, #32]
 80247d6:	4293      	cmp	r3, r2
 80247d8:	f280 80c3 	bge.w	8024962 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80247dc:	46a3      	mov	fp, r4
 80247de:	46c1      	mov	r9, r8
 80247e0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80247e4:	f1bb 0f00 	cmp.w	fp, #0
 80247e8:	dde4      	ble.n	80247b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80247ea:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80247ee:	1428      	asrs	r0, r5, #16
 80247f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80247f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80247f8:	920a      	str	r2, [sp, #40]	; 0x28
 80247fa:	f100 8116 	bmi.w	8024a2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80247fe:	f100 0c01 	add.w	ip, r0, #1
 8024802:	9a07      	ldr	r2, [sp, #28]
 8024804:	4562      	cmp	r2, ip
 8024806:	f340 8112 	ble.w	8024a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802480a:	2b00      	cmp	r3, #0
 802480c:	f2c0 810f 	blt.w	8024a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024810:	f103 0c01 	add.w	ip, r3, #1
 8024814:	9a08      	ldr	r2, [sp, #32]
 8024816:	4562      	cmp	r2, ip
 8024818:	f340 8109 	ble.w	8024a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802481c:	fb03 030a 	mla	r3, r3, sl, r0
 8024820:	0858      	lsrs	r0, r3, #1
 8024822:	07da      	lsls	r2, r3, #31
 8024824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024826:	5c38      	ldrb	r0, [r7, r0]
 8024828:	bf54      	ite	pl
 802482a:	f000 000f 	andpl.w	r0, r0, #15
 802482e:	1100      	asrmi	r0, r0, #4
 8024830:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024834:	b2c0      	uxtb	r0, r0
 8024836:	2a00      	cmp	r2, #0
 8024838:	f000 80dd 	beq.w	80249f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 802483c:	f103 0e01 	add.w	lr, r3, #1
 8024840:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024844:	f01e 0f01 	tst.w	lr, #1
 8024848:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802484c:	bf0c      	ite	eq
 802484e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024852:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024856:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802485a:	fa5f fc8c 	uxtb.w	ip, ip
 802485e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8024862:	b301      	cbz	r1, 80248a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024864:	4453      	add	r3, sl
 8024866:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802486a:	07da      	lsls	r2, r3, #31
 802486c:	f103 0301 	add.w	r3, r3, #1
 8024870:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024874:	bf54      	ite	pl
 8024876:	f00c 0c0f 	andpl.w	ip, ip, #15
 802487a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802487e:	07da      	lsls	r2, r3, #31
 8024880:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024884:	fa5f fc8c 	uxtb.w	ip, ip
 8024888:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802488c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024890:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024894:	bf54      	ite	pl
 8024896:	f00c 030f 	andpl.w	r3, ip, #15
 802489a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802489e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80248a2:	b2db      	uxtb	r3, r3
 80248a4:	9310      	str	r3, [sp, #64]	; 0x40
 80248a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80248aa:	b289      	uxth	r1, r1
 80248ac:	fb02 f301 	mul.w	r3, r2, r1
 80248b0:	0112      	lsls	r2, r2, #4
 80248b2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80248b6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80248ba:	1ad2      	subs	r2, r2, r3
 80248bc:	fa1f fe81 	uxth.w	lr, r1
 80248c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80248c2:	b292      	uxth	r2, r2
 80248c4:	ebac 0c0e 	sub.w	ip, ip, lr
 80248c8:	434a      	muls	r2, r1
 80248ca:	fa1f fc8c 	uxth.w	ip, ip
 80248ce:	fb00 200c 	mla	r0, r0, ip, r2
 80248d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80248d4:	fb0e 0002 	mla	r0, lr, r2, r0
 80248d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80248da:	fb03 0002 	mla	r0, r3, r2, r0
 80248de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80248e2:	b3a8      	cbz	r0, 8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80248e4:	4bbb      	ldr	r3, [pc, #748]	; (8024bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80248e6:	28ff      	cmp	r0, #255	; 0xff
 80248e8:	681b      	ldr	r3, [r3, #0]
 80248ea:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80248ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80248f2:	b2db      	uxtb	r3, r3
 80248f4:	f000 8092 	beq.w	8024a1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80248f8:	b282      	uxth	r2, r0
 80248fa:	43c0      	mvns	r0, r0
 80248fc:	f899 e000 	ldrb.w	lr, [r9]
 8024900:	fb13 f302 	smulbb	r3, r3, r2
 8024904:	b2c0      	uxtb	r0, r0
 8024906:	fb11 f102 	smulbb	r1, r1, r2
 802490a:	fb0e 3300 	mla	r3, lr, r0, r3
 802490e:	fb1c f202 	smulbb	r2, ip, r2
 8024912:	b29b      	uxth	r3, r3
 8024914:	f103 0e01 	add.w	lr, r3, #1
 8024918:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802491c:	121b      	asrs	r3, r3, #8
 802491e:	f889 3000 	strb.w	r3, [r9]
 8024922:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024926:	fb03 1100 	mla	r1, r3, r0, r1
 802492a:	b289      	uxth	r1, r1
 802492c:	1c4b      	adds	r3, r1, #1
 802492e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024932:	f899 3002 	ldrb.w	r3, [r9, #2]
 8024936:	fb03 2000 	mla	r0, r3, r0, r2
 802493a:	1209      	asrs	r1, r1, #8
 802493c:	b280      	uxth	r0, r0
 802493e:	f889 1001 	strb.w	r1, [r9, #1]
 8024942:	f100 0c01 	add.w	ip, r0, #1
 8024946:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802494a:	1200      	asrs	r0, r0, #8
 802494c:	f889 0002 	strb.w	r0, [r9, #2]
 8024950:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024952:	f109 0903 	add.w	r9, r9, #3
 8024956:	f10b 3bff 	add.w	fp, fp, #4294967295
 802495a:	441d      	add	r5, r3
 802495c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802495e:	441e      	add	r6, r3
 8024960:	e740      	b.n	80247e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024962:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024964:	3c01      	subs	r4, #1
 8024966:	f108 0803 	add.w	r8, r8, #3
 802496a:	441d      	add	r5, r3
 802496c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802496e:	441e      	add	r6, r3
 8024970:	e6f3      	b.n	802475a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024972:	f47f af03 	bne.w	802477c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8024976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024978:	2b00      	cmp	r3, #0
 802497a:	f340 8126 	ble.w	8024bca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802497e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024984:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024988:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802498c:	eef0 6a48 	vmov.f32	s13, s16
 8024990:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024994:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024998:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802499c:	ee16 5a90 	vmov	r5, s13
 80249a0:	eef0 6a68 	vmov.f32	s13, s17
 80249a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249a8:	ee16 6a90 	vmov	r6, s13
 80249ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80249b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80249b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80249b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80249bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80249c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80249c4:	ee18 2a10 	vmov	r2, s16
 80249c8:	eeb0 8a47 	vmov.f32	s16, s14
 80249cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80249d0:	ee18 2a90 	vmov	r2, s17
 80249d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80249d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80249d8:	eef0 8a67 	vmov.f32	s17, s15
 80249dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80249e0:	932a      	str	r3, [sp, #168]	; 0xa8
 80249e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80249e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80249e6:	3b01      	subs	r3, #1
 80249e8:	9309      	str	r3, [sp, #36]	; 0x24
 80249ea:	bf08      	it	eq
 80249ec:	4614      	moveq	r4, r2
 80249ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80249f0:	bf18      	it	ne
 80249f2:	461c      	movne	r4, r3
 80249f4:	e6aa      	b.n	802474c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80249f6:	2900      	cmp	r1, #0
 80249f8:	f43f af55 	beq.w	80248a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80249fc:	4453      	add	r3, sl
 80249fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024a02:	07db      	lsls	r3, r3, #31
 8024a04:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024a08:	bf54      	ite	pl
 8024a0a:	f00c 030f 	andpl.w	r3, ip, #15
 8024a0e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024a12:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024a16:	b2db      	uxtb	r3, r3
 8024a18:	930c      	str	r3, [sp, #48]	; 0x30
 8024a1a:	e744      	b.n	80248a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024a1c:	f889 3000 	strb.w	r3, [r9]
 8024a20:	f889 1001 	strb.w	r1, [r9, #1]
 8024a24:	f889 c002 	strb.w	ip, [r9, #2]
 8024a28:	e792      	b.n	8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024a2a:	1c42      	adds	r2, r0, #1
 8024a2c:	d190      	bne.n	8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024a2e:	9a07      	ldr	r2, [sp, #28]
 8024a30:	4282      	cmp	r2, r0
 8024a32:	dd8d      	ble.n	8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024a34:	1c5a      	adds	r2, r3, #1
 8024a36:	db8b      	blt.n	8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024a38:	9a08      	ldr	r2, [sp, #32]
 8024a3a:	429a      	cmp	r2, r3
 8024a3c:	dd88      	ble.n	8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024a40:	9105      	str	r1, [sp, #20]
 8024a42:	4649      	mov	r1, r9
 8024a44:	9002      	str	r0, [sp, #8]
 8024a46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024a48:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024a4c:	9b08      	ldr	r3, [sp, #32]
 8024a4e:	463a      	mov	r2, r7
 8024a50:	9301      	str	r3, [sp, #4]
 8024a52:	9b07      	ldr	r3, [sp, #28]
 8024a54:	9300      	str	r3, [sp, #0]
 8024a56:	4653      	mov	r3, sl
 8024a58:	f7ff fd64 	bl	8024524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024a5c:	e778      	b.n	8024950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024a5e:	142a      	asrs	r2, r5, #16
 8024a60:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024a64:	1433      	asrs	r3, r6, #16
 8024a66:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024a6a:	fb0a 2303 	mla	r3, sl, r3, r2
 8024a6e:	085a      	lsrs	r2, r3, #1
 8024a70:	07d9      	lsls	r1, r3, #31
 8024a72:	5cba      	ldrb	r2, [r7, r2]
 8024a74:	bf54      	ite	pl
 8024a76:	f002 020f 	andpl.w	r2, r2, #15
 8024a7a:	1112      	asrmi	r2, r2, #4
 8024a7c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024a80:	b2d2      	uxtb	r2, r2
 8024a82:	2800      	cmp	r0, #0
 8024a84:	f000 808a 	beq.w	8024b9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8024a88:	f103 0b01 	add.w	fp, r3, #1
 8024a8c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8024a90:	f01b 0f01 	tst.w	fp, #1
 8024a94:	5c79      	ldrb	r1, [r7, r1]
 8024a96:	bf0c      	ite	eq
 8024a98:	f001 010f 	andeq.w	r1, r1, #15
 8024a9c:	1109      	asrne	r1, r1, #4
 8024a9e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024aa2:	b2c9      	uxtb	r1, r1
 8024aa4:	9111      	str	r1, [sp, #68]	; 0x44
 8024aa6:	f1bc 0f00 	cmp.w	ip, #0
 8024aaa:	d019      	beq.n	8024ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024aac:	4453      	add	r3, sl
 8024aae:	0859      	lsrs	r1, r3, #1
 8024ab0:	f013 0f01 	tst.w	r3, #1
 8024ab4:	f103 0301 	add.w	r3, r3, #1
 8024ab8:	5c79      	ldrb	r1, [r7, r1]
 8024aba:	bf0c      	ite	eq
 8024abc:	f001 010f 	andeq.w	r1, r1, #15
 8024ac0:	1109      	asrne	r1, r1, #4
 8024ac2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024ac6:	b2c9      	uxtb	r1, r1
 8024ac8:	910d      	str	r1, [sp, #52]	; 0x34
 8024aca:	0859      	lsrs	r1, r3, #1
 8024acc:	07db      	lsls	r3, r3, #31
 8024ace:	5c79      	ldrb	r1, [r7, r1]
 8024ad0:	bf54      	ite	pl
 8024ad2:	f001 010f 	andpl.w	r1, r1, #15
 8024ad6:	1109      	asrmi	r1, r1, #4
 8024ad8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024adc:	b2c9      	uxtb	r1, r1
 8024ade:	9112      	str	r1, [sp, #72]	; 0x48
 8024ae0:	b280      	uxth	r0, r0
 8024ae2:	fa1f fc8c 	uxth.w	ip, ip
 8024ae6:	fb00 f30c 	mul.w	r3, r0, ip
 8024aea:	0100      	lsls	r0, r0, #4
 8024aec:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024af0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024af4:	1ac0      	subs	r0, r0, r3
 8024af6:	fa1f fc8c 	uxth.w	ip, ip
 8024afa:	b280      	uxth	r0, r0
 8024afc:	eba1 010c 	sub.w	r1, r1, ip
 8024b00:	fa1f fb81 	uxth.w	fp, r1
 8024b04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024b06:	4348      	muls	r0, r1
 8024b08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024b0a:	fb02 020b 	mla	r2, r2, fp, r0
 8024b0e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024b12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024b14:	fb03 c302 	mla	r3, r3, r2, ip
 8024b18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024b1c:	b3ab      	cbz	r3, 8024b8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024b1e:	4a2d      	ldr	r2, [pc, #180]	; (8024bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8024b20:	2bff      	cmp	r3, #255	; 0xff
 8024b22:	6811      	ldr	r1, [r2, #0]
 8024b24:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8024b28:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8024b2c:	b2c9      	uxtb	r1, r1
 8024b2e:	d045      	beq.n	8024bbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8024b30:	b298      	uxth	r0, r3
 8024b32:	43db      	mvns	r3, r3
 8024b34:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8024b38:	fb11 f100 	smulbb	r1, r1, r0
 8024b3c:	b2db      	uxtb	r3, r3
 8024b3e:	fb1c fc00 	smulbb	ip, ip, r0
 8024b42:	fb02 1103 	mla	r1, r2, r3, r1
 8024b46:	fb1b f000 	smulbb	r0, fp, r0
 8024b4a:	b289      	uxth	r1, r1
 8024b4c:	1c4a      	adds	r2, r1, #1
 8024b4e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024b52:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024b56:	fb02 cc03 	mla	ip, r2, r3, ip
 8024b5a:	1209      	asrs	r1, r1, #8
 8024b5c:	fa1f fc8c 	uxth.w	ip, ip
 8024b60:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024b64:	f10c 0201 	add.w	r2, ip, #1
 8024b68:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8024b6c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8024b70:	fb02 0303 	mla	r3, r2, r3, r0
 8024b74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024b78:	b29b      	uxth	r3, r3
 8024b7a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8024b7e:	1c5a      	adds	r2, r3, #1
 8024b80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024b84:	121b      	asrs	r3, r3, #8
 8024b86:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8024b8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b8c:	f10e 0e03 	add.w	lr, lr, #3
 8024b90:	f109 39ff 	add.w	r9, r9, #4294967295
 8024b94:	441d      	add	r5, r3
 8024b96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b98:	441e      	add	r6, r3
 8024b9a:	e607      	b.n	80247ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8024b9c:	f1bc 0f00 	cmp.w	ip, #0
 8024ba0:	d09e      	beq.n	8024ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024ba2:	4453      	add	r3, sl
 8024ba4:	0859      	lsrs	r1, r3, #1
 8024ba6:	07db      	lsls	r3, r3, #31
 8024ba8:	5c79      	ldrb	r1, [r7, r1]
 8024baa:	bf54      	ite	pl
 8024bac:	f001 010f 	andpl.w	r1, r1, #15
 8024bb0:	1109      	asrmi	r1, r1, #4
 8024bb2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024bb6:	b2c9      	uxtb	r1, r1
 8024bb8:	910d      	str	r1, [sp, #52]	; 0x34
 8024bba:	e791      	b.n	8024ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024bbc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024bc0:	f80e cc02 	strb.w	ip, [lr, #-2]
 8024bc4:	f80e bc01 	strb.w	fp, [lr, #-1]
 8024bc8:	e7df      	b.n	8024b8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024bca:	b015      	add	sp, #84	; 0x54
 8024bcc:	ecbd 8b08 	vpop	{d8-d11}
 8024bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bd4:	2000c664 	.word	0x2000c664

08024bd8 <CRC_Lock>:
 8024bd8:	4a1d      	ldr	r2, [pc, #116]	; (8024c50 <CRC_Lock+0x78>)
 8024bda:	b530      	push	{r4, r5, lr}
 8024bdc:	6813      	ldr	r3, [r2, #0]
 8024bde:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024be2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024be6:	f023 0301 	bic.w	r3, r3, #1
 8024bea:	6013      	str	r3, [r2, #0]
 8024bec:	4b19      	ldr	r3, [pc, #100]	; (8024c54 <CRC_Lock+0x7c>)
 8024bee:	681a      	ldr	r2, [r3, #0]
 8024bf0:	4022      	ands	r2, r4
 8024bf2:	42aa      	cmp	r2, r5
 8024bf4:	d005      	beq.n	8024c02 <CRC_Lock+0x2a>
 8024bf6:	681b      	ldr	r3, [r3, #0]
 8024bf8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024bfc:	4023      	ands	r3, r4
 8024bfe:	4293      	cmp	r3, r2
 8024c00:	d11d      	bne.n	8024c3e <CRC_Lock+0x66>
 8024c02:	4b15      	ldr	r3, [pc, #84]	; (8024c58 <CRC_Lock+0x80>)
 8024c04:	681b      	ldr	r3, [r3, #0]
 8024c06:	b9d3      	cbnz	r3, 8024c3e <CRC_Lock+0x66>
 8024c08:	4a14      	ldr	r2, [pc, #80]	; (8024c5c <CRC_Lock+0x84>)
 8024c0a:	6813      	ldr	r3, [r2, #0]
 8024c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024c10:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024c14:	d006      	beq.n	8024c24 <CRC_Lock+0x4c>
 8024c16:	6813      	ldr	r3, [r2, #0]
 8024c18:	f240 4283 	movw	r2, #1155	; 0x483
 8024c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024c20:	4293      	cmp	r3, r2
 8024c22:	d10c      	bne.n	8024c3e <CRC_Lock+0x66>
 8024c24:	4b0e      	ldr	r3, [pc, #56]	; (8024c60 <CRC_Lock+0x88>)
 8024c26:	2201      	movs	r2, #1
 8024c28:	601a      	str	r2, [r3, #0]
 8024c2a:	681a      	ldr	r2, [r3, #0]
 8024c2c:	2a00      	cmp	r2, #0
 8024c2e:	d1fc      	bne.n	8024c2a <CRC_Lock+0x52>
 8024c30:	4b0c      	ldr	r3, [pc, #48]	; (8024c64 <CRC_Lock+0x8c>)
 8024c32:	6018      	str	r0, [r3, #0]
 8024c34:	6818      	ldr	r0, [r3, #0]
 8024c36:	1a43      	subs	r3, r0, r1
 8024c38:	4258      	negs	r0, r3
 8024c3a:	4158      	adcs	r0, r3
 8024c3c:	bd30      	pop	{r4, r5, pc}
 8024c3e:	4b0a      	ldr	r3, [pc, #40]	; (8024c68 <CRC_Lock+0x90>)
 8024c40:	2201      	movs	r2, #1
 8024c42:	601a      	str	r2, [r3, #0]
 8024c44:	681a      	ldr	r2, [r3, #0]
 8024c46:	2a00      	cmp	r2, #0
 8024c48:	d1fc      	bne.n	8024c44 <CRC_Lock+0x6c>
 8024c4a:	4b08      	ldr	r3, [pc, #32]	; (8024c6c <CRC_Lock+0x94>)
 8024c4c:	e7f1      	b.n	8024c32 <CRC_Lock+0x5a>
 8024c4e:	bf00      	nop
 8024c50:	e0002000 	.word	0xe0002000
 8024c54:	e000ed00 	.word	0xe000ed00
 8024c58:	e0042000 	.word	0xe0042000
 8024c5c:	5c001000 	.word	0x5c001000
 8024c60:	58024c08 	.word	0x58024c08
 8024c64:	58024c00 	.word	0x58024c00
 8024c68:	40023008 	.word	0x40023008
 8024c6c:	40023000 	.word	0x40023000

08024c70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024c70:	6101      	str	r1, [r0, #16]
 8024c72:	4770      	bx	lr

08024c74 <_ZN8touchgfx8Gestures4tickEv>:
 8024c74:	7b83      	ldrb	r3, [r0, #14]
 8024c76:	b14b      	cbz	r3, 8024c8c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024c78:	8903      	ldrh	r3, [r0, #8]
 8024c7a:	3301      	adds	r3, #1
 8024c7c:	b29b      	uxth	r3, r3
 8024c7e:	2b07      	cmp	r3, #7
 8024c80:	8103      	strh	r3, [r0, #8]
 8024c82:	bf81      	itttt	hi
 8024c84:	2300      	movhi	r3, #0
 8024c86:	8143      	strhhi	r3, [r0, #10]
 8024c88:	8183      	strhhi	r3, [r0, #12]
 8024c8a:	7383      	strbhi	r3, [r0, #14]
 8024c8c:	4770      	bx	lr
	...

08024c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024c90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024c94:	4604      	mov	r4, r0
 8024c96:	4698      	mov	r8, r3
 8024c98:	8880      	ldrh	r0, [r0, #4]
 8024c9a:	4617      	mov	r7, r2
 8024c9c:	4b1d      	ldr	r3, [pc, #116]	; (8024d14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024c9e:	460e      	mov	r6, r1
 8024ca0:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024ca4:	eba8 0000 	sub.w	r0, r8, r0
 8024ca8:	9300      	str	r3, [sp, #0]
 8024caa:	2300      	movs	r3, #0
 8024cac:	b280      	uxth	r0, r0
 8024cae:	8aa2      	ldrh	r2, [r4, #20]
 8024cb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8024cb4:	b203      	sxth	r3, r0
 8024cb6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024cba:	88e1      	ldrh	r1, [r4, #6]
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024cc2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024cc6:	bfb8      	it	lt
 8024cc8:	4240      	neglt	r0, r0
 8024cca:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024cce:	bfb8      	it	lt
 8024cd0:	b203      	sxthlt	r3, r0
 8024cd2:	4293      	cmp	r3, r2
 8024cd4:	dc08      	bgt.n	8024ce8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024cd6:	1a69      	subs	r1, r5, r1
 8024cd8:	b289      	uxth	r1, r1
 8024cda:	b20b      	sxth	r3, r1
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	bfbc      	itt	lt
 8024ce0:	4249      	neglt	r1, r1
 8024ce2:	b20b      	sxthlt	r3, r1
 8024ce4:	429a      	cmp	r2, r3
 8024ce6:	da13      	bge.n	8024d10 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024ce8:	6920      	ldr	r0, [r4, #16]
 8024cea:	4669      	mov	r1, sp
 8024cec:	eba8 0606 	sub.w	r6, r8, r6
 8024cf0:	1bef      	subs	r7, r5, r7
 8024cf2:	6803      	ldr	r3, [r0, #0]
 8024cf4:	685b      	ldr	r3, [r3, #4]
 8024cf6:	4798      	blx	r3
 8024cf8:	2300      	movs	r3, #0
 8024cfa:	2001      	movs	r0, #1
 8024cfc:	8166      	strh	r6, [r4, #10]
 8024cfe:	8123      	strh	r3, [r4, #8]
 8024d00:	81a7      	strh	r7, [r4, #12]
 8024d02:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024d06:	80e5      	strh	r5, [r4, #6]
 8024d08:	73a0      	strb	r0, [r4, #14]
 8024d0a:	b004      	add	sp, #16
 8024d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d10:	2000      	movs	r0, #0
 8024d12:	e7fa      	b.n	8024d0a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024d14:	0802a274 	.word	0x0802a274

08024d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d1a:	461e      	mov	r6, r3
 8024d1c:	1e4b      	subs	r3, r1, #1
 8024d1e:	b085      	sub	sp, #20
 8024d20:	4604      	mov	r4, r0
 8024d22:	2b01      	cmp	r3, #1
 8024d24:	460d      	mov	r5, r1
 8024d26:	4617      	mov	r7, r2
 8024d28:	d84b      	bhi.n	8024dc2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024d2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024d2e:	1cd3      	adds	r3, r2, #3
 8024d30:	b29b      	uxth	r3, r3
 8024d32:	2b06      	cmp	r3, #6
 8024d34:	d916      	bls.n	8024d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024d36:	f8df c098 	ldr.w	ip, [pc, #152]	; 8024dd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8024d3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024d3e:	f8cd c004 	str.w	ip, [sp, #4]
 8024d42:	f04f 0c00 	mov.w	ip, #0
 8024d46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024d4a:	6900      	ldr	r0, [r0, #16]
 8024d4c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024d50:	a901      	add	r1, sp, #4
 8024d52:	f88d c008 	strb.w	ip, [sp, #8]
 8024d56:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024d5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d5e:	6803      	ldr	r3, [r0, #0]
 8024d60:	689b      	ldr	r3, [r3, #8]
 8024d62:	4798      	blx	r3
 8024d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024d68:	1cd3      	adds	r3, r2, #3
 8024d6a:	b29b      	uxth	r3, r3
 8024d6c:	2b06      	cmp	r3, #6
 8024d6e:	d916      	bls.n	8024d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024d70:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8024dd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8024d74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024d78:	f8cd c004 	str.w	ip, [sp, #4]
 8024d7c:	f04f 0c01 	mov.w	ip, #1
 8024d80:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024d84:	6920      	ldr	r0, [r4, #16]
 8024d86:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024d8a:	a901      	add	r1, sp, #4
 8024d8c:	f88d c008 	strb.w	ip, [sp, #8]
 8024d90:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024d94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d98:	6803      	ldr	r3, [r0, #0]
 8024d9a:	689b      	ldr	r3, [r3, #8]
 8024d9c:	4798      	blx	r3
 8024d9e:	4b0b      	ldr	r3, [pc, #44]	; (8024dcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8024da0:	a901      	add	r1, sp, #4
 8024da2:	6920      	ldr	r0, [r4, #16]
 8024da4:	9301      	str	r3, [sp, #4]
 8024da6:	2300      	movs	r3, #0
 8024da8:	f88d 5008 	strb.w	r5, [sp, #8]
 8024dac:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024db0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024db4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024db8:	6803      	ldr	r3, [r0, #0]
 8024dba:	681b      	ldr	r3, [r3, #0]
 8024dbc:	4798      	blx	r3
 8024dbe:	b005      	add	sp, #20
 8024dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024dc2:	2900      	cmp	r1, #0
 8024dc4:	d1eb      	bne.n	8024d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024dc6:	80a2      	strh	r2, [r4, #4]
 8024dc8:	80c6      	strh	r6, [r0, #6]
 8024dca:	e7e8      	b.n	8024d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024dcc:	0802a260 	.word	0x0802a260
 8024dd0:	0802a288 	.word	0x0802a288

08024dd4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8024dd4:	10c9      	asrs	r1, r1, #3
 8024dd6:	2900      	cmp	r1, #0
 8024dd8:	bfb8      	it	lt
 8024dda:	4249      	neglt	r1, r1
 8024ddc:	2801      	cmp	r0, #1
 8024dde:	d108      	bne.n	8024df2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8024de0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024de4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024de8:	4601      	mov	r1, r0
 8024dea:	dd02      	ble.n	8024df2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8024dec:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024df0:	4770      	bx	lr
 8024df2:	29ff      	cmp	r1, #255	; 0xff
 8024df4:	bfa8      	it	ge
 8024df6:	21ff      	movge	r1, #255	; 0xff
 8024df8:	4608      	mov	r0, r1
 8024dfa:	4770      	bx	lr

08024dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e00:	688c      	ldr	r4, [r1, #8]
 8024e02:	b087      	sub	sp, #28
 8024e04:	4607      	mov	r7, r0
 8024e06:	2c00      	cmp	r4, #0
 8024e08:	db2b      	blt.n	8024e62 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024e0a:	6803      	ldr	r3, [r0, #0]
 8024e0c:	68da      	ldr	r2, [r3, #12]
 8024e0e:	42a2      	cmp	r2, r4
 8024e10:	dd27      	ble.n	8024e62 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024e12:	681a      	ldr	r2, [r3, #0]
 8024e14:	691e      	ldr	r6, [r3, #16]
 8024e16:	68cd      	ldr	r5, [r1, #12]
 8024e18:	fb06 2604 	mla	r6, r6, r4, r2
 8024e1c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024e20:	698a      	ldr	r2, [r1, #24]
 8024e22:	f893 a004 	ldrb.w	sl, [r3, #4]
 8024e26:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024e2a:	9205      	str	r2, [sp, #20]
 8024e2c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024e30:	9b05      	ldr	r3, [sp, #20]
 8024e32:	6839      	ldr	r1, [r7, #0]
 8024e34:	eb03 0c02 	add.w	ip, r3, r2
 8024e38:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024e3c:	6889      	ldr	r1, [r1, #8]
 8024e3e:	1898      	adds	r0, r3, r2
 8024e40:	4288      	cmp	r0, r1
 8024e42:	db02      	blt.n	8024e4a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024e44:	1a8b      	subs	r3, r1, r2
 8024e46:	2b00      	cmp	r3, #0
 8024e48:	dd09      	ble.n	8024e5e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024e4a:	6878      	ldr	r0, [r7, #4]
 8024e4c:	6801      	ldr	r1, [r0, #0]
 8024e4e:	9400      	str	r4, [sp, #0]
 8024e50:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024e54:	4653      	mov	r3, sl
 8024e56:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8024e5a:	4631      	mov	r1, r6
 8024e5c:	47d8      	blx	fp
 8024e5e:	3d01      	subs	r5, #1
 8024e60:	d1e4      	bne.n	8024e2c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024e62:	b007      	add	sp, #28
 8024e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024e68 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024e68:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024e6c:	b90b      	cbnz	r3, 8024e72 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8024e6e:	f001 b974 	b.w	802615a <_ZN8touchgfx7Outline6lineToEii>
 8024e72:	4770      	bx	lr

08024e74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e78:	4604      	mov	r4, r0
 8024e7a:	2600      	movs	r6, #0
 8024e7c:	4b8e      	ldr	r3, [pc, #568]	; (80250b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8024e7e:	f100 0518 	add.w	r5, r0, #24
 8024e82:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8024e86:	b086      	sub	sp, #24
 8024e88:	4690      	mov	r8, r2
 8024e8a:	e9c0 3100 	strd	r3, r1, [r0]
 8024e8e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8024e92:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8024e96:	4628      	mov	r0, r5
 8024e98:	f001 fb75 	bl	8026586 <_ZN8touchgfx15RenderingBufferC1Ev>
 8024e9c:	4638      	mov	r0, r7
 8024e9e:	f000 fb45 	bl	802552c <_ZN8touchgfx7OutlineC1Ev>
 8024ea2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8024ea6:	f001 fb23 	bl	80264f0 <_ZN8touchgfx8ScanlineC1Ev>
 8024eaa:	2301      	movs	r3, #1
 8024eac:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8024eb0:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8024eb4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024eb8:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8024ebc:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8024ec0:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8024ec4:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8024ec8:	f7f4 fbe6 	bl	8019698 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8024ecc:	b928      	cbnz	r0, 8024eda <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8024ece:	4b7b      	ldr	r3, [pc, #492]	; (80250bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8024ed0:	2118      	movs	r1, #24
 8024ed2:	4a7b      	ldr	r2, [pc, #492]	; (80250c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024ed4:	487b      	ldr	r0, [pc, #492]	; (80250c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024ed6:	f001 fb99 	bl	802660c <__assert_func>
 8024eda:	f9b8 2000 	ldrsh.w	r2, [r8]
 8024ede:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024ee2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024ee6:	4410      	add	r0, r2
 8024ee8:	9602      	str	r6, [sp, #8]
 8024eea:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8024eee:	b280      	uxth	r0, r0
 8024ef0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024ef4:	fa0f fa80 	sxth.w	sl, r0
 8024ef8:	f1ba 0f00 	cmp.w	sl, #0
 8024efc:	dd70      	ble.n	8024fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024efe:	4591      	cmp	r9, r2
 8024f00:	dd6e      	ble.n	8024fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024f02:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024f06:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024f0a:	440b      	add	r3, r1
 8024f0c:	b29b      	uxth	r3, r3
 8024f0e:	b21e      	sxth	r6, r3
 8024f10:	2e00      	cmp	r6, #0
 8024f12:	dd65      	ble.n	8024fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024f14:	458e      	cmp	lr, r1
 8024f16:	dd63      	ble.n	8024fe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024f18:	45d1      	cmp	r9, sl
 8024f1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8024f1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024f22:	bfb8      	it	lt
 8024f24:	fa1f f089 	uxthlt.w	r0, r9
 8024f28:	45b6      	cmp	lr, r6
 8024f2a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8024f2e:	bfb8      	it	lt
 8024f30:	fa1f f38e 	uxthlt.w	r3, lr
 8024f34:	1a80      	subs	r0, r0, r2
 8024f36:	f8ad 100a 	strh.w	r1, [sp, #10]
 8024f3a:	1a5b      	subs	r3, r3, r1
 8024f3c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024f40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024f44:	f10d 0808 	add.w	r8, sp, #8
 8024f48:	ae04      	add	r6, sp, #16
 8024f4a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024f4e:	e886 0003 	stmia.w	r6, {r0, r1}
 8024f52:	f8dc 3000 	ldr.w	r3, [ip]
 8024f56:	4660      	mov	r0, ip
 8024f58:	4631      	mov	r1, r6
 8024f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024f5c:	4798      	blx	r3
 8024f5e:	6861      	ldr	r1, [r4, #4]
 8024f60:	4640      	mov	r0, r8
 8024f62:	3104      	adds	r1, #4
 8024f64:	f7f5 fa06 	bl	801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024f68:	4630      	mov	r0, r6
 8024f6a:	f7f5 fa1b 	bl	801a3a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024f6e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024f72:	f7f4 fb21 	bl	80195b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024f76:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8024f7a:	4638      	mov	r0, r7
 8024f7c:	f000 fab2 	bl	80254e4 <_ZN8touchgfx7Outline5resetEv>
 8024f80:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024f84:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024f88:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8024f8c:	015b      	lsls	r3, r3, #5
 8024f8e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8024f92:	0152      	lsls	r2, r2, #5
 8024f94:	60e3      	str	r3, [r4, #12]
 8024f96:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8024f9a:	60a2      	str	r2, [r4, #8]
 8024f9c:	015b      	lsls	r3, r3, #5
 8024f9e:	6123      	str	r3, [r4, #16]
 8024fa0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024fa4:	015b      	lsls	r3, r3, #5
 8024fa6:	6163      	str	r3, [r4, #20]
 8024fa8:	4b47      	ldr	r3, [pc, #284]	; (80250c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8024faa:	6818      	ldr	r0, [r3, #0]
 8024fac:	6803      	ldr	r3, [r0, #0]
 8024fae:	6a1b      	ldr	r3, [r3, #32]
 8024fb0:	4798      	blx	r3
 8024fb2:	4606      	mov	r6, r0
 8024fb4:	f7ea ffe8 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8024fb8:	6803      	ldr	r3, [r0, #0]
 8024fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024fbc:	4798      	blx	r3
 8024fbe:	4607      	mov	r7, r0
 8024fc0:	f7ea ffe2 	bl	800ff88 <_ZN8touchgfx3HAL3lcdEv>
 8024fc4:	6803      	ldr	r3, [r0, #0]
 8024fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024fc8:	4798      	blx	r3
 8024fca:	280c      	cmp	r0, #12
 8024fcc:	d854      	bhi.n	8025078 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8024fce:	e8df f000 	tbb	[pc, r0]
 8024fd2:	554b      	.short	0x554b
 8024fd4:	2b6e0a66 	.word	0x2b6e0a66
 8024fd8:	5f5f5f3b 	.word	0x5f5f5f3b
 8024fdc:	5f5f      	.short	0x5f5f
 8024fde:	6e          	.byte	0x6e
 8024fdf:	00          	.byte	0x00
 8024fe0:	2300      	movs	r3, #0
 8024fe2:	9303      	str	r3, [sp, #12]
 8024fe4:	e7ae      	b.n	8024f44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8024fe6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024fea:	2108      	movs	r1, #8
 8024fec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024ff0:	fb92 f1f1 	sdiv	r1, r2, r1
 8024ff4:	fb07 1303 	mla	r3, r7, r3, r1
 8024ff8:	441e      	add	r6, r3
 8024ffa:	4253      	negs	r3, r2
 8024ffc:	f002 0207 	and.w	r2, r2, #7
 8025000:	f003 0307 	and.w	r3, r3, #7
 8025004:	bf58      	it	pl
 8025006:	425a      	negpl	r2, r3
 8025008:	b2d2      	uxtb	r2, r2
 802500a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802500e:	4628      	mov	r0, r5
 8025010:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025014:	66e1      	str	r1, [r4, #108]	; 0x6c
 8025016:	e9cd 1700 	strd	r1, r7, [sp]
 802501a:	4631      	mov	r1, r6
 802501c:	f001 fabb 	bl	8026596 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8025020:	4620      	mov	r0, r4
 8025022:	b006      	add	sp, #24
 8025024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025028:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802502c:	2104      	movs	r1, #4
 802502e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025032:	fb92 f1f1 	sdiv	r1, r2, r1
 8025036:	fb07 1303 	mla	r3, r7, r3, r1
 802503a:	441e      	add	r6, r3
 802503c:	4253      	negs	r3, r2
 802503e:	f002 0203 	and.w	r2, r2, #3
 8025042:	f003 0303 	and.w	r3, r3, #3
 8025046:	e7dd      	b.n	8025004 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8025048:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802504c:	2102      	movs	r1, #2
 802504e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025052:	2a00      	cmp	r2, #0
 8025054:	fb92 f1f1 	sdiv	r1, r2, r1
 8025058:	f002 0201 	and.w	r2, r2, #1
 802505c:	fb07 1303 	mla	r3, r7, r3, r1
 8025060:	bfb8      	it	lt
 8025062:	4252      	neglt	r2, r2
 8025064:	441e      	add	r6, r3
 8025066:	e7cf      	b.n	8025008 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8025068:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802506c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025070:	437b      	muls	r3, r7
 8025072:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8025076:	441e      	add	r6, r3
 8025078:	2200      	movs	r2, #0
 802507a:	e7c6      	b.n	802500a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802507c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025080:	2103      	movs	r1, #3
 8025082:	fb07 f203 	mul.w	r2, r7, r3
 8025086:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802508a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802508e:	e7f2      	b.n	8025076 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8025090:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025094:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025098:	fb07 2303 	mla	r3, r7, r3, r2
 802509c:	e7eb      	b.n	8025076 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802509e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80250a2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80250a6:	437b      	muls	r3, r7
 80250a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80250ac:	e7e3      	b.n	8025076 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80250ae:	4b07      	ldr	r3, [pc, #28]	; (80250cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80250b0:	2156      	movs	r1, #86	; 0x56
 80250b2:	4a03      	ldr	r2, [pc, #12]	; (80250c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80250b4:	e70e      	b.n	8024ed4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80250b6:	bf00      	nop
 80250b8:	0802b8f4 	.word	0x0802b8f4
 80250bc:	0802b83e 	.word	0x0802b83e
 80250c0:	0802b8fc 	.word	0x0802b8fc
 80250c4:	0802b89a 	.word	0x0802b89a
 80250c8:	2000c63c 	.word	0x2000c63c
 80250cc:	0802b8ce 	.word	0x0802b8ce

080250d0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80250d0:	6812      	ldr	r2, [r2, #0]
 80250d2:	2a00      	cmp	r2, #0
 80250d4:	db0b      	blt.n	80250ee <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80250d6:	9800      	ldr	r0, [sp, #0]
 80250d8:	6800      	ldr	r0, [r0, #0]
 80250da:	4290      	cmp	r0, r2
 80250dc:	bfd4      	ite	le
 80250de:	2002      	movle	r0, #2
 80250e0:	2000      	movgt	r0, #0
 80250e2:	680a      	ldr	r2, [r1, #0]
 80250e4:	2a00      	cmp	r2, #0
 80250e6:	da04      	bge.n	80250f2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80250e8:	f040 0004 	orr.w	r0, r0, #4
 80250ec:	4770      	bx	lr
 80250ee:	2001      	movs	r0, #1
 80250f0:	e7f7      	b.n	80250e2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	4293      	cmp	r3, r2
 80250f6:	bfd8      	it	le
 80250f8:	f040 0008 	orrle.w	r0, r0, #8
 80250fc:	4770      	bx	lr
	...

08025100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8025100:	4b07      	ldr	r3, [pc, #28]	; (8025120 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8025102:	b510      	push	{r4, lr}
 8025104:	781b      	ldrb	r3, [r3, #0]
 8025106:	2b01      	cmp	r3, #1
 8025108:	d108      	bne.n	802511c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802510a:	6843      	ldr	r3, [r0, #4]
 802510c:	6814      	ldr	r4, [r2, #0]
 802510e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025112:	680b      	ldr	r3, [r1, #0]
 8025114:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025118:	6013      	str	r3, [r2, #0]
 802511a:	600c      	str	r4, [r1, #0]
 802511c:	bd10      	pop	{r4, pc}
 802511e:	bf00      	nop
 8025120:	2000c634 	.word	0x2000c634

08025124 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025126:	b085      	sub	sp, #20
 8025128:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802512c:	4604      	mov	r4, r0
 802512e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025132:	b33b      	cbz	r3, 8025184 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8025134:	aa02      	add	r2, sp, #8
 8025136:	a903      	add	r1, sp, #12
 8025138:	f7ff ffe2 	bl	8025100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802513c:	68a3      	ldr	r3, [r4, #8]
 802513e:	9e03      	ldr	r6, [sp, #12]
 8025140:	aa02      	add	r2, sp, #8
 8025142:	9f02      	ldr	r7, [sp, #8]
 8025144:	a903      	add	r1, sp, #12
 8025146:	1af6      	subs	r6, r6, r3
 8025148:	68e3      	ldr	r3, [r4, #12]
 802514a:	4620      	mov	r0, r4
 802514c:	1aff      	subs	r7, r7, r3
 802514e:	f104 0314 	add.w	r3, r4, #20
 8025152:	9603      	str	r6, [sp, #12]
 8025154:	9300      	str	r3, [sp, #0]
 8025156:	f104 0310 	add.w	r3, r4, #16
 802515a:	9702      	str	r7, [sp, #8]
 802515c:	f7ff ffb8 	bl	80250d0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8025160:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8025164:	4605      	mov	r5, r0
 8025166:	b97b      	cbnz	r3, 8025188 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8025168:	463a      	mov	r2, r7
 802516a:	4631      	mov	r1, r6
 802516c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025170:	f7ff fe7a 	bl	8024e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025174:	9b03      	ldr	r3, [sp, #12]
 8025176:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802517a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802517e:	9b02      	ldr	r3, [sp, #8]
 8025180:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8025184:	b005      	add	sp, #20
 8025186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025188:	b110      	cbz	r0, 8025190 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802518a:	ea13 0200 	ands.w	r2, r3, r0
 802518e:	d11c      	bne.n	80251ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8025190:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8025194:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8025198:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802519c:	b188      	cbz	r0, 80251c2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802519e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80251a2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80251a6:	b913      	cbnz	r3, 80251ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80251a8:	4630      	mov	r0, r6
 80251aa:	f001 f806 	bl	80261ba <_ZN8touchgfx7Outline6moveToEii>
 80251ae:	2300      	movs	r3, #0
 80251b0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80251b4:	2301      	movs	r3, #1
 80251b6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80251ba:	4630      	mov	r0, r6
 80251bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80251c0:	e7d6      	b.n	8025170 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80251c2:	4630      	mov	r0, r6
 80251c4:	f7ff fe50 	bl	8024e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 80251c8:	e7f7      	b.n	80251ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80251ca:	4615      	mov	r5, r2
 80251cc:	e7d2      	b.n	8025174 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080251ce <_ZN8touchgfx6Canvas5closeEv>:
 80251ce:	b538      	push	{r3, r4, r5, lr}
 80251d0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80251d4:	4604      	mov	r4, r0
 80251d6:	b993      	cbnz	r3, 80251fe <_ZN8touchgfx6Canvas5closeEv+0x30>
 80251d8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80251dc:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80251e0:	4213      	tst	r3, r2
 80251e2:	d10c      	bne.n	80251fe <_ZN8touchgfx6Canvas5closeEv+0x30>
 80251e4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80251e8:	b123      	cbz	r3, 80251f4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80251ea:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80251ee:	4628      	mov	r0, r5
 80251f0:	f7ff fe3a 	bl	8024e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 80251f4:	4628      	mov	r0, r5
 80251f6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80251fa:	f7ff fe35 	bl	8024e68 <_ZN8touchgfx10Rasterizer6lineToEii>
 80251fe:	2300      	movs	r3, #0
 8025200:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8025204:	bd38      	pop	{r3, r4, r5, pc}

08025206 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025208:	b085      	sub	sp, #20
 802520a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802520e:	4604      	mov	r4, r0
 8025210:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025214:	b353      	cbz	r3, 802526c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8025216:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802521a:	b90b      	cbnz	r3, 8025220 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802521c:	f7ff ffd7 	bl	80251ce <_ZN8touchgfx6Canvas5closeEv>
 8025220:	aa02      	add	r2, sp, #8
 8025222:	a903      	add	r1, sp, #12
 8025224:	4620      	mov	r0, r4
 8025226:	f7ff ff6b 	bl	8025100 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802522a:	68a3      	ldr	r3, [r4, #8]
 802522c:	9d03      	ldr	r5, [sp, #12]
 802522e:	aa02      	add	r2, sp, #8
 8025230:	9e02      	ldr	r6, [sp, #8]
 8025232:	a903      	add	r1, sp, #12
 8025234:	1aed      	subs	r5, r5, r3
 8025236:	68e3      	ldr	r3, [r4, #12]
 8025238:	4620      	mov	r0, r4
 802523a:	1af6      	subs	r6, r6, r3
 802523c:	f104 0314 	add.w	r3, r4, #20
 8025240:	9503      	str	r5, [sp, #12]
 8025242:	9300      	str	r3, [sp, #0]
 8025244:	f104 0310 	add.w	r3, r4, #16
 8025248:	9602      	str	r6, [sp, #8]
 802524a:	f7ff ff41 	bl	80250d0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802524e:	4607      	mov	r7, r0
 8025250:	b170      	cbz	r0, 8025270 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8025252:	2301      	movs	r3, #1
 8025254:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8025258:	9a03      	ldr	r2, [sp, #12]
 802525a:	9b02      	ldr	r3, [sp, #8]
 802525c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8025260:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8025264:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8025268:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 802526c:	b005      	add	sp, #20
 802526e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025270:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8025274:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8025278:	b92b      	cbnz	r3, 8025286 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802527a:	4632      	mov	r2, r6
 802527c:	4629      	mov	r1, r5
 802527e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025282:	f000 ff9a 	bl	80261ba <_ZN8touchgfx7Outline6moveToEii>
 8025286:	2300      	movs	r3, #0
 8025288:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802528c:	2301      	movs	r3, #1
 802528e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8025292:	e7e1      	b.n	8025258 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08025294 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8025294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025298:	4604      	mov	r4, r0
 802529a:	b087      	sub	sp, #28
 802529c:	9105      	str	r1, [sp, #20]
 802529e:	f001 f8d0 	bl	8026442 <_ZN8touchgfx7Outline8getCellsEv>
 80252a2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80252a6:	4605      	mov	r5, r0
 80252a8:	f1b9 0f00 	cmp.w	r9, #0
 80252ac:	d103      	bne.n	80252b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80252ae:	2001      	movs	r0, #1
 80252b0:	b007      	add	sp, #28
 80252b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252b6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80252ba:	2e00      	cmp	r6, #0
 80252bc:	d139      	bne.n	8025332 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80252be:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80252c2:	f105 0708 	add.w	r7, r5, #8
 80252c6:	4640      	mov	r0, r8
 80252c8:	f001 f8fd 	bl	80264c6 <_ZN8touchgfx8Scanline5resetEv>
 80252cc:	f109 33ff 	add.w	r3, r9, #4294967295
 80252d0:	9303      	str	r3, [sp, #12]
 80252d2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80252d6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80252da:	46da      	mov	sl, fp
 80252dc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80252e0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80252e4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80252e8:	9b03      	ldr	r3, [sp, #12]
 80252ea:	4416      	add	r6, r2
 80252ec:	9504      	str	r5, [sp, #16]
 80252ee:	463d      	mov	r5, r7
 80252f0:	3b01      	subs	r3, #1
 80252f2:	9303      	str	r3, [sp, #12]
 80252f4:	3301      	adds	r3, #1
 80252f6:	d01e      	beq.n	8025336 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80252f8:	3708      	adds	r7, #8
 80252fa:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80252fe:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8025302:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8025306:	4290      	cmp	r0, r2
 8025308:	d11e      	bne.n	8025348 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802530a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802530e:	4411      	add	r1, r2
 8025310:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8025314:	e7e8      	b.n	80252e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8025316:	1c91      	adds	r1, r2, #2
 8025318:	f04f 0301 	mov.w	r3, #1
 802531c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802531e:	8053      	strh	r3, [r2, #2]
 8025320:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8025322:	1c91      	adds	r1, r2, #2
 8025324:	65a1      	str	r1, [r4, #88]	; 0x58
 8025326:	f8a2 b002 	strh.w	fp, [r2, #2]
 802532a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802532c:	3201      	adds	r2, #1
 802532e:	6562      	str	r2, [r4, #84]	; 0x54
 8025330:	e03a      	b.n	80253a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8025332:	2000      	movs	r0, #0
 8025334:	e7bc      	b.n	80252b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8025336:	b951      	cbnz	r1, 802534e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8025338:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802533a:	2b00      	cmp	r3, #0
 802533c:	d0b7      	beq.n	80252ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802533e:	4641      	mov	r1, r8
 8025340:	9805      	ldr	r0, [sp, #20]
 8025342:	f7ff fd5b 	bl	8024dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025346:	e7b2      	b.n	80252ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8025348:	2900      	cmp	r1, #0
 802534a:	d035      	beq.n	80253b8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802534c:	9504      	str	r5, [sp, #16]
 802534e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8025352:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025356:	f7ff fd3d 	bl	8024dd4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802535a:	4605      	mov	r5, r0
 802535c:	b330      	cbz	r0, 80253ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802535e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8025360:	b182      	cbz	r2, 8025384 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8025362:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8025364:	454a      	cmp	r2, r9
 8025366:	d00d      	beq.n	8025384 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8025368:	4641      	mov	r1, r8
 802536a:	9805      	ldr	r0, [sp, #20]
 802536c:	f7ff fd46 	bl	8024dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025370:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025374:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8025376:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802537a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802537c:	2300      	movs	r3, #0
 802537e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025380:	6563      	str	r3, [r4, #84]	; 0x54
 8025382:	65a2      	str	r2, [r4, #88]	; 0x58
 8025384:	f1bb 0f00 	cmp.w	fp, #0
 8025388:	db10      	blt.n	80253ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802538a:	f7f4 f993 	bl	80196b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802538e:	4583      	cmp	fp, r0
 8025390:	d20c      	bcs.n	80253ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8025392:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8025394:	f802 500b 	strb.w	r5, [r2, fp]
 8025398:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802539a:	3201      	adds	r2, #1
 802539c:	455a      	cmp	r2, fp
 802539e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80253a0:	d1b9      	bne.n	8025316 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80253a2:	8811      	ldrh	r1, [r2, #0]
 80253a4:	3101      	adds	r1, #1
 80253a6:	8011      	strh	r1, [r2, #0]
 80253a8:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80253ac:	9b03      	ldr	r3, [sp, #12]
 80253ae:	3301      	adds	r3, #1
 80253b0:	d0c2      	beq.n	8025338 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80253b2:	f10b 0a01 	add.w	sl, fp, #1
 80253b6:	9d04      	ldr	r5, [sp, #16]
 80253b8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80253bc:	4553      	cmp	r3, sl
 80253be:	dd88      	ble.n	80252d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80253c0:	01b1      	lsls	r1, r6, #6
 80253c2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80253c6:	f7ff fd05 	bl	8024dd4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80253ca:	4683      	mov	fp, r0
 80253cc:	2800      	cmp	r0, #0
 80253ce:	d080      	beq.n	80252d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80253d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80253d2:	b183      	cbz	r3, 80253f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80253d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80253d6:	454b      	cmp	r3, r9
 80253d8:	d00d      	beq.n	80253f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80253da:	4641      	mov	r1, r8
 80253dc:	9805      	ldr	r0, [sp, #20]
 80253de:	f7ff fd0d 	bl	8024dfc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80253e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80253e6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80253ea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80253ec:	65e3      	str	r3, [r4, #92]	; 0x5c
 80253ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80253f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80253f2:	2300      	movs	r3, #0
 80253f4:	6563      	str	r3, [r4, #84]	; 0x54
 80253f6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80253fa:	464a      	mov	r2, r9
 80253fc:	f8cd b000 	str.w	fp, [sp]
 8025400:	4651      	mov	r1, sl
 8025402:	eba3 030a 	sub.w	r3, r3, sl
 8025406:	4640      	mov	r0, r8
 8025408:	f001 f884 	bl	8026514 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802540c:	e761      	b.n	80252d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802540e <_ZN8touchgfx6Canvas6renderEv>:
 802540e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025410:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8025414:	4604      	mov	r4, r0
 8025416:	b913      	cbnz	r3, 802541e <_ZN8touchgfx6Canvas6renderEv+0x10>
 8025418:	2001      	movs	r0, #1
 802541a:	b003      	add	sp, #12
 802541c:	bd30      	pop	{r4, r5, pc}
 802541e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8025422:	2b00      	cmp	r3, #0
 8025424:	d131      	bne.n	802548a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8025426:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802542a:	2b00      	cmp	r3, #0
 802542c:	d0f4      	beq.n	8025418 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802542e:	6840      	ldr	r0, [r0, #4]
 8025430:	6803      	ldr	r3, [r0, #0]
 8025432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025434:	4798      	blx	r3
 8025436:	2800      	cmp	r0, #0
 8025438:	d0ee      	beq.n	8025418 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802543a:	4620      	mov	r0, r4
 802543c:	f7ff fec7 	bl	80251ce <_ZN8touchgfx6Canvas5closeEv>
 8025440:	6860      	ldr	r0, [r4, #4]
 8025442:	6803      	ldr	r3, [r0, #0]
 8025444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025446:	4798      	blx	r3
 8025448:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802544c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8025450:	f7f3 f8c9 	bl	80185e6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8025454:	6860      	ldr	r0, [r4, #4]
 8025456:	6803      	ldr	r3, [r0, #0]
 8025458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802545a:	4798      	blx	r3
 802545c:	4605      	mov	r5, r0
 802545e:	6860      	ldr	r0, [r4, #4]
 8025460:	6803      	ldr	r3, [r0, #0]
 8025462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025464:	4798      	blx	r3
 8025466:	4601      	mov	r1, r0
 8025468:	4628      	mov	r0, r5
 802546a:	f7f3 f8bf 	bl	80185ec <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802546e:	6860      	ldr	r0, [r4, #4]
 8025470:	6803      	ldr	r3, [r0, #0]
 8025472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025474:	4798      	blx	r3
 8025476:	f104 0318 	add.w	r3, r4, #24
 802547a:	4669      	mov	r1, sp
 802547c:	e9cd 3000 	strd	r3, r0, [sp]
 8025480:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025484:	f7ff ff06 	bl	8025294 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8025488:	e7c7      	b.n	802541a <_ZN8touchgfx6Canvas6renderEv+0xc>
 802548a:	2000      	movs	r0, #0
 802548c:	e7c5      	b.n	802541a <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08025490 <_ZN8touchgfx6CanvasD1Ev>:
 8025490:	b538      	push	{r3, r4, r5, lr}
 8025492:	4605      	mov	r5, r0
 8025494:	4b08      	ldr	r3, [pc, #32]	; (80254b8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8025496:	4604      	mov	r4, r0
 8025498:	f845 3b2c 	str.w	r3, [r5], #44
 802549c:	4b07      	ldr	r3, [pc, #28]	; (80254bc <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802549e:	6818      	ldr	r0, [r3, #0]
 80254a0:	6803      	ldr	r3, [r0, #0]
 80254a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80254a4:	4798      	blx	r3
 80254a6:	4628      	mov	r0, r5
 80254a8:	f000 f814 	bl	80254d4 <_ZN8touchgfx7OutlineD1Ev>
 80254ac:	f104 0018 	add.w	r0, r4, #24
 80254b0:	f001 f870 	bl	8026594 <_ZN8touchgfx15RenderingBufferD1Ev>
 80254b4:	4620      	mov	r0, r4
 80254b6:	bd38      	pop	{r3, r4, r5, pc}
 80254b8:	0802b8f4 	.word	0x0802b8f4
 80254bc:	2000c63c 	.word	0x2000c63c

080254c0 <_ZN8touchgfx6CanvasD0Ev>:
 80254c0:	b510      	push	{r4, lr}
 80254c2:	4604      	mov	r4, r0
 80254c4:	f7ff ffe4 	bl	8025490 <_ZN8touchgfx6CanvasD1Ev>
 80254c8:	21b8      	movs	r1, #184	; 0xb8
 80254ca:	4620      	mov	r0, r4
 80254cc:	f001 f870 	bl	80265b0 <_ZdlPvj>
 80254d0:	4620      	mov	r0, r4
 80254d2:	bd10      	pop	{r4, pc}

080254d4 <_ZN8touchgfx7OutlineD1Ev>:
 80254d4:	4770      	bx	lr

080254d6 <_ZN8touchgfx7OutlineD0Ev>:
 80254d6:	b510      	push	{r4, lr}
 80254d8:	4604      	mov	r4, r0
 80254da:	2148      	movs	r1, #72	; 0x48
 80254dc:	f001 f868 	bl	80265b0 <_ZdlPvj>
 80254e0:	4620      	mov	r0, r4
 80254e2:	bd10      	pop	{r4, pc}

080254e4 <_ZN8touchgfx7Outline5resetEv>:
 80254e4:	b510      	push	{r4, lr}
 80254e6:	4604      	mov	r4, r0
 80254e8:	f7f4 f8fc 	bl	80196e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80254ec:	60e0      	str	r0, [r4, #12]
 80254ee:	f7f4 f8ff 	bl	80196f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80254f2:	68e3      	ldr	r3, [r4, #12]
 80254f4:	2200      	movs	r2, #0
 80254f6:	08c0      	lsrs	r0, r0, #3
 80254f8:	6123      	str	r3, [r4, #16]
 80254fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80254fe:	6060      	str	r0, [r4, #4]
 8025500:	82a3      	strh	r3, [r4, #20]
 8025502:	82e3      	strh	r3, [r4, #22]
 8025504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025506:	60a2      	str	r2, [r4, #8]
 8025508:	f023 0301 	bic.w	r3, r3, #1
 802550c:	8322      	strh	r2, [r4, #24]
 802550e:	8362      	strh	r2, [r4, #26]
 8025510:	f043 0302 	orr.w	r3, r3, #2
 8025514:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025518:	63e3      	str	r3, [r4, #60]	; 0x3c
 802551a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802551e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8025522:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8025526:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802552a:	bd10      	pop	{r4, pc}

0802552c <_ZN8touchgfx7OutlineC1Ev>:
 802552c:	4b0f      	ldr	r3, [pc, #60]	; (802556c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802552e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025532:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025536:	b510      	push	{r4, lr}
 8025538:	6003      	str	r3, [r0, #0]
 802553a:	2300      	movs	r3, #0
 802553c:	4604      	mov	r4, r0
 802553e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8025542:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025546:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802554a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802554e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025552:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8025556:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802555a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802555e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8025562:	f7ff ffbf 	bl	80254e4 <_ZN8touchgfx7Outline5resetEv>
 8025566:	4620      	mov	r0, r4
 8025568:	bd10      	pop	{r4, pc}
 802556a:	bf00      	nop
 802556c:	0802b954 	.word	0x0802b954

08025570 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8025570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025574:	b093      	sub	sp, #76	; 0x4c
 8025576:	4604      	mov	r4, r0
 8025578:	1156      	asrs	r6, r2, #5
 802557a:	f002 0e1f 	and.w	lr, r2, #31
 802557e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8025580:	9305      	str	r3, [sp, #20]
 8025582:	1143      	asrs	r3, r0, #5
 8025584:	1145      	asrs	r5, r0, #5
 8025586:	930c      	str	r3, [sp, #48]	; 0x30
 8025588:	f000 031f 	and.w	r3, r0, #31
 802558c:	9303      	str	r3, [sp, #12]
 802558e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8025590:	42b3      	cmp	r3, r6
 8025592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025594:	bfc8      	it	gt
 8025596:	6326      	strgt	r6, [r4, #48]	; 0x30
 8025598:	42b3      	cmp	r3, r6
 802559a:	bfdc      	itt	le
 802559c:	1c73      	addle	r3, r6, #1
 802559e:	63a3      	strle	r3, [r4, #56]	; 0x38
 80255a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80255a2:	42ab      	cmp	r3, r5
 80255a4:	bfc8      	it	gt
 80255a6:	462b      	movgt	r3, r5
 80255a8:	ea4f 1560 	mov.w	r5, r0, asr #5
 80255ac:	bfc8      	it	gt
 80255ae:	6323      	strgt	r3, [r4, #48]	; 0x30
 80255b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80255b2:	42ab      	cmp	r3, r5
 80255b4:	bfd8      	it	le
 80255b6:	462b      	movle	r3, r5
 80255b8:	ea4f 1561 	mov.w	r5, r1, asr #5
 80255bc:	bfdc      	itt	le
 80255be:	3301      	addle	r3, #1
 80255c0:	63a3      	strle	r3, [r4, #56]	; 0x38
 80255c2:	9b05      	ldr	r3, [sp, #20]
 80255c4:	eba3 0a01 	sub.w	sl, r3, r1
 80255c8:	1143      	asrs	r3, r0, #5
 80255ca:	429e      	cmp	r6, r3
 80255cc:	f040 8119 	bne.w	8025802 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80255d0:	9b05      	ldr	r3, [sp, #20]
 80255d2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80255d6:	9b03      	ldr	r3, [sp, #12]
 80255d8:	459e      	cmp	lr, r3
 80255da:	d12c      	bne.n	8025636 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80255dc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80255e0:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80255e4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80255e8:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80255ec:	4291      	cmp	r1, r2
 80255ee:	d037      	beq.n	8025660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80255f0:	8b61      	ldrh	r1, [r4, #26]
 80255f2:	8b22      	ldrh	r2, [r4, #24]
 80255f4:	430a      	orrs	r2, r1
 80255f6:	d00b      	beq.n	8025610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80255f8:	2b00      	cmp	r3, #0
 80255fa:	db09      	blt.n	8025610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80255fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80255fe:	429a      	cmp	r2, r3
 8025600:	dd06      	ble.n	8025610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025602:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025606:	429a      	cmp	r2, r3
 8025608:	d308      	bcc.n	802561c <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802560a:	2301      	movs	r3, #1
 802560c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025610:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025614:	82e6      	strh	r6, [r4, #22]
 8025616:	2300      	movs	r3, #0
 8025618:	8323      	strh	r3, [r4, #24]
 802561a:	e0c6      	b.n	80257aa <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802561c:	f104 0314 	add.w	r3, r4, #20
 8025620:	6922      	ldr	r2, [r4, #16]
 8025622:	cb03      	ldmia	r3!, {r0, r1}
 8025624:	6010      	str	r0, [r2, #0]
 8025626:	6051      	str	r1, [r2, #4]
 8025628:	6923      	ldr	r3, [r4, #16]
 802562a:	3308      	adds	r3, #8
 802562c:	6123      	str	r3, [r4, #16]
 802562e:	68a3      	ldr	r3, [r4, #8]
 8025630:	3301      	adds	r3, #1
 8025632:	60a3      	str	r3, [r4, #8]
 8025634:	e7ec      	b.n	8025610 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025636:	9b05      	ldr	r3, [sp, #20]
 8025638:	45ac      	cmp	ip, r5
 802563a:	f001 011f 	and.w	r1, r1, #31
 802563e:	8b20      	ldrh	r0, [r4, #24]
 8025640:	f003 031f 	and.w	r3, r3, #31
 8025644:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8025648:	9304      	str	r3, [sp, #16]
 802564a:	9b03      	ldr	r3, [sp, #12]
 802564c:	eba3 020e 	sub.w	r2, r3, lr
 8025650:	d109      	bne.n	8025666 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8025652:	9b04      	ldr	r3, [sp, #16]
 8025654:	4410      	add	r0, r2
 8025656:	4419      	add	r1, r3
 8025658:	8320      	strh	r0, [r4, #24]
 802565a:	fb02 8201 	mla	r2, r2, r1, r8
 802565e:	8362      	strh	r2, [r4, #26]
 8025660:	b013      	add	sp, #76	; 0x4c
 8025662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025666:	f1ba 0f00 	cmp.w	sl, #0
 802566a:	f2c0 80a0 	blt.w	80257ae <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802566e:	f1c1 0320 	rsb	r3, r1, #32
 8025672:	f04f 0b20 	mov.w	fp, #32
 8025676:	435a      	muls	r2, r3
 8025678:	2301      	movs	r3, #1
 802567a:	9302      	str	r3, [sp, #8]
 802567c:	4459      	add	r1, fp
 802567e:	fb92 f7fa 	sdiv	r7, r2, sl
 8025682:	fb0a 2217 	mls	r2, sl, r7, r2
 8025686:	2a00      	cmp	r2, #0
 8025688:	bfbc      	itt	lt
 802568a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802568e:	4452      	addlt	r2, sl
 8025690:	fb07 8101 	mla	r1, r7, r1, r8
 8025694:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025698:	4438      	add	r0, r7
 802569a:	b20b      	sxth	r3, r1
 802569c:	9902      	ldr	r1, [sp, #8]
 802569e:	b200      	sxth	r0, r0
 80256a0:	9301      	str	r3, [sp, #4]
 80256a2:	8363      	strh	r3, [r4, #26]
 80256a4:	186b      	adds	r3, r5, r1
 80256a6:	0435      	lsls	r5, r6, #16
 80256a8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80256ac:	8320      	strh	r0, [r4, #24]
 80256ae:	eb03 0905 	add.w	r9, r3, r5
 80256b2:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80256b6:	9300      	str	r3, [sp, #0]
 80256b8:	45c1      	cmp	r9, r8
 80256ba:	9505      	str	r5, [sp, #20]
 80256bc:	d014      	beq.n	80256e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80256be:	9b01      	ldr	r3, [sp, #4]
 80256c0:	4303      	orrs	r3, r0
 80256c2:	d00b      	beq.n	80256dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80256c4:	2900      	cmp	r1, #0
 80256c6:	db09      	blt.n	80256dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80256c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80256ca:	428b      	cmp	r3, r1
 80256cc:	dd06      	ble.n	80256dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80256ce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80256d2:	4299      	cmp	r1, r3
 80256d4:	d374      	bcc.n	80257c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80256d6:	2301      	movs	r3, #1
 80256d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80256dc:	9b00      	ldr	r3, [sp, #0]
 80256de:	82e6      	strh	r6, [r4, #22]
 80256e0:	82a3      	strh	r3, [r4, #20]
 80256e2:	2300      	movs	r3, #0
 80256e4:	8323      	strh	r3, [r4, #24]
 80256e6:	8363      	strh	r3, [r4, #26]
 80256e8:	9900      	ldr	r1, [sp, #0]
 80256ea:	eb0e 0307 	add.w	r3, lr, r7
 80256ee:	458c      	cmp	ip, r1
 80256f0:	d04e      	beq.n	8025790 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80256f2:	9903      	ldr	r1, [sp, #12]
 80256f4:	eba2 020a 	sub.w	r2, r2, sl
 80256f8:	1ac9      	subs	r1, r1, r3
 80256fa:	9201      	str	r2, [sp, #4]
 80256fc:	440f      	add	r7, r1
 80256fe:	017f      	lsls	r7, r7, #5
 8025700:	fb97 fefa 	sdiv	lr, r7, sl
 8025704:	fb0a 771e 	mls	r7, sl, lr, r7
 8025708:	2f00      	cmp	r7, #0
 802570a:	bfbc      	itt	lt
 802570c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025710:	4457      	addlt	r7, sl
 8025712:	f10e 0101 	add.w	r1, lr, #1
 8025716:	9106      	str	r1, [sp, #24]
 8025718:	9a01      	ldr	r2, [sp, #4]
 802571a:	8b20      	ldrh	r0, [r4, #24]
 802571c:	19d2      	adds	r2, r2, r7
 802571e:	8b61      	ldrh	r1, [r4, #26]
 8025720:	9d02      	ldr	r5, [sp, #8]
 8025722:	9201      	str	r2, [sp, #4]
 8025724:	bf5b      	ittet	pl
 8025726:	eba2 020a 	subpl.w	r2, r2, sl
 802572a:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802572e:	46f0      	movmi	r8, lr
 8025730:	9201      	strpl	r2, [sp, #4]
 8025732:	9a00      	ldr	r2, [sp, #0]
 8025734:	4440      	add	r0, r8
 8025736:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802573a:	4443      	add	r3, r8
 802573c:	442a      	add	r2, r5
 802573e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025742:	9d05      	ldr	r5, [sp, #20]
 8025744:	b200      	sxth	r0, r0
 8025746:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802574a:	b209      	sxth	r1, r1
 802574c:	4415      	add	r5, r2
 802574e:	8320      	strh	r0, [r4, #24]
 8025750:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025754:	8361      	strh	r1, [r4, #26]
 8025756:	9200      	str	r2, [sp, #0]
 8025758:	454d      	cmp	r5, r9
 802575a:	d016      	beq.n	802578a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802575c:	4301      	orrs	r1, r0
 802575e:	d00d      	beq.n	802577c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025760:	f1b8 0f00 	cmp.w	r8, #0
 8025764:	db0a      	blt.n	802577c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025766:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025768:	4541      	cmp	r1, r8
 802576a:	dd07      	ble.n	802577c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802576c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025770:	4288      	cmp	r0, r1
 8025772:	d335      	bcc.n	80257e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8025774:	f04f 0101 	mov.w	r1, #1
 8025778:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802577c:	9900      	ldr	r1, [sp, #0]
 802577e:	82e6      	strh	r6, [r4, #22]
 8025780:	82a1      	strh	r1, [r4, #20]
 8025782:	f04f 0100 	mov.w	r1, #0
 8025786:	8321      	strh	r1, [r4, #24]
 8025788:	8361      	strh	r1, [r4, #26]
 802578a:	9a00      	ldr	r2, [sp, #0]
 802578c:	4594      	cmp	ip, r2
 802578e:	d1c3      	bne.n	8025718 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8025790:	9a03      	ldr	r2, [sp, #12]
 8025792:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8025796:	1ad3      	subs	r3, r2, r3
 8025798:	8b22      	ldrh	r2, [r4, #24]
 802579a:	441a      	add	r2, r3
 802579c:	8322      	strh	r2, [r4, #24]
 802579e:	9a04      	ldr	r2, [sp, #16]
 80257a0:	3220      	adds	r2, #32
 80257a2:	eba2 020b 	sub.w	r2, r2, fp
 80257a6:	fb03 c302 	mla	r3, r3, r2, ip
 80257aa:	8363      	strh	r3, [r4, #26]
 80257ac:	e758      	b.n	8025660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80257ae:	f04f 33ff 	mov.w	r3, #4294967295
 80257b2:	434a      	muls	r2, r1
 80257b4:	f1ca 0a00 	rsb	sl, sl, #0
 80257b8:	f04f 0b00 	mov.w	fp, #0
 80257bc:	9302      	str	r3, [sp, #8]
 80257be:	e75d      	b.n	802567c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80257c0:	f104 0314 	add.w	r3, r4, #20
 80257c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80257c8:	cb03      	ldmia	r3!, {r0, r1}
 80257ca:	f8c8 0000 	str.w	r0, [r8]
 80257ce:	f8c8 1004 	str.w	r1, [r8, #4]
 80257d2:	6923      	ldr	r3, [r4, #16]
 80257d4:	3308      	adds	r3, #8
 80257d6:	6123      	str	r3, [r4, #16]
 80257d8:	68a3      	ldr	r3, [r4, #8]
 80257da:	3301      	adds	r3, #1
 80257dc:	60a3      	str	r3, [r4, #8]
 80257de:	e77d      	b.n	80256dc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80257e0:	f104 0814 	add.w	r8, r4, #20
 80257e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80257e8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80257ec:	f8c9 0000 	str.w	r0, [r9]
 80257f0:	f8c9 1004 	str.w	r1, [r9, #4]
 80257f4:	6921      	ldr	r1, [r4, #16]
 80257f6:	3108      	adds	r1, #8
 80257f8:	6121      	str	r1, [r4, #16]
 80257fa:	68a1      	ldr	r1, [r4, #8]
 80257fc:	3101      	adds	r1, #1
 80257fe:	60a1      	str	r1, [r4, #8]
 8025800:	e7bc      	b.n	802577c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025802:	1a83      	subs	r3, r0, r2
 8025804:	9301      	str	r3, [sp, #4]
 8025806:	f1ba 0f00 	cmp.w	sl, #0
 802580a:	f040 8094 	bne.w	8025936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802580e:	9a01      	ldr	r2, [sp, #4]
 8025810:	0049      	lsls	r1, r1, #1
 8025812:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8025816:	2a00      	cmp	r2, #0
 8025818:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802581c:	8b62      	ldrh	r2, [r4, #26]
 802581e:	bfaa      	itet	ge
 8025820:	f04f 0a20 	movge.w	sl, #32
 8025824:	f04f 38ff 	movlt.w	r8, #4294967295
 8025828:	f04f 0801 	movge.w	r8, #1
 802582c:	8b21      	ldrh	r1, [r4, #24]
 802582e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8025832:	4471      	add	r1, lr
 8025834:	fb0e 2e03 	mla	lr, lr, r3, r2
 8025838:	eb08 0206 	add.w	r2, r8, r6
 802583c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8025840:	b209      	sxth	r1, r1
 8025842:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8025846:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802584a:	8321      	strh	r1, [r4, #24]
 802584c:	fa0f fe8e 	sxth.w	lr, lr
 8025850:	42b7      	cmp	r7, r6
 8025852:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025856:	d013      	beq.n	8025880 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8025858:	ea51 010e 	orrs.w	r1, r1, lr
 802585c:	d00b      	beq.n	8025876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802585e:	2800      	cmp	r0, #0
 8025860:	db09      	blt.n	8025876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025862:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025864:	4281      	cmp	r1, r0
 8025866:	dd06      	ble.n	8025876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025868:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802586c:	4288      	cmp	r0, r1
 802586e:	d339      	bcc.n	80258e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8025870:	2101      	movs	r1, #1
 8025872:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025876:	2100      	movs	r1, #0
 8025878:	82a5      	strh	r5, [r4, #20]
 802587a:	82e2      	strh	r2, [r4, #22]
 802587c:	8321      	strh	r1, [r4, #24]
 802587e:	8361      	strh	r1, [r4, #26]
 8025880:	f1aa 0610 	sub.w	r6, sl, #16
 8025884:	f04f 0e00 	mov.w	lr, #0
 8025888:	f04f 0b01 	mov.w	fp, #1
 802588c:	0076      	lsls	r6, r6, #1
 802588e:	fb06 f703 	mul.w	r7, r6, r3
 8025892:	b236      	sxth	r6, r6
 8025894:	b23f      	sxth	r7, r7
 8025896:	ea46 0107 	orr.w	r1, r6, r7
 802589a:	9100      	str	r1, [sp, #0]
 802589c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802589e:	428a      	cmp	r2, r1
 80258a0:	d03e      	beq.n	8025920 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80258a2:	4442      	add	r2, r8
 80258a4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80258a8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80258ac:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80258b0:	8326      	strh	r6, [r4, #24]
 80258b2:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80258b6:	8367      	strh	r7, [r4, #26]
 80258b8:	4584      	cmp	ip, r0
 80258ba:	d0ef      	beq.n	802589c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80258bc:	9800      	ldr	r0, [sp, #0]
 80258be:	b150      	cbz	r0, 80258d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80258c0:	2900      	cmp	r1, #0
 80258c2:	db08      	blt.n	80258d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80258c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80258c6:	4288      	cmp	r0, r1
 80258c8:	dd05      	ble.n	80258d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80258ca:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80258ce:	4288      	cmp	r0, r1
 80258d0:	d315      	bcc.n	80258fe <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80258d2:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80258d6:	82a5      	strh	r5, [r4, #20]
 80258d8:	82e2      	strh	r2, [r4, #22]
 80258da:	f8a4 e018 	strh.w	lr, [r4, #24]
 80258de:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80258e2:	e7db      	b.n	802589c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80258e4:	f104 0614 	add.w	r6, r4, #20
 80258e8:	6927      	ldr	r7, [r4, #16]
 80258ea:	ce03      	ldmia	r6!, {r0, r1}
 80258ec:	6038      	str	r0, [r7, #0]
 80258ee:	6079      	str	r1, [r7, #4]
 80258f0:	6921      	ldr	r1, [r4, #16]
 80258f2:	3108      	adds	r1, #8
 80258f4:	6121      	str	r1, [r4, #16]
 80258f6:	68a1      	ldr	r1, [r4, #8]
 80258f8:	3101      	adds	r1, #1
 80258fa:	60a1      	str	r1, [r4, #8]
 80258fc:	e7bb      	b.n	8025876 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80258fe:	f104 0c14 	add.w	ip, r4, #20
 8025902:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025906:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802590a:	f8c9 0000 	str.w	r0, [r9]
 802590e:	f8c9 1004 	str.w	r1, [r9, #4]
 8025912:	6921      	ldr	r1, [r4, #16]
 8025914:	3108      	adds	r1, #8
 8025916:	6121      	str	r1, [r4, #16]
 8025918:	68a1      	ldr	r1, [r4, #8]
 802591a:	3101      	adds	r1, #1
 802591c:	60a1      	str	r1, [r4, #8]
 802591e:	e7da      	b.n	80258d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8025920:	9a03      	ldr	r2, [sp, #12]
 8025922:	8b61      	ldrh	r1, [r4, #26]
 8025924:	f1a2 0c20 	sub.w	ip, r2, #32
 8025928:	8b22      	ldrh	r2, [r4, #24]
 802592a:	44d4      	add	ip, sl
 802592c:	4462      	add	r2, ip
 802592e:	fb0c 1303 	mla	r3, ip, r3, r1
 8025932:	8322      	strh	r2, [r4, #24]
 8025934:	e739      	b.n	80257aa <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8025936:	9b01      	ldr	r3, [sp, #4]
 8025938:	2b00      	cmp	r3, #0
 802593a:	db3f      	blt.n	80259bc <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 802593c:	2201      	movs	r2, #1
 802593e:	f1ce 0320 	rsb	r3, lr, #32
 8025942:	920b      	str	r2, [sp, #44]	; 0x2c
 8025944:	2220      	movs	r2, #32
 8025946:	fb0a f303 	mul.w	r3, sl, r3
 802594a:	9202      	str	r2, [sp, #8]
 802594c:	9a01      	ldr	r2, [sp, #4]
 802594e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025952:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025956:	fb93 f7f2 	sdiv	r7, r3, r2
 802595a:	fb02 3317 	mls	r3, r2, r7, r3
 802595e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025962:	2b00      	cmp	r3, #0
 8025964:	9308      	str	r3, [sp, #32]
 8025966:	bfbc      	itt	lt
 8025968:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802596c:	189b      	addlt	r3, r3, r2
 802596e:	eb07 0b01 	add.w	fp, r7, r1
 8025972:	bfb8      	it	lt
 8025974:	9308      	strlt	r3, [sp, #32]
 8025976:	ea4f 136b 	mov.w	r3, fp, asr #5
 802597a:	9304      	str	r3, [sp, #16]
 802597c:	9b02      	ldr	r3, [sp, #8]
 802597e:	4573      	cmp	r3, lr
 8025980:	d133      	bne.n	80259ea <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8025982:	9b04      	ldr	r3, [sp, #16]
 8025984:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8025988:	454b      	cmp	r3, r9
 802598a:	d045      	beq.n	8025a18 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802598c:	8b62      	ldrh	r2, [r4, #26]
 802598e:	8b23      	ldrh	r3, [r4, #24]
 8025990:	4313      	orrs	r3, r2
 8025992:	d00c      	beq.n	80259ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8025994:	f1b8 0f00 	cmp.w	r8, #0
 8025998:	db09      	blt.n	80259ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802599a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802599c:	4543      	cmp	r3, r8
 802599e:	dd06      	ble.n	80259ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80259a0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80259a4:	429a      	cmp	r2, r3
 80259a6:	d313      	bcc.n	80259d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80259a8:	2301      	movs	r3, #1
 80259aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80259ae:	9b04      	ldr	r3, [sp, #16]
 80259b0:	82e6      	strh	r6, [r4, #22]
 80259b2:	82a3      	strh	r3, [r4, #20]
 80259b4:	2300      	movs	r3, #0
 80259b6:	8323      	strh	r3, [r4, #24]
 80259b8:	8363      	strh	r3, [r4, #26]
 80259ba:	e02d      	b.n	8025a18 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80259bc:	9a01      	ldr	r2, [sp, #4]
 80259be:	fb0a f30e 	mul.w	r3, sl, lr
 80259c2:	4252      	negs	r2, r2
 80259c4:	9201      	str	r2, [sp, #4]
 80259c6:	f04f 32ff 	mov.w	r2, #4294967295
 80259ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80259cc:	2200      	movs	r2, #0
 80259ce:	e7bc      	b.n	802594a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80259d0:	f104 0314 	add.w	r3, r4, #20
 80259d4:	6922      	ldr	r2, [r4, #16]
 80259d6:	cb03      	ldmia	r3!, {r0, r1}
 80259d8:	6010      	str	r0, [r2, #0]
 80259da:	6051      	str	r1, [r2, #4]
 80259dc:	6923      	ldr	r3, [r4, #16]
 80259de:	3308      	adds	r3, #8
 80259e0:	6123      	str	r3, [r4, #16]
 80259e2:	68a3      	ldr	r3, [r4, #8]
 80259e4:	3301      	adds	r3, #1
 80259e6:	60a3      	str	r3, [r4, #8]
 80259e8:	e7e1      	b.n	80259ae <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80259ea:	f00b 031f 	and.w	r3, fp, #31
 80259ee:	f001 011f 	and.w	r1, r1, #31
 80259f2:	8b20      	ldrh	r0, [r4, #24]
 80259f4:	9309      	str	r3, [sp, #36]	; 0x24
 80259f6:	9b02      	ldr	r3, [sp, #8]
 80259f8:	eba3 020e 	sub.w	r2, r3, lr
 80259fc:	8b63      	ldrh	r3, [r4, #26]
 80259fe:	9300      	str	r3, [sp, #0]
 8025a00:	9b04      	ldr	r3, [sp, #16]
 8025a02:	42ab      	cmp	r3, r5
 8025a04:	f040 80ef 	bne.w	8025be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8025a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a0a:	4410      	add	r0, r2
 8025a0c:	4419      	add	r1, r3
 8025a0e:	9b00      	ldr	r3, [sp, #0]
 8025a10:	8320      	strh	r0, [r4, #24]
 8025a12:	fb02 3101 	mla	r1, r2, r1, r3
 8025a16:	8361      	strh	r1, [r4, #26]
 8025a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025a1a:	9904      	ldr	r1, [sp, #16]
 8025a1c:	4433      	add	r3, r6
 8025a1e:	9300      	str	r3, [sp, #0]
 8025a20:	9a00      	ldr	r2, [sp, #0]
 8025a22:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025a26:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8025a2a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025a2e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025a32:	4288      	cmp	r0, r1
 8025a34:	d018      	beq.n	8025a68 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8025a36:	8b60      	ldrh	r0, [r4, #26]
 8025a38:	8b21      	ldrh	r1, [r4, #24]
 8025a3a:	ea50 0201 	orrs.w	r2, r0, r1
 8025a3e:	d00c      	beq.n	8025a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025a40:	2b00      	cmp	r3, #0
 8025a42:	db0a      	blt.n	8025a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025a44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025a46:	4299      	cmp	r1, r3
 8025a48:	dd07      	ble.n	8025a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025a4a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025a4e:	4299      	cmp	r1, r3
 8025a50:	f0c0 818b 	bcc.w	8025d6a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8025a54:	2301      	movs	r3, #1
 8025a56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025a5a:	9b04      	ldr	r3, [sp, #16]
 8025a5c:	82a3      	strh	r3, [r4, #20]
 8025a5e:	9b00      	ldr	r3, [sp, #0]
 8025a60:	82e3      	strh	r3, [r4, #22]
 8025a62:	2300      	movs	r3, #0
 8025a64:	8323      	strh	r3, [r4, #24]
 8025a66:	8363      	strh	r3, [r4, #26]
 8025a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025a6a:	9a00      	ldr	r2, [sp, #0]
 8025a6c:	4293      	cmp	r3, r2
 8025a6e:	f000 808d 	beq.w	8025b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8025a72:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8025a76:	9901      	ldr	r1, [sp, #4]
 8025a78:	9801      	ldr	r0, [sp, #4]
 8025a7a:	fb93 f1f1 	sdiv	r1, r3, r1
 8025a7e:	fb00 3311 	mls	r3, r0, r1, r3
 8025a82:	9106      	str	r1, [sp, #24]
 8025a84:	2b00      	cmp	r3, #0
 8025a86:	9307      	str	r3, [sp, #28]
 8025a88:	da04      	bge.n	8025a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8025a8a:	1e4b      	subs	r3, r1, #1
 8025a8c:	9306      	str	r3, [sp, #24]
 8025a8e:	9b07      	ldr	r3, [sp, #28]
 8025a90:	4403      	add	r3, r0
 8025a92:	9307      	str	r3, [sp, #28]
 8025a94:	9b08      	ldr	r3, [sp, #32]
 8025a96:	f04f 0c00 	mov.w	ip, #0
 8025a9a:	9901      	ldr	r1, [sp, #4]
 8025a9c:	1a5b      	subs	r3, r3, r1
 8025a9e:	4659      	mov	r1, fp
 8025aa0:	9308      	str	r3, [sp, #32]
 8025aa2:	9b02      	ldr	r3, [sp, #8]
 8025aa4:	f1c3 0320 	rsb	r3, r3, #32
 8025aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8025aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025aac:	9b02      	ldr	r3, [sp, #8]
 8025aae:	1a1b      	subs	r3, r3, r0
 8025ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8025ab2:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8025ab6:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025aba:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8025abe:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8025ac2:	181b      	adds	r3, r3, r0
 8025ac4:	bf58      	it	pl
 8025ac6:	9801      	ldrpl	r0, [sp, #4]
 8025ac8:	9308      	str	r3, [sp, #32]
 8025aca:	bf54      	ite	pl
 8025acc:	1a1b      	subpl	r3, r3, r0
 8025ace:	9d06      	ldrmi	r5, [sp, #24]
 8025ad0:	9802      	ldr	r0, [sp, #8]
 8025ad2:	bf5e      	ittt	pl
 8025ad4:	9308      	strpl	r3, [sp, #32]
 8025ad6:	9b06      	ldrpl	r3, [sp, #24]
 8025ad8:	1c5d      	addpl	r5, r3, #1
 8025ada:	44ab      	add	fp, r5
 8025adc:	ea4f 136b 	mov.w	r3, fp, asr #5
 8025ae0:	9304      	str	r3, [sp, #16]
 8025ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ae4:	4283      	cmp	r3, r0
 8025ae6:	f040 815a 	bne.w	8025d9e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8025aea:	9b04      	ldr	r3, [sp, #16]
 8025aec:	9a00      	ldr	r2, [sp, #0]
 8025aee:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8025af2:	4543      	cmp	r3, r8
 8025af4:	d01a      	beq.n	8025b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025af6:	8b61      	ldrh	r1, [r4, #26]
 8025af8:	8b23      	ldrh	r3, [r4, #24]
 8025afa:	430b      	orrs	r3, r1
 8025afc:	d00e      	beq.n	8025b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025afe:	f1be 0f00 	cmp.w	lr, #0
 8025b02:	db0b      	blt.n	8025b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025b06:	4573      	cmp	r3, lr
 8025b08:	dd08      	ble.n	8025b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025b0a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025b0e:	4299      	cmp	r1, r3
 8025b10:	f0c0 8138 	bcc.w	8025d84 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8025b14:	f04f 0301 	mov.w	r3, #1
 8025b18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025b1c:	9b04      	ldr	r3, [sp, #16]
 8025b1e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025b22:	82a3      	strh	r3, [r4, #20]
 8025b24:	9b00      	ldr	r3, [sp, #0]
 8025b26:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025b2a:	82e3      	strh	r3, [r4, #22]
 8025b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b2e:	9a00      	ldr	r2, [sp, #0]
 8025b30:	441a      	add	r2, r3
 8025b32:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025b36:	9200      	str	r2, [sp, #0]
 8025b38:	9900      	ldr	r1, [sp, #0]
 8025b3a:	9a04      	ldr	r2, [sp, #16]
 8025b3c:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8025b40:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025b48:	4288      	cmp	r0, r1
 8025b4a:	d01a      	beq.n	8025b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8025b4c:	8b60      	ldrh	r0, [r4, #26]
 8025b4e:	8b21      	ldrh	r1, [r4, #24]
 8025b50:	ea50 0201 	orrs.w	r2, r0, r1
 8025b54:	d00d      	beq.n	8025b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	db0b      	blt.n	8025b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025b5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025b5c:	4299      	cmp	r1, r3
 8025b5e:	dd08      	ble.n	8025b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025b60:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025b64:	4299      	cmp	r1, r3
 8025b66:	f0c0 81f9 	bcc.w	8025f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8025b6a:	f04f 0301 	mov.w	r3, #1
 8025b6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025b72:	9b04      	ldr	r3, [sp, #16]
 8025b74:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025b78:	82a3      	strh	r3, [r4, #20]
 8025b7a:	9b00      	ldr	r3, [sp, #0]
 8025b7c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025b80:	82e3      	strh	r3, [r4, #22]
 8025b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b84:	4659      	mov	r1, fp
 8025b86:	9a00      	ldr	r2, [sp, #0]
 8025b88:	4293      	cmp	r3, r2
 8025b8a:	d192      	bne.n	8025ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8025b8c:	9b02      	ldr	r3, [sp, #8]
 8025b8e:	f1c3 0c20 	rsb	ip, r3, #32
 8025b92:	9b05      	ldr	r3, [sp, #20]
 8025b94:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8025b98:	9b03      	ldr	r3, [sp, #12]
 8025b9a:	459c      	cmp	ip, r3
 8025b9c:	f040 81f8 	bne.w	8025f90 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8025ba0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025ba4:	9a00      	ldr	r2, [sp, #0]
 8025ba6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025baa:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8025bae:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025bb2:	4288      	cmp	r0, r1
 8025bb4:	f43f ad54 	beq.w	8025660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025bb8:	8b60      	ldrh	r0, [r4, #26]
 8025bba:	8b21      	ldrh	r1, [r4, #24]
 8025bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8025bc0:	d00c      	beq.n	8025bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025bc2:	2b00      	cmp	r3, #0
 8025bc4:	db0a      	blt.n	8025bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025bc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025bc8:	4299      	cmp	r1, r3
 8025bca:	dd07      	ble.n	8025bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025bcc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025bd0:	4299      	cmp	r1, r3
 8025bd2:	f0c0 81d0 	bcc.w	8025f76 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8025bd6:	2301      	movs	r3, #1
 8025bd8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025bdc:	9b00      	ldr	r3, [sp, #0]
 8025bde:	f8a4 e014 	strh.w	lr, [r4, #20]
 8025be2:	82e3      	strh	r3, [r4, #22]
 8025be4:	e517      	b.n	8025616 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8025be6:	2f00      	cmp	r7, #0
 8025be8:	f2c0 8097 	blt.w	8025d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8025bec:	2301      	movs	r3, #1
 8025bee:	f1c1 0c20 	rsb	ip, r1, #32
 8025bf2:	9307      	str	r3, [sp, #28]
 8025bf4:	2320      	movs	r3, #32
 8025bf6:	fb02 f20c 	mul.w	r2, r2, ip
 8025bfa:	9306      	str	r3, [sp, #24]
 8025bfc:	9b06      	ldr	r3, [sp, #24]
 8025bfe:	fb92 fcf7 	sdiv	ip, r2, r7
 8025c02:	fb07 221c 	mls	r2, r7, ip, r2
 8025c06:	4419      	add	r1, r3
 8025c08:	9b00      	ldr	r3, [sp, #0]
 8025c0a:	2a00      	cmp	r2, #0
 8025c0c:	bfbc      	itt	lt
 8025c0e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025c12:	19d2      	addlt	r2, r2, r7
 8025c14:	fb0c 3101 	mla	r1, ip, r1, r3
 8025c18:	9b07      	ldr	r3, [sp, #28]
 8025c1a:	4460      	add	r0, ip
 8025c1c:	441d      	add	r5, r3
 8025c1e:	0433      	lsls	r3, r6, #16
 8025c20:	b200      	sxth	r0, r0
 8025c22:	930a      	str	r3, [sp, #40]	; 0x28
 8025c24:	18eb      	adds	r3, r5, r3
 8025c26:	b209      	sxth	r1, r1
 8025c28:	8320      	strh	r0, [r4, #24]
 8025c2a:	454b      	cmp	r3, r9
 8025c2c:	8361      	strh	r1, [r4, #26]
 8025c2e:	d014      	beq.n	8025c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8025c30:	ea50 0301 	orrs.w	r3, r0, r1
 8025c34:	d00c      	beq.n	8025c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025c36:	f1b8 0f00 	cmp.w	r8, #0
 8025c3a:	db09      	blt.n	8025c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025c3e:	4543      	cmp	r3, r8
 8025c40:	dd06      	ble.n	8025c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025c42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025c46:	4299      	cmp	r1, r3
 8025c48:	d36e      	bcc.n	8025d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8025c4a:	2301      	movs	r3, #1
 8025c4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025c50:	2300      	movs	r3, #0
 8025c52:	82a5      	strh	r5, [r4, #20]
 8025c54:	82e6      	strh	r6, [r4, #22]
 8025c56:	8323      	strh	r3, [r4, #24]
 8025c58:	8363      	strh	r3, [r4, #26]
 8025c5a:	9904      	ldr	r1, [sp, #16]
 8025c5c:	eb0e 030c 	add.w	r3, lr, ip
 8025c60:	42a9      	cmp	r1, r5
 8025c62:	d04d      	beq.n	8025d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8025c64:	9902      	ldr	r1, [sp, #8]
 8025c66:	1bd2      	subs	r2, r2, r7
 8025c68:	1ac9      	subs	r1, r1, r3
 8025c6a:	9200      	str	r2, [sp, #0]
 8025c6c:	448c      	add	ip, r1
 8025c6e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8025c72:	fb9c fef7 	sdiv	lr, ip, r7
 8025c76:	fb07 cc1e 	mls	ip, r7, lr, ip
 8025c7a:	f1bc 0f00 	cmp.w	ip, #0
 8025c7e:	bfbc      	itt	lt
 8025c80:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025c84:	44bc      	addlt	ip, r7
 8025c86:	f10e 0101 	add.w	r1, lr, #1
 8025c8a:	910d      	str	r1, [sp, #52]	; 0x34
 8025c8c:	9a00      	ldr	r2, [sp, #0]
 8025c8e:	8b20      	ldrh	r0, [r4, #24]
 8025c90:	eb12 020c 	adds.w	r2, r2, ip
 8025c94:	8b61      	ldrh	r1, [r4, #26]
 8025c96:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025c9a:	9200      	str	r2, [sp, #0]
 8025c9c:	bf5b      	ittet	pl
 8025c9e:	1bd2      	subpl	r2, r2, r7
 8025ca0:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8025ca4:	46f0      	movmi	r8, lr
 8025ca6:	9200      	strpl	r2, [sp, #0]
 8025ca8:	9a07      	ldr	r2, [sp, #28]
 8025caa:	4440      	add	r0, r8
 8025cac:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8025cb0:	4443      	add	r3, r8
 8025cb2:	4415      	add	r5, r2
 8025cb4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025cba:	b200      	sxth	r0, r0
 8025cbc:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025cc0:	442a      	add	r2, r5
 8025cc2:	b209      	sxth	r1, r1
 8025cc4:	8320      	strh	r0, [r4, #24]
 8025cc6:	454a      	cmp	r2, r9
 8025cc8:	8361      	strh	r1, [r4, #26]
 8025cca:	d016      	beq.n	8025cfa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8025ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8025cd0:	d00d      	beq.n	8025cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025cd2:	f1b8 0f00 	cmp.w	r8, #0
 8025cd6:	db0a      	blt.n	8025cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025cd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025cda:	4541      	cmp	r1, r8
 8025cdc:	dd07      	ble.n	8025cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025cde:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025ce2:	4288      	cmp	r0, r1
 8025ce4:	d330      	bcc.n	8025d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8025ce6:	f04f 0201 	mov.w	r2, #1
 8025cea:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025cee:	f04f 0200 	mov.w	r2, #0
 8025cf2:	82a5      	strh	r5, [r4, #20]
 8025cf4:	82e6      	strh	r6, [r4, #22]
 8025cf6:	8322      	strh	r2, [r4, #24]
 8025cf8:	8362      	strh	r2, [r4, #26]
 8025cfa:	9904      	ldr	r1, [sp, #16]
 8025cfc:	42a9      	cmp	r1, r5
 8025cfe:	d1c5      	bne.n	8025c8c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8025d00:	9a02      	ldr	r2, [sp, #8]
 8025d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025d04:	1ad3      	subs	r3, r2, r3
 8025d06:	8b22      	ldrh	r2, [r4, #24]
 8025d08:	3120      	adds	r1, #32
 8025d0a:	441a      	add	r2, r3
 8025d0c:	8322      	strh	r2, [r4, #24]
 8025d0e:	9a06      	ldr	r2, [sp, #24]
 8025d10:	1a89      	subs	r1, r1, r2
 8025d12:	8b62      	ldrh	r2, [r4, #26]
 8025d14:	fb03 2301 	mla	r3, r3, r1, r2
 8025d18:	e64e      	b.n	80259b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8025d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8025d1e:	434a      	muls	r2, r1
 8025d20:	427f      	negs	r7, r7
 8025d22:	9307      	str	r3, [sp, #28]
 8025d24:	2300      	movs	r3, #0
 8025d26:	e768      	b.n	8025bfa <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8025d28:	f104 0314 	add.w	r3, r4, #20
 8025d2c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025d30:	cb03      	ldmia	r3!, {r0, r1}
 8025d32:	f8c8 0000 	str.w	r0, [r8]
 8025d36:	f8c8 1004 	str.w	r1, [r8, #4]
 8025d3a:	6923      	ldr	r3, [r4, #16]
 8025d3c:	3308      	adds	r3, #8
 8025d3e:	6123      	str	r3, [r4, #16]
 8025d40:	68a3      	ldr	r3, [r4, #8]
 8025d42:	3301      	adds	r3, #1
 8025d44:	60a3      	str	r3, [r4, #8]
 8025d46:	e783      	b.n	8025c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025d48:	f104 0814 	add.w	r8, r4, #20
 8025d4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025d50:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025d54:	f8c9 0000 	str.w	r0, [r9]
 8025d58:	f8c9 1004 	str.w	r1, [r9, #4]
 8025d5c:	6921      	ldr	r1, [r4, #16]
 8025d5e:	3108      	adds	r1, #8
 8025d60:	6121      	str	r1, [r4, #16]
 8025d62:	68a1      	ldr	r1, [r4, #8]
 8025d64:	3101      	adds	r1, #1
 8025d66:	60a1      	str	r1, [r4, #8]
 8025d68:	e7c1      	b.n	8025cee <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025d6a:	f104 0314 	add.w	r3, r4, #20
 8025d6e:	6925      	ldr	r5, [r4, #16]
 8025d70:	cb03      	ldmia	r3!, {r0, r1}
 8025d72:	6028      	str	r0, [r5, #0]
 8025d74:	6069      	str	r1, [r5, #4]
 8025d76:	6923      	ldr	r3, [r4, #16]
 8025d78:	3308      	adds	r3, #8
 8025d7a:	6123      	str	r3, [r4, #16]
 8025d7c:	68a3      	ldr	r3, [r4, #8]
 8025d7e:	3301      	adds	r3, #1
 8025d80:	60a3      	str	r3, [r4, #8]
 8025d82:	e66a      	b.n	8025a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025d84:	f104 0314 	add.w	r3, r4, #20
 8025d88:	6925      	ldr	r5, [r4, #16]
 8025d8a:	cb03      	ldmia	r3!, {r0, r1}
 8025d8c:	6028      	str	r0, [r5, #0]
 8025d8e:	6069      	str	r1, [r5, #4]
 8025d90:	6923      	ldr	r3, [r4, #16]
 8025d92:	3308      	adds	r3, #8
 8025d94:	6123      	str	r3, [r4, #16]
 8025d96:	68a3      	ldr	r3, [r4, #8]
 8025d98:	3301      	adds	r3, #1
 8025d9a:	60a3      	str	r3, [r4, #8]
 8025d9c:	e6be      	b.n	8025b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025d9e:	f00b 031f 	and.w	r3, fp, #31
 8025da2:	114f      	asrs	r7, r1, #5
 8025da4:	8b20      	ldrh	r0, [r4, #24]
 8025da6:	f001 011f 	and.w	r1, r1, #31
 8025daa:	930f      	str	r3, [sp, #60]	; 0x3c
 8025dac:	9b04      	ldr	r3, [sp, #16]
 8025dae:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025db2:	429f      	cmp	r7, r3
 8025db4:	d10a      	bne.n	8025dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025db8:	4418      	add	r0, r3
 8025dba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025dbc:	4419      	add	r1, r3
 8025dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025dc0:	8320      	strh	r0, [r4, #24]
 8025dc2:	fb03 9901 	mla	r9, r3, r1, r9
 8025dc6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8025dca:	e6af      	b.n	8025b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025dcc:	2d00      	cmp	r5, #0
 8025dce:	f2c0 809b 	blt.w	8025f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8025dd2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8025dd4:	f1c1 0320 	rsb	r3, r1, #32
 8025dd8:	4373      	muls	r3, r6
 8025dda:	2601      	movs	r6, #1
 8025ddc:	960e      	str	r6, [sp, #56]	; 0x38
 8025dde:	2620      	movs	r6, #32
 8025de0:	960d      	str	r6, [sp, #52]	; 0x34
 8025de2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025de4:	fb93 f6f5 	sdiv	r6, r3, r5
 8025de8:	4411      	add	r1, r2
 8025dea:	fb05 3316 	mls	r3, r5, r6, r3
 8025dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025df0:	2b00      	cmp	r3, #0
 8025df2:	4417      	add	r7, r2
 8025df4:	9a00      	ldr	r2, [sp, #0]
 8025df6:	bfbc      	itt	lt
 8025df8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8025dfc:	195b      	addlt	r3, r3, r5
 8025dfe:	0412      	lsls	r2, r2, #16
 8025e00:	fb06 9101 	mla	r1, r6, r1, r9
 8025e04:	4430      	add	r0, r6
 8025e06:	eb07 0902 	add.w	r9, r7, r2
 8025e0a:	9210      	str	r2, [sp, #64]	; 0x40
 8025e0c:	b200      	sxth	r0, r0
 8025e0e:	b209      	sxth	r1, r1
 8025e10:	45c1      	cmp	r9, r8
 8025e12:	8320      	strh	r0, [r4, #24]
 8025e14:	8361      	strh	r1, [r4, #26]
 8025e16:	d017      	beq.n	8025e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8025e18:	ea50 0201 	orrs.w	r2, r0, r1
 8025e1c:	d00d      	beq.n	8025e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025e1e:	f1be 0f00 	cmp.w	lr, #0
 8025e22:	db0a      	blt.n	8025e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025e24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025e26:	4571      	cmp	r1, lr
 8025e28:	dd07      	ble.n	8025e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025e2a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025e2e:	4288      	cmp	r0, r1
 8025e30:	d372      	bcc.n	8025f18 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8025e32:	f04f 0201 	mov.w	r2, #1
 8025e36:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025e3a:	9a00      	ldr	r2, [sp, #0]
 8025e3c:	82a7      	strh	r7, [r4, #20]
 8025e3e:	82e2      	strh	r2, [r4, #22]
 8025e40:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025e44:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025e4a:	eb02 0e06 	add.w	lr, r2, r6
 8025e4e:	9a04      	ldr	r2, [sp, #16]
 8025e50:	42ba      	cmp	r2, r7
 8025e52:	d049      	beq.n	8025ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8025e54:	9a02      	ldr	r2, [sp, #8]
 8025e56:	1b5b      	subs	r3, r3, r5
 8025e58:	eba2 010e 	sub.w	r1, r2, lr
 8025e5c:	440e      	add	r6, r1
 8025e5e:	0176      	lsls	r6, r6, #5
 8025e60:	fb96 f8f5 	sdiv	r8, r6, r5
 8025e64:	fb05 6618 	mls	r6, r5, r8, r6
 8025e68:	2e00      	cmp	r6, #0
 8025e6a:	bfbc      	itt	lt
 8025e6c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025e70:	1976      	addlt	r6, r6, r5
 8025e72:	f108 0201 	add.w	r2, r8, #1
 8025e76:	9211      	str	r2, [sp, #68]	; 0x44
 8025e78:	199b      	adds	r3, r3, r6
 8025e7a:	8b20      	ldrh	r0, [r4, #24]
 8025e7c:	8b61      	ldrh	r1, [r4, #26]
 8025e7e:	bf54      	ite	pl
 8025e80:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8025e84:	46c1      	movmi	r9, r8
 8025e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025e88:	bf58      	it	pl
 8025e8a:	1b5b      	subpl	r3, r3, r5
 8025e8c:	4448      	add	r0, r9
 8025e8e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025e92:	4417      	add	r7, r2
 8025e94:	44ce      	add	lr, r9
 8025e96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025e98:	b200      	sxth	r0, r0
 8025e9a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8025e9e:	b209      	sxth	r1, r1
 8025ea0:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025ea4:	443a      	add	r2, r7
 8025ea6:	8320      	strh	r0, [r4, #24]
 8025ea8:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025eac:	8361      	strh	r1, [r4, #26]
 8025eae:	4552      	cmp	r2, sl
 8025eb0:	d017      	beq.n	8025ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8025eb2:	ea50 0201 	orrs.w	r2, r0, r1
 8025eb6:	d00d      	beq.n	8025ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025eb8:	f1b9 0f00 	cmp.w	r9, #0
 8025ebc:	db0a      	blt.n	8025ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025ebe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025ec0:	4549      	cmp	r1, r9
 8025ec2:	dd07      	ble.n	8025ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025ec4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025ec8:	4288      	cmp	r0, r1
 8025eca:	d336      	bcc.n	8025f3a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8025ecc:	f04f 0201 	mov.w	r2, #1
 8025ed0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025ed4:	9a00      	ldr	r2, [sp, #0]
 8025ed6:	82a7      	strh	r7, [r4, #20]
 8025ed8:	82e2      	strh	r2, [r4, #22]
 8025eda:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025ede:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025ee2:	9a04      	ldr	r2, [sp, #16]
 8025ee4:	42ba      	cmp	r2, r7
 8025ee6:	d1c7      	bne.n	8025e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025ee8:	9b02      	ldr	r3, [sp, #8]
 8025eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025eec:	eba3 0e0e 	sub.w	lr, r3, lr
 8025ef0:	8b23      	ldrh	r3, [r4, #24]
 8025ef2:	3120      	adds	r1, #32
 8025ef4:	4473      	add	r3, lr
 8025ef6:	8323      	strh	r3, [r4, #24]
 8025ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025efa:	1ac9      	subs	r1, r1, r3
 8025efc:	8b63      	ldrh	r3, [r4, #26]
 8025efe:	fb0e 3e01 	mla	lr, lr, r1, r3
 8025f02:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025f06:	e611      	b.n	8025b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025f08:	f04f 36ff 	mov.w	r6, #4294967295
 8025f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f0e:	426d      	negs	r5, r5
 8025f10:	960e      	str	r6, [sp, #56]	; 0x38
 8025f12:	2600      	movs	r6, #0
 8025f14:	434b      	muls	r3, r1
 8025f16:	e763      	b.n	8025de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8025f18:	f104 0e14 	add.w	lr, r4, #20
 8025f1c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025f20:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025f24:	f8c8 0000 	str.w	r0, [r8]
 8025f28:	f8c8 1004 	str.w	r1, [r8, #4]
 8025f2c:	6921      	ldr	r1, [r4, #16]
 8025f2e:	3108      	adds	r1, #8
 8025f30:	6121      	str	r1, [r4, #16]
 8025f32:	68a1      	ldr	r1, [r4, #8]
 8025f34:	3101      	adds	r1, #1
 8025f36:	60a1      	str	r1, [r4, #8]
 8025f38:	e77f      	b.n	8025e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025f3a:	f104 0914 	add.w	r9, r4, #20
 8025f3e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025f42:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8025f46:	f8ca 0000 	str.w	r0, [sl]
 8025f4a:	f8ca 1004 	str.w	r1, [sl, #4]
 8025f4e:	6921      	ldr	r1, [r4, #16]
 8025f50:	3108      	adds	r1, #8
 8025f52:	6121      	str	r1, [r4, #16]
 8025f54:	68a1      	ldr	r1, [r4, #8]
 8025f56:	3101      	adds	r1, #1
 8025f58:	60a1      	str	r1, [r4, #8]
 8025f5a:	e7bb      	b.n	8025ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025f5c:	f104 0314 	add.w	r3, r4, #20
 8025f60:	6925      	ldr	r5, [r4, #16]
 8025f62:	cb03      	ldmia	r3!, {r0, r1}
 8025f64:	6028      	str	r0, [r5, #0]
 8025f66:	6069      	str	r1, [r5, #4]
 8025f68:	6923      	ldr	r3, [r4, #16]
 8025f6a:	3308      	adds	r3, #8
 8025f6c:	6123      	str	r3, [r4, #16]
 8025f6e:	68a3      	ldr	r3, [r4, #8]
 8025f70:	3301      	adds	r3, #1
 8025f72:	60a3      	str	r3, [r4, #8]
 8025f74:	e5fd      	b.n	8025b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025f76:	f104 0314 	add.w	r3, r4, #20
 8025f7a:	6925      	ldr	r5, [r4, #16]
 8025f7c:	cb03      	ldmia	r3!, {r0, r1}
 8025f7e:	6028      	str	r0, [r5, #0]
 8025f80:	6069      	str	r1, [r5, #4]
 8025f82:	6923      	ldr	r3, [r4, #16]
 8025f84:	3308      	adds	r3, #8
 8025f86:	6123      	str	r3, [r4, #16]
 8025f88:	68a3      	ldr	r3, [r4, #8]
 8025f8a:	3301      	adds	r3, #1
 8025f8c:	60a3      	str	r3, [r4, #8]
 8025f8e:	e625      	b.n	8025bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025f90:	9b05      	ldr	r3, [sp, #20]
 8025f92:	ea4f 176b 	mov.w	r7, fp, asr #5
 8025f96:	f00b 081f 	and.w	r8, fp, #31
 8025f9a:	8b20      	ldrh	r0, [r4, #24]
 8025f9c:	f003 031f 	and.w	r3, r3, #31
 8025fa0:	4577      	cmp	r7, lr
 8025fa2:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025fa6:	9302      	str	r3, [sp, #8]
 8025fa8:	9b03      	ldr	r3, [sp, #12]
 8025faa:	eba3 050c 	sub.w	r5, r3, ip
 8025fae:	d108      	bne.n	8025fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025fb0:	9b02      	ldr	r3, [sp, #8]
 8025fb2:	4428      	add	r0, r5
 8025fb4:	4498      	add	r8, r3
 8025fb6:	8320      	strh	r0, [r4, #24]
 8025fb8:	fb05 9508 	mla	r5, r5, r8, r9
 8025fbc:	8365      	strh	r5, [r4, #26]
 8025fbe:	f7ff bb4f 	b.w	8025660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025fc2:	9b05      	ldr	r3, [sp, #20]
 8025fc4:	ebb3 030b 	subs.w	r3, r3, fp
 8025fc8:	f100 809c 	bmi.w	8026104 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8025fcc:	f1c8 0120 	rsb	r1, r8, #32
 8025fd0:	2201      	movs	r2, #1
 8025fd2:	f04f 0b20 	mov.w	fp, #32
 8025fd6:	434d      	muls	r5, r1
 8025fd8:	9201      	str	r2, [sp, #4]
 8025fda:	9a01      	ldr	r2, [sp, #4]
 8025fdc:	44d8      	add	r8, fp
 8025fde:	fb95 f6f3 	sdiv	r6, r5, r3
 8025fe2:	fb03 5516 	mls	r5, r3, r6, r5
 8025fe6:	4417      	add	r7, r2
 8025fe8:	9a00      	ldr	r2, [sp, #0]
 8025fea:	2d00      	cmp	r5, #0
 8025fec:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025ff0:	bfbc      	itt	lt
 8025ff2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8025ff6:	18ed      	addlt	r5, r5, r3
 8025ff8:	eb07 0a02 	add.w	sl, r7, r2
 8025ffc:	9204      	str	r2, [sp, #16]
 8025ffe:	fb06 9808 	mla	r8, r6, r8, r9
 8026002:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026006:	4430      	add	r0, r6
 8026008:	fa0f f188 	sxth.w	r1, r8
 802600c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026010:	b200      	sxth	r0, r0
 8026012:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026016:	8361      	strh	r1, [r4, #26]
 8026018:	8320      	strh	r0, [r4, #24]
 802601a:	45ca      	cmp	sl, r9
 802601c:	d015      	beq.n	802604a <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802601e:	ea50 0201 	orrs.w	r2, r0, r1
 8026022:	d00c      	beq.n	802603e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026024:	f1b8 0f00 	cmp.w	r8, #0
 8026028:	db09      	blt.n	802603e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802602a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802602c:	4541      	cmp	r1, r8
 802602e:	dd06      	ble.n	802603e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026030:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026034:	4288      	cmp	r0, r1
 8026036:	d36e      	bcc.n	8026116 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8026038:	2101      	movs	r1, #1
 802603a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802603e:	2100      	movs	r1, #0
 8026040:	9a00      	ldr	r2, [sp, #0]
 8026042:	82a7      	strh	r7, [r4, #20]
 8026044:	82e2      	strh	r2, [r4, #22]
 8026046:	8321      	strh	r1, [r4, #24]
 8026048:	8361      	strh	r1, [r4, #26]
 802604a:	45be      	cmp	lr, r7
 802604c:	44b4      	add	ip, r6
 802604e:	d048      	beq.n	80260e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8026050:	9a03      	ldr	r2, [sp, #12]
 8026052:	1aed      	subs	r5, r5, r3
 8026054:	eba2 010c 	sub.w	r1, r2, ip
 8026058:	440e      	add	r6, r1
 802605a:	0176      	lsls	r6, r6, #5
 802605c:	fb96 f8f3 	sdiv	r8, r6, r3
 8026060:	fb03 6618 	mls	r6, r3, r8, r6
 8026064:	2e00      	cmp	r6, #0
 8026066:	bfbc      	itt	lt
 8026068:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802606c:	18f6      	addlt	r6, r6, r3
 802606e:	f108 0201 	add.w	r2, r8, #1
 8026072:	9205      	str	r2, [sp, #20]
 8026074:	19ad      	adds	r5, r5, r6
 8026076:	8b20      	ldrh	r0, [r4, #24]
 8026078:	8b61      	ldrh	r1, [r4, #26]
 802607a:	bf54      	ite	pl
 802607c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8026080:	46c1      	movmi	r9, r8
 8026082:	9a01      	ldr	r2, [sp, #4]
 8026084:	bf58      	it	pl
 8026086:	1aed      	subpl	r5, r5, r3
 8026088:	4448      	add	r0, r9
 802608a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802608e:	4417      	add	r7, r2
 8026090:	44cc      	add	ip, r9
 8026092:	9a04      	ldr	r2, [sp, #16]
 8026094:	b200      	sxth	r0, r0
 8026096:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802609a:	b209      	sxth	r1, r1
 802609c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80260a0:	443a      	add	r2, r7
 80260a2:	8320      	strh	r0, [r4, #24]
 80260a4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80260a8:	8361      	strh	r1, [r4, #26]
 80260aa:	4552      	cmp	r2, sl
 80260ac:	d017      	beq.n	80260de <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80260ae:	ea50 0201 	orrs.w	r2, r0, r1
 80260b2:	d00d      	beq.n	80260d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80260b4:	f1b9 0f00 	cmp.w	r9, #0
 80260b8:	db0a      	blt.n	80260d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80260ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80260bc:	4549      	cmp	r1, r9
 80260be:	dd07      	ble.n	80260d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80260c0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80260c4:	4288      	cmp	r0, r1
 80260c6:	d337      	bcc.n	8026138 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80260c8:	f04f 0201 	mov.w	r2, #1
 80260cc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80260d0:	9a00      	ldr	r2, [sp, #0]
 80260d2:	82a7      	strh	r7, [r4, #20]
 80260d4:	82e2      	strh	r2, [r4, #22]
 80260d6:	f04f 0200 	mov.w	r2, #0
 80260da:	8322      	strh	r2, [r4, #24]
 80260dc:	8362      	strh	r2, [r4, #26]
 80260de:	45be      	cmp	lr, r7
 80260e0:	d1c8      	bne.n	8026074 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80260e2:	9b03      	ldr	r3, [sp, #12]
 80260e4:	8b62      	ldrh	r2, [r4, #26]
 80260e6:	eba3 0c0c 	sub.w	ip, r3, ip
 80260ea:	8b23      	ldrh	r3, [r4, #24]
 80260ec:	4463      	add	r3, ip
 80260ee:	8323      	strh	r3, [r4, #24]
 80260f0:	9b02      	ldr	r3, [sp, #8]
 80260f2:	3320      	adds	r3, #32
 80260f4:	eba3 030b 	sub.w	r3, r3, fp
 80260f8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80260fc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026100:	f7ff baae 	b.w	8025660 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026104:	f04f 32ff 	mov.w	r2, #4294967295
 8026108:	fb05 f508 	mul.w	r5, r5, r8
 802610c:	425b      	negs	r3, r3
 802610e:	f04f 0b00 	mov.w	fp, #0
 8026112:	9201      	str	r2, [sp, #4]
 8026114:	e761      	b.n	8025fda <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8026116:	f104 0814 	add.w	r8, r4, #20
 802611a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802611e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026122:	f8c9 0000 	str.w	r0, [r9]
 8026126:	f8c9 1004 	str.w	r1, [r9, #4]
 802612a:	6921      	ldr	r1, [r4, #16]
 802612c:	3108      	adds	r1, #8
 802612e:	6121      	str	r1, [r4, #16]
 8026130:	68a1      	ldr	r1, [r4, #8]
 8026132:	3101      	adds	r1, #1
 8026134:	60a1      	str	r1, [r4, #8]
 8026136:	e782      	b.n	802603e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026138:	f104 0914 	add.w	r9, r4, #20
 802613c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026140:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8026144:	f8ca 0000 	str.w	r0, [sl]
 8026148:	f8ca 1004 	str.w	r1, [sl, #4]
 802614c:	6921      	ldr	r1, [r4, #16]
 802614e:	3108      	adds	r1, #8
 8026150:	6121      	str	r1, [r4, #16]
 8026152:	68a1      	ldr	r1, [r4, #8]
 8026154:	3101      	adds	r1, #1
 8026156:	60a1      	str	r1, [r4, #8]
 8026158:	e7ba      	b.n	80260d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802615a <_ZN8touchgfx7Outline6lineToEii>:
 802615a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802615c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802615e:	4604      	mov	r4, r0
 8026160:	460d      	mov	r5, r1
 8026162:	4616      	mov	r6, r2
 8026164:	079b      	lsls	r3, r3, #30
 8026166:	d526      	bpl.n	80261b6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8026168:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802616c:	ea85 0001 	eor.w	r0, r5, r1
 8026170:	ea86 0302 	eor.w	r3, r6, r2
 8026174:	4303      	orrs	r3, r0
 8026176:	d01e      	beq.n	80261b6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8026178:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802617a:	114b      	asrs	r3, r1, #5
 802617c:	9600      	str	r6, [sp, #0]
 802617e:	4283      	cmp	r3, r0
 8026180:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026182:	bfb8      	it	lt
 8026184:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8026186:	3301      	adds	r3, #1
 8026188:	4283      	cmp	r3, r0
 802618a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802618c:	bfc8      	it	gt
 802618e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026190:	116b      	asrs	r3, r5, #5
 8026192:	4283      	cmp	r3, r0
 8026194:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026196:	bfb8      	it	lt
 8026198:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802619a:	3301      	adds	r3, #1
 802619c:	4283      	cmp	r3, r0
 802619e:	4620      	mov	r0, r4
 80261a0:	bfc8      	it	gt
 80261a2:	6363      	strgt	r3, [r4, #52]	; 0x34
 80261a4:	462b      	mov	r3, r5
 80261a6:	f7ff f9e3 	bl	8025570 <_ZN8touchgfx7Outline10renderLineEiiii>
 80261aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80261ac:	f043 0301 	orr.w	r3, r3, #1
 80261b0:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80261b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80261b6:	b002      	add	sp, #8
 80261b8:	bd70      	pop	{r4, r5, r6, pc}

080261ba <_ZN8touchgfx7Outline6moveToEii>:
 80261ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80261be:	4615      	mov	r5, r2
 80261c0:	4604      	mov	r4, r0
 80261c2:	460e      	mov	r6, r1
 80261c4:	079a      	lsls	r2, r3, #30
 80261c6:	d401      	bmi.n	80261cc <_ZN8touchgfx7Outline6moveToEii+0x12>
 80261c8:	f7ff f98c 	bl	80254e4 <_ZN8touchgfx7Outline5resetEv>
 80261cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80261ce:	07db      	lsls	r3, r3, #31
 80261d0:	d504      	bpl.n	80261dc <_ZN8touchgfx7Outline6moveToEii+0x22>
 80261d2:	4620      	mov	r0, r4
 80261d4:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80261d8:	f7ff ffbf 	bl	802615a <_ZN8touchgfx7Outline6lineToEii>
 80261dc:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80261e0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80261e4:	116f      	asrs	r7, r5, #5
 80261e6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80261ea:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80261ee:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80261f2:	4291      	cmp	r1, r2
 80261f4:	d015      	beq.n	8026222 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80261f6:	8b61      	ldrh	r1, [r4, #26]
 80261f8:	8b22      	ldrh	r2, [r4, #24]
 80261fa:	430a      	orrs	r2, r1
 80261fc:	d00b      	beq.n	8026216 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80261fe:	2b00      	cmp	r3, #0
 8026200:	db09      	blt.n	8026216 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8026202:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026204:	429a      	cmp	r2, r3
 8026206:	dd06      	ble.n	8026216 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8026208:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802620c:	429a      	cmp	r2, r3
 802620e:	d30d      	bcc.n	802622c <_ZN8touchgfx7Outline6moveToEii+0x72>
 8026210:	2301      	movs	r3, #1
 8026212:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026216:	2300      	movs	r3, #0
 8026218:	f8a4 c014 	strh.w	ip, [r4, #20]
 802621c:	82e7      	strh	r7, [r4, #22]
 802621e:	8323      	strh	r3, [r4, #24]
 8026220:	8363      	strh	r3, [r4, #26]
 8026222:	61e6      	str	r6, [r4, #28]
 8026224:	62a5      	str	r5, [r4, #40]	; 0x28
 8026226:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802622c:	f104 0314 	add.w	r3, r4, #20
 8026230:	6922      	ldr	r2, [r4, #16]
 8026232:	cb03      	ldmia	r3!, {r0, r1}
 8026234:	6010      	str	r0, [r2, #0]
 8026236:	6051      	str	r1, [r2, #4]
 8026238:	6923      	ldr	r3, [r4, #16]
 802623a:	3308      	adds	r3, #8
 802623c:	6123      	str	r3, [r4, #16]
 802623e:	68a3      	ldr	r3, [r4, #8]
 8026240:	3301      	adds	r3, #1
 8026242:	60a3      	str	r3, [r4, #8]
 8026244:	e7e7      	b.n	8026216 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08026246 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8026246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802624a:	b0d1      	sub	sp, #324	; 0x144
 802624c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8026250:	466c      	mov	r4, sp
 8026252:	1a0d      	subs	r5, r1, r0
 8026254:	f100 0208 	add.w	r2, r0, #8
 8026258:	2d48      	cmp	r5, #72	; 0x48
 802625a:	f340 80ba 	ble.w	80263d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802625e:	112d      	asrs	r5, r5, #4
 8026260:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8026264:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8026268:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802626c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8026270:	f9b0 8000 	ldrsh.w	r8, [r0]
 8026274:	681e      	ldr	r6, [r3, #0]
 8026276:	6006      	str	r6, [r0, #0]
 8026278:	685e      	ldr	r6, [r3, #4]
 802627a:	6046      	str	r6, [r0, #4]
 802627c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8026280:	f8a3 c004 	strh.w	ip, [r3, #4]
 8026284:	f8a3 e002 	strh.w	lr, [r3, #2]
 8026288:	80df      	strh	r7, [r3, #6]
 802628a:	f1a1 0308 	sub.w	r3, r1, #8
 802628e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8026292:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8026296:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802629a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802629e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80262a2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80262a6:	45ac      	cmp	ip, r5
 80262a8:	dd0f      	ble.n	80262ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80262aa:	681d      	ldr	r5, [r3, #0]
 80262ac:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80262b0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80262b4:	6015      	str	r5, [r2, #0]
 80262b6:	685d      	ldr	r5, [r3, #4]
 80262b8:	6055      	str	r5, [r2, #4]
 80262ba:	f821 7c08 	strh.w	r7, [r1, #-8]
 80262be:	f821 6c06 	strh.w	r6, [r1, #-6]
 80262c2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80262c6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80262ca:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80262ce:	f9b0 7000 	ldrsh.w	r7, [r0]
 80262d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80262d6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80262da:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80262de:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80262e2:	4565      	cmp	r5, ip
 80262e4:	dd0d      	ble.n	8026302 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80262e6:	6815      	ldr	r5, [r2, #0]
 80262e8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80262ec:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80262f0:	6005      	str	r5, [r0, #0]
 80262f2:	6855      	ldr	r5, [r2, #4]
 80262f4:	8107      	strh	r7, [r0, #8]
 80262f6:	6045      	str	r5, [r0, #4]
 80262f8:	8146      	strh	r6, [r0, #10]
 80262fa:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80262fe:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8026302:	f9b0 7000 	ldrsh.w	r7, [r0]
 8026306:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802630a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802630e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026312:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026316:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802631a:	45ac      	cmp	ip, r5
 802631c:	dd0f      	ble.n	802633e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802631e:	681d      	ldr	r5, [r3, #0]
 8026320:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8026324:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8026328:	6005      	str	r5, [r0, #0]
 802632a:	685d      	ldr	r5, [r3, #4]
 802632c:	6045      	str	r5, [r0, #4]
 802632e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8026332:	f821 6c06 	strh.w	r6, [r1, #-6]
 8026336:	f821 ec04 	strh.w	lr, [r1, #-4]
 802633a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802633e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8026342:	f102 0508 	add.w	r5, r2, #8
 8026346:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802634a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802634e:	462f      	mov	r7, r5
 8026350:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8026354:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8026358:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802635c:	45b2      	cmp	sl, r6
 802635e:	dc18      	bgt.n	8026392 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8026360:	3b08      	subs	r3, #8
 8026362:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8026366:	f9b3 6000 	ldrsh.w	r6, [r3]
 802636a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802636e:	45b2      	cmp	sl, r6
 8026370:	dbf6      	blt.n	8026360 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8026372:	42ab      	cmp	r3, r5
 8026374:	681e      	ldr	r6, [r3, #0]
 8026376:	d30e      	bcc.n	8026396 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8026378:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802637c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8026380:	602e      	str	r6, [r5, #0]
 8026382:	685e      	ldr	r6, [r3, #4]
 8026384:	606e      	str	r6, [r5, #4]
 8026386:	f8a3 9000 	strh.w	r9, [r3]
 802638a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802638e:	809f      	strh	r7, [r3, #4]
 8026390:	80da      	strh	r2, [r3, #6]
 8026392:	462a      	mov	r2, r5
 8026394:	e7d3      	b.n	802633e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8026396:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802639a:	6006      	str	r6, [r0, #0]
 802639c:	685e      	ldr	r6, [r3, #4]
 802639e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80263a2:	6046      	str	r6, [r0, #4]
 80263a4:	1a1e      	subs	r6, r3, r0
 80263a6:	80da      	strh	r2, [r3, #6]
 80263a8:	1b4a      	subs	r2, r1, r5
 80263aa:	f8a3 e000 	strh.w	lr, [r3]
 80263ae:	10d2      	asrs	r2, r2, #3
 80263b0:	f8a3 c002 	strh.w	ip, [r3, #2]
 80263b4:	f8a3 8004 	strh.w	r8, [r3, #4]
 80263b8:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80263bc:	bfb5      	itete	lt
 80263be:	e9c4 0300 	strdlt	r0, r3, [r4]
 80263c2:	4607      	movge	r7, r0
 80263c4:	460b      	movlt	r3, r1
 80263c6:	e9c4 5100 	strdge	r5, r1, [r4]
 80263ca:	4638      	mov	r0, r7
 80263cc:	3408      	adds	r4, #8
 80263ce:	4619      	mov	r1, r3
 80263d0:	e73f      	b.n	8026252 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80263d2:	4291      	cmp	r1, r2
 80263d4:	d925      	bls.n	8026422 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80263d6:	f1a2 0310 	sub.w	r3, r2, #16
 80263da:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80263de:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80263e2:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80263e6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80263ea:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80263ee:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80263f2:	42b5      	cmp	r5, r6
 80263f4:	dd13      	ble.n	802641e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80263f6:	461d      	mov	r5, r3
 80263f8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80263fc:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8026400:	3b08      	subs	r3, #8
 8026402:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8026406:	619e      	str	r6, [r3, #24]
 8026408:	42a8      	cmp	r0, r5
 802640a:	686e      	ldr	r6, [r5, #4]
 802640c:	f8a3 c010 	strh.w	ip, [r3, #16]
 8026410:	61de      	str	r6, [r3, #28]
 8026412:	825f      	strh	r7, [r3, #18]
 8026414:	f8a3 8014 	strh.w	r8, [r3, #20]
 8026418:	f8a3 e016 	strh.w	lr, [r3, #22]
 802641c:	d1dd      	bne.n	80263da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802641e:	3208      	adds	r2, #8
 8026420:	e7d7      	b.n	80263d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8026422:	466b      	mov	r3, sp
 8026424:	429c      	cmp	r4, r3
 8026426:	d903      	bls.n	8026430 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8026428:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802642c:	3c08      	subs	r4, #8
 802642e:	e710      	b.n	8026252 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026430:	b051      	add	sp, #324	; 0x144
 8026432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026436 <_ZN8touchgfx7Outline9sortCellsEv>:
 8026436:	6881      	ldr	r1, [r0, #8]
 8026438:	b111      	cbz	r1, 8026440 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802643a:	68c0      	ldr	r0, [r0, #12]
 802643c:	f7ff bf03 	b.w	8026246 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8026440:	4770      	bx	lr

08026442 <_ZN8touchgfx7Outline8getCellsEv>:
 8026442:	b510      	push	{r4, lr}
 8026444:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026446:	4604      	mov	r4, r0
 8026448:	07da      	lsls	r2, r3, #31
 802644a:	d507      	bpl.n	802645c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802644c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8026450:	f7ff fe83 	bl	802615a <_ZN8touchgfx7Outline6lineToEii>
 8026454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026456:	f023 0301 	bic.w	r3, r3, #1
 802645a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802645c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802645e:	079b      	lsls	r3, r3, #30
 8026460:	d51a      	bpl.n	8026498 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8026462:	8b62      	ldrh	r2, [r4, #26]
 8026464:	8b23      	ldrh	r3, [r4, #24]
 8026466:	4313      	orrs	r3, r2
 8026468:	d00d      	beq.n	8026486 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802646a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802646e:	2b00      	cmp	r3, #0
 8026470:	db09      	blt.n	8026486 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026472:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026474:	4293      	cmp	r3, r2
 8026476:	da06      	bge.n	8026486 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026478:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802647c:	429a      	cmp	r2, r3
 802647e:	d80d      	bhi.n	802649c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8026480:	2301      	movs	r3, #1
 8026482:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026486:	68a0      	ldr	r0, [r4, #8]
 8026488:	b138      	cbz	r0, 802649a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802648a:	4620      	mov	r0, r4
 802648c:	f7ff ffd3 	bl	8026436 <_ZN8touchgfx7Outline9sortCellsEv>
 8026490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026492:	f023 0302 	bic.w	r3, r3, #2
 8026496:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026498:	68e0      	ldr	r0, [r4, #12]
 802649a:	bd10      	pop	{r4, pc}
 802649c:	f104 0314 	add.w	r3, r4, #20
 80264a0:	6922      	ldr	r2, [r4, #16]
 80264a2:	cb03      	ldmia	r3!, {r0, r1}
 80264a4:	6010      	str	r0, [r2, #0]
 80264a6:	6051      	str	r1, [r2, #4]
 80264a8:	6923      	ldr	r3, [r4, #16]
 80264aa:	3308      	adds	r3, #8
 80264ac:	6123      	str	r3, [r4, #16]
 80264ae:	68a3      	ldr	r3, [r4, #8]
 80264b0:	3301      	adds	r3, #1
 80264b2:	60a3      	str	r3, [r4, #8]
 80264b4:	e7e7      	b.n	8026486 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080264b6 <_ZN8touchgfx8ScanlineD1Ev>:
 80264b6:	4770      	bx	lr

080264b8 <_ZN8touchgfx8ScanlineD0Ev>:
 80264b8:	b510      	push	{r4, lr}
 80264ba:	4604      	mov	r4, r0
 80264bc:	2124      	movs	r1, #36	; 0x24
 80264be:	f000 f877 	bl	80265b0 <_ZdlPvj>
 80264c2:	4620      	mov	r0, r4
 80264c4:	bd10      	pop	{r4, pc}

080264c6 <_ZN8touchgfx8Scanline5resetEv>:
 80264c6:	b510      	push	{r4, lr}
 80264c8:	4604      	mov	r4, r0
 80264ca:	f7f3 f8f9 	bl	80196c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80264ce:	61a0      	str	r0, [r4, #24]
 80264d0:	f7f3 f8fc 	bl	80196cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80264d4:	61e0      	str	r0, [r4, #28]
 80264d6:	f7f3 f8ff 	bl	80196d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80264da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80264de:	6220      	str	r0, [r4, #32]
 80264e0:	6160      	str	r0, [r4, #20]
 80264e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80264e6:	69e3      	ldr	r3, [r4, #28]
 80264e8:	6123      	str	r3, [r4, #16]
 80264ea:	2300      	movs	r3, #0
 80264ec:	60e3      	str	r3, [r4, #12]
 80264ee:	bd10      	pop	{r4, pc}

080264f0 <_ZN8touchgfx8ScanlineC1Ev>:
 80264f0:	4b07      	ldr	r3, [pc, #28]	; (8026510 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80264f2:	b510      	push	{r4, lr}
 80264f4:	6003      	str	r3, [r0, #0]
 80264f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80264fa:	4604      	mov	r4, r0
 80264fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026500:	2300      	movs	r3, #0
 8026502:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026506:	6143      	str	r3, [r0, #20]
 8026508:	f7ff ffdd 	bl	80264c6 <_ZN8touchgfx8Scanline5resetEv>
 802650c:	4620      	mov	r0, r4
 802650e:	bd10      	pop	{r4, pc}
 8026510:	0802b964 	.word	0x0802b964

08026514 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8026514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026518:	1e0c      	subs	r4, r1, #0
 802651a:	4605      	mov	r5, r0
 802651c:	4617      	mov	r7, r2
 802651e:	461e      	mov	r6, r3
 8026520:	da03      	bge.n	802652a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8026522:	4426      	add	r6, r4
 8026524:	2e01      	cmp	r6, #1
 8026526:	d421      	bmi.n	802656c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026528:	2400      	movs	r4, #0
 802652a:	f7f3 f8c3 	bl	80196b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802652e:	42a0      	cmp	r0, r4
 8026530:	d91c      	bls.n	802656c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026532:	eb04 0806 	add.w	r8, r4, r6
 8026536:	f7f3 f8bd 	bl	80196b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802653a:	4580      	cmp	r8, r0
 802653c:	d902      	bls.n	8026544 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802653e:	f7f3 f8b9 	bl	80196b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026542:	1b06      	subs	r6, r0, r4
 8026544:	69a8      	ldr	r0, [r5, #24]
 8026546:	4632      	mov	r2, r6
 8026548:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802654c:	4420      	add	r0, r4
 802654e:	f7f4 fdb0 	bl	801b0b2 <_ZN8touchgfx6memsetEPvhm>
 8026552:	686b      	ldr	r3, [r5, #4]
 8026554:	b2b2      	uxth	r2, r6
 8026556:	3301      	adds	r3, #1
 8026558:	42a3      	cmp	r3, r4
 802655a:	696b      	ldr	r3, [r5, #20]
 802655c:	d108      	bne.n	8026570 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802655e:	8819      	ldrh	r1, [r3, #0]
 8026560:	440a      	add	r2, r1
 8026562:	801a      	strh	r2, [r3, #0]
 8026564:	3c01      	subs	r4, #1
 8026566:	4434      	add	r4, r6
 8026568:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026570:	1c99      	adds	r1, r3, #2
 8026572:	6169      	str	r1, [r5, #20]
 8026574:	805a      	strh	r2, [r3, #2]
 8026576:	692b      	ldr	r3, [r5, #16]
 8026578:	1c9a      	adds	r2, r3, #2
 802657a:	612a      	str	r2, [r5, #16]
 802657c:	805c      	strh	r4, [r3, #2]
 802657e:	68eb      	ldr	r3, [r5, #12]
 8026580:	3301      	adds	r3, #1
 8026582:	60eb      	str	r3, [r5, #12]
 8026584:	e7ee      	b.n	8026564 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08026586 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8026586:	2200      	movs	r2, #0
 8026588:	6002      	str	r2, [r0, #0]
 802658a:	7102      	strb	r2, [r0, #4]
 802658c:	6102      	str	r2, [r0, #16]
 802658e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8026592:	4770      	bx	lr

08026594 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8026594:	4770      	bx	lr

08026596 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8026596:	6083      	str	r3, [r0, #8]
 8026598:	9b00      	ldr	r3, [sp, #0]
 802659a:	6001      	str	r1, [r0, #0]
 802659c:	60c3      	str	r3, [r0, #12]
 802659e:	9b01      	ldr	r3, [sp, #4]
 80265a0:	7102      	strb	r2, [r0, #4]
 80265a2:	6103      	str	r3, [r0, #16]
 80265a4:	4770      	bx	lr

080265a6 <__aeabi_atexit>:
 80265a6:	460b      	mov	r3, r1
 80265a8:	4601      	mov	r1, r0
 80265aa:	4618      	mov	r0, r3
 80265ac:	f000 b90e 	b.w	80267cc <__cxa_atexit>

080265b0 <_ZdlPvj>:
 80265b0:	f000 b812 	b.w	80265d8 <_ZdlPv>

080265b4 <__cxa_guard_acquire>:
 80265b4:	6803      	ldr	r3, [r0, #0]
 80265b6:	07db      	lsls	r3, r3, #31
 80265b8:	d406      	bmi.n	80265c8 <__cxa_guard_acquire+0x14>
 80265ba:	7843      	ldrb	r3, [r0, #1]
 80265bc:	b103      	cbz	r3, 80265c0 <__cxa_guard_acquire+0xc>
 80265be:	deff      	udf	#255	; 0xff
 80265c0:	2301      	movs	r3, #1
 80265c2:	7043      	strb	r3, [r0, #1]
 80265c4:	4618      	mov	r0, r3
 80265c6:	4770      	bx	lr
 80265c8:	2000      	movs	r0, #0
 80265ca:	4770      	bx	lr

080265cc <__cxa_guard_release>:
 80265cc:	2301      	movs	r3, #1
 80265ce:	6003      	str	r3, [r0, #0]
 80265d0:	4770      	bx	lr

080265d2 <__cxa_pure_virtual>:
 80265d2:	b508      	push	{r3, lr}
 80265d4:	f000 f80e 	bl	80265f4 <_ZSt9terminatev>

080265d8 <_ZdlPv>:
 80265d8:	f000 b844 	b.w	8026664 <free>

080265dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80265dc:	b508      	push	{r3, lr}
 80265de:	4780      	blx	r0
 80265e0:	f000 f80d 	bl	80265fe <abort>

080265e4 <_ZSt13get_terminatev>:
 80265e4:	4b02      	ldr	r3, [pc, #8]	; (80265f0 <_ZSt13get_terminatev+0xc>)
 80265e6:	6818      	ldr	r0, [r3, #0]
 80265e8:	f3bf 8f5b 	dmb	ish
 80265ec:	4770      	bx	lr
 80265ee:	bf00      	nop
 80265f0:	200000a0 	.word	0x200000a0

080265f4 <_ZSt9terminatev>:
 80265f4:	b508      	push	{r3, lr}
 80265f6:	f7ff fff5 	bl	80265e4 <_ZSt13get_terminatev>
 80265fa:	f7ff ffef 	bl	80265dc <_ZN10__cxxabiv111__terminateEPFvvE>

080265fe <abort>:
 80265fe:	b508      	push	{r3, lr}
 8026600:	2006      	movs	r0, #6
 8026602:	f000 fa27 	bl	8026a54 <raise>
 8026606:	2001      	movs	r0, #1
 8026608:	f7dd fafc 	bl	8003c04 <_exit>

0802660c <__assert_func>:
 802660c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802660e:	4614      	mov	r4, r2
 8026610:	461a      	mov	r2, r3
 8026612:	4b09      	ldr	r3, [pc, #36]	; (8026638 <__assert_func+0x2c>)
 8026614:	681b      	ldr	r3, [r3, #0]
 8026616:	4605      	mov	r5, r0
 8026618:	68d8      	ldr	r0, [r3, #12]
 802661a:	b14c      	cbz	r4, 8026630 <__assert_func+0x24>
 802661c:	4b07      	ldr	r3, [pc, #28]	; (802663c <__assert_func+0x30>)
 802661e:	9100      	str	r1, [sp, #0]
 8026620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026624:	4906      	ldr	r1, [pc, #24]	; (8026640 <__assert_func+0x34>)
 8026626:	462b      	mov	r3, r5
 8026628:	f000 f970 	bl	802690c <fiprintf>
 802662c:	f7ff ffe7 	bl	80265fe <abort>
 8026630:	4b04      	ldr	r3, [pc, #16]	; (8026644 <__assert_func+0x38>)
 8026632:	461c      	mov	r4, r3
 8026634:	e7f3      	b.n	802661e <__assert_func+0x12>
 8026636:	bf00      	nop
 8026638:	200000fc 	.word	0x200000fc
 802663c:	0802b96c 	.word	0x0802b96c
 8026640:	0802b979 	.word	0x0802b979
 8026644:	0802b9a7 	.word	0x0802b9a7

08026648 <atexit>:
 8026648:	2300      	movs	r3, #0
 802664a:	4601      	mov	r1, r0
 802664c:	461a      	mov	r2, r3
 802664e:	4618      	mov	r0, r3
 8026650:	f000 baac 	b.w	8026bac <__register_exitproc>

08026654 <malloc>:
 8026654:	4b02      	ldr	r3, [pc, #8]	; (8026660 <malloc+0xc>)
 8026656:	4601      	mov	r1, r0
 8026658:	6818      	ldr	r0, [r3, #0]
 802665a:	f000 b82b 	b.w	80266b4 <_malloc_r>
 802665e:	bf00      	nop
 8026660:	200000fc 	.word	0x200000fc

08026664 <free>:
 8026664:	4b02      	ldr	r3, [pc, #8]	; (8026670 <free+0xc>)
 8026666:	4601      	mov	r1, r0
 8026668:	6818      	ldr	r0, [r3, #0]
 802666a:	f000 bafd 	b.w	8026c68 <_free_r>
 802666e:	bf00      	nop
 8026670:	200000fc 	.word	0x200000fc

08026674 <sbrk_aligned>:
 8026674:	b570      	push	{r4, r5, r6, lr}
 8026676:	4e0e      	ldr	r6, [pc, #56]	; (80266b0 <sbrk_aligned+0x3c>)
 8026678:	460c      	mov	r4, r1
 802667a:	6831      	ldr	r1, [r6, #0]
 802667c:	4605      	mov	r5, r0
 802667e:	b911      	cbnz	r1, 8026686 <sbrk_aligned+0x12>
 8026680:	f000 fa38 	bl	8026af4 <_sbrk_r>
 8026684:	6030      	str	r0, [r6, #0]
 8026686:	4621      	mov	r1, r4
 8026688:	4628      	mov	r0, r5
 802668a:	f000 fa33 	bl	8026af4 <_sbrk_r>
 802668e:	1c43      	adds	r3, r0, #1
 8026690:	d00a      	beq.n	80266a8 <sbrk_aligned+0x34>
 8026692:	1cc4      	adds	r4, r0, #3
 8026694:	f024 0403 	bic.w	r4, r4, #3
 8026698:	42a0      	cmp	r0, r4
 802669a:	d007      	beq.n	80266ac <sbrk_aligned+0x38>
 802669c:	1a21      	subs	r1, r4, r0
 802669e:	4628      	mov	r0, r5
 80266a0:	f000 fa28 	bl	8026af4 <_sbrk_r>
 80266a4:	3001      	adds	r0, #1
 80266a6:	d101      	bne.n	80266ac <sbrk_aligned+0x38>
 80266a8:	f04f 34ff 	mov.w	r4, #4294967295
 80266ac:	4620      	mov	r0, r4
 80266ae:	bd70      	pop	{r4, r5, r6, pc}
 80266b0:	2000c75c 	.word	0x2000c75c

080266b4 <_malloc_r>:
 80266b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80266b8:	1ccd      	adds	r5, r1, #3
 80266ba:	f025 0503 	bic.w	r5, r5, #3
 80266be:	3508      	adds	r5, #8
 80266c0:	2d0c      	cmp	r5, #12
 80266c2:	bf38      	it	cc
 80266c4:	250c      	movcc	r5, #12
 80266c6:	2d00      	cmp	r5, #0
 80266c8:	4607      	mov	r7, r0
 80266ca:	db01      	blt.n	80266d0 <_malloc_r+0x1c>
 80266cc:	42a9      	cmp	r1, r5
 80266ce:	d905      	bls.n	80266dc <_malloc_r+0x28>
 80266d0:	230c      	movs	r3, #12
 80266d2:	603b      	str	r3, [r7, #0]
 80266d4:	2600      	movs	r6, #0
 80266d6:	4630      	mov	r0, r6
 80266d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80266dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80267b0 <_malloc_r+0xfc>
 80266e0:	f000 f868 	bl	80267b4 <__malloc_lock>
 80266e4:	f8d8 3000 	ldr.w	r3, [r8]
 80266e8:	461c      	mov	r4, r3
 80266ea:	bb5c      	cbnz	r4, 8026744 <_malloc_r+0x90>
 80266ec:	4629      	mov	r1, r5
 80266ee:	4638      	mov	r0, r7
 80266f0:	f7ff ffc0 	bl	8026674 <sbrk_aligned>
 80266f4:	1c43      	adds	r3, r0, #1
 80266f6:	4604      	mov	r4, r0
 80266f8:	d155      	bne.n	80267a6 <_malloc_r+0xf2>
 80266fa:	f8d8 4000 	ldr.w	r4, [r8]
 80266fe:	4626      	mov	r6, r4
 8026700:	2e00      	cmp	r6, #0
 8026702:	d145      	bne.n	8026790 <_malloc_r+0xdc>
 8026704:	2c00      	cmp	r4, #0
 8026706:	d048      	beq.n	802679a <_malloc_r+0xe6>
 8026708:	6823      	ldr	r3, [r4, #0]
 802670a:	4631      	mov	r1, r6
 802670c:	4638      	mov	r0, r7
 802670e:	eb04 0903 	add.w	r9, r4, r3
 8026712:	f000 f9ef 	bl	8026af4 <_sbrk_r>
 8026716:	4581      	cmp	r9, r0
 8026718:	d13f      	bne.n	802679a <_malloc_r+0xe6>
 802671a:	6821      	ldr	r1, [r4, #0]
 802671c:	1a6d      	subs	r5, r5, r1
 802671e:	4629      	mov	r1, r5
 8026720:	4638      	mov	r0, r7
 8026722:	f7ff ffa7 	bl	8026674 <sbrk_aligned>
 8026726:	3001      	adds	r0, #1
 8026728:	d037      	beq.n	802679a <_malloc_r+0xe6>
 802672a:	6823      	ldr	r3, [r4, #0]
 802672c:	442b      	add	r3, r5
 802672e:	6023      	str	r3, [r4, #0]
 8026730:	f8d8 3000 	ldr.w	r3, [r8]
 8026734:	2b00      	cmp	r3, #0
 8026736:	d038      	beq.n	80267aa <_malloc_r+0xf6>
 8026738:	685a      	ldr	r2, [r3, #4]
 802673a:	42a2      	cmp	r2, r4
 802673c:	d12b      	bne.n	8026796 <_malloc_r+0xe2>
 802673e:	2200      	movs	r2, #0
 8026740:	605a      	str	r2, [r3, #4]
 8026742:	e00f      	b.n	8026764 <_malloc_r+0xb0>
 8026744:	6822      	ldr	r2, [r4, #0]
 8026746:	1b52      	subs	r2, r2, r5
 8026748:	d41f      	bmi.n	802678a <_malloc_r+0xd6>
 802674a:	2a0b      	cmp	r2, #11
 802674c:	d917      	bls.n	802677e <_malloc_r+0xca>
 802674e:	1961      	adds	r1, r4, r5
 8026750:	42a3      	cmp	r3, r4
 8026752:	6025      	str	r5, [r4, #0]
 8026754:	bf18      	it	ne
 8026756:	6059      	strne	r1, [r3, #4]
 8026758:	6863      	ldr	r3, [r4, #4]
 802675a:	bf08      	it	eq
 802675c:	f8c8 1000 	streq.w	r1, [r8]
 8026760:	5162      	str	r2, [r4, r5]
 8026762:	604b      	str	r3, [r1, #4]
 8026764:	4638      	mov	r0, r7
 8026766:	f104 060b 	add.w	r6, r4, #11
 802676a:	f000 f829 	bl	80267c0 <__malloc_unlock>
 802676e:	f026 0607 	bic.w	r6, r6, #7
 8026772:	1d23      	adds	r3, r4, #4
 8026774:	1af2      	subs	r2, r6, r3
 8026776:	d0ae      	beq.n	80266d6 <_malloc_r+0x22>
 8026778:	1b9b      	subs	r3, r3, r6
 802677a:	50a3      	str	r3, [r4, r2]
 802677c:	e7ab      	b.n	80266d6 <_malloc_r+0x22>
 802677e:	42a3      	cmp	r3, r4
 8026780:	6862      	ldr	r2, [r4, #4]
 8026782:	d1dd      	bne.n	8026740 <_malloc_r+0x8c>
 8026784:	f8c8 2000 	str.w	r2, [r8]
 8026788:	e7ec      	b.n	8026764 <_malloc_r+0xb0>
 802678a:	4623      	mov	r3, r4
 802678c:	6864      	ldr	r4, [r4, #4]
 802678e:	e7ac      	b.n	80266ea <_malloc_r+0x36>
 8026790:	4634      	mov	r4, r6
 8026792:	6876      	ldr	r6, [r6, #4]
 8026794:	e7b4      	b.n	8026700 <_malloc_r+0x4c>
 8026796:	4613      	mov	r3, r2
 8026798:	e7cc      	b.n	8026734 <_malloc_r+0x80>
 802679a:	230c      	movs	r3, #12
 802679c:	603b      	str	r3, [r7, #0]
 802679e:	4638      	mov	r0, r7
 80267a0:	f000 f80e 	bl	80267c0 <__malloc_unlock>
 80267a4:	e797      	b.n	80266d6 <_malloc_r+0x22>
 80267a6:	6025      	str	r5, [r4, #0]
 80267a8:	e7dc      	b.n	8026764 <_malloc_r+0xb0>
 80267aa:	605b      	str	r3, [r3, #4]
 80267ac:	deff      	udf	#255	; 0xff
 80267ae:	bf00      	nop
 80267b0:	2000c758 	.word	0x2000c758

080267b4 <__malloc_lock>:
 80267b4:	4801      	ldr	r0, [pc, #4]	; (80267bc <__malloc_lock+0x8>)
 80267b6:	f000 b9e9 	b.w	8026b8c <__retarget_lock_acquire_recursive>
 80267ba:	bf00      	nop
 80267bc:	2000c8a1 	.word	0x2000c8a1

080267c0 <__malloc_unlock>:
 80267c0:	4801      	ldr	r0, [pc, #4]	; (80267c8 <__malloc_unlock+0x8>)
 80267c2:	f000 b9e4 	b.w	8026b8e <__retarget_lock_release_recursive>
 80267c6:	bf00      	nop
 80267c8:	2000c8a1 	.word	0x2000c8a1

080267cc <__cxa_atexit>:
 80267cc:	b510      	push	{r4, lr}
 80267ce:	4c05      	ldr	r4, [pc, #20]	; (80267e4 <__cxa_atexit+0x18>)
 80267d0:	4613      	mov	r3, r2
 80267d2:	b12c      	cbz	r4, 80267e0 <__cxa_atexit+0x14>
 80267d4:	460a      	mov	r2, r1
 80267d6:	4601      	mov	r1, r0
 80267d8:	2002      	movs	r0, #2
 80267da:	f000 f9e7 	bl	8026bac <__register_exitproc>
 80267de:	bd10      	pop	{r4, pc}
 80267e0:	4620      	mov	r0, r4
 80267e2:	e7fc      	b.n	80267de <__cxa_atexit+0x12>
 80267e4:	08026bad 	.word	0x08026bad

080267e8 <std>:
 80267e8:	2300      	movs	r3, #0
 80267ea:	b510      	push	{r4, lr}
 80267ec:	4604      	mov	r4, r0
 80267ee:	e9c0 3300 	strd	r3, r3, [r0]
 80267f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80267f6:	6083      	str	r3, [r0, #8]
 80267f8:	8181      	strh	r1, [r0, #12]
 80267fa:	6643      	str	r3, [r0, #100]	; 0x64
 80267fc:	81c2      	strh	r2, [r0, #14]
 80267fe:	6183      	str	r3, [r0, #24]
 8026800:	4619      	mov	r1, r3
 8026802:	2208      	movs	r2, #8
 8026804:	305c      	adds	r0, #92	; 0x5c
 8026806:	f000 f8f4 	bl	80269f2 <memset>
 802680a:	4b05      	ldr	r3, [pc, #20]	; (8026820 <std+0x38>)
 802680c:	6263      	str	r3, [r4, #36]	; 0x24
 802680e:	4b05      	ldr	r3, [pc, #20]	; (8026824 <std+0x3c>)
 8026810:	62a3      	str	r3, [r4, #40]	; 0x28
 8026812:	4b05      	ldr	r3, [pc, #20]	; (8026828 <std+0x40>)
 8026814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026816:	4b05      	ldr	r3, [pc, #20]	; (802682c <std+0x44>)
 8026818:	6224      	str	r4, [r4, #32]
 802681a:	6323      	str	r3, [r4, #48]	; 0x30
 802681c:	bd10      	pop	{r4, pc}
 802681e:	bf00      	nop
 8026820:	0802696d 	.word	0x0802696d
 8026824:	0802698f 	.word	0x0802698f
 8026828:	080269c7 	.word	0x080269c7
 802682c:	080269eb 	.word	0x080269eb

08026830 <stdio_exit_handler>:
 8026830:	4a02      	ldr	r2, [pc, #8]	; (802683c <stdio_exit_handler+0xc>)
 8026832:	4903      	ldr	r1, [pc, #12]	; (8026840 <stdio_exit_handler+0x10>)
 8026834:	4803      	ldr	r0, [pc, #12]	; (8026844 <stdio_exit_handler+0x14>)
 8026836:	f000 b87b 	b.w	8026930 <_fwalk_sglue>
 802683a:	bf00      	nop
 802683c:	200000a4 	.word	0x200000a4
 8026840:	080273b5 	.word	0x080273b5
 8026844:	200000b0 	.word	0x200000b0

08026848 <cleanup_stdio>:
 8026848:	6841      	ldr	r1, [r0, #4]
 802684a:	4b0c      	ldr	r3, [pc, #48]	; (802687c <cleanup_stdio+0x34>)
 802684c:	4299      	cmp	r1, r3
 802684e:	b510      	push	{r4, lr}
 8026850:	4604      	mov	r4, r0
 8026852:	d001      	beq.n	8026858 <cleanup_stdio+0x10>
 8026854:	f000 fdae 	bl	80273b4 <_fflush_r>
 8026858:	68a1      	ldr	r1, [r4, #8]
 802685a:	4b09      	ldr	r3, [pc, #36]	; (8026880 <cleanup_stdio+0x38>)
 802685c:	4299      	cmp	r1, r3
 802685e:	d002      	beq.n	8026866 <cleanup_stdio+0x1e>
 8026860:	4620      	mov	r0, r4
 8026862:	f000 fda7 	bl	80273b4 <_fflush_r>
 8026866:	68e1      	ldr	r1, [r4, #12]
 8026868:	4b06      	ldr	r3, [pc, #24]	; (8026884 <cleanup_stdio+0x3c>)
 802686a:	4299      	cmp	r1, r3
 802686c:	d004      	beq.n	8026878 <cleanup_stdio+0x30>
 802686e:	4620      	mov	r0, r4
 8026870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026874:	f000 bd9e 	b.w	80273b4 <_fflush_r>
 8026878:	bd10      	pop	{r4, pc}
 802687a:	bf00      	nop
 802687c:	2000c760 	.word	0x2000c760
 8026880:	2000c7c8 	.word	0x2000c7c8
 8026884:	2000c830 	.word	0x2000c830

08026888 <global_stdio_init.part.0>:
 8026888:	b510      	push	{r4, lr}
 802688a:	4b0b      	ldr	r3, [pc, #44]	; (80268b8 <global_stdio_init.part.0+0x30>)
 802688c:	4c0b      	ldr	r4, [pc, #44]	; (80268bc <global_stdio_init.part.0+0x34>)
 802688e:	4a0c      	ldr	r2, [pc, #48]	; (80268c0 <global_stdio_init.part.0+0x38>)
 8026890:	601a      	str	r2, [r3, #0]
 8026892:	4620      	mov	r0, r4
 8026894:	2200      	movs	r2, #0
 8026896:	2104      	movs	r1, #4
 8026898:	f7ff ffa6 	bl	80267e8 <std>
 802689c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80268a0:	2201      	movs	r2, #1
 80268a2:	2109      	movs	r1, #9
 80268a4:	f7ff ffa0 	bl	80267e8 <std>
 80268a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80268ac:	2202      	movs	r2, #2
 80268ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268b2:	2112      	movs	r1, #18
 80268b4:	f7ff bf98 	b.w	80267e8 <std>
 80268b8:	2000c898 	.word	0x2000c898
 80268bc:	2000c760 	.word	0x2000c760
 80268c0:	08026831 	.word	0x08026831

080268c4 <__sfp_lock_acquire>:
 80268c4:	4801      	ldr	r0, [pc, #4]	; (80268cc <__sfp_lock_acquire+0x8>)
 80268c6:	f000 b961 	b.w	8026b8c <__retarget_lock_acquire_recursive>
 80268ca:	bf00      	nop
 80268cc:	2000c8a2 	.word	0x2000c8a2

080268d0 <__sfp_lock_release>:
 80268d0:	4801      	ldr	r0, [pc, #4]	; (80268d8 <__sfp_lock_release+0x8>)
 80268d2:	f000 b95c 	b.w	8026b8e <__retarget_lock_release_recursive>
 80268d6:	bf00      	nop
 80268d8:	2000c8a2 	.word	0x2000c8a2

080268dc <__sinit>:
 80268dc:	b510      	push	{r4, lr}
 80268de:	4604      	mov	r4, r0
 80268e0:	f7ff fff0 	bl	80268c4 <__sfp_lock_acquire>
 80268e4:	6a23      	ldr	r3, [r4, #32]
 80268e6:	b11b      	cbz	r3, 80268f0 <__sinit+0x14>
 80268e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268ec:	f7ff bff0 	b.w	80268d0 <__sfp_lock_release>
 80268f0:	4b04      	ldr	r3, [pc, #16]	; (8026904 <__sinit+0x28>)
 80268f2:	6223      	str	r3, [r4, #32]
 80268f4:	4b04      	ldr	r3, [pc, #16]	; (8026908 <__sinit+0x2c>)
 80268f6:	681b      	ldr	r3, [r3, #0]
 80268f8:	2b00      	cmp	r3, #0
 80268fa:	d1f5      	bne.n	80268e8 <__sinit+0xc>
 80268fc:	f7ff ffc4 	bl	8026888 <global_stdio_init.part.0>
 8026900:	e7f2      	b.n	80268e8 <__sinit+0xc>
 8026902:	bf00      	nop
 8026904:	08026849 	.word	0x08026849
 8026908:	2000c898 	.word	0x2000c898

0802690c <fiprintf>:
 802690c:	b40e      	push	{r1, r2, r3}
 802690e:	b503      	push	{r0, r1, lr}
 8026910:	4601      	mov	r1, r0
 8026912:	ab03      	add	r3, sp, #12
 8026914:	4805      	ldr	r0, [pc, #20]	; (802692c <fiprintf+0x20>)
 8026916:	f853 2b04 	ldr.w	r2, [r3], #4
 802691a:	6800      	ldr	r0, [r0, #0]
 802691c:	9301      	str	r3, [sp, #4]
 802691e:	f000 fa19 	bl	8026d54 <_vfiprintf_r>
 8026922:	b002      	add	sp, #8
 8026924:	f85d eb04 	ldr.w	lr, [sp], #4
 8026928:	b003      	add	sp, #12
 802692a:	4770      	bx	lr
 802692c:	200000fc 	.word	0x200000fc

08026930 <_fwalk_sglue>:
 8026930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026934:	4607      	mov	r7, r0
 8026936:	4688      	mov	r8, r1
 8026938:	4614      	mov	r4, r2
 802693a:	2600      	movs	r6, #0
 802693c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026940:	f1b9 0901 	subs.w	r9, r9, #1
 8026944:	d505      	bpl.n	8026952 <_fwalk_sglue+0x22>
 8026946:	6824      	ldr	r4, [r4, #0]
 8026948:	2c00      	cmp	r4, #0
 802694a:	d1f7      	bne.n	802693c <_fwalk_sglue+0xc>
 802694c:	4630      	mov	r0, r6
 802694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026952:	89ab      	ldrh	r3, [r5, #12]
 8026954:	2b01      	cmp	r3, #1
 8026956:	d907      	bls.n	8026968 <_fwalk_sglue+0x38>
 8026958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802695c:	3301      	adds	r3, #1
 802695e:	d003      	beq.n	8026968 <_fwalk_sglue+0x38>
 8026960:	4629      	mov	r1, r5
 8026962:	4638      	mov	r0, r7
 8026964:	47c0      	blx	r8
 8026966:	4306      	orrs	r6, r0
 8026968:	3568      	adds	r5, #104	; 0x68
 802696a:	e7e9      	b.n	8026940 <_fwalk_sglue+0x10>

0802696c <__sread>:
 802696c:	b510      	push	{r4, lr}
 802696e:	460c      	mov	r4, r1
 8026970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026974:	f000 f898 	bl	8026aa8 <_read_r>
 8026978:	2800      	cmp	r0, #0
 802697a:	bfab      	itete	ge
 802697c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802697e:	89a3      	ldrhlt	r3, [r4, #12]
 8026980:	181b      	addge	r3, r3, r0
 8026982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026986:	bfac      	ite	ge
 8026988:	6563      	strge	r3, [r4, #84]	; 0x54
 802698a:	81a3      	strhlt	r3, [r4, #12]
 802698c:	bd10      	pop	{r4, pc}

0802698e <__swrite>:
 802698e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026992:	461f      	mov	r7, r3
 8026994:	898b      	ldrh	r3, [r1, #12]
 8026996:	05db      	lsls	r3, r3, #23
 8026998:	4605      	mov	r5, r0
 802699a:	460c      	mov	r4, r1
 802699c:	4616      	mov	r6, r2
 802699e:	d505      	bpl.n	80269ac <__swrite+0x1e>
 80269a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269a4:	2302      	movs	r3, #2
 80269a6:	2200      	movs	r2, #0
 80269a8:	f000 f86c 	bl	8026a84 <_lseek_r>
 80269ac:	89a3      	ldrh	r3, [r4, #12]
 80269ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80269b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80269b6:	81a3      	strh	r3, [r4, #12]
 80269b8:	4632      	mov	r2, r6
 80269ba:	463b      	mov	r3, r7
 80269bc:	4628      	mov	r0, r5
 80269be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80269c2:	f000 b8a7 	b.w	8026b14 <_write_r>

080269c6 <__sseek>:
 80269c6:	b510      	push	{r4, lr}
 80269c8:	460c      	mov	r4, r1
 80269ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269ce:	f000 f859 	bl	8026a84 <_lseek_r>
 80269d2:	1c43      	adds	r3, r0, #1
 80269d4:	89a3      	ldrh	r3, [r4, #12]
 80269d6:	bf15      	itete	ne
 80269d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80269da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80269de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80269e2:	81a3      	strheq	r3, [r4, #12]
 80269e4:	bf18      	it	ne
 80269e6:	81a3      	strhne	r3, [r4, #12]
 80269e8:	bd10      	pop	{r4, pc}

080269ea <__sclose>:
 80269ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269ee:	f000 b839 	b.w	8026a64 <_close_r>

080269f2 <memset>:
 80269f2:	4402      	add	r2, r0
 80269f4:	4603      	mov	r3, r0
 80269f6:	4293      	cmp	r3, r2
 80269f8:	d100      	bne.n	80269fc <memset+0xa>
 80269fa:	4770      	bx	lr
 80269fc:	f803 1b01 	strb.w	r1, [r3], #1
 8026a00:	e7f9      	b.n	80269f6 <memset+0x4>

08026a02 <_raise_r>:
 8026a02:	291f      	cmp	r1, #31
 8026a04:	b538      	push	{r3, r4, r5, lr}
 8026a06:	4604      	mov	r4, r0
 8026a08:	460d      	mov	r5, r1
 8026a0a:	d904      	bls.n	8026a16 <_raise_r+0x14>
 8026a0c:	2316      	movs	r3, #22
 8026a0e:	6003      	str	r3, [r0, #0]
 8026a10:	f04f 30ff 	mov.w	r0, #4294967295
 8026a14:	bd38      	pop	{r3, r4, r5, pc}
 8026a16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026a18:	b112      	cbz	r2, 8026a20 <_raise_r+0x1e>
 8026a1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026a1e:	b94b      	cbnz	r3, 8026a34 <_raise_r+0x32>
 8026a20:	4620      	mov	r0, r4
 8026a22:	f000 f865 	bl	8026af0 <_getpid_r>
 8026a26:	462a      	mov	r2, r5
 8026a28:	4601      	mov	r1, r0
 8026a2a:	4620      	mov	r0, r4
 8026a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026a30:	f000 b84c 	b.w	8026acc <_kill_r>
 8026a34:	2b01      	cmp	r3, #1
 8026a36:	d00a      	beq.n	8026a4e <_raise_r+0x4c>
 8026a38:	1c59      	adds	r1, r3, #1
 8026a3a:	d103      	bne.n	8026a44 <_raise_r+0x42>
 8026a3c:	2316      	movs	r3, #22
 8026a3e:	6003      	str	r3, [r0, #0]
 8026a40:	2001      	movs	r0, #1
 8026a42:	e7e7      	b.n	8026a14 <_raise_r+0x12>
 8026a44:	2400      	movs	r4, #0
 8026a46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026a4a:	4628      	mov	r0, r5
 8026a4c:	4798      	blx	r3
 8026a4e:	2000      	movs	r0, #0
 8026a50:	e7e0      	b.n	8026a14 <_raise_r+0x12>
	...

08026a54 <raise>:
 8026a54:	4b02      	ldr	r3, [pc, #8]	; (8026a60 <raise+0xc>)
 8026a56:	4601      	mov	r1, r0
 8026a58:	6818      	ldr	r0, [r3, #0]
 8026a5a:	f7ff bfd2 	b.w	8026a02 <_raise_r>
 8026a5e:	bf00      	nop
 8026a60:	200000fc 	.word	0x200000fc

08026a64 <_close_r>:
 8026a64:	b538      	push	{r3, r4, r5, lr}
 8026a66:	4d06      	ldr	r5, [pc, #24]	; (8026a80 <_close_r+0x1c>)
 8026a68:	2300      	movs	r3, #0
 8026a6a:	4604      	mov	r4, r0
 8026a6c:	4608      	mov	r0, r1
 8026a6e:	602b      	str	r3, [r5, #0]
 8026a70:	f7dd f90b 	bl	8003c8a <_close>
 8026a74:	1c43      	adds	r3, r0, #1
 8026a76:	d102      	bne.n	8026a7e <_close_r+0x1a>
 8026a78:	682b      	ldr	r3, [r5, #0]
 8026a7a:	b103      	cbz	r3, 8026a7e <_close_r+0x1a>
 8026a7c:	6023      	str	r3, [r4, #0]
 8026a7e:	bd38      	pop	{r3, r4, r5, pc}
 8026a80:	2000c89c 	.word	0x2000c89c

08026a84 <_lseek_r>:
 8026a84:	b538      	push	{r3, r4, r5, lr}
 8026a86:	4d07      	ldr	r5, [pc, #28]	; (8026aa4 <_lseek_r+0x20>)
 8026a88:	4604      	mov	r4, r0
 8026a8a:	4608      	mov	r0, r1
 8026a8c:	4611      	mov	r1, r2
 8026a8e:	2200      	movs	r2, #0
 8026a90:	602a      	str	r2, [r5, #0]
 8026a92:	461a      	mov	r2, r3
 8026a94:	f7dd f920 	bl	8003cd8 <_lseek>
 8026a98:	1c43      	adds	r3, r0, #1
 8026a9a:	d102      	bne.n	8026aa2 <_lseek_r+0x1e>
 8026a9c:	682b      	ldr	r3, [r5, #0]
 8026a9e:	b103      	cbz	r3, 8026aa2 <_lseek_r+0x1e>
 8026aa0:	6023      	str	r3, [r4, #0]
 8026aa2:	bd38      	pop	{r3, r4, r5, pc}
 8026aa4:	2000c89c 	.word	0x2000c89c

08026aa8 <_read_r>:
 8026aa8:	b538      	push	{r3, r4, r5, lr}
 8026aaa:	4d07      	ldr	r5, [pc, #28]	; (8026ac8 <_read_r+0x20>)
 8026aac:	4604      	mov	r4, r0
 8026aae:	4608      	mov	r0, r1
 8026ab0:	4611      	mov	r1, r2
 8026ab2:	2200      	movs	r2, #0
 8026ab4:	602a      	str	r2, [r5, #0]
 8026ab6:	461a      	mov	r2, r3
 8026ab8:	f7dd f8ae 	bl	8003c18 <_read>
 8026abc:	1c43      	adds	r3, r0, #1
 8026abe:	d102      	bne.n	8026ac6 <_read_r+0x1e>
 8026ac0:	682b      	ldr	r3, [r5, #0]
 8026ac2:	b103      	cbz	r3, 8026ac6 <_read_r+0x1e>
 8026ac4:	6023      	str	r3, [r4, #0]
 8026ac6:	bd38      	pop	{r3, r4, r5, pc}
 8026ac8:	2000c89c 	.word	0x2000c89c

08026acc <_kill_r>:
 8026acc:	b538      	push	{r3, r4, r5, lr}
 8026ace:	4d07      	ldr	r5, [pc, #28]	; (8026aec <_kill_r+0x20>)
 8026ad0:	2300      	movs	r3, #0
 8026ad2:	4604      	mov	r4, r0
 8026ad4:	4608      	mov	r0, r1
 8026ad6:	4611      	mov	r1, r2
 8026ad8:	602b      	str	r3, [r5, #0]
 8026ada:	f7dd f883 	bl	8003be4 <_kill>
 8026ade:	1c43      	adds	r3, r0, #1
 8026ae0:	d102      	bne.n	8026ae8 <_kill_r+0x1c>
 8026ae2:	682b      	ldr	r3, [r5, #0]
 8026ae4:	b103      	cbz	r3, 8026ae8 <_kill_r+0x1c>
 8026ae6:	6023      	str	r3, [r4, #0]
 8026ae8:	bd38      	pop	{r3, r4, r5, pc}
 8026aea:	bf00      	nop
 8026aec:	2000c89c 	.word	0x2000c89c

08026af0 <_getpid_r>:
 8026af0:	f7dd b870 	b.w	8003bd4 <_getpid>

08026af4 <_sbrk_r>:
 8026af4:	b538      	push	{r3, r4, r5, lr}
 8026af6:	4d06      	ldr	r5, [pc, #24]	; (8026b10 <_sbrk_r+0x1c>)
 8026af8:	2300      	movs	r3, #0
 8026afa:	4604      	mov	r4, r0
 8026afc:	4608      	mov	r0, r1
 8026afe:	602b      	str	r3, [r5, #0]
 8026b00:	f7dd f8f8 	bl	8003cf4 <_sbrk>
 8026b04:	1c43      	adds	r3, r0, #1
 8026b06:	d102      	bne.n	8026b0e <_sbrk_r+0x1a>
 8026b08:	682b      	ldr	r3, [r5, #0]
 8026b0a:	b103      	cbz	r3, 8026b0e <_sbrk_r+0x1a>
 8026b0c:	6023      	str	r3, [r4, #0]
 8026b0e:	bd38      	pop	{r3, r4, r5, pc}
 8026b10:	2000c89c 	.word	0x2000c89c

08026b14 <_write_r>:
 8026b14:	b538      	push	{r3, r4, r5, lr}
 8026b16:	4d07      	ldr	r5, [pc, #28]	; (8026b34 <_write_r+0x20>)
 8026b18:	4604      	mov	r4, r0
 8026b1a:	4608      	mov	r0, r1
 8026b1c:	4611      	mov	r1, r2
 8026b1e:	2200      	movs	r2, #0
 8026b20:	602a      	str	r2, [r5, #0]
 8026b22:	461a      	mov	r2, r3
 8026b24:	f7dd f895 	bl	8003c52 <_write>
 8026b28:	1c43      	adds	r3, r0, #1
 8026b2a:	d102      	bne.n	8026b32 <_write_r+0x1e>
 8026b2c:	682b      	ldr	r3, [r5, #0]
 8026b2e:	b103      	cbz	r3, 8026b32 <_write_r+0x1e>
 8026b30:	6023      	str	r3, [r4, #0]
 8026b32:	bd38      	pop	{r3, r4, r5, pc}
 8026b34:	2000c89c 	.word	0x2000c89c

08026b38 <__errno>:
 8026b38:	4b01      	ldr	r3, [pc, #4]	; (8026b40 <__errno+0x8>)
 8026b3a:	6818      	ldr	r0, [r3, #0]
 8026b3c:	4770      	bx	lr
 8026b3e:	bf00      	nop
 8026b40:	200000fc 	.word	0x200000fc

08026b44 <__libc_init_array>:
 8026b44:	b570      	push	{r4, r5, r6, lr}
 8026b46:	4d0d      	ldr	r5, [pc, #52]	; (8026b7c <__libc_init_array+0x38>)
 8026b48:	4c0d      	ldr	r4, [pc, #52]	; (8026b80 <__libc_init_array+0x3c>)
 8026b4a:	1b64      	subs	r4, r4, r5
 8026b4c:	10a4      	asrs	r4, r4, #2
 8026b4e:	2600      	movs	r6, #0
 8026b50:	42a6      	cmp	r6, r4
 8026b52:	d109      	bne.n	8026b68 <__libc_init_array+0x24>
 8026b54:	4d0b      	ldr	r5, [pc, #44]	; (8026b84 <__libc_init_array+0x40>)
 8026b56:	4c0c      	ldr	r4, [pc, #48]	; (8026b88 <__libc_init_array+0x44>)
 8026b58:	f000 fd6e 	bl	8027638 <_init>
 8026b5c:	1b64      	subs	r4, r4, r5
 8026b5e:	10a4      	asrs	r4, r4, #2
 8026b60:	2600      	movs	r6, #0
 8026b62:	42a6      	cmp	r6, r4
 8026b64:	d105      	bne.n	8026b72 <__libc_init_array+0x2e>
 8026b66:	bd70      	pop	{r4, r5, r6, pc}
 8026b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8026b6c:	4798      	blx	r3
 8026b6e:	3601      	adds	r6, #1
 8026b70:	e7ee      	b.n	8026b50 <__libc_init_array+0xc>
 8026b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8026b76:	4798      	blx	r3
 8026b78:	3601      	adds	r6, #1
 8026b7a:	e7f2      	b.n	8026b62 <__libc_init_array+0x1e>
 8026b7c:	0806330c 	.word	0x0806330c
 8026b80:	0806330c 	.word	0x0806330c
 8026b84:	0806330c 	.word	0x0806330c
 8026b88:	08063320 	.word	0x08063320

08026b8c <__retarget_lock_acquire_recursive>:
 8026b8c:	4770      	bx	lr

08026b8e <__retarget_lock_release_recursive>:
 8026b8e:	4770      	bx	lr

08026b90 <memcpy>:
 8026b90:	440a      	add	r2, r1
 8026b92:	4291      	cmp	r1, r2
 8026b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8026b98:	d100      	bne.n	8026b9c <memcpy+0xc>
 8026b9a:	4770      	bx	lr
 8026b9c:	b510      	push	{r4, lr}
 8026b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026ba6:	4291      	cmp	r1, r2
 8026ba8:	d1f9      	bne.n	8026b9e <memcpy+0xe>
 8026baa:	bd10      	pop	{r4, pc}

08026bac <__register_exitproc>:
 8026bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026bb0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8026c64 <__register_exitproc+0xb8>
 8026bb4:	4606      	mov	r6, r0
 8026bb6:	f8d8 0000 	ldr.w	r0, [r8]
 8026bba:	461f      	mov	r7, r3
 8026bbc:	460d      	mov	r5, r1
 8026bbe:	4691      	mov	r9, r2
 8026bc0:	f7ff ffe4 	bl	8026b8c <__retarget_lock_acquire_recursive>
 8026bc4:	4b23      	ldr	r3, [pc, #140]	; (8026c54 <__register_exitproc+0xa8>)
 8026bc6:	681c      	ldr	r4, [r3, #0]
 8026bc8:	b934      	cbnz	r4, 8026bd8 <__register_exitproc+0x2c>
 8026bca:	4c23      	ldr	r4, [pc, #140]	; (8026c58 <__register_exitproc+0xac>)
 8026bcc:	601c      	str	r4, [r3, #0]
 8026bce:	4b23      	ldr	r3, [pc, #140]	; (8026c5c <__register_exitproc+0xb0>)
 8026bd0:	b113      	cbz	r3, 8026bd8 <__register_exitproc+0x2c>
 8026bd2:	681b      	ldr	r3, [r3, #0]
 8026bd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026bd8:	6863      	ldr	r3, [r4, #4]
 8026bda:	2b1f      	cmp	r3, #31
 8026bdc:	dd07      	ble.n	8026bee <__register_exitproc+0x42>
 8026bde:	f8d8 0000 	ldr.w	r0, [r8]
 8026be2:	f7ff ffd4 	bl	8026b8e <__retarget_lock_release_recursive>
 8026be6:	f04f 30ff 	mov.w	r0, #4294967295
 8026bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026bee:	b32e      	cbz	r6, 8026c3c <__register_exitproc+0x90>
 8026bf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026bf4:	b968      	cbnz	r0, 8026c12 <__register_exitproc+0x66>
 8026bf6:	4b1a      	ldr	r3, [pc, #104]	; (8026c60 <__register_exitproc+0xb4>)
 8026bf8:	2b00      	cmp	r3, #0
 8026bfa:	d0f0      	beq.n	8026bde <__register_exitproc+0x32>
 8026bfc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026c00:	f7ff fd28 	bl	8026654 <malloc>
 8026c04:	2800      	cmp	r0, #0
 8026c06:	d0ea      	beq.n	8026bde <__register_exitproc+0x32>
 8026c08:	2300      	movs	r3, #0
 8026c0a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026c0e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026c12:	6863      	ldr	r3, [r4, #4]
 8026c14:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026c18:	2201      	movs	r2, #1
 8026c1a:	409a      	lsls	r2, r3
 8026c1c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026c20:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026c24:	4313      	orrs	r3, r2
 8026c26:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026c2a:	2e02      	cmp	r6, #2
 8026c2c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026c30:	bf02      	ittt	eq
 8026c32:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026c36:	4313      	orreq	r3, r2
 8026c38:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026c3c:	6863      	ldr	r3, [r4, #4]
 8026c3e:	f8d8 0000 	ldr.w	r0, [r8]
 8026c42:	1c5a      	adds	r2, r3, #1
 8026c44:	3302      	adds	r3, #2
 8026c46:	6062      	str	r2, [r4, #4]
 8026c48:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026c4c:	f7ff ff9f 	bl	8026b8e <__retarget_lock_release_recursive>
 8026c50:	2000      	movs	r0, #0
 8026c52:	e7ca      	b.n	8026bea <__register_exitproc+0x3e>
 8026c54:	2000c930 	.word	0x2000c930
 8026c58:	2000c8a4 	.word	0x2000c8a4
 8026c5c:	0802b9a8 	.word	0x0802b9a8
 8026c60:	08026655 	.word	0x08026655
 8026c64:	20000100 	.word	0x20000100

08026c68 <_free_r>:
 8026c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026c6a:	2900      	cmp	r1, #0
 8026c6c:	d044      	beq.n	8026cf8 <_free_r+0x90>
 8026c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026c72:	9001      	str	r0, [sp, #4]
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	f1a1 0404 	sub.w	r4, r1, #4
 8026c7a:	bfb8      	it	lt
 8026c7c:	18e4      	addlt	r4, r4, r3
 8026c7e:	f7ff fd99 	bl	80267b4 <__malloc_lock>
 8026c82:	4a1e      	ldr	r2, [pc, #120]	; (8026cfc <_free_r+0x94>)
 8026c84:	9801      	ldr	r0, [sp, #4]
 8026c86:	6813      	ldr	r3, [r2, #0]
 8026c88:	b933      	cbnz	r3, 8026c98 <_free_r+0x30>
 8026c8a:	6063      	str	r3, [r4, #4]
 8026c8c:	6014      	str	r4, [r2, #0]
 8026c8e:	b003      	add	sp, #12
 8026c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026c94:	f7ff bd94 	b.w	80267c0 <__malloc_unlock>
 8026c98:	42a3      	cmp	r3, r4
 8026c9a:	d908      	bls.n	8026cae <_free_r+0x46>
 8026c9c:	6825      	ldr	r5, [r4, #0]
 8026c9e:	1961      	adds	r1, r4, r5
 8026ca0:	428b      	cmp	r3, r1
 8026ca2:	bf01      	itttt	eq
 8026ca4:	6819      	ldreq	r1, [r3, #0]
 8026ca6:	685b      	ldreq	r3, [r3, #4]
 8026ca8:	1949      	addeq	r1, r1, r5
 8026caa:	6021      	streq	r1, [r4, #0]
 8026cac:	e7ed      	b.n	8026c8a <_free_r+0x22>
 8026cae:	461a      	mov	r2, r3
 8026cb0:	685b      	ldr	r3, [r3, #4]
 8026cb2:	b10b      	cbz	r3, 8026cb8 <_free_r+0x50>
 8026cb4:	42a3      	cmp	r3, r4
 8026cb6:	d9fa      	bls.n	8026cae <_free_r+0x46>
 8026cb8:	6811      	ldr	r1, [r2, #0]
 8026cba:	1855      	adds	r5, r2, r1
 8026cbc:	42a5      	cmp	r5, r4
 8026cbe:	d10b      	bne.n	8026cd8 <_free_r+0x70>
 8026cc0:	6824      	ldr	r4, [r4, #0]
 8026cc2:	4421      	add	r1, r4
 8026cc4:	1854      	adds	r4, r2, r1
 8026cc6:	42a3      	cmp	r3, r4
 8026cc8:	6011      	str	r1, [r2, #0]
 8026cca:	d1e0      	bne.n	8026c8e <_free_r+0x26>
 8026ccc:	681c      	ldr	r4, [r3, #0]
 8026cce:	685b      	ldr	r3, [r3, #4]
 8026cd0:	6053      	str	r3, [r2, #4]
 8026cd2:	440c      	add	r4, r1
 8026cd4:	6014      	str	r4, [r2, #0]
 8026cd6:	e7da      	b.n	8026c8e <_free_r+0x26>
 8026cd8:	d902      	bls.n	8026ce0 <_free_r+0x78>
 8026cda:	230c      	movs	r3, #12
 8026cdc:	6003      	str	r3, [r0, #0]
 8026cde:	e7d6      	b.n	8026c8e <_free_r+0x26>
 8026ce0:	6825      	ldr	r5, [r4, #0]
 8026ce2:	1961      	adds	r1, r4, r5
 8026ce4:	428b      	cmp	r3, r1
 8026ce6:	bf04      	itt	eq
 8026ce8:	6819      	ldreq	r1, [r3, #0]
 8026cea:	685b      	ldreq	r3, [r3, #4]
 8026cec:	6063      	str	r3, [r4, #4]
 8026cee:	bf04      	itt	eq
 8026cf0:	1949      	addeq	r1, r1, r5
 8026cf2:	6021      	streq	r1, [r4, #0]
 8026cf4:	6054      	str	r4, [r2, #4]
 8026cf6:	e7ca      	b.n	8026c8e <_free_r+0x26>
 8026cf8:	b003      	add	sp, #12
 8026cfa:	bd30      	pop	{r4, r5, pc}
 8026cfc:	2000c758 	.word	0x2000c758

08026d00 <__sfputc_r>:
 8026d00:	6893      	ldr	r3, [r2, #8]
 8026d02:	3b01      	subs	r3, #1
 8026d04:	2b00      	cmp	r3, #0
 8026d06:	b410      	push	{r4}
 8026d08:	6093      	str	r3, [r2, #8]
 8026d0a:	da08      	bge.n	8026d1e <__sfputc_r+0x1e>
 8026d0c:	6994      	ldr	r4, [r2, #24]
 8026d0e:	42a3      	cmp	r3, r4
 8026d10:	db01      	blt.n	8026d16 <__sfputc_r+0x16>
 8026d12:	290a      	cmp	r1, #10
 8026d14:	d103      	bne.n	8026d1e <__sfputc_r+0x1e>
 8026d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026d1a:	f000 bb73 	b.w	8027404 <__swbuf_r>
 8026d1e:	6813      	ldr	r3, [r2, #0]
 8026d20:	1c58      	adds	r0, r3, #1
 8026d22:	6010      	str	r0, [r2, #0]
 8026d24:	7019      	strb	r1, [r3, #0]
 8026d26:	4608      	mov	r0, r1
 8026d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026d2c:	4770      	bx	lr

08026d2e <__sfputs_r>:
 8026d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d30:	4606      	mov	r6, r0
 8026d32:	460f      	mov	r7, r1
 8026d34:	4614      	mov	r4, r2
 8026d36:	18d5      	adds	r5, r2, r3
 8026d38:	42ac      	cmp	r4, r5
 8026d3a:	d101      	bne.n	8026d40 <__sfputs_r+0x12>
 8026d3c:	2000      	movs	r0, #0
 8026d3e:	e007      	b.n	8026d50 <__sfputs_r+0x22>
 8026d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026d44:	463a      	mov	r2, r7
 8026d46:	4630      	mov	r0, r6
 8026d48:	f7ff ffda 	bl	8026d00 <__sfputc_r>
 8026d4c:	1c43      	adds	r3, r0, #1
 8026d4e:	d1f3      	bne.n	8026d38 <__sfputs_r+0xa>
 8026d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026d54 <_vfiprintf_r>:
 8026d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d58:	460d      	mov	r5, r1
 8026d5a:	b09d      	sub	sp, #116	; 0x74
 8026d5c:	4614      	mov	r4, r2
 8026d5e:	4698      	mov	r8, r3
 8026d60:	4606      	mov	r6, r0
 8026d62:	b118      	cbz	r0, 8026d6c <_vfiprintf_r+0x18>
 8026d64:	6a03      	ldr	r3, [r0, #32]
 8026d66:	b90b      	cbnz	r3, 8026d6c <_vfiprintf_r+0x18>
 8026d68:	f7ff fdb8 	bl	80268dc <__sinit>
 8026d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026d6e:	07d9      	lsls	r1, r3, #31
 8026d70:	d405      	bmi.n	8026d7e <_vfiprintf_r+0x2a>
 8026d72:	89ab      	ldrh	r3, [r5, #12]
 8026d74:	059a      	lsls	r2, r3, #22
 8026d76:	d402      	bmi.n	8026d7e <_vfiprintf_r+0x2a>
 8026d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d7a:	f7ff ff07 	bl	8026b8c <__retarget_lock_acquire_recursive>
 8026d7e:	89ab      	ldrh	r3, [r5, #12]
 8026d80:	071b      	lsls	r3, r3, #28
 8026d82:	d501      	bpl.n	8026d88 <_vfiprintf_r+0x34>
 8026d84:	692b      	ldr	r3, [r5, #16]
 8026d86:	b99b      	cbnz	r3, 8026db0 <_vfiprintf_r+0x5c>
 8026d88:	4629      	mov	r1, r5
 8026d8a:	4630      	mov	r0, r6
 8026d8c:	f000 fb78 	bl	8027480 <__swsetup_r>
 8026d90:	b170      	cbz	r0, 8026db0 <_vfiprintf_r+0x5c>
 8026d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026d94:	07dc      	lsls	r4, r3, #31
 8026d96:	d504      	bpl.n	8026da2 <_vfiprintf_r+0x4e>
 8026d98:	f04f 30ff 	mov.w	r0, #4294967295
 8026d9c:	b01d      	add	sp, #116	; 0x74
 8026d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026da2:	89ab      	ldrh	r3, [r5, #12]
 8026da4:	0598      	lsls	r0, r3, #22
 8026da6:	d4f7      	bmi.n	8026d98 <_vfiprintf_r+0x44>
 8026da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026daa:	f7ff fef0 	bl	8026b8e <__retarget_lock_release_recursive>
 8026dae:	e7f3      	b.n	8026d98 <_vfiprintf_r+0x44>
 8026db0:	2300      	movs	r3, #0
 8026db2:	9309      	str	r3, [sp, #36]	; 0x24
 8026db4:	2320      	movs	r3, #32
 8026db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8026dbe:	2330      	movs	r3, #48	; 0x30
 8026dc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8026f74 <_vfiprintf_r+0x220>
 8026dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026dc8:	f04f 0901 	mov.w	r9, #1
 8026dcc:	4623      	mov	r3, r4
 8026dce:	469a      	mov	sl, r3
 8026dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026dd4:	b10a      	cbz	r2, 8026dda <_vfiprintf_r+0x86>
 8026dd6:	2a25      	cmp	r2, #37	; 0x25
 8026dd8:	d1f9      	bne.n	8026dce <_vfiprintf_r+0x7a>
 8026dda:	ebba 0b04 	subs.w	fp, sl, r4
 8026dde:	d00b      	beq.n	8026df8 <_vfiprintf_r+0xa4>
 8026de0:	465b      	mov	r3, fp
 8026de2:	4622      	mov	r2, r4
 8026de4:	4629      	mov	r1, r5
 8026de6:	4630      	mov	r0, r6
 8026de8:	f7ff ffa1 	bl	8026d2e <__sfputs_r>
 8026dec:	3001      	adds	r0, #1
 8026dee:	f000 80a9 	beq.w	8026f44 <_vfiprintf_r+0x1f0>
 8026df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026df4:	445a      	add	r2, fp
 8026df6:	9209      	str	r2, [sp, #36]	; 0x24
 8026df8:	f89a 3000 	ldrb.w	r3, [sl]
 8026dfc:	2b00      	cmp	r3, #0
 8026dfe:	f000 80a1 	beq.w	8026f44 <_vfiprintf_r+0x1f0>
 8026e02:	2300      	movs	r3, #0
 8026e04:	f04f 32ff 	mov.w	r2, #4294967295
 8026e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026e0c:	f10a 0a01 	add.w	sl, sl, #1
 8026e10:	9304      	str	r3, [sp, #16]
 8026e12:	9307      	str	r3, [sp, #28]
 8026e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026e18:	931a      	str	r3, [sp, #104]	; 0x68
 8026e1a:	4654      	mov	r4, sl
 8026e1c:	2205      	movs	r2, #5
 8026e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e22:	4854      	ldr	r0, [pc, #336]	; (8026f74 <_vfiprintf_r+0x220>)
 8026e24:	f7d9 f9f4 	bl	8000210 <memchr>
 8026e28:	9a04      	ldr	r2, [sp, #16]
 8026e2a:	b9d8      	cbnz	r0, 8026e64 <_vfiprintf_r+0x110>
 8026e2c:	06d1      	lsls	r1, r2, #27
 8026e2e:	bf44      	itt	mi
 8026e30:	2320      	movmi	r3, #32
 8026e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026e36:	0713      	lsls	r3, r2, #28
 8026e38:	bf44      	itt	mi
 8026e3a:	232b      	movmi	r3, #43	; 0x2b
 8026e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026e40:	f89a 3000 	ldrb.w	r3, [sl]
 8026e44:	2b2a      	cmp	r3, #42	; 0x2a
 8026e46:	d015      	beq.n	8026e74 <_vfiprintf_r+0x120>
 8026e48:	9a07      	ldr	r2, [sp, #28]
 8026e4a:	4654      	mov	r4, sl
 8026e4c:	2000      	movs	r0, #0
 8026e4e:	f04f 0c0a 	mov.w	ip, #10
 8026e52:	4621      	mov	r1, r4
 8026e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026e58:	3b30      	subs	r3, #48	; 0x30
 8026e5a:	2b09      	cmp	r3, #9
 8026e5c:	d94d      	bls.n	8026efa <_vfiprintf_r+0x1a6>
 8026e5e:	b1b0      	cbz	r0, 8026e8e <_vfiprintf_r+0x13a>
 8026e60:	9207      	str	r2, [sp, #28]
 8026e62:	e014      	b.n	8026e8e <_vfiprintf_r+0x13a>
 8026e64:	eba0 0308 	sub.w	r3, r0, r8
 8026e68:	fa09 f303 	lsl.w	r3, r9, r3
 8026e6c:	4313      	orrs	r3, r2
 8026e6e:	9304      	str	r3, [sp, #16]
 8026e70:	46a2      	mov	sl, r4
 8026e72:	e7d2      	b.n	8026e1a <_vfiprintf_r+0xc6>
 8026e74:	9b03      	ldr	r3, [sp, #12]
 8026e76:	1d19      	adds	r1, r3, #4
 8026e78:	681b      	ldr	r3, [r3, #0]
 8026e7a:	9103      	str	r1, [sp, #12]
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	bfbb      	ittet	lt
 8026e80:	425b      	neglt	r3, r3
 8026e82:	f042 0202 	orrlt.w	r2, r2, #2
 8026e86:	9307      	strge	r3, [sp, #28]
 8026e88:	9307      	strlt	r3, [sp, #28]
 8026e8a:	bfb8      	it	lt
 8026e8c:	9204      	strlt	r2, [sp, #16]
 8026e8e:	7823      	ldrb	r3, [r4, #0]
 8026e90:	2b2e      	cmp	r3, #46	; 0x2e
 8026e92:	d10c      	bne.n	8026eae <_vfiprintf_r+0x15a>
 8026e94:	7863      	ldrb	r3, [r4, #1]
 8026e96:	2b2a      	cmp	r3, #42	; 0x2a
 8026e98:	d134      	bne.n	8026f04 <_vfiprintf_r+0x1b0>
 8026e9a:	9b03      	ldr	r3, [sp, #12]
 8026e9c:	1d1a      	adds	r2, r3, #4
 8026e9e:	681b      	ldr	r3, [r3, #0]
 8026ea0:	9203      	str	r2, [sp, #12]
 8026ea2:	2b00      	cmp	r3, #0
 8026ea4:	bfb8      	it	lt
 8026ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8026eaa:	3402      	adds	r4, #2
 8026eac:	9305      	str	r3, [sp, #20]
 8026eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8026f84 <_vfiprintf_r+0x230>
 8026eb2:	7821      	ldrb	r1, [r4, #0]
 8026eb4:	2203      	movs	r2, #3
 8026eb6:	4650      	mov	r0, sl
 8026eb8:	f7d9 f9aa 	bl	8000210 <memchr>
 8026ebc:	b138      	cbz	r0, 8026ece <_vfiprintf_r+0x17a>
 8026ebe:	9b04      	ldr	r3, [sp, #16]
 8026ec0:	eba0 000a 	sub.w	r0, r0, sl
 8026ec4:	2240      	movs	r2, #64	; 0x40
 8026ec6:	4082      	lsls	r2, r0
 8026ec8:	4313      	orrs	r3, r2
 8026eca:	3401      	adds	r4, #1
 8026ecc:	9304      	str	r3, [sp, #16]
 8026ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026ed2:	4829      	ldr	r0, [pc, #164]	; (8026f78 <_vfiprintf_r+0x224>)
 8026ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026ed8:	2206      	movs	r2, #6
 8026eda:	f7d9 f999 	bl	8000210 <memchr>
 8026ede:	2800      	cmp	r0, #0
 8026ee0:	d03f      	beq.n	8026f62 <_vfiprintf_r+0x20e>
 8026ee2:	4b26      	ldr	r3, [pc, #152]	; (8026f7c <_vfiprintf_r+0x228>)
 8026ee4:	bb1b      	cbnz	r3, 8026f2e <_vfiprintf_r+0x1da>
 8026ee6:	9b03      	ldr	r3, [sp, #12]
 8026ee8:	3307      	adds	r3, #7
 8026eea:	f023 0307 	bic.w	r3, r3, #7
 8026eee:	3308      	adds	r3, #8
 8026ef0:	9303      	str	r3, [sp, #12]
 8026ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ef4:	443b      	add	r3, r7
 8026ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8026ef8:	e768      	b.n	8026dcc <_vfiprintf_r+0x78>
 8026efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8026efe:	460c      	mov	r4, r1
 8026f00:	2001      	movs	r0, #1
 8026f02:	e7a6      	b.n	8026e52 <_vfiprintf_r+0xfe>
 8026f04:	2300      	movs	r3, #0
 8026f06:	3401      	adds	r4, #1
 8026f08:	9305      	str	r3, [sp, #20]
 8026f0a:	4619      	mov	r1, r3
 8026f0c:	f04f 0c0a 	mov.w	ip, #10
 8026f10:	4620      	mov	r0, r4
 8026f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026f16:	3a30      	subs	r2, #48	; 0x30
 8026f18:	2a09      	cmp	r2, #9
 8026f1a:	d903      	bls.n	8026f24 <_vfiprintf_r+0x1d0>
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	d0c6      	beq.n	8026eae <_vfiprintf_r+0x15a>
 8026f20:	9105      	str	r1, [sp, #20]
 8026f22:	e7c4      	b.n	8026eae <_vfiprintf_r+0x15a>
 8026f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8026f28:	4604      	mov	r4, r0
 8026f2a:	2301      	movs	r3, #1
 8026f2c:	e7f0      	b.n	8026f10 <_vfiprintf_r+0x1bc>
 8026f2e:	ab03      	add	r3, sp, #12
 8026f30:	9300      	str	r3, [sp, #0]
 8026f32:	462a      	mov	r2, r5
 8026f34:	4b12      	ldr	r3, [pc, #72]	; (8026f80 <_vfiprintf_r+0x22c>)
 8026f36:	a904      	add	r1, sp, #16
 8026f38:	4630      	mov	r0, r6
 8026f3a:	f3af 8000 	nop.w
 8026f3e:	4607      	mov	r7, r0
 8026f40:	1c78      	adds	r0, r7, #1
 8026f42:	d1d6      	bne.n	8026ef2 <_vfiprintf_r+0x19e>
 8026f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026f46:	07d9      	lsls	r1, r3, #31
 8026f48:	d405      	bmi.n	8026f56 <_vfiprintf_r+0x202>
 8026f4a:	89ab      	ldrh	r3, [r5, #12]
 8026f4c:	059a      	lsls	r2, r3, #22
 8026f4e:	d402      	bmi.n	8026f56 <_vfiprintf_r+0x202>
 8026f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026f52:	f7ff fe1c 	bl	8026b8e <__retarget_lock_release_recursive>
 8026f56:	89ab      	ldrh	r3, [r5, #12]
 8026f58:	065b      	lsls	r3, r3, #25
 8026f5a:	f53f af1d 	bmi.w	8026d98 <_vfiprintf_r+0x44>
 8026f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026f60:	e71c      	b.n	8026d9c <_vfiprintf_r+0x48>
 8026f62:	ab03      	add	r3, sp, #12
 8026f64:	9300      	str	r3, [sp, #0]
 8026f66:	462a      	mov	r2, r5
 8026f68:	4b05      	ldr	r3, [pc, #20]	; (8026f80 <_vfiprintf_r+0x22c>)
 8026f6a:	a904      	add	r1, sp, #16
 8026f6c:	4630      	mov	r0, r6
 8026f6e:	f000 f879 	bl	8027064 <_printf_i>
 8026f72:	e7e4      	b.n	8026f3e <_vfiprintf_r+0x1ea>
 8026f74:	0802b9ac 	.word	0x0802b9ac
 8026f78:	0802b9b6 	.word	0x0802b9b6
 8026f7c:	00000000 	.word	0x00000000
 8026f80:	08026d2f 	.word	0x08026d2f
 8026f84:	0802b9b2 	.word	0x0802b9b2

08026f88 <_printf_common>:
 8026f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f8c:	4616      	mov	r6, r2
 8026f8e:	4699      	mov	r9, r3
 8026f90:	688a      	ldr	r2, [r1, #8]
 8026f92:	690b      	ldr	r3, [r1, #16]
 8026f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026f98:	4293      	cmp	r3, r2
 8026f9a:	bfb8      	it	lt
 8026f9c:	4613      	movlt	r3, r2
 8026f9e:	6033      	str	r3, [r6, #0]
 8026fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026fa4:	4607      	mov	r7, r0
 8026fa6:	460c      	mov	r4, r1
 8026fa8:	b10a      	cbz	r2, 8026fae <_printf_common+0x26>
 8026faa:	3301      	adds	r3, #1
 8026fac:	6033      	str	r3, [r6, #0]
 8026fae:	6823      	ldr	r3, [r4, #0]
 8026fb0:	0699      	lsls	r1, r3, #26
 8026fb2:	bf42      	ittt	mi
 8026fb4:	6833      	ldrmi	r3, [r6, #0]
 8026fb6:	3302      	addmi	r3, #2
 8026fb8:	6033      	strmi	r3, [r6, #0]
 8026fba:	6825      	ldr	r5, [r4, #0]
 8026fbc:	f015 0506 	ands.w	r5, r5, #6
 8026fc0:	d106      	bne.n	8026fd0 <_printf_common+0x48>
 8026fc2:	f104 0a19 	add.w	sl, r4, #25
 8026fc6:	68e3      	ldr	r3, [r4, #12]
 8026fc8:	6832      	ldr	r2, [r6, #0]
 8026fca:	1a9b      	subs	r3, r3, r2
 8026fcc:	42ab      	cmp	r3, r5
 8026fce:	dc26      	bgt.n	802701e <_printf_common+0x96>
 8026fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026fd4:	1e13      	subs	r3, r2, #0
 8026fd6:	6822      	ldr	r2, [r4, #0]
 8026fd8:	bf18      	it	ne
 8026fda:	2301      	movne	r3, #1
 8026fdc:	0692      	lsls	r2, r2, #26
 8026fde:	d42b      	bmi.n	8027038 <_printf_common+0xb0>
 8026fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026fe4:	4649      	mov	r1, r9
 8026fe6:	4638      	mov	r0, r7
 8026fe8:	47c0      	blx	r8
 8026fea:	3001      	adds	r0, #1
 8026fec:	d01e      	beq.n	802702c <_printf_common+0xa4>
 8026fee:	6823      	ldr	r3, [r4, #0]
 8026ff0:	6922      	ldr	r2, [r4, #16]
 8026ff2:	f003 0306 	and.w	r3, r3, #6
 8026ff6:	2b04      	cmp	r3, #4
 8026ff8:	bf02      	ittt	eq
 8026ffa:	68e5      	ldreq	r5, [r4, #12]
 8026ffc:	6833      	ldreq	r3, [r6, #0]
 8026ffe:	1aed      	subeq	r5, r5, r3
 8027000:	68a3      	ldr	r3, [r4, #8]
 8027002:	bf0c      	ite	eq
 8027004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027008:	2500      	movne	r5, #0
 802700a:	4293      	cmp	r3, r2
 802700c:	bfc4      	itt	gt
 802700e:	1a9b      	subgt	r3, r3, r2
 8027010:	18ed      	addgt	r5, r5, r3
 8027012:	2600      	movs	r6, #0
 8027014:	341a      	adds	r4, #26
 8027016:	42b5      	cmp	r5, r6
 8027018:	d11a      	bne.n	8027050 <_printf_common+0xc8>
 802701a:	2000      	movs	r0, #0
 802701c:	e008      	b.n	8027030 <_printf_common+0xa8>
 802701e:	2301      	movs	r3, #1
 8027020:	4652      	mov	r2, sl
 8027022:	4649      	mov	r1, r9
 8027024:	4638      	mov	r0, r7
 8027026:	47c0      	blx	r8
 8027028:	3001      	adds	r0, #1
 802702a:	d103      	bne.n	8027034 <_printf_common+0xac>
 802702c:	f04f 30ff 	mov.w	r0, #4294967295
 8027030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027034:	3501      	adds	r5, #1
 8027036:	e7c6      	b.n	8026fc6 <_printf_common+0x3e>
 8027038:	18e1      	adds	r1, r4, r3
 802703a:	1c5a      	adds	r2, r3, #1
 802703c:	2030      	movs	r0, #48	; 0x30
 802703e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027042:	4422      	add	r2, r4
 8027044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802704c:	3302      	adds	r3, #2
 802704e:	e7c7      	b.n	8026fe0 <_printf_common+0x58>
 8027050:	2301      	movs	r3, #1
 8027052:	4622      	mov	r2, r4
 8027054:	4649      	mov	r1, r9
 8027056:	4638      	mov	r0, r7
 8027058:	47c0      	blx	r8
 802705a:	3001      	adds	r0, #1
 802705c:	d0e6      	beq.n	802702c <_printf_common+0xa4>
 802705e:	3601      	adds	r6, #1
 8027060:	e7d9      	b.n	8027016 <_printf_common+0x8e>
	...

08027064 <_printf_i>:
 8027064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027068:	7e0f      	ldrb	r7, [r1, #24]
 802706a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802706c:	2f78      	cmp	r7, #120	; 0x78
 802706e:	4691      	mov	r9, r2
 8027070:	4680      	mov	r8, r0
 8027072:	460c      	mov	r4, r1
 8027074:	469a      	mov	sl, r3
 8027076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802707a:	d807      	bhi.n	802708c <_printf_i+0x28>
 802707c:	2f62      	cmp	r7, #98	; 0x62
 802707e:	d80a      	bhi.n	8027096 <_printf_i+0x32>
 8027080:	2f00      	cmp	r7, #0
 8027082:	f000 80d4 	beq.w	802722e <_printf_i+0x1ca>
 8027086:	2f58      	cmp	r7, #88	; 0x58
 8027088:	f000 80c0 	beq.w	802720c <_printf_i+0x1a8>
 802708c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027094:	e03a      	b.n	802710c <_printf_i+0xa8>
 8027096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802709a:	2b15      	cmp	r3, #21
 802709c:	d8f6      	bhi.n	802708c <_printf_i+0x28>
 802709e:	a101      	add	r1, pc, #4	; (adr r1, 80270a4 <_printf_i+0x40>)
 80270a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80270a4:	080270fd 	.word	0x080270fd
 80270a8:	08027111 	.word	0x08027111
 80270ac:	0802708d 	.word	0x0802708d
 80270b0:	0802708d 	.word	0x0802708d
 80270b4:	0802708d 	.word	0x0802708d
 80270b8:	0802708d 	.word	0x0802708d
 80270bc:	08027111 	.word	0x08027111
 80270c0:	0802708d 	.word	0x0802708d
 80270c4:	0802708d 	.word	0x0802708d
 80270c8:	0802708d 	.word	0x0802708d
 80270cc:	0802708d 	.word	0x0802708d
 80270d0:	08027215 	.word	0x08027215
 80270d4:	0802713d 	.word	0x0802713d
 80270d8:	080271cf 	.word	0x080271cf
 80270dc:	0802708d 	.word	0x0802708d
 80270e0:	0802708d 	.word	0x0802708d
 80270e4:	08027237 	.word	0x08027237
 80270e8:	0802708d 	.word	0x0802708d
 80270ec:	0802713d 	.word	0x0802713d
 80270f0:	0802708d 	.word	0x0802708d
 80270f4:	0802708d 	.word	0x0802708d
 80270f8:	080271d7 	.word	0x080271d7
 80270fc:	682b      	ldr	r3, [r5, #0]
 80270fe:	1d1a      	adds	r2, r3, #4
 8027100:	681b      	ldr	r3, [r3, #0]
 8027102:	602a      	str	r2, [r5, #0]
 8027104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802710c:	2301      	movs	r3, #1
 802710e:	e09f      	b.n	8027250 <_printf_i+0x1ec>
 8027110:	6820      	ldr	r0, [r4, #0]
 8027112:	682b      	ldr	r3, [r5, #0]
 8027114:	0607      	lsls	r7, r0, #24
 8027116:	f103 0104 	add.w	r1, r3, #4
 802711a:	6029      	str	r1, [r5, #0]
 802711c:	d501      	bpl.n	8027122 <_printf_i+0xbe>
 802711e:	681e      	ldr	r6, [r3, #0]
 8027120:	e003      	b.n	802712a <_printf_i+0xc6>
 8027122:	0646      	lsls	r6, r0, #25
 8027124:	d5fb      	bpl.n	802711e <_printf_i+0xba>
 8027126:	f9b3 6000 	ldrsh.w	r6, [r3]
 802712a:	2e00      	cmp	r6, #0
 802712c:	da03      	bge.n	8027136 <_printf_i+0xd2>
 802712e:	232d      	movs	r3, #45	; 0x2d
 8027130:	4276      	negs	r6, r6
 8027132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027136:	485a      	ldr	r0, [pc, #360]	; (80272a0 <_printf_i+0x23c>)
 8027138:	230a      	movs	r3, #10
 802713a:	e012      	b.n	8027162 <_printf_i+0xfe>
 802713c:	682b      	ldr	r3, [r5, #0]
 802713e:	6820      	ldr	r0, [r4, #0]
 8027140:	1d19      	adds	r1, r3, #4
 8027142:	6029      	str	r1, [r5, #0]
 8027144:	0605      	lsls	r5, r0, #24
 8027146:	d501      	bpl.n	802714c <_printf_i+0xe8>
 8027148:	681e      	ldr	r6, [r3, #0]
 802714a:	e002      	b.n	8027152 <_printf_i+0xee>
 802714c:	0641      	lsls	r1, r0, #25
 802714e:	d5fb      	bpl.n	8027148 <_printf_i+0xe4>
 8027150:	881e      	ldrh	r6, [r3, #0]
 8027152:	4853      	ldr	r0, [pc, #332]	; (80272a0 <_printf_i+0x23c>)
 8027154:	2f6f      	cmp	r7, #111	; 0x6f
 8027156:	bf0c      	ite	eq
 8027158:	2308      	moveq	r3, #8
 802715a:	230a      	movne	r3, #10
 802715c:	2100      	movs	r1, #0
 802715e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027162:	6865      	ldr	r5, [r4, #4]
 8027164:	60a5      	str	r5, [r4, #8]
 8027166:	2d00      	cmp	r5, #0
 8027168:	bfa2      	ittt	ge
 802716a:	6821      	ldrge	r1, [r4, #0]
 802716c:	f021 0104 	bicge.w	r1, r1, #4
 8027170:	6021      	strge	r1, [r4, #0]
 8027172:	b90e      	cbnz	r6, 8027178 <_printf_i+0x114>
 8027174:	2d00      	cmp	r5, #0
 8027176:	d04b      	beq.n	8027210 <_printf_i+0x1ac>
 8027178:	4615      	mov	r5, r2
 802717a:	fbb6 f1f3 	udiv	r1, r6, r3
 802717e:	fb03 6711 	mls	r7, r3, r1, r6
 8027182:	5dc7      	ldrb	r7, [r0, r7]
 8027184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027188:	4637      	mov	r7, r6
 802718a:	42bb      	cmp	r3, r7
 802718c:	460e      	mov	r6, r1
 802718e:	d9f4      	bls.n	802717a <_printf_i+0x116>
 8027190:	2b08      	cmp	r3, #8
 8027192:	d10b      	bne.n	80271ac <_printf_i+0x148>
 8027194:	6823      	ldr	r3, [r4, #0]
 8027196:	07de      	lsls	r6, r3, #31
 8027198:	d508      	bpl.n	80271ac <_printf_i+0x148>
 802719a:	6923      	ldr	r3, [r4, #16]
 802719c:	6861      	ldr	r1, [r4, #4]
 802719e:	4299      	cmp	r1, r3
 80271a0:	bfde      	ittt	le
 80271a2:	2330      	movle	r3, #48	; 0x30
 80271a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80271a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80271ac:	1b52      	subs	r2, r2, r5
 80271ae:	6122      	str	r2, [r4, #16]
 80271b0:	f8cd a000 	str.w	sl, [sp]
 80271b4:	464b      	mov	r3, r9
 80271b6:	aa03      	add	r2, sp, #12
 80271b8:	4621      	mov	r1, r4
 80271ba:	4640      	mov	r0, r8
 80271bc:	f7ff fee4 	bl	8026f88 <_printf_common>
 80271c0:	3001      	adds	r0, #1
 80271c2:	d14a      	bne.n	802725a <_printf_i+0x1f6>
 80271c4:	f04f 30ff 	mov.w	r0, #4294967295
 80271c8:	b004      	add	sp, #16
 80271ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80271ce:	6823      	ldr	r3, [r4, #0]
 80271d0:	f043 0320 	orr.w	r3, r3, #32
 80271d4:	6023      	str	r3, [r4, #0]
 80271d6:	4833      	ldr	r0, [pc, #204]	; (80272a4 <_printf_i+0x240>)
 80271d8:	2778      	movs	r7, #120	; 0x78
 80271da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80271de:	6823      	ldr	r3, [r4, #0]
 80271e0:	6829      	ldr	r1, [r5, #0]
 80271e2:	061f      	lsls	r7, r3, #24
 80271e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80271e8:	d402      	bmi.n	80271f0 <_printf_i+0x18c>
 80271ea:	065f      	lsls	r7, r3, #25
 80271ec:	bf48      	it	mi
 80271ee:	b2b6      	uxthmi	r6, r6
 80271f0:	07df      	lsls	r7, r3, #31
 80271f2:	bf48      	it	mi
 80271f4:	f043 0320 	orrmi.w	r3, r3, #32
 80271f8:	6029      	str	r1, [r5, #0]
 80271fa:	bf48      	it	mi
 80271fc:	6023      	strmi	r3, [r4, #0]
 80271fe:	b91e      	cbnz	r6, 8027208 <_printf_i+0x1a4>
 8027200:	6823      	ldr	r3, [r4, #0]
 8027202:	f023 0320 	bic.w	r3, r3, #32
 8027206:	6023      	str	r3, [r4, #0]
 8027208:	2310      	movs	r3, #16
 802720a:	e7a7      	b.n	802715c <_printf_i+0xf8>
 802720c:	4824      	ldr	r0, [pc, #144]	; (80272a0 <_printf_i+0x23c>)
 802720e:	e7e4      	b.n	80271da <_printf_i+0x176>
 8027210:	4615      	mov	r5, r2
 8027212:	e7bd      	b.n	8027190 <_printf_i+0x12c>
 8027214:	682b      	ldr	r3, [r5, #0]
 8027216:	6826      	ldr	r6, [r4, #0]
 8027218:	6961      	ldr	r1, [r4, #20]
 802721a:	1d18      	adds	r0, r3, #4
 802721c:	6028      	str	r0, [r5, #0]
 802721e:	0635      	lsls	r5, r6, #24
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	d501      	bpl.n	8027228 <_printf_i+0x1c4>
 8027224:	6019      	str	r1, [r3, #0]
 8027226:	e002      	b.n	802722e <_printf_i+0x1ca>
 8027228:	0670      	lsls	r0, r6, #25
 802722a:	d5fb      	bpl.n	8027224 <_printf_i+0x1c0>
 802722c:	8019      	strh	r1, [r3, #0]
 802722e:	2300      	movs	r3, #0
 8027230:	6123      	str	r3, [r4, #16]
 8027232:	4615      	mov	r5, r2
 8027234:	e7bc      	b.n	80271b0 <_printf_i+0x14c>
 8027236:	682b      	ldr	r3, [r5, #0]
 8027238:	1d1a      	adds	r2, r3, #4
 802723a:	602a      	str	r2, [r5, #0]
 802723c:	681d      	ldr	r5, [r3, #0]
 802723e:	6862      	ldr	r2, [r4, #4]
 8027240:	2100      	movs	r1, #0
 8027242:	4628      	mov	r0, r5
 8027244:	f7d8 ffe4 	bl	8000210 <memchr>
 8027248:	b108      	cbz	r0, 802724e <_printf_i+0x1ea>
 802724a:	1b40      	subs	r0, r0, r5
 802724c:	6060      	str	r0, [r4, #4]
 802724e:	6863      	ldr	r3, [r4, #4]
 8027250:	6123      	str	r3, [r4, #16]
 8027252:	2300      	movs	r3, #0
 8027254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027258:	e7aa      	b.n	80271b0 <_printf_i+0x14c>
 802725a:	6923      	ldr	r3, [r4, #16]
 802725c:	462a      	mov	r2, r5
 802725e:	4649      	mov	r1, r9
 8027260:	4640      	mov	r0, r8
 8027262:	47d0      	blx	sl
 8027264:	3001      	adds	r0, #1
 8027266:	d0ad      	beq.n	80271c4 <_printf_i+0x160>
 8027268:	6823      	ldr	r3, [r4, #0]
 802726a:	079b      	lsls	r3, r3, #30
 802726c:	d413      	bmi.n	8027296 <_printf_i+0x232>
 802726e:	68e0      	ldr	r0, [r4, #12]
 8027270:	9b03      	ldr	r3, [sp, #12]
 8027272:	4298      	cmp	r0, r3
 8027274:	bfb8      	it	lt
 8027276:	4618      	movlt	r0, r3
 8027278:	e7a6      	b.n	80271c8 <_printf_i+0x164>
 802727a:	2301      	movs	r3, #1
 802727c:	4632      	mov	r2, r6
 802727e:	4649      	mov	r1, r9
 8027280:	4640      	mov	r0, r8
 8027282:	47d0      	blx	sl
 8027284:	3001      	adds	r0, #1
 8027286:	d09d      	beq.n	80271c4 <_printf_i+0x160>
 8027288:	3501      	adds	r5, #1
 802728a:	68e3      	ldr	r3, [r4, #12]
 802728c:	9903      	ldr	r1, [sp, #12]
 802728e:	1a5b      	subs	r3, r3, r1
 8027290:	42ab      	cmp	r3, r5
 8027292:	dcf2      	bgt.n	802727a <_printf_i+0x216>
 8027294:	e7eb      	b.n	802726e <_printf_i+0x20a>
 8027296:	2500      	movs	r5, #0
 8027298:	f104 0619 	add.w	r6, r4, #25
 802729c:	e7f5      	b.n	802728a <_printf_i+0x226>
 802729e:	bf00      	nop
 80272a0:	0802b9bd 	.word	0x0802b9bd
 80272a4:	0802b9ce 	.word	0x0802b9ce

080272a8 <__sflush_r>:
 80272a8:	898a      	ldrh	r2, [r1, #12]
 80272aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80272ae:	4605      	mov	r5, r0
 80272b0:	0710      	lsls	r0, r2, #28
 80272b2:	460c      	mov	r4, r1
 80272b4:	d458      	bmi.n	8027368 <__sflush_r+0xc0>
 80272b6:	684b      	ldr	r3, [r1, #4]
 80272b8:	2b00      	cmp	r3, #0
 80272ba:	dc05      	bgt.n	80272c8 <__sflush_r+0x20>
 80272bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80272be:	2b00      	cmp	r3, #0
 80272c0:	dc02      	bgt.n	80272c8 <__sflush_r+0x20>
 80272c2:	2000      	movs	r0, #0
 80272c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80272c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80272ca:	2e00      	cmp	r6, #0
 80272cc:	d0f9      	beq.n	80272c2 <__sflush_r+0x1a>
 80272ce:	2300      	movs	r3, #0
 80272d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80272d4:	682f      	ldr	r7, [r5, #0]
 80272d6:	6a21      	ldr	r1, [r4, #32]
 80272d8:	602b      	str	r3, [r5, #0]
 80272da:	d032      	beq.n	8027342 <__sflush_r+0x9a>
 80272dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80272de:	89a3      	ldrh	r3, [r4, #12]
 80272e0:	075a      	lsls	r2, r3, #29
 80272e2:	d505      	bpl.n	80272f0 <__sflush_r+0x48>
 80272e4:	6863      	ldr	r3, [r4, #4]
 80272e6:	1ac0      	subs	r0, r0, r3
 80272e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80272ea:	b10b      	cbz	r3, 80272f0 <__sflush_r+0x48>
 80272ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80272ee:	1ac0      	subs	r0, r0, r3
 80272f0:	2300      	movs	r3, #0
 80272f2:	4602      	mov	r2, r0
 80272f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80272f6:	6a21      	ldr	r1, [r4, #32]
 80272f8:	4628      	mov	r0, r5
 80272fa:	47b0      	blx	r6
 80272fc:	1c43      	adds	r3, r0, #1
 80272fe:	89a3      	ldrh	r3, [r4, #12]
 8027300:	d106      	bne.n	8027310 <__sflush_r+0x68>
 8027302:	6829      	ldr	r1, [r5, #0]
 8027304:	291d      	cmp	r1, #29
 8027306:	d82b      	bhi.n	8027360 <__sflush_r+0xb8>
 8027308:	4a29      	ldr	r2, [pc, #164]	; (80273b0 <__sflush_r+0x108>)
 802730a:	410a      	asrs	r2, r1
 802730c:	07d6      	lsls	r6, r2, #31
 802730e:	d427      	bmi.n	8027360 <__sflush_r+0xb8>
 8027310:	2200      	movs	r2, #0
 8027312:	6062      	str	r2, [r4, #4]
 8027314:	04d9      	lsls	r1, r3, #19
 8027316:	6922      	ldr	r2, [r4, #16]
 8027318:	6022      	str	r2, [r4, #0]
 802731a:	d504      	bpl.n	8027326 <__sflush_r+0x7e>
 802731c:	1c42      	adds	r2, r0, #1
 802731e:	d101      	bne.n	8027324 <__sflush_r+0x7c>
 8027320:	682b      	ldr	r3, [r5, #0]
 8027322:	b903      	cbnz	r3, 8027326 <__sflush_r+0x7e>
 8027324:	6560      	str	r0, [r4, #84]	; 0x54
 8027326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027328:	602f      	str	r7, [r5, #0]
 802732a:	2900      	cmp	r1, #0
 802732c:	d0c9      	beq.n	80272c2 <__sflush_r+0x1a>
 802732e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027332:	4299      	cmp	r1, r3
 8027334:	d002      	beq.n	802733c <__sflush_r+0x94>
 8027336:	4628      	mov	r0, r5
 8027338:	f7ff fc96 	bl	8026c68 <_free_r>
 802733c:	2000      	movs	r0, #0
 802733e:	6360      	str	r0, [r4, #52]	; 0x34
 8027340:	e7c0      	b.n	80272c4 <__sflush_r+0x1c>
 8027342:	2301      	movs	r3, #1
 8027344:	4628      	mov	r0, r5
 8027346:	47b0      	blx	r6
 8027348:	1c41      	adds	r1, r0, #1
 802734a:	d1c8      	bne.n	80272de <__sflush_r+0x36>
 802734c:	682b      	ldr	r3, [r5, #0]
 802734e:	2b00      	cmp	r3, #0
 8027350:	d0c5      	beq.n	80272de <__sflush_r+0x36>
 8027352:	2b1d      	cmp	r3, #29
 8027354:	d001      	beq.n	802735a <__sflush_r+0xb2>
 8027356:	2b16      	cmp	r3, #22
 8027358:	d101      	bne.n	802735e <__sflush_r+0xb6>
 802735a:	602f      	str	r7, [r5, #0]
 802735c:	e7b1      	b.n	80272c2 <__sflush_r+0x1a>
 802735e:	89a3      	ldrh	r3, [r4, #12]
 8027360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027364:	81a3      	strh	r3, [r4, #12]
 8027366:	e7ad      	b.n	80272c4 <__sflush_r+0x1c>
 8027368:	690f      	ldr	r7, [r1, #16]
 802736a:	2f00      	cmp	r7, #0
 802736c:	d0a9      	beq.n	80272c2 <__sflush_r+0x1a>
 802736e:	0793      	lsls	r3, r2, #30
 8027370:	680e      	ldr	r6, [r1, #0]
 8027372:	bf08      	it	eq
 8027374:	694b      	ldreq	r3, [r1, #20]
 8027376:	600f      	str	r7, [r1, #0]
 8027378:	bf18      	it	ne
 802737a:	2300      	movne	r3, #0
 802737c:	eba6 0807 	sub.w	r8, r6, r7
 8027380:	608b      	str	r3, [r1, #8]
 8027382:	f1b8 0f00 	cmp.w	r8, #0
 8027386:	dd9c      	ble.n	80272c2 <__sflush_r+0x1a>
 8027388:	6a21      	ldr	r1, [r4, #32]
 802738a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802738c:	4643      	mov	r3, r8
 802738e:	463a      	mov	r2, r7
 8027390:	4628      	mov	r0, r5
 8027392:	47b0      	blx	r6
 8027394:	2800      	cmp	r0, #0
 8027396:	dc06      	bgt.n	80273a6 <__sflush_r+0xfe>
 8027398:	89a3      	ldrh	r3, [r4, #12]
 802739a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802739e:	81a3      	strh	r3, [r4, #12]
 80273a0:	f04f 30ff 	mov.w	r0, #4294967295
 80273a4:	e78e      	b.n	80272c4 <__sflush_r+0x1c>
 80273a6:	4407      	add	r7, r0
 80273a8:	eba8 0800 	sub.w	r8, r8, r0
 80273ac:	e7e9      	b.n	8027382 <__sflush_r+0xda>
 80273ae:	bf00      	nop
 80273b0:	dfbffffe 	.word	0xdfbffffe

080273b4 <_fflush_r>:
 80273b4:	b538      	push	{r3, r4, r5, lr}
 80273b6:	690b      	ldr	r3, [r1, #16]
 80273b8:	4605      	mov	r5, r0
 80273ba:	460c      	mov	r4, r1
 80273bc:	b913      	cbnz	r3, 80273c4 <_fflush_r+0x10>
 80273be:	2500      	movs	r5, #0
 80273c0:	4628      	mov	r0, r5
 80273c2:	bd38      	pop	{r3, r4, r5, pc}
 80273c4:	b118      	cbz	r0, 80273ce <_fflush_r+0x1a>
 80273c6:	6a03      	ldr	r3, [r0, #32]
 80273c8:	b90b      	cbnz	r3, 80273ce <_fflush_r+0x1a>
 80273ca:	f7ff fa87 	bl	80268dc <__sinit>
 80273ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273d2:	2b00      	cmp	r3, #0
 80273d4:	d0f3      	beq.n	80273be <_fflush_r+0xa>
 80273d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80273d8:	07d0      	lsls	r0, r2, #31
 80273da:	d404      	bmi.n	80273e6 <_fflush_r+0x32>
 80273dc:	0599      	lsls	r1, r3, #22
 80273de:	d402      	bmi.n	80273e6 <_fflush_r+0x32>
 80273e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80273e2:	f7ff fbd3 	bl	8026b8c <__retarget_lock_acquire_recursive>
 80273e6:	4628      	mov	r0, r5
 80273e8:	4621      	mov	r1, r4
 80273ea:	f7ff ff5d 	bl	80272a8 <__sflush_r>
 80273ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80273f0:	07da      	lsls	r2, r3, #31
 80273f2:	4605      	mov	r5, r0
 80273f4:	d4e4      	bmi.n	80273c0 <_fflush_r+0xc>
 80273f6:	89a3      	ldrh	r3, [r4, #12]
 80273f8:	059b      	lsls	r3, r3, #22
 80273fa:	d4e1      	bmi.n	80273c0 <_fflush_r+0xc>
 80273fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80273fe:	f7ff fbc6 	bl	8026b8e <__retarget_lock_release_recursive>
 8027402:	e7dd      	b.n	80273c0 <_fflush_r+0xc>

08027404 <__swbuf_r>:
 8027404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027406:	460e      	mov	r6, r1
 8027408:	4614      	mov	r4, r2
 802740a:	4605      	mov	r5, r0
 802740c:	b118      	cbz	r0, 8027416 <__swbuf_r+0x12>
 802740e:	6a03      	ldr	r3, [r0, #32]
 8027410:	b90b      	cbnz	r3, 8027416 <__swbuf_r+0x12>
 8027412:	f7ff fa63 	bl	80268dc <__sinit>
 8027416:	69a3      	ldr	r3, [r4, #24]
 8027418:	60a3      	str	r3, [r4, #8]
 802741a:	89a3      	ldrh	r3, [r4, #12]
 802741c:	071a      	lsls	r2, r3, #28
 802741e:	d525      	bpl.n	802746c <__swbuf_r+0x68>
 8027420:	6923      	ldr	r3, [r4, #16]
 8027422:	b31b      	cbz	r3, 802746c <__swbuf_r+0x68>
 8027424:	6823      	ldr	r3, [r4, #0]
 8027426:	6922      	ldr	r2, [r4, #16]
 8027428:	1a98      	subs	r0, r3, r2
 802742a:	6963      	ldr	r3, [r4, #20]
 802742c:	b2f6      	uxtb	r6, r6
 802742e:	4283      	cmp	r3, r0
 8027430:	4637      	mov	r7, r6
 8027432:	dc04      	bgt.n	802743e <__swbuf_r+0x3a>
 8027434:	4621      	mov	r1, r4
 8027436:	4628      	mov	r0, r5
 8027438:	f7ff ffbc 	bl	80273b4 <_fflush_r>
 802743c:	b9e0      	cbnz	r0, 8027478 <__swbuf_r+0x74>
 802743e:	68a3      	ldr	r3, [r4, #8]
 8027440:	3b01      	subs	r3, #1
 8027442:	60a3      	str	r3, [r4, #8]
 8027444:	6823      	ldr	r3, [r4, #0]
 8027446:	1c5a      	adds	r2, r3, #1
 8027448:	6022      	str	r2, [r4, #0]
 802744a:	701e      	strb	r6, [r3, #0]
 802744c:	6962      	ldr	r2, [r4, #20]
 802744e:	1c43      	adds	r3, r0, #1
 8027450:	429a      	cmp	r2, r3
 8027452:	d004      	beq.n	802745e <__swbuf_r+0x5a>
 8027454:	89a3      	ldrh	r3, [r4, #12]
 8027456:	07db      	lsls	r3, r3, #31
 8027458:	d506      	bpl.n	8027468 <__swbuf_r+0x64>
 802745a:	2e0a      	cmp	r6, #10
 802745c:	d104      	bne.n	8027468 <__swbuf_r+0x64>
 802745e:	4621      	mov	r1, r4
 8027460:	4628      	mov	r0, r5
 8027462:	f7ff ffa7 	bl	80273b4 <_fflush_r>
 8027466:	b938      	cbnz	r0, 8027478 <__swbuf_r+0x74>
 8027468:	4638      	mov	r0, r7
 802746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802746c:	4621      	mov	r1, r4
 802746e:	4628      	mov	r0, r5
 8027470:	f000 f806 	bl	8027480 <__swsetup_r>
 8027474:	2800      	cmp	r0, #0
 8027476:	d0d5      	beq.n	8027424 <__swbuf_r+0x20>
 8027478:	f04f 37ff 	mov.w	r7, #4294967295
 802747c:	e7f4      	b.n	8027468 <__swbuf_r+0x64>
	...

08027480 <__swsetup_r>:
 8027480:	b538      	push	{r3, r4, r5, lr}
 8027482:	4b2a      	ldr	r3, [pc, #168]	; (802752c <__swsetup_r+0xac>)
 8027484:	4605      	mov	r5, r0
 8027486:	6818      	ldr	r0, [r3, #0]
 8027488:	460c      	mov	r4, r1
 802748a:	b118      	cbz	r0, 8027494 <__swsetup_r+0x14>
 802748c:	6a03      	ldr	r3, [r0, #32]
 802748e:	b90b      	cbnz	r3, 8027494 <__swsetup_r+0x14>
 8027490:	f7ff fa24 	bl	80268dc <__sinit>
 8027494:	89a3      	ldrh	r3, [r4, #12]
 8027496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802749a:	0718      	lsls	r0, r3, #28
 802749c:	d422      	bmi.n	80274e4 <__swsetup_r+0x64>
 802749e:	06d9      	lsls	r1, r3, #27
 80274a0:	d407      	bmi.n	80274b2 <__swsetup_r+0x32>
 80274a2:	2309      	movs	r3, #9
 80274a4:	602b      	str	r3, [r5, #0]
 80274a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80274aa:	81a3      	strh	r3, [r4, #12]
 80274ac:	f04f 30ff 	mov.w	r0, #4294967295
 80274b0:	e034      	b.n	802751c <__swsetup_r+0x9c>
 80274b2:	0758      	lsls	r0, r3, #29
 80274b4:	d512      	bpl.n	80274dc <__swsetup_r+0x5c>
 80274b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80274b8:	b141      	cbz	r1, 80274cc <__swsetup_r+0x4c>
 80274ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80274be:	4299      	cmp	r1, r3
 80274c0:	d002      	beq.n	80274c8 <__swsetup_r+0x48>
 80274c2:	4628      	mov	r0, r5
 80274c4:	f7ff fbd0 	bl	8026c68 <_free_r>
 80274c8:	2300      	movs	r3, #0
 80274ca:	6363      	str	r3, [r4, #52]	; 0x34
 80274cc:	89a3      	ldrh	r3, [r4, #12]
 80274ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80274d2:	81a3      	strh	r3, [r4, #12]
 80274d4:	2300      	movs	r3, #0
 80274d6:	6063      	str	r3, [r4, #4]
 80274d8:	6923      	ldr	r3, [r4, #16]
 80274da:	6023      	str	r3, [r4, #0]
 80274dc:	89a3      	ldrh	r3, [r4, #12]
 80274de:	f043 0308 	orr.w	r3, r3, #8
 80274e2:	81a3      	strh	r3, [r4, #12]
 80274e4:	6923      	ldr	r3, [r4, #16]
 80274e6:	b94b      	cbnz	r3, 80274fc <__swsetup_r+0x7c>
 80274e8:	89a3      	ldrh	r3, [r4, #12]
 80274ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80274ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80274f2:	d003      	beq.n	80274fc <__swsetup_r+0x7c>
 80274f4:	4621      	mov	r1, r4
 80274f6:	4628      	mov	r0, r5
 80274f8:	f000 f840 	bl	802757c <__smakebuf_r>
 80274fc:	89a0      	ldrh	r0, [r4, #12]
 80274fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027502:	f010 0301 	ands.w	r3, r0, #1
 8027506:	d00a      	beq.n	802751e <__swsetup_r+0x9e>
 8027508:	2300      	movs	r3, #0
 802750a:	60a3      	str	r3, [r4, #8]
 802750c:	6963      	ldr	r3, [r4, #20]
 802750e:	425b      	negs	r3, r3
 8027510:	61a3      	str	r3, [r4, #24]
 8027512:	6923      	ldr	r3, [r4, #16]
 8027514:	b943      	cbnz	r3, 8027528 <__swsetup_r+0xa8>
 8027516:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802751a:	d1c4      	bne.n	80274a6 <__swsetup_r+0x26>
 802751c:	bd38      	pop	{r3, r4, r5, pc}
 802751e:	0781      	lsls	r1, r0, #30
 8027520:	bf58      	it	pl
 8027522:	6963      	ldrpl	r3, [r4, #20]
 8027524:	60a3      	str	r3, [r4, #8]
 8027526:	e7f4      	b.n	8027512 <__swsetup_r+0x92>
 8027528:	2000      	movs	r0, #0
 802752a:	e7f7      	b.n	802751c <__swsetup_r+0x9c>
 802752c:	200000fc 	.word	0x200000fc

08027530 <__swhatbuf_r>:
 8027530:	b570      	push	{r4, r5, r6, lr}
 8027532:	460c      	mov	r4, r1
 8027534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027538:	2900      	cmp	r1, #0
 802753a:	b096      	sub	sp, #88	; 0x58
 802753c:	4615      	mov	r5, r2
 802753e:	461e      	mov	r6, r3
 8027540:	da0d      	bge.n	802755e <__swhatbuf_r+0x2e>
 8027542:	89a3      	ldrh	r3, [r4, #12]
 8027544:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027548:	f04f 0100 	mov.w	r1, #0
 802754c:	bf0c      	ite	eq
 802754e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8027552:	2340      	movne	r3, #64	; 0x40
 8027554:	2000      	movs	r0, #0
 8027556:	6031      	str	r1, [r6, #0]
 8027558:	602b      	str	r3, [r5, #0]
 802755a:	b016      	add	sp, #88	; 0x58
 802755c:	bd70      	pop	{r4, r5, r6, pc}
 802755e:	466a      	mov	r2, sp
 8027560:	f000 f848 	bl	80275f4 <_fstat_r>
 8027564:	2800      	cmp	r0, #0
 8027566:	dbec      	blt.n	8027542 <__swhatbuf_r+0x12>
 8027568:	9901      	ldr	r1, [sp, #4]
 802756a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802756e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027572:	4259      	negs	r1, r3
 8027574:	4159      	adcs	r1, r3
 8027576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802757a:	e7eb      	b.n	8027554 <__swhatbuf_r+0x24>

0802757c <__smakebuf_r>:
 802757c:	898b      	ldrh	r3, [r1, #12]
 802757e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027580:	079d      	lsls	r5, r3, #30
 8027582:	4606      	mov	r6, r0
 8027584:	460c      	mov	r4, r1
 8027586:	d507      	bpl.n	8027598 <__smakebuf_r+0x1c>
 8027588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802758c:	6023      	str	r3, [r4, #0]
 802758e:	6123      	str	r3, [r4, #16]
 8027590:	2301      	movs	r3, #1
 8027592:	6163      	str	r3, [r4, #20]
 8027594:	b002      	add	sp, #8
 8027596:	bd70      	pop	{r4, r5, r6, pc}
 8027598:	ab01      	add	r3, sp, #4
 802759a:	466a      	mov	r2, sp
 802759c:	f7ff ffc8 	bl	8027530 <__swhatbuf_r>
 80275a0:	9900      	ldr	r1, [sp, #0]
 80275a2:	4605      	mov	r5, r0
 80275a4:	4630      	mov	r0, r6
 80275a6:	f7ff f885 	bl	80266b4 <_malloc_r>
 80275aa:	b948      	cbnz	r0, 80275c0 <__smakebuf_r+0x44>
 80275ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80275b0:	059a      	lsls	r2, r3, #22
 80275b2:	d4ef      	bmi.n	8027594 <__smakebuf_r+0x18>
 80275b4:	f023 0303 	bic.w	r3, r3, #3
 80275b8:	f043 0302 	orr.w	r3, r3, #2
 80275bc:	81a3      	strh	r3, [r4, #12]
 80275be:	e7e3      	b.n	8027588 <__smakebuf_r+0xc>
 80275c0:	89a3      	ldrh	r3, [r4, #12]
 80275c2:	6020      	str	r0, [r4, #0]
 80275c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80275c8:	81a3      	strh	r3, [r4, #12]
 80275ca:	9b00      	ldr	r3, [sp, #0]
 80275cc:	6163      	str	r3, [r4, #20]
 80275ce:	9b01      	ldr	r3, [sp, #4]
 80275d0:	6120      	str	r0, [r4, #16]
 80275d2:	b15b      	cbz	r3, 80275ec <__smakebuf_r+0x70>
 80275d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80275d8:	4630      	mov	r0, r6
 80275da:	f000 f81d 	bl	8027618 <_isatty_r>
 80275de:	b128      	cbz	r0, 80275ec <__smakebuf_r+0x70>
 80275e0:	89a3      	ldrh	r3, [r4, #12]
 80275e2:	f023 0303 	bic.w	r3, r3, #3
 80275e6:	f043 0301 	orr.w	r3, r3, #1
 80275ea:	81a3      	strh	r3, [r4, #12]
 80275ec:	89a3      	ldrh	r3, [r4, #12]
 80275ee:	431d      	orrs	r5, r3
 80275f0:	81a5      	strh	r5, [r4, #12]
 80275f2:	e7cf      	b.n	8027594 <__smakebuf_r+0x18>

080275f4 <_fstat_r>:
 80275f4:	b538      	push	{r3, r4, r5, lr}
 80275f6:	4d07      	ldr	r5, [pc, #28]	; (8027614 <_fstat_r+0x20>)
 80275f8:	2300      	movs	r3, #0
 80275fa:	4604      	mov	r4, r0
 80275fc:	4608      	mov	r0, r1
 80275fe:	4611      	mov	r1, r2
 8027600:	602b      	str	r3, [r5, #0]
 8027602:	f7dc fb4e 	bl	8003ca2 <_fstat>
 8027606:	1c43      	adds	r3, r0, #1
 8027608:	d102      	bne.n	8027610 <_fstat_r+0x1c>
 802760a:	682b      	ldr	r3, [r5, #0]
 802760c:	b103      	cbz	r3, 8027610 <_fstat_r+0x1c>
 802760e:	6023      	str	r3, [r4, #0]
 8027610:	bd38      	pop	{r3, r4, r5, pc}
 8027612:	bf00      	nop
 8027614:	2000c89c 	.word	0x2000c89c

08027618 <_isatty_r>:
 8027618:	b538      	push	{r3, r4, r5, lr}
 802761a:	4d06      	ldr	r5, [pc, #24]	; (8027634 <_isatty_r+0x1c>)
 802761c:	2300      	movs	r3, #0
 802761e:	4604      	mov	r4, r0
 8027620:	4608      	mov	r0, r1
 8027622:	602b      	str	r3, [r5, #0]
 8027624:	f7dc fb4d 	bl	8003cc2 <_isatty>
 8027628:	1c43      	adds	r3, r0, #1
 802762a:	d102      	bne.n	8027632 <_isatty_r+0x1a>
 802762c:	682b      	ldr	r3, [r5, #0]
 802762e:	b103      	cbz	r3, 8027632 <_isatty_r+0x1a>
 8027630:	6023      	str	r3, [r4, #0]
 8027632:	bd38      	pop	{r3, r4, r5, pc}
 8027634:	2000c89c 	.word	0x2000c89c

08027638 <_init>:
 8027638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802763a:	bf00      	nop
 802763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802763e:	bc08      	pop	{r3}
 8027640:	469e      	mov	lr, r3
 8027642:	4770      	bx	lr

08027644 <_fini>:
 8027644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027646:	bf00      	nop
 8027648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802764a:	bc08      	pop	{r3}
 802764c:	469e      	mov	lr, r3
 802764e:	4770      	bx	lr


EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025d4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004390  08025f1c  08025f1c  00035f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003f1a  0802a2ac  0802a2ac  0003a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802e1c8  0802e1c8  0003e1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  080616c0  080616c0  000716c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08061900  08061900  00080110  2**0
                  CONTENTS
  7 .ARM          00000008  08061900  08061900  00071900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08061908  08061908  00080110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08061908  08061908  00071908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0806191c  0806191c  0007191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  20000000  08061924  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c7f8  20000110  08061a34  00080110  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000c908  08061a34  0008c908  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080110  2**0
                  CONTENTS, READONLY
 15 .comment      000000c2  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY
 16 .debug_info   000595db  00000000  00000000  00080202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000105c4  00000000  00000000  000d97dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004148  00000000  00000000  000e9da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003021  00000000  00000000  000edef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a452  00000000  00000000  000f0f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00051498  00000000  00000000  0012b363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00131404  00000000  00000000  0017c7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000118fc  00000000  00000000  002adc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003f  00000000  00000000  002bf4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025f04 	.word	0x08025f04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	08025f04 	.word	0x08025f04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b970 	b.w	8000ad0 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	460d      	mov	r5, r1
 8000810:	4604      	mov	r4, r0
 8000812:	460f      	mov	r7, r1
 8000814:	2b00      	cmp	r3, #0
 8000816:	d14a      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000818:	428a      	cmp	r2, r1
 800081a:	4694      	mov	ip, r2
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0xe2>
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	b143      	cbz	r3, 8000836 <__udivmoddi4+0x2e>
 8000824:	fa02 fc03 	lsl.w	ip, r2, r3
 8000828:	f1c3 0220 	rsb	r2, r3, #32
 800082c:	409f      	lsls	r7, r3
 800082e:	fa20 f202 	lsr.w	r2, r0, r2
 8000832:	4317      	orrs	r7, r2
 8000834:	409c      	lsls	r4, r3
 8000836:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800083a:	fa1f f58c 	uxth.w	r5, ip
 800083e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000842:	0c22      	lsrs	r2, r4, #16
 8000844:	fb0e 7711 	mls	r7, lr, r1, r7
 8000848:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800084c:	fb01 f005 	mul.w	r0, r1, r5
 8000850:	4290      	cmp	r0, r2
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x62>
 8000854:	eb1c 0202 	adds.w	r2, ip, r2
 8000858:	f101 37ff 	add.w	r7, r1, #4294967295
 800085c:	f080 811c 	bcs.w	8000a98 <__udivmoddi4+0x290>
 8000860:	4290      	cmp	r0, r2
 8000862:	f240 8119 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000866:	3902      	subs	r1, #2
 8000868:	4462      	add	r2, ip
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	b2a4      	uxth	r4, r4
 800086e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000872:	fb0e 2210 	mls	r2, lr, r0, r2
 8000876:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800087a:	fb00 f505 	mul.w	r5, r0, r5
 800087e:	42a5      	cmp	r5, r4
 8000880:	d90a      	bls.n	8000898 <__udivmoddi4+0x90>
 8000882:	eb1c 0404 	adds.w	r4, ip, r4
 8000886:	f100 32ff 	add.w	r2, r0, #4294967295
 800088a:	f080 8107 	bcs.w	8000a9c <__udivmoddi4+0x294>
 800088e:	42a5      	cmp	r5, r4
 8000890:	f240 8104 	bls.w	8000a9c <__udivmoddi4+0x294>
 8000894:	4464      	add	r4, ip
 8000896:	3802      	subs	r0, #2
 8000898:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800089c:	1b64      	subs	r4, r4, r5
 800089e:	2100      	movs	r1, #0
 80008a0:	b11e      	cbz	r6, 80008aa <__udivmoddi4+0xa2>
 80008a2:	40dc      	lsrs	r4, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	e9c6 4300 	strd	r4, r3, [r6]
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0xbc>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80ed 	beq.w	8000a92 <__udivmoddi4+0x28a>
 80008b8:	2100      	movs	r1, #0
 80008ba:	e9c6 0500 	strd	r0, r5, [r6]
 80008be:	4608      	mov	r0, r1
 80008c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c4:	fab3 f183 	clz	r1, r3
 80008c8:	2900      	cmp	r1, #0
 80008ca:	d149      	bne.n	8000960 <__udivmoddi4+0x158>
 80008cc:	42ab      	cmp	r3, r5
 80008ce:	d302      	bcc.n	80008d6 <__udivmoddi4+0xce>
 80008d0:	4282      	cmp	r2, r0
 80008d2:	f200 80f8 	bhi.w	8000ac6 <__udivmoddi4+0x2be>
 80008d6:	1a84      	subs	r4, r0, r2
 80008d8:	eb65 0203 	sbc.w	r2, r5, r3
 80008dc:	2001      	movs	r0, #1
 80008de:	4617      	mov	r7, r2
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d0e2      	beq.n	80008aa <__udivmoddi4+0xa2>
 80008e4:	e9c6 4700 	strd	r4, r7, [r6]
 80008e8:	e7df      	b.n	80008aa <__udivmoddi4+0xa2>
 80008ea:	b902      	cbnz	r2, 80008ee <__udivmoddi4+0xe6>
 80008ec:	deff      	udf	#255	; 0xff
 80008ee:	fab2 f382 	clz	r3, r2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f040 8090 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008f8:	1a8a      	subs	r2, r1, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f fe8c 	uxth.w	lr, ip
 8000902:	2101      	movs	r1, #1
 8000904:	fbb2 f5f7 	udiv	r5, r2, r7
 8000908:	fb07 2015 	mls	r0, r7, r5, r2
 800090c:	0c22      	lsrs	r2, r4, #16
 800090e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000912:	fb0e f005 	mul.w	r0, lr, r5
 8000916:	4290      	cmp	r0, r2
 8000918:	d908      	bls.n	800092c <__udivmoddi4+0x124>
 800091a:	eb1c 0202 	adds.w	r2, ip, r2
 800091e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4290      	cmp	r0, r2
 8000926:	f200 80cb 	bhi.w	8000ac0 <__udivmoddi4+0x2b8>
 800092a:	4645      	mov	r5, r8
 800092c:	1a12      	subs	r2, r2, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb2 f0f7 	udiv	r0, r2, r7
 8000934:	fb07 2210 	mls	r2, r7, r0, r2
 8000938:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093c:	fb0e fe00 	mul.w	lr, lr, r0
 8000940:	45a6      	cmp	lr, r4
 8000942:	d908      	bls.n	8000956 <__udivmoddi4+0x14e>
 8000944:	eb1c 0404 	adds.w	r4, ip, r4
 8000948:	f100 32ff 	add.w	r2, r0, #4294967295
 800094c:	d202      	bcs.n	8000954 <__udivmoddi4+0x14c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f200 80bb 	bhi.w	8000aca <__udivmoddi4+0x2c2>
 8000954:	4610      	mov	r0, r2
 8000956:	eba4 040e 	sub.w	r4, r4, lr
 800095a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800095e:	e79f      	b.n	80008a0 <__udivmoddi4+0x98>
 8000960:	f1c1 0720 	rsb	r7, r1, #32
 8000964:	408b      	lsls	r3, r1
 8000966:	fa22 fc07 	lsr.w	ip, r2, r7
 800096a:	ea4c 0c03 	orr.w	ip, ip, r3
 800096e:	fa05 f401 	lsl.w	r4, r5, r1
 8000972:	fa20 f307 	lsr.w	r3, r0, r7
 8000976:	40fd      	lsrs	r5, r7
 8000978:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800097c:	4323      	orrs	r3, r4
 800097e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	fb09 5518 	mls	r5, r9, r8, r5
 800098a:	0c1c      	lsrs	r4, r3, #16
 800098c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000990:	fb08 f50e 	mul.w	r5, r8, lr
 8000994:	42a5      	cmp	r5, r4
 8000996:	fa02 f201 	lsl.w	r2, r2, r1
 800099a:	fa00 f001 	lsl.w	r0, r0, r1
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a8:	f080 8088 	bcs.w	8000abc <__udivmoddi4+0x2b4>
 80009ac:	42a5      	cmp	r5, r4
 80009ae:	f240 8085 	bls.w	8000abc <__udivmoddi4+0x2b4>
 80009b2:	f1a8 0802 	sub.w	r8, r8, #2
 80009b6:	4464      	add	r4, ip
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	b29d      	uxth	r5, r3
 80009bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c0:	fb09 4413 	mls	r4, r9, r3, r4
 80009c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009cc:	45a6      	cmp	lr, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d8:	d26c      	bcs.n	8000ab4 <__udivmoddi4+0x2ac>
 80009da:	45a6      	cmp	lr, r4
 80009dc:	d96a      	bls.n	8000ab4 <__udivmoddi4+0x2ac>
 80009de:	3b02      	subs	r3, #2
 80009e0:	4464      	add	r4, ip
 80009e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ea:	eba4 040e 	sub.w	r4, r4, lr
 80009ee:	42ac      	cmp	r4, r5
 80009f0:	46c8      	mov	r8, r9
 80009f2:	46ae      	mov	lr, r5
 80009f4:	d356      	bcc.n	8000aa4 <__udivmoddi4+0x29c>
 80009f6:	d053      	beq.n	8000aa0 <__udivmoddi4+0x298>
 80009f8:	b156      	cbz	r6, 8000a10 <__udivmoddi4+0x208>
 80009fa:	ebb0 0208 	subs.w	r2, r0, r8
 80009fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000a02:	fa04 f707 	lsl.w	r7, r4, r7
 8000a06:	40ca      	lsrs	r2, r1
 8000a08:	40cc      	lsrs	r4, r1
 8000a0a:	4317      	orrs	r7, r2
 8000a0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000a10:	4618      	mov	r0, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a18:	f1c3 0120 	rsb	r1, r3, #32
 8000a1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a20:	fa20 f201 	lsr.w	r2, r0, r1
 8000a24:	fa25 f101 	lsr.w	r1, r5, r1
 8000a28:	409d      	lsls	r5, r3
 8000a2a:	432a      	orrs	r2, r5
 8000a2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a30:	fa1f fe8c 	uxth.w	lr, ip
 8000a34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a38:	fb07 1510 	mls	r5, r7, r0, r1
 8000a3c:	0c11      	lsrs	r1, r2, #16
 8000a3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a42:	fb00 f50e 	mul.w	r5, r0, lr
 8000a46:	428d      	cmp	r5, r1
 8000a48:	fa04 f403 	lsl.w	r4, r4, r3
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x258>
 8000a4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a56:	d22f      	bcs.n	8000ab8 <__udivmoddi4+0x2b0>
 8000a58:	428d      	cmp	r5, r1
 8000a5a:	d92d      	bls.n	8000ab8 <__udivmoddi4+0x2b0>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	4461      	add	r1, ip
 8000a60:	1b49      	subs	r1, r1, r5
 8000a62:	b292      	uxth	r2, r2
 8000a64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a68:	fb07 1115 	mls	r1, r7, r5, r1
 8000a6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a70:	fb05 f10e 	mul.w	r1, r5, lr
 8000a74:	4291      	cmp	r1, r2
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x282>
 8000a78:	eb1c 0202 	adds.w	r2, ip, r2
 8000a7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a80:	d216      	bcs.n	8000ab0 <__udivmoddi4+0x2a8>
 8000a82:	4291      	cmp	r1, r2
 8000a84:	d914      	bls.n	8000ab0 <__udivmoddi4+0x2a8>
 8000a86:	3d02      	subs	r5, #2
 8000a88:	4462      	add	r2, ip
 8000a8a:	1a52      	subs	r2, r2, r1
 8000a8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a90:	e738      	b.n	8000904 <__udivmoddi4+0xfc>
 8000a92:	4631      	mov	r1, r6
 8000a94:	4630      	mov	r0, r6
 8000a96:	e708      	b.n	80008aa <__udivmoddi4+0xa2>
 8000a98:	4639      	mov	r1, r7
 8000a9a:	e6e6      	b.n	800086a <__udivmoddi4+0x62>
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	e6fb      	b.n	8000898 <__udivmoddi4+0x90>
 8000aa0:	4548      	cmp	r0, r9
 8000aa2:	d2a9      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aac:	3b01      	subs	r3, #1
 8000aae:	e7a3      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000ab0:	4645      	mov	r5, r8
 8000ab2:	e7ea      	b.n	8000a8a <__udivmoddi4+0x282>
 8000ab4:	462b      	mov	r3, r5
 8000ab6:	e794      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab8:	4640      	mov	r0, r8
 8000aba:	e7d1      	b.n	8000a60 <__udivmoddi4+0x258>
 8000abc:	46d0      	mov	r8, sl
 8000abe:	e77b      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000ac0:	3d02      	subs	r5, #2
 8000ac2:	4462      	add	r2, ip
 8000ac4:	e732      	b.n	800092c <__udivmoddi4+0x124>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e70a      	b.n	80008e0 <__udivmoddi4+0xd8>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	e742      	b.n	8000956 <__udivmoddi4+0x14e>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <vApplicationGetIdleTaskMemory+0x30>)
 8000b1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000012c 	.word	0x2000012c
 8000b38:	20000184 	.word	0x20000184
 8000b3c:	00000000 	.word	0x00000000

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4b83      	ldr	r3, [pc, #524]	; (8000d58 <SecondTask+0x218>)
 8000b4a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <SecondTask+0x21c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00b feea 	bl	800c944 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00b fbf5 	bl	800c360 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <SecondTask+0x220>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8127 	beq.w	8000dce <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b78      	ldr	r3, [pc, #480]	; (8000d64 <SecondTask+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b76      	ldr	r3, [pc, #472]	; (8000d64 <SecondTask+0x224>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a73      	ldr	r2, [pc, #460]	; (8000d64 <SecondTask+0x224>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b73      	ldr	r3, [pc, #460]	; (8000d68 <SecondTask+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b71      	ldr	r3, [pc, #452]	; (8000d68 <SecondTask+0x228>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a6e      	ldr	r2, [pc, #440]	; (8000d68 <SecondTask+0x228>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <SecondTask+0x22c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <SecondTask+0x22c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a69      	ldr	r2, [pc, #420]	; (8000d6c <SecondTask+0x22c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <SecondTask+0x230>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a359      	add	r3, pc, #356	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <SecondTask+0x234>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <SecondTask+0x230>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a353      	add	r3, pc, #332	; (adr r3, 8000d40 <SecondTask+0x200>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <SecondTask+0x230>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <SecondTask+0x238>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a348      	add	r3, pc, #288	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <SecondTask+0x23c>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <SecondTask+0x238>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a344      	add	r3, pc, #272	; (adr r3, 8000d48 <SecondTask+0x208>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <SecondTask+0x238>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <SecondTask+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <SecondTask+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <SecondTask+0x240>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <SecondTask+0x244>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <SecondTask+0x248>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <SecondTask+0x244>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a331      	add	r3, pc, #196	; (adr r3, 8000d50 <SecondTask+0x210>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <SecondTask+0x244>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <SecondTask+0x24c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <SecondTask+0x250>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <SecondTask+0x24c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <SecondTask+0x250>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SecondTask+0x250>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <SecondTask+0x250>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <SecondTask+0x254>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SecondTask+0x254>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <SecondTask+0x254>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SecondTask+0x254>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SecondTask+0x258>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <SecondTask+0x258>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SecondTask+0x25c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <SecondTask+0x25c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SecondTask+0x25c>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SecondTask+0x260>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db3c      	blt.n	8000da8 <SecondTask+0x268>
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <SecondTask+0x264>)
 8000d30:	e04b      	b.n	8000dca <SecondTask+0x28a>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	3ff66666 	.word	0x3ff66666
 8000d40:	9999999a 	.word	0x9999999a
 8000d44:	3fa99999 	.word	0x3fa99999
 8000d48:	eb851eb8 	.word	0xeb851eb8
 8000d4c:	3faeb851 	.word	0x3faeb851
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fb99999 	.word	0x3fb99999
 8000d58:	08025f1c 	.word	0x08025f1c
 8000d5c:	20008e98 	.word	0x20008e98
 8000d60:	080269ac 	.word	0x080269ac
 8000d64:	20000004 	.word	0x20000004
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000010 	.word	0x20000010
 8000d74:	3f19999a 	.word	0x3f19999a
 8000d78:	20000014 	.word	0x20000014
 8000d7c:	3f266666 	.word	0x3f266666
 8000d80:	20000ae8 	.word	0x20000ae8
 8000d84:	20000aec 	.word	0x20000aec
 8000d88:	3dcccccd 	.word	0x3dcccccd
 8000d8c:	20000af0 	.word	0x20000af0
 8000d90:	20000af4 	.word	0x20000af4
 8000d94:	20000af8 	.word	0x20000af8
 8000d98:	20000afc 	.word	0x20000afc
 8000d9c:	20000b00 	.word	0x20000b00
 8000da0:	20000b04 	.word	0x20000b04
 8000da4:	41200000 	.word	0x41200000
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SecondTask+0x300>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbe3 	bl	8000578 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	; (adr r3, 8000e38 <SecondTask+0x2f8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fa80 	bl	80002bc <__adddf3>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fcb8 	bl	8000738 <__aeabi_d2f>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <SecondTask+0x300>)
 8000dcc:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v};
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SecondTask+0x304>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <SecondTask+0x308>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <SecondTask+0x30c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <SecondTask+0x310>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <SecondTask+0x314>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <SecondTask+0x318>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <SecondTask+0x31c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <SecondTask+0x320>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SecondTask+0x324>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <SecondTask+0x328>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <SecondTask+0x32c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <SecondTask+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SecondTask+0x300>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SecondTask+0x334>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	f00b fd8c 	bl	800c944 <xQueueGenericSend>
		osDelay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f00b fa97 	bl	800c360 <osDelay>
	{
 8000e32:	e6a0      	b.n	8000b76 <SecondTask+0x36>
 8000e34:	f3af 8000 	nop.w
 8000e38:	33333333 	.word	0x33333333
 8000e3c:	3fe33333 	.word	0x3fe33333
 8000e40:	20000b04 	.word	0x20000b04
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000014 	.word	0x20000014
 8000e58:	20000ae8 	.word	0x20000ae8
 8000e5c:	20000aec 	.word	0x20000aec
 8000e60:	20000af0 	.word	0x20000af0
 8000e64:	20000af4 	.word	0x20000af4
 8000e68:	20000af8 	.word	0x20000af8
 8000e6c:	20000afc 	.word	0x20000afc
 8000e70:	20000b00 	.word	0x20000b00
 8000e74:	20008e94 	.word	0x20008e94

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f002 fcc8 	bl	8003812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f85f 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f001 f99b 	bl	80021c0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e8a:	f000 f917 	bl	80010bc <MX_ADC3_Init>
  MX_CRC_Init();
 8000e8e:	f000 fad3 	bl	8001438 <MX_CRC_Init>
  MX_DCMI_Init();
 8000e92:	f000 faf3 	bl	800147c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e96:	f000 fb25 	bl	80014e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e9a:	f001 f8e5 	bl	8002068 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e9e:	f000 fb53 	bl	8001548 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000ea2:	f000 fbd3 	bl	800164c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ea6:	f000 fbfd 	bl	80016a4 <MX_RTC_Init>
  MX_SAI2_Init();
 8000eaa:	f000 fca3 	bl	80017f4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000eae:	f000 fd49 	bl	8001944 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eb2:	f000 fd67 	bl	8001984 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000eb6:	f000 fd95 	bl	80019e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eba:	f000 fdd1 	bl	8001a60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ebe:	f000 fe7b 	bl	8001bb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ec2:	f000 feef 	bl	8001ca4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ec6:	f000 ff63 	bl	8001d90 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000eca:	f000 ffd7 	bl	8001e7c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ece:	f001 f827 	bl	8001f20 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ed2:	f001 f869 	bl	8001fa8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ed6:	f001 f897 	bl	8002008 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000eda:	f00a fefd 	bl	800bcd8 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ede:	f000 f93f 	bl	8001160 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000ee2:	f00d ffa9 	bl	800ee38 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <main+0xbc>)
 8000ee8:	f107 041c 	add.w	r4, r7, #28
 8000eec:	461d      	mov	r5, r3
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b f9e1 	bl	800c2c8 <osThreadCreate>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <main+0xc0>)
 8000f0a:	6013      	str	r3, [r2, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0xc4>)
 8000f0e:	463c      	mov	r4, r7
 8000f10:	461d      	mov	r5, r3
 8000f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00b f9d0 	bl	800c2c8 <osThreadCreate>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <main+0xc8>)
 8000f2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f2e:	f00b f9a8 	bl	800c282 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0xba>
 8000f34:	08025f50 	.word	0x08025f50
 8000f38:	20000ad0 	.word	0x20000ad0
 8000f3c:	08025f74 	.word	0x08025f74
 8000f40:	20000ad4 	.word	0x20000ad4

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b4      	sub	sp, #208	; 0xd0
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f024 f9b3 	bl	80252be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2284      	movs	r2, #132	; 0x84
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f024 f9a4 	bl	80252be <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f76:	f005 f92d 	bl	80061d4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <SystemClock_Config+0x170>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <SystemClock_Config+0x170>)
 8000f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <SystemClock_Config+0x170>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000faa:	2309      	movs	r3, #9
 8000fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fcc:	2319      	movs	r3, #25
 8000fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fa14 	bl	8006418 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ff6:	f001 fb17 	bl	8002628 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ffa:	f005 f8fb 	bl	80061f4 <HAL_PWREx_EnableOverDrive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f001 fb10 	bl	8002628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800102a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800102e:	2106      	movs	r1, #6
 8001030:	4618      	mov	r0, r3
 8001032:	f005 fc95 	bl	8006960 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800103c:	f001 faf4 	bl	8002628 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <SystemClock_Config+0x174>)
 8001042:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001054:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001058:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001082:	2300      	movs	r3, #0
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f005 fe79 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010a4:	f001 fac0 	bl	8002628 <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	37d0      	adds	r7, #208	; 0xd0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000
 80010b8:	01b00868 	.word	0x01b00868

080010bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC3_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC3_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC3_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC3_Init+0x98>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC3_Init+0xa0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC3_Init+0x98>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC3_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x98>)
 800111e:	f002 fbc9 	bl	80038b4 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001128:	f001 fa7e 	bl	8002628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800112c:	2304      	movs	r3, #4
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC3_Init+0x98>)
 800113e:	f002 fbfd 	bl	800393c <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001148:	f001 fa6e 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000384 	.word	0x20000384
 8001158:	40012200 	.word	0x40012200
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <MX_CAN1_Init+0xcc>)
 800116a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_CAN1_Init+0xc8>)
 800116e:	2205      	movs	r2, #5
 8001170:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_CAN1_Init+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001180:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001184:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_CAN1_Init+0xc8>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_CAN1_Init+0xc8>)
 800119a:	2200      	movs	r2, #0
 800119c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b0:	481d      	ldr	r0, [pc, #116]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011b2:	f002 fe07 	bl	8003dc4 <HAL_CAN_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011bc:	f001 fa34 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011e4:	230e      	movs	r3, #14
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ee:	f002 fee5 	bl	8003fbc <HAL_CAN_ConfigFilter>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011f8:	f001 fa16 	bl	8002628 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011fe:	f002 ffbd 	bl	800417c <HAL_CAN_Start>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001208:	f001 fa0e 	bl	8002628 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800120c:	2102      	movs	r1, #2
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001210:	f003 f90a 	bl	8004428 <HAL_CAN_ActivateNotification>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800121a:	f001 fa05 	bl	8002628 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200003cc 	.word	0x200003cc
 800122c:	40006400 	.word	0x40006400

08001230 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800123a:	4a70      	ldr	r2, [pc, #448]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f002 ffe0 	bl	8004204 <HAL_CAN_GetRxMessage>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800124a:	f001 f9ed 	bl	8002628 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x360) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800124e:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8001256:	d114      	bne.n	8001282 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d110      	bne.n	8001282 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d10c      	bne.n	8001282 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
  {
	 uint16_t rpm_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001268:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	83fb      	strh	r3, [r7, #30]
//	 uint8_t tps_in = RxData[2];
//	 uint8_t iat_in = RxData[3];
//	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);

	 rpm = (int)rpm_in;
 800127c:	8bfb      	ldrh	r3, [r7, #30]
 800127e:	4a60      	ldr	r2, [pc, #384]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8001280:	6013      	str	r3, [r2, #0]
//	 tps = (int)(((float)tps_in)*0.5f);
//	 (void)map;
//	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f240 6202 	movw	r2, #1538	; 0x602
 800128a:	4293      	cmp	r3, r2
 800128c:	d129      	bne.n	80012e2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 800128e:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d125      	bne.n	80012e2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b08      	cmp	r3, #8
 800129c:	d121      	bne.n	80012e2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
  {
	 uint8_t oil_tmp_in = RxData[3];
 800129e:	4b56      	ldr	r3, [pc, #344]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	777b      	strb	r3, [r7, #29]
	 uint8_t oil_press_in = RxData[4];
 80012a4:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	773b      	strb	r3, [r7, #28]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 80012aa:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012ac:	799b      	ldrb	r3, [r3, #6]
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80012b2:	79db      	ldrb	r3, [r3, #7]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	837b      	strh	r3, [r7, #26]

	 oil_tmp = ((int)oil_tmp_in) * 1;
 80012be:	7f7b      	ldrb	r3, [r7, #29]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80012c2:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 80012c4:	7f3b      	ldrb	r3, [r7, #28]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 80012dc:	8b7b      	ldrh	r3, [r7, #26]
 80012de:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80012e0:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012e2:	4b46      	ldr	r3, [pc, #280]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f240 6203 	movw	r2, #1539	; 0x603
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d130      	bne.n	8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d12c      	bne.n	8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d128      	bne.n	8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
  {
	 uint8_t lambda_in = RxData[2];
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	767b      	strb	r3, [r7, #25]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001304:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	82fb      	strh	r3, [r7, #22]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800131a:	799b      	ldrb	r3, [r3, #6]
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001320:	79db      	ldrb	r3, [r3, #7]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	82bb      	strh	r3, [r7, #20]
	 lambda = ((float)lambda_in)*0.0078125f;
 800132c:	7e7b      	ldrb	r3, [r7, #25]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001340:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 8001344:	8afb      	ldrh	r3, [r7, #22]
 8001346:	4a35      	ldr	r2, [pc, #212]	; (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001348:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 800134a:	8abb      	ldrh	r3, [r7, #20]
 800134c:	4a34      	ldr	r2, [pc, #208]	; (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800134e:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f240 6204 	movw	r2, #1540	; 0x604
 8001358:	4293      	cmp	r3, r2
 800135a:	d11f      	bne.n	800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11b      	bne.n	800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	2b08      	cmp	r3, #8
 800136a:	d117      	bne.n	800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800136e:	789b      	ldrb	r3, [r3, #2]
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	827b      	strh	r3, [r7, #18]
	 float battery_voltage = ((float)batt_in)*0.027f;
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	edc7 7a03 	vstr	s15, [r7, #12]
	 batt_v = battery_voltage;
 8001396:	4a24      	ldr	r2, [pc, #144]	; (8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013a4:	d123      	bne.n	80013ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d11f      	bne.n	80013ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d11b      	bne.n	80013ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	72fb      	strb	r3, [r7, #11]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013c4:	789b      	ldrb	r3, [r3, #2]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	813b      	strh	r3, [r7, #8]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013da:	eddf 6a14 	vldr	s13, [pc, #80]	; 800142c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 80013e8:	893b      	ldrh	r3, [r7, #8]
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80013ec:	6013      	str	r3, [r2, #0]
    }
}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000410 	.word	0x20000410
 80013fc:	200003f4 	.word	0x200003f4
 8001400:	20000004 	.word	0x20000004
 8001404:	20000ae8 	.word	0x20000ae8
 8001408:	3d800000 	.word	0x3d800000
 800140c:	20000aec 	.word	0x20000aec
 8001410:	2000000c 	.word	0x2000000c
 8001414:	3c000000 	.word	0x3c000000
 8001418:	20000010 	.word	0x20000010
 800141c:	20000af8 	.word	0x20000af8
 8001420:	20000afc 	.word	0x20000afc
 8001424:	3cdd2f1b 	.word	0x3cdd2f1b
 8001428:	20000b04 	.word	0x20000b04
 800142c:	42c80000 	.word	0x42c80000
 8001430:	20000014 	.word	0x20000014
 8001434:	20000af0 	.word	0x20000af0

08001438 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <MX_CRC_Init+0x3c>)
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <MX_CRC_Init+0x40>)
 8001440:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_CRC_Init+0x3c>)
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_CRC_Init+0x3c>)
 800144a:	2200      	movs	r2, #0
 800144c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_CRC_Init+0x3c>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_CRC_Init+0x3c>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_CRC_Init+0x3c>)
 800145c:	2201      	movs	r2, #1
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_CRC_Init+0x3c>)
 8001462:	f003 fb4b 	bl	8004afc <HAL_CRC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800146c:	f001 f8dc 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000418 	.word	0x20000418
 8001478:	40023000 	.word	0x40023000

0800147c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DCMI_Init+0x60>)
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <MX_DCMI_Init+0x64>)
 8001484:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_DCMI_Init+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_DCMI_Init+0x60>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_DCMI_Init+0x60>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_DCMI_Init+0x60>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_DCMI_Init+0x60>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_DCMI_Init+0x60>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_DCMI_Init+0x60>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_DCMI_Init+0x60>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DCMI_Init+0x60>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_DCMI_Init+0x60>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_DCMI_Init+0x60>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_DCMI_Init+0x60>)
 80014ca:	f003 fc01 	bl	8004cd0 <HAL_DCMI_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80014d4:	f001 f8a8 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000043c 	.word	0x2000043c
 80014e0:	50050000 	.word	0x50050000

080014e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_DMA2D_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_DMA2D_Init+0x5c>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_DMA2D_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_DMA2D_Init+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_DMA2D_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <MX_DMA2D_Init+0x5c>)
 800151a:	f003 fced 	bl	8004ef8 <HAL_DMA2D_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001524:	f001 f880 	bl	8002628 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001528:	2101      	movs	r1, #1
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_DMA2D_Init+0x5c>)
 800152c:	f003 ffae 	bl	800548c <HAL_DMA2D_ConfigLayer>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001536:	f001 f877 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000048c 	.word	0x2000048c
 8001544:	4002b000 	.word	0x4002b000

08001548 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2234      	movs	r2, #52	; 0x34
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f023 feb2 	bl	80252be <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <MX_LTDC_Init+0xfc>)
 800155c:	4a3a      	ldr	r2, [pc, #232]	; (8001648 <MX_LTDC_Init+0x100>)
 800155e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001560:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_LTDC_Init+0xfc>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <MX_LTDC_Init+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_LTDC_Init+0xfc>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <MX_LTDC_Init+0xfc>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <MX_LTDC_Init+0xfc>)
 800157a:	2228      	movs	r2, #40	; 0x28
 800157c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_LTDC_Init+0xfc>)
 8001580:	2209      	movs	r2, #9
 8001582:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001584:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <MX_LTDC_Init+0xfc>)
 8001586:	2235      	movs	r2, #53	; 0x35
 8001588:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_LTDC_Init+0xfc>)
 800158c:	220b      	movs	r2, #11
 800158e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_LTDC_Init+0xfc>)
 8001592:	f240 2215 	movw	r2, #533	; 0x215
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_LTDC_Init+0xfc>)
 800159a:	f240 121b 	movw	r2, #283	; 0x11b
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_LTDC_Init+0xfc>)
 80015a2:	f240 2235 	movw	r2, #565	; 0x235
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_LTDC_Init+0xfc>)
 80015aa:	f240 121d 	movw	r2, #285	; 0x11d
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_LTDC_Init+0xfc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_LTDC_Init+0xfc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_LTDC_Init+0xfc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015c8:	481e      	ldr	r0, [pc, #120]	; (8001644 <MX_LTDC_Init+0xfc>)
 80015ca:	f004 fa6b 	bl	8005aa4 <HAL_LTDC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015d4:	f001 f828 	bl	8002628 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80015dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80015e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015ea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015f0:	23ff      	movs	r3, #255	; 0xff
 80015f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015fe:	2305      	movs	r3, #5
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001602:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001608:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800160e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_LTDC_Init+0xfc>)
 800162e:	f004 fbc1 	bl	8005db4 <HAL_LTDC_ConfigLayer>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001638:	f000 fff6 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200004cc 	.word	0x200004cc
 8001648:	40016800 	.word	0x40016800

0800164c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <MX_QUADSPI_Init+0x54>)
 8001654:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_QUADSPI_Init+0x50>)
 800165e:	2201      	movs	r2, #1
 8001660:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_QUADSPI_Init+0x50>)
 800166a:	2201      	movs	r2, #1
 800166c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_QUADSPI_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_QUADSPI_Init+0x50>)
 8001688:	f004 fe04 	bl	8006294 <HAL_QSPI_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001692:	f000 ffc9 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000574 	.word	0x20000574
 80016a0:	a0001000 	.word	0xa0001000

080016a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b092      	sub	sp, #72	; 0x48
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	222c      	movs	r2, #44	; 0x2c
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f023 fdf9 	bl	80252be <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80016cc:	4b47      	ldr	r3, [pc, #284]	; (80017ec <MX_RTC_Init+0x148>)
 80016ce:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <MX_RTC_Init+0x14c>)
 80016d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016d2:	4b46      	ldr	r3, [pc, #280]	; (80017ec <MX_RTC_Init+0x148>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016d8:	4b44      	ldr	r3, [pc, #272]	; (80017ec <MX_RTC_Init+0x148>)
 80016da:	227f      	movs	r2, #127	; 0x7f
 80016dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <MX_RTC_Init+0x148>)
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016e4:	4b41      	ldr	r3, [pc, #260]	; (80017ec <MX_RTC_Init+0x148>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <MX_RTC_Init+0x148>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <MX_RTC_Init+0x148>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016f6:	483d      	ldr	r0, [pc, #244]	; (80017ec <MX_RTC_Init+0x148>)
 80016f8:	f006 f87a 	bl	80077f0 <HAL_RTC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001702:	f000 ff91 	bl	8002628 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001724:	2201      	movs	r2, #1
 8001726:	4619      	mov	r1, r3
 8001728:	4830      	ldr	r0, [pc, #192]	; (80017ec <MX_RTC_Init+0x148>)
 800172a:	f006 f8dd 	bl	80078e8 <HAL_RTC_SetTime>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001734:	f000 ff78 	bl	8002628 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001744:	2301      	movs	r3, #1
 8001746:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	4824      	ldr	r0, [pc, #144]	; (80017ec <MX_RTC_Init+0x148>)
 800175a:	f006 f983 	bl	8007a64 <HAL_RTC_SetDate>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001764:	f000 ff60 	bl	8002628 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001768:	2300      	movs	r3, #0
 800176a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800176c:	2300      	movs	r3, #0
 800176e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001770:	2300      	movs	r3, #0
 8001772:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <MX_RTC_Init+0x148>)
 80017a0:	f006 fa08 	bl	8007bb4 <HAL_RTC_SetAlarm>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80017aa:	f000 ff3d 	bl	8002628 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80017b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2201      	movs	r2, #1
 80017be:	4619      	mov	r1, r3
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <MX_RTC_Init+0x148>)
 80017c2:	f006 f9f7 	bl	8007bb4 <HAL_RTC_SetAlarm>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80017cc:	f000 ff2c 	bl	8002628 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80017d0:	2202      	movs	r2, #2
 80017d2:	2100      	movs	r1, #0
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_RTC_Init+0x148>)
 80017d6:	f006 fb77 	bl	8007ec8 <HAL_RTCEx_SetTimeStamp>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80017e0:	f000 ff22 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3748      	adds	r7, #72	; 0x48
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200005c0 	.word	0x200005c0
 80017f0:	40002800 	.word	0x40002800

080017f4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <MX_SAI2_Init+0x13c>)
 80017fa:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <MX_SAI2_Init+0x140>)
 80017fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80017fe:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <MX_SAI2_Init+0x13c>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001816:	4b46      	ldr	r3, [pc, #280]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001818:	2200      	movs	r2, #0
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800181c:	4b44      	ldr	r3, [pc, #272]	; (8001930 <MX_SAI2_Init+0x13c>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <MX_SAI2_Init+0x13c>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001836:	4a40      	ldr	r2, [pc, #256]	; (8001938 <MX_SAI2_Init+0x144>)
 8001838:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <MX_SAI2_Init+0x13c>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001848:	2200      	movs	r2, #0
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_SAI2_Init+0x13c>)
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001854:	2208      	movs	r2, #8
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <MX_SAI2_Init+0x13c>)
 800185a:	2201      	movs	r2, #1
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001860:	2200      	movs	r2, #0
 8001862:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001866:	2200      	movs	r2, #0
 8001868:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <MX_SAI2_Init+0x13c>)
 800186c:	2200      	movs	r2, #0
 800186e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001872:	2200      	movs	r2, #0
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001878:	2200      	movs	r2, #0
 800187a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <MX_SAI2_Init+0x13c>)
 800187e:	2201      	movs	r2, #1
 8001880:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <MX_SAI2_Init+0x13c>)
 8001884:	2200      	movs	r2, #0
 8001886:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001888:	4829      	ldr	r0, [pc, #164]	; (8001930 <MX_SAI2_Init+0x13c>)
 800188a:	f006 fb73 	bl	8007f74 <HAL_SAI_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001894:	f000 fec8 	bl	8002628 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_SAI2_Init+0x148>)
 800189a:	4a29      	ldr	r2, [pc, #164]	; (8001940 <MX_SAI2_Init+0x14c>)
 800189c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <MX_SAI2_Init+0x148>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_SAI2_Init+0x148>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <MX_SAI2_Init+0x148>)
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_SAI2_Init+0x148>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_SAI2_Init+0x148>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_SAI2_Init+0x148>)
 80018be:	2201      	movs	r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_SAI2_Init+0x148>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_SAI2_Init+0x148>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_SAI2_Init+0x148>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_SAI2_Init+0x148>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_SAI2_Init+0x148>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_SAI2_Init+0x148>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_SAI2_Init+0x148>)
 80018e8:	2208      	movs	r2, #8
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <MX_SAI2_Init+0x148>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SAI2_Init+0x148>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_SAI2_Init+0x148>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SAI2_Init+0x148>)
 8001900:	2200      	movs	r2, #0
 8001902:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_SAI2_Init+0x148>)
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SAI2_Init+0x148>)
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SAI2_Init+0x148>)
 8001912:	2201      	movs	r2, #1
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SAI2_Init+0x148>)
 8001918:	2200      	movs	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_SAI2_Init+0x148>)
 800191e:	f006 fb29 	bl	8007f74 <HAL_SAI_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001928:	f000 fe7e 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200005e0 	.word	0x200005e0
 8001934:	40015c04 	.word	0x40015c04
 8001938:	0002ee00 	.word	0x0002ee00
 800193c:	20000664 	.word	0x20000664
 8001940:	40015c24 	.word	0x40015c24

08001944 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <MX_SDMMC1_SD_Init+0x3c>)
 800194c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <MX_SDMMC1_SD_Init+0x38>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	200006e8 	.word	0x200006e8
 8001980:	40012c00 	.word	0x40012c00

08001984 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 800198a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800198e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_SPDIFRX_Init+0x5c>)
 80019ce:	f007 fd69 	bl	80094a4 <HAL_SPDIFRX_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80019d8:	f000 fe26 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000076c 	.word	0x2000076c

080019e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_SPI2_Init+0x74>)
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <MX_SPI2_Init+0x78>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_SPI2_Init+0x74>)
 80019f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_SPI2_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI2_Init+0x74>)
 80019fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a32:	2207      	movs	r2, #7
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a3e:	2208      	movs	r2, #8
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_SPI2_Init+0x74>)
 8001a44:	f007 fd8a 	bl	800955c <HAL_SPI_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 fdeb 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200007b8 	.word	0x200007b8
 8001a5c:	40003800 	.word	0x40003800

08001a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09a      	sub	sp, #104	; 0x68
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	222c      	movs	r2, #44	; 0x2c
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f023 fc0f 	bl	80252be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa0:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001aa2:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <MX_TIM1_Init+0x154>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aca:	4839      	ldr	r0, [pc, #228]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001acc:	f007 fdd8 	bl	8009680 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ad6:	f000 fda7 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4832      	ldr	r0, [pc, #200]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001ae8:	f008 f882 	bl	8009bf0 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001af2:	f000 fd99 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af6:	482e      	ldr	r0, [pc, #184]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001af8:	f007 fe18 	bl	800972c <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b02:	f000 fd91 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b16:	4619      	mov	r1, r3
 8001b18:	4825      	ldr	r0, [pc, #148]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001b1a:	f008 fcef 	bl	800a4fc <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b24:	f000 fd80 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001b4e:	f007 ff37 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001b58:	f000 fd66 	bl	8002628 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001b92:	f008 fd41 	bl	800a618 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b9c:	f000 fd44 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <MX_TIM1_Init+0x150>)
 8001ba2:	f001 fa3b 	bl	800301c <HAL_TIM_MspPostInit>

}
 8001ba6:	bf00      	nop
 8001ba8:	3768      	adds	r7, #104	; 0x68
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000081c 	.word	0x2000081c
 8001bb4:	40010000 	.word	0x40010000

08001bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c10:	4823      	ldr	r0, [pc, #140]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c12:	f007 fd35 	bl	8009680 <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c1c:	f000 fd04 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c2e:	f007 ffdf 	bl	8009bf0 <HAL_TIM_ConfigClockSource>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c38:	f000 fcf6 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c3c:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c3e:	f007 fd75 	bl	800972c <HAL_TIM_PWM_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c48:	f000 fcee 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c5c:	f008 fc4e 	bl	800a4fc <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c66:	f000 fcdf 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6a:	2360      	movs	r3, #96	; 0x60
 8001c6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c82:	f007 fe9d 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c8c:	f000 fccc 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <MX_TIM2_Init+0xe8>)
 8001c92:	f001 f9c3 	bl	800301c <HAL_TIM_MspPostInit>

}
 8001c96:	bf00      	nop
 8001c98:	3738      	adds	r7, #56	; 0x38
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000085c 	.word	0x2000085c

08001ca4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	; 0x38
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001cd8:	4a2c      	ldr	r2, [pc, #176]	; (8001d8c <MX_TIM3_Init+0xe8>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001cfc:	f007 fcc0 	bl	8009680 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d06:	f000 fc8f 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d14:	4619      	mov	r1, r3
 8001d16:	481c      	ldr	r0, [pc, #112]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001d18:	f007 ff6a 	bl	8009bf0 <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d22:	f000 fc81 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d26:	4818      	ldr	r0, [pc, #96]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001d28:	f007 fd00 	bl	800972c <HAL_TIM_PWM_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d32:	f000 fc79 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001d46:	f008 fbd9 	bl	800a4fc <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d50:	f000 fc6a 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d54:	2360      	movs	r3, #96	; 0x60
 8001d56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001d6c:	f007 fe28 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d76:	f000 fc57 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d7a:	4803      	ldr	r0, [pc, #12]	; (8001d88 <MX_TIM3_Init+0xe4>)
 8001d7c:	f001 f94e 	bl	800301c <HAL_TIM_MspPostInit>

}
 8001d80:	bf00      	nop
 8001d82:	3738      	adds	r7, #56	; 0x38
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000089c 	.word	0x2000089c
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db0:	463b      	mov	r3, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	; (8001e78 <MX_TIM5_Init+0xe8>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001de6:	4823      	ldr	r0, [pc, #140]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001de8:	f007 fc4a 	bl	8009680 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001df2:	f000 fc19 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e00:	4619      	mov	r1, r3
 8001e02:	481c      	ldr	r0, [pc, #112]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e04:	f007 fef4 	bl	8009bf0 <HAL_TIM_ConfigClockSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e0e:	f000 fc0b 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e12:	4818      	ldr	r0, [pc, #96]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e14:	f007 fc8a 	bl	800972c <HAL_TIM_PWM_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e1e:	f000 fc03 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4810      	ldr	r0, [pc, #64]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e32:	f008 fb63 	bl	800a4fc <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e3c:	f000 fbf4 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e40:	2360      	movs	r3, #96	; 0x60
 8001e42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	220c      	movs	r2, #12
 8001e54:	4619      	mov	r1, r3
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e58:	f007 fdb2 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e62:	f000 fbe1 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e68:	f001 f8d8 	bl	800301c <HAL_TIM_MspPostInit>

}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	; 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200008dc 	.word	0x200008dc
 8001e78:	40000c00 	.word	0x40000c00

08001e7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <MX_TIM8_Init+0xa0>)
 8001e9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ec4:	4814      	ldr	r0, [pc, #80]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001ec6:	f007 fbdb 	bl	8009680 <HAL_TIM_Base_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001ed0:	f000 fbaa 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001ee2:	f007 fe85 	bl	8009bf0 <HAL_TIM_ConfigClockSource>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001eec:	f000 fb9c 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_TIM8_Init+0x9c>)
 8001f02:	f008 fafb 	bl	800a4fc <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f0c:	f000 fb8c 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2000091c 	.word	0x2000091c
 8001f1c:	40010400 	.word	0x40010400

08001f20 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <MX_TIM12_Init+0x84>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f5c:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f5e:	f007 fbe5 	bl	800972c <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001f68:	f000 fb5e 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6c:	2360      	movs	r3, #96	; 0x60
 8001f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f84:	f007 fd1c 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f8e:	f000 fb4b 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f92:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <MX_TIM12_Init+0x80>)
 8001f94:	f001 f842 	bl	800301c <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000095c 	.word	0x2000095c
 8001fa4:	40001800 	.word	0x40001800

08001fa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <MX_USART1_UART_Init+0x5c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART1_UART_Init+0x58>)
 8001fec:	f008 fbb0 	bl	800a750 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ff6:	f000 fb17 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000099c 	.word	0x2000099c
 8002004:	40011000 	.word	0x40011000

08002008 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_USART6_UART_Init+0x58>)
 800200e:	4a15      	ldr	r2, [pc, #84]	; (8002064 <MX_USART6_UART_Init+0x5c>)
 8002010:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <MX_USART6_UART_Init+0x58>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_USART6_UART_Init+0x58>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_USART6_UART_Init+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USART6_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USART6_UART_Init+0x58>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_USART6_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USART6_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_USART6_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USART6_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_USART6_UART_Init+0x58>)
 800204c:	f008 fb80 	bl	800a750 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002056:	f000 fae7 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000a1c 	.word	0x20000a1c
 8002064:	40011400 	.word	0x40011400

08002068 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <MX_FMC_Init+0x14c>)
 8002082:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <MX_FMC_Init+0x150>)
 8002084:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <MX_FMC_Init+0x14c>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800208c:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <MX_FMC_Init+0x14c>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002092:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <MX_FMC_Init+0x14c>)
 8002094:	2204      	movs	r2, #4
 8002096:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <MX_FMC_Init+0x14c>)
 800209a:	2210      	movs	r2, #16
 800209c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800209e:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020aa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80020c2:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80020cc:	2307      	movs	r3, #7
 80020ce:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80020d4:	2307      	movs	r3, #7
 80020d6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80020d8:	2303      	movs	r3, #3
 80020da:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4832      	ldr	r0, [pc, #200]	; (80021b4 <MX_FMC_Init+0x14c>)
 80020ea:	f007 f95b 	bl	80093a4 <HAL_SDRAM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80020f4:	f000 fa98 	bl	8002628 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <MX_FMC_Init+0x154>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <MX_FMC_Init+0x154>)
 8002104:	2210      	movs	r2, #16
 8002106:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <MX_FMC_Init+0x154>)
 800210a:	2201      	movs	r2, #1
 800210c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <MX_FMC_Init+0x154>)
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002118:	4928      	ldr	r1, [pc, #160]	; (80021bc <MX_FMC_Init+0x154>)
 800211a:	4826      	ldr	r0, [pc, #152]	; (80021b4 <MX_FMC_Init+0x14c>)
 800211c:	f007 f976 	bl	800940c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002120:	2001      	movs	r0, #1
 8002122:	f001 fba3 	bl	800386c <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002126:	4b25      	ldr	r3, [pc, #148]	; (80021bc <MX_FMC_Init+0x154>)
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <MX_FMC_Init+0x154>)
 800212e:	2210      	movs	r2, #16
 8002130:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <MX_FMC_Init+0x154>)
 8002134:	2201      	movs	r2, #1
 8002136:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <MX_FMC_Init+0x154>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800213e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002142:	491e      	ldr	r1, [pc, #120]	; (80021bc <MX_FMC_Init+0x154>)
 8002144:	481b      	ldr	r0, [pc, #108]	; (80021b4 <MX_FMC_Init+0x14c>)
 8002146:	f007 f961 	bl	800940c <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <MX_FMC_Init+0x154>)
 800214c:	2203      	movs	r2, #3
 800214e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_FMC_Init+0x154>)
 8002152:	2210      	movs	r2, #16
 8002154:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <MX_FMC_Init+0x154>)
 8002158:	2208      	movs	r2, #8
 800215a:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_FMC_Init+0x154>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002166:	4915      	ldr	r1, [pc, #84]	; (80021bc <MX_FMC_Init+0x154>)
 8002168:	4812      	ldr	r0, [pc, #72]	; (80021b4 <MX_FMC_Init+0x14c>)
 800216a:	f007 f94f 	bl	800940c <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800216e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002172:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_FMC_Init+0x154>)
 8002176:	2204      	movs	r2, #4
 8002178:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MX_FMC_Init+0x154>)
 800217c:	2210      	movs	r2, #16
 800217e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_FMC_Init+0x154>)
 8002182:	2201      	movs	r2, #1
 8002184:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <MX_FMC_Init+0x154>)
 800218a:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	490a      	ldr	r1, [pc, #40]	; (80021bc <MX_FMC_Init+0x154>)
 8002192:	4808      	ldr	r0, [pc, #32]	; (80021b4 <MX_FMC_Init+0x14c>)
 8002194:	f007 f93a 	bl	800940c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002198:	f240 712b 	movw	r1, #1835	; 0x72b
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_FMC_Init+0x14c>)
 800219e:	f007 f960 	bl	8009462 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80021a2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80021a6:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000a9c 	.word	0x20000a9c
 80021b8:	a0000140 	.word	0xa0000140
 80021bc:	20000ad8 	.word	0x20000ad8

080021c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b090      	sub	sp, #64	; 0x40
 80021c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d6:	4baf      	ldr	r3, [pc, #700]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4aae      	ldr	r2, [pc, #696]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4bac      	ldr	r3, [pc, #688]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ee:	4ba9      	ldr	r3, [pc, #676]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4aa8      	ldr	r2, [pc, #672]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80021f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4ba6      	ldr	r3, [pc, #664]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	4ba3      	ldr	r3, [pc, #652]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4aa2      	ldr	r2, [pc, #648]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4ba0      	ldr	r3, [pc, #640]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221e:	4b9d      	ldr	r3, [pc, #628]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a9c      	ldr	r2, [pc, #624]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b9a      	ldr	r3, [pc, #616]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b97      	ldr	r3, [pc, #604]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a96      	ldr	r2, [pc, #600]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b94      	ldr	r3, [pc, #592]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4b91      	ldr	r3, [pc, #580]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a90      	ldr	r2, [pc, #576]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b8e      	ldr	r3, [pc, #568]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002266:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a8a      	ldr	r2, [pc, #552]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800226c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a84      	ldr	r2, [pc, #528]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b82      	ldr	r3, [pc, #520]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <MX_GPIO_Init+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a7e      	ldr	r2, [pc, #504]	; (8002494 <MX_GPIO_Init+0x2d4>)
 800229c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b7c      	ldr	r3, [pc, #496]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ae:	4b79      	ldr	r3, [pc, #484]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a78      	ldr	r2, [pc, #480]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022b4:	f043 0320 	orr.w	r3, r3, #32
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b76      	ldr	r3, [pc, #472]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c6:	4b73      	ldr	r3, [pc, #460]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a72      	ldr	r2, [pc, #456]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b70      	ldr	r3, [pc, #448]	; (8002494 <MX_GPIO_Init+0x2d4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	2120      	movs	r1, #32
 80022e2:	486d      	ldr	r0, [pc, #436]	; (8002498 <MX_GPIO_Init+0x2d8>)
 80022e4:	f003 fbc4 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	210c      	movs	r1, #12
 80022ec:	486b      	ldr	r0, [pc, #428]	; (800249c <MX_GPIO_Init+0x2dc>)
 80022ee:	f003 fbbf 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2108      	movs	r1, #8
 80022f6:	486a      	ldr	r0, [pc, #424]	; (80024a0 <MX_GPIO_Init+0x2e0>)
 80022f8:	f003 fbba 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002302:	4866      	ldr	r0, [pc, #408]	; (800249c <MX_GPIO_Init+0x2dc>)
 8002304:	f003 fbb4 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800230e:	4865      	ldr	r0, [pc, #404]	; (80024a4 <MX_GPIO_Init+0x2e4>)
 8002310:	f003 fbae 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	21c8      	movs	r1, #200	; 0xc8
 8002318:	4863      	ldr	r0, [pc, #396]	; (80024a8 <MX_GPIO_Init+0x2e8>)
 800231a:	f003 fba9 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800231e:	2308      	movs	r3, #8
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002322:	2300      	movs	r3, #0
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	485e      	ldr	r0, [pc, #376]	; (80024ac <MX_GPIO_Init+0x2ec>)
 8002332:	f003 f9d9 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002336:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002348:	230b      	movs	r3, #11
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800234c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	4855      	ldr	r0, [pc, #340]	; (80024a8 <MX_GPIO_Init+0x2e8>)
 8002354:	f003 f9c8 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002358:	f643 4323 	movw	r3, #15395	; 0x3c23
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800236a:	230a      	movs	r3, #10
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002372:	4619      	mov	r1, r3
 8002374:	484e      	ldr	r0, [pc, #312]	; (80024b0 <MX_GPIO_Init+0x2f0>)
 8002376:	f003 f9b7 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800237a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238c:	4619      	mov	r1, r3
 800238e:	4849      	ldr	r0, [pc, #292]	; (80024b4 <MX_GPIO_Init+0x2f4>)
 8002390:	f003 f9aa 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002394:	2340      	movs	r3, #64	; 0x40
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002398:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <MX_GPIO_Init+0x2f8>)
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a4:	4619      	mov	r1, r3
 80023a6:	483c      	ldr	r0, [pc, #240]	; (8002498 <MX_GPIO_Init+0x2d8>)
 80023a8:	f003 f99e 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80023ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023be:	230a      	movs	r3, #10
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	483c      	ldr	r0, [pc, #240]	; (80024bc <MX_GPIO_Init+0x2fc>)
 80023ca:	f003 f98d 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80023ce:	2320      	movs	r3, #32
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	482c      	ldr	r0, [pc, #176]	; (8002498 <MX_GPIO_Init+0x2d8>)
 80023e6:	f003 f97f 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80023ea:	f241 030c 	movw	r3, #4108	; 0x100c
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	4619      	mov	r1, r3
 8002402:	4826      	ldr	r0, [pc, #152]	; (800249c <MX_GPIO_Init+0x2dc>)
 8002404:	f003 f970 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241a:	4619      	mov	r1, r3
 800241c:	4828      	ldr	r0, [pc, #160]	; (80024c0 <MX_GPIO_Init+0x300>)
 800241e:	f003 f963 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002422:	2308      	movs	r3, #8
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002436:	4619      	mov	r1, r3
 8002438:	4819      	ldr	r0, [pc, #100]	; (80024a0 <MX_GPIO_Init+0x2e0>)
 800243a:	f003 f955 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800243e:	2310      	movs	r3, #16
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	4811      	ldr	r0, [pc, #68]	; (8002498 <MX_GPIO_Init+0x2d8>)
 8002452:	f003 f949 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002456:	f248 0304 	movw	r3, #32772	; 0x8004
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	4619      	mov	r1, r3
 800246a:	480e      	ldr	r0, [pc, #56]	; (80024a4 <MX_GPIO_Init+0x2e4>)
 800246c:	f003 f93c 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002486:	4619      	mov	r1, r3
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <MX_GPIO_Init+0x2e4>)
 800248a:	f003 f92d 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800248e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002492:	e017      	b.n	80024c4 <MX_GPIO_Init+0x304>
 8002494:	40023800 	.word	0x40023800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40022000 	.word	0x40022000
 80024a0:	40022800 	.word	0x40022800
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	40021800 	.word	0x40021800
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40022400 	.word	0x40022400
 80024b8:	10120000 	.word	0x10120000
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020800 	.word	0x40020800
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024c6:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <MX_GPIO_Init+0x418>)
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	4841      	ldr	r0, [pc, #260]	; (80025dc <MX_GPIO_Init+0x41c>)
 80024d6:	f003 f907 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80024da:	2310      	movs	r3, #16
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024ea:	230a      	movs	r3, #10
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	483a      	ldr	r0, [pc, #232]	; (80025e0 <MX_GPIO_Init+0x420>)
 80024f6:	f003 f8f7 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024fa:	23c8      	movs	r3, #200	; 0xc8
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800250a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250e:	4619      	mov	r1, r3
 8002510:	4834      	ldr	r0, [pc, #208]	; (80025e4 <MX_GPIO_Init+0x424>)
 8002512:	f003 f8e9 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002516:	2305      	movs	r3, #5
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002526:	230a      	movs	r3, #10
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	482d      	ldr	r0, [pc, #180]	; (80025e8 <MX_GPIO_Init+0x428>)
 8002532:	f003 f8d9 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002536:	2332      	movs	r3, #50	; 0x32
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002546:	230b      	movs	r3, #11
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	4825      	ldr	r0, [pc, #148]	; (80025e8 <MX_GPIO_Init+0x428>)
 8002552:	f003 f8c9 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002556:	2304      	movs	r3, #4
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	481e      	ldr	r0, [pc, #120]	; (80025e4 <MX_GPIO_Init+0x424>)
 800256a:	f003 f8bd 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800256e:	2386      	movs	r3, #134	; 0x86
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257e:	230b      	movs	r3, #11
 8002580:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002586:	4619      	mov	r1, r3
 8002588:	4818      	ldr	r0, [pc, #96]	; (80025ec <MX_GPIO_Init+0x42c>)
 800258a:	f003 f8ad 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800258e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002594:	2312      	movs	r3, #18
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002598:	2301      	movs	r3, #1
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025a0:	2304      	movs	r3, #4
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a8:	4619      	mov	r1, r3
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <MX_GPIO_Init+0x420>)
 80025ac:	f003 f89c 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80025b0:	2328      	movs	r3, #40	; 0x28
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025c0:	230a      	movs	r3, #10
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c8:	4619      	mov	r1, r3
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <MX_GPIO_Init+0x42c>)
 80025cc:	f003 f88c 	bl	80056e8 <HAL_GPIO_Init>

}
 80025d0:	bf00      	nop
 80025d2:	3740      	adds	r7, #64	; 0x40
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	10120000 	.word	0x10120000
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40021c00 	.word	0x40021c00
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40020800 	.word	0x40020800
 80025ec:	40020000 	.word	0x40020000

080025f0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80025f8:	f00c fc24 	bl	800ee44 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f009 feaf 	bl	800c360 <osDelay>
 8002602:	e7fb      	b.n	80025fc <StartDefaultTask+0xc>

08002604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002616:	f001 f909 	bl	800382c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40001000 	.word	0x40001000

08002628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_MspInit+0x4c>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_MspInit+0x4c>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_MspInit+0x4c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_MspInit+0x4c>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_MspInit+0x4c>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	210f      	movs	r1, #15
 8002672:	f06f 0001 	mvn.w	r0, #1
 8002676:	f002 fa09 	bl	8004a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_ADC_MspInit+0xa4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d13c      	bne.n	8002724 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a14      	ldr	r2, [pc, #80]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_ADC_MspInit+0xa8>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80026f2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026f6:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f8:	2303      	movs	r3, #3
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	480b      	ldr	r0, [pc, #44]	; (8002734 <HAL_ADC_MspInit+0xac>)
 8002708:	f002 ffee 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002710:	2303      	movs	r3, #3
 8002712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4619      	mov	r1, r3
 800271e:	4806      	ldr	r0, [pc, #24]	; (8002738 <HAL_ADC_MspInit+0xb0>)
 8002720:	f002 ffe2 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40012200 	.word	0x40012200
 8002730:	40023800 	.word	0x40023800
 8002734:	40021400 	.word	0x40021400
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_CAN_MspInit+0x8c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d130      	bne.n	80027c0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_CAN_MspInit+0x90>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <HAL_CAN_MspInit+0x90>)
 8002764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_CAN_MspInit+0x90>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_CAN_MspInit+0x90>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_CAN_MspInit+0x90>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_CAN_MspInit+0x90>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800278e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027a0:	2309      	movs	r3, #9
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4809      	ldr	r0, [pc, #36]	; (80027d0 <HAL_CAN_MspInit+0x94>)
 80027ac:	f002 ff9c 	bl	80056e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2105      	movs	r1, #5
 80027b4:	2014      	movs	r0, #20
 80027b6:	f002 f969 	bl	8004a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027ba:	2014      	movs	r0, #20
 80027bc:	f002 f982 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80027c0:	bf00      	nop
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40006400 	.word	0x40006400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_CRC_MspInit+0x38>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10b      	bne.n	80027fe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_CRC_MspInit+0x3c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_CRC_MspInit+0x3c>)
 80027ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_CRC_MspInit+0x3c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023000 	.word	0x40023000
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a50      	ldr	r2, [pc, #320]	; (8002974 <HAL_DCMI_MspInit+0x160>)
 8002832:	4293      	cmp	r3, r2
 8002834:	f040 809a 	bne.w	800296c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6353      	str	r3, [r2, #52]	; 0x34
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	623b      	str	r3, [r7, #32]
 800284e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a48      	ldr	r2, [pc, #288]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 8002856:	f043 0310 	orr.w	r3, r3, #16
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002880:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 8002886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002898:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a36      	ldr	r2, [pc, #216]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 800289e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_DCMI_MspInit+0x164>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028d8:	230d      	movs	r3, #13
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4826      	ldr	r0, [pc, #152]	; (800297c <HAL_DCMI_MspInit+0x168>)
 80028e4:	f002 ff00 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028e8:	2308      	movs	r3, #8
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028f8:	230d      	movs	r3, #13
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	4619      	mov	r1, r3
 8002902:	481f      	ldr	r0, [pc, #124]	; (8002980 <HAL_DCMI_MspInit+0x16c>)
 8002904:	f002 fef0 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800291a:	230d      	movs	r3, #13
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002922:	4619      	mov	r1, r3
 8002924:	4817      	ldr	r0, [pc, #92]	; (8002984 <HAL_DCMI_MspInit+0x170>)
 8002926:	f002 fedf 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800292a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800293c:	230d      	movs	r3, #13
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4810      	ldr	r0, [pc, #64]	; (8002988 <HAL_DCMI_MspInit+0x174>)
 8002948:	f002 fece 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800294c:	2350      	movs	r3, #80	; 0x50
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800295c:	230d      	movs	r3, #13
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	4809      	ldr	r0, [pc, #36]	; (800298c <HAL_DCMI_MspInit+0x178>)
 8002968:	f002 febe 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3738      	adds	r7, #56	; 0x38
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	50050000 	.word	0x50050000
 8002978:	40023800 	.word	0x40023800
 800297c:	40021000 	.word	0x40021000
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021800 	.word	0x40021800
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40020000 	.word	0x40020000

08002990 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <HAL_DMA2D_MspInit+0x44>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d113      	bne.n	80029ca <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_DMA2D_MspInit+0x48>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_DMA2D_MspInit+0x48>)
 80029a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_DMA2D_MspInit+0x48>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2105      	movs	r1, #5
 80029be:	205a      	movs	r0, #90	; 0x5a
 80029c0:	f002 f864 	bl	8004a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80029c4:	205a      	movs	r0, #90	; 0x5a
 80029c6:	f002 f87d 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	4002b000 	.word	0x4002b000
 80029d8:	40023800 	.word	0x40023800

080029dc <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <HAL_DMA2D_MspDeInit+0x2c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_DMA2D_MspDeInit+0x30>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a06      	ldr	r2, [pc, #24]	; (8002a0c <HAL_DMA2D_MspDeInit+0x30>)
 80029f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80029fa:	205a      	movs	r0, #90	; 0x5a
 80029fc:	f002 f870 	bl	8004ae0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	4002b000 	.word	0x4002b000
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	; 0x38
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a55      	ldr	r2, [pc, #340]	; (8002b84 <HAL_LTDC_MspInit+0x174>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	f040 80a3 	bne.w	8002b7a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a34:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	4a53      	ldr	r2, [pc, #332]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a40:	4b51      	ldr	r3, [pc, #324]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a48:	623b      	str	r3, [r7, #32]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a4c:	4b4e      	ldr	r3, [pc, #312]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	6313      	str	r3, [r2, #48]	; 0x30
 8002a58:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a64:	4b48      	ldr	r3, [pc, #288]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a47      	ldr	r2, [pc, #284]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a94:	4b3c      	ldr	r3, [pc, #240]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4a35      	ldr	r2, [pc, #212]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab8:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_LTDC_MspInit+0x178>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ad4:	230e      	movs	r3, #14
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	482b      	ldr	r0, [pc, #172]	; (8002b8c <HAL_LTDC_MspInit+0x17c>)
 8002ae0:	f002 fe02 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002ae4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002af6:	230e      	movs	r3, #14
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	4823      	ldr	r0, [pc, #140]	; (8002b90 <HAL_LTDC_MspInit+0x180>)
 8002b02:	f002 fdf1 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b06:	23f7      	movs	r3, #247	; 0xf7
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b16:	230e      	movs	r3, #14
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481c      	ldr	r0, [pc, #112]	; (8002b94 <HAL_LTDC_MspInit+0x184>)
 8002b22:	f002 fde1 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b38:	2309      	movs	r3, #9
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b40:	4619      	mov	r1, r3
 8002b42:	4815      	ldr	r0, [pc, #84]	; (8002b98 <HAL_LTDC_MspInit+0x188>)
 8002b44:	f002 fdd0 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002b48:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b5a:	230e      	movs	r3, #14
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b62:	4619      	mov	r1, r3
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <HAL_LTDC_MspInit+0x18c>)
 8002b66:	f002 fdbf 	bl	80056e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	2058      	movs	r0, #88	; 0x58
 8002b70:	f001 ff8c 	bl	8004a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b74:	2058      	movs	r0, #88	; 0x58
 8002b76:	f001 ffa5 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3738      	adds	r7, #56	; 0x38
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40016800 	.word	0x40016800
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40022400 	.word	0x40022400
 8002b94:	40022800 	.word	0x40022800
 8002b98:	40021800 	.word	0x40021800
 8002b9c:	40022000 	.word	0x40022000

08002ba0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	; 0x30
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3b      	ldr	r2, [pc, #236]	; (8002cac <HAL_QSPI_MspInit+0x10c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d170      	bne.n	8002ca4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	4a3a      	ldr	r2, [pc, #232]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002be0:	f043 0310 	orr.w	r3, r3, #16
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0a:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_QSPI_MspInit+0x110>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c22:	2304      	movs	r3, #4
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c32:	2309      	movs	r3, #9
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002c36:	f107 031c 	add.w	r3, r7, #28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481d      	ldr	r0, [pc, #116]	; (8002cb4 <HAL_QSPI_MspInit+0x114>)
 8002c3e:	f002 fd53 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c42:	2340      	movs	r3, #64	; 0x40
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c52:	230a      	movs	r3, #10
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 031c 	add.w	r3, r7, #28
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4816      	ldr	r0, [pc, #88]	; (8002cb8 <HAL_QSPI_MspInit+0x118>)
 8002c5e:	f002 fd43 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c62:	2304      	movs	r3, #4
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c72:	2309      	movs	r3, #9
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	480e      	ldr	r0, [pc, #56]	; (8002cb8 <HAL_QSPI_MspInit+0x118>)
 8002c7e:	f002 fd33 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002c82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c94:	2309      	movs	r3, #9
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4807      	ldr	r0, [pc, #28]	; (8002cbc <HAL_QSPI_MspInit+0x11c>)
 8002ca0:	f002 fd22 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3730      	adds	r7, #48	; 0x30
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	a0001000 	.word	0xa0001000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020c00 	.word	0x40020c00

08002cc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_RTC_MspInit+0x2c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d105      	bne.n	8002cde <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RTC_MspInit+0x30>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <HAL_RTC_MspInit+0x30>)
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40002800 	.word	0x40002800
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_SD_MspInit+0xb4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d144      	bne.n	8002da0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a24      	ldr	r2, [pc, #144]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_SD_MspInit+0xb8>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002d5e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d70:	230c      	movs	r3, #12
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	480d      	ldr	r0, [pc, #52]	; (8002db0 <HAL_SD_MspInit+0xbc>)
 8002d7c:	f002 fcb4 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d80:	2304      	movs	r3, #4
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d90:	230c      	movs	r3, #12
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <HAL_SD_MspInit+0xc0>)
 8002d9c:	f002 fca4 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00

08002db8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002dd8:	d127      	bne.n	8002e2a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_SPDIFRX_MspInit+0x7c>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_SPDIFRX_MspInit+0x7c>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_SPDIFRX_MspInit+0x7c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <HAL_SPDIFRX_MspInit+0x7c>)
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <HAL_SPDIFRX_MspInit+0x80>)
 8002e26:	f002 fc5f 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020c00 	.word	0x40020c00

08002e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_SPI_MspInit+0xb4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d144      	bne.n	8002ee8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e5e:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_SPI_MspInit+0xb8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <HAL_SPI_MspInit+0xbc>)
 8002ec2:	f002 fc11 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ec6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ed8:	2305      	movs	r3, #5
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4806      	ldr	r0, [pc, #24]	; (8002efc <HAL_SPI_MspInit+0xc0>)
 8002ee4:	f002 fc00 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ee8:	bf00      	nop
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40003800 	.word	0x40003800
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40020400 	.word	0x40020400

08002f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <HAL_TIM_Base_MspInit+0xc8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10c      	bne.n	8002f2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f2a:	e046      	b.n	8002fba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d10c      	bne.n	8002f50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	e034      	b.n	8002fba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_TIM_Base_MspInit+0xd0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10c      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
}
 8002f72:	e022      	b.n	8002fba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_TIM_Base_MspInit+0xd4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10c      	bne.n	8002f98 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
}
 8002f96:	e010      	b.n	8002fba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_TIM_Base_MspInit+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10b      	bne.n	8002fba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6453      	str	r3, [r2, #68]	; 0x44
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000c00 	.word	0x40000c00
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_TIM_PWM_MspInit+0x38>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10b      	bne.n	8003006 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40001800 	.word	0x40001800
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_TIM_MspPostInit+0x178>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11d      	bne.n	800307a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003068:	2301      	movs	r3, #1
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800306c:	f107 031c 	add.w	r3, r7, #28
 8003070:	4619      	mov	r1, r3
 8003072:	484a      	ldr	r0, [pc, #296]	; (800319c <HAL_TIM_MspPostInit+0x180>)
 8003074:	f002 fb38 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003078:	e087      	b.n	800318a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003082:	d11d      	bne.n	80030c0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	4a43      	ldr	r2, [pc, #268]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6313      	str	r3, [r2, #48]	; 0x30
 8003090:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800309c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ae:	2301      	movs	r3, #1
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	4838      	ldr	r0, [pc, #224]	; (800319c <HAL_TIM_MspPostInit+0x180>)
 80030ba:	f002 fb15 	bl	80056e8 <HAL_GPIO_Init>
}
 80030be:	e064      	b.n	800318a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a36      	ldr	r2, [pc, #216]	; (80031a0 <HAL_TIM_MspPostInit+0x184>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d11c      	bne.n	8003104 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a32      	ldr	r2, [pc, #200]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030e2:	2310      	movs	r3, #16
 80030e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030f2:	2302      	movs	r3, #2
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4619      	mov	r1, r3
 80030fc:	4829      	ldr	r0, [pc, #164]	; (80031a4 <HAL_TIM_MspPostInit+0x188>)
 80030fe:	f002 faf3 	bl	80056e8 <HAL_GPIO_Init>
}
 8003102:	e042      	b.n	800318a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_TIM_MspPostInit+0x18c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d11c      	bne.n	8003148 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003126:	2301      	movs	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003136:	2302      	movs	r3, #2
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	4619      	mov	r1, r3
 8003140:	481a      	ldr	r0, [pc, #104]	; (80031ac <HAL_TIM_MspPostInit+0x190>)
 8003142:	f002 fad1 	bl	80056e8 <HAL_GPIO_Init>
}
 8003146:	e020      	b.n	800318a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_TIM_MspPostInit+0x194>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d11b      	bne.n	800318a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_TIM_MspPostInit+0x17c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800317a:	2309      	movs	r3, #9
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <HAL_TIM_MspPostInit+0x198>)
 8003186:	f002 faaf 	bl	80056e8 <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3730      	adds	r7, #48	; 0x30
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40010000 	.word	0x40010000
 8003198:	40023800 	.word	0x40023800
 800319c:	40020000 	.word	0x40020000
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40020400 	.word	0x40020400
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40001800 	.word	0x40001800
 80031b4:	40021c00 	.word	0x40021c00

080031b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3c      	ldr	r2, [pc, #240]	; (80032c8 <HAL_UART_MspInit+0x110>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d145      	bne.n	8003266 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031da:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_UART_MspInit+0x114>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <HAL_UART_MspInit+0x114>)
 80031e0:	f043 0310 	orr.w	r3, r3, #16
 80031e4:	6453      	str	r3, [r2, #68]	; 0x44
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_UART_MspInit+0x114>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_UART_MspInit+0x114>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a35      	ldr	r2, [pc, #212]	; (80032cc <HAL_UART_MspInit+0x114>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_UART_MspInit+0x114>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_UART_MspInit+0x114>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_UART_MspInit+0x114>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_UART_MspInit+0x114>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003232:	2307      	movs	r3, #7
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	4824      	ldr	r0, [pc, #144]	; (80032d0 <HAL_UART_MspInit+0x118>)
 800323e:	f002 fa53 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003254:	2307      	movs	r3, #7
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4619      	mov	r1, r3
 800325e:	481d      	ldr	r0, [pc, #116]	; (80032d4 <HAL_UART_MspInit+0x11c>)
 8003260:	f002 fa42 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003264:	e02c      	b.n	80032c0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_UART_MspInit+0x120>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d127      	bne.n	80032c0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003270:	4b16      	ldr	r3, [pc, #88]	; (80032cc <HAL_UART_MspInit+0x114>)
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_UART_MspInit+0x114>)
 8003276:	f043 0320 	orr.w	r3, r3, #32
 800327a:	6453      	str	r3, [r2, #68]	; 0x44
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <HAL_UART_MspInit+0x114>)
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_UART_MspInit+0x114>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_UART_MspInit+0x114>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_UART_MspInit+0x114>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80032a0:	23c0      	movs	r3, #192	; 0xc0
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032b0:	2308      	movs	r3, #8
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <HAL_UART_MspInit+0x124>)
 80032bc:	f002 fa14 	bl	80056e8 <HAL_GPIO_Init>
}
 80032c0:	bf00      	nop
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40011000 	.word	0x40011000
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40011400 	.word	0x40011400
 80032dc:	40020800 	.word	0x40020800

080032e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_FMC_MspInit+0x100>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d16d      	bne.n	80033d8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032fc:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_FMC_MspInit+0x100>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_FMC_MspInit+0x104>)
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_FMC_MspInit+0x104>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6393      	str	r3, [r2, #56]	; 0x38
 800330e:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_FMC_MspInit+0x104>)
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800331a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800331e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800332c:	230c      	movs	r3, #12
 800332e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	4619      	mov	r1, r3
 8003334:	482c      	ldr	r0, [pc, #176]	; (80033e8 <HAL_FMC_MspInit+0x108>)
 8003336:	f002 f9d7 	bl	80056e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800333a:	f248 1333 	movw	r3, #33075	; 0x8133
 800333e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800334c:	230c      	movs	r3, #12
 800334e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4825      	ldr	r0, [pc, #148]	; (80033ec <HAL_FMC_MspInit+0x10c>)
 8003356:	f002 f9c7 	bl	80056e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800335a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800335e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800336c:	230c      	movs	r3, #12
 800336e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	4619      	mov	r1, r3
 8003374:	481e      	ldr	r0, [pc, #120]	; (80033f0 <HAL_FMC_MspInit+0x110>)
 8003376:	f002 f9b7 	bl	80056e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800337a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800337e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800338c:	230c      	movs	r3, #12
 800338e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4817      	ldr	r0, [pc, #92]	; (80033f4 <HAL_FMC_MspInit+0x114>)
 8003396:	f002 f9a7 	bl	80056e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800339a:	2328      	movs	r3, #40	; 0x28
 800339c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033aa:	230c      	movs	r3, #12
 80033ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4811      	ldr	r0, [pc, #68]	; (80033f8 <HAL_FMC_MspInit+0x118>)
 80033b4:	f002 f998 	bl	80056e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80033b8:	2308      	movs	r3, #8
 80033ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c8:	230c      	movs	r3, #12
 80033ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	4619      	mov	r1, r3
 80033d0:	480a      	ldr	r0, [pc, #40]	; (80033fc <HAL_FMC_MspInit+0x11c>)
 80033d2:	f002 f989 	bl	80056e8 <HAL_GPIO_Init>
 80033d6:	e000      	b.n	80033da <HAL_FMC_MspInit+0xfa>
    return;
 80033d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000b08 	.word	0x20000b08
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40021800 	.word	0x40021800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021c00 	.word	0x40021c00
 80033fc:	40020800 	.word	0x40020800

08003400 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003408:	f7ff ff6a 	bl	80032e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <HAL_SAI_MspInit+0xbc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d124      	bne.n	8003470 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003426:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_SAI_MspInit+0xc0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_SAI_MspInit+0xc4>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <HAL_SAI_MspInit+0xc4>)
 8003434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_SAI_MspInit+0xc4>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_SAI_MspInit+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_SAI_MspInit+0xc0>)
 800344e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003450:	23f0      	movs	r3, #240	; 0xf0
 8003452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003460:	230a      	movs	r3, #10
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	481c      	ldr	r0, [pc, #112]	; (80034dc <HAL_SAI_MspInit+0xc8>)
 800346c:	f002 f93c 	bl	80056e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_SAI_MspInit+0xcc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d125      	bne.n	80034c6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800347a:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <HAL_SAI_MspInit+0xc0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_SAI_MspInit+0xc4>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_SAI_MspInit+0xc4>)
 8003488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_SAI_MspInit+0xc4>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_SAI_MspInit+0xc0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <HAL_SAI_MspInit+0xc0>)
 80034a2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80034a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034b6:	230a      	movs	r3, #10
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	4808      	ldr	r0, [pc, #32]	; (80034e4 <HAL_SAI_MspInit+0xd0>)
 80034c2:	f002 f911 	bl	80056e8 <HAL_GPIO_Init>

    }
}
 80034c6:	bf00      	nop
 80034c8:	3728      	adds	r7, #40	; 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40015c04 	.word	0x40015c04
 80034d4:	20000b0c 	.word	0x20000b0c
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40015c24 	.word	0x40015c24
 80034e4:	40021800 	.word	0x40021800

080034e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80034f8:	2200      	movs	r2, #0
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	2036      	movs	r0, #54	; 0x36
 80034fe:	f001 fac5 	bl	8004a8c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003502:	2036      	movs	r0, #54	; 0x36
 8003504:	f001 fade 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_InitTick+0xa0>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_InitTick+0xa0>)
 800350e:	f043 0310 	orr.w	r3, r3, #16
 8003512:	6413      	str	r3, [r2, #64]	; 0x40
 8003514:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_InitTick+0xa0>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003520:	f107 0210 	add.w	r2, r7, #16
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fbfe 	bl	8006d2c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003530:	f003 fbd4 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 8003534:	4603      	mov	r3, r0
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <HAL_InitTick+0xa4>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	3b01      	subs	r3, #1
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_InitTick+0xa8>)
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_InitTick+0xac>)
 800354c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_InitTick+0xa8>)
 8003550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003554:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003556:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_InitTick+0xa8>)
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_InitTick+0xa8>)
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_InitTick+0xa8>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003568:	4809      	ldr	r0, [pc, #36]	; (8003590 <HAL_InitTick+0xa8>)
 800356a:	f006 f889 	bl	8009680 <HAL_TIM_Base_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <HAL_InitTick+0xa8>)
 8003576:	f006 f8af 	bl	80096d8 <HAL_TIM_Base_Start_IT>
 800357a:	4603      	mov	r3, r0
 800357c:	e000      	b.n	8003580 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
}
 8003580:	4618      	mov	r0, r3
 8003582:	3730      	adds	r7, #48	; 0x30
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	431bde83 	.word	0x431bde83
 8003590:	20000b10 	.word	0x20000b10
 8003594:	40001000 	.word	0x40001000

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035aa:	e7fe      	b.n	80035aa <HardFault_Handler+0x4>

080035ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <MemManage_Handler+0x4>

080035b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <BusFault_Handler+0x4>

080035b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <UsageFault_Handler+0x4>

080035be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <CAN1_RX0_IRQHandler+0x10>)
 80035d2:	f000 ff4f 	bl	8004474 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200003cc 	.word	0x200003cc

080035e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <TIM6_DAC_IRQHandler+0x10>)
 80035e6:	f006 f8cc 	bl	8009782 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000b10 	.word	0x20000b10

080035f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <LTDC_IRQHandler+0x10>)
 80035fa:	f002 fb23 	bl	8005c44 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200004cc 	.word	0x200004cc

08003608 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <DMA2D_IRQHandler+0x10>)
 800360e:	f001 fe2c 	bl	800526a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	2000048c 	.word	0x2000048c

0800361c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_kill>:

int _kill(int pid, int sig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003636:	f021 fee5 	bl	8025404 <__errno>
 800363a:	4603      	mov	r3, r0
 800363c:	2216      	movs	r2, #22
 800363e:	601a      	str	r2, [r3, #0]
	return -1;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_exit>:

void _exit (int status)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003654:	f04f 31ff 	mov.w	r1, #4294967295
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ffe7 	bl	800362c <_kill>
	while (1) {}		/* Make sure we hang here */
 800365e:	e7fe      	b.n	800365e <_exit+0x12>

08003660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e00a      	b.n	8003688 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003672:	f3af 8000 	nop.w
 8003676:	4601      	mov	r1, r0
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	60ba      	str	r2, [r7, #8]
 800367e:	b2ca      	uxtb	r2, r1
 8003680:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	3301      	adds	r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	dbf0      	blt.n	8003672 <_read+0x12>
	}

return len;
 8003690:	687b      	ldr	r3, [r7, #4]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e009      	b.n	80036c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	60ba      	str	r2, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	dbf1      	blt.n	80036ac <_write+0x12>
	}
	return len;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_close>:

int _close(int file)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
	return -1;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036fa:	605a      	str	r2, [r3, #4]
	return 0;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_isatty>:

int _isatty(int file)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	return 1;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
	return 0;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <_sbrk+0x50>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <_sbrk+0x16>
		heap_end = &end;
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <_sbrk+0x50>)
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <_sbrk+0x54>)
 8003750:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <_sbrk+0x50>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <_sbrk+0x50>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	466a      	mov	r2, sp
 8003762:	4293      	cmp	r3, r2
 8003764:	d907      	bls.n	8003776 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003766:	f021 fe4d 	bl	8025404 <__errno>
 800376a:	4603      	mov	r3, r0
 800376c:	220c      	movs	r2, #12
 800376e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e006      	b.n	8003784 <_sbrk+0x48>
	}

	heap_end += incr;
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <_sbrk+0x50>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	4a03      	ldr	r2, [pc, #12]	; (800378c <_sbrk+0x50>)
 8003780:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000b50 	.word	0x20000b50
 8003790:	2000c908 	.word	0x2000c908

08003794 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <SystemInit+0x28>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <SystemInit+0x28>)
 80037a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <SystemInit+0x28>)
 80037aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ae:	609a      	str	r2, [r3, #8]
#endif
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037c6:	e003      	b.n	80037d0 <LoopCopyDataInit>

080037c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ce:	3104      	adds	r1, #4

080037d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037d0:	480b      	ldr	r0, [pc, #44]	; (8003800 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037d8:	d3f6      	bcc.n	80037c8 <CopyDataInit>
  ldr  r2, =_sbss
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037dc:	e002      	b.n	80037e4 <LoopFillZerobss>

080037de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037e0:	f842 3b04 	str.w	r3, [r2], #4

080037e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037e8:	d3f9      	bcc.n	80037de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ea:	f7ff ffd3 	bl	8003794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ee:	f021 fe0f 	bl	8025410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f2:	f7fd fb41 	bl	8000e78 <main>
  bx  lr    
 80037f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037f8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037fc:	08061924 	.word	0x08061924
  ldr  r0, =_sdata
 8003800:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003804:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8003808:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 800380c:	2000c908 	.word	0x2000c908

08003810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC_IRQHandler>

08003812 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003816:	2003      	movs	r0, #3
 8003818:	f001 f92d 	bl	8004a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800381c:	2000      	movs	r0, #0
 800381e:	f7ff fe63 	bl	80034e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003822:	f7fe ff09 	bl	8002638 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000020 	.word	0x20000020
 8003850:	20000b54 	.word	0x20000b54

08003854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000b54 	.word	0x20000b54

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000020 	.word	0x20000020

080038b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e031      	b.n	800392e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe fed8 	bl	8002688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_ADC_Init+0x84>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	f043 0202 	orr.w	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f964 	bl	8003bd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
 800391e:	e001      	b.n	8003924 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	ffffeefd 	.word	0xffffeefd

0800393c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x1c>
 8003954:	2302      	movs	r3, #2
 8003956:	e12a      	b.n	8003bae <HAL_ADC_ConfigChannel+0x272>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b09      	cmp	r3, #9
 8003966:	d93a      	bls.n	80039de <HAL_ADC_ConfigChannel+0xa2>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003970:	d035      	beq.n	80039de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68d9      	ldr	r1, [r3, #12]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	3b1e      	subs	r3, #30
 8003988:	2207      	movs	r2, #7
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43da      	mvns	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	400a      	ands	r2, r1
 8003996:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a87      	ldr	r2, [pc, #540]	; (8003bbc <HAL_ADC_ConfigChannel+0x280>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10a      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68d9      	ldr	r1, [r3, #12]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	061a      	lsls	r2, r3, #24
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b6:	e035      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68d9      	ldr	r1, [r3, #12]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	4618      	mov	r0, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4403      	add	r3, r0
 80039d0:	3b1e      	subs	r3, #30
 80039d2:	409a      	lsls	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039dc:	e022      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	2207      	movs	r2, #7
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43da      	mvns	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	400a      	ands	r2, r1
 8003a00:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6919      	ldr	r1, [r3, #16]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4403      	add	r3, r0
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d824      	bhi.n	8003a76 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b05      	subs	r3, #5
 8003a3e:	221f      	movs	r2, #31
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43da      	mvns	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	3b05      	subs	r3, #5
 8003a68:	fa00 f203 	lsl.w	r2, r0, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
 8003a74:	e04c      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d824      	bhi.n	8003ac8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3b23      	subs	r3, #35	; 0x23
 8003a90:	221f      	movs	r2, #31
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b23      	subs	r3, #35	; 0x23
 8003aba:	fa00 f203 	lsl.w	r2, r0, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac6:	e023      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3b41      	subs	r3, #65	; 0x41
 8003ada:	221f      	movs	r2, #31
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4618      	mov	r0, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	3b41      	subs	r3, #65	; 0x41
 8003b04:	fa00 f203 	lsl.w	r2, r0, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <HAL_ADC_ConfigChannel+0x284>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10a      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1f4>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b22:	d105      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b24:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <HAL_ADC_ConfigChannel+0x288>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <HAL_ADC_ConfigChannel+0x288>)
 8003b2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b2e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <HAL_ADC_ConfigChannel+0x284>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d109      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x212>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d105      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_ADC_ConfigChannel+0x288>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <HAL_ADC_ConfigChannel+0x288>)
 8003b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b4c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <HAL_ADC_ConfigChannel+0x284>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d125      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x268>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_ADC_ConfigChannel+0x280>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <HAL_ADC_ConfigChannel+0x22e>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b11      	cmp	r3, #17
 8003b68:	d11c      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b6a:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <HAL_ADC_ConfigChannel+0x288>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <HAL_ADC_ConfigChannel+0x288>)
 8003b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b74:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <HAL_ADC_ConfigChannel+0x280>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d111      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_ADC_ConfigChannel+0x28c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_ADC_ConfigChannel+0x290>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0c9a      	lsrs	r2, r3, #18
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b96:	e002      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f9      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	10000012 	.word	0x10000012
 8003bc0:	40012000 	.word	0x40012000
 8003bc4:	40012300 	.word	0x40012300
 8003bc8:	20000018 	.word	0x20000018
 8003bcc:	431bde83 	.word	0x431bde83

08003bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bd8:	4b78      	ldr	r3, [pc, #480]	; (8003dbc <ADC_Init+0x1ec>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a77      	ldr	r2, [pc, #476]	; (8003dbc <ADC_Init+0x1ec>)
 8003bde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003be2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003be4:	4b75      	ldr	r3, [pc, #468]	; (8003dbc <ADC_Init+0x1ec>)
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4973      	ldr	r1, [pc, #460]	; (8003dbc <ADC_Init+0x1ec>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6899      	ldr	r1, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	4a58      	ldr	r2, [pc, #352]	; (8003dc0 <ADC_Init+0x1f0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d022      	beq.n	8003caa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6899      	ldr	r1, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	e00f      	b.n	8003cca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0202 	bic.w	r2, r2, #2
 8003cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6899      	ldr	r1, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	005a      	lsls	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01b      	beq.n	8003d30 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	3b01      	subs	r3, #1
 8003d24:	035a      	lsls	r2, r3, #13
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e007      	b.n	8003d40 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	051a      	lsls	r2, r3, #20
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d82:	025a      	lsls	r2, r3, #9
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6899      	ldr	r1, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	029a      	lsls	r2, r3, #10
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012300 	.word	0x40012300
 8003dc0:	0f000001 	.word	0x0f000001

08003dc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0ed      	b.n	8003fb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe fcaa 	bl	800273c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0202 	bic.w	r2, r2, #2
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df8:	f7ff fd2c 	bl	8003854 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dfe:	e012      	b.n	8003e26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e00:	f7ff fd28 	bl	8003854 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b0a      	cmp	r3, #10
 8003e0c:	d90b      	bls.n	8003e26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0c5      	b.n	8003fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e5      	bne.n	8003e00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7ff fd06 	bl	8003854 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e4a:	e012      	b.n	8003e72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e4c:	f7ff fd02 	bl	8003854 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b0a      	cmp	r3, #10
 8003e58:	d90b      	bls.n	8003e72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2205      	movs	r2, #5
 8003e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e09f      	b.n	8003fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0e5      	beq.n	8003e4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7e1b      	ldrb	r3, [r3, #24]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d108      	bne.n	8003e9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e007      	b.n	8003eaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7e5b      	ldrb	r3, [r3, #25]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d108      	bne.n	8003ec4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e007      	b.n	8003ed4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7e9b      	ldrb	r3, [r3, #26]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d108      	bne.n	8003eee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e007      	b.n	8003efe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0220 	bic.w	r2, r2, #32
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7edb      	ldrb	r3, [r3, #27]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d108      	bne.n	8003f18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0210 	bic.w	r2, r2, #16
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e007      	b.n	8003f28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0210 	orr.w	r2, r2, #16
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7f1b      	ldrb	r3, [r3, #28]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0208 	orr.w	r2, r2, #8
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e007      	b.n	8003f52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0208 	bic.w	r2, r2, #8
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7f5b      	ldrb	r3, [r3, #29]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0204 	orr.w	r2, r2, #4
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e007      	b.n	8003f7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0204 	bic.w	r2, r2, #4
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	ea42 0103 	orr.w	r1, r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	1e5a      	subs	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d003      	beq.n	8003fe2 <HAL_CAN_ConfigFilter+0x26>
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	f040 80be 	bne.w	800415e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fe2:	4b65      	ldr	r3, [pc, #404]	; (8004178 <HAL_CAN_ConfigFilter+0x1bc>)
 8003fe4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ffc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	431a      	orrs	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2201      	movs	r2, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43db      	mvns	r3, r3
 8004034:	401a      	ands	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d123      	bne.n	800408c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004066:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3248      	adds	r2, #72	; 0x48
 800406c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004080:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004082:	6979      	ldr	r1, [r7, #20]
 8004084:	3348      	adds	r3, #72	; 0x48
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d122      	bne.n	80040da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	431a      	orrs	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	3248      	adds	r2, #72	; 0x48
 80040ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040d0:	6979      	ldr	r1, [r7, #20]
 80040d2:	3348      	adds	r3, #72	; 0x48
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	401a      	ands	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040f4:	e007      	b.n	8004106 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	431a      	orrs	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	401a      	ands	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004120:	e007      	b.n	8004132 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	431a      	orrs	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	431a      	orrs	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004150:	f023 0201 	bic.w	r2, r3, #1
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e006      	b.n	800416c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
  }
}
 800416c:	4618      	mov	r0, r3
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40006400 	.word	0x40006400

0800417c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d12e      	bne.n	80041ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041a8:	f7ff fb54 	bl	8003854 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041ae:	e012      	b.n	80041d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041b0:	f7ff fb50 	bl	8003854 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b0a      	cmp	r3, #10
 80041bc:	d90b      	bls.n	80041d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2205      	movs	r2, #5
 80041ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e012      	b.n	80041fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e006      	b.n	80041fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
  }
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004218:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d003      	beq.n	8004228 <HAL_CAN_GetRxMessage+0x24>
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	2b02      	cmp	r3, #2
 8004224:	f040 80f3 	bne.w	800440e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10e      	bne.n	800424c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d116      	bne.n	800426a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0e7      	b.n	800441c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0d8      	b.n	800441c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	331b      	adds	r3, #27
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4413      	add	r3, r2
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0204 	and.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	331b      	adds	r3, #27
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4413      	add	r3, r2
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	0d5b      	lsrs	r3, r3, #21
 8004298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e00b      	b.n	80042ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	331b      	adds	r3, #27
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	331b      	adds	r3, #27
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	4413      	add	r3, r2
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0202 	and.w	r2, r3, #2
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	331b      	adds	r3, #27
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 020f 	and.w	r2, r3, #15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	331b      	adds	r3, #27
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	331b      	adds	r3, #27
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4413      	add	r3, r2
 8004338:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0a1a      	lsrs	r2, r3, #8
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	4413      	add	r3, r2
 8004352:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0c1a      	lsrs	r2, r3, #16
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	3302      	adds	r3, #2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4413      	add	r3, r2
 800436c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0e1a      	lsrs	r2, r3, #24
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3303      	adds	r3, #3
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0a1a      	lsrs	r2, r3, #8
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	3305      	adds	r3, #5
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0c1a      	lsrs	r2, r3, #16
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	3306      	adds	r3, #6
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0e1a      	lsrs	r2, r3, #24
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	3307      	adds	r3, #7
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0220 	orr.w	r2, r2, #32
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	e007      	b.n	800440a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0220 	orr.w	r2, r2, #32
 8004408:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e006      	b.n	800441c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004438:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d002      	beq.n	8004446 <HAL_CAN_ActivateNotification+0x1e>
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d109      	bne.n	800445a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6959      	ldr	r1, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e006      	b.n	8004468 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07c      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f983 	bl	80047e2 <HAL_CAN_TxMailbox0CompleteCallback>
 80044dc:	e016      	b.n	800450c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
 80044f0:	e00c      	b.n	800450c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
 8004504:	e002      	b.n	800450c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f989 	bl	800481e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d024      	beq.n	8004560 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800451e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f963 	bl	80047f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004530:	e016      	b.n	8004560 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	e00c      	b.n	8004560 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	e002      	b.n	8004560 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f969 	bl	8004832 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d024      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004572:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f943 	bl	800480a <HAL_CAN_TxMailbox2CompleteCallback>
 8004584:	e016      	b.n	80045b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
 8004598:	e00c      	b.n	80045b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
 80045ac:	e002      	b.n	80045b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f949 	bl	8004846 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2210      	movs	r2, #16
 80045d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f930 	bl	800485a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fe0c 	bl	8001230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004632:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2210      	movs	r2, #16
 800463a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f912 	bl	8004882 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8f9 	bl	800486e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d006      	beq.n	800469e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2210      	movs	r2, #16
 8004696:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8fc 	bl	8004896 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2208      	movs	r2, #8
 80046b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f8f5 	bl	80048aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d07b      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d072      	beq.n	80047ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f043 0302 	orr.w	r3, r3, #2
 800470a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472e:	2b00      	cmp	r3, #0
 8004730:	d043      	beq.n	80047ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004738:	2b00      	cmp	r3, #0
 800473a:	d03e      	beq.n	80047ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004742:	2b60      	cmp	r3, #96	; 0x60
 8004744:	d02b      	beq.n	800479e <HAL_CAN_IRQHandler+0x32a>
 8004746:	2b60      	cmp	r3, #96	; 0x60
 8004748:	d82e      	bhi.n	80047a8 <HAL_CAN_IRQHandler+0x334>
 800474a:	2b50      	cmp	r3, #80	; 0x50
 800474c:	d022      	beq.n	8004794 <HAL_CAN_IRQHandler+0x320>
 800474e:	2b50      	cmp	r3, #80	; 0x50
 8004750:	d82a      	bhi.n	80047a8 <HAL_CAN_IRQHandler+0x334>
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d019      	beq.n	800478a <HAL_CAN_IRQHandler+0x316>
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d826      	bhi.n	80047a8 <HAL_CAN_IRQHandler+0x334>
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	d010      	beq.n	8004780 <HAL_CAN_IRQHandler+0x30c>
 800475e:	2b30      	cmp	r3, #48	; 0x30
 8004760:	d822      	bhi.n	80047a8 <HAL_CAN_IRQHandler+0x334>
 8004762:	2b10      	cmp	r3, #16
 8004764:	d002      	beq.n	800476c <HAL_CAN_IRQHandler+0x2f8>
 8004766:	2b20      	cmp	r3, #32
 8004768:	d005      	beq.n	8004776 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800476a:	e01d      	b.n	80047a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f043 0308 	orr.w	r3, r3, #8
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004774:	e019      	b.n	80047aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f043 0310 	orr.w	r3, r3, #16
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800477e:	e014      	b.n	80047aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f043 0320 	orr.w	r3, r3, #32
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004788:	e00f      	b.n	80047aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004792:	e00a      	b.n	80047aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800479c:	e005      	b.n	80047aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047a6:	e000      	b.n	80047aa <HAL_CAN_IRQHandler+0x336>
            break;
 80047a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2204      	movs	r2, #4
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f872 	bl	80048be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047da:	bf00      	nop
 80047dc:	3728      	adds	r7, #40	; 0x28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <__NVIC_SetPriorityGrouping+0x40>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048f0:	4013      	ands	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <__NVIC_SetPriorityGrouping+0x44>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004902:	4a04      	ldr	r2, [pc, #16]	; (8004914 <__NVIC_SetPriorityGrouping+0x40>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	60d3      	str	r3, [r2, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00
 8004918:	05fa0000 	.word	0x05fa0000

0800491c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <__NVIC_GetPriorityGrouping+0x18>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	f003 0307 	and.w	r3, r3, #7
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db0b      	blt.n	8004962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	4907      	ldr	r1, [pc, #28]	; (8004970 <__NVIC_EnableIRQ+0x38>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e100 	.word	0xe000e100

08004974 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	2b00      	cmp	r3, #0
 8004984:	db12      	blt.n	80049ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	f003 021f 	and.w	r2, r3, #31
 800498c:	490a      	ldr	r1, [pc, #40]	; (80049b8 <__NVIC_DisableIRQ+0x44>)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2001      	movs	r0, #1
 8004996:	fa00 f202 	lsl.w	r2, r0, r2
 800499a:	3320      	adds	r3, #32
 800499c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049a0:	f3bf 8f4f 	dsb	sy
}
 80049a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049a6:	f3bf 8f6f 	isb	sy
}
 80049aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000e100 	.word	0xe000e100

080049bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	db0a      	blt.n	80049e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	490c      	ldr	r1, [pc, #48]	; (8004a08 <__NVIC_SetPriority+0x4c>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	0112      	lsls	r2, r2, #4
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	440b      	add	r3, r1
 80049e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049e4:	e00a      	b.n	80049fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4908      	ldr	r1, [pc, #32]	; (8004a0c <__NVIC_SetPriority+0x50>)
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	3b04      	subs	r3, #4
 80049f4:	0112      	lsls	r2, r2, #4
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	440b      	add	r3, r1
 80049fa:	761a      	strb	r2, [r3, #24]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000e100 	.word	0xe000e100
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b089      	sub	sp, #36	; 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f1c3 0307 	rsb	r3, r3, #7
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	bf28      	it	cs
 8004a2e:	2304      	movcs	r3, #4
 8004a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d902      	bls.n	8004a40 <NVIC_EncodePriority+0x30>
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3b03      	subs	r3, #3
 8004a3e:	e000      	b.n	8004a42 <NVIC_EncodePriority+0x32>
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a44:	f04f 32ff 	mov.w	r2, #4294967295
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	401a      	ands	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a58:	f04f 31ff 	mov.w	r1, #4294967295
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	43d9      	mvns	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a68:	4313      	orrs	r3, r2
         );
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3724      	adds	r7, #36	; 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ff28 	bl	80048d4 <__NVIC_SetPriorityGrouping>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9e:	f7ff ff3d 	bl	800491c <__NVIC_GetPriorityGrouping>
 8004aa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	f7ff ffb1 	bl	8004a10 <NVIC_EncodePriority>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff80 	bl	80049bc <__NVIC_SetPriority>
}
 8004abc:	bf00      	nop
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ff30 	bl	8004938 <__NVIC_EnableIRQ>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff40 	bl	8004974 <__NVIC_DisableIRQ>
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e054      	b.n	8004bb8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7f5b      	ldrb	r3, [r3, #29]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd fe58 	bl	80027d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10c      	bne.n	8004b4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <HAL_CRC_Init+0xc4>)
 8004b38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0218 	bic.w	r2, r2, #24
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	e00c      	b.n	8004b66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6899      	ldr	r1, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f834 	bl	8004bc4 <HAL_CRCEx_Polynomial_Set>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e028      	b.n	8004bb8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	795b      	ldrb	r3, [r3, #5]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f04f 32ff 	mov.w	r2, #4294967295
 8004b76:	611a      	str	r2, [r3, #16]
 8004b78:	e004      	b.n	8004b84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6912      	ldr	r2, [r2, #16]
 8004b82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699a      	ldr	r2, [r3, #24]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	04c11db7 	.word	0x04c11db7

08004bc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004bd4:	231f      	movs	r3, #31
 8004bd6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004bd8:	bf00      	nop
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1e5a      	subs	r2, r3, #1
 8004bde:	613a      	str	r2, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <HAL_CRCEx_Polynomial_Set+0x34>
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b18      	cmp	r3, #24
 8004bfc:	d846      	bhi.n	8004c8c <HAL_CRCEx_Polynomial_Set+0xc8>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c93 	.word	0x08004c93
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004c8d 	.word	0x08004c8d
 8004c10:	08004c8d 	.word	0x08004c8d
 8004c14:	08004c8d 	.word	0x08004c8d
 8004c18:	08004c8d 	.word	0x08004c8d
 8004c1c:	08004c8d 	.word	0x08004c8d
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004c81 	.word	0x08004c81
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004c8d 	.word	0x08004c8d
 8004c30:	08004c8d 	.word	0x08004c8d
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c8d 	.word	0x08004c8d
 8004c44:	08004c75 	.word	0x08004c75
 8004c48:	08004c8d 	.word	0x08004c8d
 8004c4c:	08004c8d 	.word	0x08004c8d
 8004c50:	08004c8d 	.word	0x08004c8d
 8004c54:	08004c8d 	.word	0x08004c8d
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004c8d 	.word	0x08004c8d
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	08004c69 	.word	0x08004c69
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d913      	bls.n	8004c96 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c72:	e010      	b.n	8004c96 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b07      	cmp	r3, #7
 8004c78:	d90f      	bls.n	8004c9a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c7e:	e00c      	b.n	8004c9a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d90b      	bls.n	8004c9e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c8a:	e008      	b.n	8004c9e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	e006      	b.n	8004ca0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c92:	bf00      	nop
 8004c94:	e004      	b.n	8004ca0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c9e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 0118 	bic.w	r1, r3, #24
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e069      	b.n	8004db6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fd90 	bl	8002814 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_DCMI_Init+0xf0>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d2e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d3a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d46:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d52:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d5e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d112      	bne.n	8004d96 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7f1b      	ldrb	r3, [r3, #28]
 8004d74:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7f5b      	ldrb	r3, [r3, #29]
 8004d7a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d7c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7f9b      	ldrb	r3, [r3, #30]
 8004d82:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d84:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	7fdb      	ldrb	r3, [r3, #31]
 8004d8c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d92:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d94:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 021e 	orr.w	r2, r2, #30
 8004da4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	ffe0f007 	.word	0xffe0f007

08004dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_DMA_Start_IT+0x26>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e048      	b.n	8004e7c <HAL_DMA_Start_IT+0xb8>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d137      	bne.n	8004e6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f842 	bl	8004e9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1c:	223f      	movs	r2, #63	; 0x3f
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0216 	orr.w	r2, r2, #22
 8004e32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e005      	b.n	8004e7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
 8004e78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d108      	bne.n	8004edc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eda:	e007      	b.n	8004eec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e039      	b.n	8004f7e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fd fd36 	bl	8002990 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	f023 0107 	bic.w	r1, r3, #7
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_DMA2D_Init+0x90>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d1      	ldr	r1, [r2, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	ffffc000 	.word	0xffffc000

08004f8c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e05f      	b.n	800505e <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004f9e:	4b32      	ldr	r3, [pc, #200]	; (8005068 <HAL_DMA2D_DeInit+0xdc>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02e      	beq.n	8005008 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d107      	bne.n	8004fc8 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8c1 	bl	8005140 <HAL_DMA2D_Abort>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d021      	beq.n	8005008 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e04a      	b.n	800505e <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d108      	bne.n	8004fe8 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8f7 	bl	80051cc <HAL_DMA2D_CLUTLoading_Abort>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d011      	beq.n	8005008 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e03a      	b.n	800505e <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d108      	bne.n	8005008 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8e7 	bl	80051cc <HAL_DMA2D_CLUTLoading_Abort>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e02a      	b.n	800505e <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	223f      	movs	r2, #63	; 0x3f
 8005016:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fd fccb 	bl	80029dc <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800

0800506c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_DMA2D_Start_IT+0x1c>
 8005084:	2302      	movs	r3, #2
 8005086:	e020      	b.n	80050ca <HAL_DMA2D_Start_IT+0x5e>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fa84 	bl	80055b0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80050b6:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af02      	add	r7, sp, #8
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_DMA2D_BlendingStart_IT+0x1c>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e024      	b.n	8005138 <HAL_DMA2D_BlendingStart_IT+0x66>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fa4d 	bl	80055b0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005124:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 0205 	bic.w	r2, r3, #5
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0204 	orr.w	r2, r2, #4
 800515a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800515c:	f7fe fb7a 	bl	8003854 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005162:	e017      	b.n	8005194 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005164:	f7fe fb76 	bl	8003854 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005172:	d90f      	bls.n	8005194 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e017      	b.n	80051c4 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e0      	bne.n	8005164 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80051b0:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3324      	adds	r3, #36	; 0x24
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0204 	orr.w	r2, r2, #4
 80051ec:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d103      	bne.n	80051fc <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	331c      	adds	r3, #28
 80051fa:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80051fc:	f7fe fb2a 	bl	8003854 <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005202:	e017      	b.n	8005234 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005204:	f7fe fb26 	bl	8003854 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005212:	d90f      	bls.n	8005234 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2203      	movs	r2, #3
 8005224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e016      	b.n	8005262 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e1      	bne.n	8005204 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800524e:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d026      	beq.n	80052da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d021      	beq.n	80052da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d026      	beq.n	8005332 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d021      	beq.n	8005332 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2220      	movs	r2, #32
 8005304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2204      	movs	r2, #4
 8005316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d026      	beq.n	800538a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005342:	2b00      	cmp	r3, #0
 8005344:	d021      	beq.n	800538a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005354:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2208      	movs	r2, #8
 800535c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2204      	movs	r2, #4
 800536e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00e      	beq.n	80053bc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2204      	movs	r2, #4
 80053b4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f853 	bl	8005462 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d024      	beq.n	8005410 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01f      	beq.n	8005410 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2202      	movs	r2, #2
 80053e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01f      	beq.n	800545a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01a      	beq.n	800545a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005432:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2210      	movs	r2, #16
 800543a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f80e 	bl	8005476 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_DMA2D_ConfigLayer+0x20>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e079      	b.n	80055a0 <HAL_DMA2D_ConfigLayer+0x114>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	3318      	adds	r3, #24
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80054d6:	4b35      	ldr	r3, [pc, #212]	; (80055ac <HAL_DMA2D_ConfigLayer+0x120>)
 80054d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b0a      	cmp	r3, #10
 80054e0:	d003      	beq.n	80054ea <HAL_DMA2D_ConfigLayer+0x5e>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b09      	cmp	r3, #9
 80054e8:	d107      	bne.n	80054fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e005      	b.n	8005506 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d120      	bne.n	800554e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	43db      	mvns	r3, r3
 8005516:	ea02 0103 	and.w	r1, r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	430a      	orrs	r2, r1
 8005522:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b0a      	cmp	r3, #10
 8005534:	d003      	beq.n	800553e <HAL_DMA2D_ConfigLayer+0xb2>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b09      	cmp	r3, #9
 800553c:	d127      	bne.n	800558e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800554a:	629a      	str	r2, [r3, #40]	; 0x28
 800554c:	e01f      	b.n	800558e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43db      	mvns	r3, r3
 8005558:	ea02 0103 	and.w	r1, r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	430a      	orrs	r2, r1
 8005564:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b0a      	cmp	r3, #10
 8005576:	d003      	beq.n	8005580 <HAL_DMA2D_ConfigLayer+0xf4>
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b09      	cmp	r3, #9
 800557e:	d106      	bne.n	800558e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800558c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	ff03000f 	.word	0xff03000f

080055b0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b08b      	sub	sp, #44	; 0x2c
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	041a      	lsls	r2, r3, #16
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055e8:	d174      	bne.n	80056d4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055f8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005600:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	431a      	orrs	r2, r3
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	4313      	orrs	r3, r2
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
 8005620:	e053      	b.n	80056ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d106      	bne.n	8005638 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4313      	orrs	r3, r2
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
 8005636:	e048      	b.n	80056ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d111      	bne.n	8005664 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	0cdb      	lsrs	r3, r3, #19
 8005644:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	0a9b      	lsrs	r3, r3, #10
 800564a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	08db      	lsrs	r3, r3, #3
 8005650:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	02db      	lsls	r3, r3, #11
 800565a:	4313      	orrs	r3, r2
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
 8005662:	e032      	b.n	80056ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d117      	bne.n	800569c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	0fdb      	lsrs	r3, r3, #31
 8005670:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	0cdb      	lsrs	r3, r3, #19
 8005676:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	0adb      	lsrs	r3, r3, #11
 800567c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	029b      	lsls	r3, r3, #10
 800568c:	431a      	orrs	r2, r3
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	03db      	lsls	r3, r3, #15
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	e016      	b.n	80056ca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	0f1b      	lsrs	r3, r3, #28
 80056a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	0d1b      	lsrs	r3, r3, #20
 80056a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	0b1b      	lsrs	r3, r3, #12
 80056ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	011a      	lsls	r2, r3, #4
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	431a      	orrs	r2, r3
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	4313      	orrs	r3, r2
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80056d2:	e003      	b.n	80056dc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	60da      	str	r2, [r3, #12]
}
 80056dc:	bf00      	nop
 80056de:	372c      	adds	r7, #44	; 0x2c
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056fe:	2300      	movs	r3, #0
 8005700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005702:	2300      	movs	r3, #0
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	e175      	b.n	80059f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005708:	2201      	movs	r2, #1
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4013      	ands	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	429a      	cmp	r2, r3
 8005722:	f040 8164 	bne.w	80059ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d00b      	beq.n	8005746 <HAL_GPIO_Init+0x5e>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d007      	beq.n	8005746 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800573a:	2b11      	cmp	r3, #17
 800573c:	d003      	beq.n	8005746 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b12      	cmp	r3, #18
 8005744:	d130      	bne.n	80057a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800577c:	2201      	movs	r2, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 0201 	and.w	r2, r3, #1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d003      	beq.n	80057e8 <HAL_GPIO_Init+0x100>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b12      	cmp	r3, #18
 80057e6:	d123      	bne.n	8005830 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	08da      	lsrs	r2, r3, #3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3208      	adds	r2, #8
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	220f      	movs	r2, #15
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	08da      	lsrs	r2, r3, #3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3208      	adds	r2, #8
 800582a:	69b9      	ldr	r1, [r7, #24]
 800582c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	2203      	movs	r2, #3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 0203 	and.w	r2, r3, #3
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80be 	beq.w	80059ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005872:	4b66      	ldr	r3, [pc, #408]	; (8005a0c <HAL_GPIO_Init+0x324>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	4a65      	ldr	r2, [pc, #404]	; (8005a0c <HAL_GPIO_Init+0x324>)
 8005878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800587c:	6453      	str	r3, [r2, #68]	; 0x44
 800587e:	4b63      	ldr	r3, [pc, #396]	; (8005a0c <HAL_GPIO_Init+0x324>)
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800588a:	4a61      	ldr	r2, [pc, #388]	; (8005a10 <HAL_GPIO_Init+0x328>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	220f      	movs	r2, #15
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a58      	ldr	r2, [pc, #352]	; (8005a14 <HAL_GPIO_Init+0x32c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d037      	beq.n	8005926 <HAL_GPIO_Init+0x23e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a57      	ldr	r2, [pc, #348]	; (8005a18 <HAL_GPIO_Init+0x330>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d031      	beq.n	8005922 <HAL_GPIO_Init+0x23a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a56      	ldr	r2, [pc, #344]	; (8005a1c <HAL_GPIO_Init+0x334>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <HAL_GPIO_Init+0x236>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a55      	ldr	r2, [pc, #340]	; (8005a20 <HAL_GPIO_Init+0x338>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d025      	beq.n	800591a <HAL_GPIO_Init+0x232>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a54      	ldr	r2, [pc, #336]	; (8005a24 <HAL_GPIO_Init+0x33c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01f      	beq.n	8005916 <HAL_GPIO_Init+0x22e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a53      	ldr	r2, [pc, #332]	; (8005a28 <HAL_GPIO_Init+0x340>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d019      	beq.n	8005912 <HAL_GPIO_Init+0x22a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <HAL_GPIO_Init+0x344>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_GPIO_Init+0x226>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a51      	ldr	r2, [pc, #324]	; (8005a30 <HAL_GPIO_Init+0x348>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00d      	beq.n	800590a <HAL_GPIO_Init+0x222>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a50      	ldr	r2, [pc, #320]	; (8005a34 <HAL_GPIO_Init+0x34c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <HAL_GPIO_Init+0x21e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a4f      	ldr	r2, [pc, #316]	; (8005a38 <HAL_GPIO_Init+0x350>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_GPIO_Init+0x21a>
 80058fe:	2309      	movs	r3, #9
 8005900:	e012      	b.n	8005928 <HAL_GPIO_Init+0x240>
 8005902:	230a      	movs	r3, #10
 8005904:	e010      	b.n	8005928 <HAL_GPIO_Init+0x240>
 8005906:	2308      	movs	r3, #8
 8005908:	e00e      	b.n	8005928 <HAL_GPIO_Init+0x240>
 800590a:	2307      	movs	r3, #7
 800590c:	e00c      	b.n	8005928 <HAL_GPIO_Init+0x240>
 800590e:	2306      	movs	r3, #6
 8005910:	e00a      	b.n	8005928 <HAL_GPIO_Init+0x240>
 8005912:	2305      	movs	r3, #5
 8005914:	e008      	b.n	8005928 <HAL_GPIO_Init+0x240>
 8005916:	2304      	movs	r3, #4
 8005918:	e006      	b.n	8005928 <HAL_GPIO_Init+0x240>
 800591a:	2303      	movs	r3, #3
 800591c:	e004      	b.n	8005928 <HAL_GPIO_Init+0x240>
 800591e:	2302      	movs	r3, #2
 8005920:	e002      	b.n	8005928 <HAL_GPIO_Init+0x240>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_GPIO_Init+0x240>
 8005926:	2300      	movs	r3, #0
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f002 0203 	and.w	r2, r2, #3
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	4093      	lsls	r3, r2
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005938:	4935      	ldr	r1, [pc, #212]	; (8005a10 <HAL_GPIO_Init+0x328>)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	089b      	lsrs	r3, r3, #2
 800593e:	3302      	adds	r3, #2
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005946:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <HAL_GPIO_Init+0x354>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800596a:	4a34      	ldr	r2, [pc, #208]	; (8005a3c <HAL_GPIO_Init+0x354>)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005970:	4b32      	ldr	r3, [pc, #200]	; (8005a3c <HAL_GPIO_Init+0x354>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005994:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <HAL_GPIO_Init+0x354>)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800599a:	4b28      	ldr	r3, [pc, #160]	; (8005a3c <HAL_GPIO_Init+0x354>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059be:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <HAL_GPIO_Init+0x354>)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c4:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <HAL_GPIO_Init+0x354>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e8:	4a14      	ldr	r2, [pc, #80]	; (8005a3c <HAL_GPIO_Init+0x354>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	f67f ae86 	bls.w	8005708 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3724      	adds	r7, #36	; 0x24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40020000 	.word	0x40020000
 8005a18:	40020400 	.word	0x40020400
 8005a1c:	40020800 	.word	0x40020800
 8005a20:	40020c00 	.word	0x40020c00
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40021400 	.word	0x40021400
 8005a2c:	40021800 	.word	0x40021800
 8005a30:	40021c00 	.word	0x40021c00
 8005a34:	40022000 	.word	0x40022000
 8005a38:	40022400 	.word	0x40022400
 8005a3c:	40013c00 	.word	0x40013c00

08005a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
 8005a5c:	e001      	b.n	8005a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e0bf      	b.n	8005c36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc ffa0 	bl	8002a10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005ae6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6999      	ldr	r1, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005afc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6899      	ldr	r1, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b4a      	ldr	r3, [pc, #296]	; (8005c40 <HAL_LTDC_Init+0x19c>)
 8005b18:	400b      	ands	r3, r1
 8005b1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68d9      	ldr	r1, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <HAL_LTDC_Init+0x19c>)
 8005b46:	400b      	ands	r3, r1
 8005b48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68d9      	ldr	r1, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6919      	ldr	r1, [r3, #16]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <HAL_LTDC_Init+0x19c>)
 8005b74:	400b      	ands	r3, r1
 8005b76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6919      	ldr	r1, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6959      	ldr	r1, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b27      	ldr	r3, [pc, #156]	; (8005c40 <HAL_LTDC_Init+0x19c>)
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6959      	ldr	r1, [r3, #20]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0206 	orr.w	r2, r2, #6
 8005c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	f000f800 	.word	0xf000f800

08005c44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d023      	beq.n	8005cae <HAL_LTDC_IRQHandler+0x6a>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01e      	beq.n	8005cae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0204 	bic.w	r2, r2, #4
 8005c7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2204      	movs	r2, #4
 8005c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f86f 	bl	8005d8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d023      	beq.n	8005d00 <HAL_LTDC_IRQHandler+0xbc>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01e      	beq.n	8005d00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0202 	bic.w	r2, r2, #2
 8005cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ce0:	f043 0202 	orr.w	r2, r3, #2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f846 	bl	8005d8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01b      	beq.n	8005d42 <HAL_LTDC_IRQHandler+0xfe>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d016      	beq.n	8005d42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f00f fa65 	bl	801520c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01b      	beq.n	8005d84 <HAL_LTDC_IRQHandler+0x140>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0208 	bic.w	r2, r2, #8
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f80e 	bl	8005da0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005db4:	b5b0      	push	{r4, r5, r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_LTDC_ConfigLayer+0x1a>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e02c      	b.n	8005e28 <HAL_LTDC_ConfigLayer+0x74>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2134      	movs	r1, #52	; 0x34
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4614      	mov	r4, r2
 8005df2:	461d      	mov	r5, r3
 8005df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f849 	bl	8005ea0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bdb0      	pop	{r4, r5, r7, pc}

08005e30 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_LTDC_ProgramLineEvent+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e023      	b.n	8005e90 <HAL_LTDC_ProgramLineEvent+0x60>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005e68:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40016800 	.word	0x40016800

08005ea0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	0c1b      	lsrs	r3, r3, #16
 8005eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebc:	4413      	add	r3, r2
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	01db      	lsls	r3, r3, #7
 8005ecc:	4413      	add	r3, r2
 8005ece:	3384      	adds	r3, #132	; 0x84
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	01d2      	lsls	r2, r2, #7
 8005edc:	440a      	add	r2, r1
 8005ede:	3284      	adds	r2, #132	; 0x84
 8005ee0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ee4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef6:	4413      	add	r3, r2
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4619      	mov	r1, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	440b      	add	r3, r1
 8005f06:	3384      	adds	r3, #132	; 0x84
 8005f08:	4619      	mov	r1, r3
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f1e:	4413      	add	r3, r2
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	01db      	lsls	r3, r3, #7
 8005f2e:	4413      	add	r3, r2
 8005f30:	3384      	adds	r3, #132	; 0x84
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	01d2      	lsls	r2, r2, #7
 8005f3e:	440a      	add	r2, r1
 8005f40:	3284      	adds	r2, #132	; 0x84
 8005f42:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f46:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f56:	4413      	add	r3, r2
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	01db      	lsls	r3, r3, #7
 8005f64:	440b      	add	r3, r1
 8005f66:	3384      	adds	r3, #132	; 0x84
 8005f68:	4619      	mov	r1, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	01db      	lsls	r3, r3, #7
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3384      	adds	r3, #132	; 0x84
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	4611      	mov	r1, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	01d2      	lsls	r2, r2, #7
 8005f8a:	440a      	add	r2, r1
 8005f8c:	3284      	adds	r2, #132	; 0x84
 8005f8e:	f023 0307 	bic.w	r3, r3, #7
 8005f92:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	01db      	lsls	r3, r3, #7
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3384      	adds	r3, #132	; 0x84
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	01db      	lsls	r3, r3, #7
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3384      	adds	r3, #132	; 0x84
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3384      	adds	r3, #132	; 0x84
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4619      	mov	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	01db      	lsls	r3, r3, #7
 8006004:	440b      	add	r3, r1
 8006006:	3384      	adds	r3, #132	; 0x84
 8006008:	4619      	mov	r1, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	01db      	lsls	r3, r3, #7
 800601a:	4413      	add	r3, r2
 800601c:	3384      	adds	r3, #132	; 0x84
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	4611      	mov	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	01d2      	lsls	r2, r2, #7
 800602a:	440a      	add	r2, r1
 800602c:	3284      	adds	r2, #132	; 0x84
 800602e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006032:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	01db      	lsls	r3, r3, #7
 800603e:	4413      	add	r3, r2
 8006040:	3384      	adds	r3, #132	; 0x84
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	4413      	add	r3, r2
 8006056:	3384      	adds	r3, #132	; 0x84
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	440b      	add	r3, r1
 8006066:	3384      	adds	r3, #132	; 0x84
 8006068:	4619      	mov	r1, r3
 800606a:	4b58      	ldr	r3, [pc, #352]	; (80061cc <LTDC_SetConfig+0x32c>)
 800606c:	4013      	ands	r3, r2
 800606e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	6809      	ldr	r1, [r1, #0]
 800607c:	4608      	mov	r0, r1
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	01c9      	lsls	r1, r1, #7
 8006082:	4401      	add	r1, r0
 8006084:	3184      	adds	r1, #132	; 0x84
 8006086:	4313      	orrs	r3, r2
 8006088:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	01db      	lsls	r3, r3, #7
 8006094:	4413      	add	r3, r2
 8006096:	3384      	adds	r3, #132	; 0x84
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	01db      	lsls	r3, r3, #7
 80060a4:	4413      	add	r3, r2
 80060a6:	3384      	adds	r3, #132	; 0x84
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	01db      	lsls	r3, r3, #7
 80060b8:	4413      	add	r3, r2
 80060ba:	3384      	adds	r3, #132	; 0x84
 80060bc:	461a      	mov	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80060cc:	2304      	movs	r3, #4
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e01b      	b.n	800610a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80060da:	2303      	movs	r3, #3
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e014      	b.n	800610a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d00b      	beq.n	8006100 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d007      	beq.n	8006100 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d003      	beq.n	8006100 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060fc:	2b07      	cmp	r3, #7
 80060fe:	d102      	bne.n	8006106 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006100:	2302      	movs	r3, #2
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e001      	b.n	800610a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006106:	2301      	movs	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	4413      	add	r3, r2
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	4611      	mov	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	01d2      	lsls	r2, r2, #7
 8006124:	440a      	add	r2, r1
 8006126:	3284      	adds	r2, #132	; 0x84
 8006128:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800612c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	041a      	lsls	r2, r3, #16
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1acb      	subs	r3, r1, r3
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	3303      	adds	r3, #3
 800614c:	68f9      	ldr	r1, [r7, #12]
 800614e:	6809      	ldr	r1, [r1, #0]
 8006150:	4608      	mov	r0, r1
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	01c9      	lsls	r1, r1, #7
 8006156:	4401      	add	r1, r0
 8006158:	3184      	adds	r1, #132	; 0x84
 800615a:	4313      	orrs	r3, r2
 800615c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	01db      	lsls	r3, r3, #7
 8006168:	4413      	add	r3, r2
 800616a:	3384      	adds	r3, #132	; 0x84
 800616c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	440b      	add	r3, r1
 800617a:	3384      	adds	r3, #132	; 0x84
 800617c:	4619      	mov	r1, r3
 800617e:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <LTDC_SetConfig+0x330>)
 8006180:	4013      	ands	r3, r2
 8006182:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	4413      	add	r3, r2
 8006190:	3384      	adds	r3, #132	; 0x84
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	3384      	adds	r3, #132	; 0x84
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	4611      	mov	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	01d2      	lsls	r2, r2, #7
 80061b4:	440a      	add	r2, r1
 80061b6:	3284      	adds	r2, #132	; 0x84
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6013      	str	r3, [r2, #0]
}
 80061be:	bf00      	nop
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	fffff8f8 	.word	0xfffff8f8
 80061d0:	fffff800 	.word	0xfffff800

080061d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e2:	6013      	str	r3, [r2, #0]
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40007000 	.word	0x40007000

080061f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061fe:	4b23      	ldr	r3, [pc, #140]	; (800628c <HAL_PWREx_EnableOverDrive+0x98>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	4a22      	ldr	r2, [pc, #136]	; (800628c <HAL_PWREx_EnableOverDrive+0x98>)
 8006204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006208:	6413      	str	r3, [r2, #64]	; 0x40
 800620a:	4b20      	ldr	r3, [pc, #128]	; (800628c <HAL_PWREx_EnableOverDrive+0x98>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006216:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800621c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006220:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006222:	f7fd fb17 	bl	8003854 <HAL_GetTick>
 8006226:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006228:	e009      	b.n	800623e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800622a:	f7fd fb13 	bl	8003854 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006238:	d901      	bls.n	800623e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e022      	b.n	8006284 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624a:	d1ee      	bne.n	800622a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800624c:	4b10      	ldr	r3, [pc, #64]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006256:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006258:	f7fd fafc 	bl	8003854 <HAL_GetTick>
 800625c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800625e:	e009      	b.n	8006274 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006260:	f7fd faf8 	bl	8003854 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626e:	d901      	bls.n	8006274 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e007      	b.n	8006284 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006280:	d1ee      	bne.n	8006260 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	40007000 	.word	0x40007000

08006294 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800629c:	f7fd fada 	bl	8003854 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e067      	b.n	800637c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10b      	bne.n	80062d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fc fc6d 	bl	8002ba0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80062c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f85e 	bl	800638c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	021a      	lsls	r2, r3, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	2120      	movs	r1, #32
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f856 	bl	80063a8 <QSPI_WaitFlagStateUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d135      	bne.n	8006372 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <HAL_QSPI_Init+0xf0>)
 800630e:	4013      	ands	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6852      	ldr	r2, [r2, #4]
 8006314:	0611      	lsls	r1, r2, #24
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68d2      	ldr	r2, [r2, #12]
 800631a:	4311      	orrs	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	69d2      	ldr	r2, [r2, #28]
 8006320:	4311      	orrs	r1, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6a12      	ldr	r2, [r2, #32]
 8006326:	4311      	orrs	r1, r2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	430b      	orrs	r3, r1
 800632e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <HAL_QSPI_Init+0xf4>)
 8006338:	4013      	ands	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6912      	ldr	r2, [r2, #16]
 800633e:	0411      	lsls	r1, r2, #16
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6952      	ldr	r2, [r2, #20]
 8006344:	4311      	orrs	r1, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6992      	ldr	r2, [r2, #24]
 800634a:	4311      	orrs	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	430b      	orrs	r3, r1
 8006352:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800637a:	7afb      	ldrb	r3, [r7, #11]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	00ffff2f 	.word	0x00ffff2f
 8006388:	ffe0f8fe 	.word	0xffe0f8fe

0800638c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063b8:	e01a      	b.n	80063f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d016      	beq.n	80063f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fd fa47 	bl	8003854 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2204      	movs	r2, #4
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	f043 0201 	orr.w	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e00e      	b.n	800640e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf14      	ite	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	2300      	moveq	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	429a      	cmp	r2, r3
 800640a:	d1d6      	bne.n	80063ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e291      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8087 	beq.w	800654a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800643c:	4b96      	ldr	r3, [pc, #600]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
 8006444:	2b04      	cmp	r3, #4
 8006446:	d00c      	beq.n	8006462 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006448:	4b93      	ldr	r3, [pc, #588]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b08      	cmp	r3, #8
 8006452:	d112      	bne.n	800647a <HAL_RCC_OscConfig+0x62>
 8006454:	4b90      	ldr	r3, [pc, #576]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006460:	d10b      	bne.n	800647a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006462:	4b8d      	ldr	r3, [pc, #564]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d06c      	beq.n	8006548 <HAL_RCC_OscConfig+0x130>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d168      	bne.n	8006548 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e26b      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006482:	d106      	bne.n	8006492 <HAL_RCC_OscConfig+0x7a>
 8006484:	4b84      	ldr	r3, [pc, #528]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a83      	ldr	r2, [pc, #524]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 800648a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e02e      	b.n	80064f0 <HAL_RCC_OscConfig+0xd8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x9c>
 800649a:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7e      	ldr	r2, [pc, #504]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b7c      	ldr	r3, [pc, #496]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a7b      	ldr	r2, [pc, #492]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e01d      	b.n	80064f0 <HAL_RCC_OscConfig+0xd8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCC_OscConfig+0xc0>
 80064be:	4b76      	ldr	r3, [pc, #472]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a75      	ldr	r2, [pc, #468]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4b73      	ldr	r3, [pc, #460]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a72      	ldr	r2, [pc, #456]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e00b      	b.n	80064f0 <HAL_RCC_OscConfig+0xd8>
 80064d8:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a6e      	ldr	r2, [pc, #440]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	4b6c      	ldr	r3, [pc, #432]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a6b      	ldr	r2, [pc, #428]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80064ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d013      	beq.n	8006520 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fd f9ac 	bl	8003854 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006500:	f7fd f9a8 	bl	8003854 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	; 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e21f      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006512:	4b61      	ldr	r3, [pc, #388]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f0      	beq.n	8006500 <HAL_RCC_OscConfig+0xe8>
 800651e:	e014      	b.n	800654a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fd f998 	bl	8003854 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006528:	f7fd f994 	bl	8003854 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e20b      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653a:	4b57      	ldr	r3, [pc, #348]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x110>
 8006546:	e000      	b.n	800654a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d069      	beq.n	800662a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006556:	4b50      	ldr	r3, [pc, #320]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 030c 	and.w	r3, r3, #12
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006562:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b08      	cmp	r3, #8
 800656c:	d11c      	bne.n	80065a8 <HAL_RCC_OscConfig+0x190>
 800656e:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d116      	bne.n	80065a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657a:	4b47      	ldr	r3, [pc, #284]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_RCC_OscConfig+0x17a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d001      	beq.n	8006592 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e1df      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006592:	4b41      	ldr	r3, [pc, #260]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	493d      	ldr	r1, [pc, #244]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a6:	e040      	b.n	800662a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d023      	beq.n	80065f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b0:	4b39      	ldr	r3, [pc, #228]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a38      	ldr	r2, [pc, #224]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fd f94a 	bl	8003854 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c4:	f7fd f946 	bl	8003854 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e1bd      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d6:	4b30      	ldr	r3, [pc, #192]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e2:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4929      	ldr	r1, [pc, #164]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	600b      	str	r3, [r1, #0]
 80065f6:	e018      	b.n	800662a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065f8:	4b27      	ldr	r3, [pc, #156]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a26      	ldr	r2, [pc, #152]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 80065fe:	f023 0301 	bic.w	r3, r3, #1
 8006602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006604:	f7fd f926 	bl	8003854 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660c:	f7fd f922 	bl	8003854 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e199      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661e:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f0      	bne.n	800660c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d038      	beq.n	80066a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d019      	beq.n	8006672 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800663e:	4b16      	ldr	r3, [pc, #88]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664a:	f7fd f903 	bl	8003854 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006652:	f7fd f8ff 	bl	8003854 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e176      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x23a>
 8006670:	e01a      	b.n	80066a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006676:	4a08      	ldr	r2, [pc, #32]	; (8006698 <HAL_RCC_OscConfig+0x280>)
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fd f8e9 	bl	8003854 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006684:	e00a      	b.n	800669c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006686:	f7fd f8e5 	bl	8003854 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d903      	bls.n	800669c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e15c      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
 8006698:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800669c:	4b91      	ldr	r3, [pc, #580]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800669e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1ee      	bne.n	8006686 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80a4 	beq.w	80067fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066b6:	4b8b      	ldr	r3, [pc, #556]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c2:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	4a87      	ldr	r2, [pc, #540]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80066c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066cc:	6413      	str	r3, [r2, #64]	; 0x40
 80066ce:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066da:	2301      	movs	r3, #1
 80066dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066de:	4b82      	ldr	r3, [pc, #520]	; (80068e8 <HAL_RCC_OscConfig+0x4d0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d118      	bne.n	800671c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066ea:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <HAL_RCC_OscConfig+0x4d0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7e      	ldr	r2, [pc, #504]	; (80068e8 <HAL_RCC_OscConfig+0x4d0>)
 80066f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066f6:	f7fd f8ad 	bl	8003854 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fe:	f7fd f8a9 	bl	8003854 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b64      	cmp	r3, #100	; 0x64
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e120      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006710:	4b75      	ldr	r3, [pc, #468]	; (80068e8 <HAL_RCC_OscConfig+0x4d0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d106      	bne.n	8006732 <HAL_RCC_OscConfig+0x31a>
 8006724:	4b6f      	ldr	r3, [pc, #444]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	4a6e      	ldr	r2, [pc, #440]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	6713      	str	r3, [r2, #112]	; 0x70
 8006730:	e02d      	b.n	800678e <HAL_RCC_OscConfig+0x376>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10c      	bne.n	8006754 <HAL_RCC_OscConfig+0x33c>
 800673a:	4b6a      	ldr	r3, [pc, #424]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673e:	4a69      	ldr	r2, [pc, #420]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	6713      	str	r3, [r2, #112]	; 0x70
 8006746:	4b67      	ldr	r3, [pc, #412]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	4a66      	ldr	r2, [pc, #408]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800674c:	f023 0304 	bic.w	r3, r3, #4
 8006750:	6713      	str	r3, [r2, #112]	; 0x70
 8006752:	e01c      	b.n	800678e <HAL_RCC_OscConfig+0x376>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b05      	cmp	r3, #5
 800675a:	d10c      	bne.n	8006776 <HAL_RCC_OscConfig+0x35e>
 800675c:	4b61      	ldr	r3, [pc, #388]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4a60      	ldr	r2, [pc, #384]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006762:	f043 0304 	orr.w	r3, r3, #4
 8006766:	6713      	str	r3, [r2, #112]	; 0x70
 8006768:	4b5e      	ldr	r3, [pc, #376]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676c:	4a5d      	ldr	r2, [pc, #372]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	6713      	str	r3, [r2, #112]	; 0x70
 8006774:	e00b      	b.n	800678e <HAL_RCC_OscConfig+0x376>
 8006776:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	4a5a      	ldr	r2, [pc, #360]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	6713      	str	r3, [r2, #112]	; 0x70
 8006782:	4b58      	ldr	r3, [pc, #352]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	4a57      	ldr	r2, [pc, #348]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006788:	f023 0304 	bic.w	r3, r3, #4
 800678c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d015      	beq.n	80067c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006796:	f7fd f85d 	bl	8003854 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fd f859 	bl	8003854 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e0ce      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b4:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ee      	beq.n	800679e <HAL_RCC_OscConfig+0x386>
 80067c0:	e014      	b.n	80067ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c2:	f7fd f847 	bl	8003854 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067c8:	e00a      	b.n	80067e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fd f843 	bl	8003854 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e0b8      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e0:	4b40      	ldr	r3, [pc, #256]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1ee      	bne.n	80067ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d105      	bne.n	80067fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f2:	4b3c      	ldr	r3, [pc, #240]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	4a3b      	ldr	r2, [pc, #236]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80067f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80a4 	beq.w	8006950 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006808:	4b36      	ldr	r3, [pc, #216]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b08      	cmp	r3, #8
 8006812:	d06b      	beq.n	80068ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d149      	bne.n	80068b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681c:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a30      	ldr	r2, [pc, #192]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fd f814 	bl	8003854 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006830:	f7fd f810 	bl	8003854 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e087      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006842:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	3b01      	subs	r3, #1
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	061b      	lsls	r3, r3, #24
 8006872:	4313      	orrs	r3, r2
 8006874:	4a1b      	ldr	r2, [pc, #108]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006876:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800687a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 8006882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fc ffe4 	bl	8003854 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006890:	f7fc ffe0 	bl	8003854 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e057      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x478>
 80068ae:	e04f      	b.n	8006950 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a0b      	ldr	r2, [pc, #44]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fc ffca 	bl	8003854 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fc ffc6 	bl	8003854 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e03d      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d6:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <HAL_RCC_OscConfig+0x4cc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4ac>
 80068e2:	e035      	b.n	8006950 <HAL_RCC_OscConfig+0x538>
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <HAL_RCC_OscConfig+0x544>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d028      	beq.n	800694c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006904:	429a      	cmp	r2, r3
 8006906:	d121      	bne.n	800694c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006912:	429a      	cmp	r2, r3
 8006914:	d11a      	bne.n	800694c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800691c:	4013      	ands	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006922:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006924:	4293      	cmp	r3, r2
 8006926:	d111      	bne.n	800694c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	085b      	lsrs	r3, r3, #1
 8006934:	3b01      	subs	r3, #1
 8006936:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006938:	429a      	cmp	r2, r3
 800693a:	d107      	bne.n	800694c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006948:	429a      	cmp	r2, r3
 800694a:	d001      	beq.n	8006950 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800

08006960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e0d0      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006978:	4b6a      	ldr	r3, [pc, #424]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d910      	bls.n	80069a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006986:	4b67      	ldr	r3, [pc, #412]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f023 020f 	bic.w	r2, r3, #15
 800698e:	4965      	ldr	r1, [pc, #404]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	4313      	orrs	r3, r2
 8006994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006996:	4b63      	ldr	r3, [pc, #396]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0b8      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d020      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c0:	4b59      	ldr	r3, [pc, #356]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	4a58      	ldr	r2, [pc, #352]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 80069c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069d8:	4b53      	ldr	r3, [pc, #332]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4a52      	ldr	r2, [pc, #328]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 80069de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e4:	4b50      	ldr	r3, [pc, #320]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	494d      	ldr	r1, [pc, #308]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d040      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d107      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	4b47      	ldr	r3, [pc, #284]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d115      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07f      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a22:	4b41      	ldr	r3, [pc, #260]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e073      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a32:	4b3d      	ldr	r3, [pc, #244]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e06b      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a42:	4b39      	ldr	r3, [pc, #228]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 0203 	bic.w	r2, r3, #3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4936      	ldr	r1, [pc, #216]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a54:	f7fc fefe 	bl	8003854 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a5c:	f7fc fefa 	bl	8003854 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e053      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a72:	4b2d      	ldr	r3, [pc, #180]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 020c 	and.w	r2, r3, #12
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1eb      	bne.n	8006a5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a84:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d210      	bcs.n	8006ab4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 020f 	bic.w	r2, r3, #15
 8006a9a:	4922      	ldr	r1, [pc, #136]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa2:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d001      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e032      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac0:	4b19      	ldr	r3, [pc, #100]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	4916      	ldr	r1, [pc, #88]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	490e      	ldr	r1, [pc, #56]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006af2:	f000 f821 	bl	8006b38 <HAL_RCC_GetSysClockFreq>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	490a      	ldr	r1, [pc, #40]	; (8006b2c <HAL_RCC_ClockConfig+0x1cc>)
 8006b04:	5ccb      	ldrb	r3, [r1, r3]
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <HAL_RCC_ClockConfig+0x1d0>)
 8006b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RCC_ClockConfig+0x1d4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fc fce8 	bl	80034e8 <HAL_InitTick>

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40023c00 	.word	0x40023c00
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	080269b0 	.word	0x080269b0
 8006b30:	20000018 	.word	0x20000018
 8006b34:	2000001c 	.word	0x2000001c

08006b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b3c:	b090      	sub	sp, #64	; 0x40
 8006b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
 8006b44:	2300      	movs	r3, #0
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b48:	2300      	movs	r3, #0
 8006b4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b50:	4b59      	ldr	r3, [pc, #356]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 030c 	and.w	r3, r3, #12
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d00d      	beq.n	8006b78 <HAL_RCC_GetSysClockFreq+0x40>
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	f200 80a1 	bhi.w	8006ca4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq+0x34>
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d003      	beq.n	8006b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b6a:	e09b      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b6c:	4b53      	ldr	r3, [pc, #332]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x184>)
 8006b6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b70:	e09b      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b72:	4b53      	ldr	r3, [pc, #332]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b76:	e098      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b78:	4b4f      	ldr	r3, [pc, #316]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b82:	4b4d      	ldr	r3, [pc, #308]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d028      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b8e:	4b4a      	ldr	r3, [pc, #296]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	099b      	lsrs	r3, r3, #6
 8006b94:	2200      	movs	r2, #0
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	627a      	str	r2, [r7, #36]	; 0x24
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4b47      	ldr	r3, [pc, #284]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ba4:	fb03 f201 	mul.w	r2, r3, r1
 8006ba8:	2300      	movs	r3, #0
 8006baa:	fb00 f303 	mul.w	r3, r0, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	4a43      	ldr	r2, [pc, #268]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006bb2:	fba0 1202 	umull	r1, r2, r0, r2
 8006bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb8:	460a      	mov	r2, r1
 8006bba:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbe:	4413      	add	r3, r2
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	61fa      	str	r2, [r7, #28]
 8006bca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006bd2:	f7f9 fe01 	bl	80007d8 <__aeabi_uldivmod>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4613      	mov	r3, r2
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bde:	e053      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be0:	4b35      	ldr	r3, [pc, #212]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	099b      	lsrs	r3, r3, #6
 8006be6:	2200      	movs	r2, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	617a      	str	r2, [r7, #20]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006bf2:	f04f 0b00 	mov.w	fp, #0
 8006bf6:	4652      	mov	r2, sl
 8006bf8:	465b      	mov	r3, fp
 8006bfa:	f04f 0000 	mov.w	r0, #0
 8006bfe:	f04f 0100 	mov.w	r1, #0
 8006c02:	0159      	lsls	r1, r3, #5
 8006c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c08:	0150      	lsls	r0, r2, #5
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	ebb2 080a 	subs.w	r8, r2, sl
 8006c12:	eb63 090b 	sbc.w	r9, r3, fp
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006c22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006c26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006c2a:	ebb2 0408 	subs.w	r4, r2, r8
 8006c2e:	eb63 0509 	sbc.w	r5, r3, r9
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	00eb      	lsls	r3, r5, #3
 8006c3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c40:	00e2      	lsls	r2, r4, #3
 8006c42:	4614      	mov	r4, r2
 8006c44:	461d      	mov	r5, r3
 8006c46:	eb14 030a 	adds.w	r3, r4, sl
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	eb45 030b 	adc.w	r3, r5, fp
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c5e:	4629      	mov	r1, r5
 8006c60:	028b      	lsls	r3, r1, #10
 8006c62:	4621      	mov	r1, r4
 8006c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c68:	4621      	mov	r1, r4
 8006c6a:	028a      	lsls	r2, r1, #10
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	2200      	movs	r2, #0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	60fa      	str	r2, [r7, #12]
 8006c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c7c:	f7f9 fdac 	bl	80007d8 <__aeabi_uldivmod>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4613      	mov	r3, r2
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	0c1b      	lsrs	r3, r3, #16
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	3301      	adds	r3, #1
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ca2:	e002      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x184>)
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3740      	adds	r7, #64	; 0x40
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	00f42400 	.word	0x00f42400
 8006cc0:	017d7840 	.word	0x017d7840

08006cc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc8:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cca:	681b      	ldr	r3, [r3, #0]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000018 	.word	0x20000018

08006cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ce0:	f7ff fff0 	bl	8006cc4 <HAL_RCC_GetHCLKFreq>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	0a9b      	lsrs	r3, r3, #10
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	4903      	ldr	r1, [pc, #12]	; (8006d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf2:	5ccb      	ldrb	r3, [r1, r3]
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	080269c0 	.word	0x080269c0

08006d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d08:	f7ff ffdc 	bl	8006cc4 <HAL_RCC_GetHCLKFreq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	0b5b      	lsrs	r3, r3, #13
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	4903      	ldr	r1, [pc, #12]	; (8006d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d1a:	5ccb      	ldrb	r3, [r1, r3]
 8006d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40023800 	.word	0x40023800
 8006d28:	080269c0 	.word	0x080269c0

08006d2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	220f      	movs	r2, #15
 8006d3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d3c:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <HAL_RCC_GetClockConfig+0x5c>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0203 	and.w	r2, r3, #3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d48:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <HAL_RCC_GetClockConfig+0x5c>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <HAL_RCC_GetClockConfig+0x5c>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006d60:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <HAL_RCC_GetClockConfig+0x5c>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	08db      	lsrs	r3, r3, #3
 8006d66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d6e:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <HAL_RCC_GetClockConfig+0x60>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 020f 	and.w	r2, r3, #15
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40023c00 	.word	0x40023c00

08006d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d012      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006db8:	4b69      	ldr	r3, [pc, #420]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	4a68      	ldr	r2, [pc, #416]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dc2:	6093      	str	r3, [r2, #8]
 8006dc4:	4b66      	ldr	r3, [pc, #408]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dcc:	4964      	ldr	r1, [pc, #400]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dea:	4b5d      	ldr	r3, [pc, #372]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df8:	4959      	ldr	r1, [pc, #356]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e26:	4b4e      	ldr	r3, [pc, #312]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	494a      	ldr	r1, [pc, #296]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e44:	d101      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e62:	2301      	movs	r3, #1
 8006e64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 808b 	beq.w	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e74:	4b3a      	ldr	r3, [pc, #232]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	4a39      	ldr	r2, [pc, #228]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8006e80:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e8c:	4b35      	ldr	r3, [pc, #212]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a34      	ldr	r2, [pc, #208]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e98:	f7fc fcdc 	bl	8003854 <HAL_GetTick>
 8006e9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea0:	f7fc fcd8 	bl	8003854 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b64      	cmp	r3, #100	; 0x64
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e357      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006eb2:	4b2c      	ldr	r3, [pc, #176]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ebe:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d035      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d02e      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006edc:	4b20      	ldr	r3, [pc, #128]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d114      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f10:	f7fc fca0 	bl	8003854 <HAL_GetTick>
 8006f14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f16:	e00a      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f18:	f7fc fc9c 	bl	8003854 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e319      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0ee      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f46:	d111      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f56:	400b      	ands	r3, r1
 8006f58:	4901      	ldr	r1, [pc, #4]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	608b      	str	r3, [r1, #8]
 8006f5e:	e00b      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40007000 	.word	0x40007000
 8006f68:	0ffffcff 	.word	0x0ffffcff
 8006f6c:	4baa      	ldr	r3, [pc, #680]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	4aa9      	ldr	r2, [pc, #676]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f76:	6093      	str	r3, [r2, #8]
 8006f78:	4ba7      	ldr	r3, [pc, #668]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f84:	49a4      	ldr	r1, [pc, #656]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d010      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f96:	4ba0      	ldr	r3, [pc, #640]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9c:	4a9e      	ldr	r2, [pc, #632]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fa6:	4b9c      	ldr	r3, [pc, #624]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	4999      	ldr	r1, [pc, #612]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fc4:	4b94      	ldr	r3, [pc, #592]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd2:	4991      	ldr	r1, [pc, #580]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fe6:	4b8c      	ldr	r3, [pc, #560]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff4:	4988      	ldr	r1, [pc, #544]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007008:	4b83      	ldr	r3, [pc, #524]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	4980      	ldr	r1, [pc, #512]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800702a:	4b7b      	ldr	r3, [pc, #492]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007038:	4977      	ldr	r1, [pc, #476]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800704c:	4b72      	ldr	r3, [pc, #456]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f023 0203 	bic.w	r2, r3, #3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	496f      	ldr	r1, [pc, #444]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800706e:	4b6a      	ldr	r3, [pc, #424]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007074:	f023 020c 	bic.w	r2, r3, #12
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707c:	4966      	ldr	r1, [pc, #408]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007090:	4b61      	ldr	r3, [pc, #388]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	495e      	ldr	r1, [pc, #376]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070b2:	4b59      	ldr	r3, [pc, #356]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	4955      	ldr	r1, [pc, #340]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070d4:	4b50      	ldr	r3, [pc, #320]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	494d      	ldr	r1, [pc, #308]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80070f6:	4b48      	ldr	r3, [pc, #288]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	4944      	ldr	r1, [pc, #272]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007118:	4b3f      	ldr	r3, [pc, #252]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007126:	493c      	ldr	r1, [pc, #240]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800713a:	4b37      	ldr	r3, [pc, #220]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007148:	4933      	ldr	r1, [pc, #204]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800715c:	4b2e      	ldr	r3, [pc, #184]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716a:	492b      	ldr	r1, [pc, #172]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d011      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800717e:	4b26      	ldr	r3, [pc, #152]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800718c:	4922      	ldr	r1, [pc, #136]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800719c:	d101      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071be:	4b16      	ldr	r3, [pc, #88]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071cc:	4912      	ldr	r1, [pc, #72]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f0:	4909      	ldr	r1, [pc, #36]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d005      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007206:	f040 80d9 	bne.w	80073bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a02      	ldr	r2, [pc, #8]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e001      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007218:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721c:	f7fc fb1a 	bl	8003854 <HAL_GetTick>
 8007220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007224:	f7fc fb16 	bl	8003854 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b64      	cmp	r3, #100	; 0x64
 8007230:	d901      	bls.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e195      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007236:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d021      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	2b00      	cmp	r3, #0
 8007254:	d11d      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007256:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007264:	4b61      	ldr	r3, [pc, #388]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726a:	0e1b      	lsrs	r3, r3, #24
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	019a      	lsls	r2, r3, #6
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	061b      	lsls	r3, r3, #24
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	071b      	lsls	r3, r3, #28
 800728a:	4958      	ldr	r1, [pc, #352]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d02e      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072bc:	d129      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072be:	4b4b      	ldr	r3, [pc, #300]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072cc:	4b47      	ldr	r3, [pc, #284]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d2:	0f1b      	lsrs	r3, r3, #28
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	019a      	lsls	r2, r3, #6
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	061b      	lsls	r3, r3, #24
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	071b      	lsls	r3, r3, #28
 80072f2:	493e      	ldr	r1, [pc, #248]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072fa:	4b3c      	ldr	r3, [pc, #240]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007300:	f023 021f 	bic.w	r2, r3, #31
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	3b01      	subs	r3, #1
 800730a:	4938      	ldr	r1, [pc, #224]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01d      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800731e:	4b33      	ldr	r3, [pc, #204]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007324:	0e1b      	lsrs	r3, r3, #24
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800732c:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007332:	0f1b      	lsrs	r3, r3, #28
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	019a      	lsls	r2, r3, #6
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	431a      	orrs	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	431a      	orrs	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	071b      	lsls	r3, r3, #28
 8007352:	4926      	ldr	r1, [pc, #152]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	019a      	lsls	r2, r3, #6
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	071b      	lsls	r3, r3, #28
 8007382:	491a      	ldr	r1, [pc, #104]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800738a:	4b18      	ldr	r3, [pc, #96]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a17      	ldr	r2, [pc, #92]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007396:	f7fc fa5d 	bl	8003854 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800739e:	f7fc fa59 	bl	8003854 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b64      	cmp	r3, #100	; 0x64
 80073aa:	d901      	bls.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e0d8      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073b0:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f0      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	f040 80ce 	bne.w	8007560 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a08      	ldr	r2, [pc, #32]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d0:	f7fc fa40 	bl	8003854 <HAL_GetTick>
 80073d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073d6:	e00b      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073d8:	f7fc fa3c 	bl	8003854 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b64      	cmp	r3, #100	; 0x64
 80073e4:	d904      	bls.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e0bb      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073f0:	4b5e      	ldr	r3, [pc, #376]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073fc:	d0ec      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800741a:	2b00      	cmp	r3, #0
 800741c:	d02e      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d12a      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007426:	4b51      	ldr	r3, [pc, #324]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007434:	4b4d      	ldr	r3, [pc, #308]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	0f1b      	lsrs	r3, r3, #28
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	019a      	lsls	r2, r3, #6
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	061b      	lsls	r3, r3, #24
 8007454:	431a      	orrs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	071b      	lsls	r3, r3, #28
 800745a:	4944      	ldr	r1, [pc, #272]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800745c:	4313      	orrs	r3, r2
 800745e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007462:	4b42      	ldr	r3, [pc, #264]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007468:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	3b01      	subs	r3, #1
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	493d      	ldr	r1, [pc, #244]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d022      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007490:	d11d      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007492:	4b36      	ldr	r3, [pc, #216]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007498:	0e1b      	lsrs	r3, r3, #24
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074a0:	4b32      	ldr	r3, [pc, #200]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a6:	0f1b      	lsrs	r3, r3, #28
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	019a      	lsls	r2, r3, #6
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	041b      	lsls	r3, r3, #16
 80074ba:	431a      	orrs	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	061b      	lsls	r3, r3, #24
 80074c0:	431a      	orrs	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	071b      	lsls	r3, r3, #28
 80074c6:	4929      	ldr	r1, [pc, #164]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d028      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074da:	4b24      	ldr	r3, [pc, #144]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	0e1b      	lsrs	r3, r3, #24
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074e8:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	019a      	lsls	r2, r3, #6
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	431a      	orrs	r2, r3
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	061b      	lsls	r3, r3, #24
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	4917      	ldr	r1, [pc, #92]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007516:	4b15      	ldr	r3, [pc, #84]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4911      	ldr	r1, [pc, #68]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a0e      	ldr	r2, [pc, #56]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007538:	f7fc f98c 	bl	8003854 <HAL_GetTick>
 800753c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007540:	f7fc f988 	bl	8003854 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	; 0x64
 800754c:	d901      	bls.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e007      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800755a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800755e:	d1ef      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40023800 	.word	0x40023800

08007570 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800758e:	f040 808d 	bne.w	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007592:	4b93      	ldr	r3, [pc, #588]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007598:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80075a0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a8:	d07c      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075b0:	d87b      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075be:	d039      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80075c0:	e073      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075c2:	4b87      	ldr	r3, [pc, #540]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d108      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075ce:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d6:	4a83      	ldr	r2, [pc, #524]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	e007      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80075e0:	4b7f      	ldr	r3, [pc, #508]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e8:	4a7f      	ldr	r2, [pc, #508]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80075f0:	4b7b      	ldr	r3, [pc, #492]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	0e1b      	lsrs	r3, r3, #24
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80075fe:	4b78      	ldr	r3, [pc, #480]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007604:	099b      	lsrs	r3, r3, #6
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	fb03 f202 	mul.w	r2, r3, r2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	fbb2 f3f3 	udiv	r3, r2, r3
 8007616:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007618:	4b71      	ldr	r3, [pc, #452]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800761a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	3301      	adds	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	617b      	str	r3, [r7, #20]
        break;
 8007632:	e03b      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007634:	4b6a      	ldr	r3, [pc, #424]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d108      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007640:	4b67      	ldr	r3, [pc, #412]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007648:	4a66      	ldr	r2, [pc, #408]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	e007      	b.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007652:	4b63      	ldr	r3, [pc, #396]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800765a:	4a63      	ldr	r2, [pc, #396]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007662:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007670:	4b5b      	ldr	r3, [pc, #364]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	fb03 f202 	mul.w	r2, r3, r2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	fbb2 f3f3 	udiv	r3, r2, r3
 8007688:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800768a:	4b55      	ldr	r3, [pc, #340]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800768c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	617b      	str	r3, [r7, #20]
        break;
 80076a2:	e003      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80076a4:	4b51      	ldr	r3, [pc, #324]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80076a6:	617b      	str	r3, [r7, #20]
        break;
 80076a8:	e000      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80076aa:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076b2:	f040 808d 	bne.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80076b6:	4b4a      	ldr	r3, [pc, #296]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80076c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076cc:	d07c      	beq.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d4:	d87b      	bhi.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e2:	d039      	beq.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80076e4:	e073      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076e6:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d108      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076f2:	4b3b      	ldr	r3, [pc, #236]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076fa:	4a3a      	ldr	r2, [pc, #232]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	613b      	str	r3, [r7, #16]
 8007702:	e007      	b.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007704:	4b36      	ldr	r3, [pc, #216]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770c:	4a36      	ldr	r2, [pc, #216]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007714:	4b32      	ldr	r3, [pc, #200]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	0e1b      	lsrs	r3, r3, #24
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007722:	4b2f      	ldr	r3, [pc, #188]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007728:	099b      	lsrs	r3, r3, #6
 800772a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	fb03 f202 	mul.w	r2, r3, r2
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	fbb2 f3f3 	udiv	r3, r2, r3
 800773a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800773e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	617b      	str	r3, [r7, #20]
        break;
 8007756:	e03b      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007758:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800776c:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800776e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	e007      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800777e:	4a1a      	ldr	r2, [pc, #104]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007780:	fbb2 f3f3 	udiv	r3, r2, r3
 8007784:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007786:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778c:	0e1b      	lsrs	r3, r3, #24
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779a:	099b      	lsrs	r3, r3, #6
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	fb03 f202 	mul.w	r2, r3, r2
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	617b      	str	r3, [r7, #20]
        break;
 80077c6:	e003      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80077c8:	4b08      	ldr	r3, [pc, #32]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80077ca:	617b      	str	r3, [r7, #20]
        break;
 80077cc:	e000      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80077ce:	bf00      	nop
      }
    }
  }

  return frequency;
 80077d0:	697b      	ldr	r3, [r7, #20]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	00f42400 	.word	0x00f42400
 80077e8:	017d7840 	.word	0x017d7840
 80077ec:	00bb8000 	.word	0x00bb8000

080077f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e06b      	b.n	80078da <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	7f5b      	ldrb	r3, [r3, #29]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fb fa54 	bl	8002cc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	22ca      	movs	r2, #202	; 0xca
 8007824:	625a      	str	r2, [r3, #36]	; 0x24
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2253      	movs	r2, #83	; 0x53
 800782c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb00 	bl	8007e34 <RTC_EnterInitMode>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d008      	beq.n	800784c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e046      	b.n	80078da <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6899      	ldr	r1, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	4b23      	ldr	r3, [pc, #140]	; (80078e4 <HAL_RTC_Init+0xf4>)
 8007858:	400b      	ands	r3, r1
 800785a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6899      	ldr	r1, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68d2      	ldr	r2, [r2, #12]
 8007882:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6919      	ldr	r1, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	041a      	lsls	r2, r3, #16
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078a6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0208 	bic.w	r2, r2, #8
 80078b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	22ff      	movs	r2, #255	; 0xff
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80078d8:	2300      	movs	r3, #0
  }
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	ff8fffbf 	.word	0xff8fffbf

080078e8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	7f1b      	ldrb	r3, [r3, #28]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_RTC_SetTime+0x1c>
 8007900:	2302      	movs	r3, #2
 8007902:	e0a8      	b.n	8007a56 <HAL_RTC_SetTime+0x16e>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2202      	movs	r2, #2
 800790e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d126      	bne.n	8007964 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2200      	movs	r2, #0
 8007928:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 faac 	bl	8007e8c <RTC_ByteToBcd2>
 8007934:	4603      	mov	r3, r0
 8007936:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 faa5 	bl	8007e8c <RTC_ByteToBcd2>
 8007942:	4603      	mov	r3, r0
 8007944:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007946:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	789b      	ldrb	r3, [r3, #2]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fa9d 	bl	8007e8c <RTC_ByteToBcd2>
 8007952:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007954:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	7b1b      	ldrb	r3, [r3, #12]
 800795c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e018      	b.n	8007996 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	785b      	ldrb	r3, [r3, #1]
 8007982:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007984:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800798a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	7b1b      	ldrb	r3, [r3, #12]
 8007990:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	22ca      	movs	r2, #202	; 0xca
 800799c:	625a      	str	r2, [r3, #36]	; 0x24
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2253      	movs	r2, #83	; 0x53
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fa44 	bl	8007e34 <RTC_EnterInitMode>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	22ff      	movs	r2, #255	; 0xff
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2204      	movs	r2, #4
 80079be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e045      	b.n	8007a56 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <HAL_RTC_SetTime+0x178>)
 80079d2:	400b      	ands	r3, r1
 80079d4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6899      	ldr	r1, [r3, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	431a      	orrs	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d111      	bne.n	8007a40 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f9e1 	bl	8007de4 <HAL_RTC_WaitForSynchro>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	22ff      	movs	r2, #255	; 0xff
 8007a2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2204      	movs	r2, #4
 8007a34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e00a      	b.n	8007a56 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007a54:	2300      	movs	r3, #0
  }
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd90      	pop	{r4, r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	007f7f7f 	.word	0x007f7f7f

08007a64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a64:	b590      	push	{r4, r7, lr}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	7f1b      	ldrb	r3, [r3, #28]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_RTC_SetDate+0x1c>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e092      	b.n	8007ba6 <HAL_RTC_SetDate+0x142>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10e      	bne.n	8007ab0 <HAL_RTC_SetDate+0x4c>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	f003 0310 	and.w	r3, r3, #16
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	f023 0310 	bic.w	r3, r3, #16
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	330a      	adds	r3, #10
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d11c      	bne.n	8007af0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	78db      	ldrb	r3, [r3, #3]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f9e6 	bl	8007e8c <RTC_ByteToBcd2>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 f9df 	bl	8007e8c <RTC_ByteToBcd2>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ad2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	789b      	ldrb	r3, [r3, #2]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f9d7 	bl	8007e8c <RTC_ByteToBcd2>
 8007ade:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ae0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e00e      	b.n	8007b0e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	78db      	ldrb	r3, [r3, #3]
 8007af4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007afc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007b02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	22ca      	movs	r2, #202	; 0xca
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2253      	movs	r2, #83	; 0x53
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f988 	bl	8007e34 <RTC_EnterInitMode>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	22ff      	movs	r2, #255	; 0xff
 8007b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2204      	movs	r2, #4
 8007b36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e031      	b.n	8007ba6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	4b19      	ldr	r3, [pc, #100]	; (8007bb0 <HAL_RTC_SetDate+0x14c>)
 8007b4a:	400b      	ands	r3, r1
 8007b4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d111      	bne.n	8007b90 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f939 	bl	8007de4 <HAL_RTC_WaitForSynchro>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	22ff      	movs	r2, #255	; 0xff
 8007b7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2204      	movs	r2, #4
 8007b84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e00a      	b.n	8007ba6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd90      	pop	{r4, r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	00ffff3f 	.word	0x00ffff3f

08007bb4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b089      	sub	sp, #36	; 0x24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	7f1b      	ldrb	r3, [r3, #28]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_RTC_SetAlarm+0x24>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e101      	b.n	8007ddc <HAL_RTC_SetAlarm+0x228>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2202      	movs	r2, #2
 8007be2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d137      	bne.n	8007c5a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f942 	bl	8007e8c <RTC_ByteToBcd2>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 f93b 	bl	8007e8c <RTC_ByteToBcd2>
 8007c16:	4603      	mov	r3, r0
 8007c18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c1a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	789b      	ldrb	r3, [r3, #2]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f933 	bl	8007e8c <RTC_ByteToBcd2>
 8007c26:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c28:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	7b1b      	ldrb	r3, [r3, #12]
 8007c30:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c32:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f925 	bl	8007e8c <RTC_ByteToBcd2>
 8007c42:	4603      	mov	r3, r0
 8007c44:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c46:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	e023      	b.n	8007ca2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c7a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	7b1b      	ldrb	r3, [r3, #12]
 8007c86:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c88:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c90:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	22ca      	movs	r2, #202	; 0xca
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2253      	movs	r2, #83	; 0x53
 8007cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc6:	d13f      	bne.n	8007d48 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cd6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ce6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ce8:	f7fb fdb4 	bl	8003854 <HAL_GetTick>
 8007cec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007cee:	e013      	b.n	8007d18 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007cf0:	f7fb fdb0 	bl	8003854 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cfe:	d90b      	bls.n	8007d18 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	22ff      	movs	r2, #255	; 0xff
 8007d06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e061      	b.n	8007ddc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0e4      	beq.n	8007cf0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d44:	609a      	str	r2, [r3, #8]
 8007d46:	e03e      	b.n	8007dc6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d56:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d66:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d68:	f7fb fd74 	bl	8003854 <HAL_GetTick>
 8007d6c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d6e:	e013      	b.n	8007d98 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d70:	f7fb fd70 	bl	8003854 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d7e:	d90b      	bls.n	8007d98 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e021      	b.n	8007ddc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0e4      	beq.n	8007d70 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	22ff      	movs	r2, #255	; 0xff
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3724      	adds	r7, #36	; 0x24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}

08007de4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e00:	f7fb fd28 	bl	8003854 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e06:	e009      	b.n	8007e1c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e08:	f7fb fd24 	bl	8003854 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e16:	d901      	bls.n	8007e1c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e007      	b.n	8007e2c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0ee      	beq.n	8007e08 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d119      	bne.n	8007e82 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f04f 32ff 	mov.w	r2, #4294967295
 8007e56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e58:	f7fb fcfc 	bl	8003854 <HAL_GetTick>
 8007e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e5e:	e009      	b.n	8007e74 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e60:	f7fb fcf8 	bl	8003854 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e6e:	d901      	bls.n	8007e74 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e007      	b.n	8007e84 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0ee      	beq.n	8007e60 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e9a:	e005      	b.n	8007ea8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	3b0a      	subs	r3, #10
 8007ea6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d8f6      	bhi.n	8007e9c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	b2db      	uxtb	r3, r3
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7f1b      	ldrb	r3, [r3, #28]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e03e      	b.n	8007f62 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2202      	movs	r2, #2
 8007eee:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	22ca      	movs	r2, #202	; 0xca
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2253      	movs	r2, #83	; 0x53
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0206 	bic.w	r2, r2, #6
 8007f22:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	fffff7f7 	.word	0xfffff7f7

08007f74 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e14d      	b.n	800822e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fb fa34 	bl	8003414 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f953 	bl	8008260 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d00c      	beq.n	8007fdc <HAL_SAI_Init+0x68>
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d80d      	bhi.n	8007fe2 <HAL_SAI_Init+0x6e>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_SAI_Init+0x5c>
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d003      	beq.n	8007fd6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007fce:	e008      	b.n	8007fe2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61fb      	str	r3, [r7, #28]
      break;
 8007fd4:	e006      	b.n	8007fe4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007fd6:	2310      	movs	r3, #16
 8007fd8:	61fb      	str	r3, [r7, #28]
      break;
 8007fda:	e003      	b.n	8007fe4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007fdc:	2320      	movs	r3, #32
 8007fde:	61fb      	str	r3, [r7, #28]
      break;
 8007fe0:	e000      	b.n	8007fe4 <HAL_SAI_Init+0x70>
    break;
 8007fe2:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d81e      	bhi.n	800802a <HAL_SAI_Init+0xb6>
 8007fec:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <HAL_SAI_Init+0x80>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008005 	.word	0x08008005
 8007ff8:	0800800b 	.word	0x0800800b
 8007ffc:	08008013 	.word	0x08008013
 8008000:	0800801b 	.word	0x0800801b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
      }
      break;
 8008008:	e010      	b.n	800802c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800800a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800800e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008010:	e00c      	b.n	800802c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008016:	617b      	str	r3, [r7, #20]
      }
      break;
 8008018:	e008      	b.n	800802c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800801a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800801e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008028:	e000      	b.n	800802c <HAL_SAI_Init+0xb8>
  default:
    break;
 800802a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a81      	ldr	r2, [pc, #516]	; (8008238 <HAL_SAI_Init+0x2c4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d004      	beq.n	8008040 <HAL_SAI_Init+0xcc>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a80      	ldr	r2, [pc, #512]	; (800823c <HAL_SAI_Init+0x2c8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d103      	bne.n	8008048 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008040:	4a7f      	ldr	r2, [pc, #508]	; (8008240 <HAL_SAI_Init+0x2cc>)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	e002      	b.n	800804e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008048:	4a7e      	ldr	r2, [pc, #504]	; (8008244 <HAL_SAI_Init+0x2d0>)
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d043      	beq.n	80080de <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a76      	ldr	r2, [pc, #472]	; (8008238 <HAL_SAI_Init+0x2c4>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d004      	beq.n	800806e <HAL_SAI_Init+0xfa>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a74      	ldr	r2, [pc, #464]	; (800823c <HAL_SAI_Init+0x2c8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d104      	bne.n	8008078 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800806e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008072:	f7ff fa7d 	bl	8007570 <HAL_RCCEx_GetPeriphCLKFreq>
 8008076:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a72      	ldr	r2, [pc, #456]	; (8008248 <HAL_SAI_Init+0x2d4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_SAI_Init+0x118>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a71      	ldr	r2, [pc, #452]	; (800824c <HAL_SAI_Init+0x2d8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d104      	bne.n	8008096 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800808c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008090:	f7ff fa6e 	bl	8007570 <HAL_RCCEx_GetPeriphCLKFreq>
 8008094:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	025b      	lsls	r3, r3, #9
 80080a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a67      	ldr	r2, [pc, #412]	; (8008250 <HAL_SAI_Init+0x2dc>)
 80080b2:	fba2 2303 	umull	r2, r3, r2, r3
 80080b6:	08da      	lsrs	r2, r3, #3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80080bc:	68f9      	ldr	r1, [r7, #12]
 80080be:	4b64      	ldr	r3, [pc, #400]	; (8008250 <HAL_SAI_Init+0x2dc>)
 80080c0:	fba3 2301 	umull	r2, r3, r3, r1
 80080c4:	08da      	lsrs	r2, r3, #3
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	1aca      	subs	r2, r1, r3
 80080d0:	2a08      	cmp	r2, #8
 80080d2:	d904      	bls.n	80080de <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_SAI_Init+0x17a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d109      	bne.n	8008102 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_SAI_Init+0x186>
 80080f6:	2300      	movs	r3, #0
 80080f8:	e001      	b.n	80080fe <HAL_SAI_Init+0x18a>
 80080fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	e008      	b.n	8008114 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d102      	bne.n	8008110 <HAL_SAI_Init+0x19c>
 800810a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810e:	e000      	b.n	8008112 <HAL_SAI_Init+0x19e>
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6819      	ldr	r1, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b4d      	ldr	r3, [pc, #308]	; (8008254 <HAL_SAI_Init+0x2e0>)
 8008120:	400b      	ands	r3, r1
 8008122:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008138:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	431a      	orrs	r2, r3
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800814c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008158:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	051b      	lsls	r3, r3, #20
 8008160:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6859      	ldr	r1, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	4b38      	ldr	r3, [pc, #224]	; (8008258 <HAL_SAI_Init+0x2e4>)
 8008176:	400b      	ands	r3, r1
 8008178:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6859      	ldr	r1, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6899      	ldr	r1, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b2e      	ldr	r3, [pc, #184]	; (800825c <HAL_SAI_Init+0x2e8>)
 80081a4:	400b      	ands	r3, r1
 80081a6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6899      	ldr	r1, [r3, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80081b8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80081be:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80081c4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	3b01      	subs	r3, #1
 80081cc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80081ce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68d9      	ldr	r1, [r3, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80081e6:	400b      	ands	r3, r1
 80081e8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68d9      	ldr	r1, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f8:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008206:	3b01      	subs	r3, #1
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40015804 	.word	0x40015804
 800823c:	40015824 	.word	0x40015824
 8008240:	40015800 	.word	0x40015800
 8008244:	40015c00 	.word	0x40015c00
 8008248:	40015c04 	.word	0x40015c04
 800824c:	40015c24 	.word	0x40015c24
 8008250:	cccccccd 	.word	0xcccccccd
 8008254:	ff05c010 	.word	0xff05c010
 8008258:	ffff1ff0 	.word	0xffff1ff0
 800825c:	fff88000 	.word	0xfff88000

08008260 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008260:	b490      	push	{r4, r7}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008268:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <SAI_Disable+0x64>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a16      	ldr	r2, [pc, #88]	; (80082c8 <SAI_Disable+0x68>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	0b1b      	lsrs	r3, r3, #12
 8008274:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008288:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800828a:	4623      	mov	r3, r4
 800828c:	1e5c      	subs	r4, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	73fb      	strb	r3, [r7, #15]
      break;
 80082a6:	e006      	b.n	80082b6 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e9      	bne.n	800828a <SAI_Disable+0x2a>

  return status;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc90      	pop	{r4, r7}
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000018 	.word	0x20000018
 80082c8:	95cbec1b 	.word	0x95cbec1b

080082cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e022      	b.n	8008324 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fa fcff 	bl	8002cf4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2203      	movs	r2, #3
 80082fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f814 	bl	800832c <HAL_SD_InitCard>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e00a      	b.n	8008324 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800832c:	b5b0      	push	{r4, r5, r7, lr}
 800832e:	b08e      	sub	sp, #56	; 0x38
 8008330:	af04      	add	r7, sp, #16
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008334:	2300      	movs	r3, #0
 8008336:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008348:	2376      	movs	r3, #118	; 0x76
 800834a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681d      	ldr	r5, [r3, #0]
 8008350:	466c      	mov	r4, sp
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800835a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008364:	4628      	mov	r0, r5
 8008366:	f002 ff61 	bl	800b22c <SDMMC_Init>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e03b      	b.n	80083f4 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800838a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f002 ff84 	bl	800b29e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fde6 	bl	8008f78 <SD_PowerON>
 80083ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e013      	b.n	80083f4 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fd05 	bl	8008ddc <SD_InitCard>
 80083d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3728      	adds	r7, #40	; 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bdb0      	pop	{r4, r5, r7, pc}

080083fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	; 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d107      	bne.n	8008424 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0cc      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 80c5 	bne.w	80085bc <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	441a      	add	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	429a      	cmp	r2, r3
 8008444:	d907      	bls.n	8008456 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e0b3      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2203      	movs	r2, #3
 800845a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	4a53      	ldr	r2, [pc, #332]	; (80085c8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800847c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	4a52      	ldr	r2, [pc, #328]	; (80085cc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008484:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	2200      	movs	r2, #0
 800848c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3380      	adds	r3, #128	; 0x80
 8008498:	4619      	mov	r1, r3
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	025b      	lsls	r3, r3, #9
 80084a0:	089b      	lsrs	r3, r3, #2
 80084a2:	f7fc fc8f 	bl	8004dc4 <HAL_DMA_Start_IT>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80084ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a43      	ldr	r2, [pc, #268]	; (80085d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e070      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0208 	orr.w	r2, r2, #8
 80084ea:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d002      	beq.n	80084fa <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	025b      	lsls	r3, r3, #9
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008502:	4618      	mov	r0, r3
 8008504:	f002 ff5e 	bl	800b3c4 <SDMMC_CmdBlockLength>
 8008508:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00f      	beq.n	8008530 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2e      	ldr	r2, [pc, #184]	; (80085d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	431a      	orrs	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e046      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	025b      	lsls	r3, r3, #9
 800853a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800853c:	2390      	movs	r3, #144	; 0x90
 800853e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008540:	2302      	movs	r3, #2
 8008542:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008544:	2300      	movs	r3, #0
 8008546:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008548:	2301      	movs	r3, #1
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f107 0210 	add.w	r2, r7, #16
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f002 ff08 	bl	800b36c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d90a      	bls.n	8008578 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2282      	movs	r2, #130	; 0x82
 8008566:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856e:	4618      	mov	r0, r3
 8008570:	f002 ff6c 	bl	800b44c <SDMMC_CmdReadMultiBlock>
 8008574:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008576:	e009      	b.n	800858c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2281      	movs	r2, #129	; 0x81
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008584:	4618      	mov	r0, r3
 8008586:	f002 ff3f 	bl	800b408 <SDMMC_CmdReadSingleBlock>
 800858a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d012      	beq.n	80085b8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0e      	ldr	r2, [pc, #56]	; (80085d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	431a      	orrs	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e002      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e000      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80085bc:	2302      	movs	r3, #2
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3730      	adds	r7, #48	; 0x30
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	08008cc7 	.word	0x08008cc7
 80085cc:	08008d39 	.word	0x08008d39
 80085d0:	004005ff 	.word	0x004005ff

080085d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	; 0x30
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0cf      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b01      	cmp	r3, #1
 8008606:	f040 80c8 	bne.w	800879a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861a:	429a      	cmp	r2, r3
 800861c:	d907      	bls.n	800862e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e0b6      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2203      	movs	r2, #3
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 021a 	orr.w	r2, r2, #26
 800864c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008652:	4a54      	ldr	r2, [pc, #336]	; (80087a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	4a53      	ldr	r2, [pc, #332]	; (80087a8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800865c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	2200      	movs	r2, #0
 8008664:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	2b01      	cmp	r3, #1
 800866c:	d002      	beq.n	8008674 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	025b      	lsls	r3, r3, #9
 8008672:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800867c:	4618      	mov	r0, r3
 800867e:	f002 fea1 	bl	800b3c4 <SDMMC_CmdBlockLength>
 8008682:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00f      	beq.n	80086aa <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a47      	ldr	r2, [pc, #284]	; (80087ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e078      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d90a      	bls.n	80086c6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	22a0      	movs	r2, #160	; 0xa0
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086bc:	4618      	mov	r0, r3
 80086be:	f002 ff09 	bl	800b4d4 <SDMMC_CmdWriteMultiBlock>
 80086c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80086c4:	e009      	b.n	80086da <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2290      	movs	r2, #144	; 0x90
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d2:	4618      	mov	r0, r3
 80086d4:	f002 fedc 	bl	800b490 <SDMMC_CmdWriteSingleBlock>
 80086d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d012      	beq.n	8008706 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a31      	ldr	r2, [pc, #196]	; (80087ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	431a      	orrs	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e04a      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0208 	orr.w	r2, r2, #8
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3380      	adds	r3, #128	; 0x80
 8008722:	461a      	mov	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	025b      	lsls	r3, r3, #9
 8008728:	089b      	lsrs	r3, r3, #2
 800872a:	f7fc fb4b 	bl	8004dc4 <HAL_DMA_Start_IT>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01a      	beq.n	800876a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 021a 	bic.w	r2, r2, #26
 8008742:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a18      	ldr	r2, [pc, #96]	; (80087ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800874a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e018      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800876a:	f04f 33ff 	mov.w	r3, #4294967295
 800876e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	025b      	lsls	r3, r3, #9
 8008774:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008776:	2390      	movs	r3, #144	; 0x90
 8008778:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800877e:	2300      	movs	r3, #0
 8008780:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008782:	2301      	movs	r3, #1
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f107 0210 	add.w	r2, r7, #16
 800878e:	4611      	mov	r1, r2
 8008790:	4618      	mov	r0, r3
 8008792:	f002 fdeb 	bl	800b36c <SDMMC_ConfigData>

      return HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	e000      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800879a:	2302      	movs	r3, #2
  }
}
 800879c:	4618      	mov	r0, r3
 800879e:	3730      	adds	r7, #48	; 0x30
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	08008c9d 	.word	0x08008c9d
 80087a8:	08008d39 	.word	0x08008d39
 80087ac:	004005ff 	.word	0x004005ff

080087b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d2:	0f9b      	lsrs	r3, r3, #30
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087de:	0e9b      	lsrs	r3, r3, #26
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 030f 	and.w	r3, r3, #15
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087f0:	0e1b      	lsrs	r3, r3, #24
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	b2da      	uxtb	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	b2da      	uxtb	r2, r3
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881a:	b2da      	uxtb	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008824:	0d1b      	lsrs	r3, r3, #20
 8008826:	b29a      	uxth	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008830:	0c1b      	lsrs	r3, r3, #16
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	b2da      	uxtb	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008842:	0bdb      	lsrs	r3, r3, #15
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008854:	0b9b      	lsrs	r3, r3, #14
 8008856:	b2db      	uxtb	r3, r3
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008866:	0b5b      	lsrs	r3, r3, #13
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	b2da      	uxtb	r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008878:	0b1b      	lsrs	r3, r3, #12
 800887a:	b2db      	uxtb	r3, r3
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	b2da      	uxtb	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2200      	movs	r2, #0
 800888a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008890:	2b00      	cmp	r3, #0
 8008892:	d163      	bne.n	800895c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008898:	009a      	lsls	r2, r3, #2
 800889a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800889e:	4013      	ands	r3, r2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80088a4:	0f92      	lsrs	r2, r2, #30
 80088a6:	431a      	orrs	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b0:	0edb      	lsrs	r3, r3, #27
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c2:	0e1b      	lsrs	r3, r3, #24
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d4:	0d5b      	lsrs	r3, r3, #21
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e6:	0c9b      	lsrs	r3, r3, #18
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f8:	0bdb      	lsrs	r3, r3, #15
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	b2da      	uxtb	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	7e1b      	ldrb	r3, [r3, #24]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	3302      	adds	r3, #2
 800891c:	2201      	movs	r2, #1
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008926:	fb03 f202 	mul.w	r2, r3, r2
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	7a1b      	ldrb	r3, [r3, #8]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	2201      	movs	r2, #1
 800893a:	409a      	lsls	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008948:	0a52      	lsrs	r2, r2, #9
 800894a:	fb03 f202 	mul.w	r2, r3, r2
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008958:	661a      	str	r2, [r3, #96]	; 0x60
 800895a:	e031      	b.n	80089c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	2b01      	cmp	r3, #1
 8008962:	d11d      	bne.n	80089a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008968:	041b      	lsls	r3, r3, #16
 800896a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	431a      	orrs	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	3301      	adds	r3, #1
 8008980:	029a      	lsls	r2, r3, #10
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008994:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	661a      	str	r2, [r3, #96]	; 0x60
 800899e:	e00f      	b.n	80089c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a58      	ldr	r2, [pc, #352]	; (8008b08 <HAL_SD_GetCardCSD+0x344>)
 80089a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e09d      	b.n	8008afc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c4:	0b9b      	lsrs	r3, r3, #14
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d6:	09db      	lsrs	r3, r3, #7
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f8:	0fdb      	lsrs	r3, r3, #31
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	0f5b      	lsrs	r3, r3, #29
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a16:	0e9b      	lsrs	r3, r3, #26
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a28:	0d9b      	lsrs	r3, r3, #22
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3a:	0d5b      	lsrs	r3, r3, #21
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	0c1b      	lsrs	r3, r3, #16
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	0bdb      	lsrs	r3, r3, #15
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7e:	0b9b      	lsrs	r3, r3, #14
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a92:	0b5b      	lsrs	r3, r3, #13
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	0b1b      	lsrs	r3, r3, #12
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aba:	0a9b      	lsrs	r3, r3, #10
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae2:	085b      	lsrs	r3, r3, #1
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	004005ff 	.word	0x004005ff

08008b0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b64:	b5b0      	push	{r4, r5, r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2203      	movs	r2, #3
 8008b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d02e      	beq.n	8008bdc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b84:	d106      	bne.n	8008b94 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
 8008b92:	e029      	b.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b9a:	d10a      	bne.n	8008bb2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 faa1 	bl	80090e4 <SD_WideBus_Enable>
 8008ba2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb0:	e01a      	b.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fade 	bl	800917a <SD_WideBus_Disable>
 8008bbe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38
 8008bcc:	e00c      	b.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8008bda:	e005      	b.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d009      	beq.n	8008c04 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e024      	b.n	8008c4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681d      	ldr	r5, [r3, #0]
 8008c2a:	466c      	mov	r4, sp
 8008c2c:	f107 0318 	add.w	r3, r7, #24
 8008c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f002 faf4 	bl	800b22c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3728      	adds	r7, #40	; 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bdb0      	pop	{r4, r5, r7, pc}
 8008c56:	bf00      	nop
 8008c58:	004005ff 	.word	0x004005ff

08008c5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c68:	f107 030c 	add.w	r3, r7, #12
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa10 	bl	8009094 <SD_SendStatus>
 8008c74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0a5b      	lsrs	r3, r3, #9
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c92:	693b      	ldr	r3, [r7, #16]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd8:	2b82      	cmp	r3, #130	; 0x82
 8008cda:	d111      	bne.n	8008d00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 fc19 	bl	800b518 <SDMMC_CmdStopTransfer>
 8008ce6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fd58 	bl	80087b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0208 	bic.w	r2, r2, #8
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f003 f85f 	bl	800bdec <HAL_SD_RxCpltCallback>
#endif
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fc f89c 	bl	8004e84 <HAL_DMA_GetError>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d03e      	beq.n	8008dd0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d002      	beq.n	8008d6e <SD_DMAError+0x36>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d12d      	bne.n	8008dca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a19      	ldr	r2, [pc, #100]	; (8008dd8 <SD_DMAError+0xa0>)
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f7ff ff62 	bl	8008c5c <HAL_SD_GetCardState>
 8008d98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b06      	cmp	r3, #6
 8008d9e:	d002      	beq.n	8008da6 <SD_DMAError+0x6e>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d10a      	bne.n	8008dbc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 fbb4 	bl	800b518 <SDMMC_CmdStopTransfer>
 8008db0:	4602      	mov	r2, r0
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	431a      	orrs	r2, r3
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008dca:	6978      	ldr	r0, [r7, #20]
 8008dcc:	f7ff fcf0 	bl	80087b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	004005ff 	.word	0x004005ff

08008ddc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ddc:	b5b0      	push	{r4, r5, r7, lr}
 8008dde:	b094      	sub	sp, #80	; 0x50
 8008de0:	af04      	add	r7, sp, #16
 8008de2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008de4:	2301      	movs	r3, #1
 8008de6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f002 fa65 	bl	800b2bc <SDMMC_GetPowerState>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008df8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008dfc:	e0b8      	b.n	8008f70 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d02f      	beq.n	8008e66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f002 fc8f 	bl	800b72e <SDMMC_CmdSendCID>
 8008e10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <SD_InitCard+0x40>
    {
      return errorstate;
 8008e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1a:	e0a9      	b.n	8008f70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f002 fa8f 	bl	800b346 <SDMMC_GetResponse>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2104      	movs	r1, #4
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 fa86 	bl	800b346 <SDMMC_GetResponse>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2108      	movs	r1, #8
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 fa7d 	bl	800b346 <SDMMC_GetResponse>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	210c      	movs	r1, #12
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 fa74 	bl	800b346 <SDMMC_GetResponse>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d00d      	beq.n	8008e8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f107 020e 	add.w	r2, r7, #14
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fc95 	bl	800b7a8 <SDMMC_CmdSetRelAdd>
 8008e7e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <SD_InitCard+0xae>
    {
      return errorstate;
 8008e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e88:	e072      	b.n	8008f70 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d036      	beq.n	8008f00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e92:	89fb      	ldrh	r3, [r7, #14]
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea2:	041b      	lsls	r3, r3, #16
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	f002 fc5f 	bl	800b76a <SDMMC_CmdSendCSD>
 8008eac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb6:	e05b      	b.n	8008f70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f002 fa41 	bl	800b346 <SDMMC_GetResponse>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2104      	movs	r1, #4
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 fa38 	bl	800b346 <SDMMC_GetResponse>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2108      	movs	r1, #8
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 fa2f 	bl	800b346 <SDMMC_GetResponse>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	210c      	movs	r1, #12
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f002 fa26 	bl	800b346 <SDMMC_GetResponse>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2104      	movs	r1, #4
 8008f06:	4618      	mov	r0, r3
 8008f08:	f002 fa1d 	bl	800b346 <SDMMC_GetResponse>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	0d1a      	lsrs	r2, r3, #20
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f14:	f107 0310 	add.w	r3, r7, #16
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fc52 	bl	80087c4 <HAL_SD_GetCardCSD>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f2a:	e021      	b.n	8008f70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6819      	ldr	r1, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	2200      	movs	r2, #0
 8008f38:	461c      	mov	r4, r3
 8008f3a:	4615      	mov	r5, r2
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	4608      	mov	r0, r1
 8008f42:	f002 fb0b 	bl	800b55c <SDMMC_CmdSelDesel>
 8008f46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <SD_InitCard+0x176>
  {
    return errorstate;
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	e00e      	b.n	8008f70 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681d      	ldr	r5, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	466c      	mov	r4, sp
 8008f5a:	f103 0210 	add.w	r2, r3, #16
 8008f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f64:	3304      	adds	r3, #4
 8008f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f002 f95f 	bl	800b22c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3740      	adds	r7, #64	; 0x40
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bdb0      	pop	{r4, r5, r7, pc}

08008f78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 fb06 	bl	800b5a2 <SDMMC_CmdGoIdleState>
 8008f96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e072      	b.n	8009088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f002 fb19 	bl	800b5de <SDMMC_CmdOperCond>
 8008fac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00d      	beq.n	8008fd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f002 faef 	bl	800b5a2 <SDMMC_CmdGoIdleState>
 8008fc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	e05b      	b.n	8009088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d137      	bne.n	800904e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f002 fb19 	bl	800b61c <SDMMC_CmdAppCommand>
 8008fea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d02d      	beq.n	800904e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ff2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ff6:	e047      	b.n	8009088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fb0c 	bl	800b61c <SDMMC_CmdAppCommand>
 8009004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_PowerON+0x98>
    {
      return errorstate;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	e03b      	b.n	8009088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	491e      	ldr	r1, [pc, #120]	; (8009090 <SD_PowerON+0x118>)
 8009016:	4618      	mov	r0, r3
 8009018:	f002 fb22 	bl	800b660 <SDMMC_CmdAppOperCommand>
 800901c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009028:	e02e      	b.n	8009088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f002 f988 	bl	800b346 <SDMMC_GetResponse>
 8009036:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	0fdb      	lsrs	r3, r3, #31
 800903c:	2b01      	cmp	r3, #1
 800903e:	d101      	bne.n	8009044 <SD_PowerON+0xcc>
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <SD_PowerON+0xce>
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]

    count++;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	3301      	adds	r3, #1
 800904c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009054:	4293      	cmp	r3, r2
 8009056:	d802      	bhi.n	800905e <SD_PowerON+0xe6>
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0cc      	beq.n	8008ff8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009064:	4293      	cmp	r3, r2
 8009066:	d902      	bls.n	800906e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800906c:	e00c      	b.n	8009088 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	645a      	str	r2, [r3, #68]	; 0x44
 800907e:	e002      	b.n	8009086 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	c1100000 	.word	0xc1100000

08009094 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090a8:	e018      	b.n	80090dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f002 fb97 	bl	800b7ea <SDMMC_CmdSendStatus>
 80090bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	e009      	b.n	80090dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 f939 	bl	800b346 <SDMMC_GetResponse>
 80090d4:	4602      	mov	r2, r0
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	2300      	movs	r3, #0
 80090f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f002 f923 	bl	800b346 <SDMMC_GetResponse>
 8009100:	4603      	mov	r3, r0
 8009102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800910a:	d102      	bne.n	8009112 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800910c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009110:	e02f      	b.n	8009172 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009112:	f107 030c 	add.w	r3, r7, #12
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f879 	bl	8009210 <SD_FindSCR>
 800911e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	e023      	b.n	8009172 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01c      	beq.n	800916e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f002 fa6b 	bl	800b61c <SDMMC_CmdAppCommand>
 8009146:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	e00f      	b.n	8009172 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2102      	movs	r1, #2
 8009158:	4618      	mov	r0, r3
 800915a:	f002 faa5 	bl	800b6a8 <SDMMC_CmdBusWidth>
 800915e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	e003      	b.n	8009172 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800916a:	2300      	movs	r3, #0
 800916c:	e001      	b.n	8009172 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800916e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	2300      	movs	r3, #0
 8009188:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f002 f8d8 	bl	800b346 <SDMMC_GetResponse>
 8009196:	4603      	mov	r3, r0
 8009198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a0:	d102      	bne.n	80091a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091a6:	e02f      	b.n	8009208 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091a8:	f107 030c 	add.w	r3, r7, #12
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f82e 	bl	8009210 <SD_FindSCR>
 80091b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	e023      	b.n	8009208 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01c      	beq.n	8009204 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d2:	041b      	lsls	r3, r3, #16
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f002 fa20 	bl	800b61c <SDMMC_CmdAppCommand>
 80091dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	e00f      	b.n	8009208 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 fa5a 	bl	800b6a8 <SDMMC_CmdBusWidth>
 80091f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	e003      	b.n	8009208 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009200:	2300      	movs	r3, #0
 8009202:	e001      	b.n	8009208 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009204:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b08f      	sub	sp, #60	; 0x3c
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800921a:	f7fa fb1b 	bl	8003854 <HAL_GetTick>
 800921e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009224:	2300      	movs	r3, #0
 8009226:	60bb      	str	r3, [r7, #8]
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2108      	movs	r1, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f002 f8c4 	bl	800b3c4 <SDMMC_CmdBlockLength>
 800923c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	e0a9      	b.n	800939c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f002 f9e1 	bl	800b61c <SDMMC_CmdAppCommand>
 800925a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	e09a      	b.n	800939c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295
 800926a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800926c:	2308      	movs	r3, #8
 800926e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009270:	2330      	movs	r3, #48	; 0x30
 8009272:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009274:	2302      	movs	r3, #2
 8009276:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009278:	2300      	movs	r3, #0
 800927a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800927c:	2301      	movs	r3, #1
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f107 0210 	add.w	r2, r7, #16
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f002 f86e 	bl	800b36c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4618      	mov	r0, r3
 8009296:	f002 fa29 	bl	800b6ec <SDMMC_CmdSendSCR>
 800929a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d022      	beq.n	80092e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	e07a      	b.n	800939c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00e      	beq.n	80092d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	f107 0208 	add.w	r2, r7, #8
 80092c0:	18d4      	adds	r4, r2, r3
 80092c2:	4608      	mov	r0, r1
 80092c4:	f001 ffde 	bl	800b284 <SDMMC_ReadFIFO>
 80092c8:	4603      	mov	r3, r0
 80092ca:	6023      	str	r3, [r4, #0]
      index++;
 80092cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ce:	3301      	adds	r3, #1
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092d2:	f7fa fabf 	bl	8003854 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d102      	bne.n	80092e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092e6:	e059      	b.n	800939c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ee:	f240 432a 	movw	r3, #1066	; 0x42a
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0d6      	beq.n	80092a6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2208      	movs	r2, #8
 800930c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800930e:	2308      	movs	r3, #8
 8009310:	e044      	b.n	800939c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2202      	movs	r2, #2
 8009326:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009328:	2302      	movs	r3, #2
 800932a:	e037      	b.n	800939c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2220      	movs	r2, #32
 8009340:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009342:	2320      	movs	r3, #32
 8009344:	e02a      	b.n	800939c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f240 523a 	movw	r2, #1338	; 0x53a
 800934e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	061a      	lsls	r2, r3, #24
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800935c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	0a1b      	lsrs	r3, r3, #8
 8009362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009366:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	0e1b      	lsrs	r3, r3, #24
 800936c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	601a      	str	r2, [r3, #0]
    scr++;
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	3304      	adds	r3, #4
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	061a      	lsls	r2, r3, #24
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009384:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	0a1b      	lsrs	r3, r3, #8
 800938a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800938e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	0e1b      	lsrs	r3, r3, #24
 8009394:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	373c      	adds	r7, #60	; 0x3c
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd90      	pop	{r4, r7, pc}

080093a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e025      	b.n	8009404 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7fa f817 	bl	8003400 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3304      	adds	r3, #4
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f001 fdfb 	bl	800afe0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	461a      	mov	r2, r3
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	f001 fe65 	bl	800b0c4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d101      	bne.n	8009428 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009424:	2302      	movs	r3, #2
 8009426:	e018      	b.n	800945a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f001 fec3 	bl	800b1c4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d104      	bne.n	8009450 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2205      	movs	r2, #5
 800944a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800944e:	e003      	b.n	8009458 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b02      	cmp	r3, #2
 8009476:	d101      	bne.n	800947c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009478:	2302      	movs	r3, #2
 800947a:	e00e      	b.n	800949a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f001 febb 	bl	800b206 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e04c      	b.n	8009550 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7f9 fc74 	bl	8002db8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0203 	bic.w	r2, r2, #3
 80094e6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4b19      	ldr	r3, [pc, #100]	; (8009558 <HAL_SPDIFRX_Init+0xb4>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009500:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009506:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800950c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009512:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009518:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800951e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009524:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800952a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009530:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	fff88407 	.word	0xfff88407

0800955c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e084      	b.n	8009678 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7f9 fc57 	bl	8002e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095ae:	d902      	bls.n	80095b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095b0:	2300      	movs	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095c4:	d007      	beq.n	80095d6 <HAL_SPI_Init+0x7a>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095ce:	d002      	beq.n	80095d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095e6:	d903      	bls.n	80095f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
 80095ee:	e002      	b.n	80095f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	431a      	orrs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	431a      	orrs	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	ea42 0103 	orr.w	r1, r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	f003 0204 	and.w	r2, r3, #4
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009644:	431a      	orrs	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	ea42 0103 	orr.w	r1, r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	430a      	orrs	r2, r1
 8009656:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	69da      	ldr	r2, [r3, #28]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009666:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e01d      	b.n	80096ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7f9 fc2a 	bl	8002f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f000 fb84 	bl	8009dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0201 	orr.w	r2, r2, #1
 80096ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <HAL_TIM_Base_Start_IT+0x50>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b06      	cmp	r3, #6
 8009700:	d00b      	beq.n	800971a <HAL_TIM_Base_Start_IT+0x42>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009708:	d007      	beq.n	800971a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0201 	orr.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	00010007 	.word	0x00010007

0800972c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e01d      	b.n	800977a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d106      	bne.n	8009758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7f9 fc42 	bl	8002fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3304      	adds	r3, #4
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f000 fb2e 	bl	8009dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	2b02      	cmp	r3, #2
 8009796:	d122      	bne.n	80097de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d11b      	bne.n	80097de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f06f 0202 	mvn.w	r2, #2
 80097ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f003 0303 	and.w	r3, r3, #3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fae3 	bl	8009d90 <HAL_TIM_IC_CaptureCallback>
 80097ca:	e005      	b.n	80097d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fad5 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fae6 	bl	8009da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 0304 	and.w	r3, r3, #4
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d122      	bne.n	8009832 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d11b      	bne.n	8009832 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f06f 0204 	mvn.w	r2, #4
 8009802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fab9 	bl	8009d90 <HAL_TIM_IC_CaptureCallback>
 800981e:	e005      	b.n	800982c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 faab 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fabc 	bl	8009da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f003 0308 	and.w	r3, r3, #8
 800983c:	2b08      	cmp	r3, #8
 800983e:	d122      	bne.n	8009886 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f003 0308 	and.w	r3, r3, #8
 800984a:	2b08      	cmp	r3, #8
 800984c:	d11b      	bne.n	8009886 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f06f 0208 	mvn.w	r2, #8
 8009856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2204      	movs	r2, #4
 800985c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f003 0303 	and.w	r3, r3, #3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fa8f 	bl	8009d90 <HAL_TIM_IC_CaptureCallback>
 8009872:	e005      	b.n	8009880 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa81 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa92 	bl	8009da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b10      	cmp	r3, #16
 8009892:	d122      	bne.n	80098da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	2b10      	cmp	r3, #16
 80098a0:	d11b      	bne.n	80098da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f06f 0210 	mvn.w	r2, #16
 80098aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2208      	movs	r2, #8
 80098b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fa65 	bl	8009d90 <HAL_TIM_IC_CaptureCallback>
 80098c6:	e005      	b.n	80098d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa57 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa68 	bl	8009da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d10e      	bne.n	8009906 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d107      	bne.n	8009906 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f06f 0201 	mvn.w	r2, #1
 80098fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7f8 fe7f 	bl	8002604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009910:	2b80      	cmp	r3, #128	; 0x80
 8009912:	d10e      	bne.n	8009932 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991e:	2b80      	cmp	r3, #128	; 0x80
 8009920:	d107      	bne.n	8009932 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800992a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fefb 	bl	800a728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009940:	d10e      	bne.n	8009960 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b80      	cmp	r3, #128	; 0x80
 800994e:	d107      	bne.n	8009960 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 feee 	bl	800a73c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996a:	2b40      	cmp	r3, #64	; 0x40
 800996c:	d10e      	bne.n	800998c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b40      	cmp	r3, #64	; 0x40
 800997a:	d107      	bne.n	800998c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa16 	bl	8009db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b20      	cmp	r3, #32
 8009998:	d10e      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d107      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0220 	mvn.w	r2, #32
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 feae 	bl	800a714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e105      	b.n	8009be6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2202      	movs	r2, #2
 80099e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b14      	cmp	r3, #20
 80099ee:	f200 80f0 	bhi.w	8009bd2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a4d 	.word	0x08009a4d
 80099fc:	08009bd3 	.word	0x08009bd3
 8009a00:	08009bd3 	.word	0x08009bd3
 8009a04:	08009bd3 	.word	0x08009bd3
 8009a08:	08009a8d 	.word	0x08009a8d
 8009a0c:	08009bd3 	.word	0x08009bd3
 8009a10:	08009bd3 	.word	0x08009bd3
 8009a14:	08009bd3 	.word	0x08009bd3
 8009a18:	08009acf 	.word	0x08009acf
 8009a1c:	08009bd3 	.word	0x08009bd3
 8009a20:	08009bd3 	.word	0x08009bd3
 8009a24:	08009bd3 	.word	0x08009bd3
 8009a28:	08009b0f 	.word	0x08009b0f
 8009a2c:	08009bd3 	.word	0x08009bd3
 8009a30:	08009bd3 	.word	0x08009bd3
 8009a34:	08009bd3 	.word	0x08009bd3
 8009a38:	08009b51 	.word	0x08009b51
 8009a3c:	08009bd3 	.word	0x08009bd3
 8009a40:	08009bd3 	.word	0x08009bd3
 8009a44:	08009bd3 	.word	0x08009bd3
 8009a48:	08009b91 	.word	0x08009b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 fa5a 	bl	8009f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699a      	ldr	r2, [r3, #24]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0208 	orr.w	r2, r2, #8
 8009a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0204 	bic.w	r2, r2, #4
 8009a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6999      	ldr	r1, [r3, #24]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	619a      	str	r2, [r3, #24]
      break;
 8009a8a:	e0a3      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 faac 	bl	8009ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699a      	ldr	r2, [r3, #24]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	699a      	ldr	r2, [r3, #24]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6999      	ldr	r1, [r3, #24]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	021a      	lsls	r2, r3, #8
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	619a      	str	r2, [r3, #24]
      break;
 8009acc:	e082      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fb03 	bl	800a0e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0208 	orr.w	r2, r2, #8
 8009ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69da      	ldr	r2, [r3, #28]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0204 	bic.w	r2, r2, #4
 8009af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69d9      	ldr	r1, [r3, #28]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	61da      	str	r2, [r3, #28]
      break;
 8009b0c:	e062      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fb59 	bl	800a1cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69da      	ldr	r2, [r3, #28]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69d9      	ldr	r1, [r3, #28]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	021a      	lsls	r2, r3, #8
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	61da      	str	r2, [r3, #28]
      break;
 8009b4e:	e041      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 fb90 	bl	800a27c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0208 	orr.w	r2, r2, #8
 8009b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0204 	bic.w	r2, r2, #4
 8009b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b8e:	e021      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fbc2 	bl	800a320 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	021a      	lsls	r2, r3, #8
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bd0:	e000      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009bd2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop

08009bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_TIM_ConfigClockSource+0x18>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e0b3      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x180>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	4b55      	ldr	r3, [pc, #340]	; (8009d78 <HAL_TIM_ConfigClockSource+0x188>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c40:	d03e      	beq.n	8009cc0 <HAL_TIM_ConfigClockSource+0xd0>
 8009c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c46:	f200 8087 	bhi.w	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4e:	f000 8085 	beq.w	8009d5c <HAL_TIM_ConfigClockSource+0x16c>
 8009c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c56:	d87f      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c58:	2b70      	cmp	r3, #112	; 0x70
 8009c5a:	d01a      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0xa2>
 8009c5c:	2b70      	cmp	r3, #112	; 0x70
 8009c5e:	d87b      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c60:	2b60      	cmp	r3, #96	; 0x60
 8009c62:	d050      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x116>
 8009c64:	2b60      	cmp	r3, #96	; 0x60
 8009c66:	d877      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c68:	2b50      	cmp	r3, #80	; 0x50
 8009c6a:	d03c      	beq.n	8009ce6 <HAL_TIM_ConfigClockSource+0xf6>
 8009c6c:	2b50      	cmp	r3, #80	; 0x50
 8009c6e:	d873      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d058      	beq.n	8009d26 <HAL_TIM_ConfigClockSource+0x136>
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d86f      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c78:	2b30      	cmp	r3, #48	; 0x30
 8009c7a:	d064      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x156>
 8009c7c:	2b30      	cmp	r3, #48	; 0x30
 8009c7e:	d86b      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d060      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x156>
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d867      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d05c      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x156>
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	d05a      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c90:	e062      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	6899      	ldr	r1, [r3, #8]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	f000 fc0b 	bl	800a4bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	609a      	str	r2, [r3, #8]
      break;
 8009cbe:	e04e      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	6899      	ldr	r1, [r3, #8]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f000 fbf4 	bl	800a4bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ce2:	609a      	str	r2, [r3, #8]
      break;
 8009ce4:	e03b      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6859      	ldr	r1, [r3, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f000 fb68 	bl	800a3c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2150      	movs	r1, #80	; 0x50
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fbc1 	bl	800a486 <TIM_ITRx_SetConfig>
      break;
 8009d04:	e02b      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6859      	ldr	r1, [r3, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	461a      	mov	r2, r3
 8009d14:	f000 fb87 	bl	800a426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2160      	movs	r1, #96	; 0x60
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fbb1 	bl	800a486 <TIM_ITRx_SetConfig>
      break;
 8009d24:	e01b      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6859      	ldr	r1, [r3, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	461a      	mov	r2, r3
 8009d34:	f000 fb48 	bl	800a3c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2140      	movs	r1, #64	; 0x40
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fba1 	bl	800a486 <TIM_ITRx_SetConfig>
      break;
 8009d44:	e00b      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f000 fb98 	bl	800a486 <TIM_ITRx_SetConfig>
      break;
 8009d56:	e002      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d58:	bf00      	nop
 8009d5a:	e000      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	fffeff88 	.word	0xfffeff88

08009d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a40      	ldr	r2, [pc, #256]	; (8009ee0 <TIM_Base_SetConfig+0x114>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d013      	beq.n	8009e0c <TIM_Base_SetConfig+0x40>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dea:	d00f      	beq.n	8009e0c <TIM_Base_SetConfig+0x40>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a3d      	ldr	r2, [pc, #244]	; (8009ee4 <TIM_Base_SetConfig+0x118>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00b      	beq.n	8009e0c <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a3c      	ldr	r2, [pc, #240]	; (8009ee8 <TIM_Base_SetConfig+0x11c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d007      	beq.n	8009e0c <TIM_Base_SetConfig+0x40>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a3b      	ldr	r2, [pc, #236]	; (8009eec <TIM_Base_SetConfig+0x120>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d003      	beq.n	8009e0c <TIM_Base_SetConfig+0x40>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a3a      	ldr	r2, [pc, #232]	; (8009ef0 <TIM_Base_SetConfig+0x124>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d108      	bne.n	8009e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a2f      	ldr	r2, [pc, #188]	; (8009ee0 <TIM_Base_SetConfig+0x114>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d02b      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e2c:	d027      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a2c      	ldr	r2, [pc, #176]	; (8009ee4 <TIM_Base_SetConfig+0x118>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d023      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a2b      	ldr	r2, [pc, #172]	; (8009ee8 <TIM_Base_SetConfig+0x11c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d01f      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a2a      	ldr	r2, [pc, #168]	; (8009eec <TIM_Base_SetConfig+0x120>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d01b      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a29      	ldr	r2, [pc, #164]	; (8009ef0 <TIM_Base_SetConfig+0x124>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d017      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a28      	ldr	r2, [pc, #160]	; (8009ef4 <TIM_Base_SetConfig+0x128>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d013      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a27      	ldr	r2, [pc, #156]	; (8009ef8 <TIM_Base_SetConfig+0x12c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00f      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a26      	ldr	r2, [pc, #152]	; (8009efc <TIM_Base_SetConfig+0x130>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d00b      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a25      	ldr	r2, [pc, #148]	; (8009f00 <TIM_Base_SetConfig+0x134>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d007      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a24      	ldr	r2, [pc, #144]	; (8009f04 <TIM_Base_SetConfig+0x138>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d003      	beq.n	8009e7e <TIM_Base_SetConfig+0xb2>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a23      	ldr	r2, [pc, #140]	; (8009f08 <TIM_Base_SetConfig+0x13c>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d108      	bne.n	8009e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <TIM_Base_SetConfig+0x114>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d003      	beq.n	8009ec4 <TIM_Base_SetConfig+0xf8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a0c      	ldr	r2, [pc, #48]	; (8009ef0 <TIM_Base_SetConfig+0x124>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d103      	bne.n	8009ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	615a      	str	r2, [r3, #20]
}
 8009ed2:	bf00      	nop
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	40010000 	.word	0x40010000
 8009ee4:	40000400 	.word	0x40000400
 8009ee8:	40000800 	.word	0x40000800
 8009eec:	40000c00 	.word	0x40000c00
 8009ef0:	40010400 	.word	0x40010400
 8009ef4:	40014000 	.word	0x40014000
 8009ef8:	40014400 	.word	0x40014400
 8009efc:	40014800 	.word	0x40014800
 8009f00:	40001800 	.word	0x40001800
 8009f04:	40001c00 	.word	0x40001c00
 8009f08:	40002000 	.word	0x40002000

08009f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	f023 0201 	bic.w	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4b2b      	ldr	r3, [pc, #172]	; (8009fe4 <TIM_OC1_SetConfig+0xd8>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0303 	bic.w	r3, r3, #3
 8009f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f023 0302 	bic.w	r3, r3, #2
 8009f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a21      	ldr	r2, [pc, #132]	; (8009fe8 <TIM_OC1_SetConfig+0xdc>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d003      	beq.n	8009f70 <TIM_OC1_SetConfig+0x64>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a20      	ldr	r2, [pc, #128]	; (8009fec <TIM_OC1_SetConfig+0xe0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10c      	bne.n	8009f8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f023 0308 	bic.w	r3, r3, #8
 8009f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f023 0304 	bic.w	r3, r3, #4
 8009f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a16      	ldr	r2, [pc, #88]	; (8009fe8 <TIM_OC1_SetConfig+0xdc>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d003      	beq.n	8009f9a <TIM_OC1_SetConfig+0x8e>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a15      	ldr	r2, [pc, #84]	; (8009fec <TIM_OC1_SetConfig+0xe0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d111      	bne.n	8009fbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	621a      	str	r2, [r3, #32]
}
 8009fd8:	bf00      	nop
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	fffeff8f 	.word	0xfffeff8f
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40010400 	.word	0x40010400

08009ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0210 	bic.w	r2, r3, #16
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4b2e      	ldr	r3, [pc, #184]	; (800a0d4 <TIM_OC2_SetConfig+0xe4>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f023 0320 	bic.w	r3, r3, #32
 800a03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	4313      	orrs	r3, r2
 800a046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a23      	ldr	r2, [pc, #140]	; (800a0d8 <TIM_OC2_SetConfig+0xe8>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d003      	beq.n	800a058 <TIM_OC2_SetConfig+0x68>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a22      	ldr	r2, [pc, #136]	; (800a0dc <TIM_OC2_SetConfig+0xec>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d10d      	bne.n	800a074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	011b      	lsls	r3, r3, #4
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <TIM_OC2_SetConfig+0xe8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d003      	beq.n	800a084 <TIM_OC2_SetConfig+0x94>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a17      	ldr	r2, [pc, #92]	; (800a0dc <TIM_OC2_SetConfig+0xec>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d113      	bne.n	800a0ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a08a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	feff8fff 	.word	0xfeff8fff
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40010400 	.word	0x40010400

0800a0e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4b2d      	ldr	r3, [pc, #180]	; (800a1c0 <TIM_OC3_SetConfig+0xe0>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 0303 	bic.w	r3, r3, #3
 800a116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4313      	orrs	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	021b      	lsls	r3, r3, #8
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	4313      	orrs	r3, r2
 800a134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a22      	ldr	r2, [pc, #136]	; (800a1c4 <TIM_OC3_SetConfig+0xe4>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d003      	beq.n	800a146 <TIM_OC3_SetConfig+0x66>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a21      	ldr	r2, [pc, #132]	; (800a1c8 <TIM_OC3_SetConfig+0xe8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d10d      	bne.n	800a162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a14c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a17      	ldr	r2, [pc, #92]	; (800a1c4 <TIM_OC3_SetConfig+0xe4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d003      	beq.n	800a172 <TIM_OC3_SetConfig+0x92>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a16      	ldr	r2, [pc, #88]	; (800a1c8 <TIM_OC3_SetConfig+0xe8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d113      	bne.n	800a19a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	621a      	str	r2, [r3, #32]
}
 800a1b4:	bf00      	nop
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	fffeff8f 	.word	0xfffeff8f
 800a1c4:	40010000 	.word	0x40010000
 800a1c8:	40010400 	.word	0x40010400

0800a1cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4b1e      	ldr	r3, [pc, #120]	; (800a270 <TIM_OC4_SetConfig+0xa4>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	031b      	lsls	r3, r3, #12
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a13      	ldr	r2, [pc, #76]	; (800a274 <TIM_OC4_SetConfig+0xa8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d003      	beq.n	800a234 <TIM_OC4_SetConfig+0x68>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a12      	ldr	r2, [pc, #72]	; (800a278 <TIM_OC4_SetConfig+0xac>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d109      	bne.n	800a248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a23a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	019b      	lsls	r3, r3, #6
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4313      	orrs	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	621a      	str	r2, [r3, #32]
}
 800a262:	bf00      	nop
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	feff8fff 	.word	0xfeff8fff
 800a274:	40010000 	.word	0x40010000
 800a278:	40010400 	.word	0x40010400

0800a27c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <TIM_OC5_SetConfig+0x98>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a12      	ldr	r2, [pc, #72]	; (800a318 <TIM_OC5_SetConfig+0x9c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d003      	beq.n	800a2da <TIM_OC5_SetConfig+0x5e>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a11      	ldr	r2, [pc, #68]	; (800a31c <TIM_OC5_SetConfig+0xa0>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d109      	bne.n	800a2ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	621a      	str	r2, [r3, #32]
}
 800a308:	bf00      	nop
 800a30a:	371c      	adds	r7, #28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	fffeff8f 	.word	0xfffeff8f
 800a318:	40010000 	.word	0x40010000
 800a31c:	40010400 	.word	0x40010400

0800a320 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4b1c      	ldr	r3, [pc, #112]	; (800a3bc <TIM_OC6_SetConfig+0x9c>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	051b      	lsls	r3, r3, #20
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <TIM_OC6_SetConfig+0xa0>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC6_SetConfig+0x60>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a12      	ldr	r2, [pc, #72]	; (800a3c4 <TIM_OC6_SetConfig+0xa4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d109      	bne.n	800a394 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	029b      	lsls	r3, r3, #10
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	621a      	str	r2, [r3, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	feff8fff 	.word	0xfeff8fff
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40010400 	.word	0x40010400

0800a3c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f023 0201 	bic.w	r2, r3, #1
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f023 030a 	bic.w	r3, r3, #10
 800a404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	621a      	str	r2, [r3, #32]
}
 800a41a:	bf00      	nop
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a426:	b480      	push	{r7}
 800a428:	b087      	sub	sp, #28
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	f023 0210 	bic.w	r2, r3, #16
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	031b      	lsls	r3, r3, #12
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4313      	orrs	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	011b      	lsls	r3, r3, #4
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	621a      	str	r2, [r3, #32]
}
 800a47a:	bf00      	nop
 800a47c:	371c      	adds	r7, #28
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a49c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f043 0307 	orr.w	r3, r3, #7
 800a4a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	609a      	str	r2, [r3, #8]
}
 800a4b0:	bf00      	nop
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	021a      	lsls	r2, r3, #8
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	609a      	str	r2, [r3, #8]
}
 800a4f0:	bf00      	nop
 800a4f2:	371c      	adds	r7, #28
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d101      	bne.n	800a514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a510:	2302      	movs	r3, #2
 800a512:	e06d      	b.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a30      	ldr	r2, [pc, #192]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d004      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a2f      	ldr	r2, [pc, #188]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d108      	bne.n	800a55a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a54e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	4313      	orrs	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a20      	ldr	r2, [pc, #128]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d022      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a586:	d01d      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1d      	ldr	r2, [pc, #116]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d018      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a1c      	ldr	r2, [pc, #112]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d013      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1a      	ldr	r2, [pc, #104]	; (800a60c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00e      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a15      	ldr	r2, [pc, #84]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d009      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a16      	ldr	r2, [pc, #88]	; (800a610 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d004      	beq.n	800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a15      	ldr	r2, [pc, #84]	; (800a614 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d10c      	bne.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	40010000 	.word	0x40010000
 800a600:	40010400 	.word	0x40010400
 800a604:	40000400 	.word	0x40000400
 800a608:	40000800 	.word	0x40000800
 800a60c:	40000c00 	.word	0x40000c00
 800a610:	40014000 	.word	0x40014000
 800a614:	40001800 	.word	0x40001800

0800a618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a630:	2302      	movs	r3, #2
 800a632:	e065      	b.n	800a700 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	4313      	orrs	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	4313      	orrs	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4313      	orrs	r3, r2
 800a672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	041b      	lsls	r3, r3, #16
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a16      	ldr	r2, [pc, #88]	; (800a70c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a14      	ldr	r2, [pc, #80]	; (800a710 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d115      	bne.n	800a6ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	051b      	lsls	r3, r3, #20
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	40010000 	.word	0x40010000
 800a710:	40010400 	.word	0x40010400

0800a714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e040      	b.n	800a7e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7f8 fd20 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2224      	movs	r2, #36	; 0x24
 800a77c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0201 	bic.w	r2, r2, #1
 800a78c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f82c 	bl	800a7ec <UART_SetConfig>
 800a794:	4603      	mov	r3, r0
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e022      	b.n	800a7e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 face 	bl	800ad48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689a      	ldr	r2, [r3, #8]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f042 0201 	orr.w	r2, r2, #1
 800a7da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fb55 	bl	800ae8c <UART_CheckIdleState>
 800a7e2:	4603      	mov	r3, r0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	431a      	orrs	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	4313      	orrs	r3, r2
 800a812:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4ba6      	ldr	r3, [pc, #664]	; (800aab4 <UART_SetConfig+0x2c8>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	6939      	ldr	r1, [r7, #16]
 800a824:	430b      	orrs	r3, r1
 800a826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	430a      	orrs	r2, r1
 800a860:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a94      	ldr	r2, [pc, #592]	; (800aab8 <UART_SetConfig+0x2cc>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d120      	bne.n	800a8ae <UART_SetConfig+0xc2>
 800a86c:	4b93      	ldr	r3, [pc, #588]	; (800aabc <UART_SetConfig+0x2d0>)
 800a86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b03      	cmp	r3, #3
 800a878:	d816      	bhi.n	800a8a8 <UART_SetConfig+0xbc>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <UART_SetConfig+0x94>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a891 	.word	0x0800a891
 800a884:	0800a89d 	.word	0x0800a89d
 800a888:	0800a897 	.word	0x0800a897
 800a88c:	0800a8a3 	.word	0x0800a8a3
 800a890:	2301      	movs	r3, #1
 800a892:	77fb      	strb	r3, [r7, #31]
 800a894:	e150      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a896:	2302      	movs	r3, #2
 800a898:	77fb      	strb	r3, [r7, #31]
 800a89a:	e14d      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a89c:	2304      	movs	r3, #4
 800a89e:	77fb      	strb	r3, [r7, #31]
 800a8a0:	e14a      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a8a2:	2308      	movs	r3, #8
 800a8a4:	77fb      	strb	r3, [r7, #31]
 800a8a6:	e147      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	77fb      	strb	r3, [r7, #31]
 800a8ac:	e144      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a83      	ldr	r2, [pc, #524]	; (800aac0 <UART_SetConfig+0x2d4>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d132      	bne.n	800a91e <UART_SetConfig+0x132>
 800a8b8:	4b80      	ldr	r3, [pc, #512]	; (800aabc <UART_SetConfig+0x2d0>)
 800a8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8be:	f003 030c 	and.w	r3, r3, #12
 800a8c2:	2b0c      	cmp	r3, #12
 800a8c4:	d828      	bhi.n	800a918 <UART_SetConfig+0x12c>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <UART_SetConfig+0xe0>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a901 	.word	0x0800a901
 800a8d0:	0800a919 	.word	0x0800a919
 800a8d4:	0800a919 	.word	0x0800a919
 800a8d8:	0800a919 	.word	0x0800a919
 800a8dc:	0800a90d 	.word	0x0800a90d
 800a8e0:	0800a919 	.word	0x0800a919
 800a8e4:	0800a919 	.word	0x0800a919
 800a8e8:	0800a919 	.word	0x0800a919
 800a8ec:	0800a907 	.word	0x0800a907
 800a8f0:	0800a919 	.word	0x0800a919
 800a8f4:	0800a919 	.word	0x0800a919
 800a8f8:	0800a919 	.word	0x0800a919
 800a8fc:	0800a913 	.word	0x0800a913
 800a900:	2300      	movs	r3, #0
 800a902:	77fb      	strb	r3, [r7, #31]
 800a904:	e118      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a906:	2302      	movs	r3, #2
 800a908:	77fb      	strb	r3, [r7, #31]
 800a90a:	e115      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a90c:	2304      	movs	r3, #4
 800a90e:	77fb      	strb	r3, [r7, #31]
 800a910:	e112      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a912:	2308      	movs	r3, #8
 800a914:	77fb      	strb	r3, [r7, #31]
 800a916:	e10f      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a918:	2310      	movs	r3, #16
 800a91a:	77fb      	strb	r3, [r7, #31]
 800a91c:	e10c      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a68      	ldr	r2, [pc, #416]	; (800aac4 <UART_SetConfig+0x2d8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d120      	bne.n	800a96a <UART_SetConfig+0x17e>
 800a928:	4b64      	ldr	r3, [pc, #400]	; (800aabc <UART_SetConfig+0x2d0>)
 800a92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a932:	2b30      	cmp	r3, #48	; 0x30
 800a934:	d013      	beq.n	800a95e <UART_SetConfig+0x172>
 800a936:	2b30      	cmp	r3, #48	; 0x30
 800a938:	d814      	bhi.n	800a964 <UART_SetConfig+0x178>
 800a93a:	2b20      	cmp	r3, #32
 800a93c:	d009      	beq.n	800a952 <UART_SetConfig+0x166>
 800a93e:	2b20      	cmp	r3, #32
 800a940:	d810      	bhi.n	800a964 <UART_SetConfig+0x178>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <UART_SetConfig+0x160>
 800a946:	2b10      	cmp	r3, #16
 800a948:	d006      	beq.n	800a958 <UART_SetConfig+0x16c>
 800a94a:	e00b      	b.n	800a964 <UART_SetConfig+0x178>
 800a94c:	2300      	movs	r3, #0
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e0f2      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a952:	2302      	movs	r3, #2
 800a954:	77fb      	strb	r3, [r7, #31]
 800a956:	e0ef      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a958:	2304      	movs	r3, #4
 800a95a:	77fb      	strb	r3, [r7, #31]
 800a95c:	e0ec      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a95e:	2308      	movs	r3, #8
 800a960:	77fb      	strb	r3, [r7, #31]
 800a962:	e0e9      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a964:	2310      	movs	r3, #16
 800a966:	77fb      	strb	r3, [r7, #31]
 800a968:	e0e6      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a56      	ldr	r2, [pc, #344]	; (800aac8 <UART_SetConfig+0x2dc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d120      	bne.n	800a9b6 <UART_SetConfig+0x1ca>
 800a974:	4b51      	ldr	r3, [pc, #324]	; (800aabc <UART_SetConfig+0x2d0>)
 800a976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a97e:	2bc0      	cmp	r3, #192	; 0xc0
 800a980:	d013      	beq.n	800a9aa <UART_SetConfig+0x1be>
 800a982:	2bc0      	cmp	r3, #192	; 0xc0
 800a984:	d814      	bhi.n	800a9b0 <UART_SetConfig+0x1c4>
 800a986:	2b80      	cmp	r3, #128	; 0x80
 800a988:	d009      	beq.n	800a99e <UART_SetConfig+0x1b2>
 800a98a:	2b80      	cmp	r3, #128	; 0x80
 800a98c:	d810      	bhi.n	800a9b0 <UART_SetConfig+0x1c4>
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <UART_SetConfig+0x1ac>
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d006      	beq.n	800a9a4 <UART_SetConfig+0x1b8>
 800a996:	e00b      	b.n	800a9b0 <UART_SetConfig+0x1c4>
 800a998:	2300      	movs	r3, #0
 800a99a:	77fb      	strb	r3, [r7, #31]
 800a99c:	e0cc      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	77fb      	strb	r3, [r7, #31]
 800a9a2:	e0c9      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a9a4:	2304      	movs	r3, #4
 800a9a6:	77fb      	strb	r3, [r7, #31]
 800a9a8:	e0c6      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a9aa:	2308      	movs	r3, #8
 800a9ac:	77fb      	strb	r3, [r7, #31]
 800a9ae:	e0c3      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	77fb      	strb	r3, [r7, #31]
 800a9b4:	e0c0      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a44      	ldr	r2, [pc, #272]	; (800aacc <UART_SetConfig+0x2e0>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d125      	bne.n	800aa0c <UART_SetConfig+0x220>
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <UART_SetConfig+0x2d0>)
 800a9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9ce:	d017      	beq.n	800aa00 <UART_SetConfig+0x214>
 800a9d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9d4:	d817      	bhi.n	800aa06 <UART_SetConfig+0x21a>
 800a9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9da:	d00b      	beq.n	800a9f4 <UART_SetConfig+0x208>
 800a9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e0:	d811      	bhi.n	800aa06 <UART_SetConfig+0x21a>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <UART_SetConfig+0x202>
 800a9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ea:	d006      	beq.n	800a9fa <UART_SetConfig+0x20e>
 800a9ec:	e00b      	b.n	800aa06 <UART_SetConfig+0x21a>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	77fb      	strb	r3, [r7, #31]
 800a9f2:	e0a1      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	77fb      	strb	r3, [r7, #31]
 800a9f8:	e09e      	b.n	800ab38 <UART_SetConfig+0x34c>
 800a9fa:	2304      	movs	r3, #4
 800a9fc:	77fb      	strb	r3, [r7, #31]
 800a9fe:	e09b      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa00:	2308      	movs	r3, #8
 800aa02:	77fb      	strb	r3, [r7, #31]
 800aa04:	e098      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa06:	2310      	movs	r3, #16
 800aa08:	77fb      	strb	r3, [r7, #31]
 800aa0a:	e095      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a2f      	ldr	r2, [pc, #188]	; (800aad0 <UART_SetConfig+0x2e4>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d125      	bne.n	800aa62 <UART_SetConfig+0x276>
 800aa16:	4b29      	ldr	r3, [pc, #164]	; (800aabc <UART_SetConfig+0x2d0>)
 800aa18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa24:	d017      	beq.n	800aa56 <UART_SetConfig+0x26a>
 800aa26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa2a:	d817      	bhi.n	800aa5c <UART_SetConfig+0x270>
 800aa2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa30:	d00b      	beq.n	800aa4a <UART_SetConfig+0x25e>
 800aa32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa36:	d811      	bhi.n	800aa5c <UART_SetConfig+0x270>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <UART_SetConfig+0x258>
 800aa3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa40:	d006      	beq.n	800aa50 <UART_SetConfig+0x264>
 800aa42:	e00b      	b.n	800aa5c <UART_SetConfig+0x270>
 800aa44:	2301      	movs	r3, #1
 800aa46:	77fb      	strb	r3, [r7, #31]
 800aa48:	e076      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	77fb      	strb	r3, [r7, #31]
 800aa4e:	e073      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa50:	2304      	movs	r3, #4
 800aa52:	77fb      	strb	r3, [r7, #31]
 800aa54:	e070      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa56:	2308      	movs	r3, #8
 800aa58:	77fb      	strb	r3, [r7, #31]
 800aa5a:	e06d      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	77fb      	strb	r3, [r7, #31]
 800aa60:	e06a      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a1b      	ldr	r2, [pc, #108]	; (800aad4 <UART_SetConfig+0x2e8>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d138      	bne.n	800aade <UART_SetConfig+0x2f2>
 800aa6c:	4b13      	ldr	r3, [pc, #76]	; (800aabc <UART_SetConfig+0x2d0>)
 800aa6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa7a:	d017      	beq.n	800aaac <UART_SetConfig+0x2c0>
 800aa7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa80:	d82a      	bhi.n	800aad8 <UART_SetConfig+0x2ec>
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa86:	d00b      	beq.n	800aaa0 <UART_SetConfig+0x2b4>
 800aa88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8c:	d824      	bhi.n	800aad8 <UART_SetConfig+0x2ec>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <UART_SetConfig+0x2ae>
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa96:	d006      	beq.n	800aaa6 <UART_SetConfig+0x2ba>
 800aa98:	e01e      	b.n	800aad8 <UART_SetConfig+0x2ec>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	77fb      	strb	r3, [r7, #31]
 800aa9e:	e04b      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e048      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aaa6:	2304      	movs	r3, #4
 800aaa8:	77fb      	strb	r3, [r7, #31]
 800aaaa:	e045      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aaac:	2308      	movs	r3, #8
 800aaae:	77fb      	strb	r3, [r7, #31]
 800aab0:	e042      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aab2:	bf00      	nop
 800aab4:	efff69f3 	.word	0xefff69f3
 800aab8:	40011000 	.word	0x40011000
 800aabc:	40023800 	.word	0x40023800
 800aac0:	40004400 	.word	0x40004400
 800aac4:	40004800 	.word	0x40004800
 800aac8:	40004c00 	.word	0x40004c00
 800aacc:	40005000 	.word	0x40005000
 800aad0:	40011400 	.word	0x40011400
 800aad4:	40007800 	.word	0x40007800
 800aad8:	2310      	movs	r3, #16
 800aada:	77fb      	strb	r3, [r7, #31]
 800aadc:	e02c      	b.n	800ab38 <UART_SetConfig+0x34c>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a95      	ldr	r2, [pc, #596]	; (800ad38 <UART_SetConfig+0x54c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d125      	bne.n	800ab34 <UART_SetConfig+0x348>
 800aae8:	4b94      	ldr	r3, [pc, #592]	; (800ad3c <UART_SetConfig+0x550>)
 800aaea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aaf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aaf6:	d017      	beq.n	800ab28 <UART_SetConfig+0x33c>
 800aaf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aafc:	d817      	bhi.n	800ab2e <UART_SetConfig+0x342>
 800aafe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab02:	d00b      	beq.n	800ab1c <UART_SetConfig+0x330>
 800ab04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab08:	d811      	bhi.n	800ab2e <UART_SetConfig+0x342>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <UART_SetConfig+0x32a>
 800ab0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab12:	d006      	beq.n	800ab22 <UART_SetConfig+0x336>
 800ab14:	e00b      	b.n	800ab2e <UART_SetConfig+0x342>
 800ab16:	2300      	movs	r3, #0
 800ab18:	77fb      	strb	r3, [r7, #31]
 800ab1a:	e00d      	b.n	800ab38 <UART_SetConfig+0x34c>
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	e00a      	b.n	800ab38 <UART_SetConfig+0x34c>
 800ab22:	2304      	movs	r3, #4
 800ab24:	77fb      	strb	r3, [r7, #31]
 800ab26:	e007      	b.n	800ab38 <UART_SetConfig+0x34c>
 800ab28:	2308      	movs	r3, #8
 800ab2a:	77fb      	strb	r3, [r7, #31]
 800ab2c:	e004      	b.n	800ab38 <UART_SetConfig+0x34c>
 800ab2e:	2310      	movs	r3, #16
 800ab30:	77fb      	strb	r3, [r7, #31]
 800ab32:	e001      	b.n	800ab38 <UART_SetConfig+0x34c>
 800ab34:	2310      	movs	r3, #16
 800ab36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab40:	f040 8080 	bne.w	800ac44 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ab44:	7ffb      	ldrb	r3, [r7, #31]
 800ab46:	2b08      	cmp	r3, #8
 800ab48:	d85c      	bhi.n	800ac04 <UART_SetConfig+0x418>
 800ab4a:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <UART_SetConfig+0x364>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800ab75 	.word	0x0800ab75
 800ab54:	0800ab95 	.word	0x0800ab95
 800ab58:	0800abb5 	.word	0x0800abb5
 800ab5c:	0800ac05 	.word	0x0800ac05
 800ab60:	0800abcd 	.word	0x0800abcd
 800ab64:	0800ac05 	.word	0x0800ac05
 800ab68:	0800ac05 	.word	0x0800ac05
 800ab6c:	0800ac05 	.word	0x0800ac05
 800ab70:	0800abed 	.word	0x0800abed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab74:	f7fc f8b2 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 800ab78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	005a      	lsls	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	085b      	lsrs	r3, r3, #1
 800ab84:	441a      	add	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	61bb      	str	r3, [r7, #24]
        break;
 800ab92:	e03a      	b.n	800ac0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab94:	f7fc f8b6 	bl	8006d04 <HAL_RCC_GetPCLK2Freq>
 800ab98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	005a      	lsls	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	085b      	lsrs	r3, r3, #1
 800aba4:	441a      	add	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	b29b      	uxth	r3, r3
 800abb0:	61bb      	str	r3, [r7, #24]
        break;
 800abb2:	e02a      	b.n	800ac0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	085a      	lsrs	r2, r3, #1
 800abba:	4b61      	ldr	r3, [pc, #388]	; (800ad40 <UART_SetConfig+0x554>)
 800abbc:	4413      	add	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6852      	ldr	r2, [r2, #4]
 800abc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	61bb      	str	r3, [r7, #24]
        break;
 800abca:	e01e      	b.n	800ac0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abcc:	f7fb ffb4 	bl	8006b38 <HAL_RCC_GetSysClockFreq>
 800abd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	005a      	lsls	r2, r3, #1
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	441a      	add	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	61bb      	str	r3, [r7, #24]
        break;
 800abea:	e00e      	b.n	800ac0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	085b      	lsrs	r3, r3, #1
 800abf2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	61bb      	str	r3, [r7, #24]
        break;
 800ac02:	e002      	b.n	800ac0a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	75fb      	strb	r3, [r7, #23]
        break;
 800ac08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b0f      	cmp	r3, #15
 800ac0e:	d916      	bls.n	800ac3e <UART_SetConfig+0x452>
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac16:	d212      	bcs.n	800ac3e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	f023 030f 	bic.w	r3, r3, #15
 800ac20:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	085b      	lsrs	r3, r3, #1
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	897b      	ldrh	r3, [r7, #10]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	897a      	ldrh	r2, [r7, #10]
 800ac3a:	60da      	str	r2, [r3, #12]
 800ac3c:	e070      	b.n	800ad20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	75fb      	strb	r3, [r7, #23]
 800ac42:	e06d      	b.n	800ad20 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ac44:	7ffb      	ldrb	r3, [r7, #31]
 800ac46:	2b08      	cmp	r3, #8
 800ac48:	d859      	bhi.n	800acfe <UART_SetConfig+0x512>
 800ac4a:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0x464>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac75 	.word	0x0800ac75
 800ac54:	0800ac93 	.word	0x0800ac93
 800ac58:	0800acb1 	.word	0x0800acb1
 800ac5c:	0800acff 	.word	0x0800acff
 800ac60:	0800acc9 	.word	0x0800acc9
 800ac64:	0800acff 	.word	0x0800acff
 800ac68:	0800acff 	.word	0x0800acff
 800ac6c:	0800acff 	.word	0x0800acff
 800ac70:	0800ace7 	.word	0x0800ace7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac74:	f7fc f832 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 800ac78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	085a      	lsrs	r2, r3, #1
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	441a      	add	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	61bb      	str	r3, [r7, #24]
        break;
 800ac90:	e038      	b.n	800ad04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac92:	f7fc f837 	bl	8006d04 <HAL_RCC_GetPCLK2Freq>
 800ac96:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	085a      	lsrs	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	441a      	add	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acaa:	b29b      	uxth	r3, r3
 800acac:	61bb      	str	r3, [r7, #24]
        break;
 800acae:	e029      	b.n	800ad04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	085a      	lsrs	r2, r3, #1
 800acb6:	4b23      	ldr	r3, [pc, #140]	; (800ad44 <UART_SetConfig+0x558>)
 800acb8:	4413      	add	r3, r2
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6852      	ldr	r2, [r2, #4]
 800acbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	61bb      	str	r3, [r7, #24]
        break;
 800acc6:	e01d      	b.n	800ad04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acc8:	f7fb ff36 	bl	8006b38 <HAL_RCC_GetSysClockFreq>
 800accc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	085a      	lsrs	r2, r3, #1
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	441a      	add	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	61bb      	str	r3, [r7, #24]
        break;
 800ace4:	e00e      	b.n	800ad04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	085b      	lsrs	r3, r3, #1
 800acec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	61bb      	str	r3, [r7, #24]
        break;
 800acfc:	e002      	b.n	800ad04 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	75fb      	strb	r3, [r7, #23]
        break;
 800ad02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b0f      	cmp	r3, #15
 800ad08:	d908      	bls.n	800ad1c <UART_SetConfig+0x530>
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad10:	d204      	bcs.n	800ad1c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	e001      	b.n	800ad20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40007c00 	.word	0x40007c00
 800ad3c:	40023800 	.word	0x40023800
 800ad40:	01e84800 	.word	0x01e84800
 800ad44:	00f42400 	.word	0x00f42400

0800ad48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	f003 0302 	and.w	r3, r3, #2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	f003 0308 	and.w	r3, r3, #8
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00a      	beq.n	800add8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	f003 0310 	and.w	r3, r3, #16
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00a      	beq.n	800adfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01a      	beq.n	800ae5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae46:	d10a      	bne.n	800ae5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	605a      	str	r2, [r3, #4]
  }
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af02      	add	r7, sp, #8
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae9a:	f7f8 fcdb 	bl	8003854 <HAL_GetTick>
 800ae9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d10e      	bne.n	800aecc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f814 	bl	800aeea <UART_WaitOnFlagUntilTimeout>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e00a      	b.n	800aee2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	603b      	str	r3, [r7, #0]
 800aef6:	4613      	mov	r3, r2
 800aef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aefa:	e05d      	b.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af02:	d059      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af04:	f7f8 fca6 	bl	8003854 <HAL_GetTick>
 800af08:	4602      	mov	r2, r0
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	429a      	cmp	r2, r3
 800af12:	d302      	bcc.n	800af1a <UART_WaitOnFlagUntilTimeout+0x30>
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d11b      	bne.n	800af52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 0201 	bic.w	r2, r2, #1
 800af38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2220      	movs	r2, #32
 800af3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e042      	b.n	800afd8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0304 	and.w	r3, r3, #4
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d02b      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af6e:	d123      	bne.n	800afb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f022 0201 	bic.w	r2, r2, #1
 800af98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2220      	movs	r2, #32
 800af9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2220      	movs	r2, #32
 800afa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e00f      	b.n	800afd8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69da      	ldr	r2, [r3, #28]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	4013      	ands	r3, r2
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bf0c      	ite	eq
 800afc8:	2301      	moveq	r3, #1
 800afca:	2300      	movne	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	461a      	mov	r2, r3
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d092      	beq.n	800aefc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d027      	beq.n	800b04a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	4b2f      	ldr	r3, [pc, #188]	; (800b0c0 <FMC_SDRAM_Init+0xe0>)
 800b004:	4013      	ands	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b010:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b016:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b01c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b022:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b028:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b02e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b034:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b03a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	4313      	orrs	r3, r2
 800b040:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	e032      	b.n	800b0b0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b056:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b060:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b066:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <FMC_SDRAM_Init+0xe0>)
 800b078:	4013      	ands	r3, r2
 800b07a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b084:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b08a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b090:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b096:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b09c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	ffff8000 	.word	0xffff8000

0800b0c4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d02e      	beq.n	800b13c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0ea:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0fa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	3b01      	subs	r3, #1
 800b102:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b104:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b10e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	3b01      	subs	r3, #1
 800b116:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b118:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	3b01      	subs	r3, #1
 800b120:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b122:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	3b01      	subs	r3, #1
 800b12a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b12c:	4313      	orrs	r3, r2
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	609a      	str	r2, [r3, #8]
 800b13a:	e039      	b.n	800b1b0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4b1e      	ldr	r3, [pc, #120]	; (800b1c0 <FMC_SDRAM_Timing_Init+0xfc>)
 800b146:	4013      	ands	r3, r2
 800b148:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	3b01      	subs	r3, #1
 800b150:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	3b01      	subs	r3, #1
 800b158:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b15a:	4313      	orrs	r3, r2
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	4313      	orrs	r3, r2
 800b160:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b16e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b17e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	3b01      	subs	r3, #1
 800b186:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b188:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	3b01      	subs	r3, #1
 800b190:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b192:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	3b01      	subs	r3, #1
 800b19a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b19c:	4313      	orrs	r3, r2
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	ff0f0fff 	.word	0xff0f0fff

0800b1c4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b1dc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b1e6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	695a      	ldr	r2, [r3, #20]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	431a      	orrs	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b22c:	b084      	sub	sp, #16
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	f107 001c 	add.w	r0, r7, #28
 800b23a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b242:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b244:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b246:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b24a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b24e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b252:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b256:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	4b07      	ldr	r3, [pc, #28]	; (800b280 <SDMMC_Init+0x54>)
 800b264:	4013      	ands	r3, r2
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	431a      	orrs	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	b004      	add	sp, #16
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	ffff8100 	.word	0xffff8100

0800b284 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b2ac:	2002      	movs	r0, #2
 800b2ae:	f7f8 fadd 	bl	800386c <HAL_Delay>
  
  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0303 	and.w	r3, r3, #3
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b2fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b302:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	4b06      	ldr	r3, [pc, #24]	; (800b328 <SDMMC_SendCommand+0x50>)
 800b310:	4013      	ands	r3, r2
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	431a      	orrs	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	fffff000 	.word	0xfffff000

0800b32c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	b2db      	uxtb	r3, r3
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3314      	adds	r3, #20
 800b354:	461a      	mov	r2, r3
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	4413      	add	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
}  
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b392:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b398:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b39e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0

}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b3d2:	2310      	movs	r3, #16
 800b3d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3d6:	2340      	movs	r3, #64	; 0x40
 800b3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3e4:	f107 0308 	add.w	r3, r7, #8
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff ff74 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f4:	2110      	movs	r1, #16
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fa42 	bl	800b880 <SDMMC_GetCmdResp1>
 800b3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3720      	adds	r7, #32
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b416:	2311      	movs	r3, #17
 800b418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b426:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b428:	f107 0308 	add.w	r3, r7, #8
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff ff52 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b434:	f241 3288 	movw	r2, #5000	; 0x1388
 800b438:	2111      	movs	r1, #17
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fa20 	bl	800b880 <SDMMC_GetCmdResp1>
 800b440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b442:	69fb      	ldr	r3, [r7, #28]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b45a:	2312      	movs	r3, #18
 800b45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b46c:	f107 0308 	add.w	r3, r7, #8
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ff30 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b478:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47c:	2112      	movs	r1, #18
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f9fe 	bl	800b880 <SDMMC_GetCmdResp1>
 800b484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b49e:	2318      	movs	r3, #24
 800b4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4a2:	2340      	movs	r3, #64	; 0x40
 800b4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff ff0e 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c0:	2118      	movs	r1, #24
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9dc 	bl	800b880 <SDMMC_GetCmdResp1>
 800b4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3720      	adds	r7, #32
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4e2:	2319      	movs	r3, #25
 800b4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4f4:	f107 0308 	add.w	r3, r7, #8
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff feec 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b500:	f241 3288 	movw	r2, #5000	; 0x1388
 800b504:	2119      	movs	r1, #25
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f9ba 	bl	800b880 <SDMMC_GetCmdResp1>
 800b50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50e:	69fb      	ldr	r3, [r7, #28]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b524:	230c      	movs	r3, #12
 800b526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b528:	2340      	movs	r3, #64	; 0x40
 800b52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b52c:	2300      	movs	r3, #0
 800b52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b534:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b536:	f107 0308 	add.w	r3, r7, #8
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fecb 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b542:	4a05      	ldr	r2, [pc, #20]	; (800b558 <SDMMC_CmdStopTransfer+0x40>)
 800b544:	210c      	movs	r1, #12
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f99a 	bl	800b880 <SDMMC_GetCmdResp1>
 800b54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54e:	69fb      	ldr	r3, [r7, #28]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	05f5e100 	.word	0x05f5e100

0800b55c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	; 0x28
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b56c:	2307      	movs	r3, #7
 800b56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b570:	2340      	movs	r3, #64	; 0x40
 800b572:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b574:	2300      	movs	r3, #0
 800b576:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b57e:	f107 0310 	add.w	r3, r7, #16
 800b582:	4619      	mov	r1, r3
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fea7 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b58e:	2107      	movs	r1, #7
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f975 	bl	800b880 <SDMMC_GetCmdResp1>
 800b596:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3728      	adds	r7, #40	; 0x28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c0:	f107 0308 	add.w	r3, r7, #8
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff fe86 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f92f 	bl	800b830 <SDMMC_GetCmdError>
 800b5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3720      	adds	r7, #32
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b088      	sub	sp, #32
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5ec:	2308      	movs	r3, #8
 800b5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f0:	2340      	movs	r3, #64	; 0x40
 800b5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5fe:	f107 0308 	add.w	r3, r7, #8
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff fe67 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fb18 	bl	800bc40 <SDMMC_GetCmdResp7>
 800b610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b612:	69fb      	ldr	r3, [r7, #28]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3720      	adds	r7, #32
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b62a:	2337      	movs	r3, #55	; 0x37
 800b62c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b62e:	2340      	movs	r3, #64	; 0x40
 800b630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b63a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b63c:	f107 0308 	add.w	r3, r7, #8
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff fe48 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b648:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64c:	2137      	movs	r1, #55	; 0x37
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f916 	bl	800b880 <SDMMC_GetCmdResp1>
 800b654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b656:	69fb      	ldr	r3, [r7, #28]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3720      	adds	r7, #32
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <SDMMC_CmdAppOperCommand+0x44>)
 800b66e:	4313      	orrs	r3, r2
 800b670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b672:	2329      	movs	r3, #41	; 0x29
 800b674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff fe24 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fa27 	bl	800bae4 <SDMMC_GetCmdResp3>
 800b696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b698:	69fb      	ldr	r3, [r7, #28]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	80100000 	.word	0x80100000

0800b6a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6b6:	2306      	movs	r3, #6
 800b6b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ba:	2340      	movs	r3, #64	; 0x40
 800b6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c8:	f107 0308 	add.w	r3, r7, #8
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fe02 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d8:	2106      	movs	r1, #6
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f8d0 	bl	800b880 <SDMMC_GetCmdResp1>
 800b6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6f8:	2333      	movs	r3, #51	; 0x33
 800b6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6fc:	2340      	movs	r3, #64	; 0x40
 800b6fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b708:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b70a:	f107 0308 	add.w	r3, r7, #8
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7ff fde1 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b716:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71a:	2133      	movs	r1, #51	; 0x33
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f8af 	bl	800b880 <SDMMC_GetCmdResp1>
 800b722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b724:	69fb      	ldr	r3, [r7, #28]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3720      	adds	r7, #32
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b088      	sub	sp, #32
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b73a:	2302      	movs	r3, #2
 800b73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b73e:	23c0      	movs	r3, #192	; 0xc0
 800b740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b74a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b74c:	f107 0308 	add.w	r3, r7, #8
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff fdc0 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f97d 	bl	800ba58 <SDMMC_GetCmdResp2>
 800b75e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b760:	69fb      	ldr	r3, [r7, #28]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3720      	adds	r7, #32
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b088      	sub	sp, #32
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b778:	2309      	movs	r3, #9
 800b77a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b77c:	23c0      	movs	r3, #192	; 0xc0
 800b77e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b780:	2300      	movs	r3, #0
 800b782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b78a:	f107 0308 	add.w	r3, r7, #8
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff fda1 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f95e 	bl	800ba58 <SDMMC_GetCmdResp2>
 800b79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b79e:	69fb      	ldr	r3, [r7, #28]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ba:	2340      	movs	r3, #64	; 0x40
 800b7bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c8:	f107 0308 	add.w	r3, r7, #8
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fd82 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	2103      	movs	r1, #3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f9bd 	bl	800bb58 <SDMMC_GetCmdResp6>
 800b7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b088      	sub	sp, #32
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7f8:	230d      	movs	r3, #13
 800b7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff fd61 	bl	800b2d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b816:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81a:	210d      	movs	r1, #13
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f82f 	bl	800b880 <SDMMC_GetCmdResp1>
 800b822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b824:	69fb      	ldr	r3, [r7, #28]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3720      	adds	r7, #32
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b830:	b490      	push	{r4, r7}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b838:	4b0f      	ldr	r3, [pc, #60]	; (800b878 <SDMMC_GetCmdError+0x48>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a0f      	ldr	r2, [pc, #60]	; (800b87c <SDMMC_GetCmdError+0x4c>)
 800b83e:	fba2 2303 	umull	r2, r3, r2, r3
 800b842:	0a5b      	lsrs	r3, r3, #9
 800b844:	f241 3288 	movw	r2, #5000	; 0x1388
 800b848:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b84c:	4623      	mov	r3, r4
 800b84e:	1e5c      	subs	r4, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b858:	e009      	b.n	800b86e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0f2      	beq.n	800b84c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	22c5      	movs	r2, #197	; 0xc5
 800b86a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bc90      	pop	{r4, r7}
 800b876:	4770      	bx	lr
 800b878:	20000018 	.word	0x20000018
 800b87c:	10624dd3 	.word	0x10624dd3

0800b880 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	460b      	mov	r3, r1
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b88e:	4b6f      	ldr	r3, [pc, #444]	; (800ba4c <SDMMC_GetCmdResp1+0x1cc>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a6f      	ldr	r2, [pc, #444]	; (800ba50 <SDMMC_GetCmdResp1+0x1d0>)
 800b894:	fba2 2303 	umull	r2, r3, r2, r3
 800b898:	0a5b      	lsrs	r3, r3, #9
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	1e5c      	subs	r4, r3, #1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8ac:	e0c9      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0f0      	beq.n	800b8a0 <SDMMC_GetCmdResp1+0x20>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1eb      	bne.n	800b8a0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d004      	beq.n	800b8de <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8da:	2304      	movs	r3, #4
 800b8dc:	e0b1      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e0a6      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	22c5      	movs	r2, #197	; 0xc5
 800b8f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff fd16 	bl	800b32c <SDMMC_GetCommandResponse>
 800b900:	4603      	mov	r3, r0
 800b902:	461a      	mov	r2, r3
 800b904:	7afb      	ldrb	r3, [r7, #11]
 800b906:	4293      	cmp	r3, r2
 800b908:	d001      	beq.n	800b90e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e099      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b90e:	2100      	movs	r1, #0
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff fd18 	bl	800b346 <SDMMC_GetResponse>
 800b916:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	4b4e      	ldr	r3, [pc, #312]	; (800ba54 <SDMMC_GetCmdResp1+0x1d4>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b922:	2300      	movs	r3, #0
 800b924:	e08d      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	da02      	bge.n	800b932 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b92c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b930:	e087      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	e080      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b94a:	2380      	movs	r3, #128	; 0x80
 800b94c:	e079      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b95c:	e071      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b96c:	e069      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b97c:	e061      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b98c:	e059      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b99c:	e051      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9ac:	e049      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9bc:	e041      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9cc:	e039      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9dc:	e031      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9ec:	e029      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9fc:	e021      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba0c:	e019      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba1c:	e011      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba2c:	e009      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f003 0308 	and.w	r3, r3, #8
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba3c:	e001      	b.n	800ba42 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd90      	pop	{r4, r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000018 	.word	0x20000018
 800ba50:	10624dd3 	.word	0x10624dd3
 800ba54:	fdffe008 	.word	0xfdffe008

0800ba58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba58:	b490      	push	{r4, r7}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba60:	4b1e      	ldr	r3, [pc, #120]	; (800badc <SDMMC_GetCmdResp2+0x84>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1e      	ldr	r2, [pc, #120]	; (800bae0 <SDMMC_GetCmdResp2+0x88>)
 800ba66:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6a:	0a5b      	lsrs	r3, r3, #9
 800ba6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba74:	4623      	mov	r3, r4
 800ba76:	1e5c      	subs	r4, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba80:	e026      	b.n	800bad0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0f0      	beq.n	800ba74 <SDMMC_GetCmdResp2+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1eb      	bne.n	800ba74 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d004      	beq.n	800bab2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2204      	movs	r2, #4
 800baac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baae:	2304      	movs	r3, #4
 800bab0:	e00e      	b.n	800bad0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e003      	b.n	800bad0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	22c5      	movs	r2, #197	; 0xc5
 800bacc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bc90      	pop	{r4, r7}
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	20000018 	.word	0x20000018
 800bae0:	10624dd3 	.word	0x10624dd3

0800bae4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bae4:	b490      	push	{r4, r7}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800baec:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <SDMMC_GetCmdResp3+0x6c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a18      	ldr	r2, [pc, #96]	; (800bb54 <SDMMC_GetCmdResp3+0x70>)
 800baf2:	fba2 2303 	umull	r2, r3, r2, r3
 800baf6:	0a5b      	lsrs	r3, r3, #9
 800baf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb00:	4623      	mov	r3, r4
 800bb02:	1e5c      	subs	r4, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d102      	bne.n	800bb0e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb0c:	e01b      	b.n	800bb46 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0f0      	beq.n	800bb00 <SDMMC_GetCmdResp3+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1eb      	bne.n	800bb00 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2204      	movs	r2, #4
 800bb38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb3a:	2304      	movs	r3, #4
 800bb3c:	e003      	b.n	800bb46 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	22c5      	movs	r2, #197	; 0xc5
 800bb42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bc90      	pop	{r4, r7}
 800bb4e:	4770      	bx	lr
 800bb50:	20000018 	.word	0x20000018
 800bb54:	10624dd3 	.word	0x10624dd3

0800bb58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	460b      	mov	r3, r1
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb66:	4b34      	ldr	r3, [pc, #208]	; (800bc38 <SDMMC_GetCmdResp6+0xe0>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a34      	ldr	r2, [pc, #208]	; (800bc3c <SDMMC_GetCmdResp6+0xe4>)
 800bb6c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb70:	0a5b      	lsrs	r3, r3, #9
 800bb72:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb76:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	1e5c      	subs	r4, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d102      	bne.n	800bb88 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb86:	e052      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d0f0      	beq.n	800bb7a <SDMMC_GetCmdResp6+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1eb      	bne.n	800bb7a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba6:	f003 0304 	and.w	r3, r3, #4
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d004      	beq.n	800bbb8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2204      	movs	r2, #4
 800bbb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	e03a      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e02f      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff fbac 	bl	800b32c <SDMMC_GetCommandResponse>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d001      	beq.n	800bbe2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e025      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	22c5      	movs	r2, #197	; 0xc5
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbe8:	2100      	movs	r1, #0
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7ff fbab 	bl	800b346 <SDMMC_GetResponse>
 800bbf0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	0c1b      	lsrs	r3, r3, #16
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e011      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc18:	e009      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc28:	e001      	b.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd90      	pop	{r4, r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20000018 	.word	0x20000018
 800bc3c:	10624dd3 	.word	0x10624dd3

0800bc40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc40:	b490      	push	{r4, r7}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc48:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <SDMMC_GetCmdResp7+0x90>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a21      	ldr	r2, [pc, #132]	; (800bcd4 <SDMMC_GetCmdResp7+0x94>)
 800bc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc52:	0a5b      	lsrs	r3, r3, #9
 800bc54:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc5c:	4623      	mov	r3, r4
 800bc5e:	1e5c      	subs	r4, r3, #1
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d102      	bne.n	800bc6a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc68:	e02c      	b.n	800bcc4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0f0      	beq.n	800bc5c <SDMMC_GetCmdResp7+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1eb      	bne.n	800bc5c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2204      	movs	r2, #4
 800bc94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc96:	2304      	movs	r3, #4
 800bc98:	e014      	b.n	800bcc4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d004      	beq.n	800bcb0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e009      	b.n	800bcc4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2240      	movs	r2, #64	; 0x40
 800bcc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bcc2:	2300      	movs	r3, #0
  
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bc90      	pop	{r4, r7}
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	20000018 	.word	0x20000018
 800bcd4:	10624dd3 	.word	0x10624dd3

0800bcd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bcdc:	4904      	ldr	r1, [pc, #16]	; (800bcf0 <MX_FATFS_Init+0x18>)
 800bcde:	4805      	ldr	r0, [pc, #20]	; (800bcf4 <MX_FATFS_Init+0x1c>)
 800bce0:	f000 fa96 	bl	800c210 <FATFS_LinkDriver>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	4b03      	ldr	r3, [pc, #12]	; (800bcf8 <MX_FATFS_Init+0x20>)
 800bcea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bcec:	bf00      	nop
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000b5c 	.word	0x20000b5c
 800bcf4:	080269c8 	.word	0x080269c8
 800bcf8:	20000b58 	.word	0x20000b58

0800bcfc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd06:	f000 f87b 	bl	800be00 <BSP_SD_IsDetected>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d001      	beq.n	800bd14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd10:	2302      	movs	r3, #2
 800bd12:	e012      	b.n	800bd3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bd14:	480b      	ldr	r0, [pc, #44]	; (800bd44 <BSP_SD_Init+0x48>)
 800bd16:	f7fc fad9 	bl	80082cc <HAL_SD_Init>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d109      	bne.n	800bd38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bd24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd28:	4806      	ldr	r0, [pc, #24]	; (800bd44 <BSP_SD_Init+0x48>)
 800bd2a:	f7fc ff1b 	bl	8008b64 <HAL_SD_ConfigWideBusOperation>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bd38:	79fb      	ldrb	r3, [r7, #7]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	200006e8 	.word	0x200006e8

0800bd48 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	68f9      	ldr	r1, [r7, #12]
 800bd5e:	4806      	ldr	r0, [pc, #24]	; (800bd78 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bd60:	f7fc fb4c 	bl	80083fc <HAL_SD_ReadBlocks_DMA>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	200006e8 	.word	0x200006e8

0800bd7c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	68f9      	ldr	r1, [r7, #12]
 800bd92:	4806      	ldr	r0, [pc, #24]	; (800bdac <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd94:	f7fc fc1e 	bl	80085d4 <HAL_SD_WriteBlocks_DMA>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	200006e8 	.word	0x200006e8

0800bdb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bdb4:	4805      	ldr	r0, [pc, #20]	; (800bdcc <BSP_SD_GetCardState+0x1c>)
 800bdb6:	f7fc ff51 	bl	8008c5c <HAL_SD_GetCardState>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	bf14      	ite	ne
 800bdc0:	2301      	movne	r3, #1
 800bdc2:	2300      	moveq	r3, #0
 800bdc4:	b2db      	uxtb	r3, r3
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200006e8 	.word	0x200006e8

0800bdd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	4803      	ldr	r0, [pc, #12]	; (800bde8 <BSP_SD_GetCardInfo+0x18>)
 800bddc:	f7fc fe96 	bl	8008b0c <HAL_SD_GetCardInfo>
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	200006e8 	.word	0x200006e8

0800bdec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bdf4:	f000 f9b2 	bl	800c15c <BSP_SD_ReadCpltCallback>
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be06:	2301      	movs	r3, #1
 800be08:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800be0a:	f000 f80b 	bl	800be24 <BSP_PlatformIsDetected>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be14:	2300      	movs	r3, #0
 800be16:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be18:	79fb      	ldrb	r3, [r7, #7]
 800be1a:	b2db      	uxtb	r3, r3
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be2a:	2301      	movs	r3, #1
 800be2c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be32:	4806      	ldr	r0, [pc, #24]	; (800be4c <BSP_PlatformIsDetected+0x28>)
 800be34:	f7f9 fe04 	bl	8005a40 <HAL_GPIO_ReadPin>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800be3e:	2300      	movs	r3, #0
 800be40:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800be42:	79fb      	ldrb	r3, [r7, #7]
}  
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	40020800 	.word	0x40020800

0800be50 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800be58:	f000 fa26 	bl	800c2a8 <osKernelSysTick>
 800be5c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800be5e:	e006      	b.n	800be6e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be60:	f7ff ffa6 	bl	800bdb0 <BSP_SD_GetCardState>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e009      	b.n	800be82 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800be6e:	f000 fa1b 	bl	800c2a8 <osKernelSysTick>
 800be72:	4602      	mov	r2, r0
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d8f0      	bhi.n	800be60 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be96:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <SD_CheckStatus+0x38>)
 800be98:	2201      	movs	r2, #1
 800be9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be9c:	f7ff ff88 	bl	800bdb0 <BSP_SD_GetCardState>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d107      	bne.n	800beb6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bea6:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <SD_CheckStatus+0x38>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <SD_CheckStatus+0x38>)
 800beb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800beb6:	4b03      	ldr	r3, [pc, #12]	; (800bec4 <SD_CheckStatus+0x38>)
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	b2db      	uxtb	r3, r3
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20000021 	.word	0x20000021

0800bec8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bec8:	b590      	push	{r4, r7, lr}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800bed2:	4b20      	ldr	r3, [pc, #128]	; (800bf54 <SD_initialize+0x8c>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800bed8:	f000 f9da 	bl	800c290 <osKernelRunning>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d030      	beq.n	800bf44 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bee2:	f7ff ff0b 	bl	800bcfc <BSP_SD_Init>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d107      	bne.n	800befc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800beec:	79fb      	ldrb	r3, [r7, #7]
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff ffcc 	bl	800be8c <SD_CheckStatus>
 800bef4:	4603      	mov	r3, r0
 800bef6:	461a      	mov	r2, r3
 800bef8:	4b16      	ldr	r3, [pc, #88]	; (800bf54 <SD_initialize+0x8c>)
 800befa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800befc:	4b15      	ldr	r3, [pc, #84]	; (800bf54 <SD_initialize+0x8c>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d01e      	beq.n	800bf44 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800bf06:	4b14      	ldr	r3, [pc, #80]	; (800bf58 <SD_initialize+0x90>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10e      	bne.n	800bf2c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800bf0e:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <SD_initialize+0x94>)
 800bf10:	f107 0408 	add.w	r4, r7, #8
 800bf14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800bf1a:	f107 0308 	add.w	r3, r7, #8
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 fa31 	bl	800c388 <osMessageCreate>
 800bf26:	4603      	mov	r3, r0
 800bf28:	4a0b      	ldr	r2, [pc, #44]	; (800bf58 <SD_initialize+0x90>)
 800bf2a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bf2c:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <SD_initialize+0x90>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d107      	bne.n	800bf44 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800bf34:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <SD_initialize+0x8c>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	f043 0301 	orr.w	r3, r3, #1
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <SD_initialize+0x8c>)
 800bf42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bf44:	4b03      	ldr	r3, [pc, #12]	; (800bf54 <SD_initialize+0x8c>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	b2db      	uxtb	r3, r3
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	371c      	adds	r7, #28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd90      	pop	{r4, r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20000021 	.word	0x20000021
 800bf58:	20000b60 	.word	0x20000b60
 800bf5c:	08025f90 	.word	0x08025f90

0800bf60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff ff8d 	bl	800be8c <SD_CheckStatus>
 800bf72:	4603      	mov	r3, r0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08a      	sub	sp, #40	; 0x28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	603b      	str	r3, [r7, #0]
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf92:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf96:	f7ff ff5b 	bl	800be50 <SD_CheckStatusWithTimeout>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da02      	bge.n	800bfa6 <SD_read+0x2a>
  {
    return res;
 800bfa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa4:	e032      	b.n	800c00c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	68b8      	ldr	r0, [r7, #8]
 800bfac:	f7ff fecc 	bl	800bd48 <BSP_SD_ReadBlocks_DMA>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bfb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d124      	bne.n	800c008 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bfbe:	4b15      	ldr	r3, [pc, #84]	; (800c014 <SD_read+0x98>)
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	f107 0314 	add.w	r3, r7, #20
 800bfc6:	f247 5230 	movw	r2, #30000	; 0x7530
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 fa44 	bl	800c458 <osMessageGet>

    if (event.status == osEventMessage)
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	2b10      	cmp	r3, #16
 800bfd4:	d118      	bne.n	800c008 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d115      	bne.n	800c008 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bfdc:	f000 f964 	bl	800c2a8 <osKernelSysTick>
 800bfe0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bfe2:	e008      	b.n	800bff6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfe4:	f7ff fee4 	bl	800bdb0 <BSP_SD_GetCardState>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d103      	bne.n	800bff6 <SD_read+0x7a>
              {
                res = RES_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bff4:	e008      	b.n	800c008 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bff6:	f000 f957 	bl	800c2a8 <osKernelSysTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	f247 522f 	movw	r2, #29999	; 0x752f
 800c004:	4293      	cmp	r3, r2
 800c006:	d9ed      	bls.n	800bfe4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3728      	adds	r7, #40	; 0x28
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000b60 	.word	0x20000b60

0800c018 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c02e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c032:	f7ff ff0d 	bl	800be50 <SD_CheckStatusWithTimeout>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	da02      	bge.n	800c042 <SD_write+0x2a>
  {
    return res;
 800c03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c040:	e02e      	b.n	800c0a0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	68b8      	ldr	r0, [r7, #8]
 800c048:	f7ff fe98 	bl	800bd7c <BSP_SD_WriteBlocks_DMA>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d124      	bne.n	800c09c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <SD_write+0x90>)
 800c054:	6819      	ldr	r1, [r3, #0]
 800c056:	f107 0314 	add.w	r3, r7, #20
 800c05a:	f247 5230 	movw	r2, #30000	; 0x7530
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f9fa 	bl	800c458 <osMessageGet>

    if (event.status == osEventMessage)
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	2b10      	cmp	r3, #16
 800c068:	d118      	bne.n	800c09c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d115      	bne.n	800c09c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c070:	f000 f91a 	bl	800c2a8 <osKernelSysTick>
 800c074:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c076:	e008      	b.n	800c08a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c078:	f7ff fe9a 	bl	800bdb0 <BSP_SD_GetCardState>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d103      	bne.n	800c08a <SD_write+0x72>
          {
            res = RES_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c088:	e008      	b.n	800c09c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c08a:	f000 f90d 	bl	800c2a8 <osKernelSysTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	f247 522f 	movw	r2, #29999	; 0x752f
 800c098:	4293      	cmp	r3, r2
 800c09a:	d9ed      	bls.n	800c078 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3728      	adds	r7, #40	; 0x28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20000b60 	.word	0x20000b60

0800c0ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b08c      	sub	sp, #48	; 0x30
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	603a      	str	r2, [r7, #0]
 800c0b6:	71fb      	strb	r3, [r7, #7]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c0c2:	4b25      	ldr	r3, [pc, #148]	; (800c158 <SD_ioctl+0xac>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d001      	beq.n	800c0d4 <SD_ioctl+0x28>
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e03c      	b.n	800c14e <SD_ioctl+0xa2>

  switch (cmd)
 800c0d4:	79bb      	ldrb	r3, [r7, #6]
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d834      	bhi.n	800c144 <SD_ioctl+0x98>
 800c0da:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <SD_ioctl+0x34>)
 800c0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e0:	0800c0f1 	.word	0x0800c0f1
 800c0e4:	0800c0f9 	.word	0x0800c0f9
 800c0e8:	0800c111 	.word	0x0800c111
 800c0ec:	0800c12b 	.word	0x0800c12b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0f6:	e028      	b.n	800c14a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fe67 	bl	800bdd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c10e:	e01c      	b.n	800c14a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c110:	f107 030c 	add.w	r3, r7, #12
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff fe5b 	bl	800bdd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c128:	e00f      	b.n	800c14a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fe4e 	bl	800bdd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	0a5a      	lsrs	r2, r3, #9
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c142:	e002      	b.n	800c14a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c144:	2304      	movs	r3, #4
 800c146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3730      	adds	r7, #48	; 0x30
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20000021 	.word	0x20000021

0800c15c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c160:	4b04      	ldr	r3, [pc, #16]	; (800c174 <BSP_SD_ReadCpltCallback+0x18>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2200      	movs	r2, #0
 800c166:	2101      	movs	r1, #1
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 f935 	bl	800c3d8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c16e:	bf00      	nop
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	20000b60 	.word	0x20000b60

0800c178 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c178:	b480      	push	{r7}
 800c17a:	b087      	sub	sp, #28
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c186:	2301      	movs	r3, #1
 800c188:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c18e:	4b1f      	ldr	r3, [pc, #124]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c190:	7a5b      	ldrb	r3, [r3, #9]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d131      	bne.n	800c1fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c198:	4b1c      	ldr	r3, [pc, #112]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c19a:	7a5b      	ldrb	r3, [r3, #9]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	4b1a      	ldr	r3, [pc, #104]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c1a6:	4b19      	ldr	r3, [pc, #100]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1a8:	7a5b      	ldrb	r3, [r3, #9]
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	4a17      	ldr	r2, [pc, #92]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c1b6:	4b15      	ldr	r3, [pc, #84]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1b8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	461a      	mov	r2, r3
 800c1be:	4b13      	ldr	r3, [pc, #76]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1c0:	4413      	add	r3, r2
 800c1c2:	79fa      	ldrb	r2, [r7, #7]
 800c1c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c1c6:	4b11      	ldr	r3, [pc, #68]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1c8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	b2d1      	uxtb	r1, r2
 800c1d0:	4a0e      	ldr	r2, [pc, #56]	; (800c20c <FATFS_LinkDriverEx+0x94>)
 800c1d2:	7251      	strb	r1, [r2, #9]
 800c1d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c1d6:	7dbb      	ldrb	r3, [r7, #22]
 800c1d8:	3330      	adds	r3, #48	; 0x30
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	223a      	movs	r2, #58	; 0x3a
 800c1e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	3302      	adds	r3, #2
 800c1ec:	222f      	movs	r2, #47	; 0x2f
 800c1ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	3303      	adds	r3, #3
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20000b64 	.word	0x20000b64

0800c210 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c21a:	2200      	movs	r2, #0
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff ffaa 	bl	800c178 <FATFS_LinkDriverEx>
 800c224:	4603      	mov	r3, r0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c22e:	b480      	push	{r7}
 800c230:	b085      	sub	sp, #20
 800c232:	af00      	add	r7, sp, #0
 800c234:	4603      	mov	r3, r0
 800c236:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c238:	2300      	movs	r3, #0
 800c23a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c23c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c240:	2b84      	cmp	r3, #132	; 0x84
 800c242:	d005      	beq.n	800c250 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c244:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	4413      	add	r3, r2
 800c24c:	3303      	adds	r3, #3
 800c24e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c250:	68fb      	ldr	r3, [r7, #12]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c264:	f3ef 8305 	mrs	r3, IPSR
 800c268:	607b      	str	r3, [r7, #4]
  return(result);
 800c26a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bf14      	ite	ne
 800c270:	2301      	movne	r3, #1
 800c272:	2300      	moveq	r3, #0
 800c274:	b2db      	uxtb	r3, r3
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c286:	f001 fb1d 	bl	800d8c4 <vTaskStartScheduler>
  
  return osOK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c294:	f001 ff70 	bl	800e178 <xTaskGetSchedulerState>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d101      	bne.n	800c2a2 <osKernelRunning+0x12>
    return 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e000      	b.n	800c2a4 <osKernelRunning+0x14>
  else
    return 1;
 800c2a2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c2ac:	f7ff ffd7 	bl	800c25e <inHandlerMode>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c2b6:	f001 fc25 	bl	800db04 <xTaskGetTickCountFromISR>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	e002      	b.n	800c2c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c2be:	f001 fc11 	bl	800dae4 <xTaskGetTickCount>
 800c2c2:	4603      	mov	r3, r0
  }
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ca:	b089      	sub	sp, #36	; 0x24
 800c2cc:	af04      	add	r7, sp, #16
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d020      	beq.n	800c31c <osThreadCreate+0x54>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	699b      	ldr	r3, [r3, #24]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01c      	beq.n	800c31c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685c      	ldr	r4, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	691e      	ldr	r6, [r3, #16]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff ff9a 	bl	800c22e <makeFreeRtosPriority>
 800c2fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	695b      	ldr	r3, [r3, #20]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c304:	9202      	str	r2, [sp, #8]
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	9100      	str	r1, [sp, #0]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	4632      	mov	r2, r6
 800c30e:	4629      	mov	r1, r5
 800c310:	4620      	mov	r0, r4
 800c312:	f001 f8fb 	bl	800d50c <xTaskCreateStatic>
 800c316:	4603      	mov	r3, r0
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	e01c      	b.n	800c356 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685c      	ldr	r4, [r3, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c328:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff ff7c 	bl	800c22e <makeFreeRtosPriority>
 800c336:	4602      	mov	r2, r0
 800c338:	f107 030c 	add.w	r3, r7, #12
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	9200      	str	r2, [sp, #0]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	4632      	mov	r2, r6
 800c344:	4629      	mov	r1, r5
 800c346:	4620      	mov	r0, r4
 800c348:	f001 f943 	bl	800d5d2 <xTaskCreate>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d001      	beq.n	800c356 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	e000      	b.n	800c358 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c356:	68fb      	ldr	r3, [r7, #12]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c360 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <osDelay+0x16>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	e000      	b.n	800c378 <osDelay+0x18>
 800c376:	2301      	movs	r3, #1
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 fa6d 	bl	800d858 <vTaskDelay>
  
  return osOK;
 800c37e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d011      	beq.n	800c3be <osMessageCreate+0x36>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00d      	beq.n	800c3be <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6859      	ldr	r1, [r3, #4]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689a      	ldr	r2, [r3, #8]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2400      	movs	r4, #0
 800c3b4:	9400      	str	r4, [sp, #0]
 800c3b6:	f000 f9e1 	bl	800c77c <xQueueGenericCreateStatic>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	e008      	b.n	800c3d0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	f000 fa59 	bl	800c880 <xQueueGenericCreate>
 800c3ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd90      	pop	{r4, r7, pc}

0800c3d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <osMessagePut+0x1e>
    ticks = 1;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c3f6:	f7ff ff32 	bl	800c25e <inHandlerMode>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d018      	beq.n	800c432 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c400:	f107 0210 	add.w	r2, r7, #16
 800c404:	f107 0108 	add.w	r1, r7, #8
 800c408:	2300      	movs	r3, #0
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f000 fba0 	bl	800cb50 <xQueueGenericSendFromISR>
 800c410:	4603      	mov	r3, r0
 800c412:	2b01      	cmp	r3, #1
 800c414:	d001      	beq.n	800c41a <osMessagePut+0x42>
      return osErrorOS;
 800c416:	23ff      	movs	r3, #255	; 0xff
 800c418:	e018      	b.n	800c44c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d014      	beq.n	800c44a <osMessagePut+0x72>
 800c420:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <osMessagePut+0x7c>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	e00b      	b.n	800c44a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c432:	f107 0108 	add.w	r1, r7, #8
 800c436:	2300      	movs	r3, #0
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f000 fa82 	bl	800c944 <xQueueGenericSend>
 800c440:	4603      	mov	r3, r0
 800c442:	2b01      	cmp	r3, #1
 800c444:	d001      	beq.n	800c44a <osMessagePut+0x72>
      return osErrorOS;
 800c446:	23ff      	movs	r3, #255	; 0xff
 800c448:	e000      	b.n	800c44c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c458:	b590      	push	{r4, r7, lr}
 800c45a:	b08b      	sub	sp, #44	; 0x2c
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c472:	2380      	movs	r3, #128	; 0x80
 800c474:	617b      	str	r3, [r7, #20]
    return event;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	461c      	mov	r4, r3
 800c47a:	f107 0314 	add.w	r3, r7, #20
 800c47e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c486:	e054      	b.n	800c532 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c488:	2300      	movs	r3, #0
 800c48a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d103      	bne.n	800c4a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c498:	f04f 33ff 	mov.w	r3, #4294967295
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
 800c49e:	e009      	b.n	800c4b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d006      	beq.n	800c4b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <osMessageGet+0x5c>
      ticks = 1;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c4b4:	f7ff fed3 	bl	800c25e <inHandlerMode>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d01c      	beq.n	800c4f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c4be:	f107 0220 	add.w	r2, r7, #32
 800c4c2:	f107 0314 	add.w	r3, r7, #20
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	68b8      	ldr	r0, [r7, #8]
 800c4cc:	f000 fe70 	bl	800d1b0 <xQueueReceiveFromISR>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d102      	bne.n	800c4dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c4d6:	2310      	movs	r3, #16
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	e001      	b.n	800c4e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d01d      	beq.n	800c522 <osMessageGet+0xca>
 800c4e6:	4b15      	ldr	r3, [pc, #84]	; (800c53c <osMessageGet+0xe4>)
 800c4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	e014      	b.n	800c522 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c4f8:	f107 0314 	add.w	r3, r7, #20
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c500:	4619      	mov	r1, r3
 800c502:	68b8      	ldr	r0, [r7, #8]
 800c504:	f000 fc5a 	bl	800cdbc <xQueueReceive>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d102      	bne.n	800c514 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c50e:	2310      	movs	r3, #16
 800c510:	617b      	str	r3, [r7, #20]
 800c512:	e006      	b.n	800c522 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <osMessageGet+0xc6>
 800c51a:	2300      	movs	r3, #0
 800c51c:	e000      	b.n	800c520 <osMessageGet+0xc8>
 800c51e:	2340      	movs	r3, #64	; 0x40
 800c520:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	461c      	mov	r4, r3
 800c526:	f107 0314 	add.w	r3, r7, #20
 800c52a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c52e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	372c      	adds	r7, #44	; 0x2c
 800c536:	46bd      	mov	sp, r7
 800c538:	bd90      	pop	{r4, r7, pc}
 800c53a:	bf00      	nop
 800c53c:	e000ed04 	.word	0xe000ed04

0800c540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f103 0208 	add.w	r2, r3, #8
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f04f 32ff 	mov.w	r2, #4294967295
 800c558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f103 0208 	add.w	r2, r3, #8
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f103 0208 	add.w	r2, r3, #8
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c59a:	b480      	push	{r7}
 800c59c:	b085      	sub	sp, #20
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	689a      	ldr	r2, [r3, #8]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	601a      	str	r2, [r3, #0]
}
 800c5d6:	bf00      	nop
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b085      	sub	sp, #20
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d103      	bne.n	800c602 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	e00c      	b.n	800c61c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	3308      	adds	r3, #8
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	e002      	b.n	800c610 <vListInsert+0x2e>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	60fb      	str	r3, [r7, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d2f6      	bcs.n	800c60a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	601a      	str	r2, [r3, #0]
}
 800c648:	bf00      	nop
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	6892      	ldr	r2, [r2, #8]
 800c66a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	6852      	ldr	r2, [r2, #4]
 800c674:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d103      	bne.n	800c688 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689a      	ldr	r2, [r3, #8]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	1e5a      	subs	r2, r3, #1
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10c      	bne.n	800c6d6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	b672      	cpsid	i
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	b662      	cpsie	i
 800c6d0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c6d2:	bf00      	nop
 800c6d4:	e7fe      	b.n	800c6d4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c6d6:	f002 f899 	bl	800e80c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6e6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ea:	441a      	add	r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c706:	3b01      	subs	r3, #1
 800c708:	68f9      	ldr	r1, [r7, #12]
 800c70a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c70c:	fb01 f303 	mul.w	r3, r1, r3
 800c710:	441a      	add	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	22ff      	movs	r2, #255	; 0xff
 800c71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	22ff      	movs	r2, #255	; 0xff
 800c722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d114      	bne.n	800c756 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01a      	beq.n	800c76a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	3310      	adds	r3, #16
 800c738:	4618      	mov	r0, r3
 800c73a:	f001 fb57 	bl	800ddec <xTaskRemoveFromEventList>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d012      	beq.n	800c76a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c744:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <xQueueGenericReset+0xd0>)
 800c746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	e009      	b.n	800c76a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3310      	adds	r3, #16
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff fef0 	bl	800c540 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	3324      	adds	r3, #36	; 0x24
 800c764:	4618      	mov	r0, r3
 800c766:	f7ff feeb 	bl	800c540 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c76a:	f002 f883 	bl	800e874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c76e:	2301      	movs	r3, #1
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08e      	sub	sp, #56	; 0x38
 800c780:	af02      	add	r7, sp, #8
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10c      	bne.n	800c7aa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	b672      	cpsid	i
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	b662      	cpsie	i
 800c7a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10c      	bne.n	800c7ca <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b4:	b672      	cpsid	i
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	b662      	cpsie	i
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7c6:	bf00      	nop
 800c7c8:	e7fe      	b.n	800c7c8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <xQueueGenericCreateStatic+0x5a>
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <xQueueGenericCreateStatic+0x5e>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e000      	b.n	800c7dc <xQueueGenericCreateStatic+0x60>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10c      	bne.n	800c7fa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e4:	b672      	cpsid	i
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	b662      	cpsie	i
 800c7f4:	623b      	str	r3, [r7, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <xQueueGenericCreateStatic+0x8a>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <xQueueGenericCreateStatic+0x8e>
 800c806:	2301      	movs	r3, #1
 800c808:	e000      	b.n	800c80c <xQueueGenericCreateStatic+0x90>
 800c80a:	2300      	movs	r3, #0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10c      	bne.n	800c82a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c814:	b672      	cpsid	i
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	b662      	cpsie	i
 800c824:	61fb      	str	r3, [r7, #28]
}
 800c826:	bf00      	nop
 800c828:	e7fe      	b.n	800c828 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c82a:	2348      	movs	r3, #72	; 0x48
 800c82c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b48      	cmp	r3, #72	; 0x48
 800c832:	d00c      	beq.n	800c84e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	b672      	cpsid	i
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	b662      	cpsie	i
 800c848:	61bb      	str	r3, [r7, #24]
}
 800c84a:	bf00      	nop
 800c84c:	e7fe      	b.n	800c84c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c84e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00d      	beq.n	800c876 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c862:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	4613      	mov	r3, r2
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	68b9      	ldr	r1, [r7, #8]
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f000 f847 	bl	800c904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c878:	4618      	mov	r0, r3
 800c87a:	3730      	adds	r7, #48	; 0x30
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08a      	sub	sp, #40	; 0x28
 800c884:	af02      	add	r7, sp, #8
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	4613      	mov	r3, r2
 800c88c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10c      	bne.n	800c8ae <xQueueGenericCreate+0x2e>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	b672      	cpsid	i
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	b662      	cpsie	i
 800c8a8:	613b      	str	r3, [r7, #16]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d102      	bne.n	800c8ba <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61fb      	str	r3, [r7, #28]
 800c8b8:	e004      	b.n	800c8c4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	fb02 f303 	mul.w	r3, r2, r3
 800c8c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	3348      	adds	r3, #72	; 0x48
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f002 f8cb 	bl	800ea64 <pvPortMalloc>
 800c8ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d011      	beq.n	800c8fa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	3348      	adds	r3, #72	; 0x48
 800c8de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8e8:	79fa      	ldrb	r2, [r7, #7]
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	68b9      	ldr	r1, [r7, #8]
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f000 f805 	bl	800c904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8fa:	69bb      	ldr	r3, [r7, #24]
	}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3720      	adds	r7, #32
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
 800c910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d103      	bne.n	800c920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	69ba      	ldr	r2, [r7, #24]
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	e002      	b.n	800c926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c932:	2101      	movs	r1, #1
 800c934:	69b8      	ldr	r0, [r7, #24]
 800c936:	f7ff feb7 	bl	800c6a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c93a:	bf00      	nop
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
	...

0800c944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08e      	sub	sp, #56	; 0x38
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c952:	2300      	movs	r3, #0
 800c954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10c      	bne.n	800c97a <xQueueGenericSend+0x36>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	b672      	cpsid	i
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	b662      	cpsie	i
 800c974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c976:	bf00      	nop
 800c978:	e7fe      	b.n	800c978 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d103      	bne.n	800c988 <xQueueGenericSend+0x44>
 800c980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <xQueueGenericSend+0x48>
 800c988:	2301      	movs	r3, #1
 800c98a:	e000      	b.n	800c98e <xQueueGenericSend+0x4a>
 800c98c:	2300      	movs	r3, #0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10c      	bne.n	800c9ac <xQueueGenericSend+0x68>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	b672      	cpsid	i
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	b662      	cpsie	i
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d103      	bne.n	800c9ba <xQueueGenericSend+0x76>
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d101      	bne.n	800c9be <xQueueGenericSend+0x7a>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <xQueueGenericSend+0x7c>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10c      	bne.n	800c9de <xQueueGenericSend+0x9a>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	b672      	cpsid	i
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	b662      	cpsie	i
 800c9d8:	623b      	str	r3, [r7, #32]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9de:	f001 fbcb 	bl	800e178 <xTaskGetSchedulerState>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d102      	bne.n	800c9ee <xQueueGenericSend+0xaa>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <xQueueGenericSend+0xae>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e000      	b.n	800c9f4 <xQueueGenericSend+0xb0>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10c      	bne.n	800ca12 <xQueueGenericSend+0xce>
	__asm volatile
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	b672      	cpsid	i
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	b662      	cpsie	i
 800ca0c:	61fb      	str	r3, [r7, #28]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca12:	f001 fefb 	bl	800e80c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d302      	bcc.n	800ca28 <xQueueGenericSend+0xe4>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d129      	bne.n	800ca7c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	68b9      	ldr	r1, [r7, #8]
 800ca2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca2e:	f000 fc5d 	bl	800d2ec <prvCopyDataToQueue>
 800ca32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d010      	beq.n	800ca5e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3e:	3324      	adds	r3, #36	; 0x24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 f9d3 	bl	800ddec <xTaskRemoveFromEventList>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d013      	beq.n	800ca74 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca4c:	4b3f      	ldr	r3, [pc, #252]	; (800cb4c <xQueueGenericSend+0x208>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	e00a      	b.n	800ca74 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d007      	beq.n	800ca74 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca64:	4b39      	ldr	r3, [pc, #228]	; (800cb4c <xQueueGenericSend+0x208>)
 800ca66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ca74:	f001 fefe 	bl	800e874 <vPortExitCritical>
				return pdPASS;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e063      	b.n	800cb44 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca82:	f001 fef7 	bl	800e874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	e05c      	b.n	800cb44 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca90:	f107 0314 	add.w	r3, r7, #20
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 fa0d 	bl	800deb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca9e:	f001 fee9 	bl	800e874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800caa2:	f000 ff73 	bl	800d98c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800caa6:	f001 feb1 	bl	800e80c <vPortEnterCritical>
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cab0:	b25b      	sxtb	r3, r3
 800cab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab6:	d103      	bne.n	800cac0 <xQueueGenericSend+0x17c>
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cac6:	b25b      	sxtb	r3, r3
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d103      	bne.n	800cad6 <xQueueGenericSend+0x192>
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cad6:	f001 fecd 	bl	800e874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cada:	1d3a      	adds	r2, r7, #4
 800cadc:	f107 0314 	add.w	r3, r7, #20
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f001 f9fc 	bl	800dee0 <xTaskCheckForTimeOut>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d124      	bne.n	800cb38 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800caee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caf0:	f000 fcf4 	bl	800d4dc <prvIsQueueFull>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d018      	beq.n	800cb2c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	3310      	adds	r3, #16
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	4611      	mov	r1, r2
 800cb02:	4618      	mov	r0, r3
 800cb04:	f001 f94c 	bl	800dda0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb0a:	f000 fc7f 	bl	800d40c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb0e:	f000 ff4b 	bl	800d9a8 <xTaskResumeAll>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f47f af7c 	bne.w	800ca12 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800cb1a:	4b0c      	ldr	r3, [pc, #48]	; (800cb4c <xQueueGenericSend+0x208>)
 800cb1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	e772      	b.n	800ca12 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb2e:	f000 fc6d 	bl	800d40c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb32:	f000 ff39 	bl	800d9a8 <xTaskResumeAll>
 800cb36:	e76c      	b.n	800ca12 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb3a:	f000 fc67 	bl	800d40c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb3e:	f000 ff33 	bl	800d9a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3738      	adds	r7, #56	; 0x38
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	e000ed04 	.word	0xe000ed04

0800cb50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08e      	sub	sp, #56	; 0x38
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10c      	bne.n	800cb82 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	b672      	cpsid	i
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	b662      	cpsie	i
 800cb7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb7e:	bf00      	nop
 800cb80:	e7fe      	b.n	800cb80 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d103      	bne.n	800cb90 <xQueueGenericSendFromISR+0x40>
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <xQueueGenericSendFromISR+0x44>
 800cb90:	2301      	movs	r3, #1
 800cb92:	e000      	b.n	800cb96 <xQueueGenericSendFromISR+0x46>
 800cb94:	2300      	movs	r3, #0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10c      	bne.n	800cbb4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	b672      	cpsid	i
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	b662      	cpsie	i
 800cbae:	623b      	str	r3, [r7, #32]
}
 800cbb0:	bf00      	nop
 800cbb2:	e7fe      	b.n	800cbb2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d103      	bne.n	800cbc2 <xQueueGenericSendFromISR+0x72>
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d101      	bne.n	800cbc6 <xQueueGenericSendFromISR+0x76>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e000      	b.n	800cbc8 <xQueueGenericSendFromISR+0x78>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10c      	bne.n	800cbe6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	b672      	cpsid	i
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	b662      	cpsie	i
 800cbe0:	61fb      	str	r3, [r7, #28]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbe6:	f001 fef9 	bl	800e9dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cbea:	f3ef 8211 	mrs	r2, BASEPRI
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	b672      	cpsid	i
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	b662      	cpsie	i
 800cc02:	61ba      	str	r2, [r7, #24]
 800cc04:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc06:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d302      	bcc.n	800cc1c <xQueueGenericSendFromISR+0xcc>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d12c      	bne.n	800cc76 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	68b9      	ldr	r1, [r7, #8]
 800cc2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc2c:	f000 fb5e 	bl	800d2ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc30:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc38:	d112      	bne.n	800cc60 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d016      	beq.n	800cc70 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	3324      	adds	r3, #36	; 0x24
 800cc46:	4618      	mov	r0, r3
 800cc48:	f001 f8d0 	bl	800ddec <xTaskRemoveFromEventList>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00e      	beq.n	800cc70 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	e007      	b.n	800cc70 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc64:	3301      	adds	r3, #1
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	b25a      	sxtb	r2, r3
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc70:	2301      	movs	r3, #1
 800cc72:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cc74:	e001      	b.n	800cc7a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc76:	2300      	movs	r3, #0
 800cc78:	637b      	str	r3, [r7, #52]	; 0x34
 800cc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cc84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3738      	adds	r7, #56	; 0x38
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08e      	sub	sp, #56	; 0x38
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10c      	bne.n	800ccbe <xQueueGiveFromISR+0x2e>
	__asm volatile
 800cca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca8:	b672      	cpsid	i
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	b662      	cpsie	i
 800ccb8:	623b      	str	r3, [r7, #32]
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00c      	beq.n	800cce0 <xQueueGiveFromISR+0x50>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	b672      	cpsid	i
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	b662      	cpsie	i
 800ccda:	61fb      	str	r3, [r7, #28]
}
 800ccdc:	bf00      	nop
 800ccde:	e7fe      	b.n	800ccde <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d103      	bne.n	800ccf0 <xQueueGiveFromISR+0x60>
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d101      	bne.n	800ccf4 <xQueueGiveFromISR+0x64>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e000      	b.n	800ccf6 <xQueueGiveFromISR+0x66>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10c      	bne.n	800cd14 <xQueueGiveFromISR+0x84>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	b672      	cpsid	i
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	b662      	cpsie	i
 800cd0e:	61bb      	str	r3, [r7, #24]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd14:	f001 fe62 	bl	800e9dc <vPortValidateInterruptPriority>
	__asm volatile
 800cd18:	f3ef 8211 	mrs	r2, BASEPRI
 800cd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd20:	b672      	cpsid	i
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	b662      	cpsie	i
 800cd30:	617a      	str	r2, [r7, #20]
 800cd32:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cd34:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd36:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d22b      	bcs.n	800cda0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd62:	d112      	bne.n	800cd8a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d016      	beq.n	800cd9a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	3324      	adds	r3, #36	; 0x24
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 f83b 	bl	800ddec <xTaskRemoveFromEventList>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00e      	beq.n	800cd9a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00b      	beq.n	800cd9a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2201      	movs	r2, #1
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	e007      	b.n	800cd9a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd8e:	3301      	adds	r3, #1
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	b25a      	sxtb	r2, r3
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd9e:	e001      	b.n	800cda4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	637b      	str	r3, [r7, #52]	; 0x34
 800cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f383 8811 	msr	BASEPRI, r3
}
 800cdae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3738      	adds	r7, #56	; 0x38
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08c      	sub	sp, #48	; 0x30
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10c      	bne.n	800cdf0 <xQueueReceive+0x34>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	b672      	cpsid	i
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	b662      	cpsie	i
 800cdea:	623b      	str	r3, [r7, #32]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d103      	bne.n	800cdfe <xQueueReceive+0x42>
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d101      	bne.n	800ce02 <xQueueReceive+0x46>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <xQueueReceive+0x48>
 800ce02:	2300      	movs	r3, #0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10c      	bne.n	800ce22 <xQueueReceive+0x66>
	__asm volatile
 800ce08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0c:	b672      	cpsid	i
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	b662      	cpsie	i
 800ce1c:	61fb      	str	r3, [r7, #28]
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce22:	f001 f9a9 	bl	800e178 <xTaskGetSchedulerState>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <xQueueReceive+0x76>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <xQueueReceive+0x7a>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <xQueueReceive+0x7c>
 800ce36:	2300      	movs	r3, #0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10c      	bne.n	800ce56 <xQueueReceive+0x9a>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	b672      	cpsid	i
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	b662      	cpsie	i
 800ce50:	61bb      	str	r3, [r7, #24]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce56:	f001 fcd9 	bl	800e80c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d01f      	beq.n	800cea6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce66:	68b9      	ldr	r1, [r7, #8]
 800ce68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6a:	f000 faa9 	bl	800d3c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	1e5a      	subs	r2, r3, #1
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00f      	beq.n	800ce9e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	3310      	adds	r3, #16
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 ffb2 	bl	800ddec <xTaskRemoveFromEventList>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d007      	beq.n	800ce9e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce8e:	4b3d      	ldr	r3, [pc, #244]	; (800cf84 <xQueueReceive+0x1c8>)
 800ce90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce9e:	f001 fce9 	bl	800e874 <vPortExitCritical>
				return pdPASS;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e069      	b.n	800cf7a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ceac:	f001 fce2 	bl	800e874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e062      	b.n	800cf7a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ceba:	f107 0310 	add.w	r3, r7, #16
 800cebe:	4618      	mov	r0, r3
 800cec0:	f000 fff8 	bl	800deb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cec4:	2301      	movs	r3, #1
 800cec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cec8:	f001 fcd4 	bl	800e874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cecc:	f000 fd5e 	bl	800d98c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ced0:	f001 fc9c 	bl	800e80c <vPortEnterCritical>
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceda:	b25b      	sxtb	r3, r3
 800cedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee0:	d103      	bne.n	800ceea <xQueueReceive+0x12e>
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cef0:	b25b      	sxtb	r3, r3
 800cef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef6:	d103      	bne.n	800cf00 <xQueueReceive+0x144>
 800cef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf00:	f001 fcb8 	bl	800e874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf04:	1d3a      	adds	r2, r7, #4
 800cf06:	f107 0310 	add.w	r3, r7, #16
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f000 ffe7 	bl	800dee0 <xTaskCheckForTimeOut>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d123      	bne.n	800cf60 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf1a:	f000 fac9 	bl	800d4b0 <prvIsQueueEmpty>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d017      	beq.n	800cf54 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf26:	3324      	adds	r3, #36	; 0x24
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 ff37 	bl	800dda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf34:	f000 fa6a 	bl	800d40c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf38:	f000 fd36 	bl	800d9a8 <xTaskResumeAll>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d189      	bne.n	800ce56 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800cf42:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <xQueueReceive+0x1c8>)
 800cf44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	e780      	b.n	800ce56 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cf54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf56:	f000 fa59 	bl	800d40c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf5a:	f000 fd25 	bl	800d9a8 <xTaskResumeAll>
 800cf5e:	e77a      	b.n	800ce56 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cf60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf62:	f000 fa53 	bl	800d40c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf66:	f000 fd1f 	bl	800d9a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf6c:	f000 faa0 	bl	800d4b0 <prvIsQueueEmpty>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f43f af6f 	beq.w	800ce56 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3730      	adds	r7, #48	; 0x30
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	e000ed04 	.word	0xe000ed04

0800cf88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08e      	sub	sp, #56	; 0x38
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf92:	2300      	movs	r3, #0
 800cf94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10c      	bne.n	800cfbe <xQueueSemaphoreTake+0x36>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	b672      	cpsid	i
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	b662      	cpsie	i
 800cfb8:	623b      	str	r3, [r7, #32]
}
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00c      	beq.n	800cfe0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	b672      	cpsid	i
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	b662      	cpsie	i
 800cfda:	61fb      	str	r3, [r7, #28]
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfe0:	f001 f8ca 	bl	800e178 <xTaskGetSchedulerState>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d102      	bne.n	800cff0 <xQueueSemaphoreTake+0x68>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <xQueueSemaphoreTake+0x6c>
 800cff0:	2301      	movs	r3, #1
 800cff2:	e000      	b.n	800cff6 <xQueueSemaphoreTake+0x6e>
 800cff4:	2300      	movs	r3, #0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10c      	bne.n	800d014 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	b672      	cpsid	i
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	b662      	cpsie	i
 800d00e:	61bb      	str	r3, [r7, #24]
}
 800d010:	bf00      	nop
 800d012:	e7fe      	b.n	800d012 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d014:	f001 fbfa 	bl	800e80c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d020:	2b00      	cmp	r3, #0
 800d022:	d024      	beq.n	800d06e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	1e5a      	subs	r2, r3, #1
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d104      	bne.n	800d03e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d034:	f001 fa66 	bl	800e504 <pvTaskIncrementMutexHeldCount>
 800d038:	4602      	mov	r2, r0
 800d03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00f      	beq.n	800d066 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	3310      	adds	r3, #16
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 fece 	bl	800ddec <xTaskRemoveFromEventList>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d007      	beq.n	800d066 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d056:	4b55      	ldr	r3, [pc, #340]	; (800d1ac <xQueueSemaphoreTake+0x224>)
 800d058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05c:	601a      	str	r2, [r3, #0]
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d066:	f001 fc05 	bl	800e874 <vPortExitCritical>
				return pdPASS;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e099      	b.n	800d1a2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d113      	bne.n	800d09c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00c      	beq.n	800d094 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	b672      	cpsid	i
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	b662      	cpsie	i
 800d08e:	617b      	str	r3, [r7, #20]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d094:	f001 fbee 	bl	800e874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d098:	2300      	movs	r3, #0
 800d09a:	e082      	b.n	800d1a2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0a2:	f107 030c 	add.w	r3, r7, #12
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 ff04 	bl	800deb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0b0:	f001 fbe0 	bl	800e874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0b4:	f000 fc6a 	bl	800d98c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0b8:	f001 fba8 	bl	800e80c <vPortEnterCritical>
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0c2:	b25b      	sxtb	r3, r3
 800d0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c8:	d103      	bne.n	800d0d2 <xQueueSemaphoreTake+0x14a>
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0d8:	b25b      	sxtb	r3, r3
 800d0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0de:	d103      	bne.n	800d0e8 <xQueueSemaphoreTake+0x160>
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0e8:	f001 fbc4 	bl	800e874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0ec:	463a      	mov	r2, r7
 800d0ee:	f107 030c 	add.w	r3, r7, #12
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 fef3 	bl	800dee0 <xTaskCheckForTimeOut>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d132      	bne.n	800d166 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d102:	f000 f9d5 	bl	800d4b0 <prvIsQueueEmpty>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d026      	beq.n	800d15a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d109      	bne.n	800d128 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d114:	f001 fb7a 	bl	800e80c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f001 f849 	bl	800e1b4 <xTaskPriorityInherit>
 800d122:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d124:	f001 fba6 	bl	800e874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	3324      	adds	r3, #36	; 0x24
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	4611      	mov	r1, r2
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fe35 	bl	800dda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d138:	f000 f968 	bl	800d40c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d13c:	f000 fc34 	bl	800d9a8 <xTaskResumeAll>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	f47f af66 	bne.w	800d014 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d148:	4b18      	ldr	r3, [pc, #96]	; (800d1ac <xQueueSemaphoreTake+0x224>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	e75c      	b.n	800d014 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d15a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d15c:	f000 f956 	bl	800d40c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d160:	f000 fc22 	bl	800d9a8 <xTaskResumeAll>
 800d164:	e756      	b.n	800d014 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d168:	f000 f950 	bl	800d40c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d16c:	f000 fc1c 	bl	800d9a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d172:	f000 f99d 	bl	800d4b0 <prvIsQueueEmpty>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f43f af4b 	beq.w	800d014 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00d      	beq.n	800d1a0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d184:	f001 fb42 	bl	800e80c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d18a:	f000 f897 	bl	800d2bc <prvGetDisinheritPriorityAfterTimeout>
 800d18e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d196:	4618      	mov	r0, r3
 800d198:	f001 f916 	bl	800e3c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d19c:	f001 fb6a 	bl	800e874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3738      	adds	r7, #56	; 0x38
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	e000ed04 	.word	0xe000ed04

0800d1b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08e      	sub	sp, #56	; 0x38
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10c      	bne.n	800d1e0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ca:	b672      	cpsid	i
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	b662      	cpsie	i
 800d1da:	623b      	str	r3, [r7, #32]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d103      	bne.n	800d1ee <xQueueReceiveFromISR+0x3e>
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <xQueueReceiveFromISR+0x42>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <xQueueReceiveFromISR+0x44>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10c      	bne.n	800d212 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	b672      	cpsid	i
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	b662      	cpsie	i
 800d20c:	61fb      	str	r3, [r7, #28]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d212:	f001 fbe3 	bl	800e9dc <vPortValidateInterruptPriority>
	__asm volatile
 800d216:	f3ef 8211 	mrs	r2, BASEPRI
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	b672      	cpsid	i
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	b662      	cpsie	i
 800d22e:	61ba      	str	r2, [r7, #24]
 800d230:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d232:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d02f      	beq.n	800d2a2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d250:	f000 f8b6 	bl	800d3c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	1e5a      	subs	r2, r3, #1
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d264:	d112      	bne.n	800d28c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d016      	beq.n	800d29c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	3310      	adds	r3, #16
 800d272:	4618      	mov	r0, r3
 800d274:	f000 fdba 	bl	800ddec <xTaskRemoveFromEventList>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00e      	beq.n	800d29c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00b      	beq.n	800d29c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	e007      	b.n	800d29c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d290:	3301      	adds	r3, #1
 800d292:	b2db      	uxtb	r3, r3
 800d294:	b25a      	sxtb	r2, r3
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d29c:	2301      	movs	r3, #1
 800d29e:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a0:	e001      	b.n	800d2a6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f383 8811 	msr	BASEPRI, r3
}
 800d2b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3738      	adds	r7, #56	; 0x38
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d006      	beq.n	800d2da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f1c3 0307 	rsb	r3, r3, #7
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	e001      	b.n	800d2de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d2de:	68fb      	ldr	r3, [r7, #12]
	}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10d      	bne.n	800d326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d14d      	bne.n	800d3ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 ffcc 	bl	800e2b4 <xTaskPriorityDisinherit>
 800d31c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	609a      	str	r2, [r3, #8]
 800d324:	e043      	b.n	800d3ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d119      	bne.n	800d360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6858      	ldr	r0, [r3, #4]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d334:	461a      	mov	r2, r3
 800d336:	68b9      	ldr	r1, [r7, #8]
 800d338:	f018 f890 	bl	802545c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d344:	441a      	add	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	429a      	cmp	r2, r3
 800d354:	d32b      	bcc.n	800d3ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	605a      	str	r2, [r3, #4]
 800d35e:	e026      	b.n	800d3ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	68d8      	ldr	r0, [r3, #12]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d368:	461a      	mov	r2, r3
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	f018 f876 	bl	802545c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	68da      	ldr	r2, [r3, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d378:	425b      	negs	r3, r3
 800d37a:	441a      	add	r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	68da      	ldr	r2, [r3, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d207      	bcs.n	800d39c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	689a      	ldr	r2, [r3, #8]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d394:	425b      	negs	r3, r3
 800d396:	441a      	add	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d105      	bne.n	800d3ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3b6:	697b      	ldr	r3, [r7, #20]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d018      	beq.n	800d404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68da      	ldr	r2, [r3, #12]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3da:	441a      	add	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d303      	bcc.n	800d3f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68d9      	ldr	r1, [r3, #12]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6838      	ldr	r0, [r7, #0]
 800d400:	f018 f82c 	bl	802545c <memcpy>
	}
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d414:	f001 f9fa 	bl	800e80c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d41e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d420:	e011      	b.n	800d446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d426:	2b00      	cmp	r3, #0
 800d428:	d012      	beq.n	800d450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3324      	adds	r3, #36	; 0x24
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fcdc 	bl	800ddec <xTaskRemoveFromEventList>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d43a:	f000 fdb7 	bl	800dfac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	3b01      	subs	r3, #1
 800d442:	b2db      	uxtb	r3, r3
 800d444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	dce9      	bgt.n	800d422 <prvUnlockQueue+0x16>
 800d44e:	e000      	b.n	800d452 <prvUnlockQueue+0x46>
					break;
 800d450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	22ff      	movs	r2, #255	; 0xff
 800d456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d45a:	f001 fa0b 	bl	800e874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d45e:	f001 f9d5 	bl	800e80c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d46a:	e011      	b.n	800d490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d012      	beq.n	800d49a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	3310      	adds	r3, #16
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 fcb7 	bl	800ddec <xTaskRemoveFromEventList>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d484:	f000 fd92 	bl	800dfac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d488:	7bbb      	ldrb	r3, [r7, #14]
 800d48a:	3b01      	subs	r3, #1
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d494:	2b00      	cmp	r3, #0
 800d496:	dce9      	bgt.n	800d46c <prvUnlockQueue+0x60>
 800d498:	e000      	b.n	800d49c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d49a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	22ff      	movs	r2, #255	; 0xff
 800d4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d4a4:	f001 f9e6 	bl	800e874 <vPortExitCritical>
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4b8:	f001 f9a8 	bl	800e80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d102      	bne.n	800d4ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	e001      	b.n	800d4ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4ce:	f001 f9d1 	bl	800e874 <vPortExitCritical>

	return xReturn;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4e4:	f001 f992 	bl	800e80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d102      	bne.n	800d4fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	e001      	b.n	800d4fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4fe:	f001 f9b9 	bl	800e874 <vPortExitCritical>

	return xReturn;
 800d502:	68fb      	ldr	r3, [r7, #12]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3710      	adds	r7, #16
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08e      	sub	sp, #56	; 0x38
 800d510:	af04      	add	r7, sp, #16
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10c      	bne.n	800d53a <xTaskCreateStatic+0x2e>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	b672      	cpsid	i
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	b662      	cpsie	i
 800d534:	623b      	str	r3, [r7, #32]
}
 800d536:	bf00      	nop
 800d538:	e7fe      	b.n	800d538 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10c      	bne.n	800d55a <xTaskCreateStatic+0x4e>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d544:	b672      	cpsid	i
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	b662      	cpsie	i
 800d554:	61fb      	str	r3, [r7, #28]
}
 800d556:	bf00      	nop
 800d558:	e7fe      	b.n	800d558 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d55a:	2358      	movs	r3, #88	; 0x58
 800d55c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b58      	cmp	r3, #88	; 0x58
 800d562:	d00c      	beq.n	800d57e <xTaskCreateStatic+0x72>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	b672      	cpsid	i
 800d56a:	f383 8811 	msr	BASEPRI, r3
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f3bf 8f4f 	dsb	sy
 800d576:	b662      	cpsie	i
 800d578:	61bb      	str	r3, [r7, #24]
}
 800d57a:	bf00      	nop
 800d57c:	e7fe      	b.n	800d57c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d57e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	2b00      	cmp	r3, #0
 800d584:	d01e      	beq.n	800d5c4 <xTaskCreateStatic+0xb8>
 800d586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01b      	beq.n	800d5c4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d594:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	2202      	movs	r2, #2
 800d59a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9303      	str	r3, [sp, #12]
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	9302      	str	r3, [sp, #8]
 800d5a6:	f107 0314 	add.w	r3, r7, #20
 800d5aa:	9301      	str	r3, [sp, #4]
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	68b9      	ldr	r1, [r7, #8]
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f000 f850 	bl	800d65c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5be:	f000 f8e1 	bl	800d784 <prvAddNewTaskToReadyList>
 800d5c2:	e001      	b.n	800d5c8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5c8:	697b      	ldr	r3, [r7, #20]
	}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3728      	adds	r7, #40	; 0x28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b08c      	sub	sp, #48	; 0x30
 800d5d6:	af04      	add	r7, sp, #16
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	603b      	str	r3, [r7, #0]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f001 fa3c 	bl	800ea64 <pvPortMalloc>
 800d5ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00e      	beq.n	800d612 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5f4:	2058      	movs	r0, #88	; 0x58
 800d5f6:	f001 fa35 	bl	800ea64 <pvPortMalloc>
 800d5fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d003      	beq.n	800d60a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	697a      	ldr	r2, [r7, #20]
 800d606:	631a      	str	r2, [r3, #48]	; 0x30
 800d608:	e005      	b.n	800d616 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d60a:	6978      	ldr	r0, [r7, #20]
 800d60c:	f001 fafa 	bl	800ec04 <vPortFree>
 800d610:	e001      	b.n	800d616 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d017      	beq.n	800d64c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d624:	88fa      	ldrh	r2, [r7, #6]
 800d626:	2300      	movs	r3, #0
 800d628:	9303      	str	r3, [sp, #12]
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	9302      	str	r3, [sp, #8]
 800d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	68b9      	ldr	r1, [r7, #8]
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f000 f80e 	bl	800d65c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d640:	69f8      	ldr	r0, [r7, #28]
 800d642:	f000 f89f 	bl	800d784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d646:	2301      	movs	r3, #1
 800d648:	61bb      	str	r3, [r7, #24]
 800d64a:	e002      	b.n	800d652 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d64c:	f04f 33ff 	mov.w	r3, #4294967295
 800d650:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d652:	69bb      	ldr	r3, [r7, #24]
	}
 800d654:	4618      	mov	r0, r3
 800d656:	3720      	adds	r7, #32
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	461a      	mov	r2, r3
 800d674:	21a5      	movs	r1, #165	; 0xa5
 800d676:	f017 fe22 	bl	80252be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d684:	440b      	add	r3, r1
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4413      	add	r3, r2
 800d68a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	f023 0307 	bic.w	r3, r3, #7
 800d692:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	f003 0307 	and.w	r3, r3, #7
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00c      	beq.n	800d6b8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	b672      	cpsid	i
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	b662      	cpsie	i
 800d6b2:	617b      	str	r3, [r7, #20]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01f      	beq.n	800d6fe <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61fb      	str	r3, [r7, #28]
 800d6c2:	e012      	b.n	800d6ea <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	7819      	ldrb	r1, [r3, #0]
 800d6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	3334      	adds	r3, #52	; 0x34
 800d6d4:	460a      	mov	r2, r1
 800d6d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	4413      	add	r3, r2
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d006      	beq.n	800d6f2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	61fb      	str	r3, [r7, #28]
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	2b0f      	cmp	r3, #15
 800d6ee:	d9e9      	bls.n	800d6c4 <prvInitialiseNewTask+0x68>
 800d6f0:	e000      	b.n	800d6f4 <prvInitialiseNewTask+0x98>
			{
				break;
 800d6f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6fc:	e003      	b.n	800d706 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	2b06      	cmp	r3, #6
 800d70a:	d901      	bls.n	800d710 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d70c:	2306      	movs	r3, #6
 800d70e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d714:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d71a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	2200      	movs	r2, #0
 800d720:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	3304      	adds	r3, #4
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe ff2a 	bl	800c580 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	3318      	adds	r3, #24
 800d730:	4618      	mov	r0, r3
 800d732:	f7fe ff25 	bl	800c580 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d73a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	f1c3 0207 	rsb	r2, r3, #7
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d74a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	2200      	movs	r2, #0
 800d750:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d754:	2200      	movs	r2, #0
 800d756:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75a:	2200      	movs	r2, #0
 800d75c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	68f9      	ldr	r1, [r7, #12]
 800d764:	69b8      	ldr	r0, [r7, #24]
 800d766:	f000 ff47 	bl	800e5f8 <pxPortInitialiseStack>
 800d76a:	4602      	mov	r2, r0
 800d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d77c:	bf00      	nop
 800d77e:	3720      	adds	r7, #32
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d78c:	f001 f83e 	bl	800e80c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d790:	4b2a      	ldr	r3, [pc, #168]	; (800d83c <prvAddNewTaskToReadyList+0xb8>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3301      	adds	r3, #1
 800d796:	4a29      	ldr	r2, [pc, #164]	; (800d83c <prvAddNewTaskToReadyList+0xb8>)
 800d798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d79a:	4b29      	ldr	r3, [pc, #164]	; (800d840 <prvAddNewTaskToReadyList+0xbc>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d109      	bne.n	800d7b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7a2:	4a27      	ldr	r2, [pc, #156]	; (800d840 <prvAddNewTaskToReadyList+0xbc>)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7a8:	4b24      	ldr	r3, [pc, #144]	; (800d83c <prvAddNewTaskToReadyList+0xb8>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d110      	bne.n	800d7d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7b0:	f000 fc22 	bl	800dff8 <prvInitialiseTaskLists>
 800d7b4:	e00d      	b.n	800d7d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7b6:	4b23      	ldr	r3, [pc, #140]	; (800d844 <prvAddNewTaskToReadyList+0xc0>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d109      	bne.n	800d7d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7be:	4b20      	ldr	r3, [pc, #128]	; (800d840 <prvAddNewTaskToReadyList+0xbc>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d802      	bhi.n	800d7d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7cc:	4a1c      	ldr	r2, [pc, #112]	; (800d840 <prvAddNewTaskToReadyList+0xbc>)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7d2:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <prvAddNewTaskToReadyList+0xc4>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	4a1b      	ldr	r2, [pc, #108]	; (800d848 <prvAddNewTaskToReadyList+0xc4>)
 800d7da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	409a      	lsls	r2, r3
 800d7e4:	4b19      	ldr	r3, [pc, #100]	; (800d84c <prvAddNewTaskToReadyList+0xc8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	4a18      	ldr	r2, [pc, #96]	; (800d84c <prvAddNewTaskToReadyList+0xc8>)
 800d7ec:	6013      	str	r3, [r2, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4a15      	ldr	r2, [pc, #84]	; (800d850 <prvAddNewTaskToReadyList+0xcc>)
 800d7fc:	441a      	add	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3304      	adds	r3, #4
 800d802:	4619      	mov	r1, r3
 800d804:	4610      	mov	r0, r2
 800d806:	f7fe fec8 	bl	800c59a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d80a:	f001 f833 	bl	800e874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d80e:	4b0d      	ldr	r3, [pc, #52]	; (800d844 <prvAddNewTaskToReadyList+0xc0>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00e      	beq.n	800d834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d816:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <prvAddNewTaskToReadyList+0xbc>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d820:	429a      	cmp	r2, r3
 800d822:	d207      	bcs.n	800d834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d824:	4b0b      	ldr	r3, [pc, #44]	; (800d854 <prvAddNewTaskToReadyList+0xd0>)
 800d826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	20000c70 	.word	0x20000c70
 800d840:	20000b70 	.word	0x20000b70
 800d844:	20000c7c 	.word	0x20000c7c
 800d848:	20000c8c 	.word	0x20000c8c
 800d84c:	20000c78 	.word	0x20000c78
 800d850:	20000b74 	.word	0x20000b74
 800d854:	e000ed04 	.word	0xe000ed04

0800d858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d860:	2300      	movs	r3, #0
 800d862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d019      	beq.n	800d89e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d86a:	4b14      	ldr	r3, [pc, #80]	; (800d8bc <vTaskDelay+0x64>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00c      	beq.n	800d88c <vTaskDelay+0x34>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	b672      	cpsid	i
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	b662      	cpsie	i
 800d886:	60bb      	str	r3, [r7, #8]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d88c:	f000 f87e 	bl	800d98c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d890:	2100      	movs	r1, #0
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fe4a 	bl	800e52c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d898:	f000 f886 	bl	800d9a8 <xTaskResumeAll>
 800d89c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d107      	bne.n	800d8b4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d8a4:	4b06      	ldr	r3, [pc, #24]	; (800d8c0 <vTaskDelay+0x68>)
 800d8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20000c98 	.word	0x20000c98
 800d8c0:	e000ed04 	.word	0xe000ed04

0800d8c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08a      	sub	sp, #40	; 0x28
 800d8c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8d2:	463a      	mov	r2, r7
 800d8d4:	1d39      	adds	r1, r7, #4
 800d8d6:	f107 0308 	add.w	r3, r7, #8
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7f3 f914 	bl	8000b08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	9202      	str	r2, [sp, #8]
 800d8e8:	9301      	str	r3, [sp, #4]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	460a      	mov	r2, r1
 800d8f2:	4920      	ldr	r1, [pc, #128]	; (800d974 <vTaskStartScheduler+0xb0>)
 800d8f4:	4820      	ldr	r0, [pc, #128]	; (800d978 <vTaskStartScheduler+0xb4>)
 800d8f6:	f7ff fe09 	bl	800d50c <xTaskCreateStatic>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	4a1f      	ldr	r2, [pc, #124]	; (800d97c <vTaskStartScheduler+0xb8>)
 800d8fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d900:	4b1e      	ldr	r3, [pc, #120]	; (800d97c <vTaskStartScheduler+0xb8>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d908:	2301      	movs	r3, #1
 800d90a:	617b      	str	r3, [r7, #20]
 800d90c:	e001      	b.n	800d912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d90e:	2300      	movs	r3, #0
 800d910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d118      	bne.n	800d94a <vTaskStartScheduler+0x86>
	__asm volatile
 800d918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91c:	b672      	cpsid	i
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	b662      	cpsie	i
 800d92c:	613b      	str	r3, [r7, #16]
}
 800d92e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d930:	4b13      	ldr	r3, [pc, #76]	; (800d980 <vTaskStartScheduler+0xbc>)
 800d932:	f04f 32ff 	mov.w	r2, #4294967295
 800d936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d938:	4b12      	ldr	r3, [pc, #72]	; (800d984 <vTaskStartScheduler+0xc0>)
 800d93a:	2201      	movs	r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d93e:	4b12      	ldr	r3, [pc, #72]	; (800d988 <vTaskStartScheduler+0xc4>)
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d944:	f000 fee4 	bl	800e710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d948:	e010      	b.n	800d96c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d950:	d10c      	bne.n	800d96c <vTaskStartScheduler+0xa8>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	b672      	cpsid	i
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	b662      	cpsie	i
 800d966:	60fb      	str	r3, [r7, #12]
}
 800d968:	bf00      	nop
 800d96a:	e7fe      	b.n	800d96a <vTaskStartScheduler+0xa6>
}
 800d96c:	bf00      	nop
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	08025fa0 	.word	0x08025fa0
 800d978:	0800dfc5 	.word	0x0800dfc5
 800d97c:	20000c94 	.word	0x20000c94
 800d980:	20000c90 	.word	0x20000c90
 800d984:	20000c7c 	.word	0x20000c7c
 800d988:	20000c74 	.word	0x20000c74

0800d98c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d990:	4b04      	ldr	r3, [pc, #16]	; (800d9a4 <vTaskSuspendAll+0x18>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3301      	adds	r3, #1
 800d996:	4a03      	ldr	r2, [pc, #12]	; (800d9a4 <vTaskSuspendAll+0x18>)
 800d998:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d99a:	bf00      	nop
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	20000c98 	.word	0x20000c98

0800d9a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9b6:	4b42      	ldr	r3, [pc, #264]	; (800dac0 <xTaskResumeAll+0x118>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10c      	bne.n	800d9d8 <xTaskResumeAll+0x30>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	b672      	cpsid	i
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	b662      	cpsie	i
 800d9d2:	603b      	str	r3, [r7, #0]
}
 800d9d4:	bf00      	nop
 800d9d6:	e7fe      	b.n	800d9d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9d8:	f000 ff18 	bl	800e80c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9dc:	4b38      	ldr	r3, [pc, #224]	; (800dac0 <xTaskResumeAll+0x118>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	4a37      	ldr	r2, [pc, #220]	; (800dac0 <xTaskResumeAll+0x118>)
 800d9e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9e6:	4b36      	ldr	r3, [pc, #216]	; (800dac0 <xTaskResumeAll+0x118>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d161      	bne.n	800dab2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9ee:	4b35      	ldr	r3, [pc, #212]	; (800dac4 <xTaskResumeAll+0x11c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d05d      	beq.n	800dab2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9f6:	e02e      	b.n	800da56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9f8:	4b33      	ldr	r3, [pc, #204]	; (800dac8 <xTaskResumeAll+0x120>)
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3318      	adds	r3, #24
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fe25 	bl	800c654 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3304      	adds	r3, #4
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe fe20 	bl	800c654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da18:	2201      	movs	r2, #1
 800da1a:	409a      	lsls	r2, r3
 800da1c:	4b2b      	ldr	r3, [pc, #172]	; (800dacc <xTaskResumeAll+0x124>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4313      	orrs	r3, r2
 800da22:	4a2a      	ldr	r2, [pc, #168]	; (800dacc <xTaskResumeAll+0x124>)
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2a:	4613      	mov	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4a27      	ldr	r2, [pc, #156]	; (800dad0 <xTaskResumeAll+0x128>)
 800da34:	441a      	add	r2, r3
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	3304      	adds	r3, #4
 800da3a:	4619      	mov	r1, r3
 800da3c:	4610      	mov	r0, r2
 800da3e:	f7fe fdac 	bl	800c59a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da46:	4b23      	ldr	r3, [pc, #140]	; (800dad4 <xTaskResumeAll+0x12c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d302      	bcc.n	800da56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800da50:	4b21      	ldr	r3, [pc, #132]	; (800dad8 <xTaskResumeAll+0x130>)
 800da52:	2201      	movs	r2, #1
 800da54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da56:	4b1c      	ldr	r3, [pc, #112]	; (800dac8 <xTaskResumeAll+0x120>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d1cc      	bne.n	800d9f8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da64:	f000 fb68 	bl	800e138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800da68:	4b1c      	ldr	r3, [pc, #112]	; (800dadc <xTaskResumeAll+0x134>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d010      	beq.n	800da96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da74:	f000 f858 	bl	800db28 <xTaskIncrementTick>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d002      	beq.n	800da84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800da7e:	4b16      	ldr	r3, [pc, #88]	; (800dad8 <xTaskResumeAll+0x130>)
 800da80:	2201      	movs	r2, #1
 800da82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	3b01      	subs	r3, #1
 800da88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1f1      	bne.n	800da74 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800da90:	4b12      	ldr	r3, [pc, #72]	; (800dadc <xTaskResumeAll+0x134>)
 800da92:	2200      	movs	r2, #0
 800da94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da96:	4b10      	ldr	r3, [pc, #64]	; (800dad8 <xTaskResumeAll+0x130>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d009      	beq.n	800dab2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da9e:	2301      	movs	r3, #1
 800daa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800daa2:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <xTaskResumeAll+0x138>)
 800daa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daa8:	601a      	str	r2, [r3, #0]
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dab2:	f000 fedf 	bl	800e874 <vPortExitCritical>

	return xAlreadyYielded;
 800dab6:	68bb      	ldr	r3, [r7, #8]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20000c98 	.word	0x20000c98
 800dac4:	20000c70 	.word	0x20000c70
 800dac8:	20000c30 	.word	0x20000c30
 800dacc:	20000c78 	.word	0x20000c78
 800dad0:	20000b74 	.word	0x20000b74
 800dad4:	20000b70 	.word	0x20000b70
 800dad8:	20000c84 	.word	0x20000c84
 800dadc:	20000c80 	.word	0x20000c80
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800daea:	4b05      	ldr	r3, [pc, #20]	; (800db00 <xTaskGetTickCount+0x1c>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800daf0:	687b      	ldr	r3, [r7, #4]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	370c      	adds	r7, #12
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	20000c74 	.word	0x20000c74

0800db04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db0a:	f000 ff67 	bl	800e9dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800db0e:	2300      	movs	r3, #0
 800db10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800db12:	4b04      	ldr	r3, [pc, #16]	; (800db24 <xTaskGetTickCountFromISR+0x20>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db18:	683b      	ldr	r3, [r7, #0]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	20000c74 	.word	0x20000c74

0800db28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db2e:	2300      	movs	r3, #0
 800db30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db32:	4b4f      	ldr	r3, [pc, #316]	; (800dc70 <xTaskIncrementTick+0x148>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f040 808a 	bne.w	800dc50 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db3c:	4b4d      	ldr	r3, [pc, #308]	; (800dc74 <xTaskIncrementTick+0x14c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3301      	adds	r3, #1
 800db42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db44:	4a4b      	ldr	r2, [pc, #300]	; (800dc74 <xTaskIncrementTick+0x14c>)
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d122      	bne.n	800db96 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800db50:	4b49      	ldr	r3, [pc, #292]	; (800dc78 <xTaskIncrementTick+0x150>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00c      	beq.n	800db74 <xTaskIncrementTick+0x4c>
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5e:	b672      	cpsid	i
 800db60:	f383 8811 	msr	BASEPRI, r3
 800db64:	f3bf 8f6f 	isb	sy
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	b662      	cpsie	i
 800db6e:	603b      	str	r3, [r7, #0]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <xTaskIncrementTick+0x4a>
 800db74:	4b40      	ldr	r3, [pc, #256]	; (800dc78 <xTaskIncrementTick+0x150>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	4b40      	ldr	r3, [pc, #256]	; (800dc7c <xTaskIncrementTick+0x154>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a3e      	ldr	r2, [pc, #248]	; (800dc78 <xTaskIncrementTick+0x150>)
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	4a3e      	ldr	r2, [pc, #248]	; (800dc7c <xTaskIncrementTick+0x154>)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	4b3d      	ldr	r3, [pc, #244]	; (800dc80 <xTaskIncrementTick+0x158>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3301      	adds	r3, #1
 800db8e:	4a3c      	ldr	r2, [pc, #240]	; (800dc80 <xTaskIncrementTick+0x158>)
 800db90:	6013      	str	r3, [r2, #0]
 800db92:	f000 fad1 	bl	800e138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db96:	4b3b      	ldr	r3, [pc, #236]	; (800dc84 <xTaskIncrementTick+0x15c>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d348      	bcc.n	800dc32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dba0:	4b35      	ldr	r3, [pc, #212]	; (800dc78 <xTaskIncrementTick+0x150>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d104      	bne.n	800dbb4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbaa:	4b36      	ldr	r3, [pc, #216]	; (800dc84 <xTaskIncrementTick+0x15c>)
 800dbac:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb0:	601a      	str	r2, [r3, #0]
					break;
 800dbb2:	e03e      	b.n	800dc32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb4:	4b30      	ldr	r3, [pc, #192]	; (800dc78 <xTaskIncrementTick+0x150>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbc4:	693a      	ldr	r2, [r7, #16]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d203      	bcs.n	800dbd4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbcc:	4a2d      	ldr	r2, [pc, #180]	; (800dc84 <xTaskIncrementTick+0x15c>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbd2:	e02e      	b.n	800dc32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe fd3b 	bl	800c654 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d004      	beq.n	800dbf0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	3318      	adds	r3, #24
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe fd32 	bl	800c654 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	409a      	lsls	r2, r3
 800dbf8:	4b23      	ldr	r3, [pc, #140]	; (800dc88 <xTaskIncrementTick+0x160>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	4a22      	ldr	r2, [pc, #136]	; (800dc88 <xTaskIncrementTick+0x160>)
 800dc00:	6013      	str	r3, [r2, #0]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc06:	4613      	mov	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4413      	add	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4a1f      	ldr	r2, [pc, #124]	; (800dc8c <xTaskIncrementTick+0x164>)
 800dc10:	441a      	add	r2, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	3304      	adds	r3, #4
 800dc16:	4619      	mov	r1, r3
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f7fe fcbe 	bl	800c59a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	4b1b      	ldr	r3, [pc, #108]	; (800dc90 <xTaskIncrementTick+0x168>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d3b9      	bcc.n	800dba0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc30:	e7b6      	b.n	800dba0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc32:	4b17      	ldr	r3, [pc, #92]	; (800dc90 <xTaskIncrementTick+0x168>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc38:	4914      	ldr	r1, [pc, #80]	; (800dc8c <xTaskIncrementTick+0x164>)
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	440b      	add	r3, r1
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d907      	bls.n	800dc5a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	617b      	str	r3, [r7, #20]
 800dc4e:	e004      	b.n	800dc5a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dc50:	4b10      	ldr	r3, [pc, #64]	; (800dc94 <xTaskIncrementTick+0x16c>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3301      	adds	r3, #1
 800dc56:	4a0f      	ldr	r2, [pc, #60]	; (800dc94 <xTaskIncrementTick+0x16c>)
 800dc58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dc5a:	4b0f      	ldr	r3, [pc, #60]	; (800dc98 <xTaskIncrementTick+0x170>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800dc62:	2301      	movs	r3, #1
 800dc64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dc66:	697b      	ldr	r3, [r7, #20]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20000c98 	.word	0x20000c98
 800dc74:	20000c74 	.word	0x20000c74
 800dc78:	20000c28 	.word	0x20000c28
 800dc7c:	20000c2c 	.word	0x20000c2c
 800dc80:	20000c88 	.word	0x20000c88
 800dc84:	20000c90 	.word	0x20000c90
 800dc88:	20000c78 	.word	0x20000c78
 800dc8c:	20000b74 	.word	0x20000b74
 800dc90:	20000b70 	.word	0x20000b70
 800dc94:	20000c80 	.word	0x20000c80
 800dc98:	20000c84 	.word	0x20000c84

0800dc9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dca2:	4b3a      	ldr	r3, [pc, #232]	; (800dd8c <vTaskSwitchContext+0xf0>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d003      	beq.n	800dcb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcaa:	4b39      	ldr	r3, [pc, #228]	; (800dd90 <vTaskSwitchContext+0xf4>)
 800dcac:	2201      	movs	r2, #1
 800dcae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcb0:	e068      	b.n	800dd84 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800dcb2:	4b37      	ldr	r3, [pc, #220]	; (800dd90 <vTaskSwitchContext+0xf4>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dcb8:	4b36      	ldr	r3, [pc, #216]	; (800dd94 <vTaskSwitchContext+0xf8>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dcc4:	61bb      	str	r3, [r7, #24]
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	69ba      	ldr	r2, [r7, #24]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d111      	bne.n	800dcf4 <vTaskSwitchContext+0x58>
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	69ba      	ldr	r2, [r7, #24]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d10b      	bne.n	800dcf4 <vTaskSwitchContext+0x58>
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	3308      	adds	r3, #8
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	69ba      	ldr	r2, [r7, #24]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d105      	bne.n	800dcf4 <vTaskSwitchContext+0x58>
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	330c      	adds	r3, #12
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d008      	beq.n	800dd06 <vTaskSwitchContext+0x6a>
 800dcf4:	4b27      	ldr	r3, [pc, #156]	; (800dd94 <vTaskSwitchContext+0xf8>)
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	4b26      	ldr	r3, [pc, #152]	; (800dd94 <vTaskSwitchContext+0xf8>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	3334      	adds	r3, #52	; 0x34
 800dcfe:	4619      	mov	r1, r3
 800dd00:	4610      	mov	r0, r2
 800dd02:	f7f2 feee 	bl	8000ae2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd06:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <vTaskSwitchContext+0xfc>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	fab3 f383 	clz	r3, r3
 800dd12:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd14:	7afb      	ldrb	r3, [r7, #11]
 800dd16:	f1c3 031f 	rsb	r3, r3, #31
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	491f      	ldr	r1, [pc, #124]	; (800dd9c <vTaskSwitchContext+0x100>)
 800dd1e:	697a      	ldr	r2, [r7, #20]
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	440b      	add	r3, r1
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10c      	bne.n	800dd4a <vTaskSwitchContext+0xae>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	b672      	cpsid	i
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	b662      	cpsie	i
 800dd44:	607b      	str	r3, [r7, #4]
}
 800dd46:	bf00      	nop
 800dd48:	e7fe      	b.n	800dd48 <vTaskSwitchContext+0xac>
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4a11      	ldr	r2, [pc, #68]	; (800dd9c <vTaskSwitchContext+0x100>)
 800dd56:	4413      	add	r3, r2
 800dd58:	613b      	str	r3, [r7, #16]
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	605a      	str	r2, [r3, #4]
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d104      	bne.n	800dd7a <vTaskSwitchContext+0xde>
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	605a      	str	r2, [r3, #4]
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	4a04      	ldr	r2, [pc, #16]	; (800dd94 <vTaskSwitchContext+0xf8>)
 800dd82:	6013      	str	r3, [r2, #0]
}
 800dd84:	bf00      	nop
 800dd86:	3720      	adds	r7, #32
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	20000c98 	.word	0x20000c98
 800dd90:	20000c84 	.word	0x20000c84
 800dd94:	20000b70 	.word	0x20000b70
 800dd98:	20000c78 	.word	0x20000c78
 800dd9c:	20000b74 	.word	0x20000b74

0800dda0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10c      	bne.n	800ddca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	b672      	cpsid	i
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	b662      	cpsie	i
 800ddc4:	60fb      	str	r3, [r7, #12]
}
 800ddc6:	bf00      	nop
 800ddc8:	e7fe      	b.n	800ddc8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddca:	4b07      	ldr	r3, [pc, #28]	; (800dde8 <vTaskPlaceOnEventList+0x48>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3318      	adds	r3, #24
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7fe fc05 	bl	800c5e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddd8:	2101      	movs	r1, #1
 800ddda:	6838      	ldr	r0, [r7, #0]
 800dddc:	f000 fba6 	bl	800e52c <prvAddCurrentTaskToDelayedList>
}
 800dde0:	bf00      	nop
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	20000b70 	.word	0x20000b70

0800ddec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10c      	bne.n	800de1c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	b672      	cpsid	i
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	b662      	cpsie	i
 800de16:	60fb      	str	r3, [r7, #12]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	3318      	adds	r3, #24
 800de20:	4618      	mov	r0, r3
 800de22:	f7fe fc17 	bl	800c654 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de26:	4b1d      	ldr	r3, [pc, #116]	; (800de9c <xTaskRemoveFromEventList+0xb0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d11c      	bne.n	800de68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	3304      	adds	r3, #4
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fc0e 	bl	800c654 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3c:	2201      	movs	r2, #1
 800de3e:	409a      	lsls	r2, r3
 800de40:	4b17      	ldr	r3, [pc, #92]	; (800dea0 <xTaskRemoveFromEventList+0xb4>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4313      	orrs	r3, r2
 800de46:	4a16      	ldr	r2, [pc, #88]	; (800dea0 <xTaskRemoveFromEventList+0xb4>)
 800de48:	6013      	str	r3, [r2, #0]
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4e:	4613      	mov	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4a13      	ldr	r2, [pc, #76]	; (800dea4 <xTaskRemoveFromEventList+0xb8>)
 800de58:	441a      	add	r2, r3
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	3304      	adds	r3, #4
 800de5e:	4619      	mov	r1, r3
 800de60:	4610      	mov	r0, r2
 800de62:	f7fe fb9a 	bl	800c59a <vListInsertEnd>
 800de66:	e005      	b.n	800de74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	3318      	adds	r3, #24
 800de6c:	4619      	mov	r1, r3
 800de6e:	480e      	ldr	r0, [pc, #56]	; (800dea8 <xTaskRemoveFromEventList+0xbc>)
 800de70:	f7fe fb93 	bl	800c59a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de78:	4b0c      	ldr	r3, [pc, #48]	; (800deac <xTaskRemoveFromEventList+0xc0>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7e:	429a      	cmp	r2, r3
 800de80:	d905      	bls.n	800de8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de82:	2301      	movs	r3, #1
 800de84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de86:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <xTaskRemoveFromEventList+0xc4>)
 800de88:	2201      	movs	r2, #1
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	e001      	b.n	800de92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de92:	697b      	ldr	r3, [r7, #20]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000c98 	.word	0x20000c98
 800dea0:	20000c78 	.word	0x20000c78
 800dea4:	20000b74 	.word	0x20000b74
 800dea8:	20000c30 	.word	0x20000c30
 800deac:	20000b70 	.word	0x20000b70
 800deb0:	20000c84 	.word	0x20000c84

0800deb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800debc:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <vTaskInternalSetTimeOutState+0x24>)
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dec4:	4b05      	ldr	r3, [pc, #20]	; (800dedc <vTaskInternalSetTimeOutState+0x28>)
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	605a      	str	r2, [r3, #4]
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	20000c88 	.word	0x20000c88
 800dedc:	20000c74 	.word	0x20000c74

0800dee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10c      	bne.n	800df0a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	b672      	cpsid	i
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	b662      	cpsie	i
 800df04:	613b      	str	r3, [r7, #16]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10c      	bne.n	800df2a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	b672      	cpsid	i
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	b662      	cpsie	i
 800df24:	60fb      	str	r3, [r7, #12]
}
 800df26:	bf00      	nop
 800df28:	e7fe      	b.n	800df28 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800df2a:	f000 fc6f 	bl	800e80c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df2e:	4b1d      	ldr	r3, [pc, #116]	; (800dfa4 <xTaskCheckForTimeOut+0xc4>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	69ba      	ldr	r2, [r7, #24]
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df46:	d102      	bne.n	800df4e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df48:	2300      	movs	r3, #0
 800df4a:	61fb      	str	r3, [r7, #28]
 800df4c:	e023      	b.n	800df96 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	4b15      	ldr	r3, [pc, #84]	; (800dfa8 <xTaskCheckForTimeOut+0xc8>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	429a      	cmp	r2, r3
 800df58:	d007      	beq.n	800df6a <xTaskCheckForTimeOut+0x8a>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	69ba      	ldr	r2, [r7, #24]
 800df60:	429a      	cmp	r2, r3
 800df62:	d302      	bcc.n	800df6a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df64:	2301      	movs	r3, #1
 800df66:	61fb      	str	r3, [r7, #28]
 800df68:	e015      	b.n	800df96 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	697a      	ldr	r2, [r7, #20]
 800df70:	429a      	cmp	r2, r3
 800df72:	d20b      	bcs.n	800df8c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	1ad2      	subs	r2, r2, r3
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7ff ff97 	bl	800deb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df86:	2300      	movs	r3, #0
 800df88:	61fb      	str	r3, [r7, #28]
 800df8a:	e004      	b.n	800df96 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df92:	2301      	movs	r3, #1
 800df94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df96:	f000 fc6d 	bl	800e874 <vPortExitCritical>

	return xReturn;
 800df9a:	69fb      	ldr	r3, [r7, #28]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3720      	adds	r7, #32
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	20000c74 	.word	0x20000c74
 800dfa8:	20000c88 	.word	0x20000c88

0800dfac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfb0:	4b03      	ldr	r3, [pc, #12]	; (800dfc0 <vTaskMissedYield+0x14>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	601a      	str	r2, [r3, #0]
}
 800dfb6:	bf00      	nop
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20000c84 	.word	0x20000c84

0800dfc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfcc:	f000 f854 	bl	800e078 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfd0:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <prvIdleTask+0x2c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d907      	bls.n	800dfe8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dfd8:	4b06      	ldr	r3, [pc, #24]	; (800dff4 <prvIdleTask+0x30>)
 800dfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfde:	601a      	str	r2, [r3, #0]
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800dfe8:	f7f2 fd74 	bl	8000ad4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dfec:	e7ee      	b.n	800dfcc <prvIdleTask+0x8>
 800dfee:	bf00      	nop
 800dff0:	20000b74 	.word	0x20000b74
 800dff4:	e000ed04 	.word	0xe000ed04

0800dff8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dffe:	2300      	movs	r3, #0
 800e000:	607b      	str	r3, [r7, #4]
 800e002:	e00c      	b.n	800e01e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4a12      	ldr	r2, [pc, #72]	; (800e058 <prvInitialiseTaskLists+0x60>)
 800e010:	4413      	add	r3, r2
 800e012:	4618      	mov	r0, r3
 800e014:	f7fe fa94 	bl	800c540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	3301      	adds	r3, #1
 800e01c:	607b      	str	r3, [r7, #4]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2b06      	cmp	r3, #6
 800e022:	d9ef      	bls.n	800e004 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e024:	480d      	ldr	r0, [pc, #52]	; (800e05c <prvInitialiseTaskLists+0x64>)
 800e026:	f7fe fa8b 	bl	800c540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e02a:	480d      	ldr	r0, [pc, #52]	; (800e060 <prvInitialiseTaskLists+0x68>)
 800e02c:	f7fe fa88 	bl	800c540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e030:	480c      	ldr	r0, [pc, #48]	; (800e064 <prvInitialiseTaskLists+0x6c>)
 800e032:	f7fe fa85 	bl	800c540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e036:	480c      	ldr	r0, [pc, #48]	; (800e068 <prvInitialiseTaskLists+0x70>)
 800e038:	f7fe fa82 	bl	800c540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e03c:	480b      	ldr	r0, [pc, #44]	; (800e06c <prvInitialiseTaskLists+0x74>)
 800e03e:	f7fe fa7f 	bl	800c540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e042:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <prvInitialiseTaskLists+0x78>)
 800e044:	4a05      	ldr	r2, [pc, #20]	; (800e05c <prvInitialiseTaskLists+0x64>)
 800e046:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e048:	4b0a      	ldr	r3, [pc, #40]	; (800e074 <prvInitialiseTaskLists+0x7c>)
 800e04a:	4a05      	ldr	r2, [pc, #20]	; (800e060 <prvInitialiseTaskLists+0x68>)
 800e04c:	601a      	str	r2, [r3, #0]
}
 800e04e:	bf00      	nop
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20000b74 	.word	0x20000b74
 800e05c:	20000c00 	.word	0x20000c00
 800e060:	20000c14 	.word	0x20000c14
 800e064:	20000c30 	.word	0x20000c30
 800e068:	20000c44 	.word	0x20000c44
 800e06c:	20000c5c 	.word	0x20000c5c
 800e070:	20000c28 	.word	0x20000c28
 800e074:	20000c2c 	.word	0x20000c2c

0800e078 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e07e:	e019      	b.n	800e0b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e080:	f000 fbc4 	bl	800e80c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e084:	4b10      	ldr	r3, [pc, #64]	; (800e0c8 <prvCheckTasksWaitingTermination+0x50>)
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3304      	adds	r3, #4
 800e090:	4618      	mov	r0, r3
 800e092:	f7fe fadf 	bl	800c654 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e096:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <prvCheckTasksWaitingTermination+0x54>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	4a0b      	ldr	r2, [pc, #44]	; (800e0cc <prvCheckTasksWaitingTermination+0x54>)
 800e09e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <prvCheckTasksWaitingTermination+0x58>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	4a0a      	ldr	r2, [pc, #40]	; (800e0d0 <prvCheckTasksWaitingTermination+0x58>)
 800e0a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0aa:	f000 fbe3 	bl	800e874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f810 	bl	800e0d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0b4:	4b06      	ldr	r3, [pc, #24]	; (800e0d0 <prvCheckTasksWaitingTermination+0x58>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d1e1      	bne.n	800e080 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0bc:	bf00      	nop
 800e0be:	bf00      	nop
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	20000c44 	.word	0x20000c44
 800e0cc:	20000c70 	.word	0x20000c70
 800e0d0:	20000c58 	.word	0x20000c58

0800e0d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d108      	bne.n	800e0f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fd8a 	bl	800ec04 <vPortFree>
				vPortFree( pxTCB );
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fd87 	bl	800ec04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0f6:	e01a      	b.n	800e12e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d103      	bne.n	800e10a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fd7e 	bl	800ec04 <vPortFree>
	}
 800e108:	e011      	b.n	800e12e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e110:	2b02      	cmp	r3, #2
 800e112:	d00c      	beq.n	800e12e <prvDeleteTCB+0x5a>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	b672      	cpsid	i
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	b662      	cpsie	i
 800e128:	60fb      	str	r3, [r7, #12]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <prvDeleteTCB+0x58>
	}
 800e12e:	bf00      	nop
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
	...

0800e138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <prvResetNextTaskUnblockTime+0x38>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d104      	bne.n	800e152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e148:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <prvResetNextTaskUnblockTime+0x3c>)
 800e14a:	f04f 32ff 	mov.w	r2, #4294967295
 800e14e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e150:	e008      	b.n	800e164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e152:	4b07      	ldr	r3, [pc, #28]	; (800e170 <prvResetNextTaskUnblockTime+0x38>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	4a04      	ldr	r2, [pc, #16]	; (800e174 <prvResetNextTaskUnblockTime+0x3c>)
 800e162:	6013      	str	r3, [r2, #0]
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	20000c28 	.word	0x20000c28
 800e174:	20000c90 	.word	0x20000c90

0800e178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e17e:	4b0b      	ldr	r3, [pc, #44]	; (800e1ac <xTaskGetSchedulerState+0x34>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d102      	bne.n	800e18c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e186:	2301      	movs	r3, #1
 800e188:	607b      	str	r3, [r7, #4]
 800e18a:	e008      	b.n	800e19e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e18c:	4b08      	ldr	r3, [pc, #32]	; (800e1b0 <xTaskGetSchedulerState+0x38>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d102      	bne.n	800e19a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e194:	2302      	movs	r3, #2
 800e196:	607b      	str	r3, [r7, #4]
 800e198:	e001      	b.n	800e19e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e19a:	2300      	movs	r3, #0
 800e19c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e19e:	687b      	ldr	r3, [r7, #4]
	}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	20000c7c 	.word	0x20000c7c
 800e1b0:	20000c98 	.word	0x20000c98

0800e1b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d069      	beq.n	800e29e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ce:	4b36      	ldr	r3, [pc, #216]	; (800e2a8 <xTaskPriorityInherit+0xf4>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d259      	bcs.n	800e28c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	db06      	blt.n	800e1ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e0:	4b31      	ldr	r3, [pc, #196]	; (800e2a8 <xTaskPriorityInherit+0xf4>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e6:	f1c3 0207 	rsb	r2, r3, #7
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	6959      	ldr	r1, [r3, #20]
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4a2b      	ldr	r2, [pc, #172]	; (800e2ac <xTaskPriorityInherit+0xf8>)
 800e200:	4413      	add	r3, r2
 800e202:	4299      	cmp	r1, r3
 800e204:	d13a      	bne.n	800e27c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	3304      	adds	r3, #4
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fa22 	bl	800c654 <uxListRemove>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d115      	bne.n	800e242 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21a:	4924      	ldr	r1, [pc, #144]	; (800e2ac <xTaskPriorityInherit+0xf8>)
 800e21c:	4613      	mov	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	440b      	add	r3, r1
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <xTaskPriorityInherit+0x8e>
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e230:	2201      	movs	r2, #1
 800e232:	fa02 f303 	lsl.w	r3, r2, r3
 800e236:	43da      	mvns	r2, r3
 800e238:	4b1d      	ldr	r3, [pc, #116]	; (800e2b0 <xTaskPriorityInherit+0xfc>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4013      	ands	r3, r2
 800e23e:	4a1c      	ldr	r2, [pc, #112]	; (800e2b0 <xTaskPriorityInherit+0xfc>)
 800e240:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e242:	4b19      	ldr	r3, [pc, #100]	; (800e2a8 <xTaskPriorityInherit+0xf4>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e250:	2201      	movs	r2, #1
 800e252:	409a      	lsls	r2, r3
 800e254:	4b16      	ldr	r3, [pc, #88]	; (800e2b0 <xTaskPriorityInherit+0xfc>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4313      	orrs	r3, r2
 800e25a:	4a15      	ldr	r2, [pc, #84]	; (800e2b0 <xTaskPriorityInherit+0xfc>)
 800e25c:	6013      	str	r3, [r2, #0]
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e262:	4613      	mov	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4413      	add	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4a10      	ldr	r2, [pc, #64]	; (800e2ac <xTaskPriorityInherit+0xf8>)
 800e26c:	441a      	add	r2, r3
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	3304      	adds	r3, #4
 800e272:	4619      	mov	r1, r3
 800e274:	4610      	mov	r0, r2
 800e276:	f7fe f990 	bl	800c59a <vListInsertEnd>
 800e27a:	e004      	b.n	800e286 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e27c:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <xTaskPriorityInherit+0xf4>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e286:	2301      	movs	r3, #1
 800e288:	60fb      	str	r3, [r7, #12]
 800e28a:	e008      	b.n	800e29e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e290:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <xTaskPriorityInherit+0xf4>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e296:	429a      	cmp	r2, r3
 800e298:	d201      	bcs.n	800e29e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e29a:	2301      	movs	r3, #1
 800e29c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e29e:	68fb      	ldr	r3, [r7, #12]
	}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20000b70 	.word	0x20000b70
 800e2ac:	20000b74 	.word	0x20000b74
 800e2b0:	20000c78 	.word	0x20000c78

0800e2b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d072      	beq.n	800e3b0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e2ca:	4b3c      	ldr	r3, [pc, #240]	; (800e3bc <xTaskPriorityDisinherit+0x108>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	693a      	ldr	r2, [r7, #16]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d00c      	beq.n	800e2ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	b672      	cpsid	i
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	b662      	cpsie	i
 800e2e8:	60fb      	str	r3, [r7, #12]
}
 800e2ea:	bf00      	nop
 800e2ec:	e7fe      	b.n	800e2ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10c      	bne.n	800e310 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fa:	b672      	cpsid	i
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	b662      	cpsie	i
 800e30a:	60bb      	str	r3, [r7, #8]
}
 800e30c:	bf00      	nop
 800e30e:	e7fe      	b.n	800e30e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e314:	1e5a      	subs	r2, r3, #1
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e322:	429a      	cmp	r2, r3
 800e324:	d044      	beq.n	800e3b0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d140      	bne.n	800e3b0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	3304      	adds	r3, #4
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe f98e 	bl	800c654 <uxListRemove>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d115      	bne.n	800e36a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e342:	491f      	ldr	r1, [pc, #124]	; (800e3c0 <xTaskPriorityDisinherit+0x10c>)
 800e344:	4613      	mov	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	440b      	add	r3, r1
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10a      	bne.n	800e36a <xTaskPriorityDisinherit+0xb6>
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e358:	2201      	movs	r2, #1
 800e35a:	fa02 f303 	lsl.w	r3, r2, r3
 800e35e:	43da      	mvns	r2, r3
 800e360:	4b18      	ldr	r3, [pc, #96]	; (800e3c4 <xTaskPriorityDisinherit+0x110>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4013      	ands	r3, r2
 800e366:	4a17      	ldr	r2, [pc, #92]	; (800e3c4 <xTaskPriorityDisinherit+0x110>)
 800e368:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e376:	f1c3 0207 	rsb	r2, r3, #7
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e382:	2201      	movs	r2, #1
 800e384:	409a      	lsls	r2, r3
 800e386:	4b0f      	ldr	r3, [pc, #60]	; (800e3c4 <xTaskPriorityDisinherit+0x110>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	4a0d      	ldr	r2, [pc, #52]	; (800e3c4 <xTaskPriorityDisinherit+0x110>)
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4a08      	ldr	r2, [pc, #32]	; (800e3c0 <xTaskPriorityDisinherit+0x10c>)
 800e39e:	441a      	add	r2, r3
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	f7fe f8f7 	bl	800c59a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3b0:	697b      	ldr	r3, [r7, #20]
	}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20000b70 	.word	0x20000b70
 800e3c0:	20000b74 	.word	0x20000b74
 800e3c4:	20000c78 	.word	0x20000c78

0800e3c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b088      	sub	sp, #32
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f000 8087 	beq.w	800e4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d10c      	bne.n	800e404 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	b672      	cpsid	i
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	b662      	cpsie	i
 800e3fe:	60fb      	str	r3, [r7, #12]
}
 800e400:	bf00      	nop
 800e402:	e7fe      	b.n	800e402 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e408:	683a      	ldr	r2, [r7, #0]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d902      	bls.n	800e414 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	61fb      	str	r3, [r7, #28]
 800e412:	e002      	b.n	800e41a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e418:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e41e:	69fa      	ldr	r2, [r7, #28]
 800e420:	429a      	cmp	r2, r3
 800e422:	d065      	beq.n	800e4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d160      	bne.n	800e4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e42e:	4b32      	ldr	r3, [pc, #200]	; (800e4f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	69ba      	ldr	r2, [r7, #24]
 800e434:	429a      	cmp	r2, r3
 800e436:	d10c      	bne.n	800e452 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	b672      	cpsid	i
 800e43e:	f383 8811 	msr	BASEPRI, r3
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	f3bf 8f4f 	dsb	sy
 800e44a:	b662      	cpsie	i
 800e44c:	60bb      	str	r3, [r7, #8]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e456:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	69fa      	ldr	r2, [r7, #28]
 800e45c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	2b00      	cmp	r3, #0
 800e464:	db04      	blt.n	800e470 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	f1c3 0207 	rsb	r2, r3, #7
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	6959      	ldr	r1, [r3, #20]
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	4613      	mov	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4413      	add	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4a1f      	ldr	r2, [pc, #124]	; (800e4fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e480:	4413      	add	r3, r2
 800e482:	4299      	cmp	r1, r3
 800e484:	d134      	bne.n	800e4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	3304      	adds	r3, #4
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe f8e2 	bl	800c654 <uxListRemove>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d115      	bne.n	800e4c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49a:	4918      	ldr	r1, [pc, #96]	; (800e4fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e49c:	4613      	mov	r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4413      	add	r3, r2
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	440b      	add	r3, r1
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10a      	bne.n	800e4c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b6:	43da      	mvns	r2, r3
 800e4b8:	4b11      	ldr	r3, [pc, #68]	; (800e500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4013      	ands	r3, r2
 800e4be:	4a10      	ldr	r2, [pc, #64]	; (800e500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	409a      	lsls	r2, r3
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	; (800e500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	4a0b      	ldr	r2, [pc, #44]	; (800e500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e4d2:	6013      	str	r3, [r2, #0]
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d8:	4613      	mov	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4a06      	ldr	r2, [pc, #24]	; (800e4fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e4e2:	441a      	add	r2, r3
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	f7fe f855 	bl	800c59a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4f0:	bf00      	nop
 800e4f2:	3720      	adds	r7, #32
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	20000b70 	.word	0x20000b70
 800e4fc:	20000b74 	.word	0x20000b74
 800e500:	20000c78 	.word	0x20000c78

0800e504 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e504:	b480      	push	{r7}
 800e506:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e508:	4b07      	ldr	r3, [pc, #28]	; (800e528 <pvTaskIncrementMutexHeldCount+0x24>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d004      	beq.n	800e51a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e510:	4b05      	ldr	r3, [pc, #20]	; (800e528 <pvTaskIncrementMutexHeldCount+0x24>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e516:	3201      	adds	r2, #1
 800e518:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e51a:	4b03      	ldr	r3, [pc, #12]	; (800e528 <pvTaskIncrementMutexHeldCount+0x24>)
 800e51c:	681b      	ldr	r3, [r3, #0]
	}
 800e51e:	4618      	mov	r0, r3
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	20000b70 	.word	0x20000b70

0800e52c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e536:	4b29      	ldr	r3, [pc, #164]	; (800e5dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e53c:	4b28      	ldr	r3, [pc, #160]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3304      	adds	r3, #4
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe f886 	bl	800c654 <uxListRemove>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10b      	bne.n	800e566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e54e:	4b24      	ldr	r3, [pc, #144]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e554:	2201      	movs	r2, #1
 800e556:	fa02 f303 	lsl.w	r3, r2, r3
 800e55a:	43da      	mvns	r2, r3
 800e55c:	4b21      	ldr	r3, [pc, #132]	; (800e5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4013      	ands	r3, r2
 800e562:	4a20      	ldr	r2, [pc, #128]	; (800e5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56c:	d10a      	bne.n	800e584 <prvAddCurrentTaskToDelayedList+0x58>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d007      	beq.n	800e584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e574:	4b1a      	ldr	r3, [pc, #104]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3304      	adds	r3, #4
 800e57a:	4619      	mov	r1, r3
 800e57c:	481a      	ldr	r0, [pc, #104]	; (800e5e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e57e:	f7fe f80c 	bl	800c59a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e582:	e026      	b.n	800e5d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4413      	add	r3, r2
 800e58a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e58c:	4b14      	ldr	r3, [pc, #80]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d209      	bcs.n	800e5b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e59c:	4b13      	ldr	r3, [pc, #76]	; (800e5ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4b0f      	ldr	r3, [pc, #60]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	f7fe f81a 	bl	800c5e2 <vListInsert>
}
 800e5ae:	e010      	b.n	800e5d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b0:	4b0f      	ldr	r3, [pc, #60]	; (800e5f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	4b0a      	ldr	r3, [pc, #40]	; (800e5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	4610      	mov	r0, r2
 800e5be:	f7fe f810 	bl	800c5e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5c2:	4b0c      	ldr	r3, [pc, #48]	; (800e5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d202      	bcs.n	800e5d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e5cc:	4a09      	ldr	r2, [pc, #36]	; (800e5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6013      	str	r3, [r2, #0]
}
 800e5d2:	bf00      	nop
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	20000c74 	.word	0x20000c74
 800e5e0:	20000b70 	.word	0x20000b70
 800e5e4:	20000c78 	.word	0x20000c78
 800e5e8:	20000c5c 	.word	0x20000c5c
 800e5ec:	20000c2c 	.word	0x20000c2c
 800e5f0:	20000c28 	.word	0x20000c28
 800e5f4:	20000c90 	.word	0x20000c90

0800e5f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3b04      	subs	r3, #4
 800e608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3b04      	subs	r3, #4
 800e616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	f023 0201 	bic.w	r2, r3, #1
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3b04      	subs	r3, #4
 800e626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e628:	4a0c      	ldr	r2, [pc, #48]	; (800e65c <pxPortInitialiseStack+0x64>)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3b14      	subs	r3, #20
 800e632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3b04      	subs	r3, #4
 800e63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f06f 0202 	mvn.w	r2, #2
 800e646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3b20      	subs	r3, #32
 800e64c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e64e:	68fb      	ldr	r3, [r7, #12]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3714      	adds	r7, #20
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	0800e661 	.word	0x0800e661

0800e660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e66a:	4b14      	ldr	r3, [pc, #80]	; (800e6bc <prvTaskExitError+0x5c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d00c      	beq.n	800e68e <prvTaskExitError+0x2e>
	__asm volatile
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	b672      	cpsid	i
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	b662      	cpsie	i
 800e688:	60fb      	str	r3, [r7, #12]
}
 800e68a:	bf00      	nop
 800e68c:	e7fe      	b.n	800e68c <prvTaskExitError+0x2c>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	b672      	cpsid	i
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	b662      	cpsie	i
 800e6a2:	60bb      	str	r3, [r7, #8]
}
 800e6a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6a6:	bf00      	nop
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0fc      	beq.n	800e6a8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6ae:	bf00      	nop
 800e6b0:	bf00      	nop
 800e6b2:	3714      	adds	r7, #20
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	20000024 	.word	0x20000024

0800e6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <pxCurrentTCBConst2>)
 800e6c2:	6819      	ldr	r1, [r3, #0]
 800e6c4:	6808      	ldr	r0, [r1, #0]
 800e6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ca:	f380 8809 	msr	PSP, r0
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f04f 0000 	mov.w	r0, #0
 800e6d6:	f380 8811 	msr	BASEPRI, r0
 800e6da:	4770      	bx	lr
 800e6dc:	f3af 8000 	nop.w

0800e6e0 <pxCurrentTCBConst2>:
 800e6e0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop

0800e6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e6e8:	4808      	ldr	r0, [pc, #32]	; (800e70c <prvPortStartFirstTask+0x24>)
 800e6ea:	6800      	ldr	r0, [r0, #0]
 800e6ec:	6800      	ldr	r0, [r0, #0]
 800e6ee:	f380 8808 	msr	MSP, r0
 800e6f2:	f04f 0000 	mov.w	r0, #0
 800e6f6:	f380 8814 	msr	CONTROL, r0
 800e6fa:	b662      	cpsie	i
 800e6fc:	b661      	cpsie	f
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	df00      	svc	0
 800e708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e70a:	bf00      	nop
 800e70c:	e000ed08 	.word	0xe000ed08

0800e710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e716:	4b37      	ldr	r3, [pc, #220]	; (800e7f4 <xPortStartScheduler+0xe4>)
 800e718:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	22ff      	movs	r2, #255	; 0xff
 800e726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e730:	78fb      	ldrb	r3, [r7, #3]
 800e732:	b2db      	uxtb	r3, r3
 800e734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	4b2f      	ldr	r3, [pc, #188]	; (800e7f8 <xPortStartScheduler+0xe8>)
 800e73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e73e:	4b2f      	ldr	r3, [pc, #188]	; (800e7fc <xPortStartScheduler+0xec>)
 800e740:	2207      	movs	r2, #7
 800e742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e744:	e009      	b.n	800e75a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e746:	4b2d      	ldr	r3, [pc, #180]	; (800e7fc <xPortStartScheduler+0xec>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	4a2b      	ldr	r2, [pc, #172]	; (800e7fc <xPortStartScheduler+0xec>)
 800e74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e750:	78fb      	ldrb	r3, [r7, #3]
 800e752:	b2db      	uxtb	r3, r3
 800e754:	005b      	lsls	r3, r3, #1
 800e756:	b2db      	uxtb	r3, r3
 800e758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e762:	2b80      	cmp	r3, #128	; 0x80
 800e764:	d0ef      	beq.n	800e746 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e766:	4b25      	ldr	r3, [pc, #148]	; (800e7fc <xPortStartScheduler+0xec>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f1c3 0307 	rsb	r3, r3, #7
 800e76e:	2b04      	cmp	r3, #4
 800e770:	d00c      	beq.n	800e78c <xPortStartScheduler+0x7c>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	b672      	cpsid	i
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	b662      	cpsie	i
 800e786:	60bb      	str	r3, [r7, #8]
}
 800e788:	bf00      	nop
 800e78a:	e7fe      	b.n	800e78a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e78c:	4b1b      	ldr	r3, [pc, #108]	; (800e7fc <xPortStartScheduler+0xec>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	4a1a      	ldr	r2, [pc, #104]	; (800e7fc <xPortStartScheduler+0xec>)
 800e794:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e796:	4b19      	ldr	r3, [pc, #100]	; (800e7fc <xPortStartScheduler+0xec>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e79e:	4a17      	ldr	r2, [pc, #92]	; (800e7fc <xPortStartScheduler+0xec>)
 800e7a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e7aa:	4b15      	ldr	r3, [pc, #84]	; (800e800 <xPortStartScheduler+0xf0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a14      	ldr	r2, [pc, #80]	; (800e800 <xPortStartScheduler+0xf0>)
 800e7b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7b6:	4b12      	ldr	r3, [pc, #72]	; (800e800 <xPortStartScheduler+0xf0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a11      	ldr	r2, [pc, #68]	; (800e800 <xPortStartScheduler+0xf0>)
 800e7bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7c2:	f000 f8dd 	bl	800e980 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	; (800e804 <xPortStartScheduler+0xf4>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e7cc:	f000 f8fc 	bl	800e9c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7d0:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <xPortStartScheduler+0xf8>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a0c      	ldr	r2, [pc, #48]	; (800e808 <xPortStartScheduler+0xf8>)
 800e7d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e7da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7dc:	f7ff ff84 	bl	800e6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7e0:	f7ff fa5c 	bl	800dc9c <vTaskSwitchContext>
	prvTaskExitError();
 800e7e4:	f7ff ff3c 	bl	800e660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	e000e400 	.word	0xe000e400
 800e7f8:	20000c9c 	.word	0x20000c9c
 800e7fc:	20000ca0 	.word	0x20000ca0
 800e800:	e000ed20 	.word	0xe000ed20
 800e804:	20000024 	.word	0x20000024
 800e808:	e000ef34 	.word	0xe000ef34

0800e80c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e816:	b672      	cpsid	i
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	b662      	cpsie	i
 800e826:	607b      	str	r3, [r7, #4]
}
 800e828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e82a:	4b10      	ldr	r3, [pc, #64]	; (800e86c <vPortEnterCritical+0x60>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3301      	adds	r3, #1
 800e830:	4a0e      	ldr	r2, [pc, #56]	; (800e86c <vPortEnterCritical+0x60>)
 800e832:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e834:	4b0d      	ldr	r3, [pc, #52]	; (800e86c <vPortEnterCritical+0x60>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d111      	bne.n	800e860 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e83c:	4b0c      	ldr	r3, [pc, #48]	; (800e870 <vPortEnterCritical+0x64>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	b2db      	uxtb	r3, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00c      	beq.n	800e860 <vPortEnterCritical+0x54>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	b672      	cpsid	i
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	b662      	cpsie	i
 800e85a:	603b      	str	r3, [r7, #0]
}
 800e85c:	bf00      	nop
 800e85e:	e7fe      	b.n	800e85e <vPortEnterCritical+0x52>
	}
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	20000024 	.word	0x20000024
 800e870:	e000ed04 	.word	0xe000ed04

0800e874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e87a:	4b13      	ldr	r3, [pc, #76]	; (800e8c8 <vPortExitCritical+0x54>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10c      	bne.n	800e89c <vPortExitCritical+0x28>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	b672      	cpsid	i
 800e888:	f383 8811 	msr	BASEPRI, r3
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	f3bf 8f4f 	dsb	sy
 800e894:	b662      	cpsie	i
 800e896:	607b      	str	r3, [r7, #4]
}
 800e898:	bf00      	nop
 800e89a:	e7fe      	b.n	800e89a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <vPortExitCritical+0x54>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	4a09      	ldr	r2, [pc, #36]	; (800e8c8 <vPortExitCritical+0x54>)
 800e8a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e8a6:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <vPortExitCritical+0x54>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d105      	bne.n	800e8ba <vPortExitCritical+0x46>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	f383 8811 	msr	BASEPRI, r3
}
 800e8b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8ba:	bf00      	nop
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	20000024 	.word	0x20000024
 800e8cc:	00000000 	.word	0x00000000

0800e8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8d0:	f3ef 8009 	mrs	r0, PSP
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	4b15      	ldr	r3, [pc, #84]	; (800e930 <pxCurrentTCBConst>)
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	f01e 0f10 	tst.w	lr, #16
 800e8e0:	bf08      	it	eq
 800e8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ea:	6010      	str	r0, [r2, #0]
 800e8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e8f4:	b672      	cpsid	i
 800e8f6:	f380 8811 	msr	BASEPRI, r0
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	b662      	cpsie	i
 800e904:	f7ff f9ca 	bl	800dc9c <vTaskSwitchContext>
 800e908:	f04f 0000 	mov.w	r0, #0
 800e90c:	f380 8811 	msr	BASEPRI, r0
 800e910:	bc09      	pop	{r0, r3}
 800e912:	6819      	ldr	r1, [r3, #0]
 800e914:	6808      	ldr	r0, [r1, #0]
 800e916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91a:	f01e 0f10 	tst.w	lr, #16
 800e91e:	bf08      	it	eq
 800e920:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e924:	f380 8809 	msr	PSP, r0
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop

0800e930 <pxCurrentTCBConst>:
 800e930:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e934:	bf00      	nop
 800e936:	bf00      	nop

0800e938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	b672      	cpsid	i
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	b662      	cpsie	i
 800e952:	607b      	str	r3, [r7, #4]
}
 800e954:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e956:	f7ff f8e7 	bl	800db28 <xTaskIncrementTick>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e960:	4b06      	ldr	r3, [pc, #24]	; (800e97c <SysTick_Handler+0x44>)
 800e962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	2300      	movs	r3, #0
 800e96a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	f383 8811 	msr	BASEPRI, r3
}
 800e972:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e974:	bf00      	nop
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	e000ed04 	.word	0xe000ed04

0800e980 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e980:	b480      	push	{r7}
 800e982:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e984:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <vPortSetupTimerInterrupt+0x34>)
 800e986:	2200      	movs	r2, #0
 800e988:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e98a:	4b0b      	ldr	r3, [pc, #44]	; (800e9b8 <vPortSetupTimerInterrupt+0x38>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e990:	4b0a      	ldr	r3, [pc, #40]	; (800e9bc <vPortSetupTimerInterrupt+0x3c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a0a      	ldr	r2, [pc, #40]	; (800e9c0 <vPortSetupTimerInterrupt+0x40>)
 800e996:	fba2 2303 	umull	r2, r3, r2, r3
 800e99a:	099b      	lsrs	r3, r3, #6
 800e99c:	4a09      	ldr	r2, [pc, #36]	; (800e9c4 <vPortSetupTimerInterrupt+0x44>)
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9a2:	4b04      	ldr	r3, [pc, #16]	; (800e9b4 <vPortSetupTimerInterrupt+0x34>)
 800e9a4:	2207      	movs	r2, #7
 800e9a6:	601a      	str	r2, [r3, #0]
}
 800e9a8:	bf00      	nop
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	e000e010 	.word	0xe000e010
 800e9b8:	e000e018 	.word	0xe000e018
 800e9bc:	20000018 	.word	0x20000018
 800e9c0:	10624dd3 	.word	0x10624dd3
 800e9c4:	e000e014 	.word	0xe000e014

0800e9c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e9c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e9d8 <vPortEnableVFP+0x10>
 800e9cc:	6801      	ldr	r1, [r0, #0]
 800e9ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e9d2:	6001      	str	r1, [r0, #0]
 800e9d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9d6:	bf00      	nop
 800e9d8:	e000ed88 	.word	0xe000ed88

0800e9dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e9e2:	f3ef 8305 	mrs	r3, IPSR
 800e9e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b0f      	cmp	r3, #15
 800e9ec:	d916      	bls.n	800ea1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9ee:	4a19      	ldr	r2, [pc, #100]	; (800ea54 <vPortValidateInterruptPriority+0x78>)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e9f8:	4b17      	ldr	r3, [pc, #92]	; (800ea58 <vPortValidateInterruptPriority+0x7c>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	7afa      	ldrb	r2, [r7, #11]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d20c      	bcs.n	800ea1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	b672      	cpsid	i
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	b662      	cpsie	i
 800ea16:	607b      	str	r3, [r7, #4]
}
 800ea18:	bf00      	nop
 800ea1a:	e7fe      	b.n	800ea1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea1c:	4b0f      	ldr	r3, [pc, #60]	; (800ea5c <vPortValidateInterruptPriority+0x80>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ea24:	4b0e      	ldr	r3, [pc, #56]	; (800ea60 <vPortValidateInterruptPriority+0x84>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d90c      	bls.n	800ea46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea30:	b672      	cpsid	i
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	b662      	cpsie	i
 800ea40:	603b      	str	r3, [r7, #0]
}
 800ea42:	bf00      	nop
 800ea44:	e7fe      	b.n	800ea44 <vPortValidateInterruptPriority+0x68>
	}
 800ea46:	bf00      	nop
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	e000e3f0 	.word	0xe000e3f0
 800ea58:	20000c9c 	.word	0x20000c9c
 800ea5c:	e000ed0c 	.word	0xe000ed0c
 800ea60:	20000ca0 	.word	0x20000ca0

0800ea64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b08a      	sub	sp, #40	; 0x28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea70:	f7fe ff8c 	bl	800d98c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea74:	4b5e      	ldr	r3, [pc, #376]	; (800ebf0 <pvPortMalloc+0x18c>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea7c:	f000 f920 	bl	800ecc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea80:	4b5c      	ldr	r3, [pc, #368]	; (800ebf4 <pvPortMalloc+0x190>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4013      	ands	r3, r2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f040 8092 	bne.w	800ebb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d01f      	beq.n	800ead4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ea94:	2208      	movs	r2, #8
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4413      	add	r3, r2
 800ea9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f003 0307 	and.w	r3, r3, #7
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d016      	beq.n	800ead4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f023 0307 	bic.w	r3, r3, #7
 800eaac:	3308      	adds	r3, #8
 800eaae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f003 0307 	and.w	r3, r3, #7
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00c      	beq.n	800ead4 <pvPortMalloc+0x70>
	__asm volatile
 800eaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabe:	b672      	cpsid	i
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	b662      	cpsie	i
 800eace:	617b      	str	r3, [r7, #20]
}
 800ead0:	bf00      	nop
 800ead2:	e7fe      	b.n	800ead2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d06b      	beq.n	800ebb2 <pvPortMalloc+0x14e>
 800eada:	4b47      	ldr	r3, [pc, #284]	; (800ebf8 <pvPortMalloc+0x194>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d866      	bhi.n	800ebb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eae4:	4b45      	ldr	r3, [pc, #276]	; (800ebfc <pvPortMalloc+0x198>)
 800eae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eae8:	4b44      	ldr	r3, [pc, #272]	; (800ebfc <pvPortMalloc+0x198>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eaee:	e004      	b.n	800eafa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d903      	bls.n	800eb0c <pvPortMalloc+0xa8>
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f1      	bne.n	800eaf0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb0c:	4b38      	ldr	r3, [pc, #224]	; (800ebf0 <pvPortMalloc+0x18c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d04d      	beq.n	800ebb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2208      	movs	r2, #8
 800eb1c:	4413      	add	r3, r2
 800eb1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	685a      	ldr	r2, [r3, #4]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	1ad2      	subs	r2, r2, r3
 800eb30:	2308      	movs	r3, #8
 800eb32:	005b      	lsls	r3, r3, #1
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d921      	bls.n	800eb7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	f003 0307 	and.w	r3, r3, #7
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00c      	beq.n	800eb64 <pvPortMalloc+0x100>
	__asm volatile
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	b672      	cpsid	i
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	b662      	cpsie	i
 800eb5e:	613b      	str	r3, [r7, #16]
}
 800eb60:	bf00      	nop
 800eb62:	e7fe      	b.n	800eb62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	1ad2      	subs	r2, r2, r3
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb76:	69b8      	ldr	r0, [r7, #24]
 800eb78:	f000 f904 	bl	800ed84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb7c:	4b1e      	ldr	r3, [pc, #120]	; (800ebf8 <pvPortMalloc+0x194>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	4a1c      	ldr	r2, [pc, #112]	; (800ebf8 <pvPortMalloc+0x194>)
 800eb88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb8a:	4b1b      	ldr	r3, [pc, #108]	; (800ebf8 <pvPortMalloc+0x194>)
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	4b1c      	ldr	r3, [pc, #112]	; (800ec00 <pvPortMalloc+0x19c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d203      	bcs.n	800eb9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb96:	4b18      	ldr	r3, [pc, #96]	; (800ebf8 <pvPortMalloc+0x194>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a19      	ldr	r2, [pc, #100]	; (800ec00 <pvPortMalloc+0x19c>)
 800eb9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	4b14      	ldr	r3, [pc, #80]	; (800ebf4 <pvPortMalloc+0x190>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	431a      	orrs	r2, r3
 800eba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ebac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ebb2:	f7fe fef9 	bl	800d9a8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d101      	bne.n	800ebc0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ebbc:	f7f1 ff9c 	bl	8000af8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	f003 0307 	and.w	r3, r3, #7
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00c      	beq.n	800ebe4 <pvPortMalloc+0x180>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	b672      	cpsid	i
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	b662      	cpsie	i
 800ebde:	60fb      	str	r3, [r7, #12]
}
 800ebe0:	bf00      	nop
 800ebe2:	e7fe      	b.n	800ebe2 <pvPortMalloc+0x17e>
	return pvReturn;
 800ebe4:	69fb      	ldr	r3, [r7, #28]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3728      	adds	r7, #40	; 0x28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	20008cac 	.word	0x20008cac
 800ebf4:	20008cb8 	.word	0x20008cb8
 800ebf8:	20008cb0 	.word	0x20008cb0
 800ebfc:	20008ca4 	.word	0x20008ca4
 800ec00:	20008cb4 	.word	0x20008cb4

0800ec04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d04c      	beq.n	800ecb0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec16:	2308      	movs	r3, #8
 800ec18:	425b      	negs	r3, r3
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	685a      	ldr	r2, [r3, #4]
 800ec28:	4b23      	ldr	r3, [pc, #140]	; (800ecb8 <vPortFree+0xb4>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10c      	bne.n	800ec4c <vPortFree+0x48>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	b672      	cpsid	i
 800ec38:	f383 8811 	msr	BASEPRI, r3
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	b662      	cpsie	i
 800ec46:	60fb      	str	r3, [r7, #12]
}
 800ec48:	bf00      	nop
 800ec4a:	e7fe      	b.n	800ec4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00c      	beq.n	800ec6e <vPortFree+0x6a>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	b672      	cpsid	i
 800ec5a:	f383 8811 	msr	BASEPRI, r3
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	b662      	cpsie	i
 800ec68:	60bb      	str	r3, [r7, #8]
}
 800ec6a:	bf00      	nop
 800ec6c:	e7fe      	b.n	800ec6c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	4b11      	ldr	r3, [pc, #68]	; (800ecb8 <vPortFree+0xb4>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4013      	ands	r3, r2
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d019      	beq.n	800ecb0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d115      	bne.n	800ecb0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	685a      	ldr	r2, [r3, #4]
 800ec88:	4b0b      	ldr	r3, [pc, #44]	; (800ecb8 <vPortFree+0xb4>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	43db      	mvns	r3, r3
 800ec8e:	401a      	ands	r2, r3
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec94:	f7fe fe7a 	bl	800d98c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	4b07      	ldr	r3, [pc, #28]	; (800ecbc <vPortFree+0xb8>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4413      	add	r3, r2
 800eca2:	4a06      	ldr	r2, [pc, #24]	; (800ecbc <vPortFree+0xb8>)
 800eca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eca6:	6938      	ldr	r0, [r7, #16]
 800eca8:	f000 f86c 	bl	800ed84 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ecac:	f7fe fe7c 	bl	800d9a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ecb0:	bf00      	nop
 800ecb2:	3718      	adds	r7, #24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20008cb8 	.word	0x20008cb8
 800ecbc:	20008cb0 	.word	0x20008cb0

0800ecc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eccc:	4b27      	ldr	r3, [pc, #156]	; (800ed6c <prvHeapInit+0xac>)
 800ecce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00c      	beq.n	800ecf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3307      	adds	r3, #7
 800ecde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f023 0307 	bic.w	r3, r3, #7
 800ece6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	4a1f      	ldr	r2, [pc, #124]	; (800ed6c <prvHeapInit+0xac>)
 800ecf0:	4413      	add	r3, r2
 800ecf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecf8:	4a1d      	ldr	r2, [pc, #116]	; (800ed70 <prvHeapInit+0xb0>)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ecfe:	4b1c      	ldr	r3, [pc, #112]	; (800ed70 <prvHeapInit+0xb0>)
 800ed00:	2200      	movs	r2, #0
 800ed02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	4413      	add	r3, r2
 800ed0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed0c:	2208      	movs	r2, #8
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	1a9b      	subs	r3, r3, r2
 800ed12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 0307 	bic.w	r3, r3, #7
 800ed1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4a15      	ldr	r2, [pc, #84]	; (800ed74 <prvHeapInit+0xb4>)
 800ed20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed22:	4b14      	ldr	r3, [pc, #80]	; (800ed74 <prvHeapInit+0xb4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	2200      	movs	r2, #0
 800ed28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed2a:	4b12      	ldr	r3, [pc, #72]	; (800ed74 <prvHeapInit+0xb4>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	1ad2      	subs	r2, r2, r3
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed40:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <prvHeapInit+0xb4>)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	4a0a      	ldr	r2, [pc, #40]	; (800ed78 <prvHeapInit+0xb8>)
 800ed4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4a09      	ldr	r2, [pc, #36]	; (800ed7c <prvHeapInit+0xbc>)
 800ed56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed58:	4b09      	ldr	r3, [pc, #36]	; (800ed80 <prvHeapInit+0xc0>)
 800ed5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ed5e:	601a      	str	r2, [r3, #0]
}
 800ed60:	bf00      	nop
 800ed62:	3714      	adds	r7, #20
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	20000ca4 	.word	0x20000ca4
 800ed70:	20008ca4 	.word	0x20008ca4
 800ed74:	20008cac 	.word	0x20008cac
 800ed78:	20008cb4 	.word	0x20008cb4
 800ed7c:	20008cb0 	.word	0x20008cb0
 800ed80:	20008cb8 	.word	0x20008cb8

0800ed84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed8c:	4b28      	ldr	r3, [pc, #160]	; (800ee30 <prvInsertBlockIntoFreeList+0xac>)
 800ed8e:	60fb      	str	r3, [r7, #12]
 800ed90:	e002      	b.n	800ed98 <prvInsertBlockIntoFreeList+0x14>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d8f7      	bhi.n	800ed92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4413      	add	r3, r2
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d108      	bne.n	800edc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	685a      	ldr	r2, [r3, #4]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	441a      	add	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	441a      	add	r2, r3
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d118      	bne.n	800ee0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	4b15      	ldr	r3, [pc, #84]	; (800ee34 <prvInsertBlockIntoFreeList+0xb0>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d00d      	beq.n	800ee02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	685a      	ldr	r2, [r3, #4]
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	441a      	add	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	e008      	b.n	800ee14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee02:	4b0c      	ldr	r3, [pc, #48]	; (800ee34 <prvInsertBlockIntoFreeList+0xb0>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	e003      	b.n	800ee14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d002      	beq.n	800ee22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee22:	bf00      	nop
 800ee24:	3714      	adds	r7, #20
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	20008ca4 	.word	0x20008ca4
 800ee34:	20008cac 	.word	0x20008cac

0800ee38 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ee3c:	f005 fe00 	bl	8014a40 <touchgfx_init>
}
 800ee40:	bf00      	nop
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ee48:	f005 fe24 	bl	8014a94 <touchgfx_taskEntry>
}
 800ee4c:	bf00      	nop
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
    {
 800ee58:	4a04      	ldr	r2, [pc, #16]	; (800ee6c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	601a      	str	r2, [r3, #0]
    }
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4618      	mov	r0, r3
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	080269f8 	.word	0x080269f8

0800ee70 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
    }
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff ffe9 	bl	800ee50 <_ZN8touchgfx12FontProviderD1Ev>
 800ee7e:	2104      	movs	r1, #4
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f015 fffb 	bl	8024e7c <_ZdlPvj>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ee9c:	887b      	ldrh	r3, [r7, #2]
 800ee9e:	2b07      	cmp	r3, #7
 800eea0:	d83a      	bhi.n	800ef18 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800eea2:	a201      	add	r2, pc, #4	; (adr r2, 800eea8 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800eea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea8:	0800eec9 	.word	0x0800eec9
 800eeac:	0800eed3 	.word	0x0800eed3
 800eeb0:	0800eedd 	.word	0x0800eedd
 800eeb4:	0800eee7 	.word	0x0800eee7
 800eeb8:	0800eef1 	.word	0x0800eef1
 800eebc:	0800eefb 	.word	0x0800eefb
 800eec0:	0800ef05 	.word	0x0800ef05
 800eec4:	0800ef0f 	.word	0x0800ef0f
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800eec8:	f003 fd8e 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800eecc:	4603      	mov	r3, r0
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	e023      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800eed2:	f003 fd89 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800eed6:	4603      	mov	r3, r0
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	e01e      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800eedc:	f003 fd84 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800eee0:	4603      	mov	r3, r0
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	e019      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800eee6:	f003 fd7f 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800eeea:	4603      	mov	r3, r0
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	e014      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800eef0:	f003 fd7a 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800eef4:	4603      	mov	r3, r0
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	e00f      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800eefa:	f003 fd75 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800eefe:	4603      	mov	r3, r0
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	e00a      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800ef04:	f003 fd70 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	e005      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800ef0e:	f003 fd6b 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 800ef12:	4603      	mov	r3, r0
 800ef14:	699b      	ldr	r3, [r3, #24]
 800ef16:	e000      	b.n	800ef1a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ef18:	2300      	movs	r3, #0
    }
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop

0800ef24 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	4a05      	ldr	r2, [pc, #20]	; (800ef44 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff ff8b 	bl	800ee50 <_ZN8touchgfx12FontProviderD1Ev>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	080269e4 	.word	0x080269e4

0800ef48 <_ZN23ApplicationFontProviderD0Ev>:
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff ffe7 	bl	800ef24 <_ZN23ApplicationFontProviderD1Ev>
 800ef56:	2104      	movs	r1, #4
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f015 ff8f 	bl	8024e7c <_ZdlPvj>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	4a04      	ldr	r2, [pc, #16]	; (800ef84 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	08028a20 	.word	0x08028a20

0800ef88 <_ZN8touchgfx4FontD0Ev>:
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ffe9 	bl	800ef68 <_ZN8touchgfx4FontD1Ev>
 800ef96:	2110      	movs	r1, #16
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f015 ff6f 	bl	8024e7c <_ZdlPvj>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	460b      	mov	r3, r1
 800efb2:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3308      	adds	r3, #8
 800efc2:	681c      	ldr	r4, [r3, #0]
 800efc4:	f107 030f 	add.w	r3, r7, #15
 800efc8:	f107 0210 	add.w	r2, r7, #16
 800efcc:	8879      	ldrh	r1, [r7, #2]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	47a0      	blx	r4
 800efd2:	6178      	str	r0, [r7, #20]
        return glyph;
 800efd4:	697b      	ldr	r3, [r7, #20]
    }
 800efd6:	4618      	mov	r0, r3
 800efd8:	371c      	adds	r7, #28
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd90      	pop	{r4, r7, pc}

0800efde <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800efde:	b480      	push	{r7}
 800efe0:	b083      	sub	sp, #12
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	895b      	ldrh	r3, [r3, #10]
    }
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr

0800eff6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800eff6:	b480      	push	{r7}
 800eff8:	b083      	sub	sp, #12
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	899b      	ldrh	r3, [r3, #12]
    }
 800f002:	4618      	mov	r0, r3
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f00e:	b480      	push	{r7}
 800f010:	b083      	sub	sp, #12
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	889b      	ldrh	r3, [r3, #4]
    }
 800f01a:	4618      	mov	r0, r3
 800f01c:	370c      	adds	r7, #12
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr

0800f026 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f026:	b480      	push	{r7}
 800f028:	b083      	sub	sp, #12
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	889a      	ldrh	r2, [r3, #4]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	799b      	ldrb	r3, [r3, #6]
 800f036:	b29b      	uxth	r3, r3
 800f038:	4413      	add	r3, r2
 800f03a:	b29b      	uxth	r3, r3
    }
 800f03c:	4618      	mov	r0, r3
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	79db      	ldrb	r3, [r3, #7]
 800f054:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f058:	b2db      	uxtb	r3, r3
    }
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	79db      	ldrb	r3, [r3, #7]
 800f072:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f076:	b2db      	uxtb	r3, r3
    }
 800f078:	4618      	mov	r0, r3
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	4a05      	ldr	r2, [pc, #20]	; (800f0a4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4618      	mov	r0, r3
 800f096:	f7ff ff67 	bl	800ef68 <_ZN8touchgfx4FontD1Ev>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4618      	mov	r0, r3
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	08028ad8 	.word	0x08028ad8

0800f0a8 <_ZN8touchgfx9ConstFontD0Ev>:
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7ff ffe7 	bl	800f084 <_ZN8touchgfx9ConstFontD1Ev>
 800f0b6:	2118      	movs	r1, #24
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f015 fedf 	bl	8024e7c <_ZdlPvj>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	4a05      	ldr	r2, [pc, #20]	; (800f0e8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff ffd3 	bl	800f084 <_ZN8touchgfx9ConstFontD1Ev>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	08026a0c 	.word	0x08026a0c

0800f0ec <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7ff ffe7 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f0fa:	2124      	movs	r1, #36	; 0x24
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f015 febd 	bl	8024e7c <_ZdlPvj>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f82d 	bl	800f174 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f11a:	4b08      	ldr	r3, [pc, #32]	; (800f13c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	4b08      	ldr	r3, [pc, #32]	; (800f140 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f120:	6819      	ldr	r1, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	881b      	ldrh	r3, [r3, #0]
 800f126:	005b      	lsls	r3, r3, #1
 800f128:	440b      	add	r3, r1
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	681b      	ldr	r3, [r3, #0]
    }
 800f132:	4618      	mov	r0, r3
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	2000c5a0 	.word	0x2000c5a0
 800f140:	2000c598 	.word	0x2000c598

0800f144 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 f811 	bl	800f174 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f152:	4b07      	ldr	r3, [pc, #28]	; (800f170 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	4413      	add	r3, r2
 800f15e:	785b      	ldrb	r3, [r3, #1]
 800f160:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f164:	b2db      	uxtb	r3, r3
    }
 800f166:	4618      	mov	r0, r3
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2000c598 	.word	0x2000c598

0800f174 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f17c:	4b0c      	ldr	r3, [pc, #48]	; (800f1b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d105      	bne.n	800f190 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f184:	4b0b      	ldr	r3, [pc, #44]	; (800f1b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f186:	4a0c      	ldr	r2, [pc, #48]	; (800f1b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f188:	21de      	movs	r1, #222	; 0xde
 800f18a:	480c      	ldr	r0, [pc, #48]	; (800f1bc <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f18c:	f015 fea4 	bl	8024ed8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	881a      	ldrh	r2, [r3, #0]
 800f194:	4b0a      	ldr	r3, [pc, #40]	; (800f1c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d305      	bcc.n	800f1a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f19c:	4b09      	ldr	r3, [pc, #36]	; (800f1c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f19e:	4a06      	ldr	r2, [pc, #24]	; (800f1b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f1a0:	21df      	movs	r1, #223	; 0xdf
 800f1a2:	4806      	ldr	r0, [pc, #24]	; (800f1bc <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f1a4:	f015 fe98 	bl	8024ed8 <__assert_func>
    }
 800f1a8:	bf00      	nop
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	2000c598 	.word	0x2000c598
 800f1b4:	08025fa8 	.word	0x08025fa8
 800f1b8:	08025fec 	.word	0x08025fec
 800f1bc:	0802601c 	.word	0x0802601c
 800f1c0:	2000c59c 	.word	0x2000c59c
 800f1c4:	08026060 	.word	0x08026060

0800f1c8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	7b5b      	ldrb	r3, [r3, #13]
 800f1d4:	021b      	lsls	r3, r3, #8
 800f1d6:	b21b      	sxth	r3, r3
 800f1d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1dc:	b21a      	sxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7adb      	ldrb	r3, [r3, #11]
 800f1e2:	b21b      	sxth	r3, r3
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	b21b      	sxth	r3, r3
 800f1e8:	b29b      	uxth	r3, r3
    }
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr

0800f1f6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f1f6:	b480      	push	{r7}
 800f1f8:	b083      	sub	sp, #12
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a1b      	ldr	r3, [r3, #32]
    }
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
	...

0800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f210:	b580      	push	{r7, lr}
 800f212:	b08c      	sub	sp, #48	; 0x30
 800f214:	af08      	add	r7, sp, #32
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	4611      	mov	r1, r2
 800f21c:	461a      	mov	r2, r3
 800f21e:	460b      	mov	r3, r1
 800f220:	80fb      	strh	r3, [r7, #6]
 800f222:	4613      	mov	r3, r2
 800f224:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	88b9      	ldrh	r1, [r7, #4]
 800f22a:	88fa      	ldrh	r2, [r7, #6]
 800f22c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f22e:	9306      	str	r3, [sp, #24]
 800f230:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f232:	9305      	str	r3, [sp, #20]
 800f234:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f238:	9304      	str	r3, [sp, #16]
 800f23a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f23e:	9303      	str	r3, [sp, #12]
 800f240:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f244:	9302      	str	r3, [sp, #8]
 800f246:	7f3b      	ldrb	r3, [r7, #28]
 800f248:	9301      	str	r3, [sp, #4]
 800f24a:	7e3b      	ldrb	r3, [r7, #24]
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	460b      	mov	r3, r1
 800f250:	68b9      	ldr	r1, [r7, #8]
 800f252:	f00a fb35 	bl	80198c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f256:	4a08      	ldr	r2, [pc, #32]	; (800f278 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	601a      	str	r2, [r3, #0]
    glyphData(glyphDataInternalFlash),
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f260:	619a      	str	r2, [r3, #24]
    kerningData(kerningList),
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f266:	61da      	str	r2, [r3, #28]
    gsubTable(gsubData)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f26c:	621a      	str	r2, [r3, #32]
{
}
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	08026a0c 	.word	0x08026a0c

0800f27c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	889b      	ldrh	r3, [r3, #4]
 800f290:	0adb      	lsrs	r3, r3, #11
 800f292:	b29b      	uxth	r3, r3
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4413      	add	r3, r2
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4413      	add	r3, r2
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3714      	adds	r7, #20
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b086      	sub	sp, #24
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	60f8      	str	r0, [r7, #12]
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	607a      	str	r2, [r7, #4]
 800f2ba:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d003      	beq.n	800f2ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	7b1b      	ldrb	r3, [r3, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e023      	b.n	800f316 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f7ff ff7a 	bl	800f1c8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f2d8:	8abb      	ldrh	r3, [r7, #20]
 800f2da:	82fb      	strh	r3, [r7, #22]
 800f2dc:	e013      	b.n	800f306 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x58>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	69da      	ldr	r2, [r3, #28]
 800f2e2:	8afb      	ldrh	r3, [r7, #22]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	897a      	ldrh	r2, [r7, #10]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d107      	bne.n	800f300 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
        {
            return kerningData[i].distance;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	69da      	ldr	r2, [r3, #28]
 800f2f4:	8afb      	ldrh	r3, [r7, #22]
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f2fe:	e00a      	b.n	800f316 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f300:	8afb      	ldrh	r3, [r7, #22]
 800f302:	3301      	adds	r3, #1
 800f304:	82fb      	strh	r3, [r7, #22]
 800f306:	8afa      	ldrh	r2, [r7, #22]
 800f308:	8abb      	ldrh	r3, [r7, #20]
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	7b09      	ldrb	r1, [r1, #12]
 800f30e:	440b      	add	r3, r1
 800f310:	429a      	cmp	r2, r3
 800f312:	dbe4      	blt.n	800f2de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x30>
        }
    }
    return 0;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f320:	b580      	push	{r7, lr}
 800f322:	af00      	add	r7, sp, #0
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__tcf_0+0xc>)
 800f326:	f7ff fecf 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	20008cbc 	.word	0x20008cbc

0800f330 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b08a      	sub	sp, #40	; 0x28
 800f334:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f336:	4b1e      	ldr	r3, [pc, #120]	; (800f3b0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f3bf 8f5b 	dmb	ish
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	bf0c      	ite	eq
 800f346:	2301      	moveq	r3, #1
 800f348:	2300      	movne	r3, #0
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d02a      	beq.n	800f3a6 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f350:	4817      	ldr	r0, [pc, #92]	; (800f3b0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f352:	f015 fd95 	bl	8024e80 <__cxa_guard_acquire>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	bf14      	ite	ne
 800f35c:	2301      	movne	r3, #1
 800f35e:	2300      	moveq	r3, #0
 800f360:	b2db      	uxtb	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d01f      	beq.n	800f3a6 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f366:	2300      	movs	r3, #0
 800f368:	9309      	str	r3, [sp, #36]	; 0x24
 800f36a:	2300      	movs	r3, #0
 800f36c:	9308      	str	r3, [sp, #32]
 800f36e:	233f      	movs	r3, #63	; 0x3f
 800f370:	9307      	str	r3, [sp, #28]
 800f372:	4b10      	ldr	r3, [pc, #64]	; (800f3b4 <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 800f374:	9306      	str	r3, [sp, #24]
 800f376:	4b10      	ldr	r3, [pc, #64]	; (800f3b8 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 800f378:	9305      	str	r3, [sp, #20]
 800f37a:	2301      	movs	r3, #1
 800f37c:	9304      	str	r3, [sp, #16]
 800f37e:	2300      	movs	r3, #0
 800f380:	9303      	str	r3, [sp, #12]
 800f382:	2301      	movs	r3, #1
 800f384:	9302      	str	r3, [sp, #8]
 800f386:	2304      	movs	r3, #4
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	2300      	movs	r3, #0
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	230a      	movs	r3, #10
 800f390:	2204      	movs	r2, #4
 800f392:	490a      	ldr	r1, [pc, #40]	; (800f3bc <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 800f394:	480a      	ldr	r0, [pc, #40]	; (800f3c0 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 800f396:	f7ff ff3b 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f39a:	480a      	ldr	r0, [pc, #40]	; (800f3c4 <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 800f39c:	f015 fdba 	bl	8024f14 <atexit>
 800f3a0:	4803      	ldr	r0, [pc, #12]	; (800f3b0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f3a2:	f015 fd79 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_10_4bpp;
 800f3a6:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20008ce0 	.word	0x20008ce0
 800f3b4:	0802dc80 	.word	0x0802dc80
 800f3b8:	08026a58 	.word	0x08026a58
 800f3bc:	0802dca8 	.word	0x0802dca8
 800f3c0:	20008cbc 	.word	0x20008cbc
 800f3c4:	0800f321 	.word	0x0800f321

0800f3c8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	4801      	ldr	r0, [pc, #4]	; (800f3d4 <__tcf_0+0xc>)
 800f3ce:	f7ff fe7b 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	20008ce4 	.word	0x20008ce4

0800f3d8 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b08a      	sub	sp, #40	; 0x28
 800f3dc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f3de:	4b1e      	ldr	r3, [pc, #120]	; (800f458 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f3bf 8f5b 	dmb	ish
 800f3e6:	f003 0301 	and.w	r3, r3, #1
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	bf0c      	ite	eq
 800f3ee:	2301      	moveq	r3, #1
 800f3f0:	2300      	movne	r3, #0
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d02a      	beq.n	800f44e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f3f8:	4817      	ldr	r0, [pc, #92]	; (800f458 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f3fa:	f015 fd41 	bl	8024e80 <__cxa_guard_acquire>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	bf14      	ite	ne
 800f404:	2301      	movne	r3, #1
 800f406:	2300      	moveq	r3, #0
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d01f      	beq.n	800f44e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f40e:	2300      	movs	r3, #0
 800f410:	9309      	str	r3, [sp, #36]	; 0x24
 800f412:	2300      	movs	r3, #0
 800f414:	9308      	str	r3, [sp, #32]
 800f416:	233f      	movs	r3, #63	; 0x3f
 800f418:	9307      	str	r3, [sp, #28]
 800f41a:	4b10      	ldr	r3, [pc, #64]	; (800f45c <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 800f41c:	9306      	str	r3, [sp, #24]
 800f41e:	4b10      	ldr	r3, [pc, #64]	; (800f460 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 800f420:	9305      	str	r3, [sp, #20]
 800f422:	2301      	movs	r3, #1
 800f424:	9304      	str	r3, [sp, #16]
 800f426:	2300      	movs	r3, #0
 800f428:	9303      	str	r3, [sp, #12]
 800f42a:	2301      	movs	r3, #1
 800f42c:	9302      	str	r3, [sp, #8]
 800f42e:	2304      	movs	r3, #4
 800f430:	9301      	str	r3, [sp, #4]
 800f432:	2300      	movs	r3, #0
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	230c      	movs	r3, #12
 800f438:	2209      	movs	r2, #9
 800f43a:	490a      	ldr	r1, [pc, #40]	; (800f464 <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 800f43c:	480a      	ldr	r0, [pc, #40]	; (800f468 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 800f43e:	f7ff fee7 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f442:	480a      	ldr	r0, [pc, #40]	; (800f46c <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 800f444:	f015 fd66 	bl	8024f14 <atexit>
 800f448:	4803      	ldr	r0, [pc, #12]	; (800f458 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f44a:	f015 fd25 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_12_4bpp;
 800f44e:	4b06      	ldr	r3, [pc, #24]	; (800f468 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 800f450:	4618      	mov	r0, r3
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20008d08 	.word	0x20008d08
 800f45c:	0802dc84 	.word	0x0802dc84
 800f460:	08026a5c 	.word	0x08026a5c
 800f464:	0802dce0 	.word	0x0802dce0
 800f468:	20008ce4 	.word	0x20008ce4
 800f46c:	0800f3c9 	.word	0x0800f3c9

0800f470 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f470:	b580      	push	{r7, lr}
 800f472:	af00      	add	r7, sp, #0
 800f474:	4801      	ldr	r0, [pc, #4]	; (800f47c <__tcf_0+0xc>)
 800f476:	f7ff fe27 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	20008d0c 	.word	0x20008d0c

0800f480 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b08a      	sub	sp, #40	; 0x28
 800f484:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f486:	4b1e      	ldr	r3, [pc, #120]	; (800f500 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f3bf 8f5b 	dmb	ish
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b00      	cmp	r3, #0
 800f494:	bf0c      	ite	eq
 800f496:	2301      	moveq	r3, #1
 800f498:	2300      	movne	r3, #0
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d02a      	beq.n	800f4f6 <_Z25getFont_Asap_Bold_18_4bppv+0x76>
 800f4a0:	4817      	ldr	r0, [pc, #92]	; (800f500 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 800f4a2:	f015 fced 	bl	8024e80 <__cxa_guard_acquire>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bf14      	ite	ne
 800f4ac:	2301      	movne	r3, #1
 800f4ae:	2300      	moveq	r3, #0
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d01f      	beq.n	800f4f6 <_Z25getFont_Asap_Bold_18_4bppv+0x76>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9308      	str	r3, [sp, #32]
 800f4be:	2300      	movs	r3, #0
 800f4c0:	9307      	str	r3, [sp, #28]
 800f4c2:	4b10      	ldr	r3, [pc, #64]	; (800f504 <_Z25getFont_Asap_Bold_18_4bppv+0x84>)
 800f4c4:	9306      	str	r3, [sp, #24]
 800f4c6:	4b10      	ldr	r3, [pc, #64]	; (800f508 <_Z25getFont_Asap_Bold_18_4bppv+0x88>)
 800f4c8:	9305      	str	r3, [sp, #20]
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	9304      	str	r3, [sp, #16]
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	9303      	str	r3, [sp, #12]
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	9302      	str	r3, [sp, #8]
 800f4d6:	2304      	movs	r3, #4
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	2312      	movs	r3, #18
 800f4e0:	221d      	movs	r2, #29
 800f4e2:	490a      	ldr	r1, [pc, #40]	; (800f50c <_Z25getFont_Asap_Bold_18_4bppv+0x8c>)
 800f4e4:	480a      	ldr	r0, [pc, #40]	; (800f510 <_Z25getFont_Asap_Bold_18_4bppv+0x90>)
 800f4e6:	f7ff fe93 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f4ea:	480a      	ldr	r0, [pc, #40]	; (800f514 <_Z25getFont_Asap_Bold_18_4bppv+0x94>)
 800f4ec:	f015 fd12 	bl	8024f14 <atexit>
 800f4f0:	4803      	ldr	r0, [pc, #12]	; (800f500 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 800f4f2:	f015 fcd1 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_18_4bpp;
 800f4f6:	4b06      	ldr	r3, [pc, #24]	; (800f510 <_Z25getFont_Asap_Bold_18_4bppv+0x90>)
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	20008d30 	.word	0x20008d30
 800f504:	0802dc88 	.word	0x0802dc88
 800f508:	08026a60 	.word	0x08026a60
 800f50c:	0802dd60 	.word	0x0802dd60
 800f510:	20008d0c 	.word	0x20008d0c
 800f514:	0800f471 	.word	0x0800f471

0800f518 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	4801      	ldr	r0, [pc, #4]	; (800f524 <__tcf_0+0xc>)
 800f51e:	f7ff fdd3 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f522:	bd80      	pop	{r7, pc}
 800f524:	20008d34 	.word	0x20008d34

0800f528 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	; 0x28
 800f52c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f52e:	4b1e      	ldr	r3, [pc, #120]	; (800f5a8 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f3bf 8f5b 	dmb	ish
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	bf0c      	ite	eq
 800f53e:	2301      	moveq	r3, #1
 800f540:	2300      	movne	r3, #0
 800f542:	b2db      	uxtb	r3, r3
 800f544:	2b00      	cmp	r3, #0
 800f546:	d02a      	beq.n	800f59e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800f548:	4817      	ldr	r0, [pc, #92]	; (800f5a8 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f54a:	f015 fc99 	bl	8024e80 <__cxa_guard_acquire>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	bf14      	ite	ne
 800f554:	2301      	movne	r3, #1
 800f556:	2300      	moveq	r3, #0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d01f      	beq.n	800f59e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800f55e:	2300      	movs	r3, #0
 800f560:	9309      	str	r3, [sp, #36]	; 0x24
 800f562:	2300      	movs	r3, #0
 800f564:	9308      	str	r3, [sp, #32]
 800f566:	233f      	movs	r3, #63	; 0x3f
 800f568:	9307      	str	r3, [sp, #28]
 800f56a:	4b10      	ldr	r3, [pc, #64]	; (800f5ac <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 800f56c:	9306      	str	r3, [sp, #24]
 800f56e:	4b10      	ldr	r3, [pc, #64]	; (800f5b0 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 800f570:	9305      	str	r3, [sp, #20]
 800f572:	2301      	movs	r3, #1
 800f574:	9304      	str	r3, [sp, #16]
 800f576:	2300      	movs	r3, #0
 800f578:	9303      	str	r3, [sp, #12]
 800f57a:	2301      	movs	r3, #1
 800f57c:	9302      	str	r3, [sp, #8]
 800f57e:	2304      	movs	r3, #4
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	2300      	movs	r3, #0
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	2315      	movs	r3, #21
 800f588:	220d      	movs	r2, #13
 800f58a:	490a      	ldr	r1, [pc, #40]	; (800f5b4 <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 800f58c:	480a      	ldr	r0, [pc, #40]	; (800f5b8 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 800f58e:	f7ff fe3f 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f592:	480a      	ldr	r0, [pc, #40]	; (800f5bc <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 800f594:	f015 fcbe 	bl	8024f14 <atexit>
 800f598:	4803      	ldr	r0, [pc, #12]	; (800f5a8 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f59a:	f015 fc7d 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_21_4bpp;
 800f59e:	4b06      	ldr	r3, [pc, #24]	; (800f5b8 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20008d58 	.word	0x20008d58
 800f5ac:	0802dc98 	.word	0x0802dc98
 800f5b0:	08026a64 	.word	0x08026a64
 800f5b4:	0802def8 	.word	0x0802def8
 800f5b8:	20008d34 	.word	0x20008d34
 800f5bc:	0800f519 	.word	0x0800f519

0800f5c0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	4801      	ldr	r0, [pc, #4]	; (800f5cc <__tcf_0+0xc>)
 800f5c6:	f7ff fd7f 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	20008d5c 	.word	0x20008d5c

0800f5d0 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08a      	sub	sp, #40	; 0x28
 800f5d4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f5d6:	4b1e      	ldr	r3, [pc, #120]	; (800f650 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f3bf 8f5b 	dmb	ish
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	bf0c      	ite	eq
 800f5e6:	2301      	moveq	r3, #1
 800f5e8:	2300      	movne	r3, #0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d02a      	beq.n	800f646 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800f5f0:	4817      	ldr	r0, [pc, #92]	; (800f650 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f5f2:	f015 fc45 	bl	8024e80 <__cxa_guard_acquire>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	bf14      	ite	ne
 800f5fc:	2301      	movne	r3, #1
 800f5fe:	2300      	moveq	r3, #0
 800f600:	b2db      	uxtb	r3, r3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d01f      	beq.n	800f646 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800f606:	2300      	movs	r3, #0
 800f608:	9309      	str	r3, [sp, #36]	; 0x24
 800f60a:	2300      	movs	r3, #0
 800f60c:	9308      	str	r3, [sp, #32]
 800f60e:	233f      	movs	r3, #63	; 0x3f
 800f610:	9307      	str	r3, [sp, #28]
 800f612:	4b10      	ldr	r3, [pc, #64]	; (800f654 <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 800f614:	9306      	str	r3, [sp, #24]
 800f616:	4b10      	ldr	r3, [pc, #64]	; (800f658 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 800f618:	9305      	str	r3, [sp, #20]
 800f61a:	2301      	movs	r3, #1
 800f61c:	9304      	str	r3, [sp, #16]
 800f61e:	2300      	movs	r3, #0
 800f620:	9303      	str	r3, [sp, #12]
 800f622:	2301      	movs	r3, #1
 800f624:	9302      	str	r3, [sp, #8]
 800f626:	2304      	movs	r3, #4
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	2300      	movs	r3, #0
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	231e      	movs	r3, #30
 800f630:	220c      	movs	r2, #12
 800f632:	490a      	ldr	r1, [pc, #40]	; (800f65c <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 800f634:	480a      	ldr	r0, [pc, #40]	; (800f660 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 800f636:	f7ff fdeb 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f63a:	480a      	ldr	r0, [pc, #40]	; (800f664 <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 800f63c:	f015 fc6a 	bl	8024f14 <atexit>
 800f640:	4803      	ldr	r0, [pc, #12]	; (800f650 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f642:	f015 fc29 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_30_4bpp;
 800f646:	4b06      	ldr	r3, [pc, #24]	; (800f660 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 800f648:	4618      	mov	r0, r3
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20008d80 	.word	0x20008d80
 800f654:	0802dc9c 	.word	0x0802dc9c
 800f658:	08026a68 	.word	0x08026a68
 800f65c:	0802dfb0 	.word	0x0802dfb0
 800f660:	20008d5c 	.word	0x20008d5c
 800f664:	0800f5c1 	.word	0x0800f5c1

0800f668 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f668:	b580      	push	{r7, lr}
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	4801      	ldr	r0, [pc, #4]	; (800f674 <__tcf_0+0xc>)
 800f66e:	f7ff fd2b 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f672:	bd80      	pop	{r7, pc}
 800f674:	20008d84 	.word	0x20008d84

0800f678 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b08a      	sub	sp, #40	; 0x28
 800f67c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f67e:	4b1e      	ldr	r3, [pc, #120]	; (800f6f8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f3bf 8f5b 	dmb	ish
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	bf0c      	ite	eq
 800f68e:	2301      	moveq	r3, #1
 800f690:	2300      	movne	r3, #0
 800f692:	b2db      	uxtb	r3, r3
 800f694:	2b00      	cmp	r3, #0
 800f696:	d02a      	beq.n	800f6ee <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800f698:	4817      	ldr	r0, [pc, #92]	; (800f6f8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800f69a:	f015 fbf1 	bl	8024e80 <__cxa_guard_acquire>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bf14      	ite	ne
 800f6a4:	2301      	movne	r3, #1
 800f6a6:	2300      	moveq	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d01f      	beq.n	800f6ee <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9308      	str	r3, [sp, #32]
 800f6b6:	233f      	movs	r3, #63	; 0x3f
 800f6b8:	9307      	str	r3, [sp, #28]
 800f6ba:	4b10      	ldr	r3, [pc, #64]	; (800f6fc <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 800f6bc:	9306      	str	r3, [sp, #24]
 800f6be:	4b10      	ldr	r3, [pc, #64]	; (800f700 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 800f6c0:	9305      	str	r3, [sp, #20]
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	9304      	str	r3, [sp, #16]
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	9303      	str	r3, [sp, #12]
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	9302      	str	r3, [sp, #8]
 800f6ce:	2304      	movs	r3, #4
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9300      	str	r3, [sp, #0]
 800f6d6:	2328      	movs	r3, #40	; 0x28
 800f6d8:	220d      	movs	r2, #13
 800f6da:	490a      	ldr	r1, [pc, #40]	; (800f704 <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 800f6dc:	480a      	ldr	r0, [pc, #40]	; (800f708 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 800f6de:	f7ff fd97 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f6e2:	480a      	ldr	r0, [pc, #40]	; (800f70c <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 800f6e4:	f015 fc16 	bl	8024f14 <atexit>
 800f6e8:	4803      	ldr	r0, [pc, #12]	; (800f6f8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800f6ea:	f015 fbd5 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_40_4bpp;
 800f6ee:	4b06      	ldr	r3, [pc, #24]	; (800f708 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	20008da8 	.word	0x20008da8
 800f6fc:	0802dca0 	.word	0x0802dca0
 800f700:	08026a6c 	.word	0x08026a6c
 800f704:	0802e058 	.word	0x0802e058
 800f708:	20008d84 	.word	0x20008d84
 800f70c:	0800f669 	.word	0x0800f669

0800f710 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f710:	b580      	push	{r7, lr}
 800f712:	af00      	add	r7, sp, #0
 800f714:	4801      	ldr	r0, [pc, #4]	; (800f71c <__tcf_0+0xc>)
 800f716:	f7ff fcd7 	bl	800f0c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	20008dac 	.word	0x20008dac

0800f720 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b08a      	sub	sp, #40	; 0x28
 800f724:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f726:	4b1e      	ldr	r3, [pc, #120]	; (800f7a0 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f3bf 8f5b 	dmb	ish
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	bf0c      	ite	eq
 800f736:	2301      	moveq	r3, #1
 800f738:	2300      	movne	r3, #0
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d02a      	beq.n	800f796 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800f740:	4817      	ldr	r0, [pc, #92]	; (800f7a0 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800f742:	f015 fb9d 	bl	8024e80 <__cxa_guard_acquire>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bf14      	ite	ne
 800f74c:	2301      	movne	r3, #1
 800f74e:	2300      	moveq	r3, #0
 800f750:	b2db      	uxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	d01f      	beq.n	800f796 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800f756:	2300      	movs	r3, #0
 800f758:	9309      	str	r3, [sp, #36]	; 0x24
 800f75a:	2300      	movs	r3, #0
 800f75c:	9308      	str	r3, [sp, #32]
 800f75e:	233f      	movs	r3, #63	; 0x3f
 800f760:	9307      	str	r3, [sp, #28]
 800f762:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 800f764:	9306      	str	r3, [sp, #24]
 800f766:	4b10      	ldr	r3, [pc, #64]	; (800f7a8 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 800f768:	9305      	str	r3, [sp, #20]
 800f76a:	2300      	movs	r3, #0
 800f76c:	9304      	str	r3, [sp, #16]
 800f76e:	2300      	movs	r3, #0
 800f770:	9303      	str	r3, [sp, #12]
 800f772:	2301      	movs	r3, #1
 800f774:	9302      	str	r3, [sp, #8]
 800f776:	2304      	movs	r3, #4
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	2300      	movs	r3, #0
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	233c      	movs	r3, #60	; 0x3c
 800f780:	220d      	movs	r2, #13
 800f782:	490a      	ldr	r1, [pc, #40]	; (800f7ac <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 800f784:	480a      	ldr	r0, [pc, #40]	; (800f7b0 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 800f786:	f7ff fd43 	bl	800f210 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f78a:	480a      	ldr	r0, [pc, #40]	; (800f7b4 <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 800f78c:	f015 fbc2 	bl	8024f14 <atexit>
 800f790:	4803      	ldr	r0, [pc, #12]	; (800f7a0 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800f792:	f015 fb81 	bl	8024e98 <__cxa_guard_release>
    return Asap_Bold_60_4bpp;
 800f796:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 800f798:	4618      	mov	r0, r3
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20008dd0 	.word	0x20008dd0
 800f7a4:	0802dca4 	.word	0x0802dca4
 800f7a8:	08026a70 	.word	0x08026a70
 800f7ac:	0802e110 	.word	0x0802e110
 800f7b0:	20008dac 	.word	0x20008dac
 800f7b4:	0800f711 	.word	0x0800f711

0800f7b8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
    {
    }
 800f7da:	bf00      	nop
 800f7dc:	370c      	adds	r7, #12
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr

0800f7e6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f7e6:	b480      	push	{r7}
 800f7e8:	b083      	sub	sp, #12
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
    {
    }
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
    {
    }
 800f806:	bf00      	nop
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
 800f81a:	460b      	mov	r3, r1
 800f81c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f81e:	bf00      	nop
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr

0800f82a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f82a:	b480      	push	{r7}
 800f82c:	b083      	sub	sp, #12
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
    {
    }
 800f832:	bf00      	nop
 800f834:	370c      	adds	r7, #12
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr

0800f83e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f83e:	b480      	push	{r7}
 800f840:	b083      	sub	sp, #12
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
    {
    }
 800f846:	bf00      	nop
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
	...

0800f854 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    {
 800f85c:	4a04      	ldr	r2, [pc, #16]	; (800f870 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	601a      	str	r2, [r3, #0]
    }
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	08026b64 	.word	0x08026b64

0800f874 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
    }
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7ff ffe9 	bl	800f854 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f882:	2104      	movs	r1, #4
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f015 faf9 	bl	8024e7c <_ZdlPvj>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f89c:	4a07      	ldr	r2, [pc, #28]	; (800f8bc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	605a      	str	r2, [r3, #4]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	721a      	strb	r2, [r3, #8]
    {
    }
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	08026b44 	.word	0x08026b44

0800f8c0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
    {
 800f8c8:	4a04      	ldr	r2, [pc, #16]	; (800f8dc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	601a      	str	r2, [r3, #0]
    }
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	08026b44 	.word	0x08026b44

0800f8e0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
    }
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff ffe9 	bl	800f8c0 <_ZN8touchgfx10TransitionD1Ev>
 800f8ee:	210c      	movs	r1, #12
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f015 fac3 	bl	8024e7c <_ZdlPvj>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	bf00      	nop
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	605a      	str	r2, [r3, #4]
    }
 800f94c:	bf00      	nop
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr

0800f958 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	460b      	mov	r3, r1
 800f962:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
    {
 800f978:	4a04      	ldr	r2, [pc, #16]	; (800f98c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	601a      	str	r2, [r3, #0]
    }
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	08026b2c 	.word	0x08026b2c

0800f990 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
    }
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f7ff ffe9 	bl	800f970 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f99e:	2104      	movs	r1, #4
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f015 fa6b 	bl	8024e7c <_ZdlPvj>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f9b0:	b480      	push	{r7}
 800f9b2:	af00      	add	r7, sp, #0
    {
        return instance;
 800f9b4:	4b03      	ldr	r3, [pc, #12]	; (800f9c4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
    }
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	2000c508 	.word	0x2000c508

0800f9c8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f9c8:	b480      	push	{r7}
 800f9ca:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f9cc:	4b0b      	ldr	r3, [pc, #44]	; (800f9fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d008      	beq.n	800f9ea <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f9d8:	4b08      	ldr	r3, [pc, #32]	; (800f9fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f9e2:	4b06      	ldr	r3, [pc, #24]	; (800f9fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9e8:	e002      	b.n	800f9f0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f9ea:	4b04      	ldr	r3, [pc, #16]	; (800f9fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	2000c508 	.word	0x2000c508

0800fa00 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	4a05      	ldr	r2, [pc, #20]	; (800fa20 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	601a      	str	r2, [r3, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7ff ff1f 	bl	800f854 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	08028938 	.word	0x08028938

0800fa24 <_ZN8touchgfx11ApplicationD0Ev>:
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7ff ffe7 	bl	800fa00 <_ZN8touchgfx11ApplicationD1Ev>
 800fa32:	f44f 7198 	mov.w	r1, #304	; 0x130
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f015 fa20 	bl	8024e7c <_ZdlPvj>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f009 fa6e 	bl	8018f34 <_ZN8touchgfx11ApplicationC1Ev>
 800fa58:	4a09      	ldr	r2, [pc, #36]	; (800fa80 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	601a      	str	r2, [r3, #0]
        currentPresenter(0),
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        pendingScreenTransitionCallback(0)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a04      	ldr	r2, [pc, #16]	; (800fa84 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fa72:	6013      	str	r3, [r2, #0]
    }
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4618      	mov	r0, r3
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	08026af0 	.word	0x08026af0
 800fa84:	2000c594 	.word	0x2000c594

0800fa88 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	4a05      	ldr	r2, [pc, #20]	; (800faa8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	601a      	str	r2, [r3, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff ffb1 	bl	800fa00 <_ZN8touchgfx11ApplicationD1Ev>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	08026af0 	.word	0x08026af0

0800faac <_ZN8touchgfx14MVPApplicationD0Ev>:
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff ffe7 	bl	800fa88 <_ZN8touchgfx14MVPApplicationD1Ev>
 800faba:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f015 f9dc 	bl	8024e7c <_ZdlPvj>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f804 	bl	800fae4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fadc:	bf00      	nop
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00f      	beq.n	800fb16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	330c      	adds	r3, #12
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4610      	mov	r0, r2
 800fb0a:	4798      	blx	r3
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb12:	2301      	movs	r3, #1
 800fb14:	e000      	b.n	800fb18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fb16:	2300      	movs	r3, #0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00e      	beq.n	800fb3a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4610      	mov	r0, r2
 800fb30:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800fb3a:	bf00      	nop
 800fb3c:	3708      	adds	r7, #8
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b084      	sub	sp, #16
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	60f8      	str	r0, [r7, #12]
 800fb4a:	60b9      	str	r1, [r7, #8]
 800fb4c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800fb4e:	f009 f9cf 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 800fb52:	4603      	mov	r3, r0
 800fb54:	4618      	mov	r0, r3
 800fb56:	f009 f9d1 	bl	8018efc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d008      	beq.n	800fb74 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	330c      	adds	r3, #12
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4610      	mov	r0, r2
 800fb72:	4798      	blx	r3
    }
    if (*currentTrans)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d007      	beq.n	800fb8c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4610      	mov	r0, r2
 800fb8a:	4798      	blx	r3
    }
    if (*currentScreen)
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d008      	beq.n	800fba6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3314      	adds	r3, #20
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4610      	mov	r0, r2
 800fba4:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d008      	beq.n	800fbc0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	4798      	blx	r3
    }
    if (*currentScreen)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d007      	beq.n	800fbd8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4610      	mov	r0, r2
 800fbd6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d008      	beq.n	800fbf2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	3308      	adds	r3, #8
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4610      	mov	r0, r2
 800fbf0:	4798      	blx	r3
    }
}
 800fbf2:	bf00      	nop
 800fbf4:	3710      	adds	r7, #16
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}

0800fbfa <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800fbfa:	b580      	push	{r7, lr}
 800fbfc:	b084      	sub	sp, #16
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	60f8      	str	r0, [r7, #12]
 800fc02:	60b9      	str	r1, [r7, #8]
 800fc04:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	330c      	adds	r3, #12
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	4798      	blx	r3
    newPresenter->activate();
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	68b8      	ldr	r0, [r7, #8]
 800fc1a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fc1c:	6879      	ldr	r1, [r7, #4]
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f00a fa76 	bl	801a110 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	3310      	adds	r3, #16
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	4798      	blx	r3

    Application::getInstance()->draw();
 800fc30:	f009 f95e 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 800fc34:	4603      	mov	r3, r0
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	3228      	adds	r2, #40	; 0x28
 800fc3a:	6812      	ldr	r2, [r2, #0]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	4790      	blx	r2
}
 800fc40:	bf00      	nop
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	683a      	ldr	r2, [r7, #0]
 800fc56:	601a      	str	r2, [r3, #0]
    }
 800fc58:	bf00      	nop
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	4a08      	ldr	r2, [pc, #32]	; (800fc90 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	601a      	str	r2, [r3, #0]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f000 fa4d 	bl	8010118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff ff01 	bl	800fa88 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	08026a9c 	.word	0x08026a9c

0800fc94 <_ZN23FrontendApplicationBaseD0Ev>:
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff ffe1 	bl	800fc64 <_ZN23FrontendApplicationBaseD1Ev>
 800fca2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f015 f8e8 	bl	8024e7c <_ZdlPvj>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
	...

0800fcb8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff fde6 	bl	800f894 <_ZN8touchgfx10TransitionC1Ev>
 800fcc8:	4a03      	ldr	r2, [pc, #12]	; (800fcd8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	08026a7c 	.word	0x08026a7c

0800fcdc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	4a05      	ldr	r2, [pc, #20]	; (800fcfc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	601a      	str	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fde7 	bl	800f8c0 <_ZN8touchgfx10TransitionD1Ev>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	08026a7c 	.word	0x08026a7c

0800fd00 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff ffe7 	bl	800fcdc <_ZN8touchgfx12NoTransitionD1Ev>
 800fd0e:	210c      	movs	r1, #12
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f015 f8b3 	bl	8024e7c <_ZdlPvj>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	721a      	strb	r2, [r3, #8]
    }
 800fd2e:	bf00      	nop
 800fd30:	370c      	adds	r7, #12
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr

0800fd3a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fd3a:	b480      	push	{r7}
 800fd3c:	b083      	sub	sp, #12
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	605a      	str	r2, [r3, #4]
    }
 800fd4a:	bf00      	nop
 800fd4c:	370c      	adds	r7, #12
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
	...

0800fd58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff fe6e 	bl	800fa48 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fd6c:	4a13      	ldr	r2, [pc, #76]	; (800fdbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f000 f89f 	bl	800febc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      model(m)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fd8e:	f7ff fe0f 	bl	800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fd92:	4603      	mov	r3, r0
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	3208      	adds	r2, #8
 800fd98:	6812      	ldr	r2, [r2, #0]
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800fda0:	2000      	movs	r0, #0
 800fda2:	f002 fda9 	bl	80128f8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fda6:	f7ff fe0f 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	4618      	mov	r0, r3
 800fdae:	f00e fd76 	bl	801e89e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	08026a9c 	.word	0x08026a9c

0800fdc0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fdc0:	b480      	push	{r7}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	4611      	mov	r1, r2
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff ffe9 	bl	800fdc0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	685a      	ldr	r2, [r3, #4]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	605a      	str	r2, [r3, #4]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	3208      	adds	r2, #8
 800fdfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe02:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fe10:	b590      	push	{r4, r7, lr}
 800fe12:	b089      	sub	sp, #36	; 0x24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fe1e:	4b10      	ldr	r3, [pc, #64]	; (800fe60 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	2300      	movs	r3, #0
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	f107 0008 	add.w	r0, r7, #8
 800fe2a:	f107 0318 	add.w	r3, r7, #24
 800fe2e:	cb0c      	ldmia	r3, {r2, r3}
 800fe30:	6879      	ldr	r1, [r7, #4]
 800fe32:	f000 f85f 	bl	800fef4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fe36:	f107 0308 	add.w	r3, r7, #8
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f7ff ffcb 	bl	800fdd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fe42:	f107 0308 	add.w	r3, r7, #8
 800fe46:	4618      	mov	r0, r3
 800fe48:	f000 f966 	bl	8010118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fe58:	bf00      	nop
 800fe5a:	3724      	adds	r7, #36	; 0x24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd90      	pop	{r4, r7, pc}
 800fe60:	0800fe65 	.word	0x0800fe65

0800fe64 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af02      	add	r7, sp, #8
 800fe6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fe78:	461a      	mov	r2, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	4b04      	ldr	r3, [pc, #16]	; (800fe94 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fe84:	4804      	ldr	r0, [pc, #16]	; (800fe98 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fe86:	f000 f855 	bl	800ff34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fe8a:	bf00      	nop
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	2000c588 	.word	0x2000c588
 800fe98:	2000c584 	.word	0x2000c584

0800fe9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	4a04      	ldr	r2, [pc, #16]	; (800feb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	601a      	str	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4618      	mov	r0, r3
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	08026b2c 	.word	0x08026b2c

0800febc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7ff ffe8 	bl	800fe9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fecc:	4a08      	ldr	r2, [pc, #32]	; (800fef0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	601a      	str	r2, [r3, #0]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	605a      	str	r2, [r3, #4]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	609a      	str	r2, [r3, #8]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	60da      	str	r2, [r3, #12]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	08026ad8 	.word	0x08026ad8

0800fef4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	4639      	mov	r1, r7
 800ff00:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7ff ffc8 	bl	800fe9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff0c:	4a08      	ldr	r2, [pc, #32]	; (800ff30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	68ba      	ldr	r2, [r7, #8]
 800ff16:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	3308      	adds	r3, #8
 800ff1c:	463a      	mov	r2, r7
 800ff1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	08026ad8 	.word	0x08026ad8

0800ff34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ff34:	b590      	push	{r4, r7, lr}
 800ff36:	b089      	sub	sp, #36	; 0x24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
 800ff40:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	689a      	ldr	r2, [r3, #8]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3320      	adds	r3, #32
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	4610      	mov	r0, r2
 800ff52:	4798      	blx	r3
 800ff54:	4603      	mov	r3, r0
 800ff56:	f242 72bb 	movw	r2, #10171	; 0x27bb
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d805      	bhi.n	800ff6a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ff5e:	4b45      	ldr	r3, [pc, #276]	; (8010074 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 800ff60:	4a45      	ldr	r2, [pc, #276]	; (8010078 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 800ff62:	21c2      	movs	r1, #194	; 0xc2
 800ff64:	4845      	ldr	r0, [pc, #276]	; (801007c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800ff66:	f014 ffb7 	bl	8024ed8 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	685a      	ldr	r2, [r3, #4]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	3320      	adds	r3, #32
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4610      	mov	r0, r2
 800ff7a:	4798      	blx	r3
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b0f      	cmp	r3, #15
 800ff80:	d805      	bhi.n	800ff8e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800ff82:	4b3f      	ldr	r3, [pc, #252]	; (8010080 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 800ff84:	4a3c      	ldr	r2, [pc, #240]	; (8010078 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 800ff86:	21c3      	movs	r1, #195	; 0xc3
 800ff88:	483c      	ldr	r0, [pc, #240]	; (801007c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800ff8a:	f014 ffa5 	bl	8024ed8 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68da      	ldr	r2, [r3, #12]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	3320      	adds	r3, #32
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	4798      	blx	r3
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b0b      	cmp	r3, #11
 800ffa4:	d805      	bhi.n	800ffb2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800ffa6:	4b37      	ldr	r3, [pc, #220]	; (8010084 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 800ffa8:	4a33      	ldr	r2, [pc, #204]	; (8010078 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 800ffaa:	21c4      	movs	r1, #196	; 0xc4
 800ffac:	4833      	ldr	r0, [pc, #204]	; (801007c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800ffae:	f014 ff93 	bl	8024ed8 <__assert_func>

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	68b9      	ldr	r1, [r7, #8]
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff fdc3 	bl	800fb42 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f000 f860 	bl	8010088 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	4619      	mov	r1, r3
 800ffcc:	200c      	movs	r0, #12
 800ffce:	f7ff fbf3 	bl	800f7b8 <_ZnwjPv>
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f7ff fe6f 	bl	800fcb8 <_ZN8touchgfx12NoTransitionC1Ev>
 800ffda:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f000 f863 	bl	80100ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	4619      	mov	r1, r3
 800ffec:	f242 70bc 	movw	r0, #10172	; 0x27bc
 800fff0:	f7ff fbe2 	bl	800f7b8 <_ZnwjPv>
 800fff4:	4604      	mov	r4, r0
 800fff6:	4620      	mov	r0, r4
 800fff8:	f002 ff06 	bl	8012e08 <_ZN8MainViewC1Ev>
 800fffc:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	2100      	movs	r1, #0
 8010004:	4618      	mov	r0, r3
 8010006:	f000 f865 	bl	80100d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 801000a:	4603      	mov	r3, r0
 801000c:	4619      	mov	r1, r3
 801000e:	2010      	movs	r0, #16
 8010010:	f7ff fbd2 	bl	800f7b8 <_ZnwjPv>
 8010014:	4604      	mov	r4, r0
 8010016:	69b9      	ldr	r1, [r7, #24]
 8010018:	4620      	mov	r0, r4
 801001a:	f002 fe3b 	bl	8012c94 <_ZN13MainPresenterC1ER8MainView>
 801001e:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	69fa      	ldr	r2, [r7, #28]
 8010024:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	69ba      	ldr	r2, [r7, #24]
 8010030:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d002      	beq.n	801003e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	3304      	adds	r3, #4
 801003c:	e000      	b.n	8010040 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801003e:	2300      	movs	r3, #0
 8010040:	4619      	mov	r1, r3
 8010042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010044:	f7ff fe00 	bl	800fc48 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	3304      	adds	r3, #4
 801004c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff fe73 	bl	800fd3a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	6979      	ldr	r1, [r7, #20]
 8010058:	4618      	mov	r0, r3
 801005a:	f000 f84e 	bl	80100fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801005e:	69fa      	ldr	r2, [r7, #28]
 8010060:	6979      	ldr	r1, [r7, #20]
 8010062:	69b8      	ldr	r0, [r7, #24]
 8010064:	f7ff fdc9 	bl	800fbfa <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8010068:	697b      	ldr	r3, [r7, #20]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3724      	adds	r7, #36	; 0x24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd90      	pop	{r4, r7, pc}
 8010072:	bf00      	nop
 8010074:	080260b4 	.word	0x080260b4
 8010078:	08026144 	.word	0x08026144
 801007c:	08026244 	.word	0x08026244
 8010080:	08026288 	.word	0x08026288
 8010084:	0802632c 	.word	0x0802632c

08010088 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	460b      	mov	r3, r1
 8010092:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	3324      	adds	r3, #36	; 0x24
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	887a      	ldrh	r2, [r7, #2]
 801009e:	4611      	mov	r1, r2
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	4798      	blx	r3
 80100a4:	4603      	mov	r3, r0
    }
 80100a6:	4618      	mov	r0, r3
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b082      	sub	sp, #8
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	460b      	mov	r3, r1
 80100b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	3324      	adds	r3, #36	; 0x24
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	887a      	ldrh	r2, [r7, #2]
 80100c4:	4611      	mov	r1, r2
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	4798      	blx	r3
 80100ca:	4603      	mov	r3, r0
    }
 80100cc:	4618      	mov	r0, r3
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	460b      	mov	r3, r1
 80100de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	3324      	adds	r3, #36	; 0x24
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	887a      	ldrh	r2, [r7, #2]
 80100ea:	4611      	mov	r1, r2
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	4798      	blx	r3
 80100f0:	4603      	mov	r3, r0
    }
 80100f2:	4618      	mov	r0, r3
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80100fa:	b480      	push	{r7}
 80100fc:	b083      	sub	sp, #12
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
 8010102:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801010a:	bf00      	nop
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
	...

08010118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	4a05      	ldr	r2, [pc, #20]	; (8010138 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fc21 	bl	800f970 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	08026ad8 	.word	0x08026ad8

0801013c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7ff ffe7 	bl	8010118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801014a:	2110      	movs	r1, #16
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f014 fe95 	bl	8024e7c <_ZdlPvj>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	68d2      	ldr	r2, [r2, #12]
 801016c:	1052      	asrs	r2, r2, #1
 801016e:	1899      	adds	r1, r3, r2
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	f003 0301 	and.w	r3, r3, #1
 8010178:	2b00      	cmp	r3, #0
 801017a:	d102      	bne.n	8010182 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	e00a      	b.n	8010198 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	68d2      	ldr	r2, [r2, #12]
 801018a:	1052      	asrs	r2, r2, #1
 801018c:	4413      	add	r3, r2
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	6892      	ldr	r2, [r2, #8]
 8010194:	4413      	add	r3, r2
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4608      	mov	r0, r1
 801019a:	4798      	blx	r3
    }
 801019c:	bf00      	nop
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d010      	beq.n	80101d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d107      	bne.n	80101cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d101      	bne.n	80101cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80101c8:	2301      	movs	r3, #1
 80101ca:	e000      	b.n	80101ce <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80101cc:	2300      	movs	r3, #0
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d001      	beq.n	80101d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80101d2:	2301      	movs	r3, #1
 80101d4:	e000      	b.n	80101d8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80101d6:	2300      	movs	r3, #0
    }
 80101d8:	4618      	mov	r0, r3
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	601a      	str	r2, [r3, #0]
    }
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4618      	mov	r0, r3
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr

08010202 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8010202:	b480      	push	{r7}
 8010204:	b083      	sub	sp, #12
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	80da      	strh	r2, [r3, #6]
    }
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4618      	mov	r0, r3
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	4608      	mov	r0, r1
 801023a:	4611      	mov	r1, r2
 801023c:	461a      	mov	r2, r3
 801023e:	4603      	mov	r3, r0
 8010240:	817b      	strh	r3, [r7, #10]
 8010242:	460b      	mov	r3, r1
 8010244:	813b      	strh	r3, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	897a      	ldrh	r2, [r7, #10]
 801024e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	893a      	ldrh	r2, [r7, #8]
 8010254:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	88fa      	ldrh	r2, [r7, #6]
 801025a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	8b3a      	ldrh	r2, [r7, #24]
 8010260:	80da      	strh	r2, [r3, #6]
    }
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4618      	mov	r0, r3
 8010266:	3714      	adds	r7, #20
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr

08010270 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	460b      	mov	r3, r1
 801027a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	887a      	ldrh	r2, [r7, #2]
 8010280:	801a      	strh	r2, [r3, #0]
    {
    }
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4618      	mov	r0, r3
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af02      	add	r7, sp, #8
 8010296:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8010298:	4a13      	ldr	r2, [pc, #76]	; (80102e8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	601a      	str	r2, [r3, #0]
    Drawable() : rect(0, 0, 0, 0),
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	1d18      	adds	r0, r3, #4
 80102a2:	2300      	movs	r3, #0
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	2300      	movs	r3, #0
 80102a8:	2200      	movs	r2, #0
 80102aa:	2100      	movs	r1, #0
 80102ac:	f7ff ffc0 	bl	8010230 <_ZN8touchgfx4RectC1Essss>
        visible(true)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	330c      	adds	r3, #12
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff ffa4 	bl	8010202 <_ZN8touchgfx4RectC1Ev>
        parent(0),
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	615a      	str	r2, [r3, #20]
        nextSibling(0),
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	619a      	str	r2, [r3, #24]
        nextDrawChainElement(0),
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	61da      	str	r2, [r3, #28]
        touchable(false),
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        visible(true)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	08028a70 	.word	0x08028a70

080102ec <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	4a04      	ldr	r2, [pc, #16]	; (8010308 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr
 8010308:	08028a70 	.word	0x08028a70

0801030c <_ZN8touchgfx8DrawableD0Ev>:
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7ff ffe9 	bl	80102ec <_ZN8touchgfx8DrawableD1Ev>
 801031a:	2128      	movs	r1, #40	; 0x28
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f014 fdad 	bl	8024e7c <_ZdlPvj>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	4608      	mov	r0, r1
 8010336:	4611      	mov	r1, r2
 8010338:	461a      	mov	r2, r3
 801033a:	4603      	mov	r3, r0
 801033c:	817b      	strh	r3, [r7, #10]
 801033e:	460b      	mov	r3, r1
 8010340:	813b      	strh	r3, [r7, #8]
 8010342:	4613      	mov	r3, r2
 8010344:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	3334      	adds	r3, #52	; 0x34
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010352:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	4798      	blx	r3
        setWidth(width);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3338      	adds	r3, #56	; 0x38
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010366:	4611      	mov	r1, r2
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	4798      	blx	r3
        setHeight(height);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	333c      	adds	r3, #60	; 0x3c
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010378:	4611      	mov	r1, r2
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	4798      	blx	r3
    }
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	460b      	mov	r3, r1
 8010390:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	887a      	ldrh	r2, [r7, #2]
 8010396:	809a      	strh	r2, [r3, #4]
    }
 8010398:	bf00      	nop
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	460b      	mov	r3, r1
 80103ae:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	887a      	ldrh	r2, [r7, #2]
 80103b4:	80da      	strh	r2, [r3, #6]
    }
 80103b6:	bf00      	nop
 80103b8:	370c      	adds	r7, #12
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b082      	sub	sp, #8
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	460b      	mov	r3, r1
 80103cc:	807b      	strh	r3, [r7, #2]
 80103ce:	4613      	mov	r3, r2
 80103d0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	332c      	adds	r3, #44	; 0x2c
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80103de:	4611      	mov	r1, r2
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	4798      	blx	r3
        setY(y);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3330      	adds	r3, #48	; 0x30
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80103f0:	4611      	mov	r1, r2
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	4798      	blx	r3
    }
 80103f6:	bf00      	nop
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80103fe:	b480      	push	{r7}
 8010400:	b083      	sub	sp, #12
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	460b      	mov	r3, r1
 8010408:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	887a      	ldrh	r2, [r7, #2]
 801040e:	811a      	strh	r2, [r3, #8]
    }
 8010410:	bf00      	nop
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	460b      	mov	r3, r1
 8010426:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	887a      	ldrh	r2, [r7, #2]
 801042c:	815a      	strh	r2, [r3, #10]
    }
 801042e:	bf00      	nop
 8010430:	370c      	adds	r7, #12
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr

0801043a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	bf00      	nop
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 801044e:	b480      	push	{r7}
 8010450:	b083      	sub	sp, #12
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	6039      	str	r1, [r7, #0]
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
 801046e:	bf00      	nop
 8010470:	370c      	adds	r7, #12
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr

0801047a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801047a:	b480      	push	{r7}
 801047c:	b083      	sub	sp, #12
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	6039      	str	r1, [r7, #0]
 8010484:	bf00      	nop
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010490:	b480      	push	{r7}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	460b      	mov	r3, r1
 80104ae:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	78fa      	ldrb	r2, [r7, #3]
 80104b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80104b8:	bf00      	nop
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80104c4:	b480      	push	{r7}
 80104c6:	b083      	sub	sp, #12
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80104d2:	4618      	mov	r0, r3
 80104d4:	370c      	adds	r7, #12
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr

080104de <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80104de:	b480      	push	{r7}
 80104e0:	b083      	sub	sp, #12
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80104ec:	4618      	mov	r0, r3
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	807b      	strh	r3, [r7, #2]
 8010504:	4613      	mov	r3, r2
 8010506:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3354      	adds	r3, #84	; 0x54
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	8879      	ldrh	r1, [r7, #2]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010518:	b292      	uxth	r2, r2
 801051a:	1a8a      	subs	r2, r1, r2
 801051c:	b292      	uxth	r2, r2
 801051e:	b210      	sxth	r0, r2
 8010520:	8839      	ldrh	r1, [r7, #0]
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010528:	b292      	uxth	r2, r2
 801052a:	1a8a      	subs	r2, r1, r2
 801052c:	b292      	uxth	r2, r2
 801052e:	b212      	sxth	r2, r2
 8010530:	4601      	mov	r1, r0
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	4798      	blx	r3
    }
 8010536:	bf00      	nop
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801053e:	b480      	push	{r7}
 8010540:	b083      	sub	sp, #12
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801054c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010554:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801055c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 801055e:	bf00      	nop
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801056a:	b580      	push	{r7, lr}
 801056c:	b084      	sub	sp, #16
 801056e:	af00      	add	r7, sp, #0
 8010570:	60f8      	str	r0, [r7, #12]
 8010572:	60b9      	str	r1, [r7, #8]
 8010574:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f7ff ffe1 	bl	801053e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	601a      	str	r2, [r3, #0]
    }
 801058a:	bf00      	nop
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	4a05      	ldr	r2, [pc, #20]	; (80105b4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff fea1 	bl	80102ec <_ZN8touchgfx8DrawableD1Ev>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	0802783c 	.word	0x0802783c

080105b8 <_ZN8touchgfx9ContainerD0Ev>:
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff ffe7 	bl	8010594 <_ZN8touchgfx9ContainerD1Ev>
 80105c6:	212c      	movs	r1, #44	; 0x2c
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f014 fc57 	bl	8024e7c <_ZdlPvj>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	4a06      	ldr	r2, [pc, #24]	; (80105fc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	601a      	str	r2, [r3, #0]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	3304      	adds	r3, #4
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7ff ffd2 	bl	8010594 <_ZN8touchgfx9ContainerD1Ev>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	08028b68 	.word	0x08028b68

08010600 <_ZN8touchgfx6ScreenD0Ev>:
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7ff ffe5 	bl	80105d8 <_ZN8touchgfx6ScreenD1Ev>
 801060e:	213c      	movs	r1, #60	; 0x3c
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f014 fc33 	bl	8024e7c <_ZdlPvj>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	bf00      	nop
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	bf00      	nop
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    {
    }
 8010664:	bf00      	nop
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	460b      	mov	r3, r1
 801067a:	70fb      	strb	r3, [r7, #3]
    {
    }
 801067c:	bf00      	nop
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	3304      	adds	r3, #4
 8010696:	6839      	ldr	r1, [r7, #0]
 8010698:	4618      	mov	r0, r3
 801069a:	f005 fa8d 	bl	8015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801069e:	bf00      	nop
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
	...

080106a8 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff fdec 	bl	8010290 <_ZN8touchgfx8DrawableC1Ev>
 80106b8:	4a03      	ldr	r2, [pc, #12]	; (80106c8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	08026c70 	.word	0x08026c70

080106cc <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	4a05      	ldr	r2, [pc, #20]	; (80106ec <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fe05 	bl	80102ec <_ZN8touchgfx8DrawableD1Ev>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	08026c70 	.word	0x08026c70

080106f0 <_ZN8touchgfx6WidgetD0Ev>:
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff ffe7 	bl	80106cc <_ZN8touchgfx6WidgetD1Ev>
 80106fe:	2128      	movs	r1, #40	; 0x28
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f014 fbbb 	bl	8024e7c <_ZdlPvj>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4618      	mov	r0, r3
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	607b      	str	r3, [r7, #4]
 801071a:	460b      	mov	r3, r1
 801071c:	817b      	strh	r3, [r7, #10]
 801071e:	4613      	mov	r3, r2
 8010720:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	4618      	mov	r0, r3
 8010726:	f7ff fecd 	bl	80104c4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d008      	beq.n	8010742 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	4618      	mov	r0, r3
 8010734:	f7ff fed3 	bl	80104de <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801073e:	2301      	movs	r3, #1
 8010740:	e000      	b.n	8010744 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010742:	2300      	movs	r3, #0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d002      	beq.n	801074e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010748:	68fa      	ldr	r2, [r7, #12]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	601a      	str	r2, [r3, #0]
        }
    }
 801074e:	bf00      	nop
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
	...

08010758 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4618      	mov	r0, r3
 8010764:	f7ff ffa0 	bl	80106a8 <_ZN8touchgfx6WidgetC1Ev>
 8010768:	4a0a      	ldr	r2, [pc, #40]	; (8010794 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	22ff      	movs	r2, #255	; 0xff
 8010772:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	3328      	adds	r3, #40	; 0x28
 801077a:	2100      	movs	r1, #0
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff fd31 	bl	80101e4 <_ZN8touchgfx9colortypeC1Em>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	08028574 	.word	0x08028574

08010798 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	4a05      	ldr	r2, [pc, #20]	; (80107b8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7ff ff8f 	bl	80106cc <_ZN8touchgfx6WidgetD1Ev>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4618      	mov	r0, r3
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	08028574 	.word	0x08028574

080107bc <_ZN8touchgfx3BoxD0Ev>:
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7ff ffe7 	bl	8010798 <_ZN8touchgfx3BoxD1Ev>
 80107ca:	2130      	movs	r1, #48	; 0x30
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f014 fb55 	bl	8024e7c <_ZdlPvj>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	683a      	ldr	r2, [r7, #0]
 80107ea:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80107ec:	bf00      	nop
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	460b      	mov	r3, r1
 8010802:	807b      	strh	r3, [r7, #2]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	887a      	ldrh	r2, [r7, #2]
 8010808:	801a      	strh	r2, [r3, #0]
    }
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
        assertValid();
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7fe fca7 	bl	800f174 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8010826:	4b06      	ldr	r3, [pc, #24]	; (8010840 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	881b      	ldrh	r3, [r3, #0]
 801082e:	4619      	mov	r1, r3
 8010830:	4610      	mov	r0, r2
 8010832:	f002 f8b7 	bl	80129a4 <_ZNK8touchgfx5Texts7getTextEt>
 8010836:	4603      	mov	r3, r0
    }
 8010838:	4618      	mov	r0, r3
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	2000c5a4 	.word	0x2000c5a4

08010844 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	4618      	mov	r0, r3
 8010850:	f7ff ff2a 	bl	80106a8 <_ZN8touchgfx6WidgetC1Ev>
 8010854:	4a13      	ldr	r2, [pc, #76]	; (80108a4 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3326      	adds	r3, #38	; 0x26
 801085e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff ffc8 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3328      	adds	r3, #40	; 0x28
 801086c:	2100      	movs	r1, #0
 801086e:	4618      	mov	r0, r3
 8010870:	f7ff fcb8 	bl	80101e4 <_ZN8touchgfx9colortypeC1Em>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	859a      	strh	r2, [r3, #44]	; 0x2c
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	22ff      	movs	r2, #255	; 0xff
 801087e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	080284f8 	.word	0x080284f8

080108a8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af02      	add	r7, sp, #8
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80108b2:	2300      	movs	r3, #0
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	2300      	movs	r3, #0
 80108b8:	2200      	movs	r2, #0
 80108ba:	2100      	movs	r1, #0
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7ff fcb7 	bl	8010230 <_ZN8touchgfx4RectC1Essss>
    }
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}

080108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80108ca:	b480      	push	{r7}
 80108cc:	b083      	sub	sp, #12
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
 80108d2:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	683a      	ldr	r2, [r7, #0]
 80108d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80108da:	bf00      	nop
 80108dc:	370c      	adds	r7, #12
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr

080108e6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80108e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e8:	b085      	sub	sp, #20
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	460b      	mov	r3, r1
 80108f0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80108f2:	687e      	ldr	r6, [r7, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3330      	adds	r3, #48	; 0x30
 80108fa:	681c      	ldr	r4, [r3, #0]
 80108fc:	887d      	ldrh	r5, [r7, #2]
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f845 	bl	801098e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010904:	4603      	mov	r3, r0
 8010906:	81bb      	strh	r3, [r7, #12]
 8010908:	f107 030c 	add.w	r3, r7, #12
 801090c:	4618      	mov	r0, r3
 801090e:	f7fe fbfd 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 8010912:	4603      	mov	r3, r0
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	322c      	adds	r2, #44	; 0x2c
 8010918:	6812      	ldr	r2, [r2, #0]
 801091a:	4618      	mov	r0, r3
 801091c:	4790      	blx	r2
 801091e:	4603      	mov	r3, r0
 8010920:	1aeb      	subs	r3, r5, r3
 8010922:	b29b      	uxth	r3, r3
 8010924:	b21b      	sxth	r3, r3
 8010926:	4619      	mov	r1, r3
 8010928:	4630      	mov	r0, r6
 801092a:	47a0      	blx	r4
    }
 801092c:	bf00      	nop
 801092e:	3714      	adds	r7, #20
 8010930:	46bd      	mov	sp, r7
 8010932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010934 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	460b      	mov	r3, r1
 801093e:	807b      	strh	r3, [r7, #2]
 8010940:	4613      	mov	r3, r2
 8010942:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	332c      	adds	r3, #44	; 0x2c
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010952:	4610      	mov	r0, r2
 8010954:	4798      	blx	r3
        setBaselineY(baselineY);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	3360      	adds	r3, #96	; 0x60
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010962:	4611      	mov	r1, r2
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	4798      	blx	r3
    }
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	887a      	ldrh	r2, [r7, #2]
 8010980:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010982:	bf00      	nop
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801099a:	4618      	mov	r0, r3
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
	...

080109a8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	4a05      	ldr	r2, [pc, #20]	; (80109c8 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	601a      	str	r2, [r3, #0]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7ff fe87 	bl	80106cc <_ZN8touchgfx6WidgetD1Ev>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4618      	mov	r0, r3
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	080284f8 	.word	0x080284f8

080109cc <_ZN8touchgfx8TextAreaD0Ev>:
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff ffe7 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 80109da:	2134      	movs	r1, #52	; 0x34
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f014 fa4d 	bl	8024e7c <_ZdlPvj>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
        : TextArea()
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7ff ff24 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 80109fc:	4a03      	ldr	r2, [pc, #12]	; (8010a0c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
    {
    }
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4618      	mov	r0, r3
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	08026bf4 	.word	0x08026bf4

08010a10 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	4a05      	ldr	r2, [pc, #20]	; (8010a30 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff ffc1 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08026bf4 	.word	0x08026bf4

08010a34 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7ff ffe7 	bl	8010a10 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010a42:	2134      	movs	r1, #52	; 0x34
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f014 fa19 	bl	8024e7c <_ZdlPvj>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff ffc4 	bl	80109ec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010a64:	4a05      	ldr	r2, [pc, #20]	; (8010a7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4618      	mov	r0, r3
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	08028660 	.word	0x08028660

08010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff fdfd 	bl	80106a8 <_ZN8touchgfx6WidgetC1Ev>
 8010aae:	4a0b      	ldr	r2, [pc, #44]	; (8010adc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	601a      	str	r2, [r3, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	3326      	adds	r3, #38	; 0x26
 8010ab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7ff fbd7 	bl	8010270 <_ZN8touchgfx6BitmapC1Et>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	22ff      	movs	r2, #255	; 0xff
 8010ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8010aca:	6839      	ldr	r1, [r7, #0]
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f007 f961 	bl	8017d94 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	080286dc 	.word	0x080286dc

08010ae0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6039      	str	r1, [r7, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	683a      	ldr	r2, [r7, #0]
 8010aee:	601a      	str	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	370c      	adds	r7, #12
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr

08010afe <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
        }
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010b16:	b590      	push	{r4, r7, lr}
 8010b18:	b083      	sub	sp, #12
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	3340      	adds	r3, #64	; 0x40
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7ff ffea 	bl	8010afe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	463b      	mov	r3, r7
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff ffe5 	bl	8010afe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010b34:	4603      	mov	r3, r0
 8010b36:	429c      	cmp	r4, r3
 8010b38:	bf0c      	ite	eq
 8010b3a:	2301      	moveq	r3, #1
 8010b3c:	2300      	movne	r3, #0
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d106      	bne.n	8010b52 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f006 fb9c 	bl	8017288 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010b50:	e000      	b.n	8010b54 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010b52:	bf00      	nop
    }
 8010b54:	370c      	adds	r7, #12
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd90      	pop	{r4, r7, pc}
	...

08010b5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	4a05      	ldr	r2, [pc, #20]	; (8010b7c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	601a      	str	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f006 f99f 	bl	8016eb0 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	0802804c 	.word	0x0802804c

08010b80 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7ff ffe7 	bl	8010b5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010b8e:	2114      	movs	r1, #20
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f014 f973 	bl	8024e7c <_ZdlPvj>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	4a05      	ldr	r2, [pc, #20]	; (8010bc0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	601a      	str	r2, [r3, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7ff fd8b 	bl	80106cc <_ZN8touchgfx6WidgetD1Ev>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}
 8010bc0:	080286dc 	.word	0x080286dc

08010bc4 <_ZN8touchgfx5ImageD0Ev>:
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7ff ffe7 	bl	8010ba0 <_ZN8touchgfx5ImageD1Ev>
 8010bd2:	212c      	movs	r1, #44	; 0x2c
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f014 f951 	bl	8024e7c <_ZdlPvj>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	4a05      	ldr	r2, [pc, #20]	; (8010c04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	601a      	str	r2, [r3, #0]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff fcef 	bl	80105d8 <_ZN8touchgfx6ScreenD1Ev>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	08026bc0 	.word	0x08026bc0

08010c08 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7ff ffe7 	bl	8010be4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010c16:	2140      	movs	r1, #64	; 0x40
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f014 f92f 	bl	8024e7c <_ZdlPvj>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4618      	mov	r0, r3
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	4a84      	ldr	r2, [pc, #528]	; (8010e44 <_ZN12MainViewBaseD1Ev+0x21c>)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	601a      	str	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f001 fdc7 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7ff fead 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8010c54:	4618      	mov	r0, r3
 8010c56:	f001 fdbb 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff fea1 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f001 fdaf 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f001 fda9 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8010c84:	4618      	mov	r0, r3
 8010c86:	f001 fda3 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7ff fe89 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f001 fd97 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f004 fc89 	bl	80155c0 <_ZN8touchgfx13ImageProgressD1Ev>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f001 fd8b 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f001 fdc9 	bl	8012858 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f001 fda1 	bl	8012814 <_ZN8touchgfx4LineD1Ev>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f001 fdbd 	bl	8012858 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f001 fd95 	bl	8012814 <_ZN8touchgfx4LineD1Ev>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f004 fb65 	bl	80153c0 <_ZN8touchgfx11BoxProgressD1Ev>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ff fe53 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f001 fd61 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8010d14:	4618      	mov	r0, r3
 8010d16:	f001 fd5b 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff fe41 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7ff fe3b 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f001 fd49 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8010d44:	4618      	mov	r0, r3
 8010d46:	f001 fd43 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7ff fe29 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff fe23 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f001 fd75 	bl	8012858 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010d74:	4618      	mov	r0, r3
 8010d76:	f001 fd4d 	bl	8012814 <_ZN8touchgfx4LineD1Ev>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010d80:	4618      	mov	r0, r3
 8010d82:	f001 fd25 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f001 fd1f 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f001 fd19 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010da4:	4618      	mov	r0, r3
 8010da6:	f001 fd13 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010db0:	4618      	mov	r0, r3
 8010db2:	f001 fd0d 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f001 fd07 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f001 fd01 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f001 fcfb 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff fedd 	bl	8010ba0 <_ZN8touchgfx5ImageD1Ev>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010dec:	4618      	mov	r0, r3
 8010dee:	f001 fcef 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f001 fce9 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fdcf 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	33d8      	adds	r3, #216	; 0xd8
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7ff fdca 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	33a4      	adds	r3, #164	; 0xa4
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff fdc5 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3370      	adds	r3, #112	; 0x70
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff fdc0 	bl	80109a8 <_ZN8touchgfx8TextAreaD1Ev>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3340      	adds	r3, #64	; 0x40
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff fcb3 	bl	8010798 <_ZN8touchgfx3BoxD1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7ff fed5 	bl	8010be4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	08026b8c 	.word	0x08026b8c

08010e48 <_ZN12MainViewBaseD0Ev>:
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f7ff fee9 	bl	8010c28 <_ZN12MainViewBaseD1Ev>
 8010e56:	f242 71bc 	movw	r1, #10172	; 0x27bc
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f014 f80e 	bl	8024e7c <_ZdlPvj>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	4618      	mov	r0, r3
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
	...

08010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010e6c:	b590      	push	{r4, r7, lr}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	71fb      	strb	r3, [r7, #7]
 8010e76:	460b      	mov	r3, r1
 8010e78:	71bb      	strb	r3, [r7, #6]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010e7e:	f7fe fd97 	bl	800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d105      	bne.n	8010e94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010e88:	4b09      	ldr	r3, [pc, #36]	; (8010eb0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x44>)
 8010e8a:	4a0a      	ldr	r2, [pc, #40]	; (8010eb4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010e8c:	2138      	movs	r1, #56	; 0x38
 8010e8e:	480a      	ldr	r0, [pc, #40]	; (8010eb8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010e90:	f014 f822 	bl	8024ed8 <__assert_func>
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010e94:	f7fe fd98 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8010e98:	6803      	ldr	r3, [r0, #0]
 8010e9a:	332c      	adds	r3, #44	; 0x2c
 8010e9c:	681c      	ldr	r4, [r3, #0]
 8010e9e:	797b      	ldrb	r3, [r7, #5]
 8010ea0:	79ba      	ldrb	r2, [r7, #6]
 8010ea2:	79f9      	ldrb	r1, [r7, #7]
 8010ea4:	47a0      	blx	r4
 8010ea6:	4603      	mov	r3, r0
    }
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd90      	pop	{r4, r7, pc}
 8010eb0:	080264dc 	.word	0x080264dc
 8010eb4:	08026520 	.word	0x08026520
 8010eb8:	0802657c 	.word	0x0802657c

08010ebc <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010ebc:	b590      	push	{r4, r7, lr}
 8010ebe:	b0c1      	sub	sp, #260	; 0x104
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f001 fc08 	bl	80126dc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010ecc:	4adc      	ldr	r2, [pc, #880]	; (8011240 <_ZN12MainViewBaseC1Ev+0x384>)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	3340      	adds	r3, #64	; 0x40
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fc3e 	bl	8010758 <_ZN8touchgfx3BoxC1Ev>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	3370      	adds	r3, #112	; 0x70
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fcaf 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	33a4      	adds	r3, #164	; 0xa4
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff fcaa 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	33d8      	adds	r3, #216	; 0xd8
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff fca5 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fc9f 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7ff fda1 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7ff fd9b 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8010f24:	f107 030c 	add.w	r3, r7, #12
 8010f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff f99f 	bl	8010270 <_ZN8touchgfx6BitmapC1Et>
 8010f32:	f107 030c 	add.w	r3, r7, #12
 8010f36:	4619      	mov	r1, r3
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f7ff fdaf 	bl	8010a9c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fd85 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff fd7f 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7ff fd79 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff fd73 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fd6d 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7ff fd67 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff fd61 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7ff fd5b 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f006 f94f 	bl	8017248 <_ZN8touchgfx4LineC1Ev>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8010fb0:	f107 0310 	add.w	r3, r7, #16
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff f914 	bl	80101e4 <_ZN8touchgfx9colortypeC1Em>
 8010fbc:	22ff      	movs	r2, #255	; 0xff
 8010fbe:	6939      	ldr	r1, [r7, #16]
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f005 ff33 	bl	8016e2c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7ff fc39 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7ff fc33 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fd35 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7ff fd2f 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff fc21 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011008:	4618      	mov	r0, r3
 801100a:	f7ff fc1b 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011014:	4618      	mov	r0, r3
 8011016:	f7ff fd1d 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff fd17 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 801102c:	4618      	mov	r0, r3
 801102e:	f7ff fc09 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011038:	4618      	mov	r0, r3
 801103a:	f004 f9d5 	bl	80153e8 <_ZN8touchgfx11BoxProgressC1Ev>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011044:	4618      	mov	r0, r3
 8011046:	f006 f8ff 	bl	8017248 <_ZN8touchgfx4LineC1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8011050:	f107 0314 	add.w	r3, r7, #20
 8011054:	2100      	movs	r1, #0
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff f8c4 	bl	80101e4 <_ZN8touchgfx9colortypeC1Em>
 801105c:	22ff      	movs	r2, #255	; 0xff
 801105e:	6979      	ldr	r1, [r7, #20]
 8011060:	4620      	mov	r0, r4
 8011062:	f005 fee3 	bl	8016e2c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801106c:	4618      	mov	r0, r3
 801106e:	f006 f8eb 	bl	8017248 <_ZN8touchgfx4LineC1Ev>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8011078:	f107 0318 	add.w	r3, r7, #24
 801107c:	2100      	movs	r1, #0
 801107e:	4618      	mov	r0, r3
 8011080:	f7ff f8b0 	bl	80101e4 <_ZN8touchgfx9colortypeC1Em>
 8011084:	22ff      	movs	r2, #255	; 0xff
 8011086:	69b9      	ldr	r1, [r7, #24]
 8011088:	4620      	mov	r0, r4
 801108a:	f005 fecf 	bl	8016e2c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fcdd 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80110a0:	4618      	mov	r0, r3
 80110a2:	f004 fab7 	bl	8015614 <_ZN8touchgfx13ImageProgressC1Ev>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff fcd1 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7ff fbc3 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7ff fcc5 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff fcbf 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff fcb9 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff fbab 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff fcad 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8011100:	4618      	mov	r0, r3
 8011102:	f7ff fb9f 	bl	8010844 <_ZN8touchgfx8TextAreaC1Ev>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801110c:	4618      	mov	r0, r3
 801110e:	f7ff fca1 	bl	8010a54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f603 339a 	addw	r3, r3, #2970	; 0xb9a
 8011118:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801111c:	4618      	mov	r0, r3
 801111e:	f006 fea7 	bl	8017e70 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011128:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011132:	2200      	movs	r2, #0
 8011134:	2100      	movs	r1, #0
 8011136:	f7ff f8f9 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011140:	2200      	movs	r2, #0
 8011142:	2100      	movs	r1, #0
 8011144:	2000      	movs	r0, #0
 8011146:	f7ff fe91 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801114a:	4603      	mov	r3, r0
 801114c:	4619      	mov	r1, r3
 801114e:	4620      	mov	r0, r4
 8011150:	f7ff fb44 	bl	80107dc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	3370      	adds	r3, #112	; 0x70
 8011158:	22da      	movs	r2, #218	; 0xda
 801115a:	21e0      	movs	r1, #224	; 0xe0
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff f930 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011168:	2200      	movs	r2, #0
 801116a:	21dc      	movs	r1, #220	; 0xdc
 801116c:	20ff      	movs	r0, #255	; 0xff
 801116e:	f7ff fe7d 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011172:	4603      	mov	r3, r0
 8011174:	4619      	mov	r1, r3
 8011176:	4620      	mov	r0, r4
 8011178:	f7ff fba7 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	3370      	adds	r3, #112	; 0x70
 8011180:	2100      	movs	r1, #0
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff fbf4 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801118e:	f107 031c 	add.w	r3, r7, #28
 8011192:	211a      	movs	r1, #26
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fb2f 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801119a:	8bb9      	ldrh	r1, [r7, #28]
 801119c:	4620      	mov	r0, r4
 801119e:	f006 fb59 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	33a4      	adds	r3, #164	; 0xa4
 80111a6:	227e      	movs	r2, #126	; 0x7e
 80111a8:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7ff f908 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80111b8:	2200      	movs	r2, #0
 80111ba:	21dc      	movs	r1, #220	; 0xdc
 80111bc:	20ff      	movs	r0, #255	; 0xff
 80111be:	f7ff fe55 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111c2:	4603      	mov	r3, r0
 80111c4:	4619      	mov	r1, r3
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7ff fb7f 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	33a4      	adds	r3, #164	; 0xa4
 80111d0:	2100      	movs	r1, #0
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff fbcc 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80111de:	f107 0320 	add.w	r3, r7, #32
 80111e2:	2119      	movs	r1, #25
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff fb07 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80111ea:	8c39      	ldrh	r1, [r7, #32]
 80111ec:	4620      	mov	r0, r4
 80111ee:	f006 fb31 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	33d8      	adds	r3, #216	; 0xd8
 80111f6:	2288      	movs	r2, #136	; 0x88
 80111f8:	21d8      	movs	r1, #216	; 0xd8
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff f8e1 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011206:	2200      	movs	r2, #0
 8011208:	21dc      	movs	r1, #220	; 0xdc
 801120a:	20ff      	movs	r0, #255	; 0xff
 801120c:	f7ff fe2e 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011210:	4603      	mov	r3, r0
 8011212:	4619      	mov	r1, r3
 8011214:	4620      	mov	r0, r4
 8011216:	f7ff fb58 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	33d8      	adds	r3, #216	; 0xd8
 801121e:	2100      	movs	r1, #0
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff fba5 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011230:	2113      	movs	r1, #19
 8011232:	4618      	mov	r0, r3
 8011234:	f7ff fae0 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011238:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801123a:	4620      	mov	r0, r4
 801123c:	e002      	b.n	8011244 <_ZN12MainViewBaseC1Ev+0x388>
 801123e:	bf00      	nop
 8011240:	08026b8c 	.word	0x08026b8c
 8011244:	f006 fb06 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801124e:	227e      	movs	r2, #126	; 0x7e
 8011250:	2174      	movs	r1, #116	; 0x74
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff f8b5 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801125e:	2200      	movs	r2, #0
 8011260:	21dc      	movs	r1, #220	; 0xdc
 8011262:	20ff      	movs	r0, #255	; 0xff
 8011264:	f7ff fe02 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011268:	4603      	mov	r3, r0
 801126a:	4619      	mov	r1, r3
 801126c:	4620      	mov	r0, r4
 801126e:	f7ff fb2c 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011278:	2100      	movs	r1, #0
 801127a:	4618      	mov	r0, r3
 801127c:	f7ff fb78 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801128a:	2112      	movs	r1, #18
 801128c:	4618      	mov	r0, r3
 801128e:	f7ff fab3 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011292:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8011294:	4620      	mov	r0, r4
 8011296:	f006 fadd 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80112a0:	233e      	movs	r3, #62	; 0x3e
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	2372      	movs	r3, #114	; 0x72
 80112a6:	224d      	movs	r2, #77	; 0x4d
 80112a8:	21bb      	movs	r1, #187	; 0xbb
 80112aa:	f7ff f83f 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80112b4:	22ff      	movs	r2, #255	; 0xff
 80112b6:	21ff      	movs	r1, #255	; 0xff
 80112b8:	20ff      	movs	r0, #255	; 0xff
 80112ba:	f7ff fdd7 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112be:	4603      	mov	r3, r0
 80112c0:	4619      	mov	r1, r3
 80112c2:	4620      	mov	r0, r4
 80112c4:	f7ff fb01 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80112ce:	2100      	movs	r1, #0
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7ff fb4d 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 80112dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80112e0:	2103      	movs	r1, #3
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff fa88 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80112e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7ff fa93 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4ae1      	ldr	r2, [pc, #900]	; (801167c <_ZN12MainViewBaseC1Ev+0x7c0>)
 80112f6:	2105      	movs	r1, #5
 80112f8:	4620      	mov	r0, r4
 80112fa:	f009 fe55 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801130a:	4619      	mov	r1, r3
 801130c:	4610      	mov	r0, r2
 801130e:	f7ff fbb7 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801131c:	2102      	movs	r1, #2
 801131e:	4618      	mov	r0, r3
 8011320:	f7ff fa6a 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011324:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8011326:	4620      	mov	r0, r4
 8011328:	f006 fa94 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8011332:	2329      	movs	r3, #41	; 0x29
 8011334:	9300      	str	r3, [sp, #0]
 8011336:	2347      	movs	r3, #71	; 0x47
 8011338:	2255      	movs	r2, #85	; 0x55
 801133a:	2166      	movs	r1, #102	; 0x66
 801133c:	f7fe fff6 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8011346:	22ff      	movs	r2, #255	; 0xff
 8011348:	21ff      	movs	r1, #255	; 0xff
 801134a:	20ff      	movs	r0, #255	; 0xff
 801134c:	f7ff fd8e 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011350:	4603      	mov	r3, r0
 8011352:	4619      	mov	r1, r3
 8011354:	4620      	mov	r0, r4
 8011356:	f7ff fab8 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011360:	2100      	movs	r1, #0
 8011362:	4618      	mov	r0, r3
 8011364:	f7ff fb04 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f603 3402 	addw	r4, r3, #2818	; 0xb02
 801136e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011372:	2101      	movs	r1, #1
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff fa3f 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801137a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff fa4a 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011384:	4603      	mov	r3, r0
 8011386:	4abd      	ldr	r2, [pc, #756]	; (801167c <_ZN12MainViewBaseC1Ev+0x7c0>)
 8011388:	2105      	movs	r1, #5
 801138a:	4620      	mov	r0, r4
 801138c:	f009 fe0c 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f603 3302 	addw	r3, r3, #2818	; 0xb02
 801139c:	4619      	mov	r1, r3
 801139e:	4610      	mov	r0, r2
 80113a0:	f7ff fb6e 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80113aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80113ae:	2100      	movs	r1, #0
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7ff fa21 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80113b6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80113b8:	4620      	mov	r0, r4
 80113ba:	f006 fa4b 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80113c4:	223f      	movs	r2, #63	; 0x3f
 80113c6:	21b3      	movs	r1, #179	; 0xb3
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fe fffa 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80113d4:	2100      	movs	r1, #0
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7ff f864 	bl	80104a4 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 80113e2:	230e      	movs	r3, #14
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	2312      	movs	r3, #18
 80113e8:	223f      	movs	r2, #63	; 0x3f
 80113ea:	2136      	movs	r1, #54	; 0x36
 80113ec:	f7fe ff9e 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 80113f6:	22ff      	movs	r2, #255	; 0xff
 80113f8:	21ff      	movs	r1, #255	; 0xff
 80113fa:	20ff      	movs	r0, #255	; 0xff
 80113fc:	f7ff fd36 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011400:	4603      	mov	r3, r0
 8011402:	4619      	mov	r1, r3
 8011404:	4620      	mov	r0, r4
 8011406:	f7ff fa60 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8011410:	2100      	movs	r1, #0
 8011412:	4618      	mov	r0, r3
 8011414:	f7ff faac 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f603 340c 	addw	r4, r3, #2828	; 0xb0c
 801141e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011422:	2126      	movs	r1, #38	; 0x26
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff f9e7 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801142a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff f9f2 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011434:	4603      	mov	r3, r0
 8011436:	4a91      	ldr	r2, [pc, #580]	; (801167c <_ZN12MainViewBaseC1Ev+0x7c0>)
 8011438:	2102      	movs	r1, #2
 801143a:	4620      	mov	r0, r4
 801143c:	f009 fdb4 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 801144c:	4619      	mov	r1, r3
 801144e:	4610      	mov	r0, r2
 8011450:	f7ff fb16 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 801145a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801145e:	2104      	movs	r1, #4
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff f9c9 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011466:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801146a:	4620      	mov	r0, r4
 801146c:	f006 f9f2 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8011476:	230e      	movs	r3, #14
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	2312      	movs	r3, #18
 801147c:	223f      	movs	r2, #63	; 0x3f
 801147e:	2173      	movs	r1, #115	; 0x73
 8011480:	f7fe ff54 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f503 7405 	add.w	r4, r3, #532	; 0x214
 801148a:	22ff      	movs	r2, #255	; 0xff
 801148c:	21ff      	movs	r1, #255	; 0xff
 801148e:	20ff      	movs	r0, #255	; 0xff
 8011490:	f7ff fcec 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011494:	4603      	mov	r3, r0
 8011496:	4619      	mov	r1, r3
 8011498:	4620      	mov	r0, r4
 801149a:	f7ff fa16 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80114a4:	2100      	movs	r1, #0
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff fa62 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 80114b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80114b6:	2127      	movs	r1, #39	; 0x27
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7ff f99d 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80114be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7ff f9a8 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 80114c8:	4603      	mov	r3, r0
 80114ca:	4a6c      	ldr	r2, [pc, #432]	; (801167c <_ZN12MainViewBaseC1Ev+0x7c0>)
 80114cc:	2102      	movs	r1, #2
 80114ce:	4620      	mov	r0, r4
 80114d0:	f009 fd6a 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80114e0:	4619      	mov	r1, r3
 80114e2:	4610      	mov	r0, r2
 80114e4:	f7ff facc 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80114ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114f2:	2105      	movs	r1, #5
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff f97f 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80114fa:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80114fe:	4620      	mov	r0, r4
 8011500:	f006 f9a8 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 801150a:	230e      	movs	r3, #14
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	2312      	movs	r3, #18
 8011510:	223e      	movs	r2, #62	; 0x3e
 8011512:	21ad      	movs	r1, #173	; 0xad
 8011514:	f7fe ff0a 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801151e:	22ff      	movs	r2, #255	; 0xff
 8011520:	21ff      	movs	r1, #255	; 0xff
 8011522:	20ff      	movs	r0, #255	; 0xff
 8011524:	f7ff fca2 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011528:	4603      	mov	r3, r0
 801152a:	4619      	mov	r1, r3
 801152c:	4620      	mov	r0, r4
 801152e:	f7ff f9cc 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011538:	2100      	movs	r1, #0
 801153a:	4618      	mov	r0, r3
 801153c:	f7ff fa18 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f603 3414 	addw	r4, r3, #2836	; 0xb14
 8011546:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801154a:	2128      	movs	r1, #40	; 0x28
 801154c:	4618      	mov	r0, r3
 801154e:	f7ff f953 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011552:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff f95e 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 801155c:	4603      	mov	r3, r0
 801155e:	4a47      	ldr	r2, [pc, #284]	; (801167c <_ZN12MainViewBaseC1Ev+0x7c0>)
 8011560:	2102      	movs	r1, #2
 8011562:	4620      	mov	r0, r4
 8011564:	f009 fd20 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8011574:	4619      	mov	r1, r3
 8011576:	4610      	mov	r0, r2
 8011578:	f7ff fa82 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8011582:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011586:	2106      	movs	r1, #6
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff f935 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801158e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8011592:	4620      	mov	r0, r4
 8011594:	f006 f95e 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f503 7021 	add.w	r0, r3, #644	; 0x284
 801159e:	230e      	movs	r3, #14
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	2312      	movs	r3, #18
 80115a4:	223e      	movs	r2, #62	; 0x3e
 80115a6:	21e7      	movs	r1, #231	; 0xe7
 80115a8:	f7fe fec0 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80115b2:	22ff      	movs	r2, #255	; 0xff
 80115b4:	21ff      	movs	r1, #255	; 0xff
 80115b6:	20ff      	movs	r0, #255	; 0xff
 80115b8:	f7ff fc58 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115bc:	4603      	mov	r3, r0
 80115be:	4619      	mov	r1, r3
 80115c0:	4620      	mov	r0, r4
 80115c2:	f7ff f982 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80115cc:	2100      	movs	r1, #0
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff f9ce 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f603 3418 	addw	r4, r3, #2840	; 0xb18
 80115da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80115de:	2129      	movs	r1, #41	; 0x29
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff f909 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80115e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7ff f914 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 80115f0:	4603      	mov	r3, r0
 80115f2:	4a22      	ldr	r2, [pc, #136]	; (801167c <_ZN12MainViewBaseC1Ev+0x7c0>)
 80115f4:	2102      	movs	r1, #2
 80115f6:	4620      	mov	r0, r4
 80115f8:	f009 fcd6 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7ff fa38 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8011616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801161a:	2107      	movs	r1, #7
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff f8eb 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011622:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8011626:	4620      	mov	r0, r4
 8011628:	f006 f914 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8011632:	230e      	movs	r3, #14
 8011634:	9300      	str	r3, [sp, #0]
 8011636:	2312      	movs	r3, #18
 8011638:	223f      	movs	r2, #63	; 0x3f
 801163a:	f44f 7192 	mov.w	r1, #292	; 0x124
 801163e:	f7fe fe75 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011648:	22ff      	movs	r2, #255	; 0xff
 801164a:	21ff      	movs	r1, #255	; 0xff
 801164c:	20ff      	movs	r0, #255	; 0xff
 801164e:	f7ff fc0d 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011652:	4603      	mov	r3, r0
 8011654:	4619      	mov	r1, r3
 8011656:	4620      	mov	r0, r4
 8011658:	f7ff f937 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011662:	2100      	movs	r1, #0
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff f983 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f603 341c 	addw	r4, r3, #2844	; 0xb1c
 8011670:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011674:	212a      	movs	r1, #42	; 0x2a
 8011676:	4618      	mov	r0, r3
 8011678:	e002      	b.n	8011680 <_ZN12MainViewBaseC1Ev+0x7c4>
 801167a:	bf00      	nop
 801167c:	080265bc 	.word	0x080265bc
 8011680:	f7ff f8ba 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011684:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff f8c5 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 801168e:	4603      	mov	r3, r0
 8011690:	4ae2      	ldr	r2, [pc, #904]	; (8011a1c <_ZN12MainViewBaseC1Ev+0xb60>)
 8011692:	2102      	movs	r1, #2
 8011694:	4620      	mov	r0, r4
 8011696:	f009 fc87 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 80116a6:	4619      	mov	r1, r3
 80116a8:	4610      	mov	r0, r2
 80116aa:	f7ff f9e9 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80116b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80116b8:	2108      	movs	r1, #8
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7ff f89c 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80116c0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80116c4:	4620      	mov	r0, r4
 80116c6:	f006 f8c5 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80116d0:	230e      	movs	r3, #14
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	2312      	movs	r3, #18
 80116d6:	223f      	movs	r2, #63	; 0x3f
 80116d8:	f240 115d 	movw	r1, #349	; 0x15d
 80116dc:	f7fe fe26 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80116e6:	22ff      	movs	r2, #255	; 0xff
 80116e8:	21ff      	movs	r1, #255	; 0xff
 80116ea:	20ff      	movs	r0, #255	; 0xff
 80116ec:	f7ff fbbe 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116f0:	4603      	mov	r3, r0
 80116f2:	4619      	mov	r1, r3
 80116f4:	4620      	mov	r0, r4
 80116f6:	f7ff f8e8 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8011700:	2100      	movs	r1, #0
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff f934 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 801170e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011712:	212b      	movs	r1, #43	; 0x2b
 8011714:	4618      	mov	r0, r3
 8011716:	f7ff f86f 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801171a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff f87a 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011724:	4603      	mov	r3, r0
 8011726:	4abd      	ldr	r2, [pc, #756]	; (8011a1c <_ZN12MainViewBaseC1Ev+0xb60>)
 8011728:	2102      	movs	r1, #2
 801172a:	4620      	mov	r0, r4
 801172c:	f009 fc3c 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 801173c:	4619      	mov	r1, r3
 801173e:	4610      	mov	r0, r2
 8011740:	f7ff f99e 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801174a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801174e:	2109      	movs	r1, #9
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff f851 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011756:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 801175a:	4620      	mov	r0, r4
 801175c:	f006 f87a 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8011766:	230f      	movs	r3, #15
 8011768:	9300      	str	r3, [sp, #0]
 801176a:	2312      	movs	r3, #18
 801176c:	223e      	movs	r2, #62	; 0x3e
 801176e:	f240 119b 	movw	r1, #411	; 0x19b
 8011772:	f7fe fddb 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 801177c:	22ff      	movs	r2, #255	; 0xff
 801177e:	21ff      	movs	r1, #255	; 0xff
 8011780:	20ff      	movs	r0, #255	; 0xff
 8011782:	f7ff fb73 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011786:	4603      	mov	r3, r0
 8011788:	4619      	mov	r1, r3
 801178a:	4620      	mov	r0, r4
 801178c:	f7ff f89d 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8011796:	2100      	movs	r1, #0
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff f8e9 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f603 3424 	addw	r4, r3, #2852	; 0xb24
 80117a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80117a8:	212c      	movs	r1, #44	; 0x2c
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7ff f824 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80117b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff f82f 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 80117ba:	4603      	mov	r3, r0
 80117bc:	4a97      	ldr	r2, [pc, #604]	; (8011a1c <_ZN12MainViewBaseC1Ev+0xb60>)
 80117be:	2102      	movs	r1, #2
 80117c0:	4620      	mov	r0, r4
 80117c2:	f009 fbf1 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 80117d2:	4619      	mov	r1, r3
 80117d4:	4610      	mov	r0, r2
 80117d6:	f7ff f953 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80117e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80117e4:	210a      	movs	r1, #10
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7ff f806 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80117ec:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80117f0:	4620      	mov	r0, r4
 80117f2:	f006 f82f 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80117fc:	230e      	movs	r3, #14
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	2312      	movs	r3, #18
 8011802:	223e      	movs	r2, #62	; 0x3e
 8011804:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8011808:	f7fe fd90 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8011812:	22ff      	movs	r2, #255	; 0xff
 8011814:	21ff      	movs	r1, #255	; 0xff
 8011816:	20ff      	movs	r0, #255	; 0xff
 8011818:	f7ff fb28 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801181c:	4603      	mov	r3, r0
 801181e:	4619      	mov	r1, r3
 8011820:	4620      	mov	r0, r4
 8011822:	f7ff f852 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801182c:	2100      	movs	r1, #0
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff f89e 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f603 3428 	addw	r4, r3, #2856	; 0xb28
 801183a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801183e:	212d      	movs	r1, #45	; 0x2d
 8011840:	4618      	mov	r0, r3
 8011842:	f7fe ffd9 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011846:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe ffe4 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011850:	4603      	mov	r3, r0
 8011852:	4a72      	ldr	r2, [pc, #456]	; (8011a1c <_ZN12MainViewBaseC1Ev+0xb60>)
 8011854:	2102      	movs	r1, #2
 8011856:	4620      	mov	r0, r4
 8011858:	f009 fba6 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8011868:	4619      	mov	r1, r3
 801186a:	4610      	mov	r0, r2
 801186c:	f7ff f908 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8011876:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801187a:	210b      	movs	r1, #11
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe ffbb 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011882:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8011886:	4620      	mov	r0, r4
 8011888:	f005 ffe4 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8011892:	2305      	movs	r3, #5
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 801189a:	223a      	movs	r2, #58	; 0x3a
 801189c:	f06f 0101 	mvn.w	r1, #1
 80118a0:	f7fe fd44 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 80118aa:	22ff      	movs	r2, #255	; 0xff
 80118ac:	21ff      	movs	r1, #255	; 0xff
 80118ae:	20ff      	movs	r0, #255	; 0xff
 80118b0:	f7ff fadc 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118b4:	4603      	mov	r3, r0
 80118b6:	22ff      	movs	r2, #255	; 0xff
 80118b8:	4619      	mov	r1, r3
 80118ba:	4620      	mov	r0, r4
 80118bc:	f005 fa9b 	bl	8016df6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80118cc:	4619      	mov	r1, r3
 80118ce:	4610      	mov	r0, r2
 80118d0:	f005 fafa 	bl	8016ec8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118da:	2203      	movs	r2, #3
 80118dc:	2100      	movs	r1, #0
 80118de:	4618      	mov	r0, r3
 80118e0:	f000 ff12 	bl	8012708 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118ea:	2203      	movs	r2, #3
 80118ec:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 ff2f 	bl	8012754 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118fc:	2102      	movs	r1, #2
 80118fe:	4618      	mov	r0, r3
 8011900:	f000 ff4e 	bl	80127a0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801190a:	2101      	movs	r1, #1
 801190c:	4618      	mov	r0, r3
 801190e:	f005 fdf5 	bl	80174fc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011918:	227e      	movs	r2, #126	; 0x7e
 801191a:	212b      	movs	r1, #43	; 0x2b
 801191c:	4618      	mov	r0, r3
 801191e:	f7fe fd50 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8011928:	2200      	movs	r2, #0
 801192a:	21dc      	movs	r1, #220	; 0xdc
 801192c:	20ff      	movs	r0, #255	; 0xff
 801192e:	f7ff fa9d 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011932:	4603      	mov	r3, r0
 8011934:	4619      	mov	r1, r3
 8011936:	4620      	mov	r0, r4
 8011938:	f7fe ffc7 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011942:	2100      	movs	r1, #0
 8011944:	4618      	mov	r0, r3
 8011946:	f7ff f813 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8011950:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011954:	2110      	movs	r1, #16
 8011956:	4618      	mov	r0, r3
 8011958:	f7fe ff4e 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801195c:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8011960:	4620      	mov	r0, r4
 8011962:	f005 ff77 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801196c:	22c1      	movs	r2, #193	; 0xc1
 801196e:	212a      	movs	r1, #42	; 0x2a
 8011970:	4618      	mov	r0, r3
 8011972:	f7fe fd26 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 801197c:	2200      	movs	r2, #0
 801197e:	21dc      	movs	r1, #220	; 0xdc
 8011980:	20ff      	movs	r0, #255	; 0xff
 8011982:	f7ff fa73 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011986:	4603      	mov	r3, r0
 8011988:	4619      	mov	r1, r3
 801198a:	4620      	mov	r0, r4
 801198c:	f7fe ff9d 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011996:	2100      	movs	r1, #0
 8011998:	4618      	mov	r0, r3
 801199a:	f7fe ffe9 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80119a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119a8:	2111      	movs	r1, #17
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fe ff24 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80119b0:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80119b4:	4620      	mov	r0, r4
 80119b6:	f005 ff4d 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 80119c0:	232a      	movs	r3, #42	; 0x2a
 80119c2:	9300      	str	r3, [sp, #0]
 80119c4:	233c      	movs	r3, #60	; 0x3c
 80119c6:	2255      	movs	r2, #85	; 0x55
 80119c8:	2119      	movs	r1, #25
 80119ca:	f7fe fcaf 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80119d4:	22ff      	movs	r2, #255	; 0xff
 80119d6:	21ff      	movs	r1, #255	; 0xff
 80119d8:	20ff      	movs	r0, #255	; 0xff
 80119da:	f7ff fa47 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119de:	4603      	mov	r3, r0
 80119e0:	4619      	mov	r1, r3
 80119e2:	4620      	mov	r0, r4
 80119e4:	f7fe ff71 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80119ee:	2100      	movs	r1, #0
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fe ffbd 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f603 342c 	addw	r4, r3, #2860	; 0xb2c
 80119fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011a00:	210d      	movs	r1, #13
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7fe fef8 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011a08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe ff03 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011a12:	4603      	mov	r3, r0
 8011a14:	4a01      	ldr	r2, [pc, #4]	; (8011a1c <_ZN12MainViewBaseC1Ev+0xb60>)
 8011a16:	2105      	movs	r1, #5
 8011a18:	4620      	mov	r0, r4
 8011a1a:	e001      	b.n	8011a20 <_ZN12MainViewBaseC1Ev+0xb64>
 8011a1c:	080265bc 	.word	0x080265bc
 8011a20:	f009 fac2 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 8011a30:	4619      	mov	r1, r3
 8011a32:	4610      	mov	r0, r2
 8011a34:	f7ff f824 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8011a3e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011a42:	210c      	movs	r1, #12
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fe fed7 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011a4a:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f005 ff00 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8011a5a:	232a      	movs	r3, #42	; 0x2a
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	2343      	movs	r3, #67	; 0x43
 8011a60:	2299      	movs	r2, #153	; 0x99
 8011a62:	2119      	movs	r1, #25
 8011a64:	f7fe fc62 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011a6e:	22ff      	movs	r2, #255	; 0xff
 8011a70:	21ff      	movs	r1, #255	; 0xff
 8011a72:	20ff      	movs	r0, #255	; 0xff
 8011a74:	f7ff f9fa 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f7fe ff24 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011a88:	2100      	movs	r1, #0
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe ff70 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f603 3436 	addw	r4, r3, #2870	; 0xb36
 8011a96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011a9a:	210f      	movs	r1, #15
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fe feab 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011aa2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fe feb6 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011aac:	4603      	mov	r3, r0
 8011aae:	4ae3      	ldr	r2, [pc, #908]	; (8011e3c <_ZN12MainViewBaseC1Ev+0xf80>)
 8011ab0:	2105      	movs	r1, #5
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f009 fa78 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f603 3336 	addw	r3, r3, #2870	; 0xb36
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	f7fe ffda 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011ad2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011ad6:	210e      	movs	r1, #14
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fe fe8d 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011ade:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f005 feb6 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011aee:	22c1      	movs	r2, #193	; 0xc1
 8011af0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7fe fc64 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8011b00:	2200      	movs	r2, #0
 8011b02:	21dc      	movs	r1, #220	; 0xdc
 8011b04:	20ff      	movs	r0, #255	; 0xff
 8011b06:	f7ff f9b1 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f7fe fedb 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fe ff27 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8011b28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011b2c:	2114      	movs	r1, #20
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe fe62 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011b34:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f005 fe8b 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011b44:	22c1      	movs	r2, #193	; 0xc1
 8011b46:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe fc39 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011b56:	2200      	movs	r2, #0
 8011b58:	21dc      	movs	r1, #220	; 0xdc
 8011b5a:	20ff      	movs	r0, #255	; 0xff
 8011b5c:	f7ff f986 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b60:	4603      	mov	r3, r0
 8011b62:	4619      	mov	r1, r3
 8011b64:	4620      	mov	r0, r4
 8011b66:	f7fe feb0 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011b70:	2100      	movs	r1, #0
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fe fefc 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011b7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011b82:	2115      	movs	r1, #21
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fe fe37 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011b8a:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f005 fe60 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8011b9a:	232a      	movs	r3, #42	; 0x2a
 8011b9c:	9300      	str	r3, [sp, #0]
 8011b9e:	234b      	movs	r3, #75	; 0x4b
 8011ba0:	2299      	movs	r2, #153	; 0x99
 8011ba2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8011ba6:	f7fe fbc1 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011bb0:	22ff      	movs	r2, #255	; 0xff
 8011bb2:	21ff      	movs	r1, #255	; 0xff
 8011bb4:	20ff      	movs	r0, #255	; 0xff
 8011bb6:	f7ff f959 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f7fe fe83 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011bca:	2100      	movs	r1, #0
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fe fecf 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f503 6434 	add.w	r4, r3, #2880	; 0xb40
 8011bd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011bdc:	2117      	movs	r1, #23
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7fe fe0a 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011be4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7fe fe15 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	4a92      	ldr	r2, [pc, #584]	; (8011e3c <_ZN12MainViewBaseC1Ev+0xf80>)
 8011bf2:	2105      	movs	r1, #5
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f009 f9d7 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8011c06:	4619      	mov	r1, r3
 8011c08:	4610      	mov	r0, r2
 8011c0a:	f7fe ff39 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011c14:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c18:	2116      	movs	r1, #22
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fe fdec 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011c20:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011c24:	4620      	mov	r0, r4
 8011c26:	f005 fe15 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8011c30:	2328      	movs	r3, #40	; 0x28
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	2347      	movs	r3, #71	; 0x47
 8011c36:	2299      	movs	r2, #153	; 0x99
 8011c38:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8011c3c:	f7fe fb76 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011c46:	22ff      	movs	r2, #255	; 0xff
 8011c48:	21ff      	movs	r1, #255	; 0xff
 8011c4a:	20ff      	movs	r0, #255	; 0xff
 8011c4c:	f7ff f90e 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c50:	4603      	mov	r3, r0
 8011c52:	4619      	mov	r1, r3
 8011c54:	4620      	mov	r0, r4
 8011c56:	f7fe fe38 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011c60:	2100      	movs	r1, #0
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fe fe84 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f603 344a 	addw	r4, r3, #2890	; 0xb4a
 8011c6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011c72:	2125      	movs	r1, #37	; 0x25
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7fe fdbf 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011c7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fe fdca 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011c84:	4603      	mov	r3, r0
 8011c86:	4a6d      	ldr	r2, [pc, #436]	; (8011e3c <_ZN12MainViewBaseC1Ev+0xf80>)
 8011c88:	2105      	movs	r1, #5
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f009 f98c 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f603 334a 	addw	r3, r3, #2890	; 0xb4a
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	f7fe feee 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011caa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011cae:	2118      	movs	r1, #24
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7fe fda1 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011cb6:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011cba:	4620      	mov	r0, r4
 8011cbc:	f005 fdca 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8011cc6:	22f0      	movs	r2, #240	; 0xf0
 8011cc8:	f240 1197 	movw	r1, #407	; 0x197
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fe fb78 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8011cd8:	2200      	movs	r2, #0
 8011cda:	21dc      	movs	r1, #220	; 0xdc
 8011cdc:	20ff      	movs	r0, #255	; 0xff
 8011cde:	f7ff f8c5 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7fe fdef 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fe fe3b 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8011d00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011d04:	211b      	movs	r1, #27
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fe fd76 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011d0c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011d10:	4620      	mov	r0, r4
 8011d12:	f005 fd9f 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011d1c:	22e2      	movs	r2, #226	; 0xe2
 8011d1e:	f240 116f 	movw	r1, #367	; 0x16f
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fe fb4d 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8011d2e:	230a      	movs	r3, #10
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	2364      	movs	r3, #100	; 0x64
 8011d34:	2202      	movs	r2, #2
 8011d36:	2102      	movs	r1, #2
 8011d38:	f003 fb8c 	bl	8015454 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8011d42:	2300      	movs	r3, #0
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	2300      	movs	r3, #0
 8011d48:	2264      	movs	r2, #100	; 0x64
 8011d4a:	2100      	movs	r1, #0
 8011d4c:	f003 fe00 	bl	8015950 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011d56:	2100      	movs	r1, #0
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f003 fbdb 	bl	8015514 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011d64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011d68:	2100      	movs	r1, #0
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7fe fa80 	bl	8010270 <_ZN8touchgfx6BitmapC1Et>
 8011d70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011d74:	4619      	mov	r1, r3
 8011d76:	4620      	mov	r0, r4
 8011d78:	f003 fddf 	bl	801593a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011d82:	2200      	movs	r2, #0
 8011d84:	21dc      	movs	r1, #220	; 0xdc
 8011d86:	20ff      	movs	r0, #255	; 0xff
 8011d88:	f7ff f870 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	4619      	mov	r1, r3
 8011d90:	4620      	mov	r0, r4
 8011d92:	f003 fb09 	bl	80153a8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011d9c:	213c      	movs	r1, #60	; 0x3c
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f003 fb70 	bl	8015484 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 8011daa:	230a      	movs	r3, #10
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	23b4      	movs	r3, #180	; 0xb4
 8011db0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011db4:	210e      	movs	r1, #14
 8011db6:	f7fe fab9 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8011dc0:	22ff      	movs	r2, #255	; 0xff
 8011dc2:	21ff      	movs	r1, #255	; 0xff
 8011dc4:	20ff      	movs	r0, #255	; 0xff
 8011dc6:	f7ff f851 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	22ff      	movs	r2, #255	; 0xff
 8011dce:	4619      	mov	r1, r3
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f005 f810 	bl	8016df6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8011de2:	4619      	mov	r1, r3
 8011de4:	4610      	mov	r0, r2
 8011de6:	f005 f86f 	bl	8016ec8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011df0:	2205      	movs	r2, #5
 8011df2:	2100      	movs	r1, #0
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 fc87 	bl	8012708 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011e00:	2205      	movs	r2, #5
 8011e02:	21b4      	movs	r1, #180	; 0xb4
 8011e04:	4618      	mov	r0, r3
 8011e06:	f000 fca5 	bl	8012754 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011e10:	2102      	movs	r1, #2
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 fcc4 	bl	80127a0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011e1e:	2100      	movs	r1, #0
 8011e20:	4618      	mov	r0, r3
 8011e22:	f005 fb6b 	bl	80174fc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 8011e2c:	230a      	movs	r3, #10
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	23b4      	movs	r3, #180	; 0xb4
 8011e32:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011e36:	f240 111f 	movw	r1, #287	; 0x11f
 8011e3a:	e001      	b.n	8011e40 <_ZN12MainViewBaseC1Ev+0xf84>
 8011e3c:	080265bc 	.word	0x080265bc
 8011e40:	f7fe fa74 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8011e4a:	22ff      	movs	r2, #255	; 0xff
 8011e4c:	21ff      	movs	r1, #255	; 0xff
 8011e4e:	20ff      	movs	r0, #255	; 0xff
 8011e50:	f7ff f80c 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e54:	4603      	mov	r3, r0
 8011e56:	22ff      	movs	r2, #255	; 0xff
 8011e58:	4619      	mov	r1, r3
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f004 ffcb 	bl	8016df6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	4610      	mov	r0, r2
 8011e70:	f005 f82a 	bl	8016ec8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011e7a:	2205      	movs	r2, #5
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 fc42 	bl	8012708 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011e8a:	2205      	movs	r2, #5
 8011e8c:	21b4      	movs	r1, #180	; 0xb4
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f000 fc60 	bl	8012754 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011e9a:	2102      	movs	r1, #2
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f000 fc7f 	bl	80127a0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f005 fb26 	bl	80174fc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8011eb6:	2315      	movs	r3, #21
 8011eb8:	9300      	str	r3, [sp, #0]
 8011eba:	233c      	movs	r3, #60	; 0x3c
 8011ebc:	22f7      	movs	r2, #247	; 0xf7
 8011ebe:	21d2      	movs	r1, #210	; 0xd2
 8011ec0:	f7fe fa34 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8011eca:	22ff      	movs	r2, #255	; 0xff
 8011ecc:	21ff      	movs	r1, #255	; 0xff
 8011ece:	20ff      	movs	r0, #255	; 0xff
 8011ed0:	f7fe ffcc 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	4619      	mov	r1, r3
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7fe fcf6 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fd42 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f603 3454 	addw	r4, r3, #2900	; 0xb54
 8011ef2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011ef6:	211d      	movs	r1, #29
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7fe fc7d 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011efe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fc88 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	4ae2      	ldr	r2, [pc, #904]	; (8012294 <_ZN12MainViewBaseC1Ev+0x13d8>)
 8011f0c:	2105      	movs	r1, #5
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f009 f84a 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8011f20:	4619      	mov	r1, r3
 8011f22:	4610      	mov	r0, r2
 8011f24:	f7fe fdac 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8011f2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011f32:	211c      	movs	r1, #28
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fc5f 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8011f3a:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8011f3e:	4620      	mov	r0, r4
 8011f40:	f005 fc88 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fe fa37 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8011f5a:	2337      	movs	r3, #55	; 0x37
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011f62:	2202      	movs	r2, #2
 8011f64:	2102      	movs	r1, #2
 8011f66:	f003 fbc5 	bl	80156f4 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8011f70:	2300      	movs	r3, #0
 8011f72:	9300      	str	r3, [sp, #0]
 8011f74:	2300      	movs	r3, #0
 8011f76:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	f003 fce8 	bl	8015950 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011f86:	2100      	movs	r1, #0
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f003 fac3 	bl	8015514 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011f94:	2101      	movs	r1, #1
 8011f96:	4618      	mov	r0, r3
 8011f98:	f003 fb07 	bl	80155aa <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011fa2:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f003 fbbc 	bl	8015724 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011fb2:	2101      	movs	r1, #1
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f003 fae1 	bl	801557c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8011fc0:	2316      	movs	r3, #22
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	2337      	movs	r3, #55	; 0x37
 8011fc6:	2204      	movs	r2, #4
 8011fc8:	2119      	movs	r1, #25
 8011fca:	f7fe f9af 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011fd4:	22ff      	movs	r2, #255	; 0xff
 8011fd6:	21ff      	movs	r1, #255	; 0xff
 8011fd8:	20ff      	movs	r0, #255	; 0xff
 8011fda:	f7fe ff47 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f7fe fc71 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8011fee:	2100      	movs	r1, #0
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7fe fcbd 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f603 345e 	addw	r4, r3, #2910	; 0xb5e
 8011ffc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012000:	211f      	movs	r1, #31
 8012002:	4618      	mov	r0, r3
 8012004:	f7fe fbf8 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012008:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801200c:	4618      	mov	r0, r3
 801200e:	f7fe fc03 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8012012:	4603      	mov	r3, r0
 8012014:	4a9f      	ldr	r2, [pc, #636]	; (8012294 <_ZN12MainViewBaseC1Ev+0x13d8>)
 8012016:	2105      	movs	r1, #5
 8012018:	4620      	mov	r0, r4
 801201a:	f008 ffc5 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f603 335e 	addw	r3, r3, #2910	; 0xb5e
 801202a:	4619      	mov	r1, r3
 801202c:	4610      	mov	r0, r2
 801202e:	f7fe fd27 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8012038:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801203c:	211e      	movs	r1, #30
 801203e:	4618      	mov	r0, r3
 8012040:	f7fe fbda 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012044:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8012048:	4620      	mov	r0, r4
 801204a:	f005 fc03 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012054:	220f      	movs	r2, #15
 8012056:	2152      	movs	r1, #82	; 0x52
 8012058:	4618      	mov	r0, r3
 801205a:	f7fe f9b2 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8012064:	22ff      	movs	r2, #255	; 0xff
 8012066:	21ff      	movs	r1, #255	; 0xff
 8012068:	20ff      	movs	r0, #255	; 0xff
 801206a:	f7fe feff 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801206e:	4603      	mov	r3, r0
 8012070:	4619      	mov	r1, r3
 8012072:	4620      	mov	r0, r4
 8012074:	f7fe fc29 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801207e:	2100      	movs	r1, #0
 8012080:	4618      	mov	r0, r3
 8012082:	f7fe fc75 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f603 1444 	addw	r4, r3, #2372	; 0x944
 801208c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012090:	2120      	movs	r1, #32
 8012092:	4618      	mov	r0, r3
 8012094:	f7fe fbb0 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012098:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 801209c:	4620      	mov	r0, r4
 801209e:	f005 fbd9 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f603 1078 	addw	r0, r3, #2424	; 0x978
 80120a8:	232a      	movs	r3, #42	; 0x2a
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	2348      	movs	r3, #72	; 0x48
 80120ae:	2255      	movs	r2, #85	; 0x55
 80120b0:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80120b4:	f7fe f93a 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f603 1478 	addw	r4, r3, #2424	; 0x978
 80120be:	22ff      	movs	r2, #255	; 0xff
 80120c0:	21ff      	movs	r1, #255	; 0xff
 80120c2:	20ff      	movs	r0, #255	; 0xff
 80120c4:	f7fe fed2 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80120c8:	4603      	mov	r3, r0
 80120ca:	4619      	mov	r1, r3
 80120cc:	4620      	mov	r0, r4
 80120ce:	f7fe fbfc 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80120d8:	2100      	movs	r1, #0
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fe fc48 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f603 3468 	addw	r4, r3, #2920	; 0xb68
 80120e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80120ea:	2122      	movs	r1, #34	; 0x22
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7fe fb83 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80120f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fe fb8e 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 80120fc:	4603      	mov	r3, r0
 80120fe:	4a65      	ldr	r2, [pc, #404]	; (8012294 <_ZN12MainViewBaseC1Ev+0x13d8>)
 8012100:	2105      	movs	r1, #5
 8012102:	4620      	mov	r0, r4
 8012104:	f008 ff50 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f603 1278 	addw	r2, r3, #2424	; 0x978
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8012114:	4619      	mov	r1, r3
 8012116:	4610      	mov	r0, r2
 8012118:	f7fe fcb2 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8012122:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012126:	2121      	movs	r1, #33	; 0x21
 8012128:	4618      	mov	r0, r3
 801212a:	f7fe fb65 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801212e:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8012132:	4620      	mov	r0, r4
 8012134:	f005 fb8e 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 801213e:	233c      	movs	r3, #60	; 0x3c
 8012140:	9300      	str	r3, [sp, #0]
 8012142:	2360      	movs	r3, #96	; 0x60
 8012144:	229e      	movs	r2, #158	; 0x9e
 8012146:	21c3      	movs	r1, #195	; 0xc3
 8012148:	f7fe f8f0 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8012152:	22ff      	movs	r2, #255	; 0xff
 8012154:	21ff      	movs	r1, #255	; 0xff
 8012156:	20ff      	movs	r0, #255	; 0xff
 8012158:	f7fe fe88 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801215c:	4603      	mov	r3, r0
 801215e:	4619      	mov	r1, r3
 8012160:	4620      	mov	r0, r4
 8012162:	f7fe fbb2 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801216c:	2100      	movs	r1, #0
 801216e:	4618      	mov	r0, r3
 8012170:	f7fe fbfe 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f603 3472 	addw	r4, r3, #2930	; 0xb72
 801217a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801217e:	2124      	movs	r1, #36	; 0x24
 8012180:	4618      	mov	r0, r3
 8012182:	f7fe fb39 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012186:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801218a:	4618      	mov	r0, r3
 801218c:	f7fe fb44 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8012190:	4603      	mov	r3, r0
 8012192:	4a40      	ldr	r2, [pc, #256]	; (8012294 <_ZN12MainViewBaseC1Ev+0x13d8>)
 8012194:	2105      	movs	r1, #5
 8012196:	4620      	mov	r0, r4
 8012198:	f008 ff06 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f603 3372 	addw	r3, r3, #2930	; 0xb72
 80121a8:	4619      	mov	r1, r3
 80121aa:	4610      	mov	r0, r2
 80121ac:	f7fe fc68 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 80121b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80121ba:	2123      	movs	r1, #35	; 0x23
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe fb1b 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80121c2:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 80121c6:	4620      	mov	r0, r4
 80121c8:	f005 fb44 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 80121d2:	232a      	movs	r3, #42	; 0x2a
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	234e      	movs	r3, #78	; 0x4e
 80121d8:	2299      	movs	r2, #153	; 0x99
 80121da:	2164      	movs	r1, #100	; 0x64
 80121dc:	f7fe f8a6 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 80121e6:	22ff      	movs	r2, #255	; 0xff
 80121e8:	21ff      	movs	r1, #255	; 0xff
 80121ea:	20ff      	movs	r0, #255	; 0xff
 80121ec:	f7fe fe3e 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121f0:	4603      	mov	r3, r0
 80121f2:	4619      	mov	r1, r3
 80121f4:	4620      	mov	r0, r4
 80121f6:	f7fe fb68 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8012200:	2100      	movs	r1, #0
 8012202:	4618      	mov	r0, r3
 8012204:	f7fe fbb4 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f603 347c 	addw	r4, r3, #2940	; 0xb7c
 801220e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012212:	212f      	movs	r1, #47	; 0x2f
 8012214:	4618      	mov	r0, r3
 8012216:	f7fe faef 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801221a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801221e:	4618      	mov	r0, r3
 8012220:	f7fe fafa 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8012224:	4603      	mov	r3, r0
 8012226:	4a1b      	ldr	r2, [pc, #108]	; (8012294 <_ZN12MainViewBaseC1Ev+0x13d8>)
 8012228:	2105      	movs	r1, #5
 801222a:	4620      	mov	r0, r4
 801222c:	f008 febc 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 801223c:	4619      	mov	r1, r3
 801223e:	4610      	mov	r0, r2
 8012240:	f7fe fc1e 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801224a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801224e:	212e      	movs	r1, #46	; 0x2e
 8012250:	4618      	mov	r0, r3
 8012252:	f7fe fad1 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012256:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 801225a:	4620      	mov	r0, r4
 801225c:	f005 fafa 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012266:	22c1      	movs	r2, #193	; 0xc1
 8012268:	2172      	movs	r1, #114	; 0x72
 801226a:	4618      	mov	r0, r3
 801226c:	f7fe f8a9 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8012276:	2200      	movs	r2, #0
 8012278:	21dc      	movs	r1, #220	; 0xdc
 801227a:	20ff      	movs	r0, #255	; 0xff
 801227c:	f7fe fdf6 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012280:	4603      	mov	r3, r0
 8012282:	4619      	mov	r1, r3
 8012284:	4620      	mov	r0, r4
 8012286:	f7fe fb20 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012290:	2100      	movs	r1, #0
 8012292:	e001      	b.n	8012298 <_ZN12MainViewBaseC1Ev+0x13dc>
 8012294:	080265bc 	.word	0x080265bc
 8012298:	4618      	mov	r0, r3
 801229a:	f7fe fb69 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 80122a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80122a8:	2130      	movs	r1, #48	; 0x30
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fe faa4 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80122b0:	f8b7 10e0 	ldrh.w	r1, [r7, #224]	; 0xe0
 80122b4:	4620      	mov	r0, r4
 80122b6:	f005 facd 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 80122c0:	232a      	movs	r3, #42	; 0x2a
 80122c2:	9300      	str	r3, [sp, #0]
 80122c4:	2344      	movs	r3, #68	; 0x44
 80122c6:	2255      	movs	r2, #85	; 0x55
 80122c8:	f240 118f 	movw	r1, #399	; 0x18f
 80122cc:	f7fe f82e 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80122d6:	22ff      	movs	r2, #255	; 0xff
 80122d8:	21ff      	movs	r1, #255	; 0xff
 80122da:	20ff      	movs	r0, #255	; 0xff
 80122dc:	f7fe fdc6 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122e0:	4603      	mov	r3, r0
 80122e2:	4619      	mov	r1, r3
 80122e4:	4620      	mov	r0, r4
 80122e6:	f7fe faf0 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80122f0:	2100      	movs	r1, #0
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fe fb3c 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f603 3486 	addw	r4, r3, #2950	; 0xb86
 80122fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012302:	2132      	movs	r1, #50	; 0x32
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe fa77 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801230a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801230e:	4618      	mov	r0, r3
 8012310:	f7fe fa82 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8012314:	4603      	mov	r3, r0
 8012316:	4ad3      	ldr	r2, [pc, #844]	; (8012664 <_ZN12MainViewBaseC1Ev+0x17a8>)
 8012318:	2105      	movs	r1, #5
 801231a:	4620      	mov	r0, r4
 801231c:	f008 fe44 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f603 3386 	addw	r3, r3, #2950	; 0xb86
 801232c:	4619      	mov	r1, r3
 801232e:	4610      	mov	r0, r2
 8012330:	f7fe fba6 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 801233a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801233e:	2131      	movs	r1, #49	; 0x31
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe fa59 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012346:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 801234a:	4620      	mov	r0, r4
 801234c:	f005 fa82 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012356:	227e      	movs	r2, #126	; 0x7e
 8012358:	f240 1197 	movw	r1, #407	; 0x197
 801235c:	4618      	mov	r0, r3
 801235e:	f7fe f830 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8012368:	2200      	movs	r2, #0
 801236a:	21dc      	movs	r1, #220	; 0xdc
 801236c:	20ff      	movs	r0, #255	; 0xff
 801236e:	f7fe fd7d 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012372:	4603      	mov	r3, r0
 8012374:	4619      	mov	r1, r3
 8012376:	4620      	mov	r0, r4
 8012378:	f7fe faa7 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012382:	2100      	movs	r1, #0
 8012384:	4618      	mov	r0, r3
 8012386:	f7fe faf3 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8012390:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012394:	2133      	movs	r1, #51	; 0x33
 8012396:	4618      	mov	r0, r3
 8012398:	f7fe fa2e 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 801239c:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 80123a0:	4620      	mov	r0, r4
 80123a2:	f005 fa57 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 80123ac:	2311      	movs	r3, #17
 80123ae:	9300      	str	r3, [sp, #0]
 80123b0:	2313      	movs	r3, #19
 80123b2:	22e2      	movs	r2, #226	; 0xe2
 80123b4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80123b8:	f7fd ffb8 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 80123c2:	220d      	movs	r2, #13
 80123c4:	210d      	movs	r1, #13
 80123c6:	200d      	movs	r0, #13
 80123c8:	f7fe fd50 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123cc:	4603      	mov	r3, r0
 80123ce:	4619      	mov	r1, r3
 80123d0:	4620      	mov	r0, r4
 80123d2:	f7fe fa7a 	bl	80108ca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80123dc:	2100      	movs	r1, #0
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe fac6 	bl	8010970 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 80123ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80123ee:	2135      	movs	r1, #53	; 0x35
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fe fa01 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 80123f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fe fa0c 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8012400:	4603      	mov	r3, r0
 8012402:	4a98      	ldr	r2, [pc, #608]	; (8012664 <_ZN12MainViewBaseC1Ev+0x17a8>)
 8012404:	2105      	movs	r1, #5
 8012406:	4620      	mov	r0, r4
 8012408:	f008 fdce 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8012418:	4619      	mov	r1, r3
 801241a:	4610      	mov	r0, r2
 801241c:	f7fe fb30 	bl	8010a80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8012426:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801242a:	2134      	movs	r1, #52	; 0x34
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe f9e3 	bl	80107f8 <_ZN8touchgfx9TypedTextC1Et>
 8012432:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8012436:	4620      	mov	r0, r4
 8012438:	f005 fa0c 	bl	8017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	3340      	adds	r3, #64	; 0x40
 8012442:	4619      	mov	r1, r3
 8012444:	4610      	mov	r0, r2
 8012446:	f7fe f91f 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	3370      	adds	r3, #112	; 0x70
 8012450:	4619      	mov	r1, r3
 8012452:	4610      	mov	r0, r2
 8012454:	f7fe f918 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8012458:	687a      	ldr	r2, [r7, #4]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	33a4      	adds	r3, #164	; 0xa4
 801245e:	4619      	mov	r1, r3
 8012460:	4610      	mov	r0, r2
 8012462:	f7fe f911 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	33d8      	adds	r3, #216	; 0xd8
 801246c:	4619      	mov	r1, r3
 801246e:	4610      	mov	r0, r2
 8012470:	f7fe f90a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8012474:	687a      	ldr	r2, [r7, #4]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801247c:	4619      	mov	r1, r3
 801247e:	4610      	mov	r0, r2
 8012480:	f7fe f902 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801248c:	4619      	mov	r1, r3
 801248e:	4610      	mov	r0, r2
 8012490:	f7fe f8fa 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8012494:	687a      	ldr	r2, [r7, #4]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801249c:	4619      	mov	r1, r3
 801249e:	4610      	mov	r0, r2
 80124a0:	f7fe f8f2 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80124ac:	4619      	mov	r1, r3
 80124ae:	4610      	mov	r0, r2
 80124b0:	f7fe f8ea 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80124bc:	4619      	mov	r1, r3
 80124be:	4610      	mov	r0, r2
 80124c0:	f7fe f8e2 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80124cc:	4619      	mov	r1, r3
 80124ce:	4610      	mov	r0, r2
 80124d0:	f7fe f8da 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80124dc:	4619      	mov	r1, r3
 80124de:	4610      	mov	r0, r2
 80124e0:	f7fe f8d2 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80124ec:	4619      	mov	r1, r3
 80124ee:	4610      	mov	r0, r2
 80124f0:	f7fe f8ca 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80124fc:	4619      	mov	r1, r3
 80124fe:	4610      	mov	r0, r2
 8012500:	f7fe f8c2 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801250c:	4619      	mov	r1, r3
 801250e:	4610      	mov	r0, r2
 8012510:	f7fe f8ba 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801251c:	4619      	mov	r1, r3
 801251e:	4610      	mov	r0, r2
 8012520:	f7fe f8b2 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801252c:	4619      	mov	r1, r3
 801252e:	4610      	mov	r0, r2
 8012530:	f7fe f8aa 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801253c:	4619      	mov	r1, r3
 801253e:	4610      	mov	r0, r2
 8012540:	f7fe f8a2 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801254c:	4619      	mov	r1, r3
 801254e:	4610      	mov	r0, r2
 8012550:	f7fe f89a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801255c:	4619      	mov	r1, r3
 801255e:	4610      	mov	r0, r2
 8012560:	f7fe f892 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801256c:	4619      	mov	r1, r3
 801256e:	4610      	mov	r0, r2
 8012570:	f7fe f88a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801257c:	4619      	mov	r1, r3
 801257e:	4610      	mov	r0, r2
 8012580:	f7fe f882 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801258c:	4619      	mov	r1, r3
 801258e:	4610      	mov	r0, r2
 8012590:	f7fe f87a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801259c:	4619      	mov	r1, r3
 801259e:	4610      	mov	r0, r2
 80125a0:	f7fe f872 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80125ac:	4619      	mov	r1, r3
 80125ae:	4610      	mov	r0, r2
 80125b0:	f7fe f86a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80125bc:	4619      	mov	r1, r3
 80125be:	4610      	mov	r0, r2
 80125c0:	f7fe f862 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80125cc:	4619      	mov	r1, r3
 80125ce:	4610      	mov	r0, r2
 80125d0:	f7fe f85a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80125dc:	4619      	mov	r1, r3
 80125de:	4610      	mov	r0, r2
 80125e0:	f7fe f852 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80125ec:	4619      	mov	r1, r3
 80125ee:	4610      	mov	r0, r2
 80125f0:	f7fe f84a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80125fc:	4619      	mov	r1, r3
 80125fe:	4610      	mov	r0, r2
 8012600:	f7fe f842 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801260c:	4619      	mov	r1, r3
 801260e:	4610      	mov	r0, r2
 8012610:	f7fe f83a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801261c:	4619      	mov	r1, r3
 801261e:	4610      	mov	r0, r2
 8012620:	f7fe f832 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 801262c:	4619      	mov	r1, r3
 801262e:	4610      	mov	r0, r2
 8012630:	f7fe f82a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801263c:	4619      	mov	r1, r3
 801263e:	4610      	mov	r0, r2
 8012640:	f7fe f822 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801264c:	4619      	mov	r1, r3
 801264e:	4610      	mov	r0, r2
 8012650:	f7fe f81a 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801265c:	4619      	mov	r1, r3
 801265e:	4610      	mov	r0, r2
 8012660:	e002      	b.n	8012668 <_ZN12MainViewBaseC1Ev+0x17ac>
 8012662:	bf00      	nop
 8012664:	080265bc 	.word	0x080265bc
 8012668:	f7fe f80e 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8012674:	4619      	mov	r1, r3
 8012676:	4610      	mov	r0, r2
 8012678:	f7fe f806 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012684:	4619      	mov	r1, r3
 8012686:	4610      	mov	r0, r2
 8012688:	f7fd fffe 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8012694:	4619      	mov	r1, r3
 8012696:	4610      	mov	r0, r2
 8012698:	f7fd fff6 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80126a4:	4619      	mov	r1, r3
 80126a6:	4610      	mov	r0, r2
 80126a8:	f7fd ffee 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80126b4:	4619      	mov	r1, r3
 80126b6:	4610      	mov	r0, r2
 80126b8:	f7fd ffe6 	bl	8010688 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	37fc      	adds	r7, #252	; 0xfc
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd90      	pop	{r4, r7, pc}
 80126c6:	bf00      	nop

080126c8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]

}
 80126d0:	bf00      	nop
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f007 fb98 	bl	8019e1c <_ZN8touchgfx6ScreenC1Ev>
 80126ec:	4a05      	ldr	r2, [pc, #20]	; (8012704 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	601a      	str	r2, [r3, #0]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2200      	movs	r2, #0
 80126f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	08026bc0 	.word	0x08026bc0

08012708 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8012708:	b590      	push	{r4, r7, lr}
 801270a:	b089      	sub	sp, #36	; 0x24
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	015a      	lsls	r2, r3, #5
 801271c:	f107 0314 	add.w	r3, r7, #20
 8012720:	4611      	mov	r1, r2
 8012722:	4618      	mov	r0, r3
 8012724:	f7fe f9dc 	bl	8010ae0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	461c      	mov	r4, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	61fb      	str	r3, [r7, #28]
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	015a      	lsls	r2, r3, #5
 8012734:	f107 0310 	add.w	r3, r7, #16
 8012738:	4611      	mov	r1, r2
 801273a:	4618      	mov	r0, r3
 801273c:	f7fe f9d0 	bl	8010ae0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012740:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012742:	461a      	mov	r2, r3
 8012744:	4621      	mov	r1, r4
 8012746:	68f8      	ldr	r0, [r7, #12]
 8012748:	f004 fec2 	bl	80174d0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 801274c:	bf00      	nop
 801274e:	3724      	adds	r7, #36	; 0x24
 8012750:	46bd      	mov	sp, r7
 8012752:	bd90      	pop	{r4, r7, pc}

08012754 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8012754:	b590      	push	{r4, r7, lr}
 8012756:	b089      	sub	sp, #36	; 0x24
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	61bb      	str	r3, [r7, #24]
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	015a      	lsls	r2, r3, #5
 8012768:	f107 0314 	add.w	r3, r7, #20
 801276c:	4611      	mov	r1, r2
 801276e:	4618      	mov	r0, r3
 8012770:	f7fe f9b6 	bl	8010ae0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	461c      	mov	r4, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	61fb      	str	r3, [r7, #28]
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	015a      	lsls	r2, r3, #5
 8012780:	f107 0310 	add.w	r3, r7, #16
 8012784:	4611      	mov	r1, r2
 8012786:	4618      	mov	r0, r3
 8012788:	f7fe f9aa 	bl	8010ae0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801278c:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801278e:	461a      	mov	r2, r3
 8012790:	4621      	mov	r1, r4
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f004 fea7 	bl	80174e6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8012798:	bf00      	nop
 801279a:	3724      	adds	r7, #36	; 0x24
 801279c:	46bd      	mov	sp, r7
 801279e:	bd90      	pop	{r4, r7, pc}

080127a0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	60fb      	str	r3, [r7, #12]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	015a      	lsls	r2, r3, #5
 80127b2:	f107 0308 	add.w	r3, r7, #8
 80127b6:	4611      	mov	r1, r2
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7fe f991 	bl	8010ae0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80127be:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80127c0:	4619      	mov	r1, r3
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7fe f9a7 	bl	8010b16 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80127c8:	bf00      	nop
 80127ca:	3710      	adds	r7, #16
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	4a05      	ldr	r2, [pc, #20]	; (80127f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	601a      	str	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fe f915 	bl	8010a10 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4618      	mov	r0, r3
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	08028660 	.word	0x08028660

080127f4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7ff ffe7 	bl	80127d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012802:	2138      	movs	r1, #56	; 0x38
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f012 fb39 	bl	8024e7c <_ZdlPvj>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4618      	mov	r0, r3
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	4a05      	ldr	r2, [pc, #20]	; (8012834 <_ZN8touchgfx4LineD1Ev+0x20>)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	4618      	mov	r0, r3
 8012826:	f004 fc2d 	bl	8017084 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	3708      	adds	r7, #8
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}
 8012834:	0802840c 	.word	0x0802840c

08012838 <_ZN8touchgfx4LineD0Ev>:
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7ff ffe7 	bl	8012814 <_ZN8touchgfx4LineD1Ev>
 8012846:	2174      	movs	r1, #116	; 0x74
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f012 fb17 	bl	8024e7c <_ZdlPvj>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4618      	mov	r0, r3
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	4a05      	ldr	r2, [pc, #20]	; (8012878 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	4618      	mov	r0, r3
 801286a:	f7fe f977 	bl	8010b5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4618      	mov	r0, r3
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	08028110 	.word	0x08028110

0801287c <_ZN8touchgfx13PainterRGB888D0Ev>:
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7ff ffe7 	bl	8012858 <_ZN8touchgfx13PainterRGB888D1Ev>
 801288a:	2118      	movs	r1, #24
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f012 faf5 	bl	8024e7c <_ZdlPvj>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	4618      	mov	r0, r3
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801289c:	b480      	push	{r7}
 801289e:	af00      	add	r7, sp, #0
    return bitmap_database;
 80128a0:	4b02      	ldr	r3, [pc, #8]	; (80128ac <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	08026cd0 	.word	0x08026cd0

080128b0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80128b0:	b480      	push	{r7}
 80128b2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80128b4:	2303      	movs	r3, #3
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	4613      	mov	r3, r2
 80128cc:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80128ce:	4a07      	ldr	r2, [pc, #28]	; (80128ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80128d4:	4a06      	ldr	r2, [pc, #24]	; (80128f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80128da:	4a06      	ldr	r2, [pc, #24]	; (80128f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80128dc:	88fb      	ldrh	r3, [r7, #6]
 80128de:	8013      	strh	r3, [r2, #0]
    }
 80128e0:	bf00      	nop
 80128e2:	3714      	adds	r7, #20
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr
 80128ec:	2000c598 	.word	0x2000c598
 80128f0:	2000c5a0 	.word	0x2000c5a0
 80128f4:	2000c59c 	.word	0x2000c59c

080128f8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80128f8:	b590      	push	{r4, r7, lr}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	4603      	mov	r3, r0
 8012900:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012902:	2300      	movs	r3, #0
 8012904:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012906:	88fb      	ldrh	r3, [r7, #6]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d127      	bne.n	801295c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801290c:	88fb      	ldrh	r3, [r7, #6]
 801290e:	4a1e      	ldr	r2, [pc, #120]	; (8012988 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d016      	beq.n	8012946 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012918:	88fb      	ldrh	r3, [r7, #6]
 801291a:	4a1b      	ldr	r2, [pc, #108]	; (8012988 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012920:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	68ba      	ldr	r2, [r7, #8]
 8012928:	4413      	add	r3, r2
 801292a:	4a18      	ldr	r2, [pc, #96]	; (801298c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801292c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	4413      	add	r3, r2
 8012936:	4a16      	ldr	r2, [pc, #88]	; (8012990 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012938:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	68ba      	ldr	r2, [r7, #8]
 8012940:	4413      	add	r3, r2
 8012942:	60fb      	str	r3, [r7, #12]
 8012944:	e00a      	b.n	801295c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012946:	4b11      	ldr	r3, [pc, #68]	; (801298c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012948:	4a12      	ldr	r2, [pc, #72]	; (8012994 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801294a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801294c:	4a12      	ldr	r2, [pc, #72]	; (8012998 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801294e:	4b10      	ldr	r3, [pc, #64]	; (8012990 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012950:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012952:	88fb      	ldrh	r3, [r7, #6]
 8012954:	4a11      	ldr	r2, [pc, #68]	; (801299c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801295a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00d      	beq.n	801297e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012962:	4a0f      	ldr	r2, [pc, #60]	; (80129a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012964:	88fb      	ldrh	r3, [r7, #6]
 8012966:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012968:	f000 f83e 	bl	80129e8 <_ZN17TypedTextDatabase8getFontsEv>
 801296c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801296e:	f000 f833 	bl	80129d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012972:	4603      	mov	r3, r0
 8012974:	461a      	mov	r2, r3
 8012976:	4621      	mov	r1, r4
 8012978:	68f8      	ldr	r0, [r7, #12]
 801297a:	f7ff ffa1 	bl	80128c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801297e:	bf00      	nop
 8012980:	3714      	adds	r7, #20
 8012982:	46bd      	mov	sp, r7
 8012984:	bd90      	pop	{r4, r7, pc}
 8012986:	bf00      	nop
 8012988:	20008de4 	.word	0x20008de4
 801298c:	20008dec 	.word	0x20008dec
 8012990:	20008df0 	.word	0x20008df0
 8012994:	08061798 	.word	0x08061798
 8012998:	080616c0 	.word	0x080616c0
 801299c:	080618fc 	.word	0x080618fc
 80129a0:	20008de8 	.word	0x20008de8

080129a4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	460b      	mov	r3, r1
 80129ae:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80129b0:	4b07      	ldr	r3, [pc, #28]	; (80129d0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	4b07      	ldr	r3, [pc, #28]	; (80129d4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80129b6:	6819      	ldr	r1, [r3, #0]
 80129b8:	887b      	ldrh	r3, [r7, #2]
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	440b      	add	r3, r1
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	4413      	add	r3, r2
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	370c      	adds	r7, #12
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr
 80129d0:	20008dec 	.word	0x20008dec
 80129d4:	20008df0 	.word	0x20008df0

080129d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80129d8:	b480      	push	{r7}
 80129da:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80129dc:	2336      	movs	r3, #54	; 0x36
}
 80129de:	4618      	mov	r0, r3
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80129e8:	b480      	push	{r7}
 80129ea:	af00      	add	r7, sp, #0
    return _fonts;
 80129ec:	4b02      	ldr	r3, [pc, #8]	; (80129f8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr
 80129f8:	20008df4 	.word	0x20008df4

080129fc <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d127      	bne.n	8012a5c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d122      	bne.n	8012a5c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8012a16:	f7fc fd33 	bl	800f480 <_Z25getFont_Asap_Bold_18_4bppv>
 8012a1a:	4603      	mov	r3, r0
};
 8012a1c:	4a11      	ldr	r2, [pc, #68]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a1e:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8012a20:	f7fc fe2a 	bl	800f678 <_Z25getFont_Asap_Bold_40_4bppv>
 8012a24:	4603      	mov	r3, r0
};
 8012a26:	4a0f      	ldr	r2, [pc, #60]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a28:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8012a2a:	f7fc fdd1 	bl	800f5d0 <_Z25getFont_Asap_Bold_30_4bppv>
 8012a2e:	4603      	mov	r3, r0
};
 8012a30:	4a0c      	ldr	r2, [pc, #48]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a32:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8012a34:	f7fc fcd0 	bl	800f3d8 <_Z25getFont_Asap_Bold_12_4bppv>
 8012a38:	4603      	mov	r3, r0
};
 8012a3a:	4a0a      	ldr	r2, [pc, #40]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a3c:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8012a3e:	f7fc fe6f 	bl	800f720 <_Z25getFont_Asap_Bold_60_4bppv>
 8012a42:	4603      	mov	r3, r0
};
 8012a44:	4a07      	ldr	r2, [pc, #28]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a46:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8012a48:	f7fc fd6e 	bl	800f528 <_Z25getFont_Asap_Bold_21_4bppv>
 8012a4c:	4603      	mov	r3, r0
};
 8012a4e:	4a05      	ldr	r2, [pc, #20]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a50:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8012a52:	f7fc fc6d 	bl	800f330 <_Z25getFont_Asap_Bold_10_4bppv>
 8012a56:	4603      	mov	r3, r0
};
 8012a58:	4a02      	ldr	r2, [pc, #8]	; (8012a64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012a5a:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 8012a5c:	bf00      	nop
 8012a5e:	3708      	adds	r7, #8
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	20008df4 	.word	0x20008df4

08012a68 <_GLOBAL__sub_I__fonts>:
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012a70:	2001      	movs	r0, #1
 8012a72:	f7ff ffc3 	bl	80129fc <_Z41__static_initialization_and_destruction_0ii>
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	4a05      	ldr	r2, [pc, #20]	; (8012a98 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	601a      	str	r2, [r3, #0]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fd f8eb 	bl	800fc64 <_ZN23FrontendApplicationBaseD1Ev>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	4618      	mov	r0, r3
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	08026d14 	.word	0x08026d14

08012a9c <_ZN19FrontendApplicationD0Ev>:
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7ff ffe7 	bl	8012a78 <_ZN19FrontendApplicationD1Ev>
 8012aaa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f012 f9e4 	bl	8024e7c <_ZdlPvj>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3708      	adds	r7, #8
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b082      	sub	sp, #8
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012acc:	4618      	mov	r0, r3
 8012ace:	f000 fd29 	bl	8013524 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f006 f925 	bl	8018d24 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012ada:	bf00      	nop
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
	...

08012ae4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	60b9      	str	r1, [r7, #8]
 8012aee:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	68b9      	ldr	r1, [r7, #8]
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fd f92e 	bl	800fd58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012afc:	4a03      	ldr	r2, [pc, #12]	; (8012b0c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	601a      	str	r2, [r3, #0]
{
}
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	4618      	mov	r0, r3
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	08026d14 	.word	0x08026d14

08012b10 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012b10:	b480      	push	{r7}
 8012b12:	b083      	sub	sp, #12
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
    {
    }
 8012b18:	bf00      	nop
 8012b1a:	370c      	adds	r7, #12
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
    {
    }
 8012b2c:	bf00      	nop
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
    {
 8012b40:	4a04      	ldr	r2, [pc, #16]	; (8012b54 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	601a      	str	r2, [r3, #0]
    }
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	370c      	adds	r7, #12
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b52:	4770      	bx	lr
 8012b54:	08026da0 	.word	0x08026da0

08012b58 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
    }
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f7ff ffe9 	bl	8012b38 <_ZN8touchgfx9PresenterD1Ev>
 8012b66:	2104      	movs	r1, #4
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f012 f987 	bl	8024e7c <_ZdlPvj>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
    {
 8012b80:	4a04      	ldr	r2, [pc, #16]	; (8012b94 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	601a      	str	r2, [r3, #0]
    }
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	370c      	adds	r7, #12
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr
 8012b94:	08026da0 	.word	0x08026da0

08012b98 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	4a06      	ldr	r2, [pc, #24]	; (8012bbc <_ZN13ModelListenerC1Ev+0x24>)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	601a      	str	r2, [r3, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	605a      	str	r2, [r3, #4]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	4618      	mov	r0, r3
 8012bb0:	370c      	adds	r7, #12
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr
 8012bba:	bf00      	nop
 8012bbc:	08026d88 	.word	0x08026d88

08012bc0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	4a04      	ldr	r2, [pc, #16]	; (8012bdc <_ZN13ModelListenerD1Ev+0x1c>)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	370c      	adds	r7, #12
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	08026d88 	.word	0x08026d88

08012be0 <_ZN13ModelListenerD0Ev>:
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7ff ffe9 	bl	8012bc0 <_ZN13ModelListenerD1Ev>
 8012bee:	2108      	movs	r1, #8
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f012 f943 	bl	8024e7c <_ZdlPvj>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8012c00:	b480      	push	{r7}
 8012c02:	b083      	sub	sp, #12
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
 8012c0a:	bf00      	nop
 8012c0c:	370c      	adds	r7, #12
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8012c16:	b480      	push	{r7}
 8012c18:	b083      	sub	sp, #12
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
 8012c1e:	6039      	str	r1, [r7, #0]
 8012c20:	bf00      	nop
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	4a09      	ldr	r2, [pc, #36]	; (8012c5c <_ZN13MainPresenterD1Ev+0x30>)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	4a09      	ldr	r2, [pc, #36]	; (8012c60 <_ZN13MainPresenterD1Ev+0x34>)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	605a      	str	r2, [r3, #4]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	3304      	adds	r3, #4
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff ffbb 	bl	8012bc0 <_ZN13ModelListenerD1Ev>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff ff73 	bl	8012b38 <_ZN8touchgfx9PresenterD1Ev>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	08026d50 	.word	0x08026d50
 8012c60:	08026d70 	.word	0x08026d70

08012c64 <_ZThn4_N13MainPresenterD1Ev>:
 8012c64:	f1a0 0004 	sub.w	r0, r0, #4
 8012c68:	e7e0      	b.n	8012c2c <_ZN13MainPresenterD1Ev>
 8012c6a:	bf00      	nop

08012c6c <_ZN13MainPresenterD0Ev>:
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f7ff ffd9 	bl	8012c2c <_ZN13MainPresenterD1Ev>
 8012c7a:	2110      	movs	r1, #16
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f012 f8fd 	bl	8024e7c <_ZdlPvj>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_ZThn4_N13MainPresenterD0Ev>:
 8012c8c:	f1a0 0004 	sub.w	r0, r0, #4
 8012c90:	e7ec      	b.n	8012c6c <_ZN13MainPresenterD0Ev>
	...

08012c94 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
    : view(v)
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ff ff69 	bl	8012b78 <_ZN8touchgfx9PresenterC1Ev>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7ff ff74 	bl	8012b98 <_ZN13ModelListenerC1Ev>
 8012cb0:	4a06      	ldr	r2, [pc, #24]	; (8012ccc <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	601a      	str	r2, [r3, #0]
 8012cb6:	4a06      	ldr	r2, [pc, #24]	; (8012cd0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	605a      	str	r2, [r3, #4]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	683a      	ldr	r2, [r7, #0]
 8012cc0:	60da      	str	r2, [r3, #12]
{
}
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3708      	adds	r7, #8
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	08026d50 	.word	0x08026d50
 8012cd0:	08026d70 	.word	0x08026d70

08012cd4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
}
 8012cdc:	bf00      	nop
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
}
 8012cf0:	bf00      	nop
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr

08012cfc <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	6839      	ldr	r1, [r7, #0]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f000 f9f7 	bl	8013100 <_ZN8MainView9updateValEPh>
}
 8012d12:	bf00      	nop
 8012d14:	3708      	adds	r7, #8
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}

08012d1a <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8012d1a:	f1a0 0004 	sub.w	r0, r0, #4
 8012d1e:	f7ff bfed 	b.w	8012cfc <_ZN13MainPresenter11setNewValueEPh>

08012d22 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b082      	sub	sp, #8
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
 8012d2a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	6839      	ldr	r1, [r7, #0]
 8012d32:	4618      	mov	r0, r3
 8012d34:	f000 f908 	bl	8012f48 <_ZN8MainView14updateSettingsEPh>
}
 8012d38:	bf00      	nop
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012d40:	f1a0 0004 	sub.w	r0, r0, #4
 8012d44:	f7ff bfed 	b.w	8012d22 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012d48 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2200      	movs	r2, #0
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	607a      	str	r2, [r7, #4]
 8012d70:	ed87 0a00 	vstr	s0, [r7]
 8012d74:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012d76:	463b      	mov	r3, r7
 8012d78:	8979      	ldrh	r1, [r7, #10]
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f008 fa6d 	bl	801b25c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012d82:	4603      	mov	r3, r0
    }
 8012d84:	4618      	mov	r0, r3
 8012d86:	3710      	adds	r7, #16
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr

08012da6 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012da6:	b480      	push	{r7}
 8012da8:	b083      	sub	sp, #12
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	4a05      	ldr	r2, [pc, #20]	; (8012de0 <_ZN8MainViewD1Ev+0x20>)
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	601a      	str	r2, [r3, #0]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fd ff29 	bl	8010c28 <_ZN12MainViewBaseD1Ev>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	08026db8 	.word	0x08026db8

08012de4 <_ZN8MainViewD0Ev>:
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7ff ffe7 	bl	8012dc0 <_ZN8MainViewD1Ev>
 8012df2:	f242 71bc 	movw	r1, #10172	; 0x27bc
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f012 f840 	bl	8024e7c <_ZdlPvj>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3708      	adds	r7, #8
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
	...

08012e08 <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8012e08:	b590      	push	{r4, r7, lr}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe f852 	bl	8010ebc <_ZN12MainViewBaseC1Ev>
 8012e18:	4a15      	ldr	r2, [pc, #84]	; (8012e70 <_ZN8MainViewC1Ev+0x68>)
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012e1e:	4b15      	ldr	r3, [pc, #84]	; (8012e74 <_ZN8MainViewC1Ev+0x6c>)
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	461c      	mov	r4, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7ff ffae 	bl	8012d8c <_ZNK8touchgfx8Drawable8getWidthEv>
 8012e30:	4603      	mov	r3, r0
 8012e32:	429c      	cmp	r4, r3
 8012e34:	dc0b      	bgt.n	8012e4e <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012e36:	4b10      	ldr	r3, [pc, #64]	; (8012e78 <_ZN8MainViewC1Ev+0x70>)
 8012e38:	881b      	ldrh	r3, [r3, #0]
 8012e3a:	461c      	mov	r4, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff ffaf 	bl	8012da6 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012e48:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012e4a:	429c      	cmp	r4, r3
 8012e4c:	dd01      	ble.n	8012e52 <_ZN8MainViewC1Ev+0x4a>
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e000      	b.n	8012e54 <_ZN8MainViewC1Ev+0x4c>
 8012e52:	2300      	movs	r3, #0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d005      	beq.n	8012e64 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	3340      	adds	r3, #64	; 0x40
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fd fb20 	bl	80104a4 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	4618      	mov	r0, r3
 8012e68:	370c      	adds	r7, #12
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd90      	pop	{r4, r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	08026db8 	.word	0x08026db8
 8012e74:	2000c4fc 	.word	0x2000c4fc
 8012e78:	2000c4fe 	.word	0x2000c4fe

08012e7c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
}
 8012e84:	bf00      	nop
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr

08012e90 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
}
 8012e98:	bf00      	nop
 8012e9a:	370c      	adds	r7, #12
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	4770      	bx	lr

08012ea4 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012eaa:	2200      	movs	r2, #0
 8012eac:	2100      	movs	r1, #0
 8012eae:	2000      	movs	r0, #0
 8012eb0:	f7fd ffdc 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	607b      	str	r3, [r7, #4]
}
 8012eb8:	bf00      	nop
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
	...

08012ec4 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0

	color_index ++;
 8012eca:	4b1e      	ldr	r3, [pc, #120]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	4a1c      	ldr	r2, [pc, #112]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012ed2:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012ed4:	4b1b      	ldr	r3, [pc, #108]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	dd02      	ble.n	8012ee2 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8012edc:	4b19      	ldr	r3, [pc, #100]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	20ff      	movs	r0, #255	; 0xff
 8012ee8:	f7fd ffc0 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012eec:	4603      	mov	r3, r0
 8012eee:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	f7fd ffb9 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012efa:	4603      	mov	r3, r0
 8012efc:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8012efe:	22ff      	movs	r2, #255	; 0xff
 8012f00:	21ff      	movs	r1, #255	; 0xff
 8012f02:	20ff      	movs	r0, #255	; 0xff
 8012f04:	f7fd ffb2 	bl	8010e6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8012f0c:	463b      	mov	r3, r7
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7ff ff1a 	bl	8012d48 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8012f14:	4b0b      	ldr	r3, [pc, #44]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d101      	bne.n	8012f20 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012f20:	4b08      	ldr	r3, [pc, #32]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d101      	bne.n	8012f2c <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012f2c:	4b05      	ldr	r3, [pc, #20]	; (8012f44 <_ZL20getColorFromRevLimitv+0x80>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d101      	bne.n	8012f38 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012f38:	683b      	ldr	r3, [r7, #0]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	20008e10 	.word	0x20008e10

08012f48 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b086      	sub	sp, #24
 8012f4c:	af02      	add	r7, sp, #8
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a66      	ldr	r2, [pc, #408]	; (80130f4 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8012f5c:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6a1b      	ldr	r3, [r3, #32]
 8012f68:	ee07 3a90 	vmov	s15, r3
 8012f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f70:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80130f8 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f7c:	ee17 3a90 	vmov	r3, s15
 8012f80:	b21a      	sxth	r2, r3
 8012f82:	2300      	movs	r3, #0
 8012f84:	9300      	str	r3, [sp, #0]
 8012f86:	2300      	movs	r3, #0
 8012f88:	2100      	movs	r1, #0
 8012f8a:	f002 fce1 	bl	8015950 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012f94:	4618      	mov	r0, r3
 8012f96:	f006 fbd9 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f603 300c 	addw	r0, r3, #2828	; 0xb0c
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	4a55      	ldr	r2, [pc, #340]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012fa6:	2102      	movs	r1, #2
 8012fa8:	f007 fffe 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f004 fc24 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f006 fbc4 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f503 6031 	add.w	r0, r3, #2832	; 0xb10
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	4a4b      	ldr	r2, [pc, #300]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012fd0:	2102      	movs	r1, #2
 8012fd2:	f007 ffe9 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f004 fc0f 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f006 fbaf 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f603 3014 	addw	r0, r3, #2836	; 0xb14
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	4a40      	ldr	r2, [pc, #256]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012ffa:	2102      	movs	r1, #2
 8012ffc:	f007 ffd4 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013006:	4618      	mov	r0, r3
 8013008:	f004 fbfa 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013012:	4618      	mov	r0, r3
 8013014:	f006 fb9a 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f603 3018 	addw	r0, r3, #2840	; 0xb18
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	4a36      	ldr	r2, [pc, #216]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8013024:	2102      	movs	r1, #2
 8013026:	f007 ffbf 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013030:	4618      	mov	r0, r3
 8013032:	f004 fbe5 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801303c:	4618      	mov	r0, r3
 801303e:	f006 fb85 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f603 301c 	addw	r0, r3, #2844	; 0xb1c
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	695b      	ldr	r3, [r3, #20]
 801304c:	4a2b      	ldr	r2, [pc, #172]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801304e:	2102      	movs	r1, #2
 8013050:	f007 ffaa 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801305a:	4618      	mov	r0, r3
 801305c:	f004 fbd0 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013066:	4618      	mov	r0, r3
 8013068:	f006 fb70 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f503 6032 	add.w	r0, r3, #2848	; 0xb20
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	699b      	ldr	r3, [r3, #24]
 8013076:	4a21      	ldr	r2, [pc, #132]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8013078:	2102      	movs	r1, #2
 801307a:	f007 ff95 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013084:	4618      	mov	r0, r3
 8013086:	f004 fbbb 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013090:	4618      	mov	r0, r3
 8013092:	f006 fb5b 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f603 3024 	addw	r0, r3, #2852	; 0xb24
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	69db      	ldr	r3, [r3, #28]
 80130a0:	4a16      	ldr	r2, [pc, #88]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80130a2:	2102      	movs	r1, #2
 80130a4:	f007 ff80 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80130ae:	4618      	mov	r0, r3
 80130b0:	f004 fba6 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80130ba:	4618      	mov	r0, r3
 80130bc:	f006 fb46 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f603 3028 	addw	r0, r3, #2856	; 0xb28
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	6a1b      	ldr	r3, [r3, #32]
 80130ca:	4a0c      	ldr	r2, [pc, #48]	; (80130fc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80130cc:	2102      	movs	r1, #2
 80130ce:	f007 ff6b 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80130d8:	4618      	mov	r0, r3
 80130da:	f004 fb91 	bl	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80130e4:	4618      	mov	r0, r3
 80130e6:	f006 fb31 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80130ea:	bf00      	nop
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	20000038 	.word	0x20000038
 80130f8:	447a0000 	.word	0x447a0000
 80130fc:	080267ac 	.word	0x080267ac

08013100 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8013100:	b590      	push	{r4, r7, lr}
 8013102:	b085      	sub	sp, #20
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	4b0e      	ldr	r3, [pc, #56]	; (801314c <_ZN8MainView9updateValEPh+0x4c>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	429a      	cmp	r2, r3
 8013118:	bfac      	ite	ge
 801311a:	2301      	movge	r3, #1
 801311c:	2300      	movlt	r3, #0
 801311e:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8013120:	7afb      	ldrb	r3, [r7, #11]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d016      	beq.n	8013154 <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 8013126:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <_ZN8MainView9updateValEPh+0x50>)
 8013128:	2200      	movs	r2, #0
 801312a:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013132:	f7ff fec7 	bl	8012ec4 <_ZL20getColorFromRevLimitv>
 8013136:	4603      	mov	r3, r0
 8013138:	4619      	mov	r1, r3
 801313a:	4620      	mov	r0, r4
 801313c:	f7fd fb4e 	bl	80107dc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	3340      	adds	r3, #64	; 0x40
 8013144:	4618      	mov	r0, r3
 8013146:	f006 fb01 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
 801314a:	e01c      	b.n	8013186 <_ZN8MainView9updateValEPh+0x86>
 801314c:	20000038 	.word	0x20000038
 8013150:	20008e34 	.word	0x20008e34
	}
	else if(!background_is_black){
 8013154:	4ba9      	ldr	r3, [pc, #676]	; (80133fc <_ZN8MainView9updateValEPh+0x2fc>)
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	f083 0301 	eor.w	r3, r3, #1
 801315c:	b2db      	uxtb	r3, r3
 801315e:	2b00      	cmp	r3, #0
 8013160:	d011      	beq.n	8013186 <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013168:	f7ff fe9c 	bl	8012ea4 <_ZL13getBlackColorv>
 801316c:	4603      	mov	r3, r0
 801316e:	4619      	mov	r1, r3
 8013170:	4620      	mov	r0, r4
 8013172:	f7fd fb33 	bl	80107dc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	3340      	adds	r3, #64	; 0x40
 801317a:	4618      	mov	r0, r3
 801317c:	f006 fae6 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8013180:	4b9e      	ldr	r3, [pc, #632]	; (80133fc <_ZN8MainView9updateValEPh+0x2fc>)
 8013182:	2201      	movs	r2, #1
 8013184:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	4b9d      	ldr	r3, [pc, #628]	; (8013400 <_ZN8MainView9updateValEPh+0x300>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	429a      	cmp	r2, r3
 8013190:	d021      	beq.n	80131d6 <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	4a9a      	ldr	r2, [pc, #616]	; (8013400 <_ZN8MainView9updateValEPh+0x300>)
 8013198:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4619      	mov	r1, r3
 80131a6:	4610      	mov	r0, r2
 80131a8:	f002 fabc 	bl	8015724 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80131b2:	4618      	mov	r0, r3
 80131b4:	f006 faca 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f603 305e 	addw	r0, r3, #2910	; 0xb5e
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	4a90      	ldr	r2, [pc, #576]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 80131c4:	2105      	movs	r1, #5
 80131c6:	f007 feef 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80131d0:	4618      	mov	r0, r3
 80131d2:	f006 fabb 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->map != prev_map) {
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	689a      	ldr	r2, [r3, #8]
 80131da:	4b8b      	ldr	r3, [pc, #556]	; (8013408 <_ZN8MainView9updateValEPh+0x308>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d012      	beq.n	8013208 <_ZN8MainView9updateValEPh+0x108>
		prev_map = values->map;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	689b      	ldr	r3, [r3, #8]
 80131e6:	4a88      	ldr	r2, [pc, #544]	; (8013408 <_ZN8MainView9updateValEPh+0x308>)
 80131e8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f603 3072 	addw	r0, r3, #2930	; 0xb72
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	4a83      	ldr	r2, [pc, #524]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 80131f6:	2105      	movs	r1, #5
 80131f8:	f007 fed6 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013202:	4618      	mov	r0, r3
 8013204:	f006 faa2 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	685a      	ldr	r2, [r3, #4]
 801320c:	4b7f      	ldr	r3, [pc, #508]	; (801340c <_ZN8MainView9updateValEPh+0x30c>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	429a      	cmp	r2, r3
 8013212:	d012      	beq.n	801323a <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	4a7c      	ldr	r2, [pc, #496]	; (801340c <_ZN8MainView9updateValEPh+0x30c>)
 801321a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f603 3068 	addw	r0, r3, #2920	; 0xb68
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	4a77      	ldr	r2, [pc, #476]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 8013228:	2105      	movs	r1, #5
 801322a:	f007 febd 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8013234:	4618      	mov	r0, r3
 8013236:	f006 fa89 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013240:	4b73      	ldr	r3, [pc, #460]	; (8013410 <_ZN8MainView9updateValEPh+0x310>)
 8013242:	edd3 7a00 	vldr	s15, [r3]
 8013246:	eeb4 7a67 	vcmp.f32	s14, s15
 801324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324e:	d015      	beq.n	801327c <_ZN8MainView9updateValEPh+0x17c>
		prev_lambda = values->lambda;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	4a6e      	ldr	r2, [pc, #440]	; (8013410 <_ZN8MainView9updateValEPh+0x310>)
 8013256:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	edd3 7a03 	vldr	s15, [r3, #12]
 8013264:	eeb0 0a67 	vmov.f32	s0, s15
 8013268:	4a6a      	ldr	r2, [pc, #424]	; (8013414 <_ZN8MainView9updateValEPh+0x314>)
 801326a:	2105      	movs	r1, #5
 801326c:	f7ff fd7a 	bl	8012d64 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013276:	4618      	mov	r0, r3
 8013278:	f006 fa68 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda_trgt != prev_lambda_targ) {
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	ed93 7a04 	vldr	s14, [r3, #16]
 8013282:	4b65      	ldr	r3, [pc, #404]	; (8013418 <_ZN8MainView9updateValEPh+0x318>)
 8013284:	edd3 7a00 	vldr	s15, [r3]
 8013288:	eeb4 7a67 	vcmp.f32	s14, s15
 801328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013290:	d015      	beq.n	80132be <_ZN8MainView9updateValEPh+0x1be>
		prev_lambda_targ = values->lambda_trgt;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	691b      	ldr	r3, [r3, #16]
 8013296:	4a60      	ldr	r2, [pc, #384]	; (8013418 <_ZN8MainView9updateValEPh+0x318>)
 8013298:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f603 3002 	addw	r0, r3, #2818	; 0xb02
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80132a6:	eeb0 0a67 	vmov.f32	s0, s15
 80132aa:	4a5a      	ldr	r2, [pc, #360]	; (8013414 <_ZN8MainView9updateValEPh+0x314>)
 80132ac:	2105      	movs	r1, #5
 80132ae:	f7ff fd59 	bl	8012d64 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TrgtValue.invalidate();
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80132b8:	4618      	mov	r0, r3
 80132ba:	f006 fa47 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80132c4:	4b55      	ldr	r3, [pc, #340]	; (801341c <_ZN8MainView9updateValEPh+0x31c>)
 80132c6:	edd3 7a00 	vldr	s15, [r3]
 80132ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80132ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d2:	d015      	beq.n	8013300 <_ZN8MainView9updateValEPh+0x200>
		prev_oil_press = values->oil_press;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	699b      	ldr	r3, [r3, #24]
 80132d8:	4a50      	ldr	r2, [pc, #320]	; (801341c <_ZN8MainView9updateValEPh+0x31c>)
 80132da:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f603 304a 	addw	r0, r3, #2890	; 0xb4a
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80132e8:	eeb0 0a67 	vmov.f32	s0, s15
 80132ec:	4a4c      	ldr	r2, [pc, #304]	; (8013420 <_ZN8MainView9updateValEPh+0x320>)
 80132ee:	2105      	movs	r1, #5
 80132f0:	f7ff fd38 	bl	8012d64 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80132fa:	4618      	mov	r0, r3
 80132fc:	f006 fa26 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	69da      	ldr	r2, [r3, #28]
 8013304:	4b47      	ldr	r3, [pc, #284]	; (8013424 <_ZN8MainView9updateValEPh+0x324>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	429a      	cmp	r2, r3
 801330a:	d012      	beq.n	8013332 <_ZN8MainView9updateValEPh+0x232>
		prev_fuel_press = values->fuel_press;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	4a44      	ldr	r2, [pc, #272]	; (8013424 <_ZN8MainView9updateValEPh+0x324>)
 8013312:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f603 3086 	addw	r0, r3, #2950	; 0xb86
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	69db      	ldr	r3, [r3, #28]
 801331e:	4a39      	ldr	r2, [pc, #228]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 8013320:	2105      	movs	r1, #5
 8013322:	f007 fe41 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801332c:	4618      	mov	r0, r3
 801332e:	f006 fa0d 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	695a      	ldr	r2, [r3, #20]
 8013336:	4b3c      	ldr	r3, [pc, #240]	; (8013428 <_ZN8MainView9updateValEPh+0x328>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	429a      	cmp	r2, r3
 801333c:	d012      	beq.n	8013364 <_ZN8MainView9updateValEPh+0x264>
		prev_oil_tmp = values->oil_tmp;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	695b      	ldr	r3, [r3, #20]
 8013342:	4a39      	ldr	r2, [pc, #228]	; (8013428 <_ZN8MainView9updateValEPh+0x328>)
 8013344:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f503 6034 	add.w	r0, r3, #2880	; 0xb40
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	695b      	ldr	r3, [r3, #20]
 8013350:	4a2c      	ldr	r2, [pc, #176]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 8013352:	2105      	movs	r1, #5
 8013354:	f007 fe28 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801335e:	4618      	mov	r0, r3
 8013360:	f006 f9f4 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	6a1a      	ldr	r2, [r3, #32]
 8013368:	4b30      	ldr	r3, [pc, #192]	; (801342c <_ZN8MainView9updateValEPh+0x32c>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	429a      	cmp	r2, r3
 801336e:	d012      	beq.n	8013396 <_ZN8MainView9updateValEPh+0x296>
		prev_iat = values->iat;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	6a1b      	ldr	r3, [r3, #32]
 8013374:	4a2d      	ldr	r2, [pc, #180]	; (801342c <_ZN8MainView9updateValEPh+0x32c>)
 8013376:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f603 302c 	addw	r0, r3, #2860	; 0xb2c
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	6a1b      	ldr	r3, [r3, #32]
 8013382:	4a20      	ldr	r2, [pc, #128]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 8013384:	2105      	movs	r1, #5
 8013386:	f007 fe0f 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013390:	4618      	mov	r0, r3
 8013392:	f006 f9db 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt != prev_egt) {
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801339a:	4b25      	ldr	r3, [pc, #148]	; (8013430 <_ZN8MainView9updateValEPh+0x330>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d012      	beq.n	80133c8 <_ZN8MainView9updateValEPh+0x2c8>
		prev_egt = values->egt;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a6:	4a22      	ldr	r2, [pc, #136]	; (8013430 <_ZN8MainView9updateValEPh+0x330>)
 80133a8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f603 3036 	addw	r0, r3, #2870	; 0xb36
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b4:	4a13      	ldr	r2, [pc, #76]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 80133b6:	2105      	movs	r1, #5
 80133b8:	f007 fdf6 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80133c2:	4618      	mov	r0, r3
 80133c4:	f006 f9c2 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt_2 != prev_egt_2) {
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80133cc:	4b19      	ldr	r3, [pc, #100]	; (8013434 <_ZN8MainView9updateValEPh+0x334>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d031      	beq.n	8013438 <_ZN8MainView9updateValEPh+0x338>
		prev_egt_2 = values->egt_2;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133d8:	4a16      	ldr	r2, [pc, #88]	; (8013434 <_ZN8MainView9updateValEPh+0x334>)
 80133da:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d",values->egt_2);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f603 307c 	addw	r0, r3, #2940	; 0xb7c
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133e6:	4a07      	ldr	r2, [pc, #28]	; (8013404 <_ZN8MainView9updateValEPh+0x304>)
 80133e8:	2105      	movs	r1, #5
 80133ea:	f007 fddd 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80133f4:	4618      	mov	r0, r3
 80133f6:	f006 f9a9 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
 80133fa:	e01d      	b.n	8013438 <_ZN8MainView9updateValEPh+0x338>
 80133fc:	20008e34 	.word	0x20008e34
 8013400:	2000003c 	.word	0x2000003c
 8013404:	080267ac 	.word	0x080267ac
 8013408:	20000040 	.word	0x20000040
 801340c:	20000044 	.word	0x20000044
 8013410:	20000048 	.word	0x20000048
 8013414:	080267b0 	.word	0x080267b0
 8013418:	2000004c 	.word	0x2000004c
 801341c:	20008e18 	.word	0x20008e18
 8013420:	080267b8 	.word	0x080267b8
 8013424:	20008e1c 	.word	0x20008e1c
 8013428:	20008e14 	.word	0x20008e14
 801342c:	20008e20 	.word	0x20008e20
 8013430:	20008e24 	.word	0x20008e24
 8013434:	20008e28 	.word	0x20008e28
	}

	if(values->tps != prev_tps) {
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801343c:	4b25      	ldr	r3, [pc, #148]	; (80134d4 <_ZN8MainView9updateValEPh+0x3d4>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	429a      	cmp	r2, r3
 8013442:	d021      	beq.n	8013488 <_ZN8MainView9updateValEPh+0x388>
		prev_tps = values->tps;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013448:	4a22      	ldr	r2, [pc, #136]	; (80134d4 <_ZN8MainView9updateValEPh+0x3d4>)
 801344a:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013456:	4619      	mov	r1, r3
 8013458:	4610      	mov	r0, r2
 801345a:	f002 f813 	bl	8015484 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013464:	4618      	mov	r0, r3
 8013466:	f006 f971 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013474:	4a18      	ldr	r2, [pc, #96]	; (80134d8 <_ZN8MainView9updateValEPh+0x3d8>)
 8013476:	2105      	movs	r1, #5
 8013478:	f007 fd96 	bl	801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013482:	4618      	mov	r0, r3
 8013484:	f006 f962 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801348e:	4b13      	ldr	r3, [pc, #76]	; (80134dc <_ZN8MainView9updateValEPh+0x3dc>)
 8013490:	edd3 7a00 	vldr	s15, [r3]
 8013494:	eeb4 7a67 	vcmp.f32	s14, s15
 8013498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349c:	d015      	beq.n	80134ca <_ZN8MainView9updateValEPh+0x3ca>
		prev_batt_v = values->batt_v;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134a2:	4a0e      	ldr	r2, [pc, #56]	; (80134dc <_ZN8MainView9updateValEPh+0x3dc>)
 80134a4:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f603 3054 	addw	r0, r3, #2900	; 0xb54
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80134b2:	eeb0 0a67 	vmov.f32	s0, s15
 80134b6:	4a0a      	ldr	r2, [pc, #40]	; (80134e0 <_ZN8MainView9updateValEPh+0x3e0>)
 80134b8:	2105      	movs	r1, #5
 80134ba:	f7ff fc53 	bl	8012d64 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80134c4:	4618      	mov	r0, r3
 80134c6:	f006 f941 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 80134ca:	bf00      	nop
 80134cc:	3714      	adds	r7, #20
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd90      	pop	{r4, r7, pc}
 80134d2:	bf00      	nop
 80134d4:	20008e2c 	.word	0x20008e2c
 80134d8:	080267ac 	.word	0x080267ac
 80134dc:	20008e30 	.word	0x20008e30
 80134e0:	080267b0 	.word	0x080267b0

080134e4 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2200      	movs	r2, #0
 80134f0:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 80134f2:	2200      	movs	r2, #0
 80134f4:	2134      	movs	r1, #52	; 0x34
 80134f6:	2001      	movs	r0, #1
 80134f8:	f7f9 f9c2 	bl	800c880 <xQueueGenericCreate>
 80134fc:	4603      	mov	r3, r0
 80134fe:	4a07      	ldr	r2, [pc, #28]	; (801351c <_ZN5ModelC1Ev+0x38>)
 8013500:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8013502:	2200      	movs	r2, #0
 8013504:	2128      	movs	r1, #40	; 0x28
 8013506:	2001      	movs	r0, #1
 8013508:	f7f9 f9ba 	bl	800c880 <xQueueGenericCreate>
 801350c:	4603      	mov	r3, r0
 801350e:	4a04      	ldr	r2, [pc, #16]	; (8013520 <_ZN5ModelC1Ev+0x3c>)
 8013510:	6013      	str	r3, [r2, #0]
}
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4618      	mov	r0, r3
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	20008e94 	.word	0x20008e94
 8013520:	20008e98 	.word	0x20008e98

08013524 <_ZN5Model4tickEv>:

void Model::tick()
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 801352c:	4b1a      	ldr	r3, [pc, #104]	; (8013598 <_ZN5Model4tickEv+0x74>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2200      	movs	r2, #0
 8013532:	491a      	ldr	r1, [pc, #104]	; (801359c <_ZN5Model4tickEv+0x78>)
 8013534:	4618      	mov	r0, r3
 8013536:	f7f9 fc41 	bl	800cdbc <xQueueReceive>
 801353a:	4603      	mov	r3, r0
 801353c:	2b01      	cmp	r3, #1
 801353e:	bf0c      	ite	eq
 8013540:	2301      	moveq	r3, #1
 8013542:	2300      	movne	r3, #0
 8013544:	b2db      	uxtb	r3, r3
 8013546:	2b00      	cmp	r3, #0
 8013548:	d009      	beq.n	801355e <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	3308      	adds	r3, #8
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	4910      	ldr	r1, [pc, #64]	; (801359c <_ZN5Model4tickEv+0x78>)
 801355a:	4610      	mov	r0, r2
 801355c:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 801355e:	4b10      	ldr	r3, [pc, #64]	; (80135a0 <_ZN5Model4tickEv+0x7c>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	2200      	movs	r2, #0
 8013564:	490f      	ldr	r1, [pc, #60]	; (80135a4 <_ZN5Model4tickEv+0x80>)
 8013566:	4618      	mov	r0, r3
 8013568:	f7f9 fc28 	bl	800cdbc <xQueueReceive>
 801356c:	4603      	mov	r3, r0
 801356e:	2b01      	cmp	r3, #1
 8013570:	bf0c      	ite	eq
 8013572:	2301      	moveq	r3, #1
 8013574:	2300      	movne	r3, #0
 8013576:	b2db      	uxtb	r3, r3
 8013578:	2b00      	cmp	r3, #0
 801357a:	d009      	beq.n	8013590 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681a      	ldr	r2, [r3, #0]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	330c      	adds	r3, #12
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4906      	ldr	r1, [pc, #24]	; (80135a4 <_ZN5Model4tickEv+0x80>)
 801358c:	4610      	mov	r0, r2
 801358e:	4798      	blx	r3
	}
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	20008e94 	.word	0x20008e94
 801359c:	20008e38 	.word	0x20008e38
 80135a0:	20008e98 	.word	0x20008e98
 80135a4:	20008e6c 	.word	0x20008e6c

080135a8 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80135a8:	b480      	push	{r7}
 80135aa:	b083      	sub	sp, #12
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
    {
 80135b0:	4a04      	ldr	r2, [pc, #16]	; (80135c4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	601a      	str	r2, [r3, #0]
    }
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	370c      	adds	r7, #12
 80135bc:	46bd      	mov	sp, r7
 80135be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c2:	4770      	bx	lr
 80135c4:	08026e04 	.word	0x08026e04

080135c8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
    }
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7ff ffe9 	bl	80135a8 <_ZN8touchgfx15TouchControllerD1Ev>
 80135d6:	2104      	movs	r1, #4
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f011 fc4f 	bl	8024e7c <_ZdlPvj>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80135e8:	b480      	push	{r7}
 80135ea:	b083      	sub	sp, #12
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80135f0:	bf00      	nop
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013608:	2300      	movs	r3, #0
}
 801360a:	4618      	mov	r0, r3
 801360c:	3714      	adds	r7, #20
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr
	...

08013618 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	4a05      	ldr	r2, [pc, #20]	; (8013638 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	601a      	str	r2, [r3, #0]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff ffbd 	bl	80135a8 <_ZN8touchgfx15TouchControllerD1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	08026dec 	.word	0x08026dec

0801363c <_ZN20STM32TouchControllerD0Ev>:
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff ffe7 	bl	8013618 <_ZN20STM32TouchControllerD1Ev>
 801364a:	2104      	movs	r1, #4
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f011 fc15 	bl	8024e7c <_ZdlPvj>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	4618      	mov	r0, r3
 8013656:	3708      	adds	r7, #8
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	4603      	mov	r3, r0
 8013664:	71fb      	strb	r3, [r7, #7]

}
 8013666:	bf00      	nop
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr

08013672 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013672:	b480      	push	{r7}
 8013674:	b083      	sub	sp, #12
 8013676:	af00      	add	r7, sp, #0
 8013678:	4603      	mov	r3, r0
 801367a:	71fb      	strb	r3, [r7, #7]

}
 801367c:	bf00      	nop
 801367e:	370c      	adds	r7, #12
 8013680:	46bd      	mov	sp, r7
 8013682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013686:	4770      	bx	lr

08013688 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013688:	b480      	push	{r7}
 801368a:	b083      	sub	sp, #12
 801368c:	af00      	add	r7, sp, #0
 801368e:	4603      	mov	r3, r0
 8013690:	71fb      	strb	r3, [r7, #7]

}
 8013692:	bf00      	nop
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
	...

080136a0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
    {
 80136a8:	4a04      	ldr	r2, [pc, #16]	; (80136bc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	601a      	str	r2, [r3, #0]
    }
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	08027ae4 	.word	0x08027ae4

080136c0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
    }
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f7ff ffe9 	bl	80136a0 <_ZN8touchgfx3HALD1Ev>
 80136ce:	2178      	movs	r1, #120	; 0x78
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f011 fbd3 	bl	8024e7c <_ZdlPvj>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80136e0:	b480      	push	{r7}
 80136e2:	b083      	sub	sp, #12
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	460b      	mov	r3, r1
 80136ea:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	78fa      	ldrb	r2, [r7, #3]
 80136f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2201      	movs	r2, #1
 80136f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80136fc:	bf00      	nop
 80136fe:	370c      	adds	r7, #12
 8013700:	46bd      	mov	sp, r7
 8013702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013706:	4770      	bx	lr

08013708 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	685a      	ldr	r2, [r3, #4]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	4610      	mov	r0, r2
 801371e:	4798      	blx	r3
 8013720:	4603      	mov	r3, r0
    }
 8013722:	4618      	mov	r0, r3
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}

0801372a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801372a:	b580      	push	{r7, lr}
 801372c:	b082      	sub	sp, #8
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f003 f900 	bl	8016938 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	3390      	adds	r3, #144	; 0x90
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	4798      	blx	r3
    }
 8013744:	bf00      	nop
 8013746:	3708      	adds	r7, #8
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801374c:	b480      	push	{r7}
 801374e:	b083      	sub	sp, #12
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013756:	2300      	movs	r3, #0
    }
 8013758:	4618      	mov	r0, r3
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr

08013764 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8013764:	b590      	push	{r4, r7, lr}
 8013766:	b08b      	sub	sp, #44	; 0x2c
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	4611      	mov	r1, r2
 8013770:	461a      	mov	r2, r3
 8013772:	460b      	mov	r3, r1
 8013774:	80fb      	strh	r3, [r7, #6]
 8013776:	4613      	mov	r3, r2
 8013778:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 801377a:	f7fc f925 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 801377e:	4603      	mov	r3, r0
 8013780:	681a      	ldr	r2, [r3, #0]
 8013782:	3228      	adds	r2, #40	; 0x28
 8013784:	6812      	ldr	r2, [r2, #0]
 8013786:	4618      	mov	r0, r3
 8013788:	4790      	blx	r2
 801378a:	4603      	mov	r3, r0
 801378c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 801378e:	8b7b      	ldrh	r3, [r7, #26]
 8013790:	4a25      	ldr	r2, [pc, #148]	; (8013828 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc4>)
 8013792:	8812      	ldrh	r2, [r2, #0]
 8013794:	fb02 f303 	mul.w	r3, r2, r3
 8013798:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80137a2:	2300      	movs	r3, #0
 80137a4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80137a6:	797b      	ldrb	r3, [r7, #5]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d005      	beq.n	80137b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80137ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	4413      	add	r3, r2
 80137b2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80137b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80137b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d005      	beq.n	80137cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80137c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	4413      	add	r3, r2
 80137c6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80137cc:	88fb      	ldrh	r3, [r7, #6]
 80137ce:	2b02      	cmp	r3, #2
 80137d0:	dc10      	bgt.n	80137f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	dc13      	bgt.n	80137fe <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 80137d6:	e01c      	b.n	8013812 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 80137d8:	3b04      	subs	r3, #4
 80137da:	4a14      	ldr	r2, [pc, #80]	; (801382c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc8>)
 80137dc:	fa22 f303 	lsr.w	r3, r2, r3
 80137e0:	f003 0301 	and.w	r3, r3, #1
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	bf14      	ite	ne
 80137e8:	2301      	movne	r3, #1
 80137ea:	2300      	moveq	r3, #0
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d105      	bne.n	80137fe <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 80137f2:	e00e      	b.n	8013812 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 80137f4:	2b20      	cmp	r3, #32
 80137f6:	dc0c      	bgt.n	8013812 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 80137f8:	2b04      	cmp	r3, #4
 80137fa:	daed      	bge.n	80137d8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x74>
 80137fc:	e009      	b.n	8013812 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	3374      	adds	r3, #116	; 0x74
 8013804:	681c      	ldr	r4, [r3, #0]
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	6a3a      	ldr	r2, [r7, #32]
 801380a:	68b9      	ldr	r1, [r7, #8]
 801380c:	68f8      	ldr	r0, [r7, #12]
 801380e:	47a0      	blx	r4
            break;
 8013810:	e006      	b.n	8013820 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xbc>
        default:
            assert(0 && "Unsupported bit depth");
 8013812:	4b07      	ldr	r3, [pc, #28]	; (8013830 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xcc>)
 8013814:	4a07      	ldr	r2, [pc, #28]	; (8013834 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd0>)
 8013816:	f240 3125 	movw	r1, #805	; 0x325
 801381a:	4807      	ldr	r0, [pc, #28]	; (8013838 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd4>)
 801381c:	f011 fb5c 	bl	8024ed8 <__assert_func>
            break;
        }
    }
 8013820:	bf00      	nop
 8013822:	372c      	adds	r7, #44	; 0x2c
 8013824:	46bd      	mov	sp, r7
 8013826:	bd90      	pop	{r4, r7, pc}
 8013828:	2000c504 	.word	0x2000c504
 801382c:	10101011 	.word	0x10101011
 8013830:	080267c0 	.word	0x080267c0
 8013834:	080267e0 	.word	0x080267e0
 8013838:	08026834 	.word	0x08026834

0801383c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801383c:	b580      	push	{r7, lr}
 801383e:	b084      	sub	sp, #16
 8013840:	af00      	add	r7, sp, #0
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	607a      	str	r2, [r7, #4]
 8013848:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d106      	bne.n	801385e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013850:	4b11      	ldr	r3, [pc, #68]	; (8013898 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013852:	4a12      	ldr	r2, [pc, #72]	; (801389c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013854:	f240 3137 	movw	r1, #823	; 0x337
 8013858:	4811      	ldr	r0, [pc, #68]	; (80138a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801385a:	f011 fb3d 	bl	8024ed8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	683a      	ldr	r2, [r7, #0]
 801386e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	bf14      	ite	ne
 8013876:	2301      	movne	r3, #1
 8013878:	2300      	moveq	r3, #0
 801387a:	b2da      	uxtb	r2, r3
 801387c:	4b09      	ldr	r3, [pc, #36]	; (80138a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801387e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	bf14      	ite	ne
 8013886:	2301      	movne	r3, #1
 8013888:	2300      	moveq	r3, #0
 801388a:	b2da      	uxtb	r2, r3
 801388c:	4b06      	ldr	r3, [pc, #24]	; (80138a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801388e:	701a      	strb	r2, [r3, #0]
    }
 8013890:	bf00      	nop
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	08026878 	.word	0x08026878
 801389c:	080268b0 	.word	0x080268b0
 80138a0:	08026834 	.word	0x08026834
 80138a4:	2000c506 	.word	0x2000c506
 80138a8:	2000c507 	.word	0x2000c507

080138ac <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	460b      	mov	r3, r1
 80138b6:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d004      	beq.n	80138ca <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138c4:	887a      	ldrh	r2, [r7, #2]
 80138c6:	4610      	mov	r0, r2
 80138c8:	4798      	blx	r3
        }
    }
 80138ca:	bf00      	nop
 80138cc:	3708      	adds	r7, #8
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}

080138d2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80138d2:	b580      	push	{r7, lr}
 80138d4:	b082      	sub	sp, #8
 80138d6:	af00      	add	r7, sp, #0
 80138d8:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	685a      	ldr	r2, [r3, #4]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	3318      	adds	r3, #24
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4610      	mov	r0, r2
 80138ea:	4798      	blx	r3
 80138ec:	4603      	mov	r3, r0
    }
 80138ee:	4618      	mov	r0, r3
 80138f0:	3708      	adds	r7, #8
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
	...

080138f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80138f8:	b480      	push	{r7}
 80138fa:	b083      	sub	sp, #12
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801390c:	429a      	cmp	r2, r3
 801390e:	d017      	beq.n	8013940 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013910:	4b1a      	ldr	r3, [pc, #104]	; (801397c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d12a      	bne.n	801396e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013918:	4b19      	ldr	r3, [pc, #100]	; (8013980 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801391a:	881a      	ldrh	r2, [r3, #0]
 801391c:	4b19      	ldr	r3, [pc, #100]	; (8013984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801391e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013920:	4b19      	ldr	r3, [pc, #100]	; (8013988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013922:	881a      	ldrh	r2, [r3, #0]
 8013924:	4b19      	ldr	r3, [pc, #100]	; (801398c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013926:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013928:	4b16      	ldr	r3, [pc, #88]	; (8013984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801392a:	881a      	ldrh	r2, [r3, #0]
 801392c:	4b16      	ldr	r3, [pc, #88]	; (8013988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801392e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013930:	4b16      	ldr	r3, [pc, #88]	; (801398c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013932:	881a      	ldrh	r2, [r3, #0]
 8013934:	4b12      	ldr	r3, [pc, #72]	; (8013980 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013936:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013938:	4b10      	ldr	r3, [pc, #64]	; (801397c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801393a:	2201      	movs	r2, #1
 801393c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801393e:	e016      	b.n	801396e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013940:	4b0e      	ldr	r3, [pc, #56]	; (801397c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d012      	beq.n	801396e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013948:	4b0f      	ldr	r3, [pc, #60]	; (8013988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801394a:	881a      	ldrh	r2, [r3, #0]
 801394c:	4b0d      	ldr	r3, [pc, #52]	; (8013984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801394e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013950:	4b0b      	ldr	r3, [pc, #44]	; (8013980 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013952:	881a      	ldrh	r2, [r3, #0]
 8013954:	4b0d      	ldr	r3, [pc, #52]	; (801398c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013956:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013958:	4b0c      	ldr	r3, [pc, #48]	; (801398c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801395a:	881a      	ldrh	r2, [r3, #0]
 801395c:	4b0a      	ldr	r3, [pc, #40]	; (8013988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801395e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013960:	4b08      	ldr	r3, [pc, #32]	; (8013984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013962:	881a      	ldrh	r2, [r3, #0]
 8013964:	4b06      	ldr	r3, [pc, #24]	; (8013980 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013966:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013968:	4b04      	ldr	r3, [pc, #16]	; (801397c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801396a:	2200      	movs	r2, #0
 801396c:	701a      	strb	r2, [r3, #0]
    }
 801396e:	bf00      	nop
 8013970:	370c      	adds	r7, #12
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop
 801397c:	2000c500 	.word	0x2000c500
 8013980:	2000c4fc 	.word	0x2000c4fc
 8013984:	2000c502 	.word	0x2000c502
 8013988:	2000c4fe 	.word	0x2000c4fe
 801398c:	2000c504 	.word	0x2000c504

08013990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4618      	mov	r0, r3
 801399c:	f002 fa4e 	bl	8015e3c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80139a0:	bf00      	nop
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	4a05      	ldr	r2, [pc, #20]	; (80139c8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	601a      	str	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff fe71 	bl	80136a0 <_ZN8touchgfx3HALD1Ev>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4618      	mov	r0, r3
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	08027018 	.word	0x08027018

080139cc <_ZN20TouchGFXGeneratedHALD0Ev>:
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f7ff ffe7 	bl	80139a8 <_ZN20TouchGFXGeneratedHALD1Ev>
 80139da:	2178      	movs	r1, #120	; 0x78
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f011 fa4d 	bl	8024e7c <_ZdlPvj>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4618      	mov	r0, r3
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}

080139ec <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ff ffca 	bl	8013990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80139fc:	bf00      	nop
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f001 fb1c 	bl	801504c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013a14:	bf00      	nop
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f001 fb9c 	bl	8015164 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013a2c:	4603      	mov	r3, r0
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3708      	adds	r7, #8
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b082      	sub	sp, #8
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
 8013a3e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6839      	ldr	r1, [r7, #0]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f001 fb9b 	bl	8015180 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013a4a:	bf00      	nop
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}

08013a52 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b082      	sub	sp, #8
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
 8013a5a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f001 fba3 	bl	80151ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013a66:	bf00      	nop
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b082      	sub	sp, #8
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f001 fb19 	bl	80150b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013a7e:	bf00      	nop
 8013a80:	3708      	adds	r7, #8
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b082      	sub	sp, #8
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	4618      	mov	r0, r3
 8013a92:	f001 fb1d 	bl	80150d0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013a96:	bf00      	nop
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f001 fb1f 	bl	80150ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013aae:	bf00      	nop
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b082      	sub	sp, #8
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f001 fb21 	bl	8015108 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013ac6:	bf00      	nop
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
	...

08013ad0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	4a05      	ldr	r2, [pc, #20]	; (8013af0 <_ZN11TouchGFXHALD1Ev+0x20>)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	601a      	str	r2, [r3, #0]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ff ff61 	bl	80139a8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	08026e1c 	.word	0x08026e1c

08013af4 <_ZN11TouchGFXHALD0Ev>:
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7ff ffe7 	bl	8013ad0 <_ZN11TouchGFXHALD1Ev>
 8013b02:	2178      	movs	r1, #120	; 0x78
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f011 f9b9 	bl	8024e7c <_ZdlPvj>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013b18:	2203      	movs	r2, #3
 8013b1a:	2100      	movs	r1, #0
 8013b1c:	2001      	movs	r0, #1
 8013b1e:	f7f8 feaf 	bl	800c880 <xQueueGenericCreate>
 8013b22:	4603      	mov	r3, r0
 8013b24:	4a0b      	ldr	r2, [pc, #44]	; (8013b54 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013b26:	6013      	str	r3, [r2, #0]
 8013b28:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d006      	beq.n	8013b3e <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8013b30:	4b08      	ldr	r3, [pc, #32]	; (8013b54 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013b32:	6818      	ldr	r0, [r3, #0]
 8013b34:	2300      	movs	r3, #0
 8013b36:	2200      	movs	r2, #0
 8013b38:	2100      	movs	r1, #0
 8013b3a:	f7f8 ff03 	bl	800c944 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8013b3e:	2200      	movs	r2, #0
 8013b40:	2101      	movs	r1, #1
 8013b42:	2001      	movs	r0, #1
 8013b44:	f7f8 fe9c 	bl	800c880 <xQueueGenericCreate>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	4a03      	ldr	r2, [pc, #12]	; (8013b58 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8013b4c:	6013      	str	r3, [r2, #0]
}
 8013b4e:	bf00      	nop
 8013b50:	bd80      	pop	{r7, pc}
 8013b52:	bf00      	nop
 8013b54:	20008e9c 	.word	0x20008e9c
 8013b58:	20008ea0 	.word	0x20008ea0

08013b5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8013b60:	4b04      	ldr	r3, [pc, #16]	; (8013b74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f04f 31ff 	mov.w	r1, #4294967295
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7f9 fa0d 	bl	800cf88 <xQueueSemaphoreTake>
}
 8013b6e:	bf00      	nop
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	20008e9c 	.word	0x20008e9c

08013b78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8013b7c:	4b04      	ldr	r3, [pc, #16]	; (8013b90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8013b7e:	6818      	ldr	r0, [r3, #0]
 8013b80:	2300      	movs	r3, #0
 8013b82:	2200      	movs	r2, #0
 8013b84:	2100      	movs	r1, #0
 8013b86:	f7f8 fedd 	bl	800c944 <xQueueGenericSend>
}
 8013b8a:	bf00      	nop
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	20008e9c 	.word	0x20008e9c

08013b94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8013b98:	4b03      	ldr	r3, [pc, #12]	; (8013ba8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7f9 f9f2 	bl	800cf88 <xQueueSemaphoreTake>
}
 8013ba4:	bf00      	nop
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	20008e9c 	.word	0x20008e9c

08013bac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8013bb6:	4b0b      	ldr	r3, [pc, #44]	; (8013be4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	1d3a      	adds	r2, r7, #4
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7f9 f866 	bl	800cc90 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d007      	beq.n	8013bda <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013bca:	4b07      	ldr	r3, [pc, #28]	; (8013be8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bd0:	601a      	str	r2, [r3, #0]
 8013bd2:	f3bf 8f4f 	dsb	sy
 8013bd6:	f3bf 8f6f 	isb	sy
}
 8013bda:	bf00      	nop
 8013bdc:	3708      	adds	r7, #8
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
 8013be2:	bf00      	nop
 8013be4:	20008e9c 	.word	0x20008e9c
 8013be8:	e000ed04 	.word	0xe000ed04

08013bec <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
    if (vsync_q)
 8013bf2:	4b0e      	ldr	r3, [pc, #56]	; (8013c2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d013      	beq.n	8013c22 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8013bfe:	4b0b      	ldr	r3, [pc, #44]	; (8013c2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013c00:	6818      	ldr	r0, [r3, #0]
 8013c02:	1d3a      	adds	r2, r7, #4
 8013c04:	2300      	movs	r3, #0
 8013c06:	490a      	ldr	r1, [pc, #40]	; (8013c30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8013c08:	f7f8 ffa2 	bl	800cb50 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d007      	beq.n	8013c22 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8013c12:	4b08      	ldr	r3, [pc, #32]	; (8013c34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8013c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c18:	601a      	str	r2, [r3, #0]
 8013c1a:	f3bf 8f4f 	dsb	sy
 8013c1e:	f3bf 8f6f 	isb	sy
    }
}
 8013c22:	bf00      	nop
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
 8013c2a:	bf00      	nop
 8013c2c:	20008ea0 	.word	0x20008ea0
 8013c30:	20000050 	.word	0x20000050
 8013c34:	e000ed04 	.word	0xe000ed04

08013c38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8013c3c:	4b08      	ldr	r3, [pc, #32]	; (8013c60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2200      	movs	r2, #0
 8013c42:	4908      	ldr	r1, [pc, #32]	; (8013c64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f9 f8b9 	bl	800cdbc <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8013c4a:	4b05      	ldr	r3, [pc, #20]	; (8013c60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c52:	4904      	ldr	r1, [pc, #16]	; (8013c64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7f9 f8b1 	bl	800cdbc <xQueueReceive>
}
 8013c5a:	bf00      	nop
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	20008ea0 	.word	0x20008ea0
 8013c64:	20000050 	.word	0x20000050

08013c68 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	4603      	mov	r3, r0
 8013c70:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8013c72:	88fb      	ldrh	r3, [r7, #6]
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f9 fdef 	bl	800d858 <vTaskDelay>
}
 8013c7a:	bf00      	nop
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
	...

08013c84 <__NVIC_EnableIRQ>:
{
 8013c84:	b480      	push	{r7}
 8013c86:	b083      	sub	sp, #12
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	db0b      	blt.n	8013cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013c96:	79fb      	ldrb	r3, [r7, #7]
 8013c98:	f003 021f 	and.w	r2, r3, #31
 8013c9c:	4907      	ldr	r1, [pc, #28]	; (8013cbc <__NVIC_EnableIRQ+0x38>)
 8013c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ca2:	095b      	lsrs	r3, r3, #5
 8013ca4:	2001      	movs	r0, #1
 8013ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8013caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013cae:	bf00      	nop
 8013cb0:	370c      	adds	r7, #12
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop
 8013cbc:	e000e100 	.word	0xe000e100

08013cc0 <__NVIC_DisableIRQ>:
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b083      	sub	sp, #12
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	db12      	blt.n	8013cf8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013cd2:	79fb      	ldrb	r3, [r7, #7]
 8013cd4:	f003 021f 	and.w	r2, r3, #31
 8013cd8:	490a      	ldr	r1, [pc, #40]	; (8013d04 <__NVIC_DisableIRQ+0x44>)
 8013cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cde:	095b      	lsrs	r3, r3, #5
 8013ce0:	2001      	movs	r0, #1
 8013ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8013ce6:	3320      	adds	r3, #32
 8013ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013cec:	f3bf 8f4f 	dsb	sy
}
 8013cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013cf2:	f3bf 8f6f 	isb	sy
}
 8013cf6:	bf00      	nop
}
 8013cf8:	bf00      	nop
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr
 8013d04:	e000e100 	.word	0xe000e100

08013d08 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
        return color;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
    }
 8013d14:	4618      	mov	r0, r3
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	b29b      	uxth	r3, r3
    }
 8013d2e:	4618      	mov	r0, r3
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr
	...

08013d3c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8013d3c:	b480      	push	{r7}
 8013d3e:	b083      	sub	sp, #12
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
    {
 8013d44:	4a04      	ldr	r2, [pc, #16]	; (8013d58 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	601a      	str	r2, [r3, #0]
    }
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr
 8013d58:	08026f20 	.word	0x08026f20

08013d5c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
    }
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f7ff ffe9 	bl	8013d3c <_ZN8touchgfx9DMA_QueueD1Ev>
 8013d6a:	2104      	movs	r1, #4
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f011 f885 	bl	8024e7c <_ZdlPvj>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	4618      	mov	r0, r3
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	3344      	adds	r3, #68	; 0x44
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	4798      	blx	r3
    }
 8013d90:	bf00      	nop
 8013d92:	3708      	adds	r7, #8
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013da0:	2300      	movs	r3, #0
    }
 8013da2:	4618      	mov	r0, r3
 8013da4:	370c      	adds	r7, #12
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr
	...

08013db0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
    {
 8013db8:	4a04      	ldr	r2, [pc, #16]	; (8013dcc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	601a      	str	r2, [r3, #0]
    }
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	370c      	adds	r7, #12
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr
 8013dcc:	08027f28 	.word	0x08027f28

08013dd0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
    }
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f7ff ffe9 	bl	8013db0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013dde:	210c      	movs	r1, #12
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f011 f84b 	bl	8024e7c <_ZdlPvj>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	4618      	mov	r0, r3
 8013dea:	3708      	adds	r7, #8
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013dfa:	4a09      	ldr	r2, [pc, #36]	; (8013e20 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	601a      	str	r2, [r3, #0]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	605a      	str	r2, [r3, #4]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	721a      	strb	r2, [r3, #8]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	725a      	strb	r2, [r3, #9]
    {
    }
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	370c      	adds	r7, #12
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr
 8013e20:	08027f28 	.word	0x08027f28

08013e24 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	685a      	ldr	r2, [r3, #4]
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3314      	adds	r3, #20
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	4610      	mov	r0, r2
 8013e3c:	4798      	blx	r3
    }
 8013e3e:	bf00      	nop
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}

08013e46 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013e46:	b580      	push	{r7, lr}
 8013e48:	b082      	sub	sp, #8
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	3328      	adds	r3, #40	; 0x28
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	4610      	mov	r0, r2
 8013e5a:	4798      	blx	r3
    }
 8013e5c:	bf00      	nop
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b085      	sub	sp, #20
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	607a      	str	r2, [r7, #4]
 8013e70:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	430a      	orrs	r2, r1
 8013e84:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e8c:	f023 0107 	bic.w	r1, r3, #7
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	430a      	orrs	r2, r1
 8013e98:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013ea0:	4b06      	ldr	r3, [pc, #24]	; (8013ebc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8013ea2:	4013      	ands	r3, r2
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	6812      	ldr	r2, [r2, #0]
 8013ea8:	6839      	ldr	r1, [r7, #0]
 8013eaa:	430b      	orrs	r3, r1
 8013eac:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8013eae:	2300      	movs	r3, #0
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3714      	adds	r7, #20
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr
 8013ebc:	ffffc000 	.word	0xffffc000

08013ec0 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013ec8:	f7fb fd72 	bl	800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7ff ffa8 	bl	8013e24 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013ed4:	bf00      	nop
 8013ed6:	3708      	adds	r7, #8
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}

08013edc <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
    assert(0);
 8013ee4:	4b02      	ldr	r3, [pc, #8]	; (8013ef0 <DMA2D_XferErrorCallback+0x14>)
 8013ee6:	4a03      	ldr	r2, [pc, #12]	; (8013ef4 <DMA2D_XferErrorCallback+0x18>)
 8013ee8:	213e      	movs	r1, #62	; 0x3e
 8013eea:	4803      	ldr	r0, [pc, #12]	; (8013ef8 <DMA2D_XferErrorCallback+0x1c>)
 8013eec:	f010 fff4 	bl	8024ed8 <__assert_func>
 8013ef0:	08026900 	.word	0x08026900
 8013ef4:	08026904 	.word	0x08026904
 8013ef8:	08026938 	.word	0x08026938

08013efc <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	3318      	adds	r3, #24
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fe ff1d 	bl	8012d48 <_ZN8touchgfx9colortypeC1Ev>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013f18:	b5b0      	push	{r4, r5, r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013f20:	687a      	ldr	r2, [r7, #4]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	330c      	adds	r3, #12
 8013f26:	4619      	mov	r1, r3
 8013f28:	4610      	mov	r0, r2
 8013f2a:	f7ff ff61 	bl	8013df0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013f2e:	4a0e      	ldr	r2, [pc, #56]	; (8013f68 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	601a      	str	r2, [r3, #0]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f103 000c 	add.w	r0, r3, #12
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	3320      	adds	r3, #32
 8013f3e:	2260      	movs	r2, #96	; 0x60
 8013f40:	4619      	mov	r1, r3
 8013f42:	f002 fe1f 	bl	8016b84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	3320      	adds	r3, #32
 8013f4a:	245f      	movs	r4, #95	; 0x5f
 8013f4c:	461d      	mov	r5, r3
 8013f4e:	e004      	b.n	8013f5a <_ZN10STM32F7DMAC1Ev+0x42>
 8013f50:	4628      	mov	r0, r5
 8013f52:	f7ff ffd3 	bl	8013efc <_ZN8touchgfx6BlitOpC1Ev>
 8013f56:	3520      	adds	r5, #32
 8013f58:	3c01      	subs	r4, #1
 8013f5a:	2c00      	cmp	r4, #0
 8013f5c:	daf8      	bge.n	8013f50 <_ZN10STM32F7DMAC1Ev+0x38>
{}
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	4618      	mov	r0, r3
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bdb0      	pop	{r4, r5, r7, pc}
 8013f68:	08026ed0 	.word	0x08026ed0

08013f6c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	4a0b      	ldr	r2, [pc, #44]	; (8013fa4 <_ZN10STM32F7DMAD1Ev+0x38>)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013f7a:	480b      	ldr	r0, [pc, #44]	; (8013fa8 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013f7c:	f7f1 f806 	bl	8004f8c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013f80:	205a      	movs	r0, #90	; 0x5a
 8013f82:	f7ff fe9d 	bl	8013cc0 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	330c      	adds	r3, #12
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f000 faa8 	bl	80144e0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7ff ff0c 	bl	8013db0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3708      	adds	r7, #8
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	08026ed0 	.word	0x08026ed0
 8013fa8:	2000048c 	.word	0x2000048c

08013fac <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
}
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f7ff ffd9 	bl	8013f6c <_ZN10STM32F7DMAD1Ev>
 8013fba:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f010 ff5c 	bl	8024e7c <_ZdlPvj>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3708      	adds	r7, #8
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
	...

08013fd0 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013fd8:	4b09      	ldr	r3, [pc, #36]	; (8014000 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013fda:	4a0a      	ldr	r2, [pc, #40]	; (8014004 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013fdc:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013fde:	4808      	ldr	r0, [pc, #32]	; (8014000 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013fe0:	f7f0 ff8a 	bl	8004ef8 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013fe4:	4b06      	ldr	r3, [pc, #24]	; (8014000 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013fe6:	4a08      	ldr	r2, [pc, #32]	; (8014008 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013fe8:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013fea:	4b05      	ldr	r3, [pc, #20]	; (8014000 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013fec:	4a07      	ldr	r2, [pc, #28]	; (801400c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013fee:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013ff0:	205a      	movs	r0, #90	; 0x5a
 8013ff2:	f7ff fe47 	bl	8013c84 <__NVIC_EnableIRQ>
}
 8013ff6:	bf00      	nop
 8013ff8:	3708      	adds	r7, #8
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	2000048c 	.word	0x2000048c
 8014004:	4002b000 	.word	0x4002b000
 8014008:	08013ec1 	.word	0x08013ec1
 801400c:	08013edd 	.word	0x08013edd

08014010 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8014018:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 801401c:	4618      	mov	r0, r3
 801401e:	370c      	adds	r7, #12
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014028:	b590      	push	{r4, r7, lr}
 801402a:	b08d      	sub	sp, #52	; 0x34
 801402c:	af02      	add	r7, sp, #8
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8014032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014036:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8014038:	2300      	movs	r3, #0
 801403a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014040:	2b20      	cmp	r3, #32
 8014042:	d007      	beq.n	8014054 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	2b40      	cmp	r3, #64	; 0x40
 801404a:	d003      	beq.n	8014054 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	2b04      	cmp	r3, #4
 8014052:	d101      	bne.n	8014058 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8014054:	2301      	movs	r3, #1
 8014056:	e000      	b.n	801405a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8014058:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801405a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014060:	2b80      	cmp	r3, #128	; 0x80
 8014062:	d004      	beq.n	801406e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801406c:	d101      	bne.n	8014072 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801406e:	2301      	movs	r3, #1
 8014070:	e000      	b.n	8014074 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014072:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014074:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014076:	f7fb fca7 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 801407a:	4603      	mov	r3, r0
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	3220      	adds	r2, #32
 8014080:	6812      	ldr	r2, [r2, #0]
 8014082:	4618      	mov	r0, r3
 8014084:	4790      	blx	r2
 8014086:	4603      	mov	r3, r0
 8014088:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014092:	d012      	beq.n	80140ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 8014094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014098:	d820      	bhi.n	80140dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 801409a:	2b80      	cmp	r3, #128	; 0x80
 801409c:	d00a      	beq.n	80140b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 801409e:	2b80      	cmp	r3, #128	; 0x80
 80140a0:	d81c      	bhi.n	80140dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80140a2:	2b40      	cmp	r3, #64	; 0x40
 80140a4:	d017      	beq.n	80140d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80140a6:	2b40      	cmp	r3, #64	; 0x40
 80140a8:	d818      	bhi.n	80140dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80140aa:	2b04      	cmp	r3, #4
 80140ac:	d008      	beq.n	80140c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 80140ae:	2b20      	cmp	r3, #32
 80140b0:	d011      	beq.n	80140d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80140b2:	e013      	b.n	80140dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80140b4:	230a      	movs	r3, #10
 80140b6:	623b      	str	r3, [r7, #32]
        break;
 80140b8:	e01a      	b.n	80140f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80140ba:	2309      	movs	r3, #9
 80140bc:	623b      	str	r3, [r7, #32]
        break;
 80140be:	e017      	b.n	80140f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80140c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80140c4:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80140c6:	7f7b      	ldrb	r3, [r7, #29]
 80140c8:	2b10      	cmp	r3, #16
 80140ca:	d101      	bne.n	80140d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80140cc:	2302      	movs	r3, #2
 80140ce:	e000      	b.n	80140d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 80140d0:	2301      	movs	r3, #1
 80140d2:	623b      	str	r3, [r7, #32]
        break;
 80140d4:	e00c      	b.n	80140f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80140d6:	2300      	movs	r3, #0
 80140d8:	623b      	str	r3, [r7, #32]
        break;
 80140da:	e009      	b.n	80140f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80140dc:	2300      	movs	r3, #0
 80140de:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80140e0:	7f7b      	ldrb	r3, [r7, #29]
 80140e2:	2b10      	cmp	r3, #16
 80140e4:	d101      	bne.n	80140ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 80140e6:	2302      	movs	r3, #2
 80140e8:	e000      	b.n	80140ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 80140ea:	2301      	movs	r3, #1
 80140ec:	623b      	str	r3, [r7, #32]
        break;
 80140ee:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80140f0:	4a77      	ldr	r2, [pc, #476]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80140f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80140f6:	7f7b      	ldrb	r3, [r7, #29]
 80140f8:	2b10      	cmp	r3, #16
 80140fa:	d101      	bne.n	8014100 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 80140fc:	2302      	movs	r3, #2
 80140fe:	e000      	b.n	8014102 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 8014100:	2301      	movs	r3, #1
 8014102:	4a73      	ldr	r2, [pc, #460]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014104:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014106:	683b      	ldr	r3, [r7, #0]
 8014108:	8adb      	ldrh	r3, [r3, #22]
 801410a:	461a      	mov	r2, r3
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	8a1b      	ldrh	r3, [r3, #16]
 8014110:	1ad3      	subs	r3, r2, r3
 8014112:	461a      	mov	r2, r3
 8014114:	4b6e      	ldr	r3, [pc, #440]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014116:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014118:	7f7b      	ldrb	r3, [r7, #29]
 801411a:	2b10      	cmp	r3, #16
 801411c:	d101      	bne.n	8014122 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 801411e:	2202      	movs	r2, #2
 8014120:	e000      	b.n	8014124 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 8014122:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	8adb      	ldrh	r3, [r3, #22]
 8014128:	4619      	mov	r1, r3
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	8a1b      	ldrh	r3, [r3, #16]
 801412e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014132:	4867      	ldr	r0, [pc, #412]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014134:	f7ff fe96 	bl	8013e64 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014138:	4a65      	ldr	r2, [pc, #404]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801413a:	6a3b      	ldr	r3, [r7, #32]
 801413c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	8a9b      	ldrh	r3, [r3, #20]
 8014142:	461a      	mov	r2, r3
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	8a1b      	ldrh	r3, [r3, #16]
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	461a      	mov	r2, r3
 801414c:	4b60      	ldr	r3, [pc, #384]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801414e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014150:	7ffb      	ldrb	r3, [r7, #31]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d103      	bne.n	801415e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8014156:	7fbb      	ldrb	r3, [r7, #30]
 8014158:	2b00      	cmp	r3, #0
 801415a:	f000 8084 	beq.w	8014266 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
    {
        if (blitOp.alpha < 255)
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	7f1b      	ldrb	r3, [r3, #28]
 8014162:	2bff      	cmp	r3, #255	; 0xff
 8014164:	d008      	beq.n	8014178 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8014166:	4b5a      	ldr	r3, [pc, #360]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014168:	2202      	movs	r2, #2
 801416a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	7f1b      	ldrb	r3, [r3, #28]
 8014170:	461a      	mov	r2, r3
 8014172:	4b57      	ldr	r3, [pc, #348]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014174:	635a      	str	r2, [r3, #52]	; 0x34
 8014176:	e002      	b.n	801417e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014178:	4b55      	ldr	r3, [pc, #340]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801417a:	2200      	movs	r2, #0
 801417c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801417e:	7fbb      	ldrb	r3, [r7, #30]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d05b      	beq.n	801423c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
        {
            if (bitDepth == 16)
 8014184:	7f7b      	ldrb	r3, [r7, #29]
 8014186:	2b10      	cmp	r3, #16
 8014188:	d14c      	bne.n	8014224 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	3318      	adds	r3, #24
 801418e:	4618      	mov	r0, r3
 8014190:	f7ff fdc6 	bl	8013d20 <_ZNK8touchgfx9colortypecvtEv>
 8014194:	4603      	mov	r3, r0
 8014196:	0adb      	lsrs	r3, r3, #11
 8014198:	b29b      	uxth	r3, r3
 801419a:	f003 021f 	and.w	r2, r3, #31
 801419e:	4613      	mov	r3, r2
 80141a0:	021b      	lsls	r3, r3, #8
 80141a2:	1a9b      	subs	r3, r3, r2
 80141a4:	4a4b      	ldr	r2, [pc, #300]	; (80142d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80141a6:	fb82 1203 	smull	r1, r2, r2, r3
 80141aa:	441a      	add	r2, r3
 80141ac:	1112      	asrs	r2, r2, #4
 80141ae:	17db      	asrs	r3, r3, #31
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	3318      	adds	r3, #24
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7ff fdb1 	bl	8013d20 <_ZNK8touchgfx9colortypecvtEv>
 80141be:	4603      	mov	r3, r0
 80141c0:	095b      	lsrs	r3, r3, #5
 80141c2:	b29b      	uxth	r3, r3
 80141c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80141c8:	4613      	mov	r3, r2
 80141ca:	021b      	lsls	r3, r3, #8
 80141cc:	1a9b      	subs	r3, r3, r2
 80141ce:	4a42      	ldr	r2, [pc, #264]	; (80142d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80141d0:	fb82 1203 	smull	r1, r2, r2, r3
 80141d4:	441a      	add	r2, r3
 80141d6:	1152      	asrs	r2, r2, #5
 80141d8:	17db      	asrs	r3, r3, #31
 80141da:	1ad3      	subs	r3, r2, r3
 80141dc:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	3318      	adds	r3, #24
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7ff fd9c 	bl	8013d20 <_ZNK8touchgfx9colortypecvtEv>
 80141e8:	4603      	mov	r3, r0
 80141ea:	f003 021f 	and.w	r2, r3, #31
 80141ee:	4613      	mov	r3, r2
 80141f0:	021b      	lsls	r3, r3, #8
 80141f2:	1a9b      	subs	r3, r3, r2
 80141f4:	4a37      	ldr	r2, [pc, #220]	; (80142d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80141f6:	fb82 1203 	smull	r1, r2, r2, r3
 80141fa:	441a      	add	r2, r3
 80141fc:	1112      	asrs	r2, r2, #4
 80141fe:	17db      	asrs	r3, r3, #31
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	7f1b      	ldrb	r3, [r3, #28]
 8014208:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	061a      	lsls	r2, r3, #24
 801420e:	69bb      	ldr	r3, [r7, #24]
 8014210:	041b      	lsls	r3, r3, #16
 8014212:	431a      	orrs	r2, r3
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	021b      	lsls	r3, r3, #8
 8014218:	431a      	orrs	r2, r3
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	4313      	orrs	r3, r2
 801421e:	4a2c      	ldr	r2, [pc, #176]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014220:	6353      	str	r3, [r2, #52]	; 0x34
 8014222:	e00b      	b.n	801423c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	3318      	adds	r3, #24
 8014228:	4618      	mov	r0, r3
 801422a:	f7ff fd6d 	bl	8013d08 <_ZNK8touchgfx9colortype10getColor32Ev>
 801422e:	4602      	mov	r2, r0
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	7f1b      	ldrb	r3, [r3, #28]
 8014234:	061b      	lsls	r3, r3, #24
 8014236:	4313      	orrs	r3, r2
 8014238:	4a25      	ldr	r2, [pc, #148]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801423a:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	8adb      	ldrh	r3, [r3, #22]
 8014240:	461a      	mov	r2, r3
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	8a1b      	ldrh	r3, [r3, #16]
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	461a      	mov	r2, r3
 801424a:	4b21      	ldr	r3, [pc, #132]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801424c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801424e:	7f7b      	ldrb	r3, [r7, #29]
 8014250:	2b10      	cmp	r3, #16
 8014252:	d101      	bne.n	8014258 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 8014254:	2302      	movs	r3, #2
 8014256:	e000      	b.n	801425a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 8014258:	2301      	movs	r3, #1
 801425a:	4a1d      	ldr	r2, [pc, #116]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801425c:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801425e:	2100      	movs	r1, #0
 8014260:	481b      	ldr	r0, [pc, #108]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014262:	f7f1 f913 	bl	800548c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014266:	2101      	movs	r1, #1
 8014268:	4819      	ldr	r0, [pc, #100]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801426a:	f7f1 f90f 	bl	800548c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801426e:	7ffb      	ldrb	r3, [r7, #31]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d102      	bne.n	801427a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 8014274:	7fbb      	ldrb	r3, [r7, #30]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d015      	beq.n	80142a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801427e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014284:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801428a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014290:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014296:	9301      	str	r3, [sp, #4]
 8014298:	9200      	str	r2, [sp, #0]
 801429a:	4623      	mov	r3, r4
 801429c:	4602      	mov	r2, r0
 801429e:	480c      	ldr	r0, [pc, #48]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80142a0:	f7f0 ff17 	bl	80050d2 <HAL_DMA2D_BlendingStart_IT>
 80142a4:	e010      	b.n	80142c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80142aa:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80142b0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80142b6:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80142bc:	9300      	str	r3, [sp, #0]
 80142be:	4603      	mov	r3, r0
 80142c0:	4803      	ldr	r0, [pc, #12]	; (80142d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80142c2:	f7f0 fed3 	bl	800506c <HAL_DMA2D_Start_IT>
    }
}
 80142c6:	bf00      	nop
 80142c8:	bf00      	nop
 80142ca:	372c      	adds	r7, #44	; 0x2c
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd90      	pop	{r4, r7, pc}
 80142d0:	2000048c 	.word	0x2000048c
 80142d4:	84210843 	.word	0x84210843
 80142d8:	82082083 	.word	0x82082083

080142dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80142dc:	b590      	push	{r4, r7, lr}
 80142de:	b08d      	sub	sp, #52	; 0x34
 80142e0:	af02      	add	r7, sp, #8
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80142e6:	f7fb fb6f 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 80142ea:	4603      	mov	r3, r0
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	3220      	adds	r2, #32
 80142f0:	6812      	ldr	r2, [r2, #0]
 80142f2:	4618      	mov	r0, r3
 80142f4:	4790      	blx	r2
 80142f6:	4603      	mov	r3, r0
 80142f8:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80142fa:	7ffb      	ldrb	r3, [r7, #31]
 80142fc:	2b10      	cmp	r3, #16
 80142fe:	d101      	bne.n	8014304 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8014300:	2302      	movs	r3, #2
 8014302:	e000      	b.n	8014306 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014304:	2301      	movs	r3, #1
 8014306:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8014308:	2300      	movs	r3, #0
 801430a:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 801430c:	7ffb      	ldrb	r3, [r7, #31]
 801430e:	2b10      	cmp	r3, #16
 8014310:	d14b      	bne.n	80143aa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	3318      	adds	r3, #24
 8014316:	4618      	mov	r0, r3
 8014318:	f7ff fd02 	bl	8013d20 <_ZNK8touchgfx9colortypecvtEv>
 801431c:	4603      	mov	r3, r0
 801431e:	0adb      	lsrs	r3, r3, #11
 8014320:	b29b      	uxth	r3, r3
 8014322:	f003 021f 	and.w	r2, r3, #31
 8014326:	4613      	mov	r3, r2
 8014328:	021b      	lsls	r3, r3, #8
 801432a:	1a9b      	subs	r3, r3, r2
 801432c:	4a69      	ldr	r2, [pc, #420]	; (80144d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801432e:	fb82 1203 	smull	r1, r2, r2, r3
 8014332:	441a      	add	r2, r3
 8014334:	1112      	asrs	r2, r2, #4
 8014336:	17db      	asrs	r3, r3, #31
 8014338:	1ad3      	subs	r3, r2, r3
 801433a:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	3318      	adds	r3, #24
 8014340:	4618      	mov	r0, r3
 8014342:	f7ff fced 	bl	8013d20 <_ZNK8touchgfx9colortypecvtEv>
 8014346:	4603      	mov	r3, r0
 8014348:	095b      	lsrs	r3, r3, #5
 801434a:	b29b      	uxth	r3, r3
 801434c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014350:	4613      	mov	r3, r2
 8014352:	021b      	lsls	r3, r3, #8
 8014354:	1a9b      	subs	r3, r3, r2
 8014356:	4a60      	ldr	r2, [pc, #384]	; (80144d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014358:	fb82 1203 	smull	r1, r2, r2, r3
 801435c:	441a      	add	r2, r3
 801435e:	1152      	asrs	r2, r2, #5
 8014360:	17db      	asrs	r3, r3, #31
 8014362:	1ad3      	subs	r3, r2, r3
 8014364:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	3318      	adds	r3, #24
 801436a:	4618      	mov	r0, r3
 801436c:	f7ff fcd8 	bl	8013d20 <_ZNK8touchgfx9colortypecvtEv>
 8014370:	4603      	mov	r3, r0
 8014372:	f003 021f 	and.w	r2, r3, #31
 8014376:	4613      	mov	r3, r2
 8014378:	021b      	lsls	r3, r3, #8
 801437a:	1a9b      	subs	r3, r3, r2
 801437c:	4a55      	ldr	r2, [pc, #340]	; (80144d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801437e:	fb82 1203 	smull	r1, r2, r2, r3
 8014382:	441a      	add	r2, r3
 8014384:	1112      	asrs	r2, r2, #4
 8014386:	17db      	asrs	r3, r3, #31
 8014388:	1ad3      	subs	r3, r2, r3
 801438a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	7f1b      	ldrb	r3, [r3, #28]
 8014390:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	061a      	lsls	r2, r3, #24
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	041b      	lsls	r3, r3, #16
 801439a:	431a      	orrs	r2, r3
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	021b      	lsls	r3, r3, #8
 80143a0:	4313      	orrs	r3, r2
 80143a2:	68fa      	ldr	r2, [r7, #12]
 80143a4:	4313      	orrs	r3, r2
 80143a6:	623b      	str	r3, [r7, #32]
 80143a8:	e00b      	b.n	80143c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	7f1b      	ldrb	r3, [r3, #28]
 80143ae:	061b      	lsls	r3, r3, #24
 80143b0:	461c      	mov	r4, r3
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	3318      	adds	r3, #24
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7ff fca6 	bl	8013d08 <_ZNK8touchgfx9colortype10getColor32Ev>
 80143bc:	4603      	mov	r3, r0
 80143be:	4323      	orrs	r3, r4
 80143c0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2b08      	cmp	r3, #8
 80143c8:	d103      	bne.n	80143d2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80143ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80143ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80143d0:	e003      	b.n	80143da <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80143d2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80143d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80143d8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80143da:	4a40      	ldr	r2, [pc, #256]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80143dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143de:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80143e0:	7ffb      	ldrb	r3, [r7, #31]
 80143e2:	2b10      	cmp	r3, #16
 80143e4:	d101      	bne.n	80143ea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
 80143e6:	2302      	movs	r3, #2
 80143e8:	e000      	b.n	80143ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 80143ea:	2301      	movs	r3, #1
 80143ec:	4a3b      	ldr	r2, [pc, #236]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80143ee:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	8adb      	ldrh	r3, [r3, #22]
 80143f4:	461a      	mov	r2, r3
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	8a1b      	ldrh	r3, [r3, #16]
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	461a      	mov	r2, r3
 80143fe:	4b37      	ldr	r3, [pc, #220]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014400:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014402:	7ffb      	ldrb	r3, [r7, #31]
 8014404:	2b10      	cmp	r3, #16
 8014406:	d101      	bne.n	801440c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x130>
 8014408:	2202      	movs	r2, #2
 801440a:	e000      	b.n	801440e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x132>
 801440c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	8adb      	ldrh	r3, [r3, #22]
 8014412:	4619      	mov	r1, r3
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	8a1b      	ldrh	r3, [r3, #16]
 8014418:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801441a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801441c:	482f      	ldr	r0, [pc, #188]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801441e:	f7ff fd21 	bl	8013e64 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014428:	d11e      	bne.n	8014468 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18c>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801442a:	4b2c      	ldr	r3, [pc, #176]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801442c:	2201      	movs	r2, #1
 801442e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014430:	4a2a      	ldr	r2, [pc, #168]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014432:	6a3b      	ldr	r3, [r7, #32]
 8014434:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014436:	4b29      	ldr	r3, [pc, #164]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014438:	2209      	movs	r2, #9
 801443a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	8adb      	ldrh	r3, [r3, #22]
 8014440:	461a      	mov	r2, r3
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	8a1b      	ldrh	r3, [r3, #16]
 8014446:	1ad3      	subs	r3, r2, r3
 8014448:	461a      	mov	r2, r3
 801444a:	4b24      	ldr	r3, [pc, #144]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801444c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801444e:	7ffb      	ldrb	r3, [r7, #31]
 8014450:	2b10      	cmp	r3, #16
 8014452:	d101      	bne.n	8014458 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17c>
 8014454:	2302      	movs	r3, #2
 8014456:	e000      	b.n	801445a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17e>
 8014458:	2301      	movs	r3, #1
 801445a:	4a20      	ldr	r2, [pc, #128]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801445c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801445e:	2100      	movs	r1, #0
 8014460:	481e      	ldr	r0, [pc, #120]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014462:	f7f1 f813 	bl	800548c <HAL_DMA2D_ConfigLayer>
 8014466:	e005      	b.n	8014474 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x198>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014468:	4a1c      	ldr	r2, [pc, #112]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801446a:	69bb      	ldr	r3, [r7, #24]
 801446c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801446e:	4b1b      	ldr	r3, [pc, #108]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014470:	2200      	movs	r2, #0
 8014472:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014474:	2101      	movs	r1, #1
 8014476:	4819      	ldr	r0, [pc, #100]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014478:	f7f1 f808 	bl	800548c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014482:	d115      	bne.n	80144b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d4>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014484:	683b      	ldr	r3, [r7, #0]
 8014486:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014488:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801448e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014494:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801449a:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80144a0:	9301      	str	r3, [sp, #4]
 80144a2:	9200      	str	r2, [sp, #0]
 80144a4:	4623      	mov	r3, r4
 80144a6:	4602      	mov	r2, r0
 80144a8:	480c      	ldr	r0, [pc, #48]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80144aa:	f7f0 fe12 	bl	80050d2 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80144ae:	e00d      	b.n	80144cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f0>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80144ba:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80144bc:	683b      	ldr	r3, [r7, #0]
 80144be:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80144c0:	9300      	str	r3, [sp, #0]
 80144c2:	460b      	mov	r3, r1
 80144c4:	6a39      	ldr	r1, [r7, #32]
 80144c6:	4805      	ldr	r0, [pc, #20]	; (80144dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80144c8:	f7f0 fdd0 	bl	800506c <HAL_DMA2D_Start_IT>
}
 80144cc:	bf00      	nop
 80144ce:	372c      	adds	r7, #44	; 0x2c
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd90      	pop	{r4, r7, pc}
 80144d4:	84210843 	.word	0x84210843
 80144d8:	82082083 	.word	0x82082083
 80144dc:	2000048c 	.word	0x2000048c

080144e0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	4a05      	ldr	r2, [pc, #20]	; (8014500 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	601a      	str	r2, [r3, #0]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7ff fc23 	bl	8013d3c <_ZN8touchgfx9DMA_QueueD1Ev>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	08027f78 	.word	0x08027f78

08014504 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7ff ffe7 	bl	80144e0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014512:	2114      	movs	r1, #20
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f010 fcb1 	bl	8024e7c <_ZdlPvj>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	4618      	mov	r0, r3
 801451e:	3708      	adds	r7, #8
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}

08014524 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
        texts = t;
 801452c:	4a04      	ldr	r2, [pc, #16]	; (8014540 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6013      	str	r3, [r2, #0]
    }
 8014532:	bf00      	nop
 8014534:	370c      	adds	r7, #12
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop
 8014540:	2000c5a4 	.word	0x2000c5a4

08014544 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014544:	b480      	push	{r7}
 8014546:	b085      	sub	sp, #20
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8014552:	4a0b      	ldr	r2, [pc, #44]	; (8014580 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	601a      	str	r2, [r3, #0]
            MVPApplication& app) : presenterStorage(pres),
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68ba      	ldr	r2, [r7, #8]
 801455c:	605a      	str	r2, [r3, #4]
        screenStorage(scr),
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	609a      	str	r2, [r3, #8]
        transitionStorage(tra),
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	60da      	str	r2, [r3, #12]
        frontendApplication(app)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	69ba      	ldr	r2, [r7, #24]
 801456e:	611a      	str	r2, [r3, #16]
    {
    }
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	4618      	mov	r0, r3
 8014574:	3714      	adds	r7, #20
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr
 801457e:	bf00      	nop
 8014580:	08027008 	.word	0x08027008

08014584 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
    {
 801458c:	4a04      	ldr	r2, [pc, #16]	; (80145a0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	601a      	str	r2, [r3, #0]
    }
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	4618      	mov	r0, r3
 8014596:	370c      	adds	r7, #12
 8014598:	46bd      	mov	sp, r7
 801459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459e:	4770      	bx	lr
 80145a0:	08027008 	.word	0x08027008

080145a4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
    }
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7ff ffe9 	bl	8014584 <_ZN8touchgfx7MVPHeapD1Ev>
 80145b2:	2114      	movs	r1, #20
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f010 fc61 	bl	8024e7c <_ZdlPvj>
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	4618      	mov	r0, r3
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 80145c4:	b480      	push	{r7}
 80145c6:	b083      	sub	sp, #12
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
    {
 80145cc:	4a04      	ldr	r2, [pc, #16]	; (80145e0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	601a      	str	r2, [r3, #0]
    }
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	4618      	mov	r0, r3
 80145d6:	370c      	adds	r7, #12
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	0802885c 	.word	0x0802885c

080145e4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
    }
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f7ff ffe9 	bl	80145c4 <_ZN8touchgfx3LCDD1Ev>
 80145f2:	2108      	movs	r1, #8
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f010 fc41 	bl	8024e7c <_ZdlPvj>
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4618      	mov	r0, r3
 80145fe:	3708      	adds	r7, #8
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8014604:	b480      	push	{r7}
 8014606:	b083      	sub	sp, #12
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2200      	movs	r2, #0
 8014610:	801a      	strh	r2, [r3, #0]
            startY(0),
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2200      	movs	r2, #0
 8014616:	805a      	strh	r2, [r3, #2]
            downX(0),
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	809a      	strh	r2, [r3, #4]
            downY(0),
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2200      	movs	r2, #0
 8014622:	80da      	strh	r2, [r3, #6]
            tickCount(0),
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2200      	movs	r2, #0
 8014628:	811a      	strh	r2, [r3, #8]
            velocityX(0),
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2200      	movs	r2, #0
 801462e:	815a      	strh	r2, [r3, #10]
            velocityY(0),
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2200      	movs	r2, #0
 8014634:	819a      	strh	r2, [r3, #12]
            inProgress(false)
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2200      	movs	r2, #0
 801463a:	739a      	strb	r2, [r3, #14]
        {
        }
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	4618      	mov	r0, r3
 8014640:	370c      	adds	r7, #12
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr

0801464a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801464a:	b580      	push	{r7, lr}
 801464c:	b082      	sub	sp, #8
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	f7ff ffd5 	bl	8014604 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2200      	movs	r2, #0
 801465e:	611a      	str	r2, [r3, #16]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2200      	movs	r2, #0
 8014664:	829a      	strh	r2, [r3, #20]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	4618      	mov	r0, r3
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8014670:	b580      	push	{r7, lr}
 8014672:	b084      	sub	sp, #16
 8014674:	af00      	add	r7, sp, #0
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
 801467c:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801467e:	4a44      	ldr	r2, [pc, #272]	; (8014790 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	601a      	str	r2, [r3, #0]
        dma(dmaInterface),
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	68ba      	ldr	r2, [r7, #8]
 8014688:	605a      	str	r2, [r3, #4]
        lcdRef(display),
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	609a      	str	r2, [r3, #8]
        touchController(touchCtrl),
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	683a      	ldr	r2, [r7, #0]
 8014694:	60da      	str	r2, [r3, #12]
        mcuInstrumentation(0),
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	2200      	movs	r2, #0
 801469a:	611a      	str	r2, [r3, #16]
        buttonController(0),
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2200      	movs	r2, #0
 80146a0:	615a      	str	r2, [r3, #20]
        frameBufferAllocator(0),
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	2200      	movs	r2, #0
 80146a6:	619a      	str	r2, [r3, #24]
        displayOrientationChangeRequested(false)
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	331c      	adds	r3, #28
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7ff ffcc 	bl	801464a <_ZN8touchgfx8GesturesC1Ev>
        taskDelayFunc(0),
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2200      	movs	r2, #0
 80146b6:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer0(0),
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2200      	movs	r2, #0
 80146bc:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1(0),
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	2200      	movs	r2, #0
 80146c2:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2(0),
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2200      	movs	r2, #0
 80146c8:	645a      	str	r2, [r3, #68]	; 0x44
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	2200      	movs	r2, #0
 80146ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        fingerSize(1),
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2201      	movs	r2, #1
 80146d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        lockDMAToPorch(true),
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	2201      	movs	r2, #1
 80146de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        auxiliaryLCD(0),
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2200      	movs	r2, #0
 80146e6:	64da      	str	r2, [r3, #76]	; 0x4c
        displayOrientationChangeRequested(false)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	3350      	adds	r3, #80	; 0x50
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7fb fd88 	bl	8010202 <_ZN8touchgfx4RectC1Ev>
        touchSampleRate(1),
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2201      	movs	r2, #1
 80146f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        mcuLoadPct(0),
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2200      	movs	r2, #0
 80146fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        vSyncCnt(0),
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2200      	movs	r2, #0
 8014706:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        vSyncForFrame(1),
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	2201      	movs	r2, #1
 801470e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        vSyncCompensationEnabled(false),
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2200      	movs	r2, #0
 8014716:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        clientDirty(false),
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	2200      	movs	r2, #0
 801471e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        swapRequested(false),
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2200      	movs	r2, #0
 8014726:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        lastTouched(false),
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2200      	movs	r2, #0
 801472e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        updateMCULoad(0),
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2200      	movs	r2, #0
 8014736:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        cc_begin(0),
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2200      	movs	r2, #0
 801473e:	671a      	str	r2, [r3, #112]	; 0x70
        displayOrientationChangeRequested(false)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2200      	movs	r2, #0
 8014744:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014748:	4a12      	ldr	r2, [pc, #72]	; (8014794 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801474e:	4a12      	ldr	r2, [pc, #72]	; (8014798 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014750:	8b3b      	ldrh	r3, [r7, #24]
 8014752:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014754:	4a11      	ldr	r2, [pc, #68]	; (801479c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014756:	8bbb      	ldrh	r3, [r7, #28]
 8014758:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801475a:	4b11      	ldr	r3, [pc, #68]	; (80147a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 801475c:	2200      	movs	r2, #0
 801475e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014760:	4b0d      	ldr	r3, [pc, #52]	; (8014798 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014762:	881a      	ldrh	r2, [r3, #0]
 8014764:	4b0f      	ldr	r3, [pc, #60]	; (80147a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014766:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014768:	4b0c      	ldr	r3, [pc, #48]	; (801479c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801476a:	881a      	ldrh	r2, [r3, #0]
 801476c:	4b0e      	ldr	r3, [pc, #56]	; (80147a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801476e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014770:	8b3a      	ldrh	r2, [r7, #24]
 8014772:	8bbb      	ldrh	r3, [r7, #28]
 8014774:	429a      	cmp	r2, r3
 8014776:	bf34      	ite	cc
 8014778:	2301      	movcc	r3, #1
 801477a:	2300      	movcs	r3, #0
 801477c:	b2db      	uxtb	r3, r3
 801477e:	461a      	mov	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	4618      	mov	r0, r3
 801478a:	3710      	adds	r7, #16
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}
 8014790:	08027ae4 	.word	0x08027ae4
 8014794:	2000c508 	.word	0x2000c508
 8014798:	2000c4fc 	.word	0x2000c4fc
 801479c:	2000c4fe 	.word	0x2000c4fe
 80147a0:	2000c500 	.word	0x2000c500
 80147a4:	2000c502 	.word	0x2000c502
 80147a8:	2000c504 	.word	0x2000c504

080147ac <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7fb fb29 	bl	800fe10 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80147be:	bf00      	nop
 80147c0:	3708      	adds	r7, #8
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
	...

080147c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b086      	sub	sp, #24
 80147cc:	af02      	add	r7, sp, #8
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	607a      	str	r2, [r7, #4]
 80147d4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80147d6:	68f8      	ldr	r0, [r7, #12]
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	9300      	str	r3, [sp, #0]
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	68b9      	ldr	r1, [r7, #8]
 80147e2:	f7ff feaf 	bl	8014544 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80147e6:	4a04      	ldr	r2, [pc, #16]	; (80147f8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	601a      	str	r2, [r3, #0]
    {

    }
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	4618      	mov	r0, r3
 80147f0:	3710      	adds	r7, #16
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	08026ff4 	.word	0x08026ff4

080147fc <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80147fc:	b580      	push	{r7, lr}
 80147fe:	af00      	add	r7, sp, #0
 8014800:	4801      	ldr	r0, [pc, #4]	; (8014808 <__tcf_0+0xc>)
 8014802:	f000 f9ef 	bl	8014be4 <_ZN12FrontendHeapD1Ev>
 8014806:	bd80      	pop	{r7, pc}
 8014808:	20008ea4 	.word	0x20008ea4

0801480c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801480c:	b580      	push	{r7, lr}
 801480e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014810:	4b11      	ldr	r3, [pc, #68]	; (8014858 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	f3bf 8f5b 	dmb	ish
 8014818:	f003 0301 	and.w	r3, r3, #1
 801481c:	2b00      	cmp	r3, #0
 801481e:	bf0c      	ite	eq
 8014820:	2301      	moveq	r3, #1
 8014822:	2300      	movne	r3, #0
 8014824:	b2db      	uxtb	r3, r3
 8014826:	2b00      	cmp	r3, #0
 8014828:	d013      	beq.n	8014852 <_ZN12FrontendHeap11getInstanceEv+0x46>
 801482a:	480b      	ldr	r0, [pc, #44]	; (8014858 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801482c:	f010 fb28 	bl	8024e80 <__cxa_guard_acquire>
 8014830:	4603      	mov	r3, r0
 8014832:	2b00      	cmp	r3, #0
 8014834:	bf14      	ite	ne
 8014836:	2301      	movne	r3, #1
 8014838:	2300      	moveq	r3, #0
 801483a:	b2db      	uxtb	r3, r3
 801483c:	2b00      	cmp	r3, #0
 801483e:	d008      	beq.n	8014852 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8014840:	4806      	ldr	r0, [pc, #24]	; (801485c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014842:	f000 f831 	bl	80148a8 <_ZN12FrontendHeapC1Ev>
 8014846:	4806      	ldr	r0, [pc, #24]	; (8014860 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8014848:	f010 fb64 	bl	8024f14 <atexit>
 801484c:	4802      	ldr	r0, [pc, #8]	; (8014858 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801484e:	f010 fb23 	bl	8024e98 <__cxa_guard_release>
        return instance;
 8014852:	4b02      	ldr	r3, [pc, #8]	; (801485c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8014854:	4618      	mov	r0, r3
 8014856:	bd80      	pop	{r7, pc}
 8014858:	2000b7fc 	.word	0x2000b7fc
 801485c:	20008ea4 	.word	0x20008ea4
 8014860:	080147fd 	.word	0x080147fd

08014864 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	4a05      	ldr	r2, [pc, #20]	; (8014884 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	601a      	str	r2, [r3, #0]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	4618      	mov	r0, r3
 8014876:	f7ff fe85 	bl	8014584 <_ZN8touchgfx7MVPHeapD1Ev>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	4618      	mov	r0, r3
 801487e:	3708      	adds	r7, #8
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}
 8014884:	08026ff4 	.word	0x08026ff4

08014888 <_ZN16FrontendHeapBaseD0Ev>:
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f7ff ffe7 	bl	8014864 <_ZN16FrontendHeapBaseD1Ev>
 8014896:	2114      	movs	r1, #20
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f010 faef 	bl	8024e7c <_ZdlPvj>
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	4618      	mov	r0, r3
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80148a8:	b5b0      	push	{r4, r5, r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af02      	add	r7, sp, #8
 80148ae:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f103 0414 	add.w	r4, r3, #20
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f242 72f0 	movw	r2, #10224	; 0x27f0
 80148c4:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	f642 0304 	movw	r3, #10244	; 0x2804
 80148cc:	440b      	add	r3, r1
        app(model, *this)
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	4613      	mov	r3, r2
 80148d2:	462a      	mov	r2, r5
 80148d4:	4621      	mov	r1, r4
 80148d6:	f7ff ff77 	bl	80147c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80148da:	4a1a      	ldr	r2, [pc, #104]	; (8014944 <_ZN12FrontendHeapC1Ev+0x9c>)
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	601a      	str	r2, [r3, #0]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	3314      	adds	r3, #20
 80148e4:	4618      	mov	r0, r3
 80148e6:	f000 f8df 	bl	8014aa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	332c      	adds	r3, #44	; 0x2c
 80148ee:	4618      	mov	r0, r3
 80148f0:	f000 f90e 	bl	8014b10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	f242 73f0 	movw	r3, #10224	; 0x27f0
 80148fa:	4413      	add	r3, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f000 f93d 	bl	8014b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	f642 0304 	movw	r3, #10244	; 0x2804
 8014908:	4413      	add	r3, r2
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	f642 1154 	movw	r1, #10580	; 0x2954
 8014910:	4411      	add	r1, r2
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	f7fe f8e5 	bl	8012ae4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	f642 1354 	movw	r3, #10580	; 0x2954
 8014920:	4413      	add	r3, r2
 8014922:	4618      	mov	r0, r3
 8014924:	f7fe fdde 	bl	80134e4 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	f642 0304 	movw	r3, #10244	; 0x2804
 8014930:	4413      	add	r3, r2
 8014932:	4619      	mov	r1, r3
 8014934:	f7ff ff3a 	bl	80147ac <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	4618      	mov	r0, r3
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bdb0      	pop	{r4, r5, r7, pc}
 8014942:	bf00      	nop
 8014944:	08026f44 	.word	0x08026f44

08014948 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
    {
 8014950:	4a05      	ldr	r2, [pc, #20]	; (8014968 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	f7ff fe33 	bl	80145c4 <_ZN8touchgfx3LCDD1Ev>
    }
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4618      	mov	r0, r3
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	08029c38 	.word	0x08029c38

0801496c <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
    }
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f7ff ffe7 	bl	8014948 <_ZN8touchgfx8LCD24bppD1Ev>
 801497a:	2158      	movs	r1, #88	; 0x58
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f010 fa7d 	bl	8024e7c <_ZdlPvj>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	4618      	mov	r0, r3
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af02      	add	r7, sp, #8
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
 8014998:	603b      	str	r3, [r7, #0]
 801499a:	68f8      	ldr	r0, [r7, #12]
 801499c:	8bbb      	ldrh	r3, [r7, #28]
 801499e:	9301      	str	r3, [sp, #4]
 80149a0:	8b3b      	ldrh	r3, [r7, #24]
 80149a2:	9300      	str	r3, [sp, #0]
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	687a      	ldr	r2, [r7, #4]
 80149a8:	68b9      	ldr	r1, [r7, #8]
 80149aa:	f7ff fe61 	bl	8014670 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80149ae:	4a04      	ldr	r2, [pc, #16]	; (80149c0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	601a      	str	r2, [r3, #0]
    }
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	4618      	mov	r0, r3
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	bf00      	nop
 80149c0:	08027018 	.word	0x08027018

080149c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b086      	sub	sp, #24
 80149c8:	af02      	add	r7, sp, #8
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	607a      	str	r2, [r7, #4]
 80149d0:	603b      	str	r3, [r7, #0]
 80149d2:	68f8      	ldr	r0, [r7, #12]
 80149d4:	8bbb      	ldrh	r3, [r7, #28]
 80149d6:	9301      	str	r3, [sp, #4]
 80149d8:	8b3b      	ldrh	r3, [r7, #24]
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	68b9      	ldr	r1, [r7, #8]
 80149e2:	f7ff ffd3 	bl	801498c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80149e6:	4a04      	ldr	r2, [pc, #16]	; (80149f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	601a      	str	r2, [r3, #0]
    }
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	4618      	mov	r0, r3
 80149f0:	3710      	adds	r7, #16
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	08026e1c 	.word	0x08026e1c

080149fc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80149fc:	b480      	push	{r7}
 80149fe:	b083      	sub	sp, #12
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	4a04      	ldr	r2, [pc, #16]	; (8014a18 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	601a      	str	r2, [r3, #0]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr
 8014a18:	08026e04 	.word	0x08026e04

08014a1c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7ff ffe8 	bl	80149fc <_ZN8touchgfx15TouchControllerC1Ev>
 8014a2c:	4a03      	ldr	r2, [pc, #12]	; (8014a3c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	601a      	str	r2, [r3, #0]
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	4618      	mov	r0, r3
 8014a36:	3708      	adds	r7, #8
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	08026dec 	.word	0x08026dec

08014a40 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014a40:	b590      	push	{r4, r7, lr}
 8014a42:	b085      	sub	sp, #20
 8014a44:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014a46:	f7fd ff29 	bl	801289c <_ZN14BitmapDatabase11getInstanceEv>
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	f7fd ff30 	bl	80128b0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014a50:	4603      	mov	r3, r0
 8014a52:	4619      	mov	r1, r3
 8014a54:	2300      	movs	r3, #0
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	2300      	movs	r3, #0
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f006 fcd5 	bl	801b40c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8014a62:	4809      	ldr	r0, [pc, #36]	; (8014a88 <touchgfx_init+0x48>)
 8014a64:	f7ff fd5e 	bl	8014524 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014a68:	2000      	movs	r0, #0
 8014a6a:	f7fd ff45 	bl	80128f8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014a6e:	4807      	ldr	r0, [pc, #28]	; (8014a8c <touchgfx_init+0x4c>)
 8014a70:	f006 fc1a 	bl	801b2a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014a74:	f7ff feca 	bl	801480c <_ZN12FrontendHeap11getInstanceEv>
 8014a78:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014a7a:	4805      	ldr	r0, [pc, #20]	; (8014a90 <touchgfx_init+0x50>)
 8014a7c:	f7fe ffc2 	bl	8013a04 <_ZN11TouchGFXHAL10initializeEv>
}
 8014a80:	bf00      	nop
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd90      	pop	{r4, r7, pc}
 8014a88:	2000c47c 	.word	0x2000c47c
 8014a8c:	20000054 	.word	0x20000054
 8014a90:	2000c480 	.word	0x2000c480

08014a94 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014a98:	4802      	ldr	r0, [pc, #8]	; (8014aa4 <touchgfx_taskEntry+0x10>)
 8014a9a:	f001 fa00 	bl	8015e9e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8014a9e:	bf00      	nop
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	2000c480 	.word	0x2000c480

08014aa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 fc70 	bl	8015398 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014ab8:	4a03      	ldr	r2, [pc, #12]	; (8014ac8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	601a      	str	r2, [r3, #0]
    {
    }
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	08026fc0 	.word	0x08026fc0

08014acc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
    {
    }
 8014ad4:	4a05      	ldr	r2, [pc, #20]	; (8014aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	601a      	str	r2, [r3, #0]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4618      	mov	r0, r3
 8014ade:	f000 fc59 	bl	8015394 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	08026fc0 	.word	0x08026fc0

08014af0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
    }
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f7ff ffe7 	bl	8014acc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014afe:	2118      	movs	r1, #24
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f010 f9bb 	bl	8024e7c <_ZdlPvj>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f000 fc3c 	bl	8015398 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014b20:	4a03      	ldr	r2, [pc, #12]	; (8014b30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	601a      	str	r2, [r3, #0]
    }
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3708      	adds	r7, #8
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}
 8014b30:	08026f8c 	.word	0x08026f8c

08014b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
    }
 8014b3c:	4a05      	ldr	r2, [pc, #20]	; (8014b54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	601a      	str	r2, [r3, #0]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f000 fc25 	bl	8015394 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3708      	adds	r7, #8
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}
 8014b54:	08026f8c 	.word	0x08026f8c

08014b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
    }
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f7ff ffe7 	bl	8014b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014b66:	f242 71c4 	movw	r1, #10180	; 0x27c4
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f010 f986 	bl	8024e7c <_ZdlPvj>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	4618      	mov	r0, r3
 8014b74:	3708      	adds	r7, #8
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
	...

08014b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f000 fc06 	bl	8015398 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014b8c:	4a03      	ldr	r2, [pc, #12]	; (8014b9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	601a      	str	r2, [r3, #0]
    }
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	4618      	mov	r0, r3
 8014b96:	3708      	adds	r7, #8
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	08026f58 	.word	0x08026f58

08014ba0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
    }
 8014ba8:	4a05      	ldr	r2, [pc, #20]	; (8014bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	601a      	str	r2, [r3, #0]
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f000 fbef 	bl	8015394 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3708      	adds	r7, #8
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}
 8014bc0:	08026f58 	.word	0x08026f58

08014bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
    }
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f7ff ffe7 	bl	8014ba0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014bd2:	2114      	movs	r1, #20
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f010 f951 	bl	8024e7c <_ZdlPvj>
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3708      	adds	r7, #8
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}

08014be4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	4a11      	ldr	r2, [pc, #68]	; (8014c34 <_ZN12FrontendHeapD1Ev+0x50>)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	601a      	str	r2, [r3, #0]
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	f642 0304 	movw	r3, #10244	; 0x2804
 8014bf8:	4413      	add	r3, r2
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fd ff3c 	bl	8012a78 <_ZN19FrontendApplicationD1Ev>
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	f242 73f0 	movw	r3, #10224	; 0x27f0
 8014c06:	4413      	add	r3, r2
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7ff ffc9 	bl	8014ba0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	332c      	adds	r3, #44	; 0x2c
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7ff ff8e 	bl	8014b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3314      	adds	r3, #20
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7ff ff55 	bl	8014acc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7ff fe1d 	bl	8014864 <_ZN16FrontendHeapBaseD1Ev>
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3708      	adds	r7, #8
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	08026f44 	.word	0x08026f44

08014c38 <_ZN12FrontendHeapD0Ev>:
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f7ff ffcf 	bl	8014be4 <_ZN12FrontendHeapD1Ev>
 8014c46:	f642 1158 	movw	r1, #10584	; 0x2958
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f010 f916 	bl	8024e7c <_ZdlPvj>
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	4618      	mov	r0, r3
 8014c54:	3708      	adds	r7, #8
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
	...

08014c5c <_Z41__static_initialization_and_destruction_0ii>:
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b084      	sub	sp, #16
 8014c60:	af02      	add	r7, sp, #8
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	d119      	bne.n	8014ca0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c72:	4293      	cmp	r3, r2
 8014c74:	d114      	bne.n	8014ca0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014c76:	4818      	ldr	r0, [pc, #96]	; (8014cd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014c78:	f7ff fed0 	bl	8014a1c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014c7c:	4817      	ldr	r0, [pc, #92]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014c7e:	f7ff f94b 	bl	8013f18 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8014c82:	4817      	ldr	r0, [pc, #92]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014c84:	f008 fde8 	bl	801d858 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8014c88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014c8c:	9301      	str	r3, [sp, #4]
 8014c8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014c92:	9300      	str	r3, [sp, #0]
 8014c94:	4b10      	ldr	r3, [pc, #64]	; (8014cd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014c96:	4a12      	ldr	r2, [pc, #72]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014c98:	4910      	ldr	r1, [pc, #64]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014c9a:	4812      	ldr	r0, [pc, #72]	; (8014ce4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014c9c:	f7ff fe92 	bl	80149c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d113      	bne.n	8014cce <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d10e      	bne.n	8014cce <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014cb0:	480c      	ldr	r0, [pc, #48]	; (8014ce4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014cb2:	f7fe ff0d 	bl	8013ad0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014cb6:	480c      	ldr	r0, [pc, #48]	; (8014ce8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014cb8:	f7fa f934 	bl	800ef24 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014cbc:	4808      	ldr	r0, [pc, #32]	; (8014ce0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014cbe:	f7ff fe43 	bl	8014948 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8014cc2:	4806      	ldr	r0, [pc, #24]	; (8014cdc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014cc4:	f7ff f952 	bl	8013f6c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014cc8:	4803      	ldr	r0, [pc, #12]	; (8014cd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014cca:	f7fe fca5 	bl	8013618 <_ZN20STM32TouchControllerD1Ev>
}
 8014cce:	bf00      	nop
 8014cd0:	3708      	adds	r7, #8
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	2000b800 	.word	0x2000b800
 8014cdc:	2000b804 	.word	0x2000b804
 8014ce0:	2000c424 	.word	0x2000c424
 8014ce4:	2000c480 	.word	0x2000c480
 8014ce8:	20000054 	.word	0x20000054

08014cec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014cf4:	2301      	movs	r3, #1
    }
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	370c      	adds	r7, #12
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d00:	4770      	bx	lr

08014d02 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8014d02:	b480      	push	{r7}
 8014d04:	b083      	sub	sp, #12
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014d0a:	230c      	movs	r3, #12
    }
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr

08014d18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	460b      	mov	r3, r1
 8014d22:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014d24:	887a      	ldrh	r2, [r7, #2]
 8014d26:	4613      	mov	r3, r2
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	4413      	add	r3, r2
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	3308      	adds	r3, #8
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	4413      	add	r3, r2
    }
 8014d34:	4618      	mov	r0, r3
 8014d36:	370c      	adds	r7, #12
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr

08014d40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8014d40:	b480      	push	{r7}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	460b      	mov	r3, r1
 8014d4a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014d4c:	887a      	ldrh	r2, [r7, #2]
 8014d4e:	4613      	mov	r3, r2
 8014d50:	005b      	lsls	r3, r3, #1
 8014d52:	4413      	add	r3, r2
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	3308      	adds	r3, #8
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	4413      	add	r3, r2
    }
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	370c      	adds	r7, #12
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr

08014d68 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014d68:	b480      	push	{r7}
 8014d6a:	b083      	sub	sp, #12
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014d70:	2301      	movs	r3, #1
    }
 8014d72:	4618      	mov	r0, r3
 8014d74:	370c      	adds	r7, #12
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014d7e:	b480      	push	{r7}
 8014d80:	b083      	sub	sp, #12
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014d86:	f242 73bc 	movw	r3, #10172	; 0x27bc
    }
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	370c      	adds	r7, #12
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr

08014d96 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014d96:	b480      	push	{r7}
 8014d98:	b083      	sub	sp, #12
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	6078      	str	r0, [r7, #4]
 8014d9e:	460b      	mov	r3, r1
 8014da0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014da2:	887b      	ldrh	r3, [r7, #2]
 8014da4:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8014da8:	fb02 f303 	mul.w	r3, r2, r3
 8014dac:	3308      	adds	r3, #8
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	4413      	add	r3, r2
    }
 8014db2:	4618      	mov	r0, r3
 8014db4:	370c      	adds	r7, #12
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014dbe:	b480      	push	{r7}
 8014dc0:	b083      	sub	sp, #12
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014dca:	887b      	ldrh	r3, [r7, #2]
 8014dcc:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8014dd0:	fb02 f303 	mul.w	r3, r2, r3
 8014dd4:	3308      	adds	r3, #8
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	4413      	add	r3, r2
    }
 8014dda:	4618      	mov	r0, r3
 8014ddc:	370c      	adds	r7, #12
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr

08014de6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014de6:	b480      	push	{r7}
 8014de8:	b083      	sub	sp, #12
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014dee:	2301      	movs	r3, #1
    }
 8014df0:	4618      	mov	r0, r3
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014e04:	2310      	movs	r3, #16
    }
 8014e06:	4618      	mov	r0, r3
 8014e08:	370c      	adds	r7, #12
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr

08014e12 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014e12:	b480      	push	{r7}
 8014e14:	b083      	sub	sp, #12
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	6078      	str	r0, [r7, #4]
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014e1e:	887b      	ldrh	r3, [r7, #2]
 8014e20:	011b      	lsls	r3, r3, #4
 8014e22:	3308      	adds	r3, #8
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	4413      	add	r3, r2
    }
 8014e28:	4618      	mov	r0, r3
 8014e2a:	370c      	adds	r7, #12
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e32:	4770      	bx	lr

08014e34 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014e40:	887b      	ldrh	r3, [r7, #2]
 8014e42:	011b      	lsls	r3, r3, #4
 8014e44:	3308      	adds	r3, #8
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	4413      	add	r3, r2
    }
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	370c      	adds	r7, #12
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr

08014e56 <_GLOBAL__sub_I_touchgfx_init>:
 8014e56:	b580      	push	{r7, lr}
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e5e:	2001      	movs	r0, #1
 8014e60:	f7ff fefc 	bl	8014c5c <_Z41__static_initialization_and_destruction_0ii>
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <_GLOBAL__sub_D_touchgfx_init>:
 8014e66:	b580      	push	{r7, lr}
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e6e:	2000      	movs	r0, #0
 8014e70:	f7ff fef4 	bl	8014c5c <_Z41__static_initialization_and_destruction_0ii>
 8014e74:	bd80      	pop	{r7, pc}

08014e76 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014e76:	b580      	push	{r7, lr}
 8014e78:	b082      	sub	sp, #8
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	3318      	adds	r3, #24
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	4798      	blx	r3
    }
 8014e8a:	bf00      	nop
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}

08014e92 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014e92:	b480      	push	{r7}
 8014e94:	b083      	sub	sp, #12
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	6078      	str	r0, [r7, #4]
 8014e9a:	460b      	mov	r3, r1
 8014e9c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	78fa      	ldrb	r2, [r7, #3]
 8014ea2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014ea6:	bf00      	nop
 8014ea8:	370c      	adds	r7, #12
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr

08014eb2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014eb2:	b480      	push	{r7}
 8014eb4:	b083      	sub	sp, #12
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	b2da      	uxtb	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014eca:	bf00      	nop
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr
	...

08014ed8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	460b      	mov	r3, r1
 8014ee2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014ee4:	78fb      	ldrb	r3, [r7, #3]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d002      	beq.n	8014ef0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014eea:	78fb      	ldrb	r3, [r7, #3]
 8014eec:	2b02      	cmp	r3, #2
 8014eee:	d105      	bne.n	8014efc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	78fa      	ldrb	r2, [r7, #3]
 8014ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e027      	b.n	8014f4c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014efc:	78fb      	ldrb	r3, [r7, #3]
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d123      	bne.n	8014f4a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d014      	beq.n	8014f34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	3380      	adds	r3, #128	; 0x80
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	4798      	blx	r3
 8014f16:	4603      	mov	r3, r0
 8014f18:	461a      	mov	r2, r3
 8014f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d008      	beq.n	8014f34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014f22:	4b0c      	ldr	r3, [pc, #48]	; (8014f54 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	f083 0301 	eor.w	r3, r3, #1
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d001      	beq.n	8014f34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014f30:	2301      	movs	r3, #1
 8014f32:	e000      	b.n	8014f36 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014f34:	2300      	movs	r3, #0
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d005      	beq.n	8014f46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	78fa      	ldrb	r2, [r7, #3]
 8014f3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014f42:	2301      	movs	r3, #1
 8014f44:	e002      	b.n	8014f4c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014f46:	2300      	movs	r3, #0
 8014f48:	e000      	b.n	8014f4c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014f4a:	2300      	movs	r3, #0
    }
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	3708      	adds	r7, #8
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	2000c506 	.word	0x2000c506

08014f58 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014f58:	b480      	push	{r7}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	683a      	ldr	r2, [r7, #0]
 8014f66:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014f68:	bf00      	nop
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <__NVIC_EnableIRQ>:
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	db0b      	blt.n	8014f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014f86:	79fb      	ldrb	r3, [r7, #7]
 8014f88:	f003 021f 	and.w	r2, r3, #31
 8014f8c:	4907      	ldr	r1, [pc, #28]	; (8014fac <__NVIC_EnableIRQ+0x38>)
 8014f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f92:	095b      	lsrs	r3, r3, #5
 8014f94:	2001      	movs	r0, #1
 8014f96:	fa00 f202 	lsl.w	r2, r0, r2
 8014f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014f9e:	bf00      	nop
 8014fa0:	370c      	adds	r7, #12
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	e000e100 	.word	0xe000e100

08014fb0 <__NVIC_DisableIRQ>:
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	db12      	blt.n	8014fe8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014fc2:	79fb      	ldrb	r3, [r7, #7]
 8014fc4:	f003 021f 	and.w	r2, r3, #31
 8014fc8:	490a      	ldr	r1, [pc, #40]	; (8014ff4 <__NVIC_DisableIRQ+0x44>)
 8014fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fce:	095b      	lsrs	r3, r3, #5
 8014fd0:	2001      	movs	r0, #1
 8014fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8014fd6:	3320      	adds	r3, #32
 8014fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014fdc:	f3bf 8f4f 	dsb	sy
}
 8014fe0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014fe2:	f3bf 8f6f 	isb	sy
}
 8014fe6:	bf00      	nop
}
 8014fe8:	bf00      	nop
 8014fea:	370c      	adds	r7, #12
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr
 8014ff4:	e000e100 	.word	0xe000e100

08014ff8 <__NVIC_SetPriority>:
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b083      	sub	sp, #12
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	4603      	mov	r3, r0
 8015000:	6039      	str	r1, [r7, #0]
 8015002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015008:	2b00      	cmp	r3, #0
 801500a:	db0a      	blt.n	8015022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	b2da      	uxtb	r2, r3
 8015010:	490c      	ldr	r1, [pc, #48]	; (8015044 <__NVIC_SetPriority+0x4c>)
 8015012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015016:	0112      	lsls	r2, r2, #4
 8015018:	b2d2      	uxtb	r2, r2
 801501a:	440b      	add	r3, r1
 801501c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015020:	e00a      	b.n	8015038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	b2da      	uxtb	r2, r3
 8015026:	4908      	ldr	r1, [pc, #32]	; (8015048 <__NVIC_SetPriority+0x50>)
 8015028:	79fb      	ldrb	r3, [r7, #7]
 801502a:	f003 030f 	and.w	r3, r3, #15
 801502e:	3b04      	subs	r3, #4
 8015030:	0112      	lsls	r2, r2, #4
 8015032:	b2d2      	uxtb	r2, r2
 8015034:	440b      	add	r3, r1
 8015036:	761a      	strb	r2, [r3, #24]
}
 8015038:	bf00      	nop
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr
 8015044:	e000e100 	.word	0xe000e100
 8015048:	e000ed00 	.word	0xe000ed00

0801504c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801504c:	b5b0      	push	{r4, r5, r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	4618      	mov	r0, r3
 8015058:	f001 f9e6 	bl	8016428 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 801505c:	687d      	ldr	r5, [r7, #4]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	334c      	adds	r3, #76	; 0x4c
 8015064:	681c      	ldr	r4, [r3, #0]
 8015066:	f003 ff43 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 801506a:	4603      	mov	r3, r0
 801506c:	4619      	mov	r1, r3
 801506e:	4628      	mov	r0, r5
 8015070:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	490d      	ldr	r1, [pc, #52]	; (80150ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8015076:	4618      	mov	r0, r3
 8015078:	f7ff ff6e 	bl	8014f58 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2101      	movs	r1, #1
 8015080:	4618      	mov	r0, r3
 8015082:	f7ff ff29 	bl	8014ed8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	3374      	adds	r3, #116	; 0x74
 801508e:	681c      	ldr	r4, [r3, #0]
 8015090:	2300      	movs	r3, #0
 8015092:	2200      	movs	r2, #0
 8015094:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8015098:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2101      	movs	r1, #1
 801509e:	4618      	mov	r0, r3
 80150a0:	f7ff fef7 	bl	8014e92 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80150a4:	bf00      	nop
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bdb0      	pop	{r4, r5, r7, pc}
 80150ac:	08013c69 	.word	0x08013c69

080150b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80150b8:	2109      	movs	r1, #9
 80150ba:	205a      	movs	r0, #90	; 0x5a
 80150bc:	f7ff ff9c 	bl	8014ff8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80150c0:	2109      	movs	r1, #9
 80150c2:	2058      	movs	r0, #88	; 0x58
 80150c4:	f7ff ff98 	bl	8014ff8 <__NVIC_SetPriority>
}
 80150c8:	bf00      	nop
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80150d8:	205a      	movs	r0, #90	; 0x5a
 80150da:	f7ff ff4b 	bl	8014f74 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80150de:	2058      	movs	r0, #88	; 0x58
 80150e0:	f7ff ff48 	bl	8014f74 <__NVIC_EnableIRQ>
}
 80150e4:	bf00      	nop
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80150f4:	205a      	movs	r0, #90	; 0x5a
 80150f6:	f7ff ff5b 	bl	8014fb0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80150fa:	2058      	movs	r0, #88	; 0x58
 80150fc:	f7ff ff58 	bl	8014fb0 <__NVIC_DisableIRQ>
}
 8015100:	bf00      	nop
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015110:	4b11      	ldr	r3, [pc, #68]	; (8015158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015112:	68db      	ldr	r3, [r3, #12]
 8015114:	b29b      	uxth	r3, r3
 8015116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801511a:	b29b      	uxth	r3, r3
 801511c:	3b01      	subs	r3, #1
 801511e:	b29a      	uxth	r2, r3
 8015120:	4b0e      	ldr	r3, [pc, #56]	; (801515c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015122:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015124:	4b0c      	ldr	r3, [pc, #48]	; (8015158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015126:	691b      	ldr	r3, [r3, #16]
 8015128:	b29b      	uxth	r3, r3
 801512a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801512e:	b29b      	uxth	r3, r3
 8015130:	3b01      	subs	r3, #1
 8015132:	b29a      	uxth	r2, r3
 8015134:	4b0a      	ldr	r3, [pc, #40]	; (8015160 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015136:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015138:	4b08      	ldr	r3, [pc, #32]	; (801515c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801513a:	881a      	ldrh	r2, [r3, #0]
 801513c:	4b06      	ldr	r3, [pc, #24]	; (8015158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801513e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015140:	4b05      	ldr	r3, [pc, #20]	; (8015158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015144:	4a04      	ldr	r2, [pc, #16]	; (8015158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015146:	f043 0301 	orr.w	r3, r3, #1
 801514a:	6353      	str	r3, [r2, #52]	; 0x34
}
 801514c:	bf00      	nop
 801514e:	370c      	adds	r7, #12
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr
 8015158:	40016800 	.word	0x40016800
 801515c:	2000c4f8 	.word	0x2000c4f8
 8015160:	2000c4fa 	.word	0x2000c4fa

08015164 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015164:	b480      	push	{r7}
 8015166:	b083      	sub	sp, #12
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801516c:	4b03      	ldr	r3, [pc, #12]	; (801517c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015170:	4618      	mov	r0, r3
 8015172:	370c      	adds	r7, #12
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr
 801517c:	40016884 	.word	0x40016884

08015180 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015180:	b480      	push	{r7}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801518a:	4a06      	ldr	r2, [pc, #24]	; (80151a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015190:	4b05      	ldr	r3, [pc, #20]	; (80151a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015192:	2201      	movs	r2, #1
 8015194:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015196:	bf00      	nop
 8015198:	370c      	adds	r7, #12
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	40016884 	.word	0x40016884
 80151a8:	40016800 	.word	0x40016800

080151ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b082      	sub	sp, #8
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6839      	ldr	r1, [r7, #0]
 80151ba:	4618      	mov	r0, r3
 80151bc:	f000 fe44 	bl	8015e48 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80151c0:	bf00      	nop
 80151c2:	3708      	adds	r7, #8
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80151c8:	b480      	push	{r7}
 80151ca:	b085      	sub	sp, #20
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80151d0:	4b0d      	ldr	r3, [pc, #52]	; (8015208 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80151d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151d4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80151d6:	4b0c      	ldr	r3, [pc, #48]	; (8015208 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80151d8:	68db      	ldr	r3, [r3, #12]
 80151da:	b29b      	uxth	r3, r3
 80151dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	3301      	adds	r3, #1
 80151e4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80151e6:	89fa      	ldrh	r2, [r7, #14]
 80151e8:	89bb      	ldrh	r3, [r7, #12]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d201      	bcs.n	80151f2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80151ee:	2300      	movs	r3, #0
 80151f0:	e003      	b.n	80151fa <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80151f2:	89fa      	ldrh	r2, [r7, #14]
 80151f4:	89bb      	ldrh	r3, [r7, #12]
 80151f6:	1ad3      	subs	r3, r2, r3
 80151f8:	b29b      	uxth	r3, r3
    }
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3714      	adds	r7, #20
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	40016800 	.word	0x40016800

0801520c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015214:	4b1a      	ldr	r3, [pc, #104]	; (8015280 <HAL_LTDC_LineEventCallback+0x74>)
 8015216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015218:	4a1a      	ldr	r2, [pc, #104]	; (8015284 <HAL_LTDC_LineEventCallback+0x78>)
 801521a:	8812      	ldrh	r2, [r2, #0]
 801521c:	4293      	cmp	r3, r2
 801521e:	bf0c      	ite	eq
 8015220:	2301      	moveq	r3, #1
 8015222:	2300      	movne	r3, #0
 8015224:	b2db      	uxtb	r3, r3
 8015226:	2b00      	cmp	r3, #0
 8015228:	d017      	beq.n	801525a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801522a:	4b17      	ldr	r3, [pc, #92]	; (8015288 <HAL_LTDC_LineEventCallback+0x7c>)
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	4619      	mov	r1, r3
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7f0 fdfd 	bl	8005e30 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015236:	f7fa fbbb 	bl	800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>
 801523a:	4603      	mov	r3, r0
 801523c:	4618      	mov	r0, r3
 801523e:	f7ff fe38 	bl	8014eb2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015242:	f7fe fcd3 	bl	8013bec <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015246:	f7fa fbb3 	bl	800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>
 801524a:	4603      	mov	r3, r0
 801524c:	4618      	mov	r0, r3
 801524e:	f001 fb73 	bl	8016938 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015252:	2000      	movs	r0, #0
 8015254:	f7fe fa02 	bl	801365c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015258:	e00e      	b.n	8015278 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801525a:	4b0a      	ldr	r3, [pc, #40]	; (8015284 <HAL_LTDC_LineEventCallback+0x78>)
 801525c:	881b      	ldrh	r3, [r3, #0]
 801525e:	4619      	mov	r1, r3
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f7f0 fde5 	bl	8005e30 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015266:	2000      	movs	r0, #0
 8015268:	f7fe fa03 	bl	8013672 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801526c:	f7fa fba0 	bl	800f9b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8015270:	4603      	mov	r3, r0
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff fdff 	bl	8014e76 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015278:	bf00      	nop
 801527a:	3708      	adds	r7, #8
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}
 8015280:	40016800 	.word	0x40016800
 8015284:	2000c4f8 	.word	0x2000c4f8
 8015288:	2000c4fa 	.word	0x2000c4fa

0801528c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801528c:	8880      	ldrh	r0, [r0, #4]
 801528e:	4770      	bx	lr

08015290 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015290:	2300      	movs	r3, #0
 8015292:	8083      	strh	r3, [r0, #4]
 8015294:	4770      	bx	lr
	...

08015298 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801529a:	6803      	ldr	r3, [r0, #0]
 801529c:	460e      	mov	r6, r1
 801529e:	2100      	movs	r1, #0
 80152a0:	4605      	mov	r5, r0
 80152a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a4:	4798      	blx	r3
 80152a6:	4604      	mov	r4, r0
 80152a8:	682b      	ldr	r3, [r5, #0]
 80152aa:	4628      	mov	r0, r5
 80152ac:	1b34      	subs	r4, r6, r4
 80152ae:	6a1b      	ldr	r3, [r3, #32]
 80152b0:	b2a4      	uxth	r4, r4
 80152b2:	4798      	blx	r3
 80152b4:	88ab      	ldrh	r3, [r5, #4]
 80152b6:	fbb4 f4f0 	udiv	r4, r4, r0
 80152ba:	42a3      	cmp	r3, r4
 80152bc:	d805      	bhi.n	80152ca <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80152be:	4b0e      	ldr	r3, [pc, #56]	; (80152f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80152c0:	211e      	movs	r1, #30
 80152c2:	4a0e      	ldr	r2, [pc, #56]	; (80152fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80152c4:	480e      	ldr	r0, [pc, #56]	; (8015300 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80152c6:	f00f fe07 	bl	8024ed8 <__assert_func>
 80152ca:	682b      	ldr	r3, [r5, #0]
 80152cc:	2100      	movs	r1, #0
 80152ce:	4628      	mov	r0, r5
 80152d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d2:	4798      	blx	r3
 80152d4:	682b      	ldr	r3, [r5, #0]
 80152d6:	4607      	mov	r7, r0
 80152d8:	4628      	mov	r0, r5
 80152da:	6a1b      	ldr	r3, [r3, #32]
 80152dc:	4798      	blx	r3
 80152de:	1bf3      	subs	r3, r6, r7
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	fbb3 f2f0 	udiv	r2, r3, r0
 80152e6:	fb02 3010 	mls	r0, r2, r0, r3
 80152ea:	b118      	cbz	r0, 80152f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80152ec:	4b05      	ldr	r3, [pc, #20]	; (8015304 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80152ee:	211f      	movs	r1, #31
 80152f0:	4a02      	ldr	r2, [pc, #8]	; (80152fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80152f2:	e7e7      	b.n	80152c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80152f4:	4620      	mov	r0, r4
 80152f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152f8:	080270c4 	.word	0x080270c4
 80152fc:	08027232 	.word	0x08027232
 8015300:	080270d9 	.word	0x080270d9
 8015304:	08027107 	.word	0x08027107

08015308 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015308:	b538      	push	{r3, r4, r5, lr}
 801530a:	6803      	ldr	r3, [r0, #0]
 801530c:	460d      	mov	r5, r1
 801530e:	4604      	mov	r4, r0
 8015310:	6a1b      	ldr	r3, [r3, #32]
 8015312:	4798      	blx	r3
 8015314:	4285      	cmp	r5, r0
 8015316:	d905      	bls.n	8015324 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015318:	4b0c      	ldr	r3, [pc, #48]	; (801534c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801531a:	212f      	movs	r1, #47	; 0x2f
 801531c:	4a0c      	ldr	r2, [pc, #48]	; (8015350 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801531e:	480d      	ldr	r0, [pc, #52]	; (8015354 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015320:	f00f fdda 	bl	8024ed8 <__assert_func>
 8015324:	6823      	ldr	r3, [r4, #0]
 8015326:	4620      	mov	r0, r4
 8015328:	88a5      	ldrh	r5, [r4, #4]
 801532a:	69db      	ldr	r3, [r3, #28]
 801532c:	4798      	blx	r3
 801532e:	4285      	cmp	r5, r0
 8015330:	d303      	bcc.n	801533a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015332:	4b09      	ldr	r3, [pc, #36]	; (8015358 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015334:	2130      	movs	r1, #48	; 0x30
 8015336:	4a06      	ldr	r2, [pc, #24]	; (8015350 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015338:	e7f1      	b.n	801531e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801533a:	6823      	ldr	r3, [r4, #0]
 801533c:	4620      	mov	r0, r4
 801533e:	88a1      	ldrh	r1, [r4, #4]
 8015340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015342:	4798      	blx	r3
 8015344:	88a3      	ldrh	r3, [r4, #4]
 8015346:	3301      	adds	r3, #1
 8015348:	80a3      	strh	r3, [r4, #4]
 801534a:	bd38      	pop	{r3, r4, r5, pc}
 801534c:	08027181 	.word	0x08027181
 8015350:	08027275 	.word	0x08027275
 8015354:	080270d9 	.word	0x080270d9
 8015358:	08027198 	.word	0x08027198

0801535c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801535c:	b570      	push	{r4, r5, r6, lr}
 801535e:	6803      	ldr	r3, [r0, #0]
 8015360:	4616      	mov	r6, r2
 8015362:	4604      	mov	r4, r0
 8015364:	460d      	mov	r5, r1
 8015366:	6a1b      	ldr	r3, [r3, #32]
 8015368:	4798      	blx	r3
 801536a:	4286      	cmp	r6, r0
 801536c:	d905      	bls.n	801537a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801536e:	4b06      	ldr	r3, [pc, #24]	; (8015388 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015370:	2139      	movs	r1, #57	; 0x39
 8015372:	4a06      	ldr	r2, [pc, #24]	; (801538c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015374:	4806      	ldr	r0, [pc, #24]	; (8015390 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015376:	f00f fdaf 	bl	8024ed8 <__assert_func>
 801537a:	6823      	ldr	r3, [r4, #0]
 801537c:	4629      	mov	r1, r5
 801537e:	4620      	mov	r0, r4
 8015380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015386:	4718      	bx	r3
 8015388:	08027181 	.word	0x08027181
 801538c:	080271e8 	.word	0x080271e8
 8015390:	080270d9 	.word	0x080270d9

08015394 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015394:	4770      	bx	lr
	...

08015398 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015398:	4a02      	ldr	r2, [pc, #8]	; (80153a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801539a:	6002      	str	r2, [r0, #0]
 801539c:	2200      	movs	r2, #0
 801539e:	8082      	strh	r2, [r0, #4]
 80153a0:	4770      	bx	lr
 80153a2:	bf00      	nop
 80153a4:	080271bc 	.word	0x080271bc

080153a8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80153a8:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 80153ac:	4770      	bx	lr

080153ae <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80153ae:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80153b2:	4770      	bx	lr

080153b4 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80153b4:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 80153b8:	4770      	bx	lr

080153ba <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 80153ba:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 80153be:	4770      	bx	lr

080153c0 <_ZN8touchgfx11BoxProgressD1Ev>:
 80153c0:	4b03      	ldr	r3, [pc, #12]	; (80153d0 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 80153c2:	b510      	push	{r4, lr}
 80153c4:	4604      	mov	r4, r0
 80153c6:	6003      	str	r3, [r0, #0]
 80153c8:	f000 f8b6 	bl	8015538 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80153cc:	4620      	mov	r0, r4
 80153ce:	bd10      	pop	{r4, pc}
 80153d0:	080272bc 	.word	0x080272bc

080153d4 <_ZN8touchgfx11BoxProgressD0Ev>:
 80153d4:	b510      	push	{r4, lr}
 80153d6:	4604      	mov	r4, r0
 80153d8:	f7ff fff2 	bl	80153c0 <_ZN8touchgfx11BoxProgressD1Ev>
 80153dc:	21c0      	movs	r1, #192	; 0xc0
 80153de:	4620      	mov	r0, r4
 80153e0:	f00f fd4c 	bl	8024e7c <_ZdlPvj>
 80153e4:	4620      	mov	r0, r4
 80153e6:	bd10      	pop	{r4, pc}

080153e8 <_ZN8touchgfx11BoxProgressC1Ev>:
 80153e8:	b510      	push	{r4, lr}
 80153ea:	4604      	mov	r4, r0
 80153ec:	f000 f8b8 	bl	8015560 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80153f0:	2201      	movs	r2, #1
 80153f2:	4b16      	ldr	r3, [pc, #88]	; (801544c <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 80153f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80153f8:	f104 0190 	add.w	r1, r4, #144	; 0x90
 80153fc:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8015400:	4a13      	ldr	r2, [pc, #76]	; (8015450 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8015402:	6023      	str	r3, [r4, #0]
 8015404:	2300      	movs	r3, #0
 8015406:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801540a:	22ff      	movs	r2, #255	; 0xff
 801540c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8015410:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8015414:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8015418:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801541c:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8015420:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8015424:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8015428:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801542c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8015430:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015434:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8015438:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801543c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8015440:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8015444:	f000 fbb8 	bl	8015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015448:	4620      	mov	r0, r4
 801544a:	bd10      	pop	{r4, pc}
 801544c:	080272bc 	.word	0x080272bc
 8015450:	08028574 	.word	0x08028574

08015454 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8015454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015458:	4617      	mov	r7, r2
 801545a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801545e:	2200      	movs	r2, #0
 8015460:	4604      	mov	r4, r0
 8015462:	460e      	mov	r6, r1
 8015464:	4698      	mov	r8, r3
 8015466:	4611      	mov	r1, r2
 8015468:	9500      	str	r5, [sp, #0]
 801546a:	3090      	adds	r0, #144	; 0x90
 801546c:	f7fa ff5e 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 8015470:	4643      	mov	r3, r8
 8015472:	463a      	mov	r2, r7
 8015474:	4631      	mov	r1, r6
 8015476:	4620      	mov	r0, r4
 8015478:	9508      	str	r5, [sp, #32]
 801547a:	b002      	add	sp, #8
 801547c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015480:	f000 b9fa 	b.w	8015878 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015484 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8015484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015486:	4604      	mov	r4, r0
 8015488:	f000 fa40 	bl	801590c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801548c:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8015490:	4628      	mov	r0, r5
 8015492:	f004 f95b 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015496:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801549a:	2b03      	cmp	r3, #3
 801549c:	d814      	bhi.n	80154c8 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801549e:	e8df f003 	tbb	[pc, r3]
 80154a2:	0202      	.short	0x0202
 80154a4:	1010      	.short	0x1010
 80154a6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80154aa:	4620      	mov	r0, r4
 80154ac:	f000 fa88 	bl	80159c0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80154b0:	b200      	sxth	r0, r0
 80154b2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80154b6:	2b03      	cmp	r3, #3
 80154b8:	d81a      	bhi.n	80154f0 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 80154ba:	e8df f003 	tbb	[pc, r3]
 80154be:	0e07      	.short	0x0e07
 80154c0:	231f      	.short	0x231f
 80154c2:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80154c6:	e7f0      	b.n	80154aa <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80154c8:	2000      	movs	r0, #0
 80154ca:	e7f2      	b.n	80154b2 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 80154cc:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80154d0:	9300      	str	r3, [sp, #0]
 80154d2:	4603      	mov	r3, r0
 80154d4:	2200      	movs	r2, #0
 80154d6:	2100      	movs	r1, #0
 80154d8:	e007      	b.n	80154ea <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80154da:	8921      	ldrh	r1, [r4, #8]
 80154dc:	2200      	movs	r2, #0
 80154de:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80154e2:	1a09      	subs	r1, r1, r0
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	4603      	mov	r3, r0
 80154e8:	b209      	sxth	r1, r1
 80154ea:	4628      	mov	r0, r5
 80154ec:	f7fa ff1e 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 80154f0:	4628      	mov	r0, r5
 80154f2:	b003      	add	sp, #12
 80154f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154f8:	f004 b928 	b.w	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
 80154fc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015500:	9000      	str	r0, [sp, #0]
 8015502:	e7e7      	b.n	80154d4 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8015504:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015508:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801550c:	1a12      	subs	r2, r2, r0
 801550e:	9000      	str	r0, [sp, #0]
 8015510:	b212      	sxth	r2, r2
 8015512:	e7e0      	b.n	80154d6 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08015514 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8015514:	b570      	push	{r4, r5, r6, lr}
 8015516:	6803      	ldr	r3, [r0, #0]
 8015518:	4604      	mov	r4, r0
 801551a:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801551e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015522:	4798      	blx	r3
 8015524:	4601      	mov	r1, r0
 8015526:	462b      	mov	r3, r5
 8015528:	4620      	mov	r0, r4
 801552a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801552e:	4718      	bx	r3

08015530 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8015530:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8015534:	4770      	bx	lr
	...

08015538 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8015538:	4b03      	ldr	r3, [pc, #12]	; (8015548 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801553a:	b510      	push	{r4, lr}
 801553c:	4604      	mov	r4, r0
 801553e:	6003      	str	r3, [r0, #0]
 8015540:	f000 f999 	bl	8015876 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8015544:	4620      	mov	r0, r4
 8015546:	bd10      	pop	{r4, pc}
 8015548:	08027394 	.word	0x08027394

0801554c <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801554c:	b510      	push	{r4, lr}
 801554e:	4604      	mov	r4, r0
 8015550:	f7ff fff2 	bl	8015538 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8015554:	2190      	movs	r1, #144	; 0x90
 8015556:	4620      	mov	r0, r4
 8015558:	f00f fc90 	bl	8024e7c <_ZdlPvj>
 801555c:	4620      	mov	r0, r4
 801555e:	bd10      	pop	{r4, pc}

08015560 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8015560:	b510      	push	{r4, lr}
 8015562:	4604      	mov	r4, r0
 8015564:	f000 fa4c 	bl	8015a00 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8015568:	4b03      	ldr	r3, [pc, #12]	; (8015578 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801556a:	2100      	movs	r1, #0
 801556c:	4620      	mov	r0, r4
 801556e:	6023      	str	r3, [r4, #0]
 8015570:	f7ff ffd0 	bl	8015514 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8015574:	4620      	mov	r0, r4
 8015576:	bd10      	pop	{r4, pc}
 8015578:	08027394 	.word	0x08027394

0801557c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801557c:	b570      	push	{r4, r5, r6, lr}
 801557e:	6803      	ldr	r3, [r0, #0]
 8015580:	4604      	mov	r4, r0
 8015582:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8015586:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801558a:	4798      	blx	r3
 801558c:	4601      	mov	r1, r0
 801558e:	462b      	mov	r3, r5
 8015590:	4620      	mov	r0, r4
 8015592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015596:	4718      	bx	r3

08015598 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8015598:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801559c:	4770      	bx	lr

0801559e <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801559e:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 80155a2:	4770      	bx	lr

080155a4 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 80155a4:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 80155a8:	4770      	bx	lr

080155aa <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 80155aa:	b507      	push	{r0, r1, r2, lr}
 80155ac:	ab02      	add	r3, sp, #8
 80155ae:	30bc      	adds	r0, #188	; 0xbc
 80155b0:	f823 1d04 	strh.w	r1, [r3, #-4]!
 80155b4:	4619      	mov	r1, r3
 80155b6:	f002 f9a9 	bl	801790c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80155ba:	b003      	add	sp, #12
 80155bc:	f85d fb04 	ldr.w	pc, [sp], #4

080155c0 <_ZN8touchgfx13ImageProgressD1Ev>:
 80155c0:	4b03      	ldr	r3, [pc, #12]	; (80155d0 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 80155c2:	b510      	push	{r4, lr}
 80155c4:	4604      	mov	r4, r0
 80155c6:	6003      	str	r3, [r0, #0]
 80155c8:	f7ff ffb6 	bl	8015538 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80155cc:	4620      	mov	r0, r4
 80155ce:	bd10      	pop	{r4, pc}
 80155d0:	080274c0 	.word	0x080274c0

080155d4 <_ZN8touchgfx13ImageProgressD0Ev>:
 80155d4:	b510      	push	{r4, lr}
 80155d6:	4604      	mov	r4, r0
 80155d8:	f7ff fff2 	bl	80155c0 <_ZN8touchgfx13ImageProgressD1Ev>
 80155dc:	21f0      	movs	r1, #240	; 0xf0
 80155de:	4620      	mov	r0, r4
 80155e0:	f00f fc4c 	bl	8024e7c <_ZdlPvj>
 80155e4:	4620      	mov	r0, r4
 80155e6:	bd10      	pop	{r4, pc}

080155e8 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 80155e8:	b508      	push	{r3, lr}
 80155ea:	4b06      	ldr	r3, [pc, #24]	; (8015604 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	b92b      	cbnz	r3, 80155fc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 80155f0:	4b05      	ldr	r3, [pc, #20]	; (8015608 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 80155f2:	21b8      	movs	r1, #184	; 0xb8
 80155f4:	4a05      	ldr	r2, [pc, #20]	; (801560c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 80155f6:	4806      	ldr	r0, [pc, #24]	; (8015610 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 80155f8:	f00f fc6e 	bl	8024ed8 <__assert_func>
 80155fc:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8015600:	bd08      	pop	{r3, pc}
 8015602:	bf00      	nop
 8015604:	2000c5d0 	.word	0x2000c5d0
 8015608:	08027454 	.word	0x08027454
 801560c:	08027598 	.word	0x08027598
 8015610:	08027490 	.word	0x08027490

08015614 <_ZN8touchgfx13ImageProgressC1Ev>:
 8015614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015618:	4604      	mov	r4, r0
 801561a:	f7ff ffa1 	bl	8015560 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801561e:	4b31      	ldr	r3, [pc, #196]	; (80156e4 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8015620:	a902      	add	r1, sp, #8
 8015622:	4626      	mov	r6, r4
 8015624:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8015628:	2500      	movs	r5, #0
 801562a:	4a2f      	ldr	r2, [pc, #188]	; (80156e8 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801562c:	f846 3b90 	str.w	r3, [r6], #144
 8015630:	2701      	movs	r7, #1
 8015632:	4b2e      	ldr	r3, [pc, #184]	; (80156ec <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8015634:	4640      	mov	r0, r8
 8015636:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801563a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801563e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015642:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8015646:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801564a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 801564e:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8015652:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8015656:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801565a:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 801565e:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8015662:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8015666:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801566a:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801566e:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8015672:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8015676:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801567a:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801567e:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8015682:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8015686:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801568a:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801568e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8015692:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8015696:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801569a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 801569e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 80156a2:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 80156a6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80156aa:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 80156ae:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80156b2:	f002 fb6f 	bl	8017d94 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80156b6:	4b0e      	ldr	r3, [pc, #56]	; (80156f0 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 80156b8:	4641      	mov	r1, r8
 80156ba:	4630      	mov	r0, r6
 80156bc:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 80156c0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80156c4:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 80156c8:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 80156cc:	f000 fa74 	bl	8015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80156d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80156d4:	4631      	mov	r1, r6
 80156d6:	f000 fa6f 	bl	8015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80156da:	4620      	mov	r0, r4
 80156dc:	b002      	add	sp, #8
 80156de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e2:	bf00      	nop
 80156e4:	080274c0 	.word	0x080274c0
 80156e8:	080286dc 	.word	0x080286dc
 80156ec:	0802783c 	.word	0x0802783c
 80156f0:	080285dc 	.word	0x080285dc

080156f4 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 80156f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80156f8:	4617      	mov	r7, r2
 80156fa:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80156fe:	2200      	movs	r2, #0
 8015700:	4604      	mov	r4, r0
 8015702:	460e      	mov	r6, r1
 8015704:	4698      	mov	r8, r3
 8015706:	4611      	mov	r1, r2
 8015708:	9500      	str	r5, [sp, #0]
 801570a:	3090      	adds	r0, #144	; 0x90
 801570c:	f7fa fe0e 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 8015710:	4643      	mov	r3, r8
 8015712:	463a      	mov	r2, r7
 8015714:	4631      	mov	r1, r6
 8015716:	4620      	mov	r0, r4
 8015718:	9508      	str	r5, [sp, #32]
 801571a:	b002      	add	sp, #8
 801571c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015720:	f000 b8aa 	b.w	8015878 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015724 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8015724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015726:	4604      	mov	r4, r0
 8015728:	f000 f8f0 	bl	801590c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801572c:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8015730:	4638      	mov	r0, r7
 8015732:	f004 f80b 	bl	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015736:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801573a:	4620      	mov	r0, r4
 801573c:	2b01      	cmp	r3, #1
 801573e:	bf94      	ite	ls
 8015740:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8015744:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8015748:	f000 f93a 	bl	80159c0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801574c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8015750:	4606      	mov	r6, r0
 8015752:	b205      	sxth	r5, r0
 8015754:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015758:	2a00      	cmp	r2, #0
 801575a:	d056      	beq.n	801580a <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 801575c:	2b03      	cmp	r3, #3
 801575e:	d82c      	bhi.n	80157ba <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015760:	e8df f003 	tbb	[pc, r3]
 8015764:	3d311202 	.word	0x3d311202
 8015768:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801576c:	2200      	movs	r2, #0
 801576e:	9300      	str	r3, [sp, #0]
 8015770:	4611      	mov	r1, r2
 8015772:	462b      	mov	r3, r5
 8015774:	4638      	mov	r0, r7
 8015776:	f7fa fdd9 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 801577a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	462b      	mov	r3, r5
 8015782:	2200      	movs	r2, #0
 8015784:	4611      	mov	r1, r2
 8015786:	e014      	b.n	80157b2 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015788:	8921      	ldrh	r1, [r4, #8]
 801578a:	2200      	movs	r2, #0
 801578c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015790:	1a09      	subs	r1, r1, r0
 8015792:	4638      	mov	r0, r7
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	462b      	mov	r3, r5
 8015798:	b209      	sxth	r1, r1
 801579a:	f7fa fdc7 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 801579e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80157a2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80157a6:	4249      	negs	r1, r1
 80157a8:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80157ac:	9200      	str	r2, [sp, #0]
 80157ae:	b209      	sxth	r1, r1
 80157b0:	2200      	movs	r2, #0
 80157b2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80157b6:	f7fa fdb9 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 80157ba:	4638      	mov	r0, r7
 80157bc:	b003      	add	sp, #12
 80157be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157c2:	f003 bfc3 	b.w	801974c <_ZNK8touchgfx8Drawable10invalidateEv>
 80157c6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80157ca:	2200      	movs	r2, #0
 80157cc:	9500      	str	r5, [sp, #0]
 80157ce:	2100      	movs	r1, #0
 80157d0:	4638      	mov	r0, r7
 80157d2:	f7fa fdab 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 80157d6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80157da:	9500      	str	r5, [sp, #0]
 80157dc:	e7d1      	b.n	8015782 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 80157de:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80157e2:	2100      	movs	r1, #0
 80157e4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80157e8:	1a12      	subs	r2, r2, r0
 80157ea:	9500      	str	r5, [sp, #0]
 80157ec:	4638      	mov	r0, r7
 80157ee:	b212      	sxth	r2, r2
 80157f0:	f7fa fd9c 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 80157f4:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 80157f8:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 80157fc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015800:	4252      	negs	r2, r2
 8015802:	9100      	str	r1, [sp, #0]
 8015804:	b212      	sxth	r2, r2
 8015806:	2100      	movs	r1, #0
 8015808:	e7d3      	b.n	80157b2 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801580a:	2b03      	cmp	r3, #3
 801580c:	d8d5      	bhi.n	80157ba <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801580e:	e8df f003 	tbb	[pc, r3]
 8015812:	1102      	.short	0x1102
 8015814:	2a1b      	.short	0x2a1b
 8015816:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801581a:	2200      	movs	r2, #0
 801581c:	4638      	mov	r0, r7
 801581e:	4611      	mov	r1, r2
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	462b      	mov	r3, r5
 8015824:	f7fa fd82 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 8015828:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801582c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015830:	1af1      	subs	r1, r6, r3
 8015832:	e7bb      	b.n	80157ac <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8015834:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015838:	2200      	movs	r2, #0
 801583a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801583e:	1a09      	subs	r1, r1, r0
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	462b      	mov	r3, r5
 8015844:	b209      	sxth	r1, r1
 8015846:	e795      	b.n	8015774 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8015848:	2200      	movs	r2, #0
 801584a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801584e:	4638      	mov	r0, r7
 8015850:	9500      	str	r5, [sp, #0]
 8015852:	4611      	mov	r1, r2
 8015854:	f7fa fd6a 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 8015858:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 801585c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015860:	1a32      	subs	r2, r6, r0
 8015862:	9000      	str	r0, [sp, #0]
 8015864:	e7ce      	b.n	8015804 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8015866:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801586a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801586e:	1a12      	subs	r2, r2, r0
 8015870:	9500      	str	r5, [sp, #0]
 8015872:	b212      	sxth	r2, r2
 8015874:	e7ab      	b.n	80157ce <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08015876 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8015876:	4770      	bx	lr

08015878 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801587c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8015880:	4604      	mov	r4, r0
 8015882:	460e      	mov	r6, r1
 8015884:	4698      	mov	r8, r3
 8015886:	9700      	str	r7, [sp, #0]
 8015888:	3058      	adds	r0, #88	; 0x58
 801588a:	4615      	mov	r5, r2
 801588c:	f7fa fd4e 	bl	801032c <_ZN8touchgfx8Drawable11setPositionEssss>
 8015890:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015894:	eb06 0308 	add.w	r3, r6, r8
 8015898:	429a      	cmp	r2, r3
 801589a:	eb05 0207 	add.w	r2, r5, r7
 801589e:	bfb8      	it	lt
 80158a0:	8123      	strhlt	r3, [r4, #8]
 80158a2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80158a6:	4293      	cmp	r3, r2
 80158a8:	bfb8      	it	lt
 80158aa:	8162      	strhlt	r2, [r4, #10]
 80158ac:	b002      	add	sp, #8
 80158ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158b2 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80158b2:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80158b6:	4770      	bx	lr

080158b8 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80158b8:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80158bc:	4770      	bx	lr

080158be <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80158be:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80158c2:	4770      	bx	lr

080158c4 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80158c4:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80158c8:	4770      	bx	lr

080158ca <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80158ca:	b510      	push	{r4, lr}
 80158cc:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80158d0:	800c      	strh	r4, [r1, #0]
 80158d2:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80158d6:	8011      	strh	r1, [r2, #0]
 80158d8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80158dc:	801a      	strh	r2, [r3, #0]
 80158de:	9b02      	ldr	r3, [sp, #8]
 80158e0:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80158e4:	801a      	strh	r2, [r3, #0]
 80158e6:	bd10      	pop	{r4, pc}

080158e8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 80158e8:	b510      	push	{r4, lr}
 80158ea:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80158ee:	800c      	strh	r4, [r1, #0]
 80158f0:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80158f4:	8011      	strh	r1, [r2, #0]
 80158f6:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80158fa:	801a      	strh	r2, [r3, #0]
 80158fc:	bd10      	pop	{r4, pc}

080158fe <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80158fe:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015902:	800b      	strh	r3, [r1, #0]
 8015904:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015908:	8013      	strh	r3, [r2, #0]
 801590a:	4770      	bx	lr

0801590c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801590c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015910:	4299      	cmp	r1, r3
 8015912:	bfb8      	it	lt
 8015914:	4619      	movlt	r1, r3
 8015916:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801591a:	4299      	cmp	r1, r3
 801591c:	bfa8      	it	ge
 801591e:	4619      	movge	r1, r3
 8015920:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8015924:	4770      	bx	lr

08015926 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8015926:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801592a:	4770      	bx	lr

0801592c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801592c:	b510      	push	{r4, lr}
 801592e:	4604      	mov	r4, r0
 8015930:	2190      	movs	r1, #144	; 0x90
 8015932:	f00f faa3 	bl	8024e7c <_ZdlPvj>
 8015936:	4620      	mov	r0, r4
 8015938:	bd10      	pop	{r4, pc}

0801593a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801593a:	b510      	push	{r4, lr}
 801593c:	4604      	mov	r4, r0
 801593e:	302c      	adds	r0, #44	; 0x2c
 8015940:	f002 fa28 	bl	8017d94 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015944:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015946:	8123      	strh	r3, [r4, #8]
 8015948:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801594a:	8163      	strh	r3, [r4, #10]
 801594c:	bd10      	pop	{r4, pc}
	...

08015950 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015950:	4291      	cmp	r1, r2
 8015952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015956:	4604      	mov	r4, r0
 8015958:	460e      	mov	r6, r1
 801595a:	4615      	mov	r5, r2
 801595c:	4698      	mov	r8, r3
 801595e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8015962:	db05      	blt.n	8015970 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8015964:	4b12      	ldr	r3, [pc, #72]	; (80159b0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8015966:	214d      	movs	r1, #77	; 0x4d
 8015968:	4a12      	ldr	r2, [pc, #72]	; (80159b4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801596a:	4813      	ldr	r0, [pc, #76]	; (80159b8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801596c:	f00f fab4 	bl	8024ed8 <__assert_func>
 8015970:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8015974:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8015978:	6803      	ldr	r3, [r0, #0]
 801597a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801597e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015982:	4798      	blx	r3
 8015984:	f1b8 0f00 	cmp.w	r8, #0
 8015988:	d10c      	bne.n	80159a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801598a:	1bad      	subs	r5, r5, r6
 801598c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8015990:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8015994:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8015998:	42bb      	cmp	r3, r7
 801599a:	d806      	bhi.n	80159aa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801599c:	4b07      	ldr	r3, [pc, #28]	; (80159bc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801599e:	215a      	movs	r1, #90	; 0x5a
 80159a0:	4a04      	ldr	r2, [pc, #16]	; (80159b4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80159a2:	e7e2      	b.n	801596a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80159a4:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80159a8:	e7f2      	b.n	8015990 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80159aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ae:	bf00      	nop
 80159b0:	080275cb 	.word	0x080275cb
 80159b4:	08027708 	.word	0x08027708
 80159b8:	080275d5 	.word	0x080275d5
 80159bc:	0802762c 	.word	0x0802762c

080159c0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80159c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159c2:	4604      	mov	r4, r0
 80159c4:	460d      	mov	r5, r1
 80159c6:	b1b9      	cbz	r1, 80159f8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80159c8:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80159cc:	ab01      	add	r3, sp, #4
 80159ce:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80159d2:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80159d6:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80159da:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80159de:	1a12      	subs	r2, r2, r0
 80159e0:	1b89      	subs	r1, r1, r6
 80159e2:	1a38      	subs	r0, r7, r0
 80159e4:	f003 fff3 	bl	80199ce <_ZN8touchgfx6muldivElllRl>
 80159e8:	4629      	mov	r1, r5
 80159ea:	ab01      	add	r3, sp, #4
 80159ec:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80159f0:	4430      	add	r0, r6
 80159f2:	f003 ffec 	bl	80199ce <_ZN8touchgfx6muldivElllRl>
 80159f6:	b285      	uxth	r5, r0
 80159f8:	4628      	mov	r0, r5
 80159fa:	b003      	add	sp, #12
 80159fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015a00 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015a04:	4604      	mov	r4, r0
 8015a06:	2600      	movs	r6, #0
 8015a08:	f7fa fc42 	bl	8010290 <_ZN8touchgfx8DrawableC1Ev>
 8015a0c:	4b1b      	ldr	r3, [pc, #108]	; (8015a7c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015a0e:	4625      	mov	r5, r4
 8015a10:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8015a14:	af02      	add	r7, sp, #8
 8015a16:	62a6      	str	r6, [r4, #40]	; 0x28
 8015a18:	f845 3b2c 	str.w	r3, [r5], #44
 8015a1c:	4628      	mov	r0, r5
 8015a1e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8015a22:	f7fa fc35 	bl	8010290 <_ZN8touchgfx8DrawableC1Ev>
 8015a26:	4b16      	ldr	r3, [pc, #88]	; (8015a80 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8015a28:	4639      	mov	r1, r7
 8015a2a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015a2e:	4628      	mov	r0, r5
 8015a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a32:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8015a36:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8015a3a:	f002 f9ab 	bl	8017d94 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015a3e:	4638      	mov	r0, r7
 8015a40:	f7fa fc26 	bl	8010290 <_ZN8touchgfx8DrawableC1Ev>
 8015a44:	4b0f      	ldr	r3, [pc, #60]	; (8015a84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8015a46:	4632      	mov	r2, r6
 8015a48:	4631      	mov	r1, r6
 8015a4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8015a4c:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015a50:	4628      	mov	r0, r5
 8015a52:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8015a56:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8015a5a:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015a5e:	f7fa fcb0 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
 8015a62:	4629      	mov	r1, r5
 8015a64:	4620      	mov	r0, r4
 8015a66:	f000 f8a7 	bl	8015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	4639      	mov	r1, r7
 8015a6e:	f000 f8a3 	bl	8015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a72:	4620      	mov	r0, r4
 8015a74:	b002      	add	sp, #8
 8015a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7a:	bf00      	nop
 8015a7c:	08027650 	.word	0x08027650
 8015a80:	080286dc 	.word	0x080286dc
 8015a84:	0802783c 	.word	0x0802783c

08015a88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015a88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a8a:	2000      	movs	r0, #0
 8015a8c:	b12b      	cbz	r3, 8015a9a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015a8e:	b920      	cbnz	r0, 8015a9a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015a90:	1a5a      	subs	r2, r3, r1
 8015a92:	699b      	ldr	r3, [r3, #24]
 8015a94:	4250      	negs	r0, r2
 8015a96:	4150      	adcs	r0, r2
 8015a98:	e7f8      	b.n	8015a8c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015a9a:	4770      	bx	lr

08015a9c <_ZN8touchgfx9Container9removeAllEv>:
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015aa0:	b123      	cbz	r3, 8015aac <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015aa2:	6999      	ldr	r1, [r3, #24]
 8015aa4:	6281      	str	r1, [r0, #40]	; 0x28
 8015aa6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015aaa:	e7f8      	b.n	8015a9e <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015aac:	4770      	bx	lr

08015aae <_ZN8touchgfx9Container6unlinkEv>:
 8015aae:	2300      	movs	r3, #0
 8015ab0:	6283      	str	r3, [r0, #40]	; 0x28
 8015ab2:	4770      	bx	lr

08015ab4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab8:	461f      	mov	r7, r3
 8015aba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015abe:	460d      	mov	r5, r1
 8015ac0:	4616      	mov	r6, r2
 8015ac2:	b103      	cbz	r3, 8015ac6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015ac4:	6038      	str	r0, [r7, #0]
 8015ac6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015ac8:	b314      	cbz	r4, 8015b10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015aca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ace:	b1eb      	cbz	r3, 8015b0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ad0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015ad4:	428d      	cmp	r5, r1
 8015ad6:	db19      	blt.n	8015b0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ad8:	b289      	uxth	r1, r1
 8015ada:	8923      	ldrh	r3, [r4, #8]
 8015adc:	440b      	add	r3, r1
 8015ade:	b21b      	sxth	r3, r3
 8015ae0:	429d      	cmp	r5, r3
 8015ae2:	da13      	bge.n	8015b0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ae4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015ae8:	4296      	cmp	r6, r2
 8015aea:	db0f      	blt.n	8015b0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015aec:	b292      	uxth	r2, r2
 8015aee:	8963      	ldrh	r3, [r4, #10]
 8015af0:	4413      	add	r3, r2
 8015af2:	b21b      	sxth	r3, r3
 8015af4:	429e      	cmp	r6, r3
 8015af6:	da09      	bge.n	8015b0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015af8:	6823      	ldr	r3, [r4, #0]
 8015afa:	1ab2      	subs	r2, r6, r2
 8015afc:	1a69      	subs	r1, r5, r1
 8015afe:	4620      	mov	r0, r4
 8015b00:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8015b04:	b212      	sxth	r2, r2
 8015b06:	463b      	mov	r3, r7
 8015b08:	b209      	sxth	r1, r1
 8015b0a:	47c0      	blx	r8
 8015b0c:	69a4      	ldr	r4, [r4, #24]
 8015b0e:	e7db      	b.n	8015ac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b14 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015b14:	2200      	movs	r2, #0
 8015b16:	8002      	strh	r2, [r0, #0]
 8015b18:	8042      	strh	r2, [r0, #2]
 8015b1a:	8082      	strh	r2, [r0, #4]
 8015b1c:	80c2      	strh	r2, [r0, #6]
 8015b1e:	4770      	bx	lr

08015b20 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015b20:	b570      	push	{r4, r5, r6, lr}
 8015b22:	460d      	mov	r5, r1
 8015b24:	4616      	mov	r6, r2
 8015b26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015b28:	b13c      	cbz	r4, 8015b3a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	4632      	mov	r2, r6
 8015b30:	4629      	mov	r1, r5
 8015b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b34:	4798      	blx	r3
 8015b36:	69a4      	ldr	r4, [r4, #24]
 8015b38:	e7f6      	b.n	8015b28 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015b3a:	bd70      	pop	{r4, r5, r6, pc}

08015b3c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015b3c:	b538      	push	{r3, r4, r5, lr}
 8015b3e:	460d      	mov	r5, r1
 8015b40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015b42:	b134      	cbz	r4, 8015b52 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015b44:	682b      	ldr	r3, [r5, #0]
 8015b46:	4621      	mov	r1, r4
 8015b48:	4628      	mov	r0, r5
 8015b4a:	689b      	ldr	r3, [r3, #8]
 8015b4c:	4798      	blx	r3
 8015b4e:	69a4      	ldr	r4, [r4, #24]
 8015b50:	e7f7      	b.n	8015b42 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015b52:	bd38      	pop	{r3, r4, r5, pc}

08015b54 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015b54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015b56:	b19b      	cbz	r3, 8015b80 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015b58:	428b      	cmp	r3, r1
 8015b5a:	d109      	bne.n	8015b70 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015b5c:	699a      	ldr	r2, [r3, #24]
 8015b5e:	2100      	movs	r1, #0
 8015b60:	6159      	str	r1, [r3, #20]
 8015b62:	6282      	str	r2, [r0, #40]	; 0x28
 8015b64:	b902      	cbnz	r2, 8015b68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015b66:	4770      	bx	lr
 8015b68:	6199      	str	r1, [r3, #24]
 8015b6a:	4770      	bx	lr
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	b13a      	cbz	r2, 8015b80 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015b70:	699a      	ldr	r2, [r3, #24]
 8015b72:	428a      	cmp	r2, r1
 8015b74:	d1fa      	bne.n	8015b6c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015b76:	698a      	ldr	r2, [r1, #24]
 8015b78:	619a      	str	r2, [r3, #24]
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015b80:	4770      	bx	lr

08015b82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015b82:	b410      	push	{r4}
 8015b84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015b86:	4604      	mov	r4, r0
 8015b88:	b92b      	cbnz	r3, 8015b96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	4611      	mov	r1, r2
 8015b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b94:	4718      	bx	r3
 8015b96:	b941      	cbnz	r1, 8015baa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015b98:	6193      	str	r3, [r2, #24]
 8015b9a:	6282      	str	r2, [r0, #40]	; 0x28
 8015b9c:	6154      	str	r4, [r2, #20]
 8015b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ba2:	4770      	bx	lr
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d0f9      	beq.n	8015b9e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015baa:	4299      	cmp	r1, r3
 8015bac:	6998      	ldr	r0, [r3, #24]
 8015bae:	d1f9      	bne.n	8015ba4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015bb0:	6190      	str	r0, [r2, #24]
 8015bb2:	618a      	str	r2, [r1, #24]
 8015bb4:	e7f2      	b.n	8015b9c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015bb8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015bb8:	4288      	cmp	r0, r1
 8015bba:	b508      	push	{r3, lr}
 8015bbc:	d105      	bne.n	8015bca <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015bbe:	4b11      	ldr	r3, [pc, #68]	; (8015c04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015bc0:	2123      	movs	r1, #35	; 0x23
 8015bc2:	4a11      	ldr	r2, [pc, #68]	; (8015c08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015bc4:	4811      	ldr	r0, [pc, #68]	; (8015c0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015bc6:	f00f f987 	bl	8024ed8 <__assert_func>
 8015bca:	694b      	ldr	r3, [r1, #20]
 8015bcc:	b11b      	cbz	r3, 8015bd6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015bce:	4b10      	ldr	r3, [pc, #64]	; (8015c10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015bd0:	2124      	movs	r1, #36	; 0x24
 8015bd2:	4a0d      	ldr	r2, [pc, #52]	; (8015c08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015bd4:	e7f6      	b.n	8015bc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015bd6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015bda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015bdc:	b913      	cbnz	r3, 8015be4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015bde:	6281      	str	r1, [r0, #40]	; 0x28
 8015be0:	bd08      	pop	{r3, pc}
 8015be2:	4613      	mov	r3, r2
 8015be4:	699a      	ldr	r2, [r3, #24]
 8015be6:	b12a      	cbz	r2, 8015bf4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015be8:	428b      	cmp	r3, r1
 8015bea:	d1fa      	bne.n	8015be2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015bec:	4b09      	ldr	r3, [pc, #36]	; (8015c14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015bee:	2135      	movs	r1, #53	; 0x35
 8015bf0:	4a05      	ldr	r2, [pc, #20]	; (8015c08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015bf2:	e7e7      	b.n	8015bc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015bf4:	428b      	cmp	r3, r1
 8015bf6:	d103      	bne.n	8015c00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015bf8:	4b06      	ldr	r3, [pc, #24]	; (8015c14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015bfa:	2138      	movs	r1, #56	; 0x38
 8015bfc:	4a02      	ldr	r2, [pc, #8]	; (8015c08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015bfe:	e7e1      	b.n	8015bc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015c00:	6199      	str	r1, [r3, #24]
 8015c02:	e7ed      	b.n	8015be0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015c04:	08027769 	.word	0x08027769
 8015c08:	080278c0 	.word	0x080278c0
 8015c0c:	08027795 	.word	0x08027795
 8015c10:	080277c8 	.word	0x080277c8
 8015c14:	080277fe 	.word	0x080277fe

08015c18 <_ZN8touchgfx4RectaNERKS0_>:
 8015c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c1c:	888b      	ldrh	r3, [r1, #4]
 8015c1e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015c22:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015c26:	444b      	add	r3, r9
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	fa0f f883 	sxth.w	r8, r3
 8015c2e:	45c2      	cmp	sl, r8
 8015c30:	da30      	bge.n	8015c94 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015c32:	8882      	ldrh	r2, [r0, #4]
 8015c34:	4452      	add	r2, sl
 8015c36:	b292      	uxth	r2, r2
 8015c38:	fa0f fe82 	sxth.w	lr, r2
 8015c3c:	45f1      	cmp	r9, lr
 8015c3e:	da29      	bge.n	8015c94 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015c40:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015c44:	88cc      	ldrh	r4, [r1, #6]
 8015c46:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015c4a:	442c      	add	r4, r5
 8015c4c:	b224      	sxth	r4, r4
 8015c4e:	42a6      	cmp	r6, r4
 8015c50:	da20      	bge.n	8015c94 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015c52:	88c7      	ldrh	r7, [r0, #6]
 8015c54:	4437      	add	r7, r6
 8015c56:	b2bf      	uxth	r7, r7
 8015c58:	fa0f fc87 	sxth.w	ip, r7
 8015c5c:	4565      	cmp	r5, ip
 8015c5e:	da19      	bge.n	8015c94 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015c60:	45ca      	cmp	sl, r9
 8015c62:	4654      	mov	r4, sl
 8015c64:	bfb8      	it	lt
 8015c66:	464c      	movlt	r4, r9
 8015c68:	42b5      	cmp	r5, r6
 8015c6a:	bfb8      	it	lt
 8015c6c:	4635      	movlt	r5, r6
 8015c6e:	45f0      	cmp	r8, lr
 8015c70:	bfc8      	it	gt
 8015c72:	4613      	movgt	r3, r2
 8015c74:	1b1b      	subs	r3, r3, r4
 8015c76:	8083      	strh	r3, [r0, #4]
 8015c78:	88ca      	ldrh	r2, [r1, #6]
 8015c7a:	884b      	ldrh	r3, [r1, #2]
 8015c7c:	8004      	strh	r4, [r0, #0]
 8015c7e:	4413      	add	r3, r2
 8015c80:	8045      	strh	r5, [r0, #2]
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	b21a      	sxth	r2, r3
 8015c86:	4594      	cmp	ip, r2
 8015c88:	bfb8      	it	lt
 8015c8a:	463b      	movlt	r3, r7
 8015c8c:	1b5b      	subs	r3, r3, r5
 8015c8e:	80c3      	strh	r3, [r0, #6]
 8015c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c94:	2300      	movs	r3, #0
 8015c96:	8003      	strh	r3, [r0, #0]
 8015c98:	8043      	strh	r3, [r0, #2]
 8015c9a:	8083      	strh	r3, [r0, #4]
 8015c9c:	80c3      	strh	r3, [r0, #6]
 8015c9e:	e7f7      	b.n	8015c90 <_ZN8touchgfx4RectaNERKS0_+0x78>

08015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015ca0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015ca4:	b12b      	cbz	r3, 8015cb2 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8015ca6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015caa:	fab0 f080 	clz	r0, r0
 8015cae:	0940      	lsrs	r0, r0, #5
 8015cb0:	4770      	bx	lr
 8015cb2:	2001      	movs	r0, #1
 8015cb4:	4770      	bx	lr

08015cb6 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cba:	2300      	movs	r3, #0
 8015cbc:	4604      	mov	r4, r0
 8015cbe:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015cc0:	8003      	strh	r3, [r0, #0]
 8015cc2:	8043      	strh	r3, [r0, #2]
 8015cc4:	8083      	strh	r3, [r0, #4]
 8015cc6:	80c3      	strh	r3, [r0, #6]
 8015cc8:	2d00      	cmp	r5, #0
 8015cca:	d040      	beq.n	8015d4e <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015ccc:	1d28      	adds	r0, r5, #4
 8015cce:	f7ff ffe7 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cd2:	b988      	cbnz	r0, 8015cf8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	f7ff ffe3 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cda:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015cde:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015ce2:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015ce6:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015cea:	b138      	cbz	r0, 8015cfc <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015cec:	8022      	strh	r2, [r4, #0]
 8015cee:	8063      	strh	r3, [r4, #2]
 8015cf0:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015cf4:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015cf8:	69ad      	ldr	r5, [r5, #24]
 8015cfa:	e7e5      	b.n	8015cc8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015cfc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015d00:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015d04:	4290      	cmp	r0, r2
 8015d06:	4607      	mov	r7, r0
 8015d08:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015d0c:	460e      	mov	r6, r1
 8015d0e:	bfa8      	it	ge
 8015d10:	4617      	movge	r7, r2
 8015d12:	4299      	cmp	r1, r3
 8015d14:	4472      	add	r2, lr
 8015d16:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015d1a:	bfa8      	it	ge
 8015d1c:	461e      	movge	r6, r3
 8015d1e:	4440      	add	r0, r8
 8015d20:	4471      	add	r1, lr
 8015d22:	4463      	add	r3, ip
 8015d24:	b200      	sxth	r0, r0
 8015d26:	8027      	strh	r7, [r4, #0]
 8015d28:	b212      	sxth	r2, r2
 8015d2a:	8066      	strh	r6, [r4, #2]
 8015d2c:	b209      	sxth	r1, r1
 8015d2e:	b21b      	sxth	r3, r3
 8015d30:	4290      	cmp	r0, r2
 8015d32:	bfac      	ite	ge
 8015d34:	ebc7 0200 	rsbge	r2, r7, r0
 8015d38:	ebc7 0202 	rsblt	r2, r7, r2
 8015d3c:	4299      	cmp	r1, r3
 8015d3e:	bfac      	ite	ge
 8015d40:	ebc6 0301 	rsbge	r3, r6, r1
 8015d44:	ebc6 0303 	rsblt	r3, r6, r3
 8015d48:	80a2      	strh	r2, [r4, #4]
 8015d4a:	80e3      	strh	r3, [r4, #6]
 8015d4c:	e7d4      	b.n	8015cf8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015d4e:	4620      	mov	r0, r4
 8015d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d54 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015d58:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015d5c:	b383      	cbz	r3, 8015dc0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015d5e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015d60:	b374      	cbz	r4, 8015dc0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015d62:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015d66:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015d6a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015d6e:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015d72:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015d76:	b303      	cbz	r3, 8015dba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015d78:	4668      	mov	r0, sp
 8015d7a:	1d21      	adds	r1, r4, #4
 8015d7c:	f8ad 5000 	strh.w	r5, [sp]
 8015d80:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015d84:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015d88:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015d8c:	f7ff ff44 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8015d90:	4668      	mov	r0, sp
 8015d92:	f7ff ff85 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d96:	b980      	cbnz	r0, 8015dba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015d98:	f8bd 3000 	ldrh.w	r3, [sp]
 8015d9c:	4669      	mov	r1, sp
 8015d9e:	88a2      	ldrh	r2, [r4, #4]
 8015da0:	4620      	mov	r0, r4
 8015da2:	1a9b      	subs	r3, r3, r2
 8015da4:	88e2      	ldrh	r2, [r4, #6]
 8015da6:	f8ad 3000 	strh.w	r3, [sp]
 8015daa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015dae:	1a9b      	subs	r3, r3, r2
 8015db0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015db4:	6823      	ldr	r3, [r4, #0]
 8015db6:	689b      	ldr	r3, [r3, #8]
 8015db8:	4798      	blx	r3
 8015dba:	69a4      	ldr	r4, [r4, #24]
 8015dbc:	2c00      	cmp	r4, #0
 8015dbe:	d1d8      	bne.n	8015d72 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015dc0:	b002      	add	sp, #8
 8015dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015dc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015dc8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015dcc:	460d      	mov	r5, r1
 8015dce:	4616      	mov	r6, r2
 8015dd0:	b323      	cbz	r3, 8015e1c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015dd2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015dd4:	b314      	cbz	r4, 8015e1c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015dd6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015dda:	b1eb      	cbz	r3, 8015e18 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015ddc:	6828      	ldr	r0, [r5, #0]
 8015dde:	466b      	mov	r3, sp
 8015de0:	6869      	ldr	r1, [r5, #4]
 8015de2:	c303      	stmia	r3!, {r0, r1}
 8015de4:	4668      	mov	r0, sp
 8015de6:	1d21      	adds	r1, r4, #4
 8015de8:	f7ff ff16 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8015dec:	4668      	mov	r0, sp
 8015dee:	f7ff ff57 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015df2:	b988      	cbnz	r0, 8015e18 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015df4:	f8bd 3000 	ldrh.w	r3, [sp]
 8015df8:	4669      	mov	r1, sp
 8015dfa:	88a2      	ldrh	r2, [r4, #4]
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	1a9b      	subs	r3, r3, r2
 8015e00:	88e2      	ldrh	r2, [r4, #6]
 8015e02:	f8ad 3000 	strh.w	r3, [sp]
 8015e06:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015e0a:	1a9b      	subs	r3, r3, r2
 8015e0c:	4632      	mov	r2, r6
 8015e0e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015e12:	6823      	ldr	r3, [r4, #0]
 8015e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e16:	4798      	blx	r3
 8015e18:	69a4      	ldr	r4, [r4, #24]
 8015e1a:	e7db      	b.n	8015dd4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015e1c:	b002      	add	sp, #8
 8015e1e:	bd70      	pop	{r4, r5, r6, pc}

08015e20 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015e20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015e24:	4770      	bx	lr

08015e26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015e26:	6803      	ldr	r3, [r0, #0]
 8015e28:	b513      	push	{r0, r1, r4, lr}
 8015e2a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015e2e:	2300      	movs	r3, #0
 8015e30:	e9cd 3300 	strd	r3, r3, [sp]
 8015e34:	466b      	mov	r3, sp
 8015e36:	47a0      	blx	r4
 8015e38:	b002      	add	sp, #8
 8015e3a:	bd10      	pop	{r4, pc}

08015e3c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015e42:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015e46:	4770      	bx	lr

08015e48 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015e48:	2301      	movs	r3, #1
 8015e4a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015e4e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015e52:	4770      	bx	lr

08015e54 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015e54:	6843      	ldr	r3, [r0, #4]
 8015e56:	2201      	movs	r2, #1
 8015e58:	725a      	strb	r2, [r3, #9]
 8015e5a:	6840      	ldr	r0, [r0, #4]
 8015e5c:	6803      	ldr	r3, [r0, #0]
 8015e5e:	691b      	ldr	r3, [r3, #16]
 8015e60:	4718      	bx	r3

08015e62 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015e62:	6840      	ldr	r0, [r0, #4]
 8015e64:	6803      	ldr	r3, [r0, #0]
 8015e66:	689b      	ldr	r3, [r3, #8]
 8015e68:	4718      	bx	r3
	...

08015e6c <_ZN8touchgfx3HAL10beginFrameEv>:
 8015e6c:	4b04      	ldr	r3, [pc, #16]	; (8015e80 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	b123      	cbz	r3, 8015e7c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015e72:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015e76:	f080 0001 	eor.w	r0, r0, #1
 8015e7a:	4770      	bx	lr
 8015e7c:	2001      	movs	r0, #1
 8015e7e:	4770      	bx	lr
 8015e80:	2000c506 	.word	0x2000c506

08015e84 <_ZN8touchgfx3HAL8endFrameEv>:
 8015e84:	b510      	push	{r4, lr}
 8015e86:	4604      	mov	r4, r0
 8015e88:	6840      	ldr	r0, [r0, #4]
 8015e8a:	6803      	ldr	r3, [r0, #0]
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	4798      	blx	r3
 8015e90:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015e94:	b113      	cbz	r3, 8015e9c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015e96:	2301      	movs	r3, #1
 8015e98:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015e9c:	bd10      	pop	{r4, pc}

08015e9e <_ZN8touchgfx3HAL9taskEntryEv>:
 8015e9e:	b508      	push	{r3, lr}
 8015ea0:	6803      	ldr	r3, [r0, #0]
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ea6:	4798      	blx	r3
 8015ea8:	6823      	ldr	r3, [r4, #0]
 8015eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015eac:	4620      	mov	r0, r4
 8015eae:	4798      	blx	r3
 8015eb0:	f7fd fec2 	bl	8013c38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015eb4:	6823      	ldr	r3, [r4, #0]
 8015eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015eb8:	e7f8      	b.n	8015eac <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015ebc <_ZN8touchgfx3HAL4tickEv>:
 8015ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	4d5c      	ldr	r5, [pc, #368]	; (8016034 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015ec8:	4798      	blx	r3
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	f000 8097 	beq.w	8015ffe <_ZN8touchgfx3HAL4tickEv+0x142>
 8015ed0:	2001      	movs	r0, #1
 8015ed2:	2600      	movs	r6, #0
 8015ed4:	f7fd fbc2 	bl	801365c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015ed8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015edc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015ee0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015ee4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015ee8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015eec:	b133      	cbz	r3, 8015efc <_ZN8touchgfx3HAL4tickEv+0x40>
 8015eee:	6823      	ldr	r3, [r4, #0]
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015ef6:	4798      	blx	r3
 8015ef8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015efc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015f00:	2601      	movs	r6, #1
 8015f02:	6862      	ldr	r2, [r4, #4]
 8015f04:	f083 0301 	eor.w	r3, r3, #1
 8015f08:	702e      	strb	r6, [r5, #0]
 8015f0a:	7253      	strb	r3, [r2, #9]
 8015f0c:	f002 fff0 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 8015f10:	6803      	ldr	r3, [r0, #0]
 8015f12:	4631      	mov	r1, r6
 8015f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f16:	4798      	blx	r3
 8015f18:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015f1c:	b90b      	cbnz	r3, 8015f22 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015f1e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015f22:	f002 ffe5 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 8015f26:	6803      	ldr	r3, [r0, #0]
 8015f28:	695b      	ldr	r3, [r3, #20]
 8015f2a:	4798      	blx	r3
 8015f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	691b      	ldr	r3, [r3, #16]
 8015f32:	4798      	blx	r3
 8015f34:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015f38:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015f3c:	3b01      	subs	r3, #1
 8015f3e:	b2db      	uxtb	r3, r3
 8015f40:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015f44:	b10a      	cbz	r2, 8015f4a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1eb      	bne.n	8015f22 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015f4a:	4a3b      	ldr	r2, [pc, #236]	; (8016038 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015f4c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015f50:	7813      	ldrb	r3, [r2, #0]
 8015f52:	3301      	adds	r3, #1
 8015f54:	b25b      	sxtb	r3, r3
 8015f56:	4299      	cmp	r1, r3
 8015f58:	7013      	strb	r3, [r2, #0]
 8015f5a:	dc10      	bgt.n	8015f7e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	68e0      	ldr	r0, [r4, #12]
 8015f60:	a902      	add	r1, sp, #8
 8015f62:	7013      	strb	r3, [r2, #0]
 8015f64:	aa03      	add	r2, sp, #12
 8015f66:	6803      	ldr	r3, [r0, #0]
 8015f68:	68db      	ldr	r3, [r3, #12]
 8015f6a:	4798      	blx	r3
 8015f6c:	6823      	ldr	r3, [r4, #0]
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	d051      	beq.n	8016016 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f76:	4620      	mov	r0, r4
 8015f78:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015f7c:	4798      	blx	r3
 8015f7e:	2300      	movs	r3, #0
 8015f80:	6960      	ldr	r0, [r4, #20]
 8015f82:	f88d 3007 	strb.w	r3, [sp, #7]
 8015f86:	b158      	cbz	r0, 8015fa0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015f88:	6803      	ldr	r3, [r0, #0]
 8015f8a:	f10d 0107 	add.w	r1, sp, #7
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	4798      	blx	r3
 8015f92:	b128      	cbz	r0, 8015fa0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f96:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015f9a:	6803      	ldr	r3, [r0, #0]
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	4798      	blx	r3
 8015fa0:	f104 001c 	add.w	r0, r4, #28
 8015fa4:	f00d facc 	bl	8023540 <_ZN8touchgfx8Gestures4tickEv>
 8015fa8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015fac:	b30b      	cbz	r3, 8015ff2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015fae:	6920      	ldr	r0, [r4, #16]
 8015fb0:	6803      	ldr	r3, [r0, #0]
 8015fb2:	691b      	ldr	r3, [r3, #16]
 8015fb4:	4798      	blx	r3
 8015fb6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015fb8:	4606      	mov	r6, r0
 8015fba:	b903      	cbnz	r3, 8015fbe <_ZN8touchgfx3HAL4tickEv+0x102>
 8015fbc:	6720      	str	r0, [r4, #112]	; 0x70
 8015fbe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015fc0:	4a1e      	ldr	r2, [pc, #120]	; (801603c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015fc2:	1af3      	subs	r3, r6, r3
 8015fc4:	4293      	cmp	r3, r2
 8015fc6:	d914      	bls.n	8015ff2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015fc8:	6920      	ldr	r0, [r4, #16]
 8015fca:	6803      	ldr	r3, [r0, #0]
 8015fcc:	699b      	ldr	r3, [r3, #24]
 8015fce:	4798      	blx	r3
 8015fd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015fd2:	2264      	movs	r2, #100	; 0x64
 8015fd4:	1af3      	subs	r3, r6, r3
 8015fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8015fda:	fbb0 f0f3 	udiv	r0, r0, r3
 8015fde:	2800      	cmp	r0, #0
 8015fe0:	dc1e      	bgt.n	8016020 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015fe2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015fe6:	6920      	ldr	r0, [r4, #16]
 8015fe8:	2100      	movs	r1, #0
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	69db      	ldr	r3, [r3, #28]
 8015fee:	4798      	blx	r3
 8015ff0:	6726      	str	r6, [r4, #112]	; 0x70
 8015ff2:	f002 ff7d 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 8015ff6:	6803      	ldr	r3, [r0, #0]
 8015ff8:	2100      	movs	r1, #0
 8015ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ffc:	4798      	blx	r3
 8015ffe:	6823      	ldr	r3, [r4, #0]
 8016000:	4620      	mov	r0, r4
 8016002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016006:	4798      	blx	r3
 8016008:	2001      	movs	r0, #1
 801600a:	f7fd fb32 	bl	8013672 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801600e:	2300      	movs	r3, #0
 8016010:	702b      	strb	r3, [r5, #0]
 8016012:	b004      	add	sp, #16
 8016014:	bd70      	pop	{r4, r5, r6, pc}
 8016016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801601a:	4620      	mov	r0, r4
 801601c:	4798      	blx	r3
 801601e:	e7ae      	b.n	8015f7e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016020:	2863      	cmp	r0, #99	; 0x63
 8016022:	bfcb      	itete	gt
 8016024:	2300      	movgt	r3, #0
 8016026:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801602a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801602e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016032:	e7d8      	b.n	8015fe6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016034:	2000c50c 	.word	0x2000c50c
 8016038:	2000c50d 	.word	0x2000c50d
 801603c:	05f5e100 	.word	0x05f5e100

08016040 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016040:	f7fd bd9a 	b.w	8013b78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016044 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016044:	6581      	str	r1, [r0, #88]	; 0x58
 8016046:	301c      	adds	r0, #28
 8016048:	f00d ba78 	b.w	802353c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801604c <_ZN8touchgfx3HAL5touchEll>:
 801604c:	b530      	push	{r4, r5, lr}
 801604e:	b087      	sub	sp, #28
 8016050:	4604      	mov	r4, r0
 8016052:	a804      	add	r0, sp, #16
 8016054:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016058:	f002 fd4e 	bl	8018af8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801605c:	9b04      	ldr	r3, [sp, #16]
 801605e:	a906      	add	r1, sp, #24
 8016060:	a803      	add	r0, sp, #12
 8016062:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016066:	9b05      	ldr	r3, [sp, #20]
 8016068:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801606c:	f002 fd92 	bl	8018b94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016070:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016074:	f104 001c 	add.w	r0, r4, #28
 8016078:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801607c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016080:	b189      	cbz	r1, 80160a6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016082:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	4613      	mov	r3, r2
 801608a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801608e:	462a      	mov	r2, r5
 8016090:	f00d fa64 	bl	802355c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016094:	b128      	cbz	r0, 80160a2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016096:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801609a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801609c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80160a0:	6623      	str	r3, [r4, #96]	; 0x60
 80160a2:	b007      	add	sp, #28
 80160a4:	bd30      	pop	{r4, r5, pc}
 80160a6:	f00d fa9d 	bl	80235e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80160aa:	2301      	movs	r3, #1
 80160ac:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80160b0:	e7f1      	b.n	8016096 <_ZN8touchgfx3HAL5touchEll+0x4a>

080160b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80160b2:	b570      	push	{r4, r5, r6, lr}
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d050      	beq.n	801615a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80160b8:	ea81 0002 	eor.w	r0, r1, r2
 80160bc:	07c6      	lsls	r6, r0, #31
 80160be:	d508      	bpl.n	80160d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80160c0:	3a01      	subs	r2, #1
 80160c2:	18cc      	adds	r4, r1, r3
 80160c4:	42a1      	cmp	r1, r4
 80160c6:	d048      	beq.n	801615a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80160c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80160cc:	f801 0b01 	strb.w	r0, [r1], #1
 80160d0:	e7f8      	b.n	80160c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80160d2:	07d5      	lsls	r5, r2, #31
 80160d4:	bf42      	ittt	mi
 80160d6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80160da:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80160de:	f801 0b01 	strbmi.w	r0, [r1], #1
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d915      	bls.n	8016112 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80160e6:	ea82 0001 	eor.w	r0, r2, r1
 80160ea:	0784      	lsls	r4, r0, #30
 80160ec:	d02d      	beq.n	801614a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80160ee:	1e94      	subs	r4, r2, #2
 80160f0:	4608      	mov	r0, r1
 80160f2:	18ce      	adds	r6, r1, r3
 80160f4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80160f8:	f820 5b02 	strh.w	r5, [r0], #2
 80160fc:	1a35      	subs	r5, r6, r0
 80160fe:	2d01      	cmp	r5, #1
 8016100:	d8f8      	bhi.n	80160f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016102:	1e98      	subs	r0, r3, #2
 8016104:	f003 0301 	and.w	r3, r3, #1
 8016108:	f020 0001 	bic.w	r0, r0, #1
 801610c:	3002      	adds	r0, #2
 801610e:	4401      	add	r1, r0
 8016110:	4402      	add	r2, r0
 8016112:	1f14      	subs	r4, r2, #4
 8016114:	4608      	mov	r0, r1
 8016116:	18ce      	adds	r6, r1, r3
 8016118:	1a35      	subs	r5, r6, r0
 801611a:	2d03      	cmp	r5, #3
 801611c:	d810      	bhi.n	8016140 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801611e:	089c      	lsrs	r4, r3, #2
 8016120:	00a0      	lsls	r0, r4, #2
 8016122:	4401      	add	r1, r0
 8016124:	3801      	subs	r0, #1
 8016126:	4402      	add	r2, r0
 8016128:	f06f 0003 	mvn.w	r0, #3
 801612c:	fb00 3404 	mla	r4, r0, r4, r3
 8016130:	440c      	add	r4, r1
 8016132:	42a1      	cmp	r1, r4
 8016134:	d011      	beq.n	801615a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016136:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801613a:	f801 3b01 	strb.w	r3, [r1], #1
 801613e:	e7f8      	b.n	8016132 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016140:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016144:	f840 5b04 	str.w	r5, [r0], #4
 8016148:	e7e6      	b.n	8016118 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801614a:	0790      	lsls	r0, r2, #30
 801614c:	d0e1      	beq.n	8016112 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801614e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016152:	3b02      	subs	r3, #2
 8016154:	f821 0b02 	strh.w	r0, [r1], #2
 8016158:	e7db      	b.n	8016112 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801615a:	2001      	movs	r0, #1
 801615c:	bd70      	pop	{r4, r5, r6, pc}

0801615e <_ZN8touchgfx3HAL7noTouchEv>:
 801615e:	b510      	push	{r4, lr}
 8016160:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016164:	4604      	mov	r4, r0
 8016166:	b153      	cbz	r3, 801617e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016168:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801616c:	2101      	movs	r1, #1
 801616e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016172:	301c      	adds	r0, #28
 8016174:	f00d fa36 	bl	80235e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016178:	2300      	movs	r3, #0
 801617a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801617e:	bd10      	pop	{r4, pc}

08016180 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016184:	4605      	mov	r5, r0
 8016186:	6980      	ldr	r0, [r0, #24]
 8016188:	b085      	sub	sp, #20
 801618a:	460f      	mov	r7, r1
 801618c:	4690      	mov	r8, r2
 801618e:	4699      	mov	r9, r3
 8016190:	b930      	cbnz	r0, 80161a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016192:	4b1f      	ldr	r3, [pc, #124]	; (8016210 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016194:	f44f 7198 	mov.w	r1, #304	; 0x130
 8016198:	4a1e      	ldr	r2, [pc, #120]	; (8016214 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801619a:	481f      	ldr	r0, [pc, #124]	; (8016218 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801619c:	f00e fe9c 	bl	8024ed8 <__assert_func>
 80161a0:	ac04      	add	r4, sp, #16
 80161a2:	2600      	movs	r6, #0
 80161a4:	f844 6d04 	str.w	r6, [r4, #-4]!
 80161a8:	6806      	ldr	r6, [r0, #0]
 80161aa:	9401      	str	r4, [sp, #4]
 80161ac:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80161b0:	9400      	str	r4, [sp, #0]
 80161b2:	6834      	ldr	r4, [r6, #0]
 80161b4:	47a0      	blx	r4
 80161b6:	4c19      	ldr	r4, [pc, #100]	; (801621c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80161b8:	4606      	mov	r6, r0
 80161ba:	f8a4 9000 	strh.w	r9, [r4]
 80161be:	f7f9 fc03 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 80161c2:	6803      	ldr	r3, [r0, #0]
 80161c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c6:	4798      	blx	r3
 80161c8:	280c      	cmp	r0, #12
 80161ca:	d80f      	bhi.n	80161ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80161cc:	e8df f000 	tbb	[pc, r0]
 80161d0:	1b1b1207 	.word	0x1b1b1207
 80161d4:	1b1b1b1b 	.word	0x1b1b1b1b
 80161d8:	1b1b1b1b 	.word	0x1b1b1b1b
 80161dc:	1b          	.byte	0x1b
 80161dd:	00          	.byte	0x00
 80161de:	8823      	ldrh	r3, [r4, #0]
 80161e0:	fb08 7203 	mla	r2, r8, r3, r7
 80161e4:	9b03      	ldr	r3, [sp, #12]
 80161e6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80161ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 80161ec:	4630      	mov	r0, r6
 80161ee:	b005      	add	sp, #20
 80161f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161f4:	8822      	ldrh	r2, [r4, #0]
 80161f6:	9b03      	ldr	r3, [sp, #12]
 80161f8:	fb08 7202 	mla	r2, r8, r2, r7
 80161fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016200:	1a9a      	subs	r2, r3, r2
 8016202:	63ea      	str	r2, [r5, #60]	; 0x3c
 8016204:	e7f2      	b.n	80161ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8016206:	4b06      	ldr	r3, [pc, #24]	; (8016220 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8016208:	f240 114d 	movw	r1, #333	; 0x14d
 801620c:	4a01      	ldr	r2, [pc, #4]	; (8016214 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801620e:	e7c4      	b.n	801619a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016210:	08027969 	.word	0x08027969
 8016214:	08027c7a 	.word	0x08027c7a
 8016218:	080279ae 	.word	0x080279ae
 801621c:	2000c502 	.word	0x2000c502
 8016220:	080279d4 	.word	0x080279d4

08016224 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016228:	4698      	mov	r8, r3
 801622a:	6803      	ldr	r3, [r0, #0]
 801622c:	b087      	sub	sp, #28
 801622e:	460e      	mov	r6, r1
 8016230:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8016232:	4617      	mov	r7, r2
 8016234:	4b0d      	ldr	r3, [pc, #52]	; (801626c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016236:	4604      	mov	r4, r0
 8016238:	f8b3 9000 	ldrh.w	r9, [r3]
 801623c:	f7f9 fbc4 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016240:	6803      	ldr	r3, [r0, #0]
 8016242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016244:	4798      	blx	r3
 8016246:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801624a:	463a      	mov	r2, r7
 801624c:	4631      	mov	r1, r6
 801624e:	9302      	str	r3, [sp, #8]
 8016250:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016254:	9301      	str	r3, [sp, #4]
 8016256:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801625a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	4620      	mov	r0, r4
 8016262:	4643      	mov	r3, r8
 8016264:	47a8      	blx	r5
 8016266:	b007      	add	sp, #28
 8016268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801626c:	2000c502 	.word	0x2000c502

08016270 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016274:	4606      	mov	r6, r0
 8016276:	b089      	sub	sp, #36	; 0x24
 8016278:	4610      	mov	r0, r2
 801627a:	460c      	mov	r4, r1
 801627c:	4691      	mov	r9, r2
 801627e:	4698      	mov	r8, r3
 8016280:	f005 f818 	bl	801b2b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016284:	2800      	cmp	r0, #0
 8016286:	f000 8092 	beq.w	80163ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801628a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80163c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801628e:	ad08      	add	r5, sp, #32
 8016290:	f8df b138 	ldr.w	fp, [pc, #312]	; 80163cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8016294:	f8da 0000 	ldr.w	r0, [sl]
 8016298:	4f4a      	ldr	r7, [pc, #296]	; (80163c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801629a:	6802      	ldr	r2, [r0, #0]
 801629c:	6a12      	ldr	r2, [r2, #32]
 801629e:	4790      	blx	r2
 80162a0:	f8da 0000 	ldr.w	r0, [sl]
 80162a4:	6802      	ldr	r2, [r0, #0]
 80162a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80162a8:	4790      	blx	r2
 80162aa:	f8bb 3000 	ldrh.w	r3, [fp]
 80162ae:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80162b2:	4628      	mov	r0, r5
 80162b4:	9300      	str	r3, [sp, #0]
 80162b6:	883b      	ldrh	r3, [r7, #0]
 80162b8:	9301      	str	r3, [sp, #4]
 80162ba:	f005 f8bb 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80162be:	f8ab 0000 	strh.w	r0, [fp]
 80162c2:	4628      	mov	r0, r5
 80162c4:	f005 f8f0 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80162c8:	f8da b000 	ldr.w	fp, [sl]
 80162cc:	8038      	strh	r0, [r7, #0]
 80162ce:	4648      	mov	r0, r9
 80162d0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80162d4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80162d8:	9302      	str	r3, [sp, #8]
 80162da:	f004 ffeb 	bl	801b2b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80162de:	f8da 2000 	ldr.w	r2, [sl]
 80162e2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80162e6:	63d0      	str	r0, [r2, #60]	; 0x3c
 80162e8:	4620      	mov	r0, r4
 80162ea:	6822      	ldr	r2, [r4, #0]
 80162ec:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80162f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80162f2:	2200      	movs	r2, #0
 80162f4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80162f8:	4611      	mov	r1, r2
 80162fa:	4798      	blx	r3
 80162fc:	2201      	movs	r2, #1
 80162fe:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8016302:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8016306:	1d22      	adds	r2, r4, #4
 8016308:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801630c:	2900      	cmp	r1, #0
 801630e:	d051      	beq.n	80163b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016310:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8016314:	2900      	cmp	r1, #0
 8016316:	d04d      	beq.n	80163b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016318:	6810      	ldr	r0, [r2, #0]
 801631a:	f10d 0c18 	add.w	ip, sp, #24
 801631e:	6851      	ldr	r1, [r2, #4]
 8016320:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016324:	4641      	mov	r1, r8
 8016326:	a806      	add	r0, sp, #24
 8016328:	f7ff fc76 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 801632c:	4628      	mov	r0, r5
 801632e:	f005 fa0d 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016332:	4680      	mov	r8, r0
 8016334:	f7f9 fb48 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016338:	6802      	ldr	r2, [r0, #0]
 801633a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801633c:	4790      	blx	r2
 801633e:	4580      	cmp	r8, r0
 8016340:	d03d      	beq.n	80163be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8016342:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016344:	b150      	cbz	r0, 801635c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8016346:	4628      	mov	r0, r5
 8016348:	f005 fa00 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801634c:	4605      	mov	r5, r0
 801634e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016350:	6803      	ldr	r3, [r0, #0]
 8016352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016354:	4798      	blx	r3
 8016356:	1a2b      	subs	r3, r5, r0
 8016358:	4258      	negs	r0, r3
 801635a:	4158      	adcs	r0, r3
 801635c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8016360:	2500      	movs	r5, #0
 8016362:	6963      	ldr	r3, [r4, #20]
 8016364:	4620      	mov	r0, r4
 8016366:	6822      	ldr	r2, [r4, #0]
 8016368:	a906      	add	r1, sp, #24
 801636a:	6165      	str	r5, [r4, #20]
 801636c:	9303      	str	r3, [sp, #12]
 801636e:	6892      	ldr	r2, [r2, #8]
 8016370:	4790      	blx	r2
 8016372:	9b03      	ldr	r3, [sp, #12]
 8016374:	4620      	mov	r0, r4
 8016376:	4652      	mov	r2, sl
 8016378:	6163      	str	r3, [r4, #20]
 801637a:	4649      	mov	r1, r9
 801637c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8016380:	6823      	ldr	r3, [r4, #0]
 8016382:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8016386:	4c10      	ldr	r4, [pc, #64]	; (80163c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8016388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801638a:	4798      	blx	r3
 801638c:	6820      	ldr	r0, [r4, #0]
 801638e:	9b02      	ldr	r3, [sp, #8]
 8016390:	9a00      	ldr	r2, [sp, #0]
 8016392:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8016396:	4b0d      	ldr	r3, [pc, #52]	; (80163cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8016398:	801a      	strh	r2, [r3, #0]
 801639a:	4b0a      	ldr	r3, [pc, #40]	; (80163c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801639c:	9a01      	ldr	r2, [sp, #4]
 801639e:	801a      	strh	r2, [r3, #0]
 80163a0:	6803      	ldr	r3, [r0, #0]
 80163a2:	6a1b      	ldr	r3, [r3, #32]
 80163a4:	4798      	blx	r3
 80163a6:	6820      	ldr	r0, [r4, #0]
 80163a8:	6803      	ldr	r3, [r0, #0]
 80163aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ac:	4798      	blx	r3
 80163ae:	b009      	add	sp, #36	; 0x24
 80163b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b4:	ab06      	add	r3, sp, #24
 80163b6:	6810      	ldr	r0, [r2, #0]
 80163b8:	6851      	ldr	r1, [r2, #4]
 80163ba:	c303      	stmia	r3!, {r0, r1}
 80163bc:	e7b6      	b.n	801632c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80163be:	2000      	movs	r0, #0
 80163c0:	e7cc      	b.n	801635c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80163c2:	bf00      	nop
 80163c4:	2000c504 	.word	0x2000c504
 80163c8:	2000c508 	.word	0x2000c508
 80163cc:	2000c502 	.word	0x2000c502

080163d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80163d0:	4b07      	ldr	r3, [pc, #28]	; (80163f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80163d2:	b510      	push	{r4, lr}
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	4604      	mov	r4, r0
 80163d8:	b13b      	cbz	r3, 80163ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80163da:	6803      	ldr	r3, [r0, #0]
 80163dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163de:	4798      	blx	r3
 80163e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80163e2:	4283      	cmp	r3, r0
 80163e4:	d101      	bne.n	80163ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80163e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80163e8:	bd10      	pop	{r4, pc}
 80163ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80163ec:	e7fc      	b.n	80163e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80163ee:	bf00      	nop
 80163f0:	2000c506 	.word	0x2000c506

080163f4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80163f4:	4b0b      	ldr	r3, [pc, #44]	; (8016424 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80163f6:	b510      	push	{r4, lr}
 80163f8:	781b      	ldrb	r3, [r3, #0]
 80163fa:	4604      	mov	r4, r0
 80163fc:	b95b      	cbnz	r3, 8016416 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80163fe:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016402:	2b02      	cmp	r3, #2
 8016404:	d007      	beq.n	8016416 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016406:	6840      	ldr	r0, [r0, #4]
 8016408:	f000 fbc8 	bl	8016b9c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801640c:	b118      	cbz	r0, 8016416 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801640e:	6862      	ldr	r2, [r4, #4]
 8016410:	7a53      	ldrb	r3, [r2, #9]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d0fc      	beq.n	8016410 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016416:	f7fd fba1 	bl	8013b5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801641a:	4620      	mov	r0, r4
 801641c:	f7ff ffd8 	bl	80163d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016420:	bd10      	pop	{r4, pc}
 8016422:	bf00      	nop
 8016424:	2000c506 	.word	0x2000c506

08016428 <_ZN8touchgfx3HAL10initializeEv>:
 8016428:	b510      	push	{r4, lr}
 801642a:	4604      	mov	r4, r0
 801642c:	f7fd fb72 	bl	8013b14 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016430:	6860      	ldr	r0, [r4, #4]
 8016432:	6803      	ldr	r3, [r0, #0]
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	4798      	blx	r3
 8016438:	68e0      	ldr	r0, [r4, #12]
 801643a:	6803      	ldr	r3, [r0, #0]
 801643c:	689b      	ldr	r3, [r3, #8]
 801643e:	4798      	blx	r3
 8016440:	6823      	ldr	r3, [r4, #0]
 8016442:	4620      	mov	r0, r4
 8016444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801644a:	4718      	bx	r3

0801644c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801644c:	b508      	push	{r3, lr}
 801644e:	290c      	cmp	r1, #12
 8016450:	d817      	bhi.n	8016482 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016452:	e8df f001 	tbb	[pc, r1]
 8016456:	090b      	.short	0x090b
 8016458:	0d0d0d07 	.word	0x0d0d0d07
 801645c:	1414140d 	.word	0x1414140d
 8016460:	1414      	.short	0x1414
 8016462:	0d          	.byte	0x0d
 8016463:	00          	.byte	0x00
 8016464:	2020      	movs	r0, #32
 8016466:	bd08      	pop	{r3, pc}
 8016468:	2018      	movs	r0, #24
 801646a:	e7fc      	b.n	8016466 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801646c:	2010      	movs	r0, #16
 801646e:	e7fa      	b.n	8016466 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016470:	4b05      	ldr	r3, [pc, #20]	; (8016488 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016472:	f44f 710c 	mov.w	r1, #560	; 0x230
 8016476:	4a05      	ldr	r2, [pc, #20]	; (801648c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016478:	4805      	ldr	r0, [pc, #20]	; (8016490 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801647a:	f00e fd2d 	bl	8024ed8 <__assert_func>
 801647e:	2008      	movs	r0, #8
 8016480:	e7f1      	b.n	8016466 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016482:	2000      	movs	r0, #0
 8016484:	e7ef      	b.n	8016466 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016486:	bf00      	nop
 8016488:	08027aa7 	.word	0x08027aa7
 801648c:	08027e3c 	.word	0x08027e3c
 8016490:	080279ae 	.word	0x080279ae

08016494 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016494:	b570      	push	{r4, r5, r6, lr}
 8016496:	460d      	mov	r5, r1
 8016498:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801649c:	4616      	mov	r6, r2
 801649e:	461c      	mov	r4, r3
 80164a0:	f7ff ffd4 	bl	801644c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80164a4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80164a8:	10c0      	asrs	r0, r0, #3
 80164aa:	fb06 5101 	mla	r1, r6, r1, r5
 80164ae:	fb00 4001 	mla	r0, r0, r1, r4
 80164b2:	bd70      	pop	{r4, r5, r6, pc}

080164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80164b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b8:	b08a      	sub	sp, #40	; 0x28
 80164ba:	f04f 0c00 	mov.w	ip, #0
 80164be:	4604      	mov	r4, r0
 80164c0:	469a      	mov	sl, r3
 80164c2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80164c6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80164ca:	f1b8 0f02 	cmp.w	r8, #2
 80164ce:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80164d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80164d6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80164da:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80164de:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80164e2:	f8cd c020 	str.w	ip, [sp, #32]
 80164e6:	d030      	beq.n	801654a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80164e8:	2bff      	cmp	r3, #255	; 0xff
 80164ea:	d12c      	bne.n	8016546 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80164ec:	4560      	cmp	r0, ip
 80164ee:	bf14      	ite	ne
 80164f0:	2004      	movne	r0, #4
 80164f2:	2001      	moveq	r0, #1
 80164f4:	9204      	str	r2, [sp, #16]
 80164f6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80164fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80164fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016502:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016506:	f8ad 501a 	strh.w	r5, [sp, #26]
 801650a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801650e:	4620      	mov	r0, r4
 8016510:	f7ff ff5e 	bl	80163d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016514:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016518:	4603      	mov	r3, r0
 801651a:	4651      	mov	r1, sl
 801651c:	4620      	mov	r0, r4
 801651e:	e9cd 9700 	strd	r9, r7, [sp]
 8016522:	f7ff ffb7 	bl	8016494 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016526:	f8ad 901e 	strh.w	r9, [sp, #30]
 801652a:	9005      	str	r0, [sp, #20]
 801652c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016530:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016534:	b106      	cbz	r6, 8016538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016536:	b98d      	cbnz	r5, 801655c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016538:	4b12      	ldr	r3, [pc, #72]	; (8016584 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801653a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801653e:	4a12      	ldr	r2, [pc, #72]	; (8016588 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016540:	4812      	ldr	r0, [pc, #72]	; (801658c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016542:	f00e fcc9 	bl	8024ed8 <__assert_func>
 8016546:	2004      	movs	r0, #4
 8016548:	e7d4      	b.n	80164f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801654a:	2bff      	cmp	r3, #255	; 0xff
 801654c:	d104      	bne.n	8016558 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801654e:	2800      	cmp	r0, #0
 8016550:	bf14      	ite	ne
 8016552:	2040      	movne	r0, #64	; 0x40
 8016554:	2020      	moveq	r0, #32
 8016556:	e7cd      	b.n	80164f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016558:	2040      	movs	r0, #64	; 0x40
 801655a:	e7cb      	b.n	80164f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801655c:	6823      	ldr	r3, [r4, #0]
 801655e:	4620      	mov	r0, r4
 8016560:	9d02      	ldr	r5, [sp, #8]
 8016562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016564:	4798      	blx	r3
 8016566:	4228      	tst	r0, r5
 8016568:	d104      	bne.n	8016574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801656a:	4b09      	ldr	r3, [pc, #36]	; (8016590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801656c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016570:	4a05      	ldr	r2, [pc, #20]	; (8016588 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016572:	e7e5      	b.n	8016540 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016574:	6860      	ldr	r0, [r4, #4]
 8016576:	a902      	add	r1, sp, #8
 8016578:	6803      	ldr	r3, [r0, #0]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	4798      	blx	r3
 801657e:	b00a      	add	sp, #40	; 0x28
 8016580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016584:	08027a2a 	.word	0x08027a2a
 8016588:	08027cde 	.word	0x08027cde
 801658c:	080279ae 	.word	0x080279ae
 8016590:	08027a62 	.word	0x08027a62

08016594 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016594:	b510      	push	{r4, lr}
 8016596:	b08a      	sub	sp, #40	; 0x28
 8016598:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801659c:	9408      	str	r4, [sp, #32]
 801659e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80165a2:	9407      	str	r4, [sp, #28]
 80165a4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80165a8:	9406      	str	r4, [sp, #24]
 80165aa:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80165ae:	9405      	str	r4, [sp, #20]
 80165b0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80165b4:	9404      	str	r4, [sp, #16]
 80165b6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80165ba:	9403      	str	r4, [sp, #12]
 80165bc:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80165c0:	9402      	str	r4, [sp, #8]
 80165c2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80165c6:	e9cd 3400 	strd	r3, r4, [sp]
 80165ca:	4613      	mov	r3, r2
 80165cc:	2200      	movs	r2, #0
 80165ce:	f7ff ff71 	bl	80164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80165d2:	b00a      	add	sp, #40	; 0x28
 80165d4:	bd10      	pop	{r4, pc}
	...

080165d8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80165d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165da:	b08b      	sub	sp, #44	; 0x2c
 80165dc:	4616      	mov	r6, r2
 80165de:	460d      	mov	r5, r1
 80165e0:	461f      	mov	r7, r3
 80165e2:	4604      	mov	r4, r0
 80165e4:	f7f9 f9f0 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 80165e8:	6803      	ldr	r3, [r0, #0]
 80165ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ec:	4798      	blx	r3
 80165ee:	4b0e      	ldr	r3, [pc, #56]	; (8016628 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80165f0:	2200      	movs	r2, #0
 80165f2:	4629      	mov	r1, r5
 80165f4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80165f8:	881b      	ldrh	r3, [r3, #0]
 80165fa:	4620      	mov	r0, r4
 80165fc:	9306      	str	r3, [sp, #24]
 80165fe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016602:	9305      	str	r3, [sp, #20]
 8016604:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016608:	9304      	str	r3, [sp, #16]
 801660a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801660e:	9303      	str	r3, [sp, #12]
 8016610:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016614:	9302      	str	r3, [sp, #8]
 8016616:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801661a:	e9cd 7300 	strd	r7, r3, [sp]
 801661e:	4633      	mov	r3, r6
 8016620:	f7ff ff48 	bl	80164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016624:	b00b      	add	sp, #44	; 0x2c
 8016626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016628:	2000c502 	.word	0x2000c502

0801662c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016630:	461f      	mov	r7, r3
 8016632:	4b14      	ldr	r3, [pc, #80]	; (8016684 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016634:	b08a      	sub	sp, #40	; 0x28
 8016636:	4616      	mov	r6, r2
 8016638:	f8b3 8000 	ldrh.w	r8, [r3]
 801663c:	460d      	mov	r5, r1
 801663e:	4604      	mov	r4, r0
 8016640:	f7f9 f9c2 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016644:	6803      	ldr	r3, [r0, #0]
 8016646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016648:	4798      	blx	r3
 801664a:	2302      	movs	r3, #2
 801664c:	9008      	str	r0, [sp, #32]
 801664e:	2200      	movs	r2, #0
 8016650:	4629      	mov	r1, r5
 8016652:	4620      	mov	r0, r4
 8016654:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016658:	2301      	movs	r3, #1
 801665a:	9305      	str	r3, [sp, #20]
 801665c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016660:	9304      	str	r3, [sp, #16]
 8016662:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016666:	9303      	str	r3, [sp, #12]
 8016668:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801666c:	9302      	str	r3, [sp, #8]
 801666e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016672:	e9cd 7300 	strd	r7, r3, [sp]
 8016676:	4633      	mov	r3, r6
 8016678:	f7ff ff1c 	bl	80164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801667c:	b00a      	add	sp, #40	; 0x28
 801667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016682:	bf00      	nop
 8016684:	2000c502 	.word	0x2000c502

08016688 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801668c:	b08b      	sub	sp, #44	; 0x2c
 801668e:	469b      	mov	fp, r3
 8016690:	4604      	mov	r4, r0
 8016692:	4692      	mov	sl, r2
 8016694:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016698:	2600      	movs	r6, #0
 801669a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801669e:	4689      	mov	r9, r1
 80166a0:	2fff      	cmp	r7, #255	; 0xff
 80166a2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80166a6:	9608      	str	r6, [sp, #32]
 80166a8:	bf14      	ite	ne
 80166aa:	2308      	movne	r3, #8
 80166ac:	2302      	moveq	r3, #2
 80166ae:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80166b2:	f7ff fe8d 	bl	80163d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166b6:	465a      	mov	r2, fp
 80166b8:	4603      	mov	r3, r0
 80166ba:	4651      	mov	r1, sl
 80166bc:	4620      	mov	r0, r4
 80166be:	e9cd 8500 	strd	r8, r5, [sp]
 80166c2:	f7ff fee7 	bl	8016494 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80166c6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80166ca:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80166ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80166d2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80166d6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80166da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80166de:	6823      	ldr	r3, [r4, #0]
 80166e0:	9d02      	ldr	r5, [sp, #8]
 80166e2:	9005      	str	r0, [sp, #20]
 80166e4:	4620      	mov	r0, r4
 80166e6:	f8ad 601c 	strh.w	r6, [sp, #28]
 80166ea:	f8ad 801e 	strh.w	r8, [sp, #30]
 80166ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80166f2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80166f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166f8:	4798      	blx	r3
 80166fa:	4228      	tst	r0, r5
 80166fc:	d106      	bne.n	801670c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80166fe:	4b07      	ldr	r3, [pc, #28]	; (801671c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016700:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8016704:	4a06      	ldr	r2, [pc, #24]	; (8016720 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016706:	4807      	ldr	r0, [pc, #28]	; (8016724 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016708:	f00e fbe6 	bl	8024ed8 <__assert_func>
 801670c:	6860      	ldr	r0, [r4, #4]
 801670e:	a902      	add	r1, sp, #8
 8016710:	6803      	ldr	r3, [r0, #0]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	4798      	blx	r3
 8016716:	b00b      	add	sp, #44	; 0x2c
 8016718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801671c:	08027a62 	.word	0x08027a62
 8016720:	08027da7 	.word	0x08027da7
 8016724:	080279ae 	.word	0x080279ae

08016728 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801672c:	461f      	mov	r7, r3
 801672e:	4b0b      	ldr	r3, [pc, #44]	; (801675c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016730:	460d      	mov	r5, r1
 8016732:	4616      	mov	r6, r2
 8016734:	f8b3 8000 	ldrh.w	r8, [r3]
 8016738:	4604      	mov	r4, r0
 801673a:	f7f9 f945 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 801673e:	6803      	ldr	r3, [r0, #0]
 8016740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016742:	4798      	blx	r3
 8016744:	463b      	mov	r3, r7
 8016746:	4632      	mov	r2, r6
 8016748:	4629      	mov	r1, r5
 801674a:	e9cd 8000 	strd	r8, r0, [sp]
 801674e:	4620      	mov	r0, r4
 8016750:	f7ff fea0 	bl	8016494 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016754:	b002      	add	sp, #8
 8016756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801675a:	bf00      	nop
 801675c:	2000c502 	.word	0x2000c502

08016760 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016764:	4698      	mov	r8, r3
 8016766:	b088      	sub	sp, #32
 8016768:	2300      	movs	r3, #0
 801676a:	4617      	mov	r7, r2
 801676c:	4604      	mov	r4, r0
 801676e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8016772:	9306      	str	r3, [sp, #24]
 8016774:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016778:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801677c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016780:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016784:	e9cd 3100 	strd	r3, r1, [sp]
 8016788:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801678c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016790:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016794:	f88d 301c 	strb.w	r3, [sp, #28]
 8016798:	f7ff fe1a 	bl	80163d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801679c:	4642      	mov	r2, r8
 801679e:	4603      	mov	r3, r0
 80167a0:	4639      	mov	r1, r7
 80167a2:	4620      	mov	r0, r4
 80167a4:	f7ff ffc0 	bl	8016728 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80167a8:	4b16      	ldr	r3, [pc, #88]	; (8016804 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80167aa:	9003      	str	r0, [sp, #12]
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80167b2:	f7f9 f909 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 80167b6:	6803      	ldr	r3, [r0, #0]
 80167b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ba:	4798      	blx	r3
 80167bc:	f88d 001e 	strb.w	r0, [sp, #30]
 80167c0:	f88d 001d 	strb.w	r0, [sp, #29]
 80167c4:	b106      	cbz	r6, 80167c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80167c6:	b935      	cbnz	r5, 80167d6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80167c8:	4b0f      	ldr	r3, [pc, #60]	; (8016808 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80167ca:	f240 11cd 	movw	r1, #461	; 0x1cd
 80167ce:	4a0f      	ldr	r2, [pc, #60]	; (801680c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80167d0:	480f      	ldr	r0, [pc, #60]	; (8016810 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80167d2:	f00e fb81 	bl	8024ed8 <__assert_func>
 80167d6:	6823      	ldr	r3, [r4, #0]
 80167d8:	4620      	mov	r0, r4
 80167da:	9d00      	ldr	r5, [sp, #0]
 80167dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167de:	4798      	blx	r3
 80167e0:	4228      	tst	r0, r5
 80167e2:	d104      	bne.n	80167ee <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80167e4:	4b0b      	ldr	r3, [pc, #44]	; (8016814 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80167e6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80167ea:	4a08      	ldr	r2, [pc, #32]	; (801680c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80167ec:	e7f0      	b.n	80167d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80167ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167f0:	4669      	mov	r1, sp
 80167f2:	6860      	ldr	r0, [r4, #4]
 80167f4:	9306      	str	r3, [sp, #24]
 80167f6:	6803      	ldr	r3, [r0, #0]
 80167f8:	685b      	ldr	r3, [r3, #4]
 80167fa:	4798      	blx	r3
 80167fc:	b008      	add	sp, #32
 80167fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016802:	bf00      	nop
 8016804:	2000c502 	.word	0x2000c502
 8016808:	08027a2a 	.word	0x08027a2a
 801680c:	08027b90 	.word	0x08027b90
 8016810:	080279ae 	.word	0x080279ae
 8016814:	08027a62 	.word	0x08027a62

08016818 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016818:	b570      	push	{r4, r5, r6, lr}
 801681a:	b08a      	sub	sp, #40	; 0x28
 801681c:	4604      	mov	r4, r0
 801681e:	466b      	mov	r3, sp
 8016820:	e883 0006 	stmia.w	r3, {r1, r2}
 8016824:	4b1f      	ldr	r3, [pc, #124]	; (80168a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	b933      	cbnz	r3, 8016838 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801682a:	4b1f      	ldr	r3, [pc, #124]	; (80168a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801682c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016830:	4a1e      	ldr	r2, [pc, #120]	; (80168ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016832:	481f      	ldr	r0, [pc, #124]	; (80168b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016834:	f00e fb50 	bl	8024ed8 <__assert_func>
 8016838:	2300      	movs	r3, #0
 801683a:	f8bd 5000 	ldrh.w	r5, [sp]
 801683e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016842:	9308      	str	r3, [sp, #32]
 8016844:	2301      	movs	r3, #1
 8016846:	9302      	str	r3, [sp, #8]
 8016848:	6803      	ldr	r3, [r0, #0]
 801684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801684c:	4798      	blx	r3
 801684e:	4632      	mov	r2, r6
 8016850:	4629      	mov	r1, r5
 8016852:	4603      	mov	r3, r0
 8016854:	4620      	mov	r0, r4
 8016856:	f7ff ff67 	bl	8016728 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801685a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801685c:	9003      	str	r0, [sp, #12]
 801685e:	9305      	str	r3, [sp, #20]
 8016860:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016864:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016868:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801686c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016870:	4b10      	ldr	r3, [pc, #64]	; (80168b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016872:	881b      	ldrh	r3, [r3, #0]
 8016874:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016878:	f8ad 301e 	strh.w	r3, [sp, #30]
 801687c:	f7f9 f8a4 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016880:	6803      	ldr	r3, [r0, #0]
 8016882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016884:	4798      	blx	r3
 8016886:	23ff      	movs	r3, #255	; 0xff
 8016888:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801688c:	a902      	add	r1, sp, #8
 801688e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016892:	6860      	ldr	r0, [r4, #4]
 8016894:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016898:	6803      	ldr	r3, [r0, #0]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	4798      	blx	r3
 801689e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80168a0:	b00a      	add	sp, #40	; 0x28
 80168a2:	bd70      	pop	{r4, r5, r6, pc}
 80168a4:	2000c507 	.word	0x2000c507
 80168a8:	080278fb 	.word	0x080278fb
 80168ac:	08027c34 	.word	0x08027c34
 80168b0:	080279ae 	.word	0x080279ae
 80168b4:	2000c502 	.word	0x2000c502

080168b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80168b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168ba:	b08b      	sub	sp, #44	; 0x2c
 80168bc:	4604      	mov	r4, r0
 80168be:	466d      	mov	r5, sp
 80168c0:	e885 0006 	stmia.w	r5, {r1, r2}
 80168c4:	461d      	mov	r5, r3
 80168c6:	2300      	movs	r3, #0
 80168c8:	f8bd 6000 	ldrh.w	r6, [sp]
 80168cc:	9308      	str	r3, [sp, #32]
 80168ce:	2301      	movs	r3, #1
 80168d0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80168d4:	9302      	str	r3, [sp, #8]
 80168d6:	6803      	ldr	r3, [r0, #0]
 80168d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168da:	4798      	blx	r3
 80168dc:	463a      	mov	r2, r7
 80168de:	4631      	mov	r1, r6
 80168e0:	4603      	mov	r3, r0
 80168e2:	4620      	mov	r0, r4
 80168e4:	f7ff ff20 	bl	8016728 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80168e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80168ec:	9003      	str	r0, [sp, #12]
 80168ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80168f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80168f6:	9505      	str	r5, [sp, #20]
 80168f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80168fc:	4b0d      	ldr	r3, [pc, #52]	; (8016934 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80168fe:	881b      	ldrh	r3, [r3, #0]
 8016900:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016906:	f8ad 301e 	strh.w	r3, [sp, #30]
 801690a:	f7f9 f85d 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 801690e:	6803      	ldr	r3, [r0, #0]
 8016910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016912:	4798      	blx	r3
 8016914:	23ff      	movs	r3, #255	; 0xff
 8016916:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801691a:	a902      	add	r1, sp, #8
 801691c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016920:	6860      	ldr	r0, [r4, #4]
 8016922:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016926:	6803      	ldr	r3, [r0, #0]
 8016928:	685b      	ldr	r3, [r3, #4]
 801692a:	4798      	blx	r3
 801692c:	4628      	mov	r0, r5
 801692e:	b00b      	add	sp, #44	; 0x2c
 8016930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016932:	bf00      	nop
 8016934:	2000c502 	.word	0x2000c502

08016938 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016938:	b570      	push	{r4, r5, r6, lr}
 801693a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801693e:	4604      	mov	r4, r0
 8016940:	b19b      	cbz	r3, 801696a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016942:	2002      	movs	r0, #2
 8016944:	f7fc fea0 	bl	8013688 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016948:	2300      	movs	r3, #0
 801694a:	4620      	mov	r0, r4
 801694c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016950:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016954:	6823      	ldr	r3, [r4, #0]
 8016956:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801695a:	f7ff fd39 	bl	80163d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801695e:	4601      	mov	r1, r0
 8016960:	4620      	mov	r0, r4
 8016962:	462b      	mov	r3, r5
 8016964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016968:	4718      	bx	r3
 801696a:	bd70      	pop	{r4, r5, r6, pc}

0801696c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801696c:	4770      	bx	lr

0801696e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801696e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016972:	1a13      	subs	r3, r2, r0
 8016974:	4258      	negs	r0, r3
 8016976:	4158      	adcs	r0, r3
 8016978:	4770      	bx	lr

0801697a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801697a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801697e:	1a9b      	subs	r3, r3, r2
 8016980:	2b00      	cmp	r3, #0
 8016982:	bfdc      	itt	le
 8016984:	6882      	ldrle	r2, [r0, #8]
 8016986:	189b      	addle	r3, r3, r2
 8016988:	2b01      	cmp	r3, #1
 801698a:	bfcc      	ite	gt
 801698c:	2000      	movgt	r0, #0
 801698e:	2001      	movle	r0, #1
 8016990:	4770      	bx	lr

08016992 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016992:	6902      	ldr	r2, [r0, #16]
 8016994:	6840      	ldr	r0, [r0, #4]
 8016996:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801699a:	4770      	bx	lr

0801699c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801699c:	6803      	ldr	r3, [r0, #0]
 801699e:	691b      	ldr	r3, [r3, #16]
 80169a0:	4718      	bx	r3

080169a2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80169a2:	4770      	bx	lr

080169a4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80169a4:	4770      	bx	lr
	...

080169a8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80169a8:	2301      	movs	r3, #1
 80169aa:	b570      	push	{r4, r5, r6, lr}
 80169ac:	7203      	strb	r3, [r0, #8]
 80169ae:	4604      	mov	r4, r0
 80169b0:	6840      	ldr	r0, [r0, #4]
 80169b2:	6803      	ldr	r3, [r0, #0]
 80169b4:	699b      	ldr	r3, [r3, #24]
 80169b6:	4798      	blx	r3
 80169b8:	6803      	ldr	r3, [r0, #0]
 80169ba:	4605      	mov	r5, r0
 80169bc:	2b08      	cmp	r3, #8
 80169be:	d01e      	beq.n	80169fe <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80169c0:	d80b      	bhi.n	80169da <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80169c2:	2b02      	cmp	r3, #2
 80169c4:	d027      	beq.n	8016a16 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80169c6:	2b04      	cmp	r3, #4
 80169c8:	d011      	beq.n	80169ee <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d028      	beq.n	8016a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80169ce:	4b17      	ldr	r3, [pc, #92]	; (8016a2c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80169d0:	218b      	movs	r1, #139	; 0x8b
 80169d2:	4a17      	ldr	r2, [pc, #92]	; (8016a30 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80169d4:	4817      	ldr	r0, [pc, #92]	; (8016a34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80169d6:	f00e fa7f 	bl	8024ed8 <__assert_func>
 80169da:	2b40      	cmp	r3, #64	; 0x40
 80169dc:	d020      	beq.n	8016a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80169de:	d801      	bhi.n	80169e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80169e0:	2b20      	cmp	r3, #32
 80169e2:	e7f3      	b.n	80169cc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80169e4:	2b80      	cmp	r3, #128	; 0x80
 80169e6:	d01b      	beq.n	8016a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80169e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169ec:	e7ee      	b.n	80169cc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80169ee:	6823      	ldr	r3, [r4, #0]
 80169f0:	7f01      	ldrb	r1, [r0, #28]
 80169f2:	4620      	mov	r0, r4
 80169f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169f6:	4798      	blx	r3
 80169f8:	6823      	ldr	r3, [r4, #0]
 80169fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169fc:	e006      	b.n	8016a0c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80169fe:	6823      	ldr	r3, [r4, #0]
 8016a00:	7f01      	ldrb	r1, [r0, #28]
 8016a02:	4620      	mov	r0, r4
 8016a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a06:	4798      	blx	r3
 8016a08:	6823      	ldr	r3, [r4, #0]
 8016a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a0c:	4629      	mov	r1, r5
 8016a0e:	4620      	mov	r0, r4
 8016a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a14:	4718      	bx	r3
 8016a16:	6823      	ldr	r3, [r4, #0]
 8016a18:	4620      	mov	r0, r4
 8016a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a1c:	4798      	blx	r3
 8016a1e:	e7f3      	b.n	8016a08 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016a20:	6823      	ldr	r3, [r4, #0]
 8016a22:	4620      	mov	r0, r4
 8016a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a26:	4798      	blx	r3
 8016a28:	e7e6      	b.n	80169f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016a2a:	bf00      	nop
 8016a2c:	08027e85 	.word	0x08027e85
 8016a30:	08027f94 	.word	0x08027f94
 8016a34:	08027eaa 	.word	0x08027eaa

08016a38 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016a38:	b570      	push	{r4, r5, r6, lr}
 8016a3a:	4604      	mov	r4, r0
 8016a3c:	460e      	mov	r6, r1
 8016a3e:	6860      	ldr	r0, [r4, #4]
 8016a40:	6803      	ldr	r3, [r0, #0]
 8016a42:	685b      	ldr	r3, [r3, #4]
 8016a44:	4798      	blx	r3
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d1f9      	bne.n	8016a3e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016a4a:	4d0b      	ldr	r5, [pc, #44]	; (8016a78 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016a4c:	6828      	ldr	r0, [r5, #0]
 8016a4e:	6803      	ldr	r3, [r0, #0]
 8016a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016a52:	4798      	blx	r3
 8016a54:	f7fd f89e 	bl	8013b94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016a58:	6860      	ldr	r0, [r4, #4]
 8016a5a:	4631      	mov	r1, r6
 8016a5c:	6803      	ldr	r3, [r0, #0]
 8016a5e:	689b      	ldr	r3, [r3, #8]
 8016a60:	4798      	blx	r3
 8016a62:	6823      	ldr	r3, [r4, #0]
 8016a64:	4620      	mov	r0, r4
 8016a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a68:	4798      	blx	r3
 8016a6a:	6828      	ldr	r0, [r5, #0]
 8016a6c:	6803      	ldr	r3, [r0, #0]
 8016a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016a74:	4718      	bx	r3
 8016a76:	bf00      	nop
 8016a78:	2000c508 	.word	0x2000c508

08016a7c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016a7c:	b508      	push	{r3, lr}
 8016a7e:	f7fd f86d 	bl	8013b5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016a86:	f7fd b877 	b.w	8013b78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016a8a <_ZN8touchgfx13DMA_Interface5startEv>:
 8016a8a:	b510      	push	{r4, lr}
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	6840      	ldr	r0, [r0, #4]
 8016a90:	6803      	ldr	r3, [r0, #0]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	4798      	blx	r3
 8016a96:	b948      	cbnz	r0, 8016aac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016a98:	7a63      	ldrb	r3, [r4, #9]
 8016a9a:	b13b      	cbz	r3, 8016aac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016a9c:	7a23      	ldrb	r3, [r4, #8]
 8016a9e:	b92b      	cbnz	r3, 8016aac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aaa:	4718      	bx	r3
 8016aac:	bd10      	pop	{r4, pc}
	...

08016ab0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016ab0:	b510      	push	{r4, lr}
 8016ab2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016ab6:	1b12      	subs	r2, r2, r4
 8016ab8:	2a00      	cmp	r2, #0
 8016aba:	bfdc      	itt	le
 8016abc:	6883      	ldrle	r3, [r0, #8]
 8016abe:	18d2      	addle	r2, r2, r3
 8016ac0:	2a01      	cmp	r2, #1
 8016ac2:	dd18      	ble.n	8016af6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016ac4:	6843      	ldr	r3, [r0, #4]
 8016ac6:	f101 021c 	add.w	r2, r1, #28
 8016aca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016ace:	f851 4b04 	ldr.w	r4, [r1], #4
 8016ad2:	4291      	cmp	r1, r2
 8016ad4:	f843 4b04 	str.w	r4, [r3], #4
 8016ad8:	d1f9      	bne.n	8016ace <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016ada:	880a      	ldrh	r2, [r1, #0]
 8016adc:	801a      	strh	r2, [r3, #0]
 8016ade:	788a      	ldrb	r2, [r1, #2]
 8016ae0:	709a      	strb	r2, [r3, #2]
 8016ae2:	68c3      	ldr	r3, [r0, #12]
 8016ae4:	6882      	ldr	r2, [r0, #8]
 8016ae6:	f3bf 8f5b 	dmb	ish
 8016aea:	3301      	adds	r3, #1
 8016aec:	429a      	cmp	r2, r3
 8016aee:	bfd8      	it	le
 8016af0:	1a9b      	suble	r3, r3, r2
 8016af2:	60c3      	str	r3, [r0, #12]
 8016af4:	bd10      	pop	{r4, pc}
 8016af6:	4b03      	ldr	r3, [pc, #12]	; (8016b04 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016af8:	2139      	movs	r1, #57	; 0x39
 8016afa:	4a03      	ldr	r2, [pc, #12]	; (8016b08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016afc:	4803      	ldr	r0, [pc, #12]	; (8016b0c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016afe:	f00e f9eb 	bl	8024ed8 <__assert_func>
 8016b02:	bf00      	nop
 8016b04:	08027ed0 	.word	0x08027ed0
 8016b08:	08027fc4 	.word	0x08027fc4
 8016b0c:	08027eaa 	.word	0x08027eaa

08016b10 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016b10:	b510      	push	{r4, lr}
 8016b12:	6803      	ldr	r3, [r0, #0]
 8016b14:	4604      	mov	r4, r0
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	4798      	blx	r3
 8016b1a:	b128      	cbz	r0, 8016b28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016b1c:	4b07      	ldr	r3, [pc, #28]	; (8016b3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016b1e:	213f      	movs	r1, #63	; 0x3f
 8016b20:	4a07      	ldr	r2, [pc, #28]	; (8016b40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016b22:	4808      	ldr	r0, [pc, #32]	; (8016b44 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016b24:	f00e f9d8 	bl	8024ed8 <__assert_func>
 8016b28:	6923      	ldr	r3, [r4, #16]
 8016b2a:	68a2      	ldr	r2, [r4, #8]
 8016b2c:	f3bf 8f5b 	dmb	ish
 8016b30:	3301      	adds	r3, #1
 8016b32:	429a      	cmp	r2, r3
 8016b34:	bfd8      	it	le
 8016b36:	1a9b      	suble	r3, r3, r2
 8016b38:	6123      	str	r3, [r4, #16]
 8016b3a:	bd10      	pop	{r4, pc}
 8016b3c:	08027ef3 	.word	0x08027ef3
 8016b40:	08028012 	.word	0x08028012
 8016b44:	08027eaa 	.word	0x08027eaa

08016b48 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016b48:	b570      	push	{r4, r5, r6, lr}
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	6840      	ldr	r0, [r0, #4]
 8016b4e:	6803      	ldr	r3, [r0, #0]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	4798      	blx	r3
 8016b54:	4605      	mov	r5, r0
 8016b56:	b930      	cbnz	r0, 8016b66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016b58:	7a23      	ldrb	r3, [r4, #8]
 8016b5a:	b123      	cbz	r3, 8016b66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016b5c:	6860      	ldr	r0, [r4, #4]
 8016b5e:	6803      	ldr	r3, [r0, #0]
 8016b60:	695b      	ldr	r3, [r3, #20]
 8016b62:	4798      	blx	r3
 8016b64:	7225      	strb	r5, [r4, #8]
 8016b66:	6860      	ldr	r0, [r4, #4]
 8016b68:	6803      	ldr	r3, [r0, #0]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	4798      	blx	r3
 8016b6e:	b928      	cbnz	r0, 8016b7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016b70:	6823      	ldr	r3, [r4, #0]
 8016b72:	4620      	mov	r0, r4
 8016b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b7a:	4718      	bx	r3
 8016b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b80:	f7fd b814 	b.w	8013bac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016b84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016b84:	b510      	push	{r4, lr}
 8016b86:	6082      	str	r2, [r0, #8]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	4c03      	ldr	r4, [pc, #12]	; (8016b98 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016b8c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016b90:	e9c0 4100 	strd	r4, r1, [r0]
 8016b94:	bd10      	pop	{r4, pc}
 8016b96:	bf00      	nop
 8016b98:	08027f78 	.word	0x08027f78

08016b9c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016b9c:	6840      	ldr	r0, [r0, #4]
 8016b9e:	6803      	ldr	r3, [r0, #0]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4718      	bx	r3

08016ba4 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016ba4:	2001      	movs	r0, #1
 8016ba6:	4770      	bx	lr

08016ba8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bac:	460d      	mov	r5, r1
 8016bae:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016bb2:	b085      	sub	sp, #20
 8016bb4:	4690      	mov	r8, r2
 8016bb6:	4411      	add	r1, r2
 8016bb8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016bbc:	4699      	mov	r9, r3
 8016bbe:	6803      	ldr	r3, [r0, #0]
 8016bc0:	60c1      	str	r1, [r0, #12]
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016bc6:	440a      	add	r2, r1
 8016bc8:	6102      	str	r2, [r0, #16]
 8016bca:	68db      	ldr	r3, [r3, #12]
 8016bcc:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016bd0:	4798      	blx	r3
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d039      	beq.n	8016c4a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8016bd6:	44c8      	add	r8, r9
 8016bd8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016bdc:	4445      	add	r5, r8
 8016bde:	6823      	ldr	r3, [r4, #0]
 8016be0:	f10d 020f 	add.w	r2, sp, #15
 8016be4:	a903      	add	r1, sp, #12
 8016be6:	4620      	mov	r0, r4
 8016be8:	9200      	str	r2, [sp, #0]
 8016bea:	f10d 020d 	add.w	r2, sp, #13
 8016bee:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016bf2:	f10d 030e 	add.w	r3, sp, #14
 8016bf6:	47c0      	blx	r8
 8016bf8:	b1f8      	cbz	r0, 8016c3a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016bfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016bfe:	7a20      	ldrb	r0, [r4, #8]
 8016c00:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016c04:	4358      	muls	r0, r3
 8016c06:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016c0a:	1c43      	adds	r3, r0, #1
 8016c0c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016c10:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016c14:	121b      	asrs	r3, r3, #8
 8016c16:	fb10 f003 	smulbb	r0, r0, r3
 8016c1a:	b283      	uxth	r3, r0
 8016c1c:	1c58      	adds	r0, r3, #1
 8016c1e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016c22:	6823      	ldr	r3, [r4, #0]
 8016c24:	1200      	asrs	r0, r0, #8
 8016c26:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016c2a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016c2e:	28ff      	cmp	r0, #255	; 0xff
 8016c30:	d10e      	bne.n	8016c50 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016c32:	9100      	str	r1, [sp, #0]
 8016c34:	4629      	mov	r1, r5
 8016c36:	4620      	mov	r0, r4
 8016c38:	47c0      	blx	r8
 8016c3a:	68e3      	ldr	r3, [r4, #12]
 8016c3c:	3e01      	subs	r6, #1
 8016c3e:	f105 0503 	add.w	r5, r5, #3
 8016c42:	f103 0301 	add.w	r3, r3, #1
 8016c46:	60e3      	str	r3, [r4, #12]
 8016c48:	d1c9      	bne.n	8016bde <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016c4a:	b005      	add	sp, #20
 8016c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c50:	fa1f fc80 	uxth.w	ip, r0
 8016c54:	43c0      	mvns	r0, r0
 8016c56:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016c5a:	fb12 f20c 	smulbb	r2, r2, ip
 8016c5e:	b2c0      	uxtb	r0, r0
 8016c60:	fb13 f30c 	smulbb	r3, r3, ip
 8016c64:	fb0e 2200 	mla	r2, lr, r0, r2
 8016c68:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016c6c:	fb11 f10c 	smulbb	r1, r1, ip
 8016c70:	fb0e 3300 	mla	r3, lr, r0, r3
 8016c74:	f895 e000 	ldrb.w	lr, [r5]
 8016c78:	b292      	uxth	r2, r2
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	fb0e 1000 	mla	r0, lr, r0, r1
 8016c80:	1c59      	adds	r1, r3, #1
 8016c82:	b280      	uxth	r0, r0
 8016c84:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016c88:	1c51      	adds	r1, r2, #1
 8016c8a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016c8e:	1c41      	adds	r1, r0, #1
 8016c90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016c94:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016c98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016c9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016ca0:	9000      	str	r0, [sp, #0]
 8016ca2:	e7c7      	b.n	8016c34 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016ca4 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016ca4:	f89d 0000 	ldrb.w	r0, [sp]
 8016ca8:	704b      	strb	r3, [r1, #1]
 8016caa:	7008      	strb	r0, [r1, #0]
 8016cac:	708a      	strb	r2, [r1, #2]
 8016cae:	4770      	bx	lr

08016cb0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016cb0:	4413      	add	r3, r2
 8016cb2:	7dc2      	ldrb	r2, [r0, #23]
 8016cb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016cb8:	4419      	add	r1, r3
 8016cba:	7a03      	ldrb	r3, [r0, #8]
 8016cbc:	435a      	muls	r2, r3
 8016cbe:	1c53      	adds	r3, r2, #1
 8016cc0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016cc4:	121b      	asrs	r3, r3, #8
 8016cc6:	2bff      	cmp	r3, #255	; 0xff
 8016cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cca:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016cce:	d13e      	bne.n	8016d4e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016cd0:	4427      	add	r7, r4
 8016cd2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016cd6:	3103      	adds	r1, #3
 8016cd8:	7d86      	ldrb	r6, [r0, #22]
 8016cda:	2bff      	cmp	r3, #255	; 0xff
 8016cdc:	d10a      	bne.n	8016cf4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016cde:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016ce2:	7d43      	ldrb	r3, [r0, #21]
 8016ce4:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016ce8:	7d03      	ldrb	r3, [r0, #20]
 8016cea:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016cee:	42a7      	cmp	r7, r4
 8016cf0:	d1ef      	bne.n	8016cd2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	43db      	mvns	r3, r3
 8016cf8:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016cfc:	fb16 f602 	smulbb	r6, r6, r2
 8016d00:	b2db      	uxtb	r3, r3
 8016d02:	fb05 6503 	mla	r5, r5, r3, r6
 8016d06:	b2ad      	uxth	r5, r5
 8016d08:	1c6e      	adds	r6, r5, #1
 8016d0a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016d0e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016d12:	fb16 f603 	smulbb	r6, r6, r3
 8016d16:	122d      	asrs	r5, r5, #8
 8016d18:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016d1c:	7d45      	ldrb	r5, [r0, #21]
 8016d1e:	fb05 6502 	mla	r5, r5, r2, r6
 8016d22:	b2ad      	uxth	r5, r5
 8016d24:	1c6e      	adds	r6, r5, #1
 8016d26:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016d2a:	122d      	asrs	r5, r5, #8
 8016d2c:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016d30:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016d34:	7d06      	ldrb	r6, [r0, #20]
 8016d36:	fb15 f303 	smulbb	r3, r5, r3
 8016d3a:	fb06 3202 	mla	r2, r6, r2, r3
 8016d3e:	b292      	uxth	r2, r2
 8016d40:	1c53      	adds	r3, r2, #1
 8016d42:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016d46:	1212      	asrs	r2, r2, #8
 8016d48:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016d4c:	e7cf      	b.n	8016cee <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016d4e:	b2de      	uxtb	r6, r3
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d0ce      	beq.n	8016cf2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8016d54:	3103      	adds	r1, #3
 8016d56:	4427      	add	r7, r4
 8016d58:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016d5c:	3103      	adds	r1, #3
 8016d5e:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016d62:	fb02 f306 	mul.w	r3, r2, r6
 8016d66:	42bc      	cmp	r4, r7
 8016d68:	f103 0201 	add.w	r2, r3, #1
 8016d6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016d70:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016d74:	b295      	uxth	r5, r2
 8016d76:	ea6f 0202 	mvn.w	r2, r2
 8016d7a:	b2d3      	uxtb	r3, r2
 8016d7c:	7d82      	ldrb	r2, [r0, #22]
 8016d7e:	fb1c fc03 	smulbb	ip, ip, r3
 8016d82:	fb02 c205 	mla	r2, r2, r5, ip
 8016d86:	b292      	uxth	r2, r2
 8016d88:	f102 0c01 	add.w	ip, r2, #1
 8016d8c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016d90:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016d94:	fb1c fc03 	smulbb	ip, ip, r3
 8016d98:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016d9c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016da0:	7d42      	ldrb	r2, [r0, #21]
 8016da2:	fb02 c205 	mla	r2, r2, r5, ip
 8016da6:	b292      	uxth	r2, r2
 8016da8:	f102 0c01 	add.w	ip, r2, #1
 8016dac:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016db0:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016db4:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016db8:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016dbc:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016dc0:	fb12 f303 	smulbb	r3, r2, r3
 8016dc4:	fb0c 3305 	mla	r3, ip, r5, r3
 8016dc8:	b29b      	uxth	r3, r3
 8016dca:	f103 0201 	add.w	r2, r3, #1
 8016dce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016dd2:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016dd6:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016dda:	d1bd      	bne.n	8016d58 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016ddc:	e789      	b.n	8016cf2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016dde <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016dde:	b510      	push	{r4, lr}
 8016de0:	7d04      	ldrb	r4, [r0, #20]
 8016de2:	700c      	strb	r4, [r1, #0]
 8016de4:	7d41      	ldrb	r1, [r0, #21]
 8016de6:	7011      	strb	r1, [r2, #0]
 8016de8:	7d82      	ldrb	r2, [r0, #22]
 8016dea:	701a      	strb	r2, [r3, #0]
 8016dec:	9b02      	ldr	r3, [sp, #8]
 8016dee:	7dc2      	ldrb	r2, [r0, #23]
 8016df0:	2001      	movs	r0, #1
 8016df2:	701a      	strb	r2, [r3, #0]
 8016df4:	bd10      	pop	{r4, pc}

08016df6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8016df6:	b570      	push	{r4, r5, r6, lr}
 8016df8:	4616      	mov	r6, r2
 8016dfa:	4604      	mov	r4, r0
 8016dfc:	460d      	mov	r5, r1
 8016dfe:	f7f8 fde3 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	4629      	mov	r1, r5
 8016e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e08:	4798      	blx	r3
 8016e0a:	7520      	strb	r0, [r4, #20]
 8016e0c:	f7f8 fddc 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016e10:	6803      	ldr	r3, [r0, #0]
 8016e12:	4629      	mov	r1, r5
 8016e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e16:	4798      	blx	r3
 8016e18:	7560      	strb	r0, [r4, #21]
 8016e1a:	f7f8 fdd5 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016e1e:	6803      	ldr	r3, [r0, #0]
 8016e20:	4629      	mov	r1, r5
 8016e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e24:	4798      	blx	r3
 8016e26:	75e6      	strb	r6, [r4, #23]
 8016e28:	75a0      	strb	r0, [r4, #22]
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}

08016e2c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e2e:	460e      	mov	r6, r1
 8016e30:	4617      	mov	r7, r2
 8016e32:	4604      	mov	r4, r0
 8016e34:	f000 f832 	bl	8016e9c <_ZN8touchgfx15AbstractPainterC1Ev>
 8016e38:	4b12      	ldr	r3, [pc, #72]	; (8016e84 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016e3a:	6023      	str	r3, [r4, #0]
 8016e3c:	f7f8 fdc4 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8016e40:	6803      	ldr	r3, [r0, #0]
 8016e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e44:	4798      	blx	r3
 8016e46:	1e43      	subs	r3, r0, #1
 8016e48:	425d      	negs	r5, r3
 8016e4a:	415d      	adcs	r5, r3
 8016e4c:	4b0e      	ldr	r3, [pc, #56]	; (8016e88 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016e52:	b130      	cbz	r0, 8016e62 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8016e54:	6803      	ldr	r3, [r0, #0]
 8016e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e58:	4798      	blx	r3
 8016e5a:	2801      	cmp	r0, #1
 8016e5c:	bf08      	it	eq
 8016e5e:	f045 0501 	orreq.w	r5, r5, #1
 8016e62:	b92d      	cbnz	r5, 8016e70 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8016e64:	4b09      	ldr	r3, [pc, #36]	; (8016e8c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8016e66:	2129      	movs	r1, #41	; 0x29
 8016e68:	4a09      	ldr	r2, [pc, #36]	; (8016e90 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016e6a:	480a      	ldr	r0, [pc, #40]	; (8016e94 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016e6c:	f00e f834 	bl	8024ed8 <__assert_func>
 8016e70:	4b09      	ldr	r3, [pc, #36]	; (8016e98 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8016e72:	4620      	mov	r0, r4
 8016e74:	463a      	mov	r2, r7
 8016e76:	4631      	mov	r1, r6
 8016e78:	6023      	str	r3, [r4, #0]
 8016e7a:	f7ff ffbc 	bl	8016df6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016e7e:	4620      	mov	r0, r4
 8016e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e82:	bf00      	nop
 8016e84:	0802804c 	.word	0x0802804c
 8016e88:	2000c508 	.word	0x2000c508
 8016e8c:	08028064 	.word	0x08028064
 8016e90:	08028128 	.word	0x08028128
 8016e94:	080280c2 	.word	0x080280c2
 8016e98:	08028110 	.word	0x08028110

08016e9c <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016e9c:	4a03      	ldr	r2, [pc, #12]	; (8016eac <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016e9e:	6002      	str	r2, [r0, #0]
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	6042      	str	r2, [r0, #4]
 8016ea4:	22ff      	movs	r2, #255	; 0xff
 8016ea6:	7202      	strb	r2, [r0, #8]
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop
 8016eac:	0802816c 	.word	0x0802816c

08016eb0 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016eb0:	4770      	bx	lr

08016eb2 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016eb2:	8081      	strh	r1, [r0, #4]
 8016eb4:	80c2      	strh	r2, [r0, #6]
 8016eb6:	4770      	bx	lr

08016eb8 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016eb8:	7201      	strb	r1, [r0, #8]
 8016eba:	4770      	bx	lr

08016ebc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016ebc:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016ec0:	4770      	bx	lr

08016ec2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016ec2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016ec6:	4770      	bx	lr

08016ec8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016ec8:	6281      	str	r1, [r0, #40]	; 0x28
 8016eca:	4770      	bx	lr

08016ecc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016ecc:	b513      	push	{r0, r1, r4, lr}
 8016ece:	6803      	ldr	r3, [r0, #0]
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	4601      	mov	r1, r0
 8016ed4:	4668      	mov	r0, sp
 8016ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ed8:	4798      	blx	r3
 8016eda:	6823      	ldr	r3, [r4, #0]
 8016edc:	4669      	mov	r1, sp
 8016ede:	4620      	mov	r0, r4
 8016ee0:	691b      	ldr	r3, [r3, #16]
 8016ee2:	4798      	blx	r3
 8016ee4:	b002      	add	sp, #8
 8016ee6:	bd10      	pop	{r4, pc}

08016ee8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016ee8:	b510      	push	{r4, lr}
 8016eea:	2200      	movs	r2, #0
 8016eec:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016ef0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016ef4:	8002      	strh	r2, [r0, #0]
 8016ef6:	8042      	strh	r2, [r0, #2]
 8016ef8:	8084      	strh	r4, [r0, #4]
 8016efa:	80c1      	strh	r1, [r0, #6]
 8016efc:	bd10      	pop	{r4, pc}

08016efe <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016efe:	2200      	movs	r2, #0
 8016f00:	8002      	strh	r2, [r0, #0]
 8016f02:	8042      	strh	r2, [r0, #2]
 8016f04:	8082      	strh	r2, [r0, #4]
 8016f06:	80c2      	strh	r2, [r0, #6]
 8016f08:	4770      	bx	lr
	...

08016f0c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016f0c:	b508      	push	{r3, lr}
 8016f0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016f10:	b928      	cbnz	r0, 8016f1e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016f12:	4b03      	ldr	r3, [pc, #12]	; (8016f20 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016f14:	2127      	movs	r1, #39	; 0x27
 8016f16:	4a03      	ldr	r2, [pc, #12]	; (8016f24 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016f18:	4803      	ldr	r0, [pc, #12]	; (8016f28 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016f1a:	f00d ffdd 	bl	8024ed8 <__assert_func>
 8016f1e:	bd08      	pop	{r3, pc}
 8016f20:	08028178 	.word	0x08028178
 8016f24:	0802825c 	.word	0x0802825c
 8016f28:	0802819f 	.word	0x0802819f

08016f2c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	b089      	sub	sp, #36	; 0x24
 8016f32:	4604      	mov	r4, r0
 8016f34:	6808      	ldr	r0, [r1, #0]
 8016f36:	f04f 0a00 	mov.w	sl, #0
 8016f3a:	6849      	ldr	r1, [r1, #4]
 8016f3c:	ab02      	add	r3, sp, #8
 8016f3e:	f04f 0b01 	mov.w	fp, #1
 8016f42:	c303      	stmia	r3!, {r0, r1}
 8016f44:	4b3f      	ldr	r3, [pc, #252]	; (8017044 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8016f46:	4621      	mov	r1, r4
 8016f48:	a804      	add	r0, sp, #16
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	2b01      	cmp	r3, #1
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f52:	bf1f      	itttt	ne
 8016f54:	f10d 0906 	addne.w	r9, sp, #6
 8016f58:	ae03      	addne	r6, sp, #12
 8016f5a:	f10d 050e 	addne.w	r5, sp, #14
 8016f5e:	f10d 080a 	addne.w	r8, sp, #10
 8016f62:	bf01      	itttt	eq
 8016f64:	f10d 090e 	addeq.w	r9, sp, #14
 8016f68:	f10d 0606 	addeq.w	r6, sp, #6
 8016f6c:	ad03      	addeq	r5, sp, #12
 8016f6e:	f10d 0808 	addeq.w	r8, sp, #8
 8016f72:	4798      	blx	r3
 8016f74:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016f78:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d056      	beq.n	801702e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016f80:	4293      	cmp	r3, r2
 8016f82:	bfa8      	it	ge
 8016f84:	4613      	movge	r3, r2
 8016f86:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016f8a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016f8e:	2f00      	cmp	r7, #0
 8016f90:	dd34      	ble.n	8016ffc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016f92:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016f96:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016f9a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016f9e:	4484      	add	ip, r0
 8016fa0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016fa4:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016fa8:	fa0f fc8c 	sxth.w	ip, ip
 8016fac:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016fb0:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016fb4:	4562      	cmp	r2, ip
 8016fb6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016fba:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016fbe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016fc2:	da29      	bge.n	8017018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016fc4:	4472      	add	r2, lr
 8016fc6:	b212      	sxth	r2, r2
 8016fc8:	4290      	cmp	r0, r2
 8016fca:	da25      	bge.n	8017018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016fcc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016fd0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016fd4:	4402      	add	r2, r0
 8016fd6:	b212      	sxth	r2, r2
 8016fd8:	4293      	cmp	r3, r2
 8016fda:	da1d      	bge.n	8017018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016fdc:	440b      	add	r3, r1
 8016fde:	b21b      	sxth	r3, r3
 8016fe0:	4298      	cmp	r0, r3
 8016fe2:	da19      	bge.n	8017018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016fe4:	6823      	ldr	r3, [r4, #0]
 8016fe6:	a906      	add	r1, sp, #24
 8016fe8:	4620      	mov	r0, r4
 8016fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fec:	4798      	blx	r3
 8016fee:	b998      	cbnz	r0, 8017018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ff0:	107f      	asrs	r7, r7, #1
 8016ff2:	f04f 0a01 	mov.w	sl, #1
 8016ff6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016ffa:	e7c6      	b.n	8016f8a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016ffc:	d10c      	bne.n	8017018 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ffe:	f8ad b006 	strh.w	fp, [sp, #6]
 8017002:	f8b8 2000 	ldrh.w	r2, [r8]
 8017006:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801700a:	440a      	add	r2, r1
 801700c:	f8a8 2000 	strh.w	r2, [r8]
 8017010:	882b      	ldrh	r3, [r5, #0]
 8017012:	1a5b      	subs	r3, r3, r1
 8017014:	802b      	strh	r3, [r5, #0]
 8017016:	e7ad      	b.n	8016f74 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017018:	f1ba 0f00 	cmp.w	sl, #0
 801701c:	d0f1      	beq.n	8017002 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801701e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017022:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017026:	429a      	cmp	r2, r3
 8017028:	bf08      	it	eq
 801702a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801702c:	e7e9      	b.n	8017002 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801702e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017032:	429a      	cmp	r2, r3
 8017034:	bf04      	itt	eq
 8017036:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801703a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801703c:	b009      	add	sp, #36	; 0x24
 801703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017042:	bf00      	nop
 8017044:	2000c500 	.word	0x2000c500

08017048 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017048:	2200      	movs	r2, #0
 801704a:	2101      	movs	r1, #1
 801704c:	8082      	strh	r2, [r0, #4]
 801704e:	80c2      	strh	r2, [r0, #6]
 8017050:	8102      	strh	r2, [r0, #8]
 8017052:	8142      	strh	r2, [r0, #10]
 8017054:	8182      	strh	r2, [r0, #12]
 8017056:	81c2      	strh	r2, [r0, #14]
 8017058:	8202      	strh	r2, [r0, #16]
 801705a:	8242      	strh	r2, [r0, #18]
 801705c:	61c2      	str	r2, [r0, #28]
 801705e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017062:	6282      	str	r2, [r0, #40]	; 0x28
 8017064:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017068:	4905      	ldr	r1, [pc, #20]	; (8017080 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801706a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801706e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017072:	6001      	str	r1, [r0, #0]
 8017074:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017076:	22ff      	movs	r2, #255	; 0xff
 8017078:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801707c:	4770      	bx	lr
 801707e:	bf00      	nop
 8017080:	080281e4 	.word	0x080281e4

08017084 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8017084:	4770      	bx	lr

08017086 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8017086:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801708a:	4602      	mov	r2, r0
 801708c:	cb03      	ldmia	r3!, {r0, r1}
 801708e:	6010      	str	r0, [r2, #0]
 8017090:	4610      	mov	r0, r2
 8017092:	6051      	str	r1, [r2, #4]
 8017094:	4770      	bx	lr

08017096 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801709a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801709e:	b395      	cbz	r5, 8017106 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80170a0:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80170a4:	f1bc 0f00 	cmp.w	ip, #0
 80170a8:	d02d      	beq.n	8017106 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80170aa:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80170ae:	f9b1 e000 	ldrsh.w	lr, [r1]
 80170b2:	b354      	cbz	r4, 801710a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80170b4:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80170b8:	b33f      	cbz	r7, 801710a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80170ba:	f9b0 8000 	ldrsh.w	r8, [r0]
 80170be:	4475      	add	r5, lr
 80170c0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80170c4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80170c8:	45f0      	cmp	r8, lr
 80170ca:	4646      	mov	r6, r8
 80170cc:	4444      	add	r4, r8
 80170ce:	bfa8      	it	ge
 80170d0:	4676      	movge	r6, lr
 80170d2:	4293      	cmp	r3, r2
 80170d4:	4619      	mov	r1, r3
 80170d6:	443b      	add	r3, r7
 80170d8:	bfa8      	it	ge
 80170da:	4611      	movge	r1, r2
 80170dc:	4462      	add	r2, ip
 80170de:	b22d      	sxth	r5, r5
 80170e0:	8006      	strh	r6, [r0, #0]
 80170e2:	b224      	sxth	r4, r4
 80170e4:	8041      	strh	r1, [r0, #2]
 80170e6:	b212      	sxth	r2, r2
 80170e8:	b21b      	sxth	r3, r3
 80170ea:	42a5      	cmp	r5, r4
 80170ec:	bfac      	ite	ge
 80170ee:	ebc6 0405 	rsbge	r4, r6, r5
 80170f2:	ebc6 0404 	rsblt	r4, r6, r4
 80170f6:	429a      	cmp	r2, r3
 80170f8:	bfac      	ite	ge
 80170fa:	ebc1 0302 	rsbge	r3, r1, r2
 80170fe:	ebc1 0303 	rsblt	r3, r1, r3
 8017102:	8084      	strh	r4, [r0, #4]
 8017104:	80c3      	strh	r3, [r0, #6]
 8017106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801710a:	f8a0 e000 	strh.w	lr, [r0]
 801710e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017112:	8043      	strh	r3, [r0, #2]
 8017114:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017118:	8083      	strh	r3, [r0, #4]
 801711a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801711e:	e7f1      	b.n	8017104 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08017120 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017120:	b507      	push	{r0, r1, r2, lr}
 8017122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017126:	ab01      	add	r3, sp, #4
 8017128:	6809      	ldr	r1, [r1, #0]
 801712a:	6800      	ldr	r0, [r0, #0]
 801712c:	f002 fc4f 	bl	80199ce <_ZN8touchgfx6muldivElllRl>
 8017130:	b003      	add	sp, #12
 8017132:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08017138 <_ZN8touchgfx7CWRUtil4sineEi>:
 8017138:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801713c:	fb90 f3f2 	sdiv	r3, r0, r2
 8017140:	fb03 0312 	mls	r3, r3, r2, r0
 8017144:	4413      	add	r3, r2
 8017146:	fb93 f0f2 	sdiv	r0, r3, r2
 801714a:	fb02 3010 	mls	r0, r2, r0, r3
 801714e:	4b0a      	ldr	r3, [pc, #40]	; (8017178 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8017150:	285a      	cmp	r0, #90	; 0x5a
 8017152:	dc02      	bgt.n	801715a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8017154:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017158:	4770      	bx	lr
 801715a:	28b4      	cmp	r0, #180	; 0xb4
 801715c:	dc02      	bgt.n	8017164 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801715e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017162:	e7f7      	b.n	8017154 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8017164:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8017168:	bfd4      	ite	le
 801716a:	38b4      	suble	r0, #180	; 0xb4
 801716c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017170:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017174:	4240      	negs	r0, r0
 8017176:	4770      	bx	lr
 8017178:	08028306 	.word	0x08028306

0801717c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801717c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8017180:	f04f 0300 	mov.w	r3, #0
 8017184:	bf2c      	ite	cs
 8017186:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801718a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801718e:	1899      	adds	r1, r3, r2
 8017190:	4288      	cmp	r0, r1
 8017192:	bf24      	itt	cs
 8017194:	1853      	addcs	r3, r2, r1
 8017196:	1a40      	subcs	r0, r0, r1
 8017198:	0892      	lsrs	r2, r2, #2
 801719a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801719e:	d1f6      	bne.n	801718e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80171a0:	4618      	mov	r0, r3
 80171a2:	4770      	bx	lr

080171a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80171a4:	2800      	cmp	r0, #0
 80171a6:	b508      	push	{r3, lr}
 80171a8:	da05      	bge.n	80171b6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80171aa:	4240      	negs	r0, r0
 80171ac:	f7ff fffa 	bl	80171a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80171b0:	4240      	negs	r0, r0
 80171b2:	b240      	sxtb	r0, r0
 80171b4:	bd08      	pop	{r3, pc}
 80171b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80171ba:	dc11      	bgt.n	80171e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80171bc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80171c0:	dd09      	ble.n	80171d6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80171c2:	4340      	muls	r0, r0
 80171c4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80171c8:	f7ff ffd8 	bl	801717c <_ZN8touchgfx7CWRUtil5isqrtEm>
 80171cc:	f7ff ffea 	bl	80171a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80171d0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80171d4:	e7ed      	b.n	80171b2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80171d6:	3003      	adds	r0, #3
 80171d8:	4b02      	ldr	r3, [pc, #8]	; (80171e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80171da:	10c0      	asrs	r0, r0, #3
 80171dc:	5618      	ldrsb	r0, [r3, r0]
 80171de:	e7e9      	b.n	80171b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80171e0:	2000      	movs	r0, #0
 80171e2:	e7e7      	b.n	80171b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80171e4:	080282aa 	.word	0x080282aa

080171e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 80171e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171ea:	460c      	mov	r4, r1
 80171ec:	1e01      	subs	r1, r0, #0
 80171ee:	4615      	mov	r5, r2
 80171f0:	db01      	blt.n	80171f6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 80171f2:	2c00      	cmp	r4, #0
 80171f4:	da06      	bge.n	8017204 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 80171f6:	4b11      	ldr	r3, [pc, #68]	; (801723c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 80171f8:	f240 3197 	movw	r1, #919	; 0x397
 80171fc:	4a10      	ldr	r2, [pc, #64]	; (8017240 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 80171fe:	4811      	ldr	r0, [pc, #68]	; (8017244 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8017200:	f00d fe6a 	bl	8024ed8 <__assert_func>
 8017204:	428c      	cmp	r4, r1
 8017206:	dd06      	ble.n	8017216 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8017208:	4620      	mov	r0, r4
 801720a:	f7ff ffed 	bl	80171e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801720e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017212:	b003      	add	sp, #12
 8017214:	bd30      	pop	{r4, r5, pc}
 8017216:	4349      	muls	r1, r1
 8017218:	fb04 1004 	mla	r0, r4, r4, r1
 801721c:	f7ff ffae 	bl	801717c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017220:	6028      	str	r0, [r5, #0]
 8017222:	2800      	cmp	r0, #0
 8017224:	d0f5      	beq.n	8017212 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8017226:	4602      	mov	r2, r0
 8017228:	ab01      	add	r3, sp, #4
 801722a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801722e:	4620      	mov	r0, r4
 8017230:	f002 fbcd 	bl	80199ce <_ZN8touchgfx6muldivElllRl>
 8017234:	f7ff ffb6 	bl	80171a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017238:	e7eb      	b.n	8017212 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801723a:	bf00      	nop
 801723c:	080283bc 	.word	0x080283bc
 8017240:	08028484 	.word	0x08028484
 8017244:	080283cd 	.word	0x080283cd

08017248 <_ZN8touchgfx4LineC1Ev>:
 8017248:	b510      	push	{r4, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	f7ff fefc 	bl	8017048 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017250:	4b0c      	ldr	r3, [pc, #48]	; (8017284 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8017252:	2220      	movs	r2, #32
 8017254:	4620      	mov	r0, r4
 8017256:	6023      	str	r3, [r4, #0]
 8017258:	2300      	movs	r3, #0
 801725a:	6422      	str	r2, [r4, #64]	; 0x40
 801725c:	2212      	movs	r2, #18
 801725e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8017262:	6722      	str	r2, [r4, #112]	; 0x70
 8017264:	60a3      	str	r3, [r4, #8]
 8017266:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801726a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801726e:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017272:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8017276:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801727a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801727e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8017282:	bd10      	pop	{r4, pc}
 8017284:	0802840c 	.word	0x0802840c

08017288 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8017288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801728e:	b085      	sub	sp, #20
 8017290:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017292:	4604      	mov	r4, r0
 8017294:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8017296:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8017298:	1af6      	subs	r6, r6, r3
 801729a:	eba5 0502 	sub.w	r5, r5, r2
 801729e:	f040 809b 	bne.w	80173d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80172a2:	b955      	cbnz	r5, 80172ba <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80172a4:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80172a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80172ac:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80172b0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80172b4:	b005      	add	sp, #20
 80172b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ba:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80172be:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80172c2:	f04f 0802 	mov.w	r8, #2
 80172c6:	463a      	mov	r2, r7
 80172c8:	4629      	mov	r1, r5
 80172ca:	ab03      	add	r3, sp, #12
 80172cc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80172ce:	f002 fb7e 	bl	80199ce <_ZN8touchgfx6muldivElllRl>
 80172d2:	ab03      	add	r3, sp, #12
 80172d4:	463a      	mov	r2, r7
 80172d6:	4631      	mov	r1, r6
 80172d8:	fb90 f5f8 	sdiv	r5, r0, r8
 80172dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80172de:	f002 fb76 	bl	80199ce <_ZN8touchgfx6muldivElllRl>
 80172e2:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 80172e6:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 80172ea:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 80172ee:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80172f0:	fb90 f0f8 	sdiv	r0, r0, r8
 80172f4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80172f8:	eba8 0305 	sub.w	r3, r8, r5
 80172fc:	f1ba 0f00 	cmp.w	sl, #0
 8017300:	f040 80c3 	bne.w	801748a <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8017304:	64a3      	str	r3, [r4, #72]	; 0x48
 8017306:	19c3      	adds	r3, r0, r7
 8017308:	65a3      	str	r3, [r4, #88]	; 0x58
 801730a:	ebae 0305 	sub.w	r3, lr, r5
 801730e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017310:	eb00 030c 	add.w	r3, r0, ip
 8017314:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017316:	eb05 030e 	add.w	r3, r5, lr
 801731a:	6523      	str	r3, [r4, #80]	; 0x50
 801731c:	ebac 0300 	sub.w	r3, ip, r0
 8017320:	6623      	str	r3, [r4, #96]	; 0x60
 8017322:	eb05 0308 	add.w	r3, r5, r8
 8017326:	6563      	str	r3, [r4, #84]	; 0x54
 8017328:	1a3b      	subs	r3, r7, r0
 801732a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801732c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8017330:	6663      	str	r3, [r4, #100]	; 0x64
 8017332:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8017336:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017338:	4632      	mov	r2, r6
 801733a:	9301      	str	r3, [sp, #4]
 801733c:	9100      	str	r1, [sp, #0]
 801733e:	f859 bb04 	ldr.w	fp, [r9], #4
 8017342:	9b00      	ldr	r3, [sp, #0]
 8017344:	455e      	cmp	r6, fp
 8017346:	bfa8      	it	ge
 8017348:	465e      	movge	r6, fp
 801734a:	455a      	cmp	r2, fp
 801734c:	bfb8      	it	lt
 801734e:	465a      	movlt	r2, fp
 8017350:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8017354:	4559      	cmp	r1, fp
 8017356:	bfa8      	it	ge
 8017358:	4659      	movge	r1, fp
 801735a:	455b      	cmp	r3, fp
 801735c:	bfb8      	it	lt
 801735e:	465b      	movlt	r3, fp
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	9b01      	ldr	r3, [sp, #4]
 8017364:	454b      	cmp	r3, r9
 8017366:	d1ea      	bne.n	801733e <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8017368:	f04f 0b20 	mov.w	fp, #32
 801736c:	b209      	sxth	r1, r1
 801736e:	b212      	sxth	r2, r2
 8017370:	f1ba 0f01 	cmp.w	sl, #1
 8017374:	b236      	sxth	r6, r6
 8017376:	fb91 f9fb 	sdiv	r9, r1, fp
 801737a:	f9bd 1000 	ldrsh.w	r1, [sp]
 801737e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8017382:	fb92 f2fb 	sdiv	r2, r2, fp
 8017386:	fb91 f1fb 	sdiv	r1, r1, fp
 801738a:	fb96 f6fb 	sdiv	r6, r6, fp
 801738e:	f102 0201 	add.w	r2, r2, #1
 8017392:	f101 0101 	add.w	r1, r1, #1
 8017396:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801739a:	eba1 0109 	sub.w	r1, r1, r9
 801739e:	eba2 0606 	sub.w	r6, r2, r6
 80173a2:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 80173a6:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 80173aa:	d183      	bne.n	80172b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80173ac:	eba8 0305 	sub.w	r3, r8, r5
 80173b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80173b2:	19c3      	adds	r3, r0, r7
 80173b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80173b6:	ebae 0305 	sub.w	r3, lr, r5
 80173ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80173bc:	eb00 030c 	add.w	r3, r0, ip
 80173c0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80173c2:	eb05 030e 	add.w	r3, r5, lr
 80173c6:	4445      	add	r5, r8
 80173c8:	6523      	str	r3, [r4, #80]	; 0x50
 80173ca:	ebac 0300 	sub.w	r3, ip, r0
 80173ce:	1a38      	subs	r0, r7, r0
 80173d0:	6565      	str	r5, [r4, #84]	; 0x54
 80173d2:	6623      	str	r3, [r4, #96]	; 0x60
 80173d4:	6660      	str	r0, [r4, #100]	; 0x64
 80173d6:	e76d      	b.n	80172b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80173d8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80173dc:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 80173e0:	2d00      	cmp	r5, #0
 80173e2:	f43f af6e 	beq.w	80172c2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80173e6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 80173ea:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 80173ee:	fb93 f2f7 	sdiv	r2, r3, r7
 80173f2:	fb07 3312 	mls	r3, r7, r2, r3
 80173f6:	b34b      	cbz	r3, 801744c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 80173f8:	fb97 f2f3 	sdiv	r2, r7, r3
 80173fc:	fb03 7712 	mls	r7, r3, r2, r7
 8017400:	2f00      	cmp	r7, #0
 8017402:	d1f4      	bne.n	80173ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8017404:	2b01      	cmp	r3, #1
 8017406:	f24b 5204 	movw	r2, #46340	; 0xb504
 801740a:	bf18      	it	ne
 801740c:	fb96 f6f3 	sdivne	r6, r6, r3
 8017410:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8017414:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8017418:	bf18      	it	ne
 801741a:	fb95 f5f3 	sdivne	r5, r5, r3
 801741e:	4291      	cmp	r1, r2
 8017420:	dd16      	ble.n	8017450 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8017422:	2d00      	cmp	r5, #0
 8017424:	da4d      	bge.n	80174c2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8017426:	4b29      	ldr	r3, [pc, #164]	; (80174cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8017428:	429d      	cmp	r5, r3
 801742a:	da27      	bge.n	801747c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801742c:	426a      	negs	r2, r5
 801742e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017432:	fb91 f1f3 	sdiv	r1, r1, r3
 8017436:	fb92 f3f3 	sdiv	r3, r2, r3
 801743a:	4299      	cmp	r1, r3
 801743c:	bfcc      	ite	gt
 801743e:	1c4b      	addgt	r3, r1, #1
 8017440:	3301      	addle	r3, #1
 8017442:	fb96 f6f3 	sdiv	r6, r6, r3
 8017446:	fb95 f5f3 	sdiv	r5, r5, r3
 801744a:	e00f      	b.n	801746c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801744c:	463b      	mov	r3, r7
 801744e:	e7d9      	b.n	8017404 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8017450:	2d00      	cmp	r5, #0
 8017452:	fb92 f2f1 	sdiv	r2, r2, r1
 8017456:	da13      	bge.n	8017480 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8017458:	4269      	negs	r1, r5
 801745a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801745e:	fb93 f3f1 	sdiv	r3, r3, r1
 8017462:	429a      	cmp	r2, r3
 8017464:	bfa8      	it	ge
 8017466:	461a      	movge	r2, r3
 8017468:	4356      	muls	r6, r2
 801746a:	4355      	muls	r5, r2
 801746c:	fb05 f005 	mul.w	r0, r5, r5
 8017470:	fb06 0006 	mla	r0, r6, r6, r0
 8017474:	f7ff fe82 	bl	801717c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017478:	4607      	mov	r7, r0
 801747a:	e722      	b.n	80172c2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801747c:	2200      	movs	r2, #0
 801747e:	e7eb      	b.n	8017458 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8017480:	4629      	mov	r1, r5
 8017482:	e7ea      	b.n	801745a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8017484:	4629      	mov	r1, r5
 8017486:	2200      	movs	r2, #0
 8017488:	e7e7      	b.n	801745a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801748a:	1a1b      	subs	r3, r3, r0
 801748c:	64a3      	str	r3, [r4, #72]	; 0x48
 801748e:	19c3      	adds	r3, r0, r7
 8017490:	1b5b      	subs	r3, r3, r5
 8017492:	65a3      	str	r3, [r4, #88]	; 0x58
 8017494:	ebae 0305 	sub.w	r3, lr, r5
 8017498:	4403      	add	r3, r0
 801749a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801749c:	eb00 030c 	add.w	r3, r0, ip
 80174a0:	442b      	add	r3, r5
 80174a2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80174a4:	eb05 030e 	add.w	r3, r5, lr
 80174a8:	4403      	add	r3, r0
 80174aa:	6523      	str	r3, [r4, #80]	; 0x50
 80174ac:	ebac 0300 	sub.w	r3, ip, r0
 80174b0:	442b      	add	r3, r5
 80174b2:	6623      	str	r3, [r4, #96]	; 0x60
 80174b4:	eb05 0308 	add.w	r3, r5, r8
 80174b8:	1a1b      	subs	r3, r3, r0
 80174ba:	6563      	str	r3, [r4, #84]	; 0x54
 80174bc:	1a3b      	subs	r3, r7, r0
 80174be:	1b5b      	subs	r3, r3, r5
 80174c0:	e733      	b.n	801732a <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 80174c2:	4295      	cmp	r5, r2
 80174c4:	ddde      	ble.n	8017484 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 80174c6:	462a      	mov	r2, r5
 80174c8:	e7b1      	b.n	801742e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 80174ca:	bf00      	nop
 80174cc:	ffff4afc 	.word	0xffff4afc

080174d0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80174d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80174d2:	428b      	cmp	r3, r1
 80174d4:	d102      	bne.n	80174dc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80174d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80174d8:	4293      	cmp	r3, r2
 80174da:	d003      	beq.n	80174e4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80174dc:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 80174e0:	f7ff bed2 	b.w	8017288 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80174e4:	4770      	bx	lr

080174e6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80174e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80174e8:	428b      	cmp	r3, r1
 80174ea:	d102      	bne.n	80174f2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 80174ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80174ee:	4293      	cmp	r3, r2
 80174f0:	d003      	beq.n	80174fa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 80174f2:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 80174f6:	f7ff bec7 	b.w	8017288 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80174fa:	4770      	bx	lr

080174fc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 80174fc:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017500:	f7ff bec2 	b.w	8017288 <_ZN8touchgfx4Line17updateCachedShapeEv>

08017504 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017508:	b0b3      	sub	sp, #204	; 0xcc
 801750a:	4604      	mov	r4, r0
 801750c:	460a      	mov	r2, r1
 801750e:	4601      	mov	r1, r0
 8017510:	a804      	add	r0, sp, #16
 8017512:	ad32      	add	r5, sp, #200	; 0xc8
 8017514:	f00c f914 	bl	8023740 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017518:	2300      	movs	r3, #0
 801751a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801751c:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8017520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017522:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017524:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017526:	1ac0      	subs	r0, r0, r3
 8017528:	eba1 0102 	sub.w	r1, r1, r2
 801752c:	d43c      	bmi.n	80175a8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801752e:	2900      	cmp	r1, #0
 8017530:	462a      	mov	r2, r5
 8017532:	db33      	blt.n	801759c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017534:	f7ff fe58 	bl	80171e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017538:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801753c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801753e:	a804      	add	r0, sp, #16
 8017540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017542:	f00c fac6 	bl	8023ad2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017546:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017548:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801754a:	a804      	add	r0, sp, #16
 801754c:	f00c fa50 	bl	80239f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017550:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017554:	2b01      	cmp	r3, #1
 8017556:	d137      	bne.n	80175c8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017558:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801755a:	2eb3      	cmp	r6, #179	; 0xb3
 801755c:	dc34      	bgt.n	80175c8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801755e:	eba7 0906 	sub.w	r9, r7, r6
 8017562:	4648      	mov	r0, r9
 8017564:	f7ff fde8 	bl	8017138 <_ZN8touchgfx7CWRUtil4sineEi>
 8017568:	a902      	add	r1, sp, #8
 801756a:	9002      	str	r0, [sp, #8]
 801756c:	4628      	mov	r0, r5
 801756e:	f7ff fdd7 	bl	8017120 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017572:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017574:	eb00 0801 	add.w	r8, r0, r1
 8017578:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801757c:	f7ff fddc 	bl	8017138 <_ZN8touchgfx7CWRUtil4sineEi>
 8017580:	a903      	add	r1, sp, #12
 8017582:	9003      	str	r0, [sp, #12]
 8017584:	4628      	mov	r0, r5
 8017586:	f7ff fdcb 	bl	8017120 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801758a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801758c:	4641      	mov	r1, r8
 801758e:	1a12      	subs	r2, r2, r0
 8017590:	a804      	add	r0, sp, #16
 8017592:	f00c fa2d 	bl	80239f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017596:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017598:	441e      	add	r6, r3
 801759a:	e7de      	b.n	801755a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801759c:	4249      	negs	r1, r1
 801759e:	f7ff fe23 	bl	80171e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175a2:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80175a6:	e7c9      	b.n	801753c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175a8:	2900      	cmp	r1, #0
 80175aa:	f1c0 0000 	rsb	r0, r0, #0
 80175ae:	462a      	mov	r2, r5
 80175b0:	db04      	blt.n	80175bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 80175b2:	f7ff fe19 	bl	80171e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175b6:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 80175ba:	e7bf      	b.n	801753c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175bc:	4249      	negs	r1, r1
 80175be:	f7ff fe13 	bl	80171e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175c2:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 80175c6:	e7b9      	b.n	801753c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80175ca:	a804      	add	r0, sp, #16
 80175cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80175ce:	f00c fa0f 	bl	80239f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80175d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80175d6:	a804      	add	r0, sp, #16
 80175d8:	f00c fa0a 	bl	80239f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80175dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80175e0:	2b01      	cmp	r3, #1
 80175e2:	d123      	bne.n	801762c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80175e4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80175e6:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 80175ea:	2e00      	cmp	r6, #0
 80175ec:	dd1e      	ble.n	801762c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80175ee:	eb06 0907 	add.w	r9, r6, r7
 80175f2:	4648      	mov	r0, r9
 80175f4:	f7ff fda0 	bl	8017138 <_ZN8touchgfx7CWRUtil4sineEi>
 80175f8:	a902      	add	r1, sp, #8
 80175fa:	9002      	str	r0, [sp, #8]
 80175fc:	4628      	mov	r0, r5
 80175fe:	f7ff fd8f 	bl	8017120 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017602:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017604:	eb00 0801 	add.w	r8, r0, r1
 8017608:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801760c:	f7ff fd94 	bl	8017138 <_ZN8touchgfx7CWRUtil4sineEi>
 8017610:	a903      	add	r1, sp, #12
 8017612:	9003      	str	r0, [sp, #12]
 8017614:	4628      	mov	r0, r5
 8017616:	f7ff fd83 	bl	8017120 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801761a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801761c:	4641      	mov	r1, r8
 801761e:	1a12      	subs	r2, r2, r0
 8017620:	a804      	add	r0, sp, #16
 8017622:	f00c f9e5 	bl	80239f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017626:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017628:	1af6      	subs	r6, r6, r3
 801762a:	e7de      	b.n	80175ea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801762c:	a804      	add	r0, sp, #16
 801762e:	f00c fb54 	bl	8023cda <_ZN8touchgfx6Canvas6renderEv>
 8017632:	4604      	mov	r4, r0
 8017634:	a804      	add	r0, sp, #16
 8017636:	f00c fb91 	bl	8023d5c <_ZN8touchgfx6CanvasD1Ev>
 801763a:	4620      	mov	r0, r4
 801763c:	b033      	add	sp, #204	; 0xcc
 801763e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017642 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017642:	b570      	push	{r4, r5, r6, lr}
 8017644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017648:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801764a:	4604      	mov	r4, r0
 801764c:	429a      	cmp	r2, r3
 801764e:	d00c      	beq.n	801766a <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8017650:	f850 3b26 	ldr.w	r3, [r0], #38
 8017654:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017656:	f7f9 f8df 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 801765a:	2300      	movs	r3, #0
 801765c:	4601      	mov	r1, r0
 801765e:	46ac      	mov	ip, r5
 8017660:	4620      	mov	r0, r4
 8017662:	461a      	mov	r2, r3
 8017664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017668:	4760      	bx	ip
 801766a:	2000      	movs	r0, #0
 801766c:	bd70      	pop	{r4, r5, r6, pc}

0801766e <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801766e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017674:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017676:	429a      	cmp	r2, r3
 8017678:	d016      	beq.n	80176a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801767a:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801767e:	4620      	mov	r0, r4
 8017680:	f7f7 fd44 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 8017684:	6803      	ldr	r3, [r0, #0]
 8017686:	4605      	mov	r5, r0
 8017688:	4620      	mov	r0, r4
 801768a:	69de      	ldr	r6, [r3, #28]
 801768c:	f7f7 fd5a 	bl	800f144 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017690:	4607      	mov	r7, r0
 8017692:	4620      	mov	r0, r4
 8017694:	f7f9 f8c0 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8017698:	2300      	movs	r3, #0
 801769a:	4602      	mov	r2, r0
 801769c:	4639      	mov	r1, r7
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	4628      	mov	r0, r5
 80176a2:	47b0      	blx	r6
 80176a4:	b003      	add	sp, #12
 80176a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176a8:	2000      	movs	r0, #0
 80176aa:	e7fb      	b.n	80176a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

080176ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80176ac:	b40e      	push	{r1, r2, r3}
 80176ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176b6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80176b8:	b09b      	sub	sp, #108	; 0x6c
 80176ba:	4604      	mov	r4, r0
 80176bc:	429a      	cmp	r2, r3
 80176be:	d03f      	beq.n	8017740 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 80176c0:	f100 0726 	add.w	r7, r0, #38	; 0x26
 80176c4:	ab22      	add	r3, sp, #136	; 0x88
 80176c6:	4638      	mov	r0, r7
 80176c8:	9303      	str	r3, [sp, #12]
 80176ca:	f7f7 fd1f 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 80176ce:	6803      	ldr	r3, [r0, #0]
 80176d0:	4680      	mov	r8, r0
 80176d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d4:	4798      	blx	r3
 80176d6:	4606      	mov	r6, r0
 80176d8:	b205      	sxth	r5, r0
 80176da:	a804      	add	r0, sp, #16
 80176dc:	f002 ff7e 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 80176e0:	f8d8 3000 	ldr.w	r3, [r8]
 80176e4:	4640      	mov	r0, r8
 80176e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176e8:	4798      	blx	r3
 80176ea:	9a03      	ldr	r2, [sp, #12]
 80176ec:	4603      	mov	r3, r0
 80176ee:	9921      	ldr	r1, [sp, #132]	; 0x84
 80176f0:	a804      	add	r0, sp, #16
 80176f2:	f002 ff90 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80176f6:	4638      	mov	r0, r7
 80176f8:	f7f7 fd24 	bl	800f144 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80176fc:	4680      	mov	r8, r0
 80176fe:	4638      	mov	r0, r7
 8017700:	f7f7 fd04 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 8017704:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017708:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801770c:	4642      	mov	r2, r8
 801770e:	9300      	str	r3, [sp, #0]
 8017710:	4603      	mov	r3, r0
 8017712:	a804      	add	r0, sp, #16
 8017714:	f001 f815 	bl	8018742 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017718:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801771c:	b203      	sxth	r3, r0
 801771e:	18a9      	adds	r1, r5, r2
 8017720:	2900      	cmp	r1, #0
 8017722:	dd0b      	ble.n	801773c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8017724:	3b01      	subs	r3, #1
 8017726:	fb13 f302 	smulbb	r3, r3, r2
 801772a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801772e:	b21d      	sxth	r5, r3
 8017730:	4628      	mov	r0, r5
 8017732:	b01b      	add	sp, #108	; 0x6c
 8017734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017738:	b003      	add	sp, #12
 801773a:	4770      	bx	lr
 801773c:	2b00      	cmp	r3, #0
 801773e:	dcf7      	bgt.n	8017730 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8017740:	2500      	movs	r5, #0
 8017742:	e7f5      	b.n	8017730 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08017744 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801774c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801774e:	b08d      	sub	sp, #52	; 0x34
 8017750:	4604      	mov	r4, r0
 8017752:	429e      	cmp	r6, r3
 8017754:	4688      	mov	r8, r1
 8017756:	d04b      	beq.n	80177f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017758:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801775c:	4628      	mov	r0, r5
 801775e:	f7f7 fcd5 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 8017762:	4607      	mov	r7, r0
 8017764:	2800      	cmp	r0, #0
 8017766:	d043      	beq.n	80177f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017768:	4628      	mov	r0, r5
 801776a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801776e:	f7f7 fd01 	bl	800f174 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017772:	4b21      	ldr	r3, [pc, #132]	; (80177f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8017774:	4628      	mov	r0, r5
 8017776:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017780:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017784:	785e      	ldrb	r6, [r3, #1]
 8017786:	f7f7 fcdd 	bl	800f144 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801778a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801778c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017790:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017794:	9309      	str	r3, [sp, #36]	; 0x24
 8017796:	4b19      	ldr	r3, [pc, #100]	; (80177fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8017798:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80177a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80177a6:	9707      	str	r7, [sp, #28]
 80177a8:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80177ac:	f88d 6020 	strb.w	r6, [sp, #32]
 80177b0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80177b4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80177b8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80177bc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80177c0:	b10a      	cbz	r2, 80177c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80177c2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80177c4:	b906      	cbnz	r6, 80177c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80177c6:	689e      	ldr	r6, [r3, #8]
 80177c8:	af05      	add	r7, sp, #20
 80177ca:	4621      	mov	r1, r4
 80177cc:	4638      	mov	r0, r7
 80177ce:	f002 f864 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177d2:	4628      	mov	r0, r5
 80177d4:	f7f9 f820 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 80177d8:	2300      	movs	r3, #0
 80177da:	9001      	str	r0, [sp, #4]
 80177dc:	4630      	mov	r0, r6
 80177de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80177e2:	ab07      	add	r3, sp, #28
 80177e4:	9300      	str	r3, [sp, #0]
 80177e6:	4643      	mov	r3, r8
 80177e8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80177ec:	f000 fd76 	bl	80182dc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80177f0:	b00d      	add	sp, #52	; 0x34
 80177f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f6:	bf00      	nop
 80177f8:	2000c598 	.word	0x2000c598
 80177fc:	2000c508 	.word	0x2000c508

08017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017800:	b570      	push	{r4, r5, r6, lr}
 8017802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017806:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017808:	4604      	mov	r4, r0
 801780a:	429a      	cmp	r2, r3
 801780c:	d021      	beq.n	8017852 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801780e:	6803      	ldr	r3, [r0, #0]
 8017810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017812:	4798      	blx	r3
 8017814:	6823      	ldr	r3, [r4, #0]
 8017816:	4605      	mov	r5, r0
 8017818:	4620      	mov	r0, r4
 801781a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801781c:	4798      	blx	r3
 801781e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017822:	4606      	mov	r6, r0
 8017824:	b22d      	sxth	r5, r5
 8017826:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801782a:	6823      	ldr	r3, [r4, #0]
 801782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801782e:	d109      	bne.n	8017844 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017830:	4629      	mov	r1, r5
 8017832:	4620      	mov	r0, r4
 8017834:	4798      	blx	r3
 8017836:	6823      	ldr	r3, [r4, #0]
 8017838:	4631      	mov	r1, r6
 801783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801783c:	4620      	mov	r0, r4
 801783e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017842:	4718      	bx	r3
 8017844:	4601      	mov	r1, r0
 8017846:	4620      	mov	r0, r4
 8017848:	4798      	blx	r3
 801784a:	6823      	ldr	r3, [r4, #0]
 801784c:	4629      	mov	r1, r5
 801784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017850:	e7f4      	b.n	801783c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017852:	bd70      	pop	{r4, r5, r6, pc}

08017854 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017854:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017858:	84c1      	strh	r1, [r0, #38]	; 0x26
 801785a:	b922      	cbnz	r2, 8017866 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801785c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017860:	b90b      	cbnz	r3, 8017866 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017862:	f7ff bfcd 	b.w	8017800 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017866:	4770      	bx	lr

08017868 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017868:	2300      	movs	r3, #0
 801786a:	8003      	strh	r3, [r0, #0]
 801786c:	8043      	strh	r3, [r0, #2]
 801786e:	8083      	strh	r3, [r0, #4]
 8017870:	80c3      	strh	r3, [r0, #6]
 8017872:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017876:	b91b      	cbnz	r3, 8017880 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017878:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801787c:	2bff      	cmp	r3, #255	; 0xff
 801787e:	d103      	bne.n	8017888 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017880:	890b      	ldrh	r3, [r1, #8]
 8017882:	8083      	strh	r3, [r0, #4]
 8017884:	894b      	ldrh	r3, [r1, #10]
 8017886:	80c3      	strh	r3, [r0, #6]
 8017888:	4770      	bx	lr
	...

0801788c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801788c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801788e:	4604      	mov	r4, r0
 8017890:	466b      	mov	r3, sp
 8017892:	6808      	ldr	r0, [r1, #0]
 8017894:	6849      	ldr	r1, [r1, #4]
 8017896:	c303      	stmia	r3!, {r0, r1}
 8017898:	6823      	ldr	r3, [r4, #0]
 801789a:	4669      	mov	r1, sp
 801789c:	4620      	mov	r0, r4
 801789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178a0:	4798      	blx	r3
 80178a2:	4b08      	ldr	r3, [pc, #32]	; (80178c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80178aa:	b10a      	cbz	r2, 80178b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80178ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80178ae:	b900      	cbnz	r0, 80178b2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80178b0:	6898      	ldr	r0, [r3, #8]
 80178b2:	6803      	ldr	r3, [r0, #0]
 80178b4:	4669      	mov	r1, sp
 80178b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80178b8:	69dd      	ldr	r5, [r3, #28]
 80178ba:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80178be:	47a8      	blx	r5
 80178c0:	b003      	add	sp, #12
 80178c2:	bd30      	pop	{r4, r5, pc}
 80178c4:	2000c508 	.word	0x2000c508

080178c8 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80178c8:	b570      	push	{r4, r5, r6, lr}
 80178ca:	6803      	ldr	r3, [r0, #0]
 80178cc:	4604      	mov	r4, r0
 80178ce:	4615      	mov	r5, r2
 80178d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80178d2:	4798      	blx	r3
 80178d4:	6823      	ldr	r3, [r4, #0]
 80178d6:	4629      	mov	r1, r5
 80178d8:	4620      	mov	r0, r4
 80178da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178e0:	4718      	bx	r3

080178e2 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 80178e2:	b570      	push	{r4, r5, r6, lr}
 80178e4:	6803      	ldr	r3, [r0, #0]
 80178e6:	4604      	mov	r4, r0
 80178e8:	460e      	mov	r6, r1
 80178ea:	4615      	mov	r5, r2
 80178ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178ee:	4798      	blx	r3
 80178f0:	8030      	strh	r0, [r6, #0]
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	4620      	mov	r0, r4
 80178f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178f8:	4798      	blx	r3
 80178fa:	8028      	strh	r0, [r5, #0]
 80178fc:	bd70      	pop	{r4, r5, r6, pc}

080178fe <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 80178fe:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8017902:	4770      	bx	lr

08017904 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8017904:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017908:	4770      	bx	lr

0801790a <_ZN8touchgfx10TiledImageD1Ev>:
 801790a:	4770      	bx	lr

0801790c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801790c:	b510      	push	{r4, lr}
 801790e:	4604      	mov	r4, r0
 8017910:	f000 fa40 	bl	8017d94 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017914:	6823      	ldr	r3, [r4, #0]
 8017916:	4620      	mov	r0, r4
 8017918:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801791c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017926:	4718      	bx	r3

08017928 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801792a:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801792e:	4605      	mov	r5, r0
 8017930:	8541      	strh	r1, [r0, #42]	; 0x2a
 8017932:	4630      	mov	r0, r6
 8017934:	f003 fd7e 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017938:	b1a0      	cbz	r0, 8017964 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801793a:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801793e:	4630      	mov	r0, r6
 8017940:	f003 fd78 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017944:	fb97 f4f0 	sdiv	r4, r7, r0
 8017948:	fb04 7410 	mls	r4, r4, r0, r7
 801794c:	4630      	mov	r0, r6
 801794e:	f003 fd71 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017952:	4404      	add	r4, r0
 8017954:	4630      	mov	r0, r6
 8017956:	f003 fd6d 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801795a:	fb94 f3f0 	sdiv	r3, r4, r0
 801795e:	fb03 4010 	mls	r0, r3, r0, r4
 8017962:	8568      	strh	r0, [r5, #42]	; 0x2a
 8017964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017966 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8017966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017968:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801796c:	4605      	mov	r5, r0
 801796e:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017970:	4630      	mov	r0, r6
 8017972:	f003 fd99 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017976:	b1a0      	cbz	r0, 80179a2 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8017978:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801797c:	4630      	mov	r0, r6
 801797e:	f003 fd93 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017982:	fb97 f4f0 	sdiv	r4, r7, r0
 8017986:	fb04 7410 	mls	r4, r4, r0, r7
 801798a:	4630      	mov	r0, r6
 801798c:	f003 fd8c 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017990:	4404      	add	r4, r0
 8017992:	4630      	mov	r0, r6
 8017994:	f003 fd88 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017998:	fb94 f3f0 	sdiv	r3, r4, r0
 801799c:	fb03 4010 	mls	r0, r3, r0, r4
 80179a0:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80179a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080179a4 <_ZN8touchgfx10TiledImageD0Ev>:
 80179a4:	b510      	push	{r4, lr}
 80179a6:	4604      	mov	r4, r0
 80179a8:	2130      	movs	r1, #48	; 0x30
 80179aa:	f00d fa67 	bl	8024e7c <_ZdlPvj>
 80179ae:	4620      	mov	r0, r4
 80179b0:	bd10      	pop	{r4, pc}
	...

080179b4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80179b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80179bc:	b093      	sub	sp, #76	; 0x4c
 80179be:	4607      	mov	r7, r0
 80179c0:	460e      	mov	r6, r1
 80179c2:	4658      	mov	r0, fp
 80179c4:	f003 fd36 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179c8:	4605      	mov	r5, r0
 80179ca:	4658      	mov	r0, fp
 80179cc:	f003 fd6c 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80179d0:	4680      	mov	r8, r0
 80179d2:	2d00      	cmp	r5, #0
 80179d4:	f000 80c5 	beq.w	8017b62 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80179d8:	2800      	cmp	r0, #0
 80179da:	f000 80c2 	beq.w	8017b62 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80179de:	2300      	movs	r3, #0
 80179e0:	a90e      	add	r1, sp, #56	; 0x38
 80179e2:	4638      	mov	r0, r7
 80179e4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ec:	4798      	blx	r3
 80179ee:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80179f2:	f9b6 3000 	ldrsh.w	r3, [r6]
 80179f6:	88b1      	ldrh	r1, [r6, #4]
 80179f8:	189c      	adds	r4, r3, r2
 80179fa:	440b      	add	r3, r1
 80179fc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017a00:	fa02 f383 	sxtah	r3, r2, r3
 8017a04:	3b01      	subs	r3, #1
 8017a06:	fb93 f3f5 	sdiv	r3, r3, r5
 8017a0a:	fb94 f4f5 	sdiv	r4, r4, r5
 8017a0e:	fb13 f305 	smulbb	r3, r3, r5
 8017a12:	fb14 f405 	smulbb	r4, r4, r5
 8017a16:	b21b      	sxth	r3, r3
 8017a18:	1aa4      	subs	r4, r4, r2
 8017a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a1c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017a20:	b2a4      	uxth	r4, r4
 8017a22:	185a      	adds	r2, r3, r1
 8017a24:	fb92 f2f8 	sdiv	r2, r2, r8
 8017a28:	fb12 f208 	smulbb	r2, r2, r8
 8017a2c:	1a52      	subs	r2, r2, r1
 8017a2e:	b212      	sxth	r2, r2
 8017a30:	920c      	str	r2, [sp, #48]	; 0x30
 8017a32:	88f2      	ldrh	r2, [r6, #6]
 8017a34:	4413      	add	r3, r2
 8017a36:	fa01 f383 	sxtah	r3, r1, r3
 8017a3a:	3b01      	subs	r3, #1
 8017a3c:	fb93 f3f8 	sdiv	r3, r3, r8
 8017a40:	fb13 f308 	smulbb	r3, r3, r8
 8017a44:	b21b      	sxth	r3, r3
 8017a46:	930d      	str	r3, [sp, #52]	; 0x34
 8017a48:	1963      	adds	r3, r4, r5
 8017a4a:	fa1f fa83 	uxth.w	sl, r3
 8017a4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a50:	b223      	sxth	r3, r4
 8017a52:	4293      	cmp	r3, r2
 8017a54:	9305      	str	r3, [sp, #20]
 8017a56:	f300 8084 	bgt.w	8017b62 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017a5a:	fa0f f38a 	sxth.w	r3, sl
 8017a5e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017a62:	9309      	str	r3, [sp, #36]	; 0x24
 8017a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a66:	4599      	cmp	r9, r3
 8017a68:	dd04      	ble.n	8017a74 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8017a6a:	442c      	add	r4, r5
 8017a6c:	eb05 030a 	add.w	r3, r5, sl
 8017a70:	b2a4      	uxth	r4, r4
 8017a72:	e7ea      	b.n	8017a4a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8017a74:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017a78:	88b2      	ldrh	r2, [r6, #4]
 8017a7a:	4462      	add	r2, ip
 8017a7c:	b292      	uxth	r2, r2
 8017a7e:	b213      	sxth	r3, r2
 8017a80:	9308      	str	r3, [sp, #32]
 8017a82:	fa1f f389 	uxth.w	r3, r9
 8017a86:	eb08 0103 	add.w	r1, r8, r3
 8017a8a:	9307      	str	r3, [sp, #28]
 8017a8c:	b289      	uxth	r1, r1
 8017a8e:	b208      	sxth	r0, r1
 8017a90:	9006      	str	r0, [sp, #24]
 8017a92:	9805      	ldr	r0, [sp, #20]
 8017a94:	4603      	mov	r3, r0
 8017a96:	9808      	ldr	r0, [sp, #32]
 8017a98:	4283      	cmp	r3, r0
 8017a9a:	da5e      	bge.n	8017b5a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a9e:	4584      	cmp	ip, r0
 8017aa0:	da5b      	bge.n	8017b5a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017aa2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8017aa6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8017aaa:	4486      	add	lr, r0
 8017aac:	fa1f fe8e 	uxth.w	lr, lr
 8017ab0:	fa0f f38e 	sxth.w	r3, lr
 8017ab4:	4599      	cmp	r9, r3
 8017ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ab8:	da4f      	bge.n	8017b5a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017aba:	9b06      	ldr	r3, [sp, #24]
 8017abc:	4298      	cmp	r0, r3
 8017abe:	da4c      	bge.n	8017b5a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017ac0:	9b05      	ldr	r3, [sp, #20]
 8017ac2:	459c      	cmp	ip, r3
 8017ac4:	bfb8      	it	lt
 8017ac6:	469c      	movlt	ip, r3
 8017ac8:	4548      	cmp	r0, r9
 8017aca:	9b08      	ldr	r3, [sp, #32]
 8017acc:	bfb8      	it	lt
 8017ace:	4648      	movlt	r0, r9
 8017ad0:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8017ad4:	4699      	mov	r9, r3
 8017ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8017adc:	4599      	cmp	r9, r3
 8017ade:	bfc8      	it	gt
 8017ae0:	4652      	movgt	r2, sl
 8017ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ae4:	eba2 020c 	sub.w	r2, r2, ip
 8017ae8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017aec:	9a06      	ldr	r2, [sp, #24]
 8017aee:	4293      	cmp	r3, r2
 8017af0:	bfd8      	it	le
 8017af2:	4671      	movle	r1, lr
 8017af4:	1a09      	subs	r1, r1, r0
 8017af6:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8017afa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017afe:	9b07      	ldr	r3, [sp, #28]
 8017b00:	1b12      	subs	r2, r2, r4
 8017b02:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017b06:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017b0a:	1ad2      	subs	r2, r2, r3
 8017b0c:	4b16      	ldr	r3, [pc, #88]	; (8017b68 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017b0e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017b12:	681a      	ldr	r2, [r3, #0]
 8017b14:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8017b18:	b109      	cbz	r1, 8017b1e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8017b1a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017b1c:	b900      	cbnz	r0, 8017b20 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017b1e:	6890      	ldr	r0, [r2, #8]
 8017b20:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017b24:	f04f 0c01 	mov.w	ip, #1
 8017b28:	9b07      	ldr	r3, [sp, #28]
 8017b2a:	6801      	ldr	r1, [r0, #0]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	f8cd c008 	str.w	ip, [sp, #8]
 8017b32:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017b36:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8017b3a:	b21b      	sxth	r3, r3
 8017b3c:	4422      	add	r2, r4
 8017b3e:	f8cd c004 	str.w	ip, [sp, #4]
 8017b42:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8017b46:	b212      	sxth	r2, r2
 8017b48:	f8cd c000 	str.w	ip, [sp]
 8017b4c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8017b50:	4659      	mov	r1, fp
 8017b52:	47c8      	blx	r9
 8017b54:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017b58:	e784      	b.n	8017a64 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017b60:	e7cb      	b.n	8017afa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8017b62:	b013      	add	sp, #76	; 0x4c
 8017b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b68:	2000c508 	.word	0x2000c508

08017b6c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b70:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017b74:	4606      	mov	r6, r0
 8017b76:	4689      	mov	r9, r1
 8017b78:	2bff      	cmp	r3, #255	; 0xff
 8017b7a:	d008      	beq.n	8017b8e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	8003      	strh	r3, [r0, #0]
 8017b80:	8043      	strh	r3, [r0, #2]
 8017b82:	8083      	strh	r3, [r0, #4]
 8017b84:	4630      	mov	r0, r6
 8017b86:	80f3      	strh	r3, [r6, #6]
 8017b88:	b003      	add	sp, #12
 8017b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b8e:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 8017b92:	4668      	mov	r0, sp
 8017b94:	4659      	mov	r1, fp
 8017b96:	f003 fcc1 	bl	801b51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017b9a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8017b9e:	4658      	mov	r0, fp
 8017ba0:	f9bd 7000 	ldrsh.w	r7, [sp]
 8017ba4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8017ba8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017bac:	f003 fc42 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017bb0:	4284      	cmp	r4, r0
 8017bb2:	d10d      	bne.n	8017bd0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8017bb4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8017bb8:	4658      	mov	r0, fp
 8017bba:	f003 fc75 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bbe:	4580      	cmp	r8, r0
 8017bc0:	d12a      	bne.n	8017c18 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8017bc2:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8017bc6:	8037      	strh	r7, [r6, #0]
 8017bc8:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017bcc:	80b5      	strh	r5, [r6, #4]
 8017bce:	e7d9      	b.n	8017b84 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017bd0:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8017bd4:	4658      	mov	r0, fp
 8017bd6:	f003 fc2d 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017bda:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017bde:	1b7f      	subs	r7, r7, r5
 8017be0:	b2a3      	uxth	r3, r4
 8017be2:	b2bd      	uxth	r5, r7
 8017be4:	b22f      	sxth	r7, r5
 8017be6:	4428      	add	r0, r5
 8017be8:	2f00      	cmp	r7, #0
 8017bea:	b280      	uxth	r0, r0
 8017bec:	bfb8      	it	lt
 8017bee:	18ed      	addlt	r5, r5, r3
 8017bf0:	4403      	add	r3, r0
 8017bf2:	bfac      	ite	ge
 8017bf4:	4625      	movge	r5, r4
 8017bf6:	2700      	movlt	r7, #0
 8017bf8:	b29b      	uxth	r3, r3
 8017bfa:	bfb8      	it	lt
 8017bfc:	b22d      	sxthlt	r5, r5
 8017bfe:	b219      	sxth	r1, r3
 8017c00:	bfb8      	it	lt
 8017c02:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8017c06:	4291      	cmp	r1, r2
 8017c08:	bfc4      	itt	gt
 8017c0a:	1a9c      	subgt	r4, r3, r2
 8017c0c:	b224      	sxthgt	r4, r4
 8017c0e:	42ac      	cmp	r4, r5
 8017c10:	bfc4      	itt	gt
 8017c12:	b207      	sxthgt	r7, r0
 8017c14:	4625      	movgt	r5, r4
 8017c16:	e7cf      	b.n	8017bb8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017c18:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017c1c:	4658      	mov	r0, fp
 8017c1e:	f003 fc43 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c22:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8017c26:	ebaa 0404 	sub.w	r4, sl, r4
 8017c2a:	fa1f f288 	uxth.w	r2, r8
 8017c2e:	b2a4      	uxth	r4, r4
 8017c30:	fa0f fa84 	sxth.w	sl, r4
 8017c34:	4420      	add	r0, r4
 8017c36:	f1ba 0f00 	cmp.w	sl, #0
 8017c3a:	b280      	uxth	r0, r0
 8017c3c:	bfb8      	it	lt
 8017c3e:	18a3      	addlt	r3, r4, r2
 8017c40:	4402      	add	r2, r0
 8017c42:	bfac      	ite	ge
 8017c44:	4643      	movge	r3, r8
 8017c46:	f04f 0a00 	movlt.w	sl, #0
 8017c4a:	b292      	uxth	r2, r2
 8017c4c:	bfb8      	it	lt
 8017c4e:	b21b      	sxthlt	r3, r3
 8017c50:	b214      	sxth	r4, r2
 8017c52:	bfb8      	it	lt
 8017c54:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017c58:	428c      	cmp	r4, r1
 8017c5a:	bfc4      	itt	gt
 8017c5c:	eba2 0801 	subgt.w	r8, r2, r1
 8017c60:	fa0f f888 	sxthgt.w	r8, r8
 8017c64:	4543      	cmp	r3, r8
 8017c66:	bfbc      	itt	lt
 8017c68:	fa0f fa80 	sxthlt.w	sl, r0
 8017c6c:	4643      	movlt	r3, r8
 8017c6e:	e7aa      	b.n	8017bc6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017c70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017c70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c78:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d018      	beq.n	8017cb2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8017c80:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017c84:	4628      	mov	r0, r5
 8017c86:	f7f7 fa41 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 8017c8a:	6803      	ldr	r3, [r0, #0]
 8017c8c:	4606      	mov	r6, r0
 8017c8e:	4628      	mov	r0, r5
 8017c90:	69df      	ldr	r7, [r3, #28]
 8017c92:	f7f7 fa57 	bl	800f144 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017c96:	4680      	mov	r8, r0
 8017c98:	4628      	mov	r0, r5
 8017c9a:	f7f8 fdbd 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	4602      	mov	r2, r0
 8017ca2:	4641      	mov	r1, r8
 8017ca4:	9300      	str	r3, [sp, #0]
 8017ca6:	4630      	mov	r0, r6
 8017ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017caa:	47b8      	blx	r7
 8017cac:	b002      	add	sp, #8
 8017cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cb2:	2000      	movs	r0, #0
 8017cb4:	e7fa      	b.n	8017cac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08017cb6 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017cb6:	b570      	push	{r4, r5, r6, lr}
 8017cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cbc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017cbe:	4604      	mov	r4, r0
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d00c      	beq.n	8017cde <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8017cc4:	f850 3b26 	ldr.w	r3, [r0], #38
 8017cc8:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017cca:	f7f8 fda5 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8017cce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017cd0:	4601      	mov	r1, r0
 8017cd2:	46ac      	mov	ip, r5
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cdc:	4760      	bx	ip
 8017cde:	2000      	movs	r0, #0
 8017ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

08017ce4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cec:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017cee:	b08d      	sub	sp, #52	; 0x34
 8017cf0:	4604      	mov	r4, r0
 8017cf2:	429e      	cmp	r6, r3
 8017cf4:	460f      	mov	r7, r1
 8017cf6:	d048      	beq.n	8017d8a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017cf8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	f7f7 fa05 	bl	800f10c <_ZNK8touchgfx9TypedText7getFontEv>
 8017d02:	4680      	mov	r8, r0
 8017d04:	2800      	cmp	r0, #0
 8017d06:	d040      	beq.n	8017d8a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017d08:	4628      	mov	r0, r5
 8017d0a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017d0e:	f7f7 fa31 	bl	800f174 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017d12:	4b1f      	ldr	r3, [pc, #124]	; (8017d90 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017d14:	4628      	mov	r0, r5
 8017d16:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017d20:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017d24:	785e      	ldrb	r6, [r3, #1]
 8017d26:	f7f7 fa0d 	bl	800f144 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017d2a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017d2e:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017d34:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017d38:	f88d 6020 	strb.w	r6, [sp, #32]
 8017d3c:	ae05      	add	r6, sp, #20
 8017d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d40:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017d44:	f8cd 801c 	str.w	r8, [sp, #28]
 8017d48:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017d4c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017d50:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017d54:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017d58:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017d5c:	f7f7 fe34 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8017d60:	4621      	mov	r1, r4
 8017d62:	4680      	mov	r8, r0
 8017d64:	4630      	mov	r0, r6
 8017d66:	f001 fd98 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	f7f8 fd54 	bl	8010818 <_ZNK8touchgfx9TypedText7getTextEv>
 8017d70:	2300      	movs	r3, #0
 8017d72:	9303      	str	r3, [sp, #12]
 8017d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d76:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017d7a:	ab07      	add	r3, sp, #28
 8017d7c:	4640      	mov	r0, r8
 8017d7e:	9300      	str	r3, [sp, #0]
 8017d80:	463b      	mov	r3, r7
 8017d82:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017d86:	f000 faa9 	bl	80182dc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017d8a:	b00d      	add	sp, #52	; 0x34
 8017d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d90:	2000c598 	.word	0x2000c598

08017d94 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017d94:	b570      	push	{r4, r5, r6, lr}
 8017d96:	4605      	mov	r5, r0
 8017d98:	880b      	ldrh	r3, [r1, #0]
 8017d9a:	4604      	mov	r4, r0
 8017d9c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017d9e:	f855 3b26 	ldr.w	r3, [r5], #38
 8017da2:	4628      	mov	r0, r5
 8017da4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8017da6:	f003 fb45 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017daa:	b201      	sxth	r1, r0
 8017dac:	4620      	mov	r0, r4
 8017dae:	47b0      	blx	r6
 8017db0:	6823      	ldr	r3, [r4, #0]
 8017db2:	4628      	mov	r0, r5
 8017db4:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8017db6:	f003 fb77 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017dba:	b201      	sxth	r1, r0
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	47b0      	blx	r6
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f003 fc05 	bl	801b5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017dc6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017dca:	bd70      	pop	{r4, r5, r6, pc}

08017dcc <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017dcc:	b510      	push	{r4, lr}
 8017dce:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017dd2:	4604      	mov	r4, r0
 8017dd4:	2bff      	cmp	r3, #255	; 0xff
 8017dd6:	d006      	beq.n	8017de6 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017dd8:	2300      	movs	r3, #0
 8017dda:	8003      	strh	r3, [r0, #0]
 8017ddc:	8043      	strh	r3, [r0, #2]
 8017dde:	8083      	strh	r3, [r0, #4]
 8017de0:	80c3      	strh	r3, [r0, #6]
 8017de2:	4620      	mov	r0, r4
 8017de4:	bd10      	pop	{r4, pc}
 8017de6:	3126      	adds	r1, #38	; 0x26
 8017de8:	f003 fb98 	bl	801b51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017dec:	e7f9      	b.n	8017de2 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017df0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017df4:	4604      	mov	r4, r0
 8017df6:	b088      	sub	sp, #32
 8017df8:	2500      	movs	r5, #0
 8017dfa:	460f      	mov	r7, r1
 8017dfc:	f854 3b26 	ldr.w	r3, [r4], #38
 8017e00:	a904      	add	r1, sp, #16
 8017e02:	4606      	mov	r6, r0
 8017e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017e0a:	4798      	blx	r3
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	f003 fb11 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e12:	4680      	mov	r8, r0
 8017e14:	4620      	mov	r0, r4
 8017e16:	f003 fb47 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017e1a:	9506      	str	r5, [sp, #24]
 8017e1c:	ad06      	add	r5, sp, #24
 8017e1e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017e22:	4639      	mov	r1, r7
 8017e24:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017e28:	4628      	mov	r0, r5
 8017e2a:	f7fd fef5 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8017e2e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017e32:	b1c3      	cbz	r3, 8017e66 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017e34:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017e38:	b1ab      	cbz	r3, 8017e66 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017e3a:	4b0c      	ldr	r3, [pc, #48]	; (8017e6c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017e42:	b10a      	cbz	r2, 8017e48 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8017e44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017e46:	b900      	cbnz	r0, 8017e4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017e48:	6898      	ldr	r0, [r3, #8]
 8017e4a:	2701      	movs	r7, #1
 8017e4c:	6801      	ldr	r1, [r0, #0]
 8017e4e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017e52:	9702      	str	r7, [sp, #8]
 8017e54:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017e58:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017e5c:	e9cd 5600 	strd	r5, r6, [sp]
 8017e60:	68cd      	ldr	r5, [r1, #12]
 8017e62:	4621      	mov	r1, r4
 8017e64:	47a8      	blx	r5
 8017e66:	b008      	add	sp, #32
 8017e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e6c:	2000c508 	.word	0x2000c508

08017e70 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017e70:	4b02      	ldr	r3, [pc, #8]	; (8017e7c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017e72:	6018      	str	r0, [r3, #0]
 8017e74:	4b02      	ldr	r3, [pc, #8]	; (8017e80 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017e76:	6019      	str	r1, [r3, #0]
 8017e78:	4770      	bx	lr
 8017e7a:	bf00      	nop
 8017e7c:	2000c510 	.word	0x2000c510
 8017e80:	2000c524 	.word	0x2000c524

08017e84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4c2b      	ldr	r4, [pc, #172]	; (8017f34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017e88:	4b2b      	ldr	r3, [pc, #172]	; (8017f38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017e8a:	6821      	ldr	r1, [r4, #0]
 8017e8c:	681a      	ldr	r2, [r3, #0]
 8017e8e:	4281      	cmp	r1, r0
 8017e90:	4d2a      	ldr	r5, [pc, #168]	; (8017f3c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017e92:	492b      	ldr	r1, [pc, #172]	; (8017f40 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017e94:	d108      	bne.n	8017ea8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017e96:	682b      	ldr	r3, [r5, #0]
 8017e98:	4293      	cmp	r3, r2
 8017e9a:	d105      	bne.n	8017ea8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017e9c:	6808      	ldr	r0, [r1, #0]
 8017e9e:	280f      	cmp	r0, #15
 8017ea0:	bf94      	ite	ls
 8017ea2:	2000      	movls	r0, #0
 8017ea4:	2001      	movhi	r0, #1
 8017ea6:	bd38      	pop	{r3, r4, r5, pc}
 8017ea8:	4b26      	ldr	r3, [pc, #152]	; (8017f44 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017eaa:	6020      	str	r0, [r4, #0]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	602a      	str	r2, [r5, #0]
 8017eb0:	4298      	cmp	r0, r3
 8017eb2:	d905      	bls.n	8017ec0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017eb4:	4b24      	ldr	r3, [pc, #144]	; (8017f48 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017eb6:	2137      	movs	r1, #55	; 0x37
 8017eb8:	4a24      	ldr	r2, [pc, #144]	; (8017f4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017eba:	4825      	ldr	r0, [pc, #148]	; (8017f50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017ebc:	f00d f80c 	bl	8024ed8 <__assert_func>
 8017ec0:	f010 0403 	ands.w	r4, r0, #3
 8017ec4:	bf1f      	itttt	ne
 8017ec6:	f1c4 0504 	rsbne	r5, r4, #4
 8017eca:	3b04      	subne	r3, #4
 8017ecc:	1952      	addne	r2, r2, r5
 8017ece:	191b      	addne	r3, r3, r4
 8017ed0:	4d20      	ldr	r5, [pc, #128]	; (8017f54 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017ed2:	4402      	add	r2, r0
 8017ed4:	1a1b      	subs	r3, r3, r0
 8017ed6:	3001      	adds	r0, #1
 8017ed8:	602a      	str	r2, [r5, #0]
 8017eda:	f020 0401 	bic.w	r4, r0, #1
 8017ede:	42a3      	cmp	r3, r4
 8017ee0:	d203      	bcs.n	8017eea <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017ee2:	4b19      	ldr	r3, [pc, #100]	; (8017f48 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017ee4:	214a      	movs	r1, #74	; 0x4a
 8017ee6:	4a19      	ldr	r2, [pc, #100]	; (8017f4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017ee8:	e7e7      	b.n	8017eba <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017eea:	f010 0002 	ands.w	r0, r0, #2
 8017eee:	bf1f      	itttt	ne
 8017ef0:	f1c0 0504 	rsbne	r5, r0, #4
 8017ef4:	1952      	addne	r2, r2, r5
 8017ef6:	1f05      	subne	r5, r0, #4
 8017ef8:	195b      	addne	r3, r3, r5
 8017efa:	4422      	add	r2, r4
 8017efc:	4d16      	ldr	r5, [pc, #88]	; (8017f58 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017efe:	1b1b      	subs	r3, r3, r4
 8017f00:	602a      	str	r2, [r5, #0]
 8017f02:	429c      	cmp	r4, r3
 8017f04:	d903      	bls.n	8017f0e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017f06:	4b10      	ldr	r3, [pc, #64]	; (8017f48 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017f08:	215d      	movs	r1, #93	; 0x5d
 8017f0a:	4a10      	ldr	r2, [pc, #64]	; (8017f4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017f0c:	e7d5      	b.n	8017eba <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017f0e:	b120      	cbz	r0, 8017f1a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017f10:	f1c0 0504 	rsb	r5, r0, #4
 8017f14:	3804      	subs	r0, #4
 8017f16:	442a      	add	r2, r5
 8017f18:	4403      	add	r3, r0
 8017f1a:	1b1b      	subs	r3, r3, r4
 8017f1c:	4422      	add	r2, r4
 8017f1e:	480f      	ldr	r0, [pc, #60]	; (8017f5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017f20:	2b0f      	cmp	r3, #15
 8017f22:	600b      	str	r3, [r1, #0]
 8017f24:	6002      	str	r2, [r0, #0]
 8017f26:	d803      	bhi.n	8017f30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017f28:	4b0d      	ldr	r3, [pc, #52]	; (8017f60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017f2a:	2170      	movs	r1, #112	; 0x70
 8017f2c:	4a07      	ldr	r2, [pc, #28]	; (8017f4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017f2e:	e7c4      	b.n	8017eba <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017f30:	2001      	movs	r0, #1
 8017f32:	e7b8      	b.n	8017ea6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017f34:	2000c518 	.word	0x2000c518
 8017f38:	2000c510 	.word	0x2000c510
 8017f3c:	2000c520 	.word	0x2000c520
 8017f40:	2000c528 	.word	0x2000c528
 8017f44:	2000c524 	.word	0x2000c524
 8017f48:	08028740 	.word	0x08028740
 8017f4c:	08028808 	.word	0x08028808
 8017f50:	08028779 	.word	0x08028779
 8017f54:	2000c52c 	.word	0x2000c52c
 8017f58:	2000c51c 	.word	0x2000c51c
 8017f5c:	2000c514 	.word	0x2000c514
 8017f60:	080287c3 	.word	0x080287c3

08017f64 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017f64:	4b04      	ldr	r3, [pc, #16]	; (8017f78 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017f66:	6818      	ldr	r0, [r3, #0]
 8017f68:	b120      	cbz	r0, 8017f74 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017f6a:	4b04      	ldr	r3, [pc, #16]	; (8017f7c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017f6c:	6818      	ldr	r0, [r3, #0]
 8017f6e:	3000      	adds	r0, #0
 8017f70:	bf18      	it	ne
 8017f72:	2001      	movne	r0, #1
 8017f74:	4770      	bx	lr
 8017f76:	bf00      	nop
 8017f78:	2000c510 	.word	0x2000c510
 8017f7c:	2000c524 	.word	0x2000c524

08017f80 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017f80:	4b01      	ldr	r3, [pc, #4]	; (8017f88 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017f82:	6818      	ldr	r0, [r3, #0]
 8017f84:	4770      	bx	lr
 8017f86:	bf00      	nop
 8017f88:	2000c518 	.word	0x2000c518

08017f8c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017f8c:	4b01      	ldr	r3, [pc, #4]	; (8017f94 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017f8e:	6818      	ldr	r0, [r3, #0]
 8017f90:	4770      	bx	lr
 8017f92:	bf00      	nop
 8017f94:	2000c520 	.word	0x2000c520

08017f98 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017f98:	4b01      	ldr	r3, [pc, #4]	; (8017fa0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017f9a:	6818      	ldr	r0, [r3, #0]
 8017f9c:	4770      	bx	lr
 8017f9e:	bf00      	nop
 8017fa0:	2000c52c 	.word	0x2000c52c

08017fa4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017fa4:	4b01      	ldr	r3, [pc, #4]	; (8017fac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017fa6:	6818      	ldr	r0, [r3, #0]
 8017fa8:	4770      	bx	lr
 8017faa:	bf00      	nop
 8017fac:	2000c51c 	.word	0x2000c51c

08017fb0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017fb0:	4b01      	ldr	r3, [pc, #4]	; (8017fb8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017fb2:	6818      	ldr	r0, [r3, #0]
 8017fb4:	4770      	bx	lr
 8017fb6:	bf00      	nop
 8017fb8:	2000c514 	.word	0x2000c514

08017fbc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017fbc:	4b01      	ldr	r3, [pc, #4]	; (8017fc4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017fbe:	6818      	ldr	r0, [r3, #0]
 8017fc0:	4770      	bx	lr
 8017fc2:	bf00      	nop
 8017fc4:	2000c528 	.word	0x2000c528

08017fc8 <_ZN8touchgfx3LCD4initEv>:
 8017fc8:	4770      	bx	lr

08017fca <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017fca:	2000      	movs	r0, #0
 8017fcc:	4770      	bx	lr

08017fce <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd2:	b091      	sub	sp, #68	; 0x44
 8017fd4:	4699      	mov	r9, r3
 8017fd6:	4617      	mov	r7, r2
 8017fd8:	2500      	movs	r5, #0
 8017fda:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017fde:	4680      	mov	r8, r0
 8017fe0:	a80e      	add	r0, sp, #56	; 0x38
 8017fe2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017fe4:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017fe8:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017fec:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017ff0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ff4:	910d      	str	r1, [sp, #52]	; 0x34
 8017ff6:	950e      	str	r5, [sp, #56]	; 0x38
 8017ff8:	f000 fe3a 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ffc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017ffe:	f8d9 6000 	ldr.w	r6, [r9]
 8018002:	6818      	ldr	r0, [r3, #0]
 8018004:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018006:	f9b4 b000 	ldrsh.w	fp, [r4]
 801800a:	1b80      	subs	r0, r0, r6
 801800c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018010:	eb02 0c06 	add.w	ip, r2, r6
 8018014:	ebab 0e0c 	sub.w	lr, fp, ip
 8018018:	4570      	cmp	r0, lr
 801801a:	f340 80bc 	ble.w	8018196 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801801e:	88a1      	ldrh	r1, [r4, #4]
 8018020:	4459      	add	r1, fp
 8018022:	b209      	sxth	r1, r1
 8018024:	458c      	cmp	ip, r1
 8018026:	f300 80b6 	bgt.w	8018196 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801802a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801802e:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8018032:	4283      	cmp	r3, r0
 8018034:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8018038:	edd9 6a07 	vldr	s13, [r9, #28]
 801803c:	bfa8      	it	ge
 801803e:	4603      	movge	r3, r0
 8018040:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8018044:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8018048:	45e3      	cmp	fp, ip
 801804a:	ee07 3a90 	vmov	s15, r3
 801804e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018052:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018056:	ee25 4a04 	vmul.f32	s8, s10, s8
 801805a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801805e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018062:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018066:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801806a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801806e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018072:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018076:	ee61 1a87 	vmul.f32	s3, s3, s14
 801807a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801807e:	f340 808d 	ble.w	801819c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8018082:	fb9e f5f3 	sdiv	r5, lr, r3
 8018086:	ee07 5a10 	vmov	s14, r5
 801808a:	2d00      	cmp	r5, #0
 801808c:	fb03 e415 	mls	r4, r3, r5, lr
 8018090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018094:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018098:	eee7 0a24 	vfma.f32	s1, s14, s9
 801809c:	eea7 1a05 	vfma.f32	s2, s14, s10
 80180a0:	dd12      	ble.n	80180c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80180a2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80180a6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80180aa:	ee31 2a45 	vsub.f32	s4, s2, s10
 80180ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80180b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180b6:	bf14      	ite	ne
 80180b8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80180bc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80180c0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80180c4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80180c8:	fb05 f703 	mul.w	r7, r5, r3
 80180cc:	1bc0      	subs	r0, r0, r7
 80180ce:	443e      	add	r6, r7
 80180d0:	1997      	adds	r7, r2, r6
 80180d2:	4407      	add	r7, r0
 80180d4:	42b9      	cmp	r1, r7
 80180d6:	bfbc      	itt	lt
 80180d8:	1a88      	sublt	r0, r1, r2
 80180da:	1b80      	sublt	r0, r0, r6
 80180dc:	2800      	cmp	r0, #0
 80180de:	dd5a      	ble.n	8018196 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80180e0:	fb90 f1f3 	sdiv	r1, r0, r3
 80180e4:	fb03 0211 	mls	r2, r3, r1, r0
 80180e8:	b90a      	cbnz	r2, 80180ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 80180ea:	3901      	subs	r1, #1
 80180ec:	461a      	mov	r2, r3
 80180ee:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80180f2:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 80180f6:	44a4      	add	ip, r4
 80180f8:	2900      	cmp	r1, #0
 80180fa:	bfcc      	ite	gt
 80180fc:	469e      	movgt	lr, r3
 80180fe:	4696      	movle	lr, r2
 8018100:	fb03 c505 	mla	r5, r3, r5, ip
 8018104:	eef0 6a42 	vmov.f32	s13, s4
 8018108:	eeb0 7a61 	vmov.f32	s14, s3
 801810c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018110:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018114:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018118:	ee21 3a23 	vmul.f32	s6, s2, s7
 801811c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018120:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018124:	ee17 0a90 	vmov	r0, s15
 8018128:	ee73 7a42 	vsub.f32	s15, s6, s4
 801812c:	fb90 f6f3 	sdiv	r6, r0, r3
 8018130:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018134:	ee17 0a90 	vmov	r0, s15
 8018138:	fb90 f7f3 	sdiv	r7, r0, r3
 801813c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018140:	f8d0 8000 	ldr.w	r8, [r0]
 8018144:	900c      	str	r0, [sp, #48]	; 0x30
 8018146:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018148:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801814c:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8018150:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018154:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8018158:	f8cd a020 	str.w	sl, [sp, #32]
 801815c:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8018160:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018162:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8018166:	9603      	str	r6, [sp, #12]
 8018168:	44ca      	add	sl, r9
 801816a:	9506      	str	r5, [sp, #24]
 801816c:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8018170:	ee16 0a90 	vmov	r0, s13
 8018174:	f8cd a01c 	str.w	sl, [sp, #28]
 8018178:	fb07 0704 	mla	r7, r7, r4, r0
 801817c:	ee17 0a10 	vmov	r0, s14
 8018180:	fb06 0604 	mla	r6, r6, r4, r0
 8018184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018186:	9702      	str	r7, [sp, #8]
 8018188:	e9cd 3600 	strd	r3, r6, [sp]
 801818c:	ebae 0304 	sub.w	r3, lr, r4
 8018190:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018194:	47a8      	blx	r5
 8018196:	b011      	add	sp, #68	; 0x44
 8018198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801819c:	462c      	mov	r4, r5
 801819e:	e797      	b.n	80180d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080181a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80181a0:	b570      	push	{r4, r5, r6, lr}
 80181a2:	4604      	mov	r4, r0
 80181a4:	2500      	movs	r5, #0
 80181a6:	9804      	ldr	r0, [sp, #16]
 80181a8:	7223      	strb	r3, [r4, #8]
 80181aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80181ae:	8025      	strh	r5, [r4, #0]
 80181b0:	6061      	str	r1, [r4, #4]
 80181b2:	7263      	strb	r3, [r4, #9]
 80181b4:	60e0      	str	r0, [r4, #12]
 80181b6:	8222      	strh	r2, [r4, #16]
 80181b8:	8265      	strh	r5, [r4, #18]
 80181ba:	82a5      	strh	r5, [r4, #20]
 80181bc:	82e5      	strh	r5, [r4, #22]
 80181be:	8325      	strh	r5, [r4, #24]
 80181c0:	8365      	strh	r5, [r4, #26]
 80181c2:	83a5      	strh	r5, [r4, #28]
 80181c4:	77a5      	strb	r5, [r4, #30]
 80181c6:	6803      	ldr	r3, [r0, #0]
 80181c8:	695b      	ldr	r3, [r3, #20]
 80181ca:	4798      	blx	r3
 80181cc:	4606      	mov	r6, r0
 80181ce:	b1f8      	cbz	r0, 8018210 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80181d0:	68e0      	ldr	r0, [r4, #12]
 80181d2:	4631      	mov	r1, r6
 80181d4:	6803      	ldr	r3, [r0, #0]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	4798      	blx	r3
 80181da:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80181de:	4605      	mov	r5, r0
 80181e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80181e4:	7a83      	ldrb	r3, [r0, #10]
 80181e6:	4313      	orrs	r3, r2
 80181e8:	83a3      	strh	r3, [r4, #28]
 80181ea:	7a63      	ldrb	r3, [r4, #9]
 80181ec:	2b04      	cmp	r3, #4
 80181ee:	d10f      	bne.n	8018210 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80181f0:	68e0      	ldr	r0, [r4, #12]
 80181f2:	462a      	mov	r2, r5
 80181f4:	4631      	mov	r1, r6
 80181f6:	6803      	ldr	r3, [r0, #0]
 80181f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181fa:	4798      	blx	r3
 80181fc:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8018200:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018204:	7aab      	ldrb	r3, [r5, #10]
 8018206:	4313      	orrs	r3, r2
 8018208:	4418      	add	r0, r3
 801820a:	8ba3      	ldrh	r3, [r4, #28]
 801820c:	4418      	add	r0, r3
 801820e:	83a0      	strh	r0, [r4, #28]
 8018210:	4620      	mov	r0, r4
 8018212:	bd70      	pop	{r4, r5, r6, pc}

08018214 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018218:	2400      	movs	r4, #0
 801821a:	b085      	sub	sp, #20
 801821c:	4681      	mov	r9, r0
 801821e:	460f      	mov	r7, r1
 8018220:	4692      	mov	sl, r2
 8018222:	469b      	mov	fp, r3
 8018224:	46a0      	mov	r8, r4
 8018226:	4626      	mov	r6, r4
 8018228:	4554      	cmp	r4, sl
 801822a:	da21      	bge.n	8018270 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801822c:	2300      	movs	r3, #0
 801822e:	463a      	mov	r2, r7
 8018230:	4659      	mov	r1, fp
 8018232:	4648      	mov	r0, r9
 8018234:	9303      	str	r3, [sp, #12]
 8018236:	ab03      	add	r3, sp, #12
 8018238:	f002 fb52 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801823c:	4605      	mov	r5, r0
 801823e:	b1b8      	cbz	r0, 8018270 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018240:	280a      	cmp	r0, #10
 8018242:	d015      	beq.n	8018270 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018244:	9a03      	ldr	r2, [sp, #12]
 8018246:	b182      	cbz	r2, 801826a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8018248:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801824c:	4641      	mov	r1, r8
 801824e:	7a93      	ldrb	r3, [r2, #10]
 8018250:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018254:	8895      	ldrh	r5, [r2, #4]
 8018256:	4303      	orrs	r3, r0
 8018258:	4638      	mov	r0, r7
 801825a:	9301      	str	r3, [sp, #4]
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018260:	4798      	blx	r3
 8018262:	9b01      	ldr	r3, [sp, #4]
 8018264:	4418      	add	r0, r3
 8018266:	4406      	add	r6, r0
 8018268:	b2b6      	uxth	r6, r6
 801826a:	3401      	adds	r4, #1
 801826c:	46a8      	mov	r8, r5
 801826e:	e7db      	b.n	8018228 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8018270:	4630      	mov	r0, r6
 8018272:	b005      	add	sp, #20
 8018274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018278 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018278:	2a02      	cmp	r2, #2
 801827a:	b530      	push	{r4, r5, lr}
 801827c:	d011      	beq.n	80182a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801827e:	2a03      	cmp	r2, #3
 8018280:	d01c      	beq.n	80182bc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018282:	2a01      	cmp	r2, #1
 8018284:	d10c      	bne.n	80182a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018286:	888b      	ldrh	r3, [r1, #4]
 8018288:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801828c:	8801      	ldrh	r1, [r0, #0]
 801828e:	1a9b      	subs	r3, r3, r2
 8018290:	8844      	ldrh	r4, [r0, #2]
 8018292:	1a5b      	subs	r3, r3, r1
 8018294:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018298:	8004      	strh	r4, [r0, #0]
 801829a:	8043      	strh	r3, [r0, #2]
 801829c:	8081      	strh	r1, [r0, #4]
 801829e:	80c2      	strh	r2, [r0, #6]
 80182a0:	bd30      	pop	{r4, r5, pc}
 80182a2:	88cb      	ldrh	r3, [r1, #6]
 80182a4:	88c2      	ldrh	r2, [r0, #6]
 80182a6:	1a9b      	subs	r3, r3, r2
 80182a8:	8842      	ldrh	r2, [r0, #2]
 80182aa:	1a9b      	subs	r3, r3, r2
 80182ac:	888a      	ldrh	r2, [r1, #4]
 80182ae:	8881      	ldrh	r1, [r0, #4]
 80182b0:	8043      	strh	r3, [r0, #2]
 80182b2:	1a52      	subs	r2, r2, r1
 80182b4:	8801      	ldrh	r1, [r0, #0]
 80182b6:	1a52      	subs	r2, r2, r1
 80182b8:	8002      	strh	r2, [r0, #0]
 80182ba:	e7f1      	b.n	80182a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80182bc:	88cb      	ldrh	r3, [r1, #6]
 80182be:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80182c2:	8841      	ldrh	r1, [r0, #2]
 80182c4:	1a9b      	subs	r3, r3, r2
 80182c6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80182ca:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80182ce:	1a5b      	subs	r3, r3, r1
 80182d0:	8045      	strh	r5, [r0, #2]
 80182d2:	8082      	strh	r2, [r0, #4]
 80182d4:	8003      	strh	r3, [r0, #0]
 80182d6:	80c4      	strh	r4, [r0, #6]
 80182d8:	e7e2      	b.n	80182a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

080182dc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 80182dc:	b570      	push	{r4, r5, r6, lr}
 80182de:	b086      	sub	sp, #24
 80182e0:	ac02      	add	r4, sp, #8
 80182e2:	e884 0006 	stmia.w	r4, {r1, r2}
 80182e6:	461a      	mov	r2, r3
 80182e8:	ab0c      	add	r3, sp, #48	; 0x30
 80182ea:	9305      	str	r3, [sp, #20]
 80182ec:	4b0a      	ldr	r3, [pc, #40]	; (8018318 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 80182ee:	685d      	ldr	r5, [r3, #4]
 80182f0:	1069      	asrs	r1, r5, #1
 80182f2:	07ed      	lsls	r5, r5, #31
 80182f4:	eb00 0601 	add.w	r6, r0, r1
 80182f8:	bf46      	itte	mi
 80182fa:	681b      	ldrmi	r3, [r3, #0]
 80182fc:	5841      	ldrmi	r1, [r0, r1]
 80182fe:	681d      	ldrpl	r5, [r3, #0]
 8018300:	4630      	mov	r0, r6
 8018302:	bf48      	it	mi
 8018304:	58cd      	ldrmi	r5, [r1, r3]
 8018306:	4621      	mov	r1, r4
 8018308:	9b05      	ldr	r3, [sp, #20]
 801830a:	9301      	str	r3, [sp, #4]
 801830c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801830e:	9300      	str	r3, [sp, #0]
 8018310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018312:	47a8      	blx	r5
 8018314:	b006      	add	sp, #24
 8018316:	bd70      	pop	{r4, r5, r6, pc}
 8018318:	20000030 	.word	0x20000030

0801831c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018320:	b09d      	sub	sp, #116	; 0x74
 8018322:	9114      	str	r1, [sp, #80]	; 0x50
 8018324:	9315      	str	r3, [sp, #84]	; 0x54
 8018326:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018328:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801832a:	8809      	ldrh	r1, [r1, #0]
 801832c:	889b      	ldrh	r3, [r3, #4]
 801832e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018330:	440b      	add	r3, r1
 8018332:	9210      	str	r2, [sp, #64]	; 0x40
 8018334:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8018338:	b21b      	sxth	r3, r3
 801833a:	900f      	str	r0, [sp, #60]	; 0x3c
 801833c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018340:	930e      	str	r3, [sp, #56]	; 0x38
 8018342:	6833      	ldr	r3, [r6, #0]
 8018344:	7a59      	ldrb	r1, [r3, #9]
 8018346:	7a1b      	ldrb	r3, [r3, #8]
 8018348:	9113      	str	r1, [sp, #76]	; 0x4c
 801834a:	9312      	str	r3, [sp, #72]	; 0x48
 801834c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801834e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018352:	2a00      	cmp	r2, #0
 8018354:	d059      	beq.n	801840a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8018356:	7c33      	ldrb	r3, [r6, #16]
 8018358:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801835a:	2b04      	cmp	r3, #4
 801835c:	bf14      	ite	ne
 801835e:	2301      	movne	r3, #1
 8018360:	2302      	moveq	r3, #2
 8018362:	4413      	add	r3, r2
 8018364:	f04f 0800 	mov.w	r8, #0
 8018368:	930d      	str	r3, [sp, #52]	; 0x34
 801836a:	4645      	mov	r5, r8
 801836c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018370:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8018374:	4293      	cmp	r3, r2
 8018376:	da75      	bge.n	8018464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8018378:	2300      	movs	r3, #0
 801837a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801837c:	6832      	ldr	r2, [r6, #0]
 801837e:	931a      	str	r3, [sp, #104]	; 0x68
 8018380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018382:	428b      	cmp	r3, r1
 8018384:	db43      	blt.n	801840e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8018386:	6813      	ldr	r3, [r2, #0]
 8018388:	4610      	mov	r0, r2
 801838a:	695b      	ldr	r3, [r3, #20]
 801838c:	4798      	blx	r3
 801838e:	4681      	mov	r9, r0
 8018390:	6830      	ldr	r0, [r6, #0]
 8018392:	aa1b      	add	r2, sp, #108	; 0x6c
 8018394:	4649      	mov	r1, r9
 8018396:	6803      	ldr	r3, [r0, #0]
 8018398:	689f      	ldr	r7, [r3, #8]
 801839a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801839e:	47b8      	blx	r7
 80183a0:	901a      	str	r0, [sp, #104]	; 0x68
 80183a2:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80183a6:	45d1      	cmp	r9, sl
 80183a8:	d045      	beq.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80183aa:	f242 070b 	movw	r7, #8203	; 0x200b
 80183ae:	45b9      	cmp	r9, r7
 80183b0:	d041      	beq.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80183b2:	f1b9 0f00 	cmp.w	r9, #0
 80183b6:	f000 80ee 	beq.w	8018596 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80183ba:	f1b9 0f0a 	cmp.w	r9, #10
 80183be:	d057      	beq.n	8018470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80183c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80183c2:	b383      	cbz	r3, 8018426 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 80183c4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80183c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80183ca:	2a00      	cmp	r2, #0
 80183cc:	f000 80d2 	beq.w	8018574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 80183d0:	f1bb 0f00 	cmp.w	fp, #0
 80183d4:	d100      	bne.n	80183d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 80183d6:	4444      	add	r4, r8
 80183d8:	f992 800d 	ldrsb.w	r8, [r2, #13]
 80183dc:	f1bb 0f01 	cmp.w	fp, #1
 80183e0:	f408 7380 	and.w	r3, r8, #256	; 0x100
 80183e4:	f892 800a 	ldrb.w	r8, [r2, #10]
 80183e8:	ea48 0803 	orr.w	r8, r8, r3
 80183ec:	d128      	bne.n	8018440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 80183ee:	eba4 0408 	sub.w	r4, r4, r8
 80183f2:	2d00      	cmp	r5, #0
 80183f4:	d143      	bne.n	801847e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80183f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80183f8:	eb08 0304 	add.w	r3, r8, r4
 80183fc:	4413      	add	r3, r2
 80183fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018400:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018404:	4293      	cmp	r3, r2
 8018406:	da44      	bge.n	8018492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018408:	e02b      	b.n	8018462 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801840a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801840c:	e7aa      	b.n	8018364 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801840e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018412:	4659      	mov	r1, fp
 8018414:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018416:	9301      	str	r3, [sp, #4]
 8018418:	ab1b      	add	r3, sp, #108	; 0x6c
 801841a:	9300      	str	r3, [sp, #0]
 801841c:	ab1a      	add	r3, sp, #104	; 0x68
 801841e:	f002 fa93 	bl	801a948 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018422:	4681      	mov	r9, r0
 8018424:	e7bd      	b.n	80183a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8018426:	6830      	ldr	r0, [r6, #0]
 8018428:	6803      	ldr	r3, [r0, #0]
 801842a:	691b      	ldr	r3, [r3, #16]
 801842c:	4798      	blx	r3
 801842e:	4550      	cmp	r0, sl
 8018430:	d001      	beq.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018432:	42b8      	cmp	r0, r7
 8018434:	d1c8      	bne.n	80183c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018438:	464d      	mov	r5, r9
 801843a:	3301      	adds	r3, #1
 801843c:	930c      	str	r3, [sp, #48]	; 0x30
 801843e:	e797      	b.n	8018370 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018440:	2d00      	cmp	r5, #0
 8018442:	f000 80aa 	beq.w	801859a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8018446:	f1bb 0f00 	cmp.w	fp, #0
 801844a:	d118      	bne.n	801847e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801844c:	6830      	ldr	r0, [r6, #0]
 801844e:	4629      	mov	r1, r5
 8018450:	6803      	ldr	r3, [r0, #0]
 8018452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018454:	4798      	blx	r3
 8018456:	4404      	add	r4, r0
 8018458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801845a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801845c:	1ae3      	subs	r3, r4, r3
 801845e:	4293      	cmp	r3, r2
 8018460:	dd17      	ble.n	8018492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018462:	464d      	mov	r5, r9
 8018464:	2d00      	cmp	r5, #0
 8018466:	f000 8096 	beq.w	8018596 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801846a:	2d0a      	cmp	r5, #10
 801846c:	f040 8084 	bne.w	8018578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018470:	250a      	movs	r5, #10
 8018472:	fab5 f085 	clz	r0, r5
 8018476:	0940      	lsrs	r0, r0, #5
 8018478:	b01d      	add	sp, #116	; 0x74
 801847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847e:	6830      	ldr	r0, [r6, #0]
 8018480:	4629      	mov	r1, r5
 8018482:	6803      	ldr	r3, [r0, #0]
 8018484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018486:	4798      	blx	r3
 8018488:	f1bb 0f01 	cmp.w	fp, #1
 801848c:	eba4 0400 	sub.w	r4, r4, r0
 8018490:	d0b1      	beq.n	80183f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018492:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018494:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018496:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801849a:	f9b3 5000 	ldrsh.w	r5, [r3]
 801849e:	7b43      	ldrb	r3, [r0, #13]
 80184a0:	4421      	add	r1, r4
 80184a2:	015b      	lsls	r3, r3, #5
 80184a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80184a8:	7983      	ldrb	r3, [r0, #6]
 80184aa:	4313      	orrs	r3, r2
 80184ac:	440b      	add	r3, r1
 80184ae:	42ab      	cmp	r3, r5
 80184b0:	dbc1      	blt.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80184b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184b4:	4299      	cmp	r1, r3
 80184b6:	dabe      	bge.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80184b8:	6830      	ldr	r0, [r6, #0]
 80184ba:	42a5      	cmp	r5, r4
 80184bc:	6803      	ldr	r3, [r0, #0]
 80184be:	bfcc      	ite	gt
 80184c0:	1b2d      	subgt	r5, r5, r4
 80184c2:	2500      	movle	r5, #0
 80184c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184c6:	bfc8      	it	gt
 80184c8:	b2ad      	uxthgt	r5, r5
 80184ca:	4798      	blx	r3
 80184cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80184ce:	4935      	ldr	r1, [pc, #212]	; (80185a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 80184d0:	7b5a      	ldrb	r2, [r3, #13]
 80184d2:	f893 e008 	ldrb.w	lr, [r3, #8]
 80184d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80184da:	bf18      	it	ne
 80184dc:	468c      	movne	ip, r1
 80184de:	9915      	ldr	r1, [sp, #84]	; 0x54
 80184e0:	bf08      	it	eq
 80184e2:	f04f 0c00 	moveq.w	ip, #0
 80184e6:	4408      	add	r0, r1
 80184e8:	00d1      	lsls	r1, r2, #3
 80184ea:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80184ee:	ea41 070e 	orr.w	r7, r1, lr
 80184f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80184f4:	ea4c 0707 	orr.w	r7, ip, r7
 80184f8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80184fc:	1bc7      	subs	r7, r0, r7
 80184fe:	b2bf      	uxth	r7, r7
 8018500:	fa0f fa87 	sxth.w	sl, r7
 8018504:	4551      	cmp	r1, sl
 8018506:	dd33      	ble.n	8018570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018508:	0112      	lsls	r2, r2, #4
 801850a:	79d8      	ldrb	r0, [r3, #7]
 801850c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018510:	4302      	orrs	r2, r0
 8018512:	4492      	add	sl, r2
 8018514:	4551      	cmp	r1, sl
 8018516:	dc8e      	bgt.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018518:	1bcf      	subs	r7, r1, r7
 801851a:	468a      	mov	sl, r1
 801851c:	b2bf      	uxth	r7, r7
 801851e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018522:	6830      	ldr	r0, [r6, #0]
 8018524:	681a      	ldr	r2, [r3, #0]
 8018526:	6801      	ldr	r1, [r0, #0]
 8018528:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801852a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801852c:	9311      	str	r3, [sp, #68]	; 0x44
 801852e:	9216      	str	r2, [sp, #88]	; 0x58
 8018530:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018532:	4788      	blx	r1
 8018534:	79b1      	ldrb	r1, [r6, #6]
 8018536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018538:	910b      	str	r1, [sp, #44]	; 0x2c
 801853a:	7bb1      	ldrb	r1, [r6, #14]
 801853c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801853e:	910a      	str	r1, [sp, #40]	; 0x28
 8018540:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8018544:	9109      	str	r1, [sp, #36]	; 0x24
 8018546:	68b1      	ldr	r1, [r6, #8]
 8018548:	9305      	str	r3, [sp, #20]
 801854a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801854c:	9206      	str	r2, [sp, #24]
 801854e:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018552:	4425      	add	r5, r4
 8018554:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018558:	b22d      	sxth	r5, r5
 801855a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801855c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018560:	9500      	str	r5, [sp, #0]
 8018562:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018564:	681a      	ldr	r2, [r3, #0]
 8018566:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018568:	685b      	ldr	r3, [r3, #4]
 801856a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801856c:	47a8      	blx	r5
 801856e:	e762      	b.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018570:	2700      	movs	r7, #0
 8018572:	e7d4      	b.n	801851e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8018574:	4690      	mov	r8, r2
 8018576:	e75e      	b.n	8018436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018578:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801857a:	3401      	adds	r4, #1
 801857c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801857e:	429c      	cmp	r4, r3
 8018580:	f6bf af77 	bge.w	8018472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018584:	4659      	mov	r1, fp
 8018586:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018588:	f002 f96a 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801858c:	4605      	mov	r5, r0
 801858e:	b110      	cbz	r0, 8018596 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018590:	280a      	cmp	r0, #10
 8018592:	d1f2      	bne.n	801857a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8018594:	e76c      	b.n	8018470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018596:	2500      	movs	r5, #0
 8018598:	e76b      	b.n	8018472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801859a:	f1bb 0f00 	cmp.w	fp, #0
 801859e:	f43f af5b 	beq.w	8018458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80185a2:	e776      	b.n	8018492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80185a4:	fffffe00 	.word	0xfffffe00

080185a8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80185a8:	b530      	push	{r4, r5, lr}
 80185aa:	8a44      	ldrh	r4, [r0, #18]
 80185ac:	8ac5      	ldrh	r5, [r0, #22]
 80185ae:	82c3      	strh	r3, [r0, #22]
 80185b0:	442c      	add	r4, r5
 80185b2:	1ae4      	subs	r4, r4, r3
 80185b4:	8b03      	ldrh	r3, [r0, #24]
 80185b6:	8244      	strh	r4, [r0, #18]
 80185b8:	8a84      	ldrh	r4, [r0, #20]
 80185ba:	4422      	add	r2, r4
 80185bc:	440c      	add	r4, r1
 80185be:	1a59      	subs	r1, r3, r1
 80185c0:	8342      	strh	r2, [r0, #26]
 80185c2:	8284      	strh	r4, [r0, #20]
 80185c4:	8301      	strh	r1, [r0, #24]
 80185c6:	bd30      	pop	{r4, r5, pc}

080185c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80185c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185cc:	7a45      	ldrb	r5, [r0, #9]
 80185ce:	b085      	sub	sp, #20
 80185d0:	4604      	mov	r4, r0
 80185d2:	4689      	mov	r9, r1
 80185d4:	1eeb      	subs	r3, r5, #3
 80185d6:	b2db      	uxtb	r3, r3
 80185d8:	b329      	cbz	r1, 8018626 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d921      	bls.n	8018622 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 80185de:	1e69      	subs	r1, r5, #1
 80185e0:	f1d1 0b00 	rsbs	fp, r1, #0
 80185e4:	eb4b 0b01 	adc.w	fp, fp, r1
 80185e8:	1eaa      	subs	r2, r5, #2
 80185ea:	2500      	movs	r5, #0
 80185ec:	4253      	negs	r3, r2
 80185ee:	9500      	str	r5, [sp, #0]
 80185f0:	4153      	adcs	r3, r2
 80185f2:	9301      	str	r3, [sp, #4]
 80185f4:	2600      	movs	r6, #0
 80185f6:	f242 080b 	movw	r8, #8203	; 0x200b
 80185fa:	8266      	strh	r6, [r4, #18]
 80185fc:	82a6      	strh	r6, [r4, #20]
 80185fe:	2300      	movs	r3, #0
 8018600:	68e2      	ldr	r2, [r4, #12]
 8018602:	7a21      	ldrb	r1, [r4, #8]
 8018604:	9303      	str	r3, [sp, #12]
 8018606:	ab03      	add	r3, sp, #12
 8018608:	6860      	ldr	r0, [r4, #4]
 801860a:	8827      	ldrh	r7, [r4, #0]
 801860c:	f002 f968 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018610:	8020      	strh	r0, [r4, #0]
 8018612:	b9b0      	cbnz	r0, 8018642 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8018614:	8b22      	ldrh	r2, [r4, #24]
 8018616:	2300      	movs	r3, #0
 8018618:	4611      	mov	r1, r2
 801861a:	4620      	mov	r0, r4
 801861c:	f7ff ffc4 	bl	80185a8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018620:	e062      	b.n	80186e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018622:	468b      	mov	fp, r1
 8018624:	e7e0      	b.n	80185e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8018626:	2b01      	cmp	r3, #1
 8018628:	f105 35ff 	add.w	r5, r5, #4294967295
 801862c:	9101      	str	r1, [sp, #4]
 801862e:	468b      	mov	fp, r1
 8018630:	bf8c      	ite	hi
 8018632:	2300      	movhi	r3, #0
 8018634:	2301      	movls	r3, #1
 8018636:	2d01      	cmp	r5, #1
 8018638:	9300      	str	r3, [sp, #0]
 801863a:	bf8c      	ite	hi
 801863c:	2500      	movhi	r5, #0
 801863e:	2501      	movls	r5, #1
 8018640:	e7d8      	b.n	80185f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8018642:	8ae3      	ldrh	r3, [r4, #22]
 8018644:	280a      	cmp	r0, #10
 8018646:	f103 0301 	add.w	r3, r3, #1
 801864a:	82e3      	strh	r3, [r4, #22]
 801864c:	d0e2      	beq.n	8018614 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801864e:	9a03      	ldr	r2, [sp, #12]
 8018650:	b972      	cbnz	r2, 8018670 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8018652:	4540      	cmp	r0, r8
 8018654:	d1d3      	bne.n	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018656:	8823      	ldrh	r3, [r4, #0]
 8018658:	8b21      	ldrh	r1, [r4, #24]
 801865a:	2b20      	cmp	r3, #32
 801865c:	d001      	beq.n	8018662 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801865e:	4543      	cmp	r3, r8
 8018660:	d11d      	bne.n	801869e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018662:	2f20      	cmp	r7, #32
 8018664:	d002      	beq.n	801866c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018666:	4547      	cmp	r7, r8
 8018668:	bf18      	it	ne
 801866a:	460e      	movne	r6, r1
 801866c:	2001      	movs	r0, #1
 801866e:	e017      	b.n	80186a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8018670:	4540      	cmp	r0, r8
 8018672:	d012      	beq.n	801869a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018674:	8893      	ldrh	r3, [r2, #4]
 8018676:	4639      	mov	r1, r7
 8018678:	8023      	strh	r3, [r4, #0]
 801867a:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801867e:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018682:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8018686:	ea4a 0a00 	orr.w	sl, sl, r0
 801868a:	68e0      	ldr	r0, [r4, #12]
 801868c:	6803      	ldr	r3, [r0, #0]
 801868e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018690:	4798      	blx	r3
 8018692:	eb0a 0200 	add.w	r2, sl, r0
 8018696:	b292      	uxth	r2, r2
 8018698:	e7dd      	b.n	8018656 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801869a:	2200      	movs	r2, #0
 801869c:	e7db      	b.n	8018656 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801869e:	2000      	movs	r0, #0
 80186a0:	440a      	add	r2, r1
 80186a2:	8aa3      	ldrh	r3, [r4, #20]
 80186a4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80186a8:	b292      	uxth	r2, r2
 80186aa:	8322      	strh	r2, [r4, #24]
 80186ac:	4413      	add	r3, r2
 80186ae:	f1b9 0f00 	cmp.w	r9, #0
 80186b2:	d022      	beq.n	80186fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 80186b4:	f1bb 0f00 	cmp.w	fp, #0
 80186b8:	d102      	bne.n	80186c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 80186ba:	9901      	ldr	r1, [sp, #4]
 80186bc:	b149      	cbz	r1, 80186d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80186be:	b140      	cbz	r0, 80186d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80186c0:	8ba1      	ldrh	r1, [r4, #28]
 80186c2:	4419      	add	r1, r3
 80186c4:	458c      	cmp	ip, r1
 80186c6:	da12      	bge.n	80186ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80186c8:	8a61      	ldrh	r1, [r4, #18]
 80186ca:	b181      	cbz	r1, 80186ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80186cc:	4563      	cmp	r3, ip
 80186ce:	dd96      	ble.n	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186d0:	e004      	b.n	80186dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 80186d2:	4563      	cmp	r3, ip
 80186d4:	dd93      	ble.n	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186d6:	8a63      	ldrh	r3, [r4, #18]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d090      	beq.n	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186dc:	2301      	movs	r3, #1
 80186de:	8ba2      	ldrh	r2, [r4, #28]
 80186e0:	77a3      	strb	r3, [r4, #30]
 80186e2:	8b63      	ldrh	r3, [r4, #26]
 80186e4:	4413      	add	r3, r2
 80186e6:	8363      	strh	r3, [r4, #26]
 80186e8:	b005      	add	sp, #20
 80186ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ee:	2300      	movs	r3, #0
 80186f0:	4611      	mov	r1, r2
 80186f2:	4620      	mov	r0, r4
 80186f4:	f7ff ff58 	bl	80185a8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80186f8:	e781      	b.n	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186fa:	4563      	cmp	r3, ip
 80186fc:	dd16      	ble.n	801872c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 80186fe:	9b00      	ldr	r3, [sp, #0]
 8018700:	b113      	cbz	r3, 8018708 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018702:	2301      	movs	r3, #1
 8018704:	460a      	mov	r2, r1
 8018706:	e787      	b.n	8018618 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8018708:	2d00      	cmp	r5, #0
 801870a:	f43f af78 	beq.w	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801870e:	2800      	cmp	r0, #0
 8018710:	f47f af75 	bne.w	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018714:	2f20      	cmp	r7, #32
 8018716:	d001      	beq.n	801871c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8018718:	4547      	cmp	r7, r8
 801871a:	d102      	bne.n	8018722 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801871c:	2301      	movs	r3, #1
 801871e:	4632      	mov	r2, r6
 8018720:	e77b      	b.n	801861a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8018722:	8a63      	ldrh	r3, [r4, #18]
 8018724:	2b00      	cmp	r3, #0
 8018726:	f43f af6a 	beq.w	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801872a:	e7dd      	b.n	80186e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801872c:	2800      	cmp	r0, #0
 801872e:	f47f af66 	bne.w	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018732:	2f20      	cmp	r7, #32
 8018734:	d002      	beq.n	801873c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8018736:	4547      	cmp	r7, r8
 8018738:	f47f af61 	bne.w	80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801873c:	2301      	movs	r3, #1
 801873e:	4632      	mov	r2, r6
 8018740:	e7d7      	b.n	80186f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08018742 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018742:	b570      	push	{r4, r5, r6, lr}
 8018744:	4606      	mov	r6, r0
 8018746:	b08a      	sub	sp, #40	; 0x28
 8018748:	4615      	mov	r5, r2
 801874a:	b191      	cbz	r1, 8018772 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801874c:	2401      	movs	r4, #1
 801874e:	e9cd 3100 	strd	r3, r1, [sp]
 8018752:	4613      	mov	r3, r2
 8018754:	4601      	mov	r1, r0
 8018756:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801875a:	a802      	add	r0, sp, #8
 801875c:	f7ff fd20 	bl	80181a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018760:	2100      	movs	r1, #0
 8018762:	a802      	add	r0, sp, #8
 8018764:	f7ff ff30 	bl	80185c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018768:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801876c:	b173      	cbz	r3, 801878c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801876e:	3401      	adds	r4, #1
 8018770:	e7f6      	b.n	8018760 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018772:	2401      	movs	r4, #1
 8018774:	4611      	mov	r1, r2
 8018776:	f002 f873 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801877a:	280a      	cmp	r0, #10
 801877c:	4629      	mov	r1, r5
 801877e:	4630      	mov	r0, r6
 8018780:	bf08      	it	eq
 8018782:	3401      	addeq	r4, #1
 8018784:	f002 f86c 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018788:	2800      	cmp	r0, #0
 801878a:	d1f6      	bne.n	801877a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801878c:	b2a0      	uxth	r0, r4
 801878e:	b00a      	add	sp, #40	; 0x28
 8018790:	bd70      	pop	{r4, r5, r6, pc}

08018792 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018796:	b0db      	sub	sp, #364	; 0x16c
 8018798:	468a      	mov	sl, r1
 801879a:	461c      	mov	r4, r3
 801879c:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80187a0:	9009      	str	r0, [sp, #36]	; 0x24
 80187a2:	f1bb 0f00 	cmp.w	fp, #0
 80187a6:	f000 80c7 	beq.w	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	f000 80c3 	beq.w	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80187b2:	7ba3      	ldrb	r3, [r4, #14]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	f000 80bf 	beq.w	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80187ba:	af0c      	add	r7, sp, #48	; 0x30
 80187bc:	6810      	ldr	r0, [r2, #0]
 80187be:	6851      	ldr	r1, [r2, #4]
 80187c0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 80187c4:	463b      	mov	r3, r7
 80187c6:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 80187ca:	c303      	stmia	r3!, {r0, r1}
 80187cc:	2100      	movs	r1, #0
 80187ce:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80187d2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80187d6:	4638      	mov	r0, r7
 80187d8:	910e      	str	r1, [sp, #56]	; 0x38
 80187da:	a90e      	add	r1, sp, #56	; 0x38
 80187dc:	79a2      	ldrb	r2, [r4, #6]
 80187de:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80187e2:	f7ff fd49 	bl	8018278 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80187e6:	a90e      	add	r1, sp, #56	; 0x38
 80187e8:	79a2      	ldrb	r2, [r4, #6]
 80187ea:	4608      	mov	r0, r1
 80187ec:	f7ff fd44 	bl	8018278 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80187f0:	4648      	mov	r0, r9
 80187f2:	f001 fef3 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 80187f6:	6820      	ldr	r0, [r4, #0]
 80187f8:	6803      	ldr	r3, [r0, #0]
 80187fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187fc:	4798      	blx	r3
 80187fe:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018800:	4603      	mov	r3, r0
 8018802:	4659      	mov	r1, fp
 8018804:	4648      	mov	r0, r9
 8018806:	f001 ff06 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801880a:	a82e      	add	r0, sp, #184	; 0xb8
 801880c:	f001 fee6 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 8018810:	f894 8004 	ldrb.w	r8, [r4, #4]
 8018814:	f1b8 0f00 	cmp.w	r8, #0
 8018818:	d009      	beq.n	801882e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801881a:	6820      	ldr	r0, [r4, #0]
 801881c:	6803      	ldr	r3, [r0, #0]
 801881e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018820:	4798      	blx	r3
 8018822:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018824:	4603      	mov	r3, r0
 8018826:	4659      	mov	r1, fp
 8018828:	a82e      	add	r0, sp, #184	; 0xb8
 801882a:	f001 fef4 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801882e:	6820      	ldr	r0, [r4, #0]
 8018830:	6803      	ldr	r3, [r0, #0]
 8018832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018834:	4798      	blx	r3
 8018836:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801883a:	182e      	adds	r6, r5, r0
 801883c:	2e00      	cmp	r6, #0
 801883e:	dd45      	ble.n	80188cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018844:	4283      	cmp	r3, r0
 8018846:	db41      	blt.n	80188cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018848:	441d      	add	r5, r3
 801884a:	fb95 f5f6 	sdiv	r5, r5, r6
 801884e:	a844      	add	r0, sp, #272	; 0x110
 8018850:	f001 fec4 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 8018854:	7c23      	ldrb	r3, [r4, #16]
 8018856:	b14b      	cbz	r3, 801886c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8018858:	6820      	ldr	r0, [r4, #0]
 801885a:	6803      	ldr	r3, [r0, #0]
 801885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801885e:	4798      	blx	r3
 8018860:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018862:	4603      	mov	r3, r0
 8018864:	4659      	mov	r1, fp
 8018866:	a844      	add	r0, sp, #272	; 0x110
 8018868:	f001 fed5 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801886c:	7c21      	ldrb	r1, [r4, #16]
 801886e:	a810      	add	r0, sp, #64	; 0x40
 8018870:	7963      	ldrb	r3, [r4, #5]
 8018872:	9101      	str	r1, [sp, #4]
 8018874:	6821      	ldr	r1, [r4, #0]
 8018876:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801887a:	9100      	str	r1, [sp, #0]
 801887c:	a944      	add	r1, sp, #272	; 0x110
 801887e:	f7ff fc8f 	bl	80181a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018882:	7c23      	ldrb	r3, [r4, #16]
 8018884:	bb23      	cbnz	r3, 80188d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8018886:	fa1f fb86 	uxth.w	fp, r6
 801888a:	2d00      	cmp	r5, #0
 801888c:	dd57      	ble.n	801893e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801888e:	7961      	ldrb	r1, [r4, #5]
 8018890:	4648      	mov	r0, r9
 8018892:	f001 ffe5 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018896:	4603      	mov	r3, r0
 8018898:	f1b8 0f00 	cmp.w	r8, #0
 801889c:	d005      	beq.n	80188aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801889e:	9008      	str	r0, [sp, #32]
 80188a0:	a82e      	add	r0, sp, #184	; 0xb8
 80188a2:	7961      	ldrb	r1, [r4, #5]
 80188a4:	f001 ffdc 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188a8:	9b08      	ldr	r3, [sp, #32]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d044      	beq.n	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80188ae:	2b0a      	cmp	r3, #10
 80188b0:	d1eb      	bne.n	801888a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80188b2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80188b6:	3d01      	subs	r5, #1
 80188b8:	445b      	add	r3, fp
 80188ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80188be:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80188c2:	eba3 030b 	sub.w	r3, r3, fp
 80188c6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80188ca:	e7de      	b.n	801888a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80188cc:	2500      	movs	r5, #0
 80188ce:	e7be      	b.n	801884e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 80188d0:	0073      	lsls	r3, r6, #1
 80188d2:	9308      	str	r3, [sp, #32]
 80188d4:	2d00      	cmp	r5, #0
 80188d6:	dd32      	ble.n	801893e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80188d8:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80188dc:	a810      	add	r0, sp, #64	; 0x40
 80188de:	9b08      	ldr	r3, [sp, #32]
 80188e0:	428b      	cmp	r3, r1
 80188e2:	bfd4      	ite	le
 80188e4:	2100      	movle	r1, #0
 80188e6:	2101      	movgt	r1, #1
 80188e8:	f7ff fe6e 	bl	80185c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80188ec:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 80188f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80188f4:	fa1f fb83 	uxth.w	fp, r3
 80188f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188fc:	459b      	cmp	fp, r3
 80188fe:	d00b      	beq.n	8018918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018900:	7961      	ldrb	r1, [r4, #5]
 8018902:	4648      	mov	r0, r9
 8018904:	f001 ffac 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018908:	f1b8 0f00 	cmp.w	r8, #0
 801890c:	d0f0      	beq.n	80188f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801890e:	7961      	ldrb	r1, [r4, #5]
 8018910:	a82e      	add	r0, sp, #184	; 0xb8
 8018912:	f001 ffa5 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018916:	e7eb      	b.n	80188f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018918:	b2b3      	uxth	r3, r6
 801891a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801891e:	3d01      	subs	r5, #1
 8018920:	441a      	add	r2, r3
 8018922:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8018926:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801892a:	1ad3      	subs	r3, r2, r3
 801892c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018930:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018934:	2b00      	cmp	r3, #0
 8018936:	d1cd      	bne.n	80188d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018938:	b05b      	add	sp, #364	; 0x16c
 801893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801893e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8018942:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8018946:	7c23      	ldrb	r3, [r4, #16]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d05f      	beq.n	8018a0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801894c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018950:	a810      	add	r0, sp, #64	; 0x40
 8018952:	458b      	cmp	fp, r1
 8018954:	bfd4      	ite	le
 8018956:	2100      	movle	r1, #0
 8018958:	2101      	movgt	r1, #1
 801895a:	f7ff fe35 	bl	80185c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801895e:	f1b8 0f00 	cmp.w	r8, #0
 8018962:	d04c      	beq.n	80189fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018964:	7c23      	ldrb	r3, [r4, #16]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d053      	beq.n	8018a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801896a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801896e:	7922      	ldrb	r2, [r4, #4]
 8018970:	2a01      	cmp	r2, #1
 8018972:	d13c      	bne.n	80189ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018974:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018978:	1ac0      	subs	r0, r0, r3
 801897a:	2302      	movs	r3, #2
 801897c:	fb90 f0f3 	sdiv	r0, r0, r3
 8018980:	b200      	sxth	r0, r0
 8018982:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018986:	4418      	add	r0, r3
 8018988:	7c23      	ldrb	r3, [r4, #16]
 801898a:	8028      	strh	r0, [r5, #0]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d03a      	beq.n	8018a06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8018990:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018994:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8018998:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801899c:	f8cd 9010 	str.w	r9, [sp, #16]
 80189a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189a2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80189a6:	2200      	movs	r2, #0
 80189a8:	2100      	movs	r1, #0
 80189aa:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80189ae:	e9cd 5700 	strd	r5, r7, [sp]
 80189b2:	4652      	mov	r2, sl
 80189b4:	f7ff fcb2 	bl	801831c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80189b8:	2800      	cmp	r0, #0
 80189ba:	d1bd      	bne.n	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80189bc:	b2b2      	uxth	r2, r6
 80189be:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80189c2:	4611      	mov	r1, r2
 80189c4:	4413      	add	r3, r2
 80189c6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80189ca:	b21b      	sxth	r3, r3
 80189cc:	1a52      	subs	r2, r2, r1
 80189ce:	7c21      	ldrb	r1, [r4, #16]
 80189d0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80189d4:	b212      	sxth	r2, r2
 80189d6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80189da:	b109      	cbz	r1, 80189e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80189dc:	42b2      	cmp	r2, r6
 80189de:	dbab      	blt.n	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80189e0:	887a      	ldrh	r2, [r7, #2]
 80189e2:	88f9      	ldrh	r1, [r7, #6]
 80189e4:	440a      	add	r2, r1
 80189e6:	b212      	sxth	r2, r2
 80189e8:	4293      	cmp	r3, r2
 80189ea:	ddac      	ble.n	8018946 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 80189ec:	e7a4      	b.n	8018938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80189ee:	2a02      	cmp	r2, #2
 80189f0:	d107      	bne.n	8018a02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80189f2:	7be2      	ldrb	r2, [r4, #15]
 80189f4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80189f8:	1a80      	subs	r0, r0, r2
 80189fa:	1ac0      	subs	r0, r0, r3
 80189fc:	e7c0      	b.n	8018980 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 80189fe:	7be0      	ldrb	r0, [r4, #15]
 8018a00:	e7bf      	b.n	8018982 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018a02:	2000      	movs	r0, #0
 8018a04:	e7bd      	b.n	8018982 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018a06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018a0a:	e7c3      	b.n	8018994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8018a0c:	f1b8 0f00 	cmp.w	r8, #0
 8018a10:	d0f5      	beq.n	80189fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018a12:	2300      	movs	r3, #0
 8018a14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018a18:	6821      	ldr	r1, [r4, #0]
 8018a1a:	a82e      	add	r0, sp, #184	; 0xb8
 8018a1c:	f7ff fbfa 	bl	8018214 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018a20:	b203      	sxth	r3, r0
 8018a22:	e7a4      	b.n	801896e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08018a24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018a24:	2b02      	cmp	r3, #2
 8018a26:	b510      	push	{r4, lr}
 8018a28:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a2c:	d00b      	beq.n	8018a46 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018a2e:	2b03      	cmp	r3, #3
 8018a30:	d00e      	beq.n	8018a50 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018a32:	2b01      	cmp	r3, #1
 8018a34:	d001      	beq.n	8018a3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018a36:	1860      	adds	r0, r4, r1
 8018a38:	bd10      	pop	{r4, pc}
 8018a3a:	8880      	ldrh	r0, [r0, #4]
 8018a3c:	4420      	add	r0, r4
 8018a3e:	b200      	sxth	r0, r0
 8018a40:	1a80      	subs	r0, r0, r2
 8018a42:	3801      	subs	r0, #1
 8018a44:	e7f8      	b.n	8018a38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018a46:	8880      	ldrh	r0, [r0, #4]
 8018a48:	4420      	add	r0, r4
 8018a4a:	b200      	sxth	r0, r0
 8018a4c:	1a40      	subs	r0, r0, r1
 8018a4e:	e7f8      	b.n	8018a42 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018a50:	18a0      	adds	r0, r4, r2
 8018a52:	e7f1      	b.n	8018a38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018a54 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018a54:	2b02      	cmp	r3, #2
 8018a56:	b510      	push	{r4, lr}
 8018a58:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018a5c:	d006      	beq.n	8018a6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018a5e:	2b03      	cmp	r3, #3
 8018a60:	d00a      	beq.n	8018a78 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018a62:	2b01      	cmp	r3, #1
 8018a64:	bf14      	ite	ne
 8018a66:	18a0      	addne	r0, r4, r2
 8018a68:	1860      	addeq	r0, r4, r1
 8018a6a:	bd10      	pop	{r4, pc}
 8018a6c:	88c0      	ldrh	r0, [r0, #6]
 8018a6e:	4420      	add	r0, r4
 8018a70:	b200      	sxth	r0, r0
 8018a72:	1a80      	subs	r0, r0, r2
 8018a74:	3801      	subs	r0, #1
 8018a76:	e7f8      	b.n	8018a6a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018a78:	88c0      	ldrh	r0, [r0, #6]
 8018a7a:	4420      	add	r0, r4
 8018a7c:	b200      	sxth	r0, r0
 8018a7e:	1a40      	subs	r0, r0, r1
 8018a80:	e7f8      	b.n	8018a74 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018a84 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018a84:	4b01      	ldr	r3, [pc, #4]	; (8018a8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018a86:	2200      	movs	r2, #0
 8018a88:	601a      	str	r2, [r3, #0]
 8018a8a:	4770      	bx	lr
 8018a8c:	2000c530 	.word	0x2000c530

08018a90 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a92:	1e05      	subs	r5, r0, #0
 8018a94:	f04f 0601 	mov.w	r6, #1
 8018a98:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018a9c:	bfba      	itte	lt
 8018a9e:	f04f 37ff 	movlt.w	r7, #4294967295
 8018aa2:	426d      	neglt	r5, r5
 8018aa4:	2701      	movge	r7, #1
 8018aa6:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018aaa:	f1be 0f00 	cmp.w	lr, #0
 8018aae:	bfbc      	itt	lt
 8018ab0:	f1ce 0e00 	rsblt	lr, lr, #0
 8018ab4:	427f      	neglt	r7, r7
 8018ab6:	2c00      	cmp	r4, #0
 8018ab8:	fa4e f001 	asr.w	r0, lr, r1
 8018abc:	fa06 f101 	lsl.w	r1, r6, r1
 8018ac0:	bfbc      	itt	lt
 8018ac2:	4264      	neglt	r4, r4
 8018ac4:	427f      	neglt	r7, r7
 8018ac6:	3901      	subs	r1, #1
 8018ac8:	ea01 010e 	and.w	r1, r1, lr
 8018acc:	434d      	muls	r5, r1
 8018ace:	f8dc 1000 	ldr.w	r1, [ip]
 8018ad2:	fb03 1300 	mla	r3, r3, r0, r1
 8018ad6:	fb95 f1f4 	sdiv	r1, r5, r4
 8018ada:	fb04 5511 	mls	r5, r4, r1, r5
 8018ade:	441d      	add	r5, r3
 8018ae0:	fb95 f3f4 	sdiv	r3, r5, r4
 8018ae4:	4419      	add	r1, r3
 8018ae6:	fb04 5413 	mls	r4, r4, r3, r5
 8018aea:	fb02 1000 	mla	r0, r2, r0, r1
 8018aee:	f8cc 4000 	str.w	r4, [ip]
 8018af2:	4378      	muls	r0, r7
 8018af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018af8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018afc:	4c24      	ldr	r4, [pc, #144]	; (8018b90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018afe:	b086      	sub	sp, #24
 8018b00:	4605      	mov	r5, r0
 8018b02:	6807      	ldr	r7, [r0, #0]
 8018b04:	69a3      	ldr	r3, [r4, #24]
 8018b06:	b92b      	cbnz	r3, 8018b14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018b08:	6840      	ldr	r0, [r0, #4]
 8018b0a:	e9c5 7000 	strd	r7, r0, [r5]
 8018b0e:	b006      	add	sp, #24
 8018b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b14:	f04f 0802 	mov.w	r8, #2
 8018b18:	68a2      	ldr	r2, [r4, #8]
 8018b1a:	ae06      	add	r6, sp, #24
 8018b1c:	6820      	ldr	r0, [r4, #0]
 8018b1e:	fb93 f1f8 	sdiv	r1, r3, r8
 8018b22:	440a      	add	r2, r1
 8018b24:	69e1      	ldr	r1, [r4, #28]
 8018b26:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018b2a:	9700      	str	r7, [sp, #0]
 8018b2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018b2e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018b34:	f7ff ffac 	bl	8018a90 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018b38:	69a3      	ldr	r3, [r4, #24]
 8018b3a:	4607      	mov	r7, r0
 8018b3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018b3e:	9301      	str	r3, [sp, #4]
 8018b40:	686b      	ldr	r3, [r5, #4]
 8018b42:	6a21      	ldr	r1, [r4, #32]
 8018b44:	9300      	str	r3, [sp, #0]
 8018b46:	9602      	str	r6, [sp, #8]
 8018b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b4a:	6860      	ldr	r0, [r4, #4]
 8018b4c:	f7ff ffa0 	bl	8018a90 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018b50:	69a2      	ldr	r2, [r4, #24]
 8018b52:	6963      	ldr	r3, [r4, #20]
 8018b54:	4407      	add	r7, r0
 8018b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018b58:	68e0      	ldr	r0, [r4, #12]
 8018b5a:	fb92 f8f8 	sdiv	r8, r2, r8
 8018b5e:	4443      	add	r3, r8
 8018b60:	9305      	str	r3, [sp, #20]
 8018b62:	682b      	ldr	r3, [r5, #0]
 8018b64:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018b68:	9300      	str	r3, [sp, #0]
 8018b6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018b6e:	f7ff ff8f 	bl	8018a90 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018b72:	69a3      	ldr	r3, [r4, #24]
 8018b74:	4680      	mov	r8, r0
 8018b76:	9602      	str	r6, [sp, #8]
 8018b78:	9301      	str	r3, [sp, #4]
 8018b7a:	686b      	ldr	r3, [r5, #4]
 8018b7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018b7e:	9300      	str	r3, [sp, #0]
 8018b80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018b82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018b84:	6920      	ldr	r0, [r4, #16]
 8018b86:	f7ff ff83 	bl	8018a90 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018b8a:	4440      	add	r0, r8
 8018b8c:	e7bd      	b.n	8018b0a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018b8e:	bf00      	nop
 8018b90:	2000c534 	.word	0x2000c534

08018b94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018b94:	4b07      	ldr	r3, [pc, #28]	; (8018bb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018b96:	b510      	push	{r4, lr}
 8018b98:	781b      	ldrb	r3, [r3, #0]
 8018b9a:	2b01      	cmp	r3, #1
 8018b9c:	d108      	bne.n	8018bb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018b9e:	4b06      	ldr	r3, [pc, #24]	; (8018bb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018ba0:	880c      	ldrh	r4, [r1, #0]
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018ba8:	3b01      	subs	r3, #1
 8018baa:	1b1b      	subs	r3, r3, r4
 8018bac:	8003      	strh	r3, [r0, #0]
 8018bae:	800a      	strh	r2, [r1, #0]
 8018bb0:	bd10      	pop	{r4, pc}
 8018bb2:	bf00      	nop
 8018bb4:	2000c500 	.word	0x2000c500
 8018bb8:	2000c504 	.word	0x2000c504

08018bbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018bbc:	4b0a      	ldr	r3, [pc, #40]	; (8018be8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018bbe:	b510      	push	{r4, lr}
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	2b01      	cmp	r3, #1
 8018bc4:	d10e      	bne.n	8018be4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018bc6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018bca:	8843      	ldrh	r3, [r0, #2]
 8018bcc:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018bd0:	18ca      	adds	r2, r1, r3
 8018bd2:	4b06      	ldr	r3, [pc, #24]	; (8018bec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018bd4:	8044      	strh	r4, [r0, #2]
 8018bd6:	881b      	ldrh	r3, [r3, #0]
 8018bd8:	1a9b      	subs	r3, r3, r2
 8018bda:	8003      	strh	r3, [r0, #0]
 8018bdc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018be0:	8081      	strh	r1, [r0, #4]
 8018be2:	80c3      	strh	r3, [r0, #6]
 8018be4:	bd10      	pop	{r4, pc}
 8018be6:	bf00      	nop
 8018be8:	2000c500 	.word	0x2000c500
 8018bec:	2000c4fc 	.word	0x2000c4fc

08018bf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018bf0:	4b07      	ldr	r3, [pc, #28]	; (8018c10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018bf2:	b510      	push	{r4, lr}
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	2b01      	cmp	r3, #1
 8018bf8:	d108      	bne.n	8018c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018bfa:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018bfe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018c02:	8003      	strh	r3, [r0, #0]
 8018c04:	8893      	ldrh	r3, [r2, #4]
 8018c06:	3b01      	subs	r3, #1
 8018c08:	1b1b      	subs	r3, r3, r4
 8018c0a:	800b      	strh	r3, [r1, #0]
 8018c0c:	bd10      	pop	{r4, pc}
 8018c0e:	bf00      	nop
 8018c10:	2000c500 	.word	0x2000c500

08018c14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018c14:	4b08      	ldr	r3, [pc, #32]	; (8018c38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018c16:	b513      	push	{r0, r1, r4, lr}
 8018c18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c1c:	2400      	movs	r4, #0
 8018c1e:	4b07      	ldr	r3, [pc, #28]	; (8018c3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018c20:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018c24:	466a      	mov	r2, sp
 8018c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c2a:	9400      	str	r4, [sp, #0]
 8018c2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018c30:	f7ff ffde 	bl	8018bf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018c34:	b002      	add	sp, #8
 8018c36:	bd10      	pop	{r4, pc}
 8018c38:	2000c4fc 	.word	0x2000c4fc
 8018c3c:	2000c4fe 	.word	0x2000c4fe

08018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018c40:	4b0a      	ldr	r3, [pc, #40]	; (8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018c42:	460a      	mov	r2, r1
 8018c44:	b510      	push	{r4, lr}
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d10d      	bne.n	8018c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018c4c:	8881      	ldrh	r1, [r0, #4]
 8018c4e:	8803      	ldrh	r3, [r0, #0]
 8018c50:	440b      	add	r3, r1
 8018c52:	4601      	mov	r1, r0
 8018c54:	3b01      	subs	r3, #1
 8018c56:	f821 3b02 	strh.w	r3, [r1], #2
 8018c5a:	f7ff ffc9 	bl	8018bf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018c5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018c62:	88c2      	ldrh	r2, [r0, #6]
 8018c64:	80c3      	strh	r3, [r0, #6]
 8018c66:	8082      	strh	r2, [r0, #4]
 8018c68:	bd10      	pop	{r4, pc}
 8018c6a:	bf00      	nop
 8018c6c:	2000c500 	.word	0x2000c500

08018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018c70:	4b09      	ldr	r3, [pc, #36]	; (8018c98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018c72:	b507      	push	{r0, r1, r2, lr}
 8018c74:	2100      	movs	r1, #0
 8018c76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c7a:	4b08      	ldr	r3, [pc, #32]	; (8018c9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018c7c:	9100      	str	r1, [sp, #0]
 8018c7e:	4669      	mov	r1, sp
 8018c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c84:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018c88:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018c8c:	f7ff ffd8 	bl	8018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018c90:	b003      	add	sp, #12
 8018c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c96:	bf00      	nop
 8018c98:	2000c4fc 	.word	0x2000c4fc
 8018c9c:	2000c4fe 	.word	0x2000c4fe

08018ca0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018ca0:	4b03      	ldr	r3, [pc, #12]	; (8018cb0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018ca2:	6818      	ldr	r0, [r3, #0]
 8018ca4:	b110      	cbz	r0, 8018cac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018ca6:	6803      	ldr	r3, [r0, #0]
 8018ca8:	699b      	ldr	r3, [r3, #24]
 8018caa:	4718      	bx	r3
 8018cac:	4770      	bx	lr
 8018cae:	bf00      	nop
 8018cb0:	2000c584 	.word	0x2000c584

08018cb4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018cb4:	4770      	bx	lr
	...

08018cb8 <_ZN8touchgfx11Application4drawEv>:
 8018cb8:	4b09      	ldr	r3, [pc, #36]	; (8018ce0 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018cba:	b507      	push	{r0, r1, r2, lr}
 8018cbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018cc0:	2100      	movs	r1, #0
 8018cc2:	4b08      	ldr	r3, [pc, #32]	; (8018ce4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018cc4:	9100      	str	r1, [sp, #0]
 8018cc6:	4669      	mov	r1, sp
 8018cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ccc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018cd0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018cd4:	6803      	ldr	r3, [r0, #0]
 8018cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cd8:	4798      	blx	r3
 8018cda:	b003      	add	sp, #12
 8018cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ce0:	2000c4fc 	.word	0x2000c4fc
 8018ce4:	2000c4fe 	.word	0x2000c4fe

08018ce8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018ce8:	4b03      	ldr	r3, [pc, #12]	; (8018cf8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018cea:	6818      	ldr	r0, [r3, #0]
 8018cec:	b110      	cbz	r0, 8018cf4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018cee:	6803      	ldr	r3, [r0, #0]
 8018cf0:	69db      	ldr	r3, [r3, #28]
 8018cf2:	4718      	bx	r3
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop
 8018cf8:	2000c584 	.word	0x2000c584

08018cfc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018cfc:	4b03      	ldr	r3, [pc, #12]	; (8018d0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018cfe:	6818      	ldr	r0, [r3, #0]
 8018d00:	b110      	cbz	r0, 8018d08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018d02:	6803      	ldr	r3, [r0, #0]
 8018d04:	6a1b      	ldr	r3, [r3, #32]
 8018d06:	4718      	bx	r3
 8018d08:	4770      	bx	lr
 8018d0a:	bf00      	nop
 8018d0c:	2000c584 	.word	0x2000c584

08018d10 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018d10:	4b03      	ldr	r3, [pc, #12]	; (8018d20 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018d12:	6818      	ldr	r0, [r3, #0]
 8018d14:	b110      	cbz	r0, 8018d1c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018d16:	6803      	ldr	r3, [r0, #0]
 8018d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d1a:	4718      	bx	r3
 8018d1c:	4770      	bx	lr
 8018d1e:	bf00      	nop
 8018d20:	2000c584 	.word	0x2000c584

08018d24 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d28:	4d3a      	ldr	r5, [pc, #232]	; (8018e14 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018d2a:	4604      	mov	r4, r0
 8018d2c:	6828      	ldr	r0, [r5, #0]
 8018d2e:	b140      	cbz	r0, 8018d42 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018d30:	7a03      	ldrb	r3, [r0, #8]
 8018d32:	b933      	cbnz	r3, 8018d42 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018d34:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018d38:	6803      	ldr	r3, [r0, #0]
 8018d3a:	689b      	ldr	r3, [r3, #8]
 8018d3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d40:	4718      	bx	r3
 8018d42:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018d46:	b97b      	cbnz	r3, 8018d68 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018d48:	b170      	cbz	r0, 8018d68 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018d4a:	7a03      	ldrb	r3, [r0, #8]
 8018d4c:	b163      	cbz	r3, 8018d68 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018d4e:	4b32      	ldr	r3, [pc, #200]	; (8018e18 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018d50:	6818      	ldr	r0, [r3, #0]
 8018d52:	b110      	cbz	r0, 8018d5a <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018d54:	6803      	ldr	r3, [r0, #0]
 8018d56:	691b      	ldr	r3, [r3, #16]
 8018d58:	4798      	blx	r3
 8018d5a:	6828      	ldr	r0, [r5, #0]
 8018d5c:	6803      	ldr	r3, [r0, #0]
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	4798      	blx	r3
 8018d62:	2301      	movs	r3, #1
 8018d64:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018d68:	2500      	movs	r5, #0
 8018d6a:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018d6e:	42a8      	cmp	r0, r5
 8018d70:	dd0c      	ble.n	8018d8c <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8018d72:	1963      	adds	r3, r4, r5
 8018d74:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018d78:	b132      	cbz	r2, 8018d88 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018d7a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018d7e:	4413      	add	r3, r2
 8018d80:	6858      	ldr	r0, [r3, #4]
 8018d82:	6803      	ldr	r3, [r0, #0]
 8018d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d86:	4798      	blx	r3
 8018d88:	3501      	adds	r5, #1
 8018d8a:	e7ee      	b.n	8018d6a <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8018d8c:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018d90:	3801      	subs	r0, #1
 8018d92:	f04f 0c00 	mov.w	ip, #0
 8018d96:	3678      	adds	r6, #120	; 0x78
 8018d98:	1c43      	adds	r3, r0, #1
 8018d9a:	d033      	beq.n	8018e04 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018d9c:	1823      	adds	r3, r4, r0
 8018d9e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018da2:	bb6a      	cbnz	r2, 8018e00 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018da4:	b281      	uxth	r1, r0
 8018da6:	1d25      	adds	r5, r4, #4
 8018da8:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8018dac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018db0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018db4:	4293      	cmp	r3, r2
 8018db6:	dc0a      	bgt.n	8018dce <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018db8:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8018dbc:	4422      	add	r2, r4
 8018dbe:	18b1      	adds	r1, r6, r2
 8018dc0:	b289      	uxth	r1, r1
 8018dc2:	428b      	cmp	r3, r1
 8018dc4:	d919      	bls.n	8018dfa <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018dc6:	7851      	ldrb	r1, [r2, #1]
 8018dc8:	f802 1b01 	strb.w	r1, [r2], #1
 8018dcc:	e7f7      	b.n	8018dbe <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018dce:	682f      	ldr	r7, [r5, #0]
 8018dd0:	f105 0804 	add.w	r8, r5, #4
 8018dd4:	45b9      	cmp	r9, r7
 8018dd6:	d10d      	bne.n	8018df4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018dd8:	4696      	mov	lr, r2
 8018dda:	f1be 0f1e 	cmp.w	lr, #30
 8018dde:	dc06      	bgt.n	8018dee <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018de0:	f10e 0e01 	add.w	lr, lr, #1
 8018de4:	686f      	ldr	r7, [r5, #4]
 8018de6:	4573      	cmp	r3, lr
 8018de8:	f845 7b04 	str.w	r7, [r5], #4
 8018dec:	dcf5      	bgt.n	8018dda <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018dee:	3b01      	subs	r3, #1
 8018df0:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018df4:	3201      	adds	r2, #1
 8018df6:	4645      	mov	r5, r8
 8018df8:	e7da      	b.n	8018db0 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018dfa:	4423      	add	r3, r4
 8018dfc:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018e00:	3801      	subs	r0, #1
 8018e02:	e7c9      	b.n	8018d98 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018e04:	4b04      	ldr	r3, [pc, #16]	; (8018e18 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018e06:	6818      	ldr	r0, [r3, #0]
 8018e08:	b110      	cbz	r0, 8018e10 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018e0a:	6803      	ldr	r3, [r0, #0]
 8018e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e0e:	e795      	b.n	8018d3c <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e14:	2000c588 	.word	0x2000c588
 8018e18:	2000c584 	.word	0x2000c584

08018e1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018e1c:	b570      	push	{r4, r5, r6, lr}
 8018e1e:	4606      	mov	r6, r0
 8018e20:	460c      	mov	r4, r1
 8018e22:	b929      	cbnz	r1, 8018e30 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018e24:	4b0c      	ldr	r3, [pc, #48]	; (8018e58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018e26:	2164      	movs	r1, #100	; 0x64
 8018e28:	4a0c      	ldr	r2, [pc, #48]	; (8018e5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018e2a:	480d      	ldr	r0, [pc, #52]	; (8018e60 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018e2c:	f00c f854 	bl	8024ed8 <__assert_func>
 8018e30:	2300      	movs	r3, #0
 8018e32:	4d0c      	ldr	r5, [pc, #48]	; (8018e64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018e34:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018e38:	6828      	ldr	r0, [r5, #0]
 8018e3a:	b110      	cbz	r0, 8018e42 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018e3c:	6803      	ldr	r3, [r0, #0]
 8018e3e:	695b      	ldr	r3, [r3, #20]
 8018e40:	4798      	blx	r3
 8018e42:	602c      	str	r4, [r5, #0]
 8018e44:	4620      	mov	r0, r4
 8018e46:	6823      	ldr	r3, [r4, #0]
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	4798      	blx	r3
 8018e4c:	6833      	ldr	r3, [r6, #0]
 8018e4e:	4630      	mov	r0, r6
 8018e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e56:	4718      	bx	r3
 8018e58:	080288a4 	.word	0x080288a4
 8018e5c:	0802896c 	.word	0x0802896c
 8018e60:	080288ae 	.word	0x080288ae
 8018e64:	2000c584 	.word	0x2000c584

08018e68 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018e68:	b510      	push	{r4, lr}
 8018e6a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018e6e:	888a      	ldrh	r2, [r1, #4]
 8018e70:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018e74:	4422      	add	r2, r4
 8018e76:	b212      	sxth	r2, r2
 8018e78:	4293      	cmp	r3, r2
 8018e7a:	da15      	bge.n	8018ea8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018e7c:	8882      	ldrh	r2, [r0, #4]
 8018e7e:	4413      	add	r3, r2
 8018e80:	b21b      	sxth	r3, r3
 8018e82:	429c      	cmp	r4, r3
 8018e84:	da10      	bge.n	8018ea8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018e86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018e8a:	88c9      	ldrh	r1, [r1, #6]
 8018e8c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018e90:	4419      	add	r1, r3
 8018e92:	b209      	sxth	r1, r1
 8018e94:	428a      	cmp	r2, r1
 8018e96:	da07      	bge.n	8018ea8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018e98:	88c0      	ldrh	r0, [r0, #6]
 8018e9a:	4410      	add	r0, r2
 8018e9c:	b200      	sxth	r0, r0
 8018e9e:	4283      	cmp	r3, r0
 8018ea0:	bfac      	ite	ge
 8018ea2:	2000      	movge	r0, #0
 8018ea4:	2001      	movlt	r0, #1
 8018ea6:	bd10      	pop	{r4, pc}
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	e7fc      	b.n	8018ea6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018eac <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018eac:	b570      	push	{r4, r5, r6, lr}
 8018eae:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018eb2:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018eb6:	42ac      	cmp	r4, r5
 8018eb8:	db18      	blt.n	8018eec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018eba:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018ebe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	db12      	blt.n	8018eec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018ec6:	8886      	ldrh	r6, [r0, #4]
 8018ec8:	4435      	add	r5, r6
 8018eca:	888e      	ldrh	r6, [r1, #4]
 8018ecc:	4434      	add	r4, r6
 8018ece:	b22d      	sxth	r5, r5
 8018ed0:	b224      	sxth	r4, r4
 8018ed2:	42a5      	cmp	r5, r4
 8018ed4:	db0a      	blt.n	8018eec <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018ed6:	88c0      	ldrh	r0, [r0, #6]
 8018ed8:	4418      	add	r0, r3
 8018eda:	88cb      	ldrh	r3, [r1, #6]
 8018edc:	441a      	add	r2, r3
 8018ede:	b200      	sxth	r0, r0
 8018ee0:	b212      	sxth	r2, r2
 8018ee2:	4290      	cmp	r0, r2
 8018ee4:	bfb4      	ite	lt
 8018ee6:	2000      	movlt	r0, #0
 8018ee8:	2001      	movge	r0, #1
 8018eea:	bd70      	pop	{r4, r5, r6, pc}
 8018eec:	2000      	movs	r0, #0
 8018eee:	e7fc      	b.n	8018eea <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018ef0 <_ZN8touchgfx11Application11getInstanceEv>:
 8018ef0:	4b01      	ldr	r3, [pc, #4]	; (8018ef8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018ef2:	6818      	ldr	r0, [r3, #0]
 8018ef4:	4770      	bx	lr
 8018ef6:	bf00      	nop
 8018ef8:	2000c594 	.word	0x2000c594

08018efc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018efc:	2300      	movs	r3, #0
 8018efe:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018f02:	30a8      	adds	r0, #168	; 0xa8
 8018f04:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018f08:	f802 3b01 	strb.w	r3, [r2], #1
 8018f0c:	4282      	cmp	r2, r0
 8018f0e:	d1fb      	bne.n	8018f08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018f10:	4770      	bx	lr

08018f12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018f12:	4603      	mov	r3, r0
 8018f14:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018f18:	2200      	movs	r2, #0
 8018f1a:	801a      	strh	r2, [r3, #0]
 8018f1c:	3308      	adds	r3, #8
 8018f1e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018f22:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018f26:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018f2a:	428b      	cmp	r3, r1
 8018f2c:	d1f5      	bne.n	8018f1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018f2e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018f32:	4770      	bx	lr

08018f34 <_ZN8touchgfx11ApplicationC1Ev>:
 8018f34:	b570      	push	{r4, r5, r6, lr}
 8018f36:	4b16      	ldr	r3, [pc, #88]	; (8018f90 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018f38:	2500      	movs	r5, #0
 8018f3a:	4604      	mov	r4, r0
 8018f3c:	30a8      	adds	r0, #168	; 0xa8
 8018f3e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018f42:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018f46:	f7ff ffe4 	bl	8018f12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018f4a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018f4e:	f7ff ffe0 	bl	8018f12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018f52:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8018f56:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018f5a:	490e      	ldr	r1, [pc, #56]	; (8018f94 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018f5c:	480e      	ldr	r0, [pc, #56]	; (8018f98 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018f5e:	f00a faa1 	bl	80234a4 <CRC_Lock>
 8018f62:	4e0e      	ldr	r6, [pc, #56]	; (8018f9c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8018f64:	4b0e      	ldr	r3, [pc, #56]	; (8018fa0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018f66:	b158      	cbz	r0, 8018f80 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8018f68:	801d      	strh	r5, [r3, #0]
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	4a0d      	ldr	r2, [pc, #52]	; (8018fa4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018f6e:	4620      	mov	r0, r4
 8018f70:	6013      	str	r3, [r2, #0]
 8018f72:	4a0d      	ldr	r2, [pc, #52]	; (8018fa8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018f74:	6033      	str	r3, [r6, #0]
 8018f76:	6013      	str	r3, [r2, #0]
 8018f78:	f7ff ffc0 	bl	8018efc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	bd70      	pop	{r4, r5, r6, pc}
 8018f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018f84:	2002      	movs	r0, #2
 8018f86:	801a      	strh	r2, [r3, #0]
 8018f88:	6030      	str	r0, [r6, #0]
 8018f8a:	f000 ff81 	bl	8019e90 <_ZN8touchgfx6Screen4drawEv>
 8018f8e:	e7ec      	b.n	8018f6a <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8018f90:	08028938 	.word	0x08028938
 8018f94:	b5e8b5cd 	.word	0xb5e8b5cd
 8018f98:	f407a5c2 	.word	0xf407a5c2
 8018f9c:	2000c584 	.word	0x2000c584
 8018fa0:	20000058 	.word	0x20000058
 8018fa4:	2000c594 	.word	0x2000c594
 8018fa8:	2000c588 	.word	0x2000c588

08018fac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018fac:	2300      	movs	r3, #0
 8018fae:	8003      	strh	r3, [r0, #0]
 8018fb0:	8043      	strh	r3, [r0, #2]
 8018fb2:	8083      	strh	r3, [r0, #4]
 8018fb4:	80c3      	strh	r3, [r0, #6]
 8018fb6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	b530      	push	{r4, r5, lr}
 8018fbe:	d912      	bls.n	8018fe6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018fc0:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8018fc4:	3b01      	subs	r3, #1
 8018fc6:	6825      	ldr	r5, [r4, #0]
 8018fc8:	b29b      	uxth	r3, r3
 8018fca:	6005      	str	r5, [r0, #0]
 8018fcc:	4293      	cmp	r3, r2
 8018fce:	6865      	ldr	r5, [r4, #4]
 8018fd0:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018fd4:	6045      	str	r5, [r0, #4]
 8018fd6:	d906      	bls.n	8018fe6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018fd8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018fdc:	681d      	ldr	r5, [r3, #0]
 8018fde:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018fe2:	685d      	ldr	r5, [r3, #4]
 8018fe4:	6065      	str	r5, [r4, #4]
 8018fe6:	bd30      	pop	{r4, r5, pc}

08018fe8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fea:	466b      	mov	r3, sp
 8018fec:	4604      	mov	r4, r0
 8018fee:	e883 0006 	stmia.w	r3, {r1, r2}
 8018ff2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018ff6:	2a07      	cmp	r2, #7
 8018ff8:	d906      	bls.n	8019008 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018ffa:	4b09      	ldr	r3, [pc, #36]	; (8019020 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018ffc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8019000:	4a08      	ldr	r2, [pc, #32]	; (8019024 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8019002:	4809      	ldr	r0, [pc, #36]	; (8019028 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019004:	f00b ff68 	bl	8024ed8 <__assert_func>
 8019008:	1c51      	adds	r1, r2, #1
 801900a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801900e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019012:	cb03      	ldmia	r3!, {r0, r1}
 8019014:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019018:	6069      	str	r1, [r5, #4]
 801901a:	b003      	add	sp, #12
 801901c:	bd30      	pop	{r4, r5, pc}
 801901e:	bf00      	nop
 8019020:	080288d8 	.word	0x080288d8
 8019024:	080289b0 	.word	0x080289b0
 8019028:	08028907 	.word	0x08028907

0801902c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801902c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019030:	b089      	sub	sp, #36	; 0x24
 8019032:	4606      	mov	r6, r0
 8019034:	466c      	mov	r4, sp
 8019036:	4620      	mov	r0, r4
 8019038:	e884 0006 	stmia.w	r4, {r1, r2}
 801903c:	f7fc fe30 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019040:	bbb0      	cbnz	r0, 80190b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019042:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019046:	b1fd      	cbz	r5, 8019088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019048:	3d01      	subs	r5, #1
 801904a:	af04      	add	r7, sp, #16
 801904c:	f04f 090a 	mov.w	r9, #10
 8019050:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019054:	ab02      	add	r3, sp, #8
 8019056:	fa1f f885 	uxth.w	r8, r5
 801905a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801905e:	6851      	ldr	r1, [r2, #4]
 8019060:	c303      	stmia	r3!, {r0, r1}
 8019062:	4621      	mov	r1, r4
 8019064:	a802      	add	r0, sp, #8
 8019066:	f7ff ff21 	bl	8018eac <_ZNK8touchgfx4Rect8includesERKS0_>
 801906a:	bb08      	cbnz	r0, 80190b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801906c:	a902      	add	r1, sp, #8
 801906e:	4620      	mov	r0, r4
 8019070:	f7ff ff1c 	bl	8018eac <_ZNK8touchgfx4Rect8includesERKS0_>
 8019074:	b1f8      	cbz	r0, 80190b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8019076:	4642      	mov	r2, r8
 8019078:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801907c:	a806      	add	r0, sp, #24
 801907e:	f7ff ff95 	bl	8018fac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019082:	f115 35ff 	adds.w	r5, r5, #4294967295
 8019086:	d2e3      	bcs.n	8019050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8019088:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801908c:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8019090:	2b08      	cmp	r3, #8
 8019092:	d108      	bne.n	80190a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019094:	4629      	mov	r1, r5
 8019096:	a806      	add	r0, sp, #24
 8019098:	2207      	movs	r2, #7
 801909a:	f7ff ff87 	bl	8018fac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801909e:	a906      	add	r1, sp, #24
 80190a0:	4620      	mov	r0, r4
 80190a2:	f7fd fff8 	bl	8017096 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80190a6:	4628      	mov	r0, r5
 80190a8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80190ac:	f7ff ff9c 	bl	8018fe8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80190b0:	b009      	add	sp, #36	; 0x24
 80190b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190b6:	4621      	mov	r1, r4
 80190b8:	a802      	add	r0, sp, #8
 80190ba:	f7ff fed5 	bl	8018e68 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80190be:	b150      	cbz	r0, 80190d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80190c0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80190c4:	a806      	add	r0, sp, #24
 80190c6:	4642      	mov	r2, r8
 80190c8:	f7ff ff70 	bl	8018fac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80190cc:	a902      	add	r1, sp, #8
 80190ce:	4620      	mov	r0, r4
 80190d0:	f7fd ffe1 	bl	8017096 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80190d4:	e7d5      	b.n	8019082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80190d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80190da:	e887 0003 	stmia.w	r7, {r0, r1}
 80190de:	a902      	add	r1, sp, #8
 80190e0:	4638      	mov	r0, r7
 80190e2:	f7fd ffd8 	bl	8017096 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80190e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80190ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80190ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80190f2:	fb13 f302 	smulbb	r3, r3, r2
 80190f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80190fa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80190fe:	fb11 f102 	smulbb	r1, r1, r2
 8019102:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019106:	fb09 f303 	mul.w	r3, r9, r3
 801910a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801910e:	220b      	movs	r2, #11
 8019110:	434a      	muls	r2, r1
 8019112:	4293      	cmp	r3, r2
 8019114:	dab5      	bge.n	8019082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019116:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801911a:	a806      	add	r0, sp, #24
 801911c:	4642      	mov	r2, r8
 801911e:	f7ff ff45 	bl	8018fac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019122:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019126:	e884 0003 	stmia.w	r4, {r0, r1}
 801912a:	e7aa      	b.n	8019082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801912c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801912c:	4b1d      	ldr	r3, [pc, #116]	; (80191a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801912e:	b530      	push	{r4, r5, lr}
 8019130:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019134:	b085      	sub	sp, #20
 8019136:	4b1c      	ldr	r3, [pc, #112]	; (80191a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019138:	460c      	mov	r4, r1
 801913a:	2100      	movs	r1, #0
 801913c:	4605      	mov	r5, r0
 801913e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019142:	6820      	ldr	r0, [r4, #0]
 8019144:	9100      	str	r1, [sp, #0]
 8019146:	f8ad 3006 	strh.w	r3, [sp, #6]
 801914a:	ab02      	add	r3, sp, #8
 801914c:	6861      	ldr	r1, [r4, #4]
 801914e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019152:	c303      	stmia	r3!, {r0, r1}
 8019154:	4669      	mov	r1, sp
 8019156:	a802      	add	r0, sp, #8
 8019158:	f7fc fd5e 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 801915c:	ab02      	add	r3, sp, #8
 801915e:	cb03      	ldmia	r3!, {r0, r1}
 8019160:	4b12      	ldr	r3, [pc, #72]	; (80191ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019162:	6020      	str	r0, [r4, #0]
 8019164:	6818      	ldr	r0, [r3, #0]
 8019166:	6061      	str	r1, [r4, #4]
 8019168:	b138      	cbz	r0, 801917a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801916a:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801916e:	b133      	cbz	r3, 801917e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019170:	6821      	ldr	r1, [r4, #0]
 8019172:	4628      	mov	r0, r5
 8019174:	6862      	ldr	r2, [r4, #4]
 8019176:	f7ff ff59 	bl	801902c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801917a:	b005      	add	sp, #20
 801917c:	bd30      	pop	{r4, r5, pc}
 801917e:	6803      	ldr	r3, [r0, #0]
 8019180:	4621      	mov	r1, r4
 8019182:	689b      	ldr	r3, [r3, #8]
 8019184:	4798      	blx	r3
 8019186:	4b0a      	ldr	r3, [pc, #40]	; (80191b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019188:	6818      	ldr	r0, [r3, #0]
 801918a:	b118      	cbz	r0, 8019194 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801918c:	6803      	ldr	r3, [r0, #0]
 801918e:	4621      	mov	r1, r4
 8019190:	689b      	ldr	r3, [r3, #8]
 8019192:	4798      	blx	r3
 8019194:	4b07      	ldr	r3, [pc, #28]	; (80191b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019196:	4621      	mov	r1, r4
 8019198:	6818      	ldr	r0, [r3, #0]
 801919a:	6803      	ldr	r3, [r0, #0]
 801919c:	695b      	ldr	r3, [r3, #20]
 801919e:	4798      	blx	r3
 80191a0:	e7eb      	b.n	801917a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80191a2:	bf00      	nop
 80191a4:	2000c4fc 	.word	0x2000c4fc
 80191a8:	2000c4fe 	.word	0x2000c4fe
 80191ac:	2000c584 	.word	0x2000c584
 80191b0:	2000c580 	.word	0x2000c580
 80191b4:	2000c508 	.word	0x2000c508

080191b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80191b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191bc:	4604      	mov	r4, r0
 80191be:	b09b      	sub	sp, #108	; 0x6c
 80191c0:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80191c4:	b129      	cbz	r1, 80191d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80191c6:	2300      	movs	r3, #0
 80191c8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80191cc:	b01b      	add	sp, #108	; 0x6c
 80191ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191d2:	4baf      	ldr	r3, [pc, #700]	; (8019490 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	b33b      	cbz	r3, 8019228 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80191d8:	4dae      	ldr	r5, [pc, #696]	; (8019494 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80191da:	4628      	mov	r0, r5
 80191dc:	f7fc fd60 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 80191e0:	4606      	mov	r6, r0
 80191e2:	bb08      	cbnz	r0, 8019228 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80191e4:	4628      	mov	r0, r5
 80191e6:	f7ff fce9 	bl	8018bbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80191ea:	6829      	ldr	r1, [r5, #0]
 80191ec:	686a      	ldr	r2, [r5, #4]
 80191ee:	4620      	mov	r0, r4
 80191f0:	f7ff ff1c 	bl	801902c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80191f4:	802e      	strh	r6, [r5, #0]
 80191f6:	806e      	strh	r6, [r5, #2]
 80191f8:	80ae      	strh	r6, [r5, #4]
 80191fa:	80ee      	strh	r6, [r5, #6]
 80191fc:	4fa6      	ldr	r7, [pc, #664]	; (8019498 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80191fe:	a809      	add	r0, sp, #36	; 0x24
 8019200:	f7ff fe87 	bl	8018f12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019204:	883d      	ldrh	r5, [r7, #0]
 8019206:	462e      	mov	r6, r5
 8019208:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801920c:	42b3      	cmp	r3, r6
 801920e:	d910      	bls.n	8019232 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8019210:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019214:	3601      	adds	r6, #1
 8019216:	a809      	add	r0, sp, #36	; 0x24
 8019218:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801921c:	b2b6      	uxth	r6, r6
 801921e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019222:	f7ff fee1 	bl	8018fe8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019226:	e7ef      	b.n	8019208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8019228:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801922c:	2b00      	cmp	r3, #0
 801922e:	d1e5      	bne.n	80191fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8019230:	e7cc      	b.n	80191cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019232:	462e      	mov	r6, r5
 8019234:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019238:	42b3      	cmp	r3, r6
 801923a:	d90b      	bls.n	8019254 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801923c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019240:	3601      	adds	r6, #1
 8019242:	4620      	mov	r0, r4
 8019244:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019248:	b2b6      	uxth	r6, r6
 801924a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801924e:	f7ff feed 	bl	801902c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019252:	e7ef      	b.n	8019234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8019254:	4e91      	ldr	r6, [pc, #580]	; (801949c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8019256:	6833      	ldr	r3, [r6, #0]
 8019258:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801925c:	2b01      	cmp	r3, #1
 801925e:	f040 8092 	bne.w	8019386 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8019262:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019266:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801926a:	f04f 0900 	mov.w	r9, #0
 801926e:	33aa      	adds	r3, #170	; 0xaa
 8019270:	42a8      	cmp	r0, r5
 8019272:	f103 0308 	add.w	r3, r3, #8
 8019276:	dd0a      	ble.n	801928e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8019278:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801927c:	3501      	adds	r5, #1
 801927e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019282:	440a      	add	r2, r1
 8019284:	b212      	sxth	r2, r2
 8019286:	4591      	cmp	r9, r2
 8019288:	bfb8      	it	lt
 801928a:	4691      	movlt	r9, r2
 801928c:	e7f0      	b.n	8019270 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801928e:	4b84      	ldr	r3, [pc, #528]	; (80194a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8019290:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80194a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8019294:	881d      	ldrh	r5, [r3, #0]
 8019296:	2300      	movs	r3, #0
 8019298:	2d0f      	cmp	r5, #15
 801929a:	bf8c      	ite	hi
 801929c:	08ed      	lsrhi	r5, r5, #3
 801929e:	2501      	movls	r5, #1
 80192a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80192a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80192a8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80192ac:	6830      	ldr	r0, [r6, #0]
 80192ae:	440b      	add	r3, r1
 80192b0:	6802      	ldr	r2, [r0, #0]
 80192b2:	b21b      	sxth	r3, r3
 80192b4:	4599      	cmp	r9, r3
 80192b6:	dd49      	ble.n	801934c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80192b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80192bc:	4798      	blx	r3
 80192be:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80192c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80192c6:	4413      	add	r3, r2
 80192c8:	b21b      	sxth	r3, r3
 80192ca:	195a      	adds	r2, r3, r5
 80192cc:	4290      	cmp	r0, r2
 80192ce:	da07      	bge.n	80192e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80192d0:	4581      	cmp	r9, r0
 80192d2:	dd05      	ble.n	80192e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80192d4:	4298      	cmp	r0, r3
 80192d6:	da33      	bge.n	8019340 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80192d8:	2b00      	cmp	r3, #0
 80192da:	dd31      	ble.n	8019340 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80192dc:	4648      	mov	r0, r9
 80192de:	e004      	b.n	80192ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80192e0:	4298      	cmp	r0, r3
 80192e2:	dbfb      	blt.n	80192dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80192e4:	4548      	cmp	r0, r9
 80192e6:	bfa8      	it	ge
 80192e8:	4648      	movge	r0, r9
 80192ea:	f9b8 2000 	ldrsh.w	r2, [r8]
 80192ee:	2100      	movs	r1, #0
 80192f0:	1ac0      	subs	r0, r0, r3
 80192f2:	f8b7 a000 	ldrh.w	sl, [r7]
 80192f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80192fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80192fe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019302:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019306:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801930a:	4553      	cmp	r3, sl
 801930c:	d9ca      	bls.n	80192a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801930e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019312:	ab07      	add	r3, sp, #28
 8019314:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019318:	6851      	ldr	r1, [r2, #4]
 801931a:	c303      	stmia	r3!, {r0, r1}
 801931c:	a807      	add	r0, sp, #28
 801931e:	a905      	add	r1, sp, #20
 8019320:	f7fc fc7a 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8019324:	a807      	add	r0, sp, #28
 8019326:	f7fc fcbb 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801932a:	b920      	cbnz	r0, 8019336 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801932c:	6823      	ldr	r3, [r4, #0]
 801932e:	a907      	add	r1, sp, #28
 8019330:	4620      	mov	r0, r4
 8019332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019334:	4798      	blx	r3
 8019336:	f10a 0a01 	add.w	sl, sl, #1
 801933a:	fa1f fa8a 	uxth.w	sl, sl
 801933e:	e7e2      	b.n	8019306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8019340:	6830      	ldr	r0, [r6, #0]
 8019342:	2101      	movs	r1, #1
 8019344:	6803      	ldr	r3, [r0, #0]
 8019346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019348:	4798      	blx	r3
 801934a:	e7ab      	b.n	80192a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801934c:	69d3      	ldr	r3, [r2, #28]
 801934e:	4798      	blx	r3
 8019350:	4b54      	ldr	r3, [pc, #336]	; (80194a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019352:	781b      	ldrb	r3, [r3, #0]
 8019354:	2b00      	cmp	r3, #0
 8019356:	f43f af39 	beq.w	80191cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801935a:	2300      	movs	r3, #0
 801935c:	883d      	ldrh	r5, [r7, #0]
 801935e:	34ea      	adds	r4, #234	; 0xea
 8019360:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019364:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019368:	42ab      	cmp	r3, r5
 801936a:	f67f af2f 	bls.w	80191cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801936e:	ab1a      	add	r3, sp, #104	; 0x68
 8019370:	4620      	mov	r0, r4
 8019372:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019376:	3501      	adds	r5, #1
 8019378:	3b44      	subs	r3, #68	; 0x44
 801937a:	b2ad      	uxth	r5, r5
 801937c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019380:	f7ff fe32 	bl	8018fe8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019384:	e7ee      	b.n	8019364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8019386:	2b02      	cmp	r3, #2
 8019388:	d16a      	bne.n	8019460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801938a:	f8df a120 	ldr.w	sl, [pc, #288]	; 80194ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801938e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019392:	42ab      	cmp	r3, r5
 8019394:	d9dc      	bls.n	8019350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8019396:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801939a:	ab03      	add	r3, sp, #12
 801939c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80193a0:	6851      	ldr	r1, [r2, #4]
 80193a2:	c303      	stmia	r3!, {r0, r1}
 80193a4:	f89a 3000 	ldrb.w	r3, [sl]
 80193a8:	2b01      	cmp	r3, #1
 80193aa:	d102      	bne.n	80193b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80193ac:	a803      	add	r0, sp, #12
 80193ae:	f7ff fc5f 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80193b2:	a803      	add	r0, sp, #12
 80193b4:	f7fc fc74 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 80193b8:	2800      	cmp	r0, #0
 80193ba:	d14a      	bne.n	8019452 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 80193bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80193c0:	f10d 0914 	add.w	r9, sp, #20
 80193c4:	f10d 081c 	add.w	r8, sp, #28
 80193c8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80193cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80193d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80193d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80193dc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80193e0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80193e4:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 80193e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80193ec:	44dc      	add	ip, fp
 80193ee:	6830      	ldr	r0, [r6, #0]
 80193f0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80193f4:	ebac 0c02 	sub.w	ip, ip, r2
 80193f8:	f8d0 e000 	ldr.w	lr, [r0]
 80193fc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019400:	fa1f fc8c 	uxth.w	ip, ip
 8019404:	f8cd c000 	str.w	ip, [sp]
 8019408:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801940c:	47d8      	blx	fp
 801940e:	f89a 3000 	ldrb.w	r3, [sl]
 8019412:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019416:	2b01      	cmp	r3, #1
 8019418:	d11e      	bne.n	8019458 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801941a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801941e:	e888 0003 	stmia.w	r8, {r0, r1}
 8019422:	4640      	mov	r0, r8
 8019424:	f7ff fbca 	bl	8018bbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	4641      	mov	r1, r8
 801942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801942e:	4620      	mov	r0, r4
 8019430:	4798      	blx	r3
 8019432:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019436:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801943a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801943e:	4413      	add	r3, r2
 8019440:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019444:	440a      	add	r2, r1
 8019446:	b21b      	sxth	r3, r3
 8019448:	b212      	sxth	r2, r2
 801944a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801944e:	4293      	cmp	r3, r2
 8019450:	dbc6      	blt.n	80193e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8019452:	3501      	adds	r5, #1
 8019454:	b2ad      	uxth	r5, r5
 8019456:	e79a      	b.n	801938e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8019458:	6823      	ldr	r3, [r4, #0]
 801945a:	4649      	mov	r1, r9
 801945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801945e:	e7e6      	b.n	801942e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019460:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019464:	42ab      	cmp	r3, r5
 8019466:	f67f af73 	bls.w	8019350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801946a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801946e:	ab07      	add	r3, sp, #28
 8019470:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019474:	6851      	ldr	r1, [r2, #4]
 8019476:	c303      	stmia	r3!, {r0, r1}
 8019478:	a807      	add	r0, sp, #28
 801947a:	f7fc fc11 	bl	8015ca0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801947e:	b920      	cbnz	r0, 801948a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8019480:	6823      	ldr	r3, [r4, #0]
 8019482:	a907      	add	r1, sp, #28
 8019484:	4620      	mov	r0, r4
 8019486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019488:	4798      	blx	r3
 801948a:	3501      	adds	r5, #1
 801948c:	b2ad      	uxth	r5, r5
 801948e:	e7e7      	b.n	8019460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8019490:	2000c580 	.word	0x2000c580
 8019494:	2000c58c 	.word	0x2000c58c
 8019498:	20000058 	.word	0x20000058
 801949c:	2000c508 	.word	0x2000c508
 80194a0:	2000c4fe 	.word	0x2000c4fe
 80194a4:	2000c506 	.word	0x2000c506
 80194a8:	2000c4fc 	.word	0x2000c4fc
 80194ac:	2000c500 	.word	0x2000c500

080194b0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80194b0:	4b03      	ldr	r3, [pc, #12]	; (80194c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80194b2:	2200      	movs	r2, #0
 80194b4:	801a      	strh	r2, [r3, #0]
 80194b6:	805a      	strh	r2, [r3, #2]
 80194b8:	809a      	strh	r2, [r3, #4]
 80194ba:	80da      	strh	r2, [r3, #6]
 80194bc:	4770      	bx	lr
 80194be:	bf00      	nop
 80194c0:	2000c58c 	.word	0x2000c58c

080194c4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80194c4:	2000      	movs	r0, #0
 80194c6:	4770      	bx	lr

080194c8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 80194c8:	2000      	movs	r0, #0
 80194ca:	4770      	bx	lr

080194cc <_ZNK8touchgfx4Font12getCharWidthEt>:
 80194cc:	b508      	push	{r3, lr}
 80194ce:	6803      	ldr	r3, [r0, #0]
 80194d0:	68db      	ldr	r3, [r3, #12]
 80194d2:	4798      	blx	r3
 80194d4:	b128      	cbz	r0, 80194e2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80194d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80194da:	7a80      	ldrb	r0, [r0, #10]
 80194dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80194e0:	4318      	orrs	r0, r3
 80194e2:	bd08      	pop	{r3, pc}

080194e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 80194e4:	b40e      	push	{r1, r2, r3}
 80194e6:	b533      	push	{r0, r1, r4, r5, lr}
 80194e8:	ab05      	add	r3, sp, #20
 80194ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ee:	9301      	str	r3, [sp, #4]
 80194f0:	4b0a      	ldr	r3, [pc, #40]	; (801951c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 80194f2:	685c      	ldr	r4, [r3, #4]
 80194f4:	1061      	asrs	r1, r4, #1
 80194f6:	07e4      	lsls	r4, r4, #31
 80194f8:	eb00 0501 	add.w	r5, r0, r1
 80194fc:	bf46      	itte	mi
 80194fe:	681b      	ldrmi	r3, [r3, #0]
 8019500:	5841      	ldrmi	r1, [r0, r1]
 8019502:	681c      	ldrpl	r4, [r3, #0]
 8019504:	4628      	mov	r0, r5
 8019506:	bf48      	it	mi
 8019508:	58cc      	ldrmi	r4, [r1, r3]
 801950a:	2100      	movs	r1, #0
 801950c:	9b01      	ldr	r3, [sp, #4]
 801950e:	47a0      	blx	r4
 8019510:	b002      	add	sp, #8
 8019512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019516:	b003      	add	sp, #12
 8019518:	4770      	bx	lr
 801951a:	bf00      	nop
 801951c:	20000028 	.word	0x20000028

08019520 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8019520:	b40c      	push	{r2, r3}
 8019522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019524:	ab06      	add	r3, sp, #24
 8019526:	f853 2b04 	ldr.w	r2, [r3], #4
 801952a:	9301      	str	r3, [sp, #4]
 801952c:	4b09      	ldr	r3, [pc, #36]	; (8019554 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801952e:	685d      	ldr	r5, [r3, #4]
 8019530:	106c      	asrs	r4, r5, #1
 8019532:	07ed      	lsls	r5, r5, #31
 8019534:	eb00 0604 	add.w	r6, r0, r4
 8019538:	bf45      	ittet	mi
 801953a:	681b      	ldrmi	r3, [r3, #0]
 801953c:	5900      	ldrmi	r0, [r0, r4]
 801953e:	681c      	ldrpl	r4, [r3, #0]
 8019540:	58c4      	ldrmi	r4, [r0, r3]
 8019542:	4630      	mov	r0, r6
 8019544:	9b01      	ldr	r3, [sp, #4]
 8019546:	47a0      	blx	r4
 8019548:	b002      	add	sp, #8
 801954a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801954e:	b002      	add	sp, #8
 8019550:	4770      	bx	lr
 8019552:	bf00      	nop
 8019554:	20000028 	.word	0x20000028

08019558 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019558:	b40e      	push	{r1, r2, r3}
 801955a:	b530      	push	{r4, r5, lr}
 801955c:	b098      	sub	sp, #96	; 0x60
 801955e:	4604      	mov	r4, r0
 8019560:	ab1b      	add	r3, sp, #108	; 0x6c
 8019562:	a802      	add	r0, sp, #8
 8019564:	f853 5b04 	ldr.w	r5, [r3], #4
 8019568:	9301      	str	r3, [sp, #4]
 801956a:	f001 f837 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 801956e:	6823      	ldr	r3, [r4, #0]
 8019570:	4620      	mov	r0, r4
 8019572:	2401      	movs	r4, #1
 8019574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019576:	4798      	blx	r3
 8019578:	9a01      	ldr	r2, [sp, #4]
 801957a:	4603      	mov	r3, r0
 801957c:	4629      	mov	r1, r5
 801957e:	a802      	add	r0, sp, #8
 8019580:	f001 f849 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019584:	a802      	add	r0, sp, #8
 8019586:	f001 f87f 	bl	801a688 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801958a:	b2a3      	uxth	r3, r4
 801958c:	b138      	cbz	r0, 801959e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801958e:	280a      	cmp	r0, #10
 8019590:	a802      	add	r0, sp, #8
 8019592:	bf04      	itt	eq
 8019594:	3301      	addeq	r3, #1
 8019596:	b21c      	sxtheq	r4, r3
 8019598:	f001 f876 	bl	801a688 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801959c:	e7f5      	b.n	801958a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801959e:	4618      	mov	r0, r3
 80195a0:	b018      	add	sp, #96	; 0x60
 80195a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80195a6:	b003      	add	sp, #12
 80195a8:	4770      	bx	lr
	...

080195ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80195ac:	b40e      	push	{r1, r2, r3}
 80195ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195b0:	b098      	sub	sp, #96	; 0x60
 80195b2:	4605      	mov	r5, r0
 80195b4:	4f25      	ldr	r7, [pc, #148]	; (801964c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80195b6:	ab1d      	add	r3, sp, #116	; 0x74
 80195b8:	a802      	add	r0, sp, #8
 80195ba:	ae18      	add	r6, sp, #96	; 0x60
 80195bc:	f853 4b04 	ldr.w	r4, [r3], #4
 80195c0:	9300      	str	r3, [sp, #0]
 80195c2:	f001 f80b 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 80195c6:	682b      	ldr	r3, [r5, #0]
 80195c8:	4628      	mov	r0, r5
 80195ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195cc:	4798      	blx	r3
 80195ce:	4621      	mov	r1, r4
 80195d0:	2400      	movs	r4, #0
 80195d2:	4603      	mov	r3, r0
 80195d4:	9a00      	ldr	r2, [sp, #0]
 80195d6:	a802      	add	r0, sp, #8
 80195d8:	f001 f81d 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80195dc:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80195e0:	462a      	mov	r2, r5
 80195e2:	4633      	mov	r3, r6
 80195e4:	4621      	mov	r1, r4
 80195e6:	a802      	add	r0, sp, #8
 80195e8:	f001 f97a 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80195ec:	b340      	cbz	r0, 8019640 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 80195ee:	280a      	cmp	r0, #10
 80195f0:	d01f      	beq.n	8019632 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80195f2:	9901      	ldr	r1, [sp, #4]
 80195f4:	b1e9      	cbz	r1, 8019632 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80195f6:	7b4b      	ldrb	r3, [r1, #13]
 80195f8:	f891 c008 	ldrb.w	ip, [r1, #8]
 80195fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019600:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019604:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019608:	79c9      	ldrb	r1, [r1, #7]
 801960a:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801960e:	bf18      	it	ne
 8019610:	4638      	movne	r0, r7
 8019612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019616:	bf08      	it	eq
 8019618:	2000      	moveq	r0, #0
 801961a:	88aa      	ldrh	r2, [r5, #4]
 801961c:	ea41 010e 	orr.w	r1, r1, lr
 8019620:	ea43 030c 	orr.w	r3, r3, ip
 8019624:	440a      	add	r2, r1
 8019626:	4303      	orrs	r3, r0
 8019628:	1ad3      	subs	r3, r2, r3
 801962a:	b29b      	uxth	r3, r3
 801962c:	42a3      	cmp	r3, r4
 801962e:	bfc8      	it	gt
 8019630:	b21c      	sxthgt	r4, r3
 8019632:	4633      	mov	r3, r6
 8019634:	462a      	mov	r2, r5
 8019636:	2100      	movs	r1, #0
 8019638:	a802      	add	r0, sp, #8
 801963a:	f001 f951 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801963e:	e7d5      	b.n	80195ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8019640:	b2a0      	uxth	r0, r4
 8019642:	b018      	add	sp, #96	; 0x60
 8019644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019648:	b003      	add	sp, #12
 801964a:	4770      	bx	lr
 801964c:	fffffe00 	.word	0xfffffe00

08019650 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019650:	b40e      	push	{r1, r2, r3}
 8019652:	b570      	push	{r4, r5, r6, lr}
 8019654:	b099      	sub	sp, #100	; 0x64
 8019656:	4604      	mov	r4, r0
 8019658:	26ff      	movs	r6, #255	; 0xff
 801965a:	ab1d      	add	r3, sp, #116	; 0x74
 801965c:	a802      	add	r0, sp, #8
 801965e:	f853 5b04 	ldr.w	r5, [r3], #4
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	f000 ffba 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 8019668:	6823      	ldr	r3, [r4, #0]
 801966a:	4620      	mov	r0, r4
 801966c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801966e:	4798      	blx	r3
 8019670:	4629      	mov	r1, r5
 8019672:	4603      	mov	r3, r0
 8019674:	9a00      	ldr	r2, [sp, #0]
 8019676:	a802      	add	r0, sp, #8
 8019678:	ad18      	add	r5, sp, #96	; 0x60
 801967a:	f000 ffcc 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801967e:	2100      	movs	r1, #0
 8019680:	4622      	mov	r2, r4
 8019682:	a802      	add	r0, sp, #8
 8019684:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019688:	462b      	mov	r3, r5
 801968a:	f001 f929 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801968e:	b190      	cbz	r0, 80196b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8019690:	280a      	cmp	r0, #10
 8019692:	d009      	beq.n	80196a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019694:	9a01      	ldr	r2, [sp, #4]
 8019696:	b13a      	cbz	r2, 80196a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019698:	7923      	ldrb	r3, [r4, #4]
 801969a:	7a12      	ldrb	r2, [r2, #8]
 801969c:	1a9b      	subs	r3, r3, r2
 801969e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80196a2:	429e      	cmp	r6, r3
 80196a4:	bf28      	it	cs
 80196a6:	461e      	movcs	r6, r3
 80196a8:	462b      	mov	r3, r5
 80196aa:	4622      	mov	r2, r4
 80196ac:	2100      	movs	r1, #0
 80196ae:	a802      	add	r0, sp, #8
 80196b0:	f001 f916 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80196b4:	e7eb      	b.n	801968e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80196b6:	4630      	mov	r0, r6
 80196b8:	b019      	add	sp, #100	; 0x64
 80196ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196be:	b003      	add	sp, #12
 80196c0:	4770      	bx	lr

080196c2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80196c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c6:	b099      	sub	sp, #100	; 0x64
 80196c8:	4606      	mov	r6, r0
 80196ca:	4614      	mov	r4, r2
 80196cc:	4688      	mov	r8, r1
 80196ce:	a802      	add	r0, sp, #8
 80196d0:	461d      	mov	r5, r3
 80196d2:	f04f 0b00 	mov.w	fp, #0
 80196d6:	f000 ff81 	bl	801a5dc <_ZN8touchgfx12TextProviderC1Ev>
 80196da:	6833      	ldr	r3, [r6, #0]
 80196dc:	4630      	mov	r0, r6
 80196de:	465f      	mov	r7, fp
 80196e0:	46da      	mov	sl, fp
 80196e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196e4:	46d9      	mov	r9, fp
 80196e6:	4798      	blx	r3
 80196e8:	462a      	mov	r2, r5
 80196ea:	4603      	mov	r3, r0
 80196ec:	4621      	mov	r1, r4
 80196ee:	a802      	add	r0, sp, #8
 80196f0:	f000 ff91 	bl	801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80196f4:	ab01      	add	r3, sp, #4
 80196f6:	4632      	mov	r2, r6
 80196f8:	4641      	mov	r1, r8
 80196fa:	a802      	add	r0, sp, #8
 80196fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8019700:	f001 f8ee 	bl	801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019704:	4605      	mov	r5, r0
 8019706:	b108      	cbz	r0, 801970c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8019708:	280a      	cmp	r0, #10
 801970a:	d10b      	bne.n	8019724 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801970c:	4557      	cmp	r7, sl
 801970e:	bf38      	it	cc
 8019710:	4657      	movcc	r7, sl
 8019712:	f04f 0a00 	mov.w	sl, #0
 8019716:	b91d      	cbnz	r5, 8019720 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8019718:	4638      	mov	r0, r7
 801971a:	b019      	add	sp, #100	; 0x64
 801971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019720:	46ab      	mov	fp, r5
 8019722:	e7e7      	b.n	80196f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8019724:	9a01      	ldr	r2, [sp, #4]
 8019726:	2a00      	cmp	r2, #0
 8019728:	d0fa      	beq.n	8019720 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801972a:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801972e:	4659      	mov	r1, fp
 8019730:	6833      	ldr	r3, [r6, #0]
 8019732:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8019736:	7a94      	ldrb	r4, [r2, #10]
 8019738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801973a:	4304      	orrs	r4, r0
 801973c:	4630      	mov	r0, r6
 801973e:	8895      	ldrh	r5, [r2, #4]
 8019740:	4798      	blx	r3
 8019742:	4420      	add	r0, r4
 8019744:	4450      	add	r0, sl
 8019746:	fa1f fa80 	uxth.w	sl, r0
 801974a:	e7e4      	b.n	8019716 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801974c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801974c:	b513      	push	{r0, r1, r4, lr}
 801974e:	1d01      	adds	r1, r0, #4
 8019750:	4603      	mov	r3, r0
 8019752:	466a      	mov	r2, sp
 8019754:	c903      	ldmia	r1, {r0, r1}
 8019756:	e882 0003 	stmia.w	r2, {r0, r1}
 801975a:	2100      	movs	r1, #0
 801975c:	4618      	mov	r0, r3
 801975e:	9100      	str	r1, [sp, #0]
 8019760:	6819      	ldr	r1, [r3, #0]
 8019762:	690c      	ldr	r4, [r1, #16]
 8019764:	4611      	mov	r1, r2
 8019766:	47a0      	blx	r4
 8019768:	b002      	add	sp, #8
 801976a:	bd10      	pop	{r4, pc}

0801976c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801976c:	b538      	push	{r3, r4, r5, lr}
 801976e:	680b      	ldr	r3, [r1, #0]
 8019770:	460c      	mov	r4, r1
 8019772:	4605      	mov	r5, r0
 8019774:	68db      	ldr	r3, [r3, #12]
 8019776:	4798      	blx	r3
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	4620      	mov	r0, r4
 801977c:	4629      	mov	r1, r5
 801977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019780:	4798      	blx	r3
 8019782:	4628      	mov	r0, r5
 8019784:	bd38      	pop	{r3, r4, r5, pc}

08019786 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019786:	b410      	push	{r4}
 8019788:	880a      	ldrh	r2, [r1, #0]
 801978a:	8884      	ldrh	r4, [r0, #4]
 801978c:	4422      	add	r2, r4
 801978e:	800a      	strh	r2, [r1, #0]
 8019790:	884a      	ldrh	r2, [r1, #2]
 8019792:	88c4      	ldrh	r4, [r0, #6]
 8019794:	4422      	add	r2, r4
 8019796:	804a      	strh	r2, [r1, #2]
 8019798:	6940      	ldr	r0, [r0, #20]
 801979a:	b120      	cbz	r0, 80197a6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801979c:	6803      	ldr	r3, [r0, #0]
 801979e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197a4:	4718      	bx	r3
 80197a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197aa:	4770      	bx	lr

080197ac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80197ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ae:	460b      	mov	r3, r1
 80197b0:	b085      	sub	sp, #20
 80197b2:	4604      	mov	r4, r0
 80197b4:	b901      	cbnz	r1, 80197b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80197b6:	b1fa      	cbz	r2, 80197f8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 80197b8:	1d27      	adds	r7, r4, #4
 80197ba:	466e      	mov	r6, sp
 80197bc:	ad02      	add	r5, sp, #8
 80197be:	e897 0003 	ldmia.w	r7, {r0, r1}
 80197c2:	e886 0003 	stmia.w	r6, {r0, r1}
 80197c6:	88e1      	ldrh	r1, [r4, #6]
 80197c8:	4620      	mov	r0, r4
 80197ca:	440a      	add	r2, r1
 80197cc:	88a1      	ldrh	r1, [r4, #4]
 80197ce:	4419      	add	r1, r3
 80197d0:	6823      	ldr	r3, [r4, #0]
 80197d2:	b212      	sxth	r2, r2
 80197d4:	b209      	sxth	r1, r1
 80197d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197d8:	4798      	blx	r3
 80197da:	e897 0003 	ldmia.w	r7, {r0, r1}
 80197de:	e885 0003 	stmia.w	r5, {r0, r1}
 80197e2:	6960      	ldr	r0, [r4, #20]
 80197e4:	b150      	cbz	r0, 80197fc <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80197e6:	6803      	ldr	r3, [r0, #0]
 80197e8:	4631      	mov	r1, r6
 80197ea:	691b      	ldr	r3, [r3, #16]
 80197ec:	4798      	blx	r3
 80197ee:	6960      	ldr	r0, [r4, #20]
 80197f0:	6803      	ldr	r3, [r0, #0]
 80197f2:	691b      	ldr	r3, [r3, #16]
 80197f4:	4629      	mov	r1, r5
 80197f6:	4798      	blx	r3
 80197f8:	b005      	add	sp, #20
 80197fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197fc:	f7ff fb78 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 8019800:	6803      	ldr	r3, [r0, #0]
 8019802:	4631      	mov	r1, r6
 8019804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019806:	4798      	blx	r3
 8019808:	f7ff fb72 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 801980c:	6803      	ldr	r3, [r0, #0]
 801980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019810:	e7f0      	b.n	80197f4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019812 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019812:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019814:	8882      	ldrh	r2, [r0, #4]
 8019816:	4605      	mov	r5, r0
 8019818:	880b      	ldrh	r3, [r1, #0]
 801981a:	460c      	mov	r4, r1
 801981c:	4413      	add	r3, r2
 801981e:	800b      	strh	r3, [r1, #0]
 8019820:	884b      	ldrh	r3, [r1, #2]
 8019822:	88c2      	ldrh	r2, [r0, #6]
 8019824:	4413      	add	r3, r2
 8019826:	4602      	mov	r2, r0
 8019828:	804b      	strh	r3, [r1, #2]
 801982a:	466b      	mov	r3, sp
 801982c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019830:	6851      	ldr	r1, [r2, #4]
 8019832:	c303      	stmia	r3!, {r0, r1}
 8019834:	4621      	mov	r1, r4
 8019836:	4668      	mov	r0, sp
 8019838:	f7fc f9ee 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 801983c:	466b      	mov	r3, sp
 801983e:	cb03      	ldmia	r3!, {r0, r1}
 8019840:	6020      	str	r0, [r4, #0]
 8019842:	6061      	str	r1, [r4, #4]
 8019844:	6968      	ldr	r0, [r5, #20]
 8019846:	b128      	cbz	r0, 8019854 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019848:	6803      	ldr	r3, [r0, #0]
 801984a:	691b      	ldr	r3, [r3, #16]
 801984c:	4621      	mov	r1, r4
 801984e:	4798      	blx	r3
 8019850:	b003      	add	sp, #12
 8019852:	bd30      	pop	{r4, r5, pc}
 8019854:	f7ff fb4c 	bl	8018ef0 <_ZN8touchgfx11Application11getInstanceEv>
 8019858:	6803      	ldr	r3, [r0, #0]
 801985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801985c:	e7f6      	b.n	801984c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801985e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801985e:	b570      	push	{r4, r5, r6, lr}
 8019860:	8882      	ldrh	r2, [r0, #4]
 8019862:	460c      	mov	r4, r1
 8019864:	880b      	ldrh	r3, [r1, #0]
 8019866:	4605      	mov	r5, r0
 8019868:	4413      	add	r3, r2
 801986a:	800b      	strh	r3, [r1, #0]
 801986c:	884b      	ldrh	r3, [r1, #2]
 801986e:	88c2      	ldrh	r2, [r0, #6]
 8019870:	4413      	add	r3, r2
 8019872:	804b      	strh	r3, [r1, #2]
 8019874:	1d01      	adds	r1, r0, #4
 8019876:	4620      	mov	r0, r4
 8019878:	f7fc f9ce 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 801987c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019880:	b153      	cbz	r3, 8019898 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019882:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019886:	b13b      	cbz	r3, 8019898 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019888:	6968      	ldr	r0, [r5, #20]
 801988a:	b128      	cbz	r0, 8019898 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801988c:	6803      	ldr	r3, [r0, #0]
 801988e:	4621      	mov	r1, r4
 8019890:	6a1b      	ldr	r3, [r3, #32]
 8019892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019896:	4718      	bx	r3
 8019898:	bd70      	pop	{r4, r5, r6, pc}

0801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801989a:	b510      	push	{r4, lr}
 801989c:	2300      	movs	r3, #0
 801989e:	4604      	mov	r4, r0
 80198a0:	4608      	mov	r0, r1
 80198a2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80198a6:	8023      	strh	r3, [r4, #0]
 80198a8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80198ac:	8063      	strh	r3, [r4, #2]
 80198ae:	6803      	ldr	r3, [r0, #0]
 80198b0:	80a1      	strh	r1, [r4, #4]
 80198b2:	4621      	mov	r1, r4
 80198b4:	80e2      	strh	r2, [r4, #6]
 80198b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198b8:	4798      	blx	r3
 80198ba:	4620      	mov	r0, r4
 80198bc:	bd10      	pop	{r4, pc}
	...

080198c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80198c0:	b530      	push	{r4, r5, lr}
 80198c2:	8083      	strh	r3, [r0, #4]
 80198c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80198c8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80198cc:	7183      	strb	r3, [r0, #6]
 80198ce:	79c3      	ldrb	r3, [r0, #7]
 80198d0:	6101      	str	r1, [r0, #16]
 80198d2:	f365 0306 	bfi	r3, r5, #0, #7
 80198d6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80198da:	8282      	strh	r2, [r0, #20]
 80198dc:	f365 13c7 	bfi	r3, r5, #7, #1
 80198e0:	71c3      	strb	r3, [r0, #7]
 80198e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80198e6:	7203      	strb	r3, [r0, #8]
 80198e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80198ec:	7243      	strb	r3, [r0, #9]
 80198ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80198f2:	8143      	strh	r3, [r0, #10]
 80198f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80198f8:	8183      	strh	r3, [r0, #12]
 80198fa:	4b01      	ldr	r3, [pc, #4]	; (8019900 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80198fc:	6003      	str	r3, [r0, #0]
 80198fe:	bd30      	pop	{r4, r5, pc}
 8019900:	08028ad8 	.word	0x08028ad8

08019904 <_ZNK8touchgfx9ConstFont4findEt>:
 8019904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019906:	8a84      	ldrh	r4, [r0, #20]
 8019908:	2500      	movs	r5, #0
 801990a:	260e      	movs	r6, #14
 801990c:	3c01      	subs	r4, #1
 801990e:	42a5      	cmp	r5, r4
 8019910:	dc0c      	bgt.n	801992c <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019912:	192a      	adds	r2, r5, r4
 8019914:	6903      	ldr	r3, [r0, #16]
 8019916:	1052      	asrs	r2, r2, #1
 8019918:	fb06 3302 	mla	r3, r6, r2, r3
 801991c:	889f      	ldrh	r7, [r3, #4]
 801991e:	428f      	cmp	r7, r1
 8019920:	d901      	bls.n	8019926 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019922:	1e54      	subs	r4, r2, #1
 8019924:	e7f3      	b.n	801990e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019926:	d202      	bcs.n	801992e <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019928:	1c55      	adds	r5, r2, #1
 801992a:	e7f0      	b.n	801990e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801992c:	2300      	movs	r3, #0
 801992e:	4618      	mov	r0, r3
 8019930:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019932 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019934:	4605      	mov	r5, r0
 8019936:	4617      	mov	r7, r2
 8019938:	461e      	mov	r6, r3
 801993a:	f7ff ffe3 	bl	8019904 <_ZNK8touchgfx9ConstFont4findEt>
 801993e:	b9e0      	cbnz	r0, 801997a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019940:	b911      	cbnz	r1, 8019948 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019942:	2400      	movs	r4, #0
 8019944:	4620      	mov	r0, r4
 8019946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019948:	290a      	cmp	r1, #10
 801994a:	d0fa      	beq.n	8019942 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801994c:	682b      	ldr	r3, [r5, #0]
 801994e:	4628      	mov	r0, r5
 8019950:	691b      	ldr	r3, [r3, #16]
 8019952:	4798      	blx	r3
 8019954:	4601      	mov	r1, r0
 8019956:	4628      	mov	r0, r5
 8019958:	f7ff ffd4 	bl	8019904 <_ZNK8touchgfx9ConstFont4findEt>
 801995c:	4604      	mov	r4, r0
 801995e:	2800      	cmp	r0, #0
 8019960:	d0ef      	beq.n	8019942 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019962:	682b      	ldr	r3, [r5, #0]
 8019964:	4621      	mov	r1, r4
 8019966:	4628      	mov	r0, r5
 8019968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801996a:	4798      	blx	r3
 801996c:	6038      	str	r0, [r7, #0]
 801996e:	682b      	ldr	r3, [r5, #0]
 8019970:	4628      	mov	r0, r5
 8019972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019974:	4798      	blx	r3
 8019976:	7030      	strb	r0, [r6, #0]
 8019978:	e7e4      	b.n	8019944 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801997a:	4604      	mov	r4, r0
 801997c:	e7f1      	b.n	8019962 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801997e <_ZN8touchgfx6memsetEPvhm>:
 801997e:	4402      	add	r2, r0
 8019980:	4290      	cmp	r0, r2
 8019982:	d002      	beq.n	801998a <_ZN8touchgfx6memsetEPvhm+0xc>
 8019984:	f800 1b01 	strb.w	r1, [r0], #1
 8019988:	e7fa      	b.n	8019980 <_ZN8touchgfx6memsetEPvhm+0x2>
 801998a:	4770      	bx	lr

0801998c <_ZN8touchgfx3clzEl>:
 801998c:	b1e8      	cbz	r0, 80199ca <_ZN8touchgfx3clzEl+0x3e>
 801998e:	2800      	cmp	r0, #0
 8019990:	bfb8      	it	lt
 8019992:	4240      	neglt	r0, r0
 8019994:	0c03      	lsrs	r3, r0, #16
 8019996:	041b      	lsls	r3, r3, #16
 8019998:	b9ab      	cbnz	r3, 80199c6 <_ZN8touchgfx3clzEl+0x3a>
 801999a:	0400      	lsls	r0, r0, #16
 801999c:	2310      	movs	r3, #16
 801999e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80199a2:	bf04      	itt	eq
 80199a4:	0200      	lsleq	r0, r0, #8
 80199a6:	3308      	addeq	r3, #8
 80199a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80199ac:	bf04      	itt	eq
 80199ae:	0100      	lsleq	r0, r0, #4
 80199b0:	3304      	addeq	r3, #4
 80199b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80199b6:	bf04      	itt	eq
 80199b8:	0080      	lsleq	r0, r0, #2
 80199ba:	3302      	addeq	r3, #2
 80199bc:	2800      	cmp	r0, #0
 80199be:	bfa8      	it	ge
 80199c0:	3301      	addge	r3, #1
 80199c2:	1e58      	subs	r0, r3, #1
 80199c4:	4770      	bx	lr
 80199c6:	2300      	movs	r3, #0
 80199c8:	e7e9      	b.n	801999e <_ZN8touchgfx3clzEl+0x12>
 80199ca:	201f      	movs	r0, #31
 80199cc:	4770      	bx	lr

080199ce <_ZN8touchgfx6muldivElllRl>:
 80199ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199d2:	4604      	mov	r4, r0
 80199d4:	4698      	mov	r8, r3
 80199d6:	2601      	movs	r6, #1
 80199d8:	f7ff ffd8 	bl	801998c <_ZN8touchgfx3clzEl>
 80199dc:	2c00      	cmp	r4, #0
 80199de:	fa04 f500 	lsl.w	r5, r4, r0
 80199e2:	fa06 f600 	lsl.w	r6, r6, r0
 80199e6:	bfba      	itte	lt
 80199e8:	f04f 37ff 	movlt.w	r7, #4294967295
 80199ec:	4264      	neglt	r4, r4
 80199ee:	2701      	movge	r7, #1
 80199f0:	2900      	cmp	r1, #0
 80199f2:	f106 36ff 	add.w	r6, r6, #4294967295
 80199f6:	bfbc      	itt	lt
 80199f8:	4249      	neglt	r1, r1
 80199fa:	427f      	neglt	r7, r7
 80199fc:	2a00      	cmp	r2, #0
 80199fe:	fa41 fc00 	asr.w	ip, r1, r0
 8019a02:	ea01 0106 	and.w	r1, r1, r6
 8019a06:	bfb8      	it	lt
 8019a08:	427f      	neglt	r7, r7
 8019a0a:	fb04 f401 	mul.w	r4, r4, r1
 8019a0e:	fb95 f3f2 	sdiv	r3, r5, r2
 8019a12:	fb02 5513 	mls	r5, r2, r3, r5
 8019a16:	bfb8      	it	lt
 8019a18:	4252      	neglt	r2, r2
 8019a1a:	fb94 f0f2 	sdiv	r0, r4, r2
 8019a1e:	fb02 4410 	mls	r4, r2, r0, r4
 8019a22:	fb0c 4405 	mla	r4, ip, r5, r4
 8019a26:	fb94 f1f2 	sdiv	r1, r4, r2
 8019a2a:	4408      	add	r0, r1
 8019a2c:	fb02 4211 	mls	r2, r2, r1, r4
 8019a30:	fb0c 0003 	mla	r0, ip, r3, r0
 8019a34:	f8c8 2000 	str.w	r2, [r8]
 8019a38:	4378      	muls	r0, r7
 8019a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019a3e <_ZN8touchgfx10ClickEventD1Ev>:
 8019a3e:	4770      	bx	lr

08019a40 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019a40:	2000      	movs	r0, #0
 8019a42:	4770      	bx	lr

08019a44 <_ZN8touchgfx9DragEventD1Ev>:
 8019a44:	4770      	bx	lr

08019a46 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019a46:	2001      	movs	r0, #1
 8019a48:	4770      	bx	lr

08019a4a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019a4a:	2002      	movs	r0, #2
 8019a4c:	4770      	bx	lr

08019a4e <_ZN8touchgfx12GestureEventD1Ev>:
 8019a4e:	4770      	bx	lr

08019a50 <_ZN8touchgfx10ClickEventD0Ev>:
 8019a50:	b510      	push	{r4, lr}
 8019a52:	4604      	mov	r4, r0
 8019a54:	210c      	movs	r1, #12
 8019a56:	f00b fa11 	bl	8024e7c <_ZdlPvj>
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	bd10      	pop	{r4, pc}

08019a5e <_ZN8touchgfx9DragEventD0Ev>:
 8019a5e:	b510      	push	{r4, lr}
 8019a60:	4604      	mov	r4, r0
 8019a62:	2110      	movs	r1, #16
 8019a64:	f00b fa0a 	bl	8024e7c <_ZdlPvj>
 8019a68:	4620      	mov	r0, r4
 8019a6a:	bd10      	pop	{r4, pc}

08019a6c <_ZN8touchgfx12GestureEventD0Ev>:
 8019a6c:	b510      	push	{r4, lr}
 8019a6e:	4604      	mov	r4, r0
 8019a70:	210c      	movs	r1, #12
 8019a72:	f00b fa03 	bl	8024e7c <_ZdlPvj>
 8019a76:	4620      	mov	r0, r4
 8019a78:	bd10      	pop	{r4, pc}
	...

08019a7c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019a7c:	b530      	push	{r4, r5, lr}
 8019a7e:	460d      	mov	r5, r1
 8019a80:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019a82:	b087      	sub	sp, #28
 8019a84:	4604      	mov	r4, r0
 8019a86:	b301      	cbz	r1, 8019aca <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019a88:	a801      	add	r0, sp, #4
 8019a8a:	f7ff ff06 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a8e:	892a      	ldrh	r2, [r5, #8]
 8019a90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019a94:	7928      	ldrb	r0, [r5, #4]
 8019a96:	1ad2      	subs	r2, r2, r3
 8019a98:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019a9a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019a9e:	441a      	add	r2, r3
 8019aa0:	896b      	ldrh	r3, [r5, #10]
 8019aa2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019aa6:	f88d 0010 	strb.w	r0, [sp, #16]
 8019aaa:	1b5b      	subs	r3, r3, r5
 8019aac:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019aae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019ab0:	442b      	add	r3, r5
 8019ab2:	4d07      	ldr	r5, [pc, #28]	; (8019ad0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019ab4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019ab8:	a903      	add	r1, sp, #12
 8019aba:	9503      	str	r5, [sp, #12]
 8019abc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019ac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ac4:	6803      	ldr	r3, [r0, #0]
 8019ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ac8:	4798      	blx	r3
 8019aca:	b007      	add	sp, #28
 8019acc:	bd30      	pop	{r4, r5, pc}
 8019ace:	bf00      	nop
 8019ad0:	08028b54 	.word	0x08028b54

08019ad4 <_ZNK8touchgfx4Rect9intersectEss>:
 8019ad4:	b510      	push	{r4, lr}
 8019ad6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019ada:	428b      	cmp	r3, r1
 8019adc:	dc10      	bgt.n	8019b00 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019ade:	8884      	ldrh	r4, [r0, #4]
 8019ae0:	4423      	add	r3, r4
 8019ae2:	b21b      	sxth	r3, r3
 8019ae4:	4299      	cmp	r1, r3
 8019ae6:	da0b      	bge.n	8019b00 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019ae8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019aec:	4293      	cmp	r3, r2
 8019aee:	dc07      	bgt.n	8019b00 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019af0:	88c0      	ldrh	r0, [r0, #6]
 8019af2:	4418      	add	r0, r3
 8019af4:	b200      	sxth	r0, r0
 8019af6:	4282      	cmp	r2, r0
 8019af8:	bfac      	ite	ge
 8019afa:	2000      	movge	r0, #0
 8019afc:	2001      	movlt	r0, #1
 8019afe:	bd10      	pop	{r4, pc}
 8019b00:	2000      	movs	r0, #0
 8019b02:	e7fc      	b.n	8019afe <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019b04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b06:	460c      	mov	r4, r1
 8019b08:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019b0a:	b089      	sub	sp, #36	; 0x24
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	2900      	cmp	r1, #0
 8019b10:	d054      	beq.n	8019bbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019b12:	4668      	mov	r0, sp
 8019b14:	f7ff fec1 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b18:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019b1a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019b1c:	4668      	mov	r0, sp
 8019b1e:	8922      	ldrh	r2, [r4, #8]
 8019b20:	88e1      	ldrh	r1, [r4, #6]
 8019b22:	443a      	add	r2, r7
 8019b24:	4431      	add	r1, r6
 8019b26:	b212      	sxth	r2, r2
 8019b28:	b209      	sxth	r1, r1
 8019b2a:	f7ff ffd3 	bl	8019ad4 <_ZNK8touchgfx4Rect9intersectEss>
 8019b2e:	b1d0      	cbz	r0, 8019b66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019b30:	89a2      	ldrh	r2, [r4, #12]
 8019b32:	4668      	mov	r0, sp
 8019b34:	8961      	ldrh	r1, [r4, #10]
 8019b36:	443a      	add	r2, r7
 8019b38:	4431      	add	r1, r6
 8019b3a:	b212      	sxth	r2, r2
 8019b3c:	b209      	sxth	r1, r1
 8019b3e:	f7ff ffc9 	bl	8019ad4 <_ZNK8touchgfx4Rect9intersectEss>
 8019b42:	4603      	mov	r3, r0
 8019b44:	b978      	cbnz	r0, 8019b66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019b46:	4a1e      	ldr	r2, [pc, #120]	; (8019bc0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019b48:	a904      	add	r1, sp, #16
 8019b4a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019b4c:	9204      	str	r2, [sp, #16]
 8019b4e:	2202      	movs	r2, #2
 8019b50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019b54:	f88d 2014 	strb.w	r2, [sp, #20]
 8019b58:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019b5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019b60:	6803      	ldr	r3, [r0, #0]
 8019b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b64:	4798      	blx	r3
 8019b66:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019b68:	a802      	add	r0, sp, #8
 8019b6a:	f7ff fe96 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019b72:	88e0      	ldrh	r0, [r4, #6]
 8019b74:	8961      	ldrh	r1, [r4, #10]
 8019b76:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019b7a:	1a80      	subs	r0, r0, r2
 8019b7c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019b80:	1a89      	subs	r1, r1, r2
 8019b82:	8923      	ldrh	r3, [r4, #8]
 8019b84:	4460      	add	r0, ip
 8019b86:	89a2      	ldrh	r2, [r4, #12]
 8019b88:	4461      	add	r1, ip
 8019b8a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019b8c:	eba3 030e 	sub.w	r3, r3, lr
 8019b90:	eba2 020e 	sub.w	r2, r2, lr
 8019b94:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019b98:	7927      	ldrb	r7, [r4, #4]
 8019b9a:	4433      	add	r3, r6
 8019b9c:	4432      	add	r2, r6
 8019b9e:	4c09      	ldr	r4, [pc, #36]	; (8019bc4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019ba0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019ba2:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019ba6:	a904      	add	r1, sp, #16
 8019ba8:	9404      	str	r4, [sp, #16]
 8019baa:	f88d 7014 	strb.w	r7, [sp, #20]
 8019bae:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019bb2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019bb6:	6803      	ldr	r3, [r0, #0]
 8019bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019bba:	4798      	blx	r3
 8019bbc:	b009      	add	sp, #36	; 0x24
 8019bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bc0:	08028b2c 	.word	0x08028b2c
 8019bc4:	08028b40 	.word	0x08028b40

08019bc8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bcc:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019bd0:	b0a1      	sub	sp, #132	; 0x84
 8019bd2:	4604      	mov	r4, r0
 8019bd4:	460d      	mov	r5, r1
 8019bd6:	790b      	ldrb	r3, [r1, #4]
 8019bd8:	f1b9 0f00 	cmp.w	r9, #0
 8019bdc:	d00f      	beq.n	8019bfe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	f040 80a2 	bne.w	8019d28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019be4:	b021      	add	sp, #132	; 0x84
 8019be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bea:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019bee:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019bf2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019bf6:	1d20      	adds	r0, r4, #4
 8019bf8:	f7fb ff5c 	bl	8015ab4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019bfc:	e094      	b.n	8019d28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d1f0      	bne.n	8019be4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019c02:	4b5f      	ldr	r3, [pc, #380]	; (8019d80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019c0a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019c0e:	f1ba 0f03 	cmp.w	sl, #3
 8019c12:	ddea      	ble.n	8019bea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019c14:	f1ba 0f0c 	cmp.w	sl, #12
 8019c18:	f04f 0303 	mov.w	r3, #3
 8019c1c:	f04f 0600 	mov.w	r6, #0
 8019c20:	4958      	ldr	r1, [pc, #352]	; (8019d84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019c22:	bfd8      	it	le
 8019c24:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019c28:	960a      	str	r6, [sp, #40]	; 0x28
 8019c2a:	bfd8      	it	le
 8019c2c:	fb92 f3f3 	sdivle	r3, r2, r3
 8019c30:	9301      	str	r3, [sp, #4]
 8019c32:	4b55      	ldr	r3, [pc, #340]	; (8019d88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019c34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c38:	4b54      	ldr	r3, [pc, #336]	; (8019d8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019c3a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019c3e:	2248      	movs	r2, #72	; 0x48
 8019c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c44:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019c48:	ab0e      	add	r3, sp, #56	; 0x38
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f00b fc06 	bl	802545c <memcpy>
 8019c50:	f04f 32ff 	mov.w	r2, #4294967295
 8019c54:	f8cd a008 	str.w	sl, [sp, #8]
 8019c58:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019c5c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019c60:	46b3      	mov	fp, r6
 8019c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c66:	b29b      	uxth	r3, r3
 8019c68:	9303      	str	r3, [sp, #12]
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	9a03      	ldr	r2, [sp, #12]
 8019c6e:	88ef      	ldrh	r7, [r5, #6]
 8019c70:	a80a      	add	r0, sp, #40	; 0x28
 8019c72:	9309      	str	r3, [sp, #36]	; 0x24
 8019c74:	9b07      	ldr	r3, [sp, #28]
 8019c76:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019c7a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019c7e:	fb13 f302 	smulbb	r3, r3, r2
 8019c82:	b29b      	uxth	r3, r3
 8019c84:	9304      	str	r3, [sp, #16]
 8019c86:	9b07      	ldr	r3, [sp, #28]
 8019c88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	fb13 f302 	smulbb	r3, r3, r2
 8019c92:	b29b      	uxth	r3, r3
 8019c94:	9305      	str	r3, [sp, #20]
 8019c96:	9b04      	ldr	r3, [sp, #16]
 8019c98:	441f      	add	r7, r3
 8019c9a:	9b05      	ldr	r3, [sp, #20]
 8019c9c:	4498      	add	r8, r3
 8019c9e:	b23f      	sxth	r7, r7
 8019ca0:	fa0f f888 	sxth.w	r8, r8
 8019ca4:	4639      	mov	r1, r7
 8019ca6:	4642      	mov	r2, r8
 8019ca8:	f7ff ff14 	bl	8019ad4 <_ZNK8touchgfx4Rect9intersectEss>
 8019cac:	b380      	cbz	r0, 8019d10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019cae:	4639      	mov	r1, r7
 8019cb0:	ab09      	add	r3, sp, #36	; 0x24
 8019cb2:	4642      	mov	r2, r8
 8019cb4:	1d20      	adds	r0, r4, #4
 8019cb6:	f7fb fefd 	bl	8015ab4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019cbc:	b341      	cbz	r1, 8019d10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019cbe:	4549      	cmp	r1, r9
 8019cc0:	d026      	beq.n	8019d10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019cc2:	a80c      	add	r0, sp, #48	; 0x30
 8019cc4:	f7ff fde9 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cc8:	2002      	movs	r0, #2
 8019cca:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019cce:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019cd2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019cd6:	fb92 f2f0 	sdiv	r2, r2, r0
 8019cda:	440a      	add	r2, r1
 8019cdc:	1a99      	subs	r1, r3, r2
 8019cde:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019ce2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019ce6:	fb93 f3f0 	sdiv	r3, r3, r0
 8019cea:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019cee:	4403      	add	r3, r0
 8019cf0:	1ad3      	subs	r3, r2, r3
 8019cf2:	9a06      	ldr	r2, [sp, #24]
 8019cf4:	435b      	muls	r3, r3
 8019cf6:	fb01 3301 	mla	r3, r1, r1, r3
 8019cfa:	4293      	cmp	r3, r2
 8019cfc:	d208      	bcs.n	8019d10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019cfe:	9a04      	ldr	r2, [sp, #16]
 8019d00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019d04:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019d06:	9a05      	ldr	r2, [sp, #20]
 8019d08:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019d0c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019d0e:	9306      	str	r3, [sp, #24]
 8019d10:	f10b 0b02 	add.w	fp, fp, #2
 8019d14:	f1bb 0f08 	cmp.w	fp, #8
 8019d18:	dda7      	ble.n	8019c6a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019d1a:	9b02      	ldr	r3, [sp, #8]
 8019d1c:	3601      	adds	r6, #1
 8019d1e:	4453      	add	r3, sl
 8019d20:	9302      	str	r3, [sp, #8]
 8019d22:	9b01      	ldr	r3, [sp, #4]
 8019d24:	42b3      	cmp	r3, r6
 8019d26:	d199      	bne.n	8019c5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019d28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019d2a:	2900      	cmp	r1, #0
 8019d2c:	f43f af5a 	beq.w	8019be4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019d30:	a80c      	add	r0, sp, #48	; 0x30
 8019d32:	2600      	movs	r6, #0
 8019d34:	f7ff fdb1 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d38:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019d3c:	88ea      	ldrh	r2, [r5, #6]
 8019d3e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019d42:	1ad2      	subs	r2, r2, r3
 8019d44:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019d46:	7929      	ldrb	r1, [r5, #4]
 8019d48:	441a      	add	r2, r3
 8019d4a:	892b      	ldrh	r3, [r5, #8]
 8019d4c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019d50:	a90e      	add	r1, sp, #56	; 0x38
 8019d52:	1a1b      	subs	r3, r3, r0
 8019d54:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019d56:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019d5a:	4403      	add	r3, r0
 8019d5c:	480c      	ldr	r0, [pc, #48]	; (8019d90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019d5e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019d62:	900e      	str	r0, [sp, #56]	; 0x38
 8019d64:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019d66:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019d6a:	6803      	ldr	r3, [r0, #0]
 8019d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d6e:	4798      	blx	r3
 8019d70:	792b      	ldrb	r3, [r5, #4]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	f43f af36 	beq.w	8019be4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019d78:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019d7c:	e732      	b.n	8019be4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019d7e:	bf00      	nop
 8019d80:	2000c508 	.word	0x2000c508
 8019d84:	08026964 	.word	0x08026964
 8019d88:	2000c4fc 	.word	0x2000c4fc
 8019d8c:	2000c4fe 	.word	0x2000c4fe
 8019d90:	08028b2c 	.word	0x08028b2c

08019d94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d96:	4604      	mov	r4, r0
 8019d98:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019d9c:	3201      	adds	r2, #1
 8019d9e:	d112      	bne.n	8019dc6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019da0:	2500      	movs	r5, #0
 8019da2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019da6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019daa:	6803      	ldr	r3, [r0, #0]
 8019dac:	9500      	str	r5, [sp, #0]
 8019dae:	466d      	mov	r5, sp
 8019db0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019db4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019db8:	4629      	mov	r1, r5
 8019dba:	6a1b      	ldr	r3, [r3, #32]
 8019dbc:	4798      	blx	r3
 8019dbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019dc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	b003      	add	sp, #12
 8019dca:	bd30      	pop	{r4, r5, pc}

08019dcc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019dcc:	b513      	push	{r0, r1, r4, lr}
 8019dce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019dd2:	4604      	mov	r4, r0
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	d109      	bne.n	8019dec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019dd8:	4601      	mov	r1, r0
 8019dda:	4668      	mov	r0, sp
 8019ddc:	f7ff fd5d 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019de0:	f8bd 3000 	ldrh.w	r3, [sp]
 8019de4:	8423      	strh	r3, [r4, #32]
 8019de6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019dea:	8463      	strh	r3, [r4, #34]	; 0x22
 8019dec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019df0:	b002      	add	sp, #8
 8019df2:	bd10      	pop	{r4, pc}

08019df4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019df4:	b513      	push	{r0, r1, r4, lr}
 8019df6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019dfa:	4604      	mov	r4, r0
 8019dfc:	3301      	adds	r3, #1
 8019dfe:	d109      	bne.n	8019e14 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019e00:	4601      	mov	r1, r0
 8019e02:	4668      	mov	r0, sp
 8019e04:	f7ff fd49 	bl	801989a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e08:	f8bd 3000 	ldrh.w	r3, [sp]
 8019e0c:	8423      	strh	r3, [r4, #32]
 8019e0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019e12:	8463      	strh	r3, [r4, #34]	; 0x22
 8019e14:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019e18:	b002      	add	sp, #8
 8019e1a:	bd10      	pop	{r4, pc}

08019e1c <_ZN8touchgfx6ScreenC1Ev>:
 8019e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e1e:	4605      	mov	r5, r0
 8019e20:	4b17      	ldr	r3, [pc, #92]	; (8019e80 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019e22:	2200      	movs	r2, #0
 8019e24:	4917      	ldr	r1, [pc, #92]	; (8019e84 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019e26:	f845 3b04 	str.w	r3, [r5], #4
 8019e2a:	2301      	movs	r3, #1
 8019e2c:	8102      	strh	r2, [r0, #8]
 8019e2e:	4604      	mov	r4, r0
 8019e30:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019e34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019e38:	4b13      	ldr	r3, [pc, #76]	; (8019e88 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019e3a:	8142      	strh	r2, [r0, #10]
 8019e3c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019e40:	4b12      	ldr	r3, [pc, #72]	; (8019e8c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019e42:	8182      	strh	r2, [r0, #12]
 8019e44:	81c2      	strh	r2, [r0, #14]
 8019e46:	8202      	strh	r2, [r0, #16]
 8019e48:	8242      	strh	r2, [r0, #18]
 8019e4a:	8282      	strh	r2, [r0, #20]
 8019e4c:	82c2      	strh	r2, [r0, #22]
 8019e4e:	6202      	str	r2, [r0, #32]
 8019e50:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019e54:	6342      	str	r2, [r0, #52]	; 0x34
 8019e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019e5a:	6041      	str	r1, [r0, #4]
 8019e5c:	4611      	mov	r1, r2
 8019e5e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019e62:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8019e66:	4628      	mov	r0, r5
 8019e68:	f7f6 faab 	bl	80103c2 <_ZN8touchgfx8Drawable5setXYEss>
 8019e6c:	4639      	mov	r1, r7
 8019e6e:	4628      	mov	r0, r5
 8019e70:	f7f6 fac5 	bl	80103fe <_ZN8touchgfx8Drawable8setWidthEs>
 8019e74:	4628      	mov	r0, r5
 8019e76:	4631      	mov	r1, r6
 8019e78:	f7f6 fad0 	bl	801041c <_ZN8touchgfx8Drawable9setHeightEs>
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e80:	08028b68 	.word	0x08028b68
 8019e84:	0802783c 	.word	0x0802783c
 8019e88:	2000c4fc 	.word	0x2000c4fc
 8019e8c:	2000c4fe 	.word	0x2000c4fe

08019e90 <_ZN8touchgfx6Screen4drawEv>:
 8019e90:	4b09      	ldr	r3, [pc, #36]	; (8019eb8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019e92:	b507      	push	{r0, r1, r2, lr}
 8019e94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e98:	2100      	movs	r1, #0
 8019e9a:	4b08      	ldr	r3, [pc, #32]	; (8019ebc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019e9c:	9100      	str	r1, [sp, #0]
 8019e9e:	4669      	mov	r1, sp
 8019ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ea4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019ea8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019eac:	6803      	ldr	r3, [r0, #0]
 8019eae:	689b      	ldr	r3, [r3, #8]
 8019eb0:	4798      	blx	r3
 8019eb2:	b003      	add	sp, #12
 8019eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019eb8:	2000c4fc 	.word	0x2000c4fc
 8019ebc:	2000c4fe 	.word	0x2000c4fe

08019ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019ec8:	b089      	sub	sp, #36	; 0x24
 8019eca:	4680      	mov	r8, r0
 8019ecc:	460c      	mov	r4, r1
 8019ece:	4615      	mov	r5, r2
 8019ed0:	b16b      	cbz	r3, 8019eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019ed2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019ed6:	b153      	cbz	r3, 8019eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019ed8:	4628      	mov	r0, r5
 8019eda:	f7ff ff5b 	bl	8019d94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019ede:	4621      	mov	r1, r4
 8019ee0:	f7fe ffc2 	bl	8018e68 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019ee4:	69eb      	ldr	r3, [r5, #28]
 8019ee6:	b928      	cbnz	r0, 8019ef4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019ee8:	461d      	mov	r5, r3
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d1f4      	bne.n	8019ed8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019eee:	b009      	add	sp, #36	; 0x24
 8019ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef4:	ae04      	add	r6, sp, #16
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d051      	beq.n	8019f9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019efa:	682b      	ldr	r3, [r5, #0]
 8019efc:	4629      	mov	r1, r5
 8019efe:	a802      	add	r0, sp, #8
 8019f00:	68db      	ldr	r3, [r3, #12]
 8019f02:	4798      	blx	r3
 8019f04:	4628      	mov	r0, r5
 8019f06:	f7ff ff61 	bl	8019dcc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019f0a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019f0e:	4407      	add	r7, r0
 8019f10:	4628      	mov	r0, r5
 8019f12:	f7ff ff6f 	bl	8019df4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019f16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019f1a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019f1e:	b23f      	sxth	r7, r7
 8019f20:	4418      	add	r0, r3
 8019f22:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019f26:	4621      	mov	r1, r4
 8019f28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019f2c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019f30:	4630      	mov	r0, r6
 8019f32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f36:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019f3a:	f7fb fe6d 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8019f3e:	4628      	mov	r0, r5
 8019f40:	f7ff ff28 	bl	8019d94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019f44:	ab06      	add	r3, sp, #24
 8019f46:	4602      	mov	r2, r0
 8019f48:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019f4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019f50:	4611      	mov	r1, r2
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7fb fe60 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8019f58:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019f5c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019f60:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019f64:	4299      	cmp	r1, r3
 8019f66:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019f6a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019f6e:	d10b      	bne.n	8019f88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019f70:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019f74:	4552      	cmp	r2, sl
 8019f76:	d107      	bne.n	8019f88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019f78:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019f7c:	455a      	cmp	r2, fp
 8019f7e:	d103      	bne.n	8019f88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019f80:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019f84:	454a      	cmp	r2, r9
 8019f86:	d00a      	beq.n	8019f9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019f88:	f1bb 0f00 	cmp.w	fp, #0
 8019f8c:	d002      	beq.n	8019f94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8019f8e:	f1b9 0f00 	cmp.w	r9, #0
 8019f92:	d12e      	bne.n	8019ff2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8019f94:	69ea      	ldr	r2, [r5, #28]
 8019f96:	4621      	mov	r1, r4
 8019f98:	4640      	mov	r0, r8
 8019f9a:	f7ff ff91 	bl	8019ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f9e:	4628      	mov	r0, r5
 8019fa0:	f7ff fef8 	bl	8019d94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019fa4:	6861      	ldr	r1, [r4, #4]
 8019fa6:	4602      	mov	r2, r0
 8019fa8:	4633      	mov	r3, r6
 8019faa:	6820      	ldr	r0, [r4, #0]
 8019fac:	c303      	stmia	r3!, {r0, r1}
 8019fae:	4611      	mov	r1, r2
 8019fb0:	4630      	mov	r0, r6
 8019fb2:	f7fb fe31 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 8019fb6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d097      	beq.n	8019eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019fbe:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d093      	beq.n	8019eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f7ff ff00 	bl	8019dcc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019fcc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019fd0:	1a18      	subs	r0, r3, r0
 8019fd2:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019fd6:	4628      	mov	r0, r5
 8019fd8:	f7ff ff0c 	bl	8019df4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019fdc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019fe0:	4631      	mov	r1, r6
 8019fe2:	1a18      	subs	r0, r3, r0
 8019fe4:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019fe8:	4628      	mov	r0, r5
 8019fea:	682b      	ldr	r3, [r5, #0]
 8019fec:	689b      	ldr	r3, [r3, #8]
 8019fee:	4798      	blx	r3
 8019ff0:	e77d      	b.n	8019eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019ff2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019ff6:	fa1f f08a 	uxth.w	r0, sl
 8019ffa:	4552      	cmp	r2, sl
 8019ffc:	9000      	str	r0, [sp, #0]
 8019ffe:	da12      	bge.n	801a026 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801a000:	9301      	str	r3, [sp, #4]
 801a002:	9b00      	ldr	r3, [sp, #0]
 801a004:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a008:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a00c:	1a9a      	subs	r2, r3, r2
 801a00e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a012:	4631      	mov	r1, r6
 801a014:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a018:	4640      	mov	r0, r8
 801a01a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a01e:	69ea      	ldr	r2, [r5, #28]
 801a020:	f7ff ff4e 	bl	8019ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a024:	9b01      	ldr	r3, [sp, #4]
 801a026:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a02a:	b29f      	uxth	r7, r3
 801a02c:	429a      	cmp	r2, r3
 801a02e:	da0d      	bge.n	801a04c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801a030:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a034:	1aba      	subs	r2, r7, r2
 801a036:	f8ad a012 	strh.w	sl, [sp, #18]
 801a03a:	4631      	mov	r1, r6
 801a03c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a040:	4640      	mov	r0, r8
 801a042:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a046:	69ea      	ldr	r2, [r5, #28]
 801a048:	f7ff ff3a 	bl	8019ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a04c:	8822      	ldrh	r2, [r4, #0]
 801a04e:	445f      	add	r7, fp
 801a050:	88a3      	ldrh	r3, [r4, #4]
 801a052:	b2bf      	uxth	r7, r7
 801a054:	4413      	add	r3, r2
 801a056:	b23a      	sxth	r2, r7
 801a058:	b29b      	uxth	r3, r3
 801a05a:	b219      	sxth	r1, r3
 801a05c:	4291      	cmp	r1, r2
 801a05e:	dd0d      	ble.n	801a07c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801a060:	1bdb      	subs	r3, r3, r7
 801a062:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a066:	f8ad a012 	strh.w	sl, [sp, #18]
 801a06a:	4631      	mov	r1, r6
 801a06c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a070:	4640      	mov	r0, r8
 801a072:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a076:	69ea      	ldr	r2, [r5, #28]
 801a078:	f7ff ff22 	bl	8019ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a07c:	88e2      	ldrh	r2, [r4, #6]
 801a07e:	8863      	ldrh	r3, [r4, #2]
 801a080:	4413      	add	r3, r2
 801a082:	9a00      	ldr	r2, [sp, #0]
 801a084:	444a      	add	r2, r9
 801a086:	b29b      	uxth	r3, r3
 801a088:	fa1f f982 	uxth.w	r9, r2
 801a08c:	b219      	sxth	r1, r3
 801a08e:	fa0f f289 	sxth.w	r2, r9
 801a092:	428a      	cmp	r2, r1
 801a094:	da83      	bge.n	8019f9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a096:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a09a:	eba3 0309 	sub.w	r3, r3, r9
 801a09e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a0a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a0a6:	4631      	mov	r1, r6
 801a0a8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a0ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a0b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0b4:	69ea      	ldr	r2, [r5, #28]
 801a0b6:	e76f      	b.n	8019f98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801a0b8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	aa02      	add	r2, sp, #8
 801a0be:	4604      	mov	r4, r0
 801a0c0:	3004      	adds	r0, #4
 801a0c2:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a0c6:	460d      	mov	r5, r1
 801a0c8:	f7fb fe7d 	bl	8015dc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a0cc:	9a01      	ldr	r2, [sp, #4]
 801a0ce:	b11a      	cbz	r2, 801a0d8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a0d0:	4629      	mov	r1, r5
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	f7ff fef4 	bl	8019ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a0d8:	b003      	add	sp, #12
 801a0da:	bd30      	pop	{r4, r5, pc}

0801a0dc <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a0de:	4602      	mov	r2, r0
 801a0e0:	4604      	mov	r4, r0
 801a0e2:	460d      	mov	r5, r1
 801a0e4:	466b      	mov	r3, sp
 801a0e6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a0ea:	6851      	ldr	r1, [r2, #4]
 801a0ec:	c303      	stmia	r3!, {r0, r1}
 801a0ee:	4629      	mov	r1, r5
 801a0f0:	4668      	mov	r0, sp
 801a0f2:	f7fb fd91 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 801a0f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a0fa:	4669      	mov	r1, sp
 801a0fc:	b123      	cbz	r3, 801a108 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a0fe:	4620      	mov	r0, r4
 801a100:	f7ff ffda 	bl	801a0b8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a104:	b003      	add	sp, #12
 801a106:	bd30      	pop	{r4, r5, pc}
 801a108:	1d20      	adds	r0, r4, #4
 801a10a:	f7fb fe23 	bl	8015d54 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a10e:	e7f9      	b.n	801a104 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a110 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a110:	460b      	mov	r3, r1
 801a112:	680a      	ldr	r2, [r1, #0]
 801a114:	1d01      	adds	r1, r0, #4
 801a116:	6952      	ldr	r2, [r2, #20]
 801a118:	4618      	mov	r0, r3
 801a11a:	4710      	bx	r2

0801a11c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a11c:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a120:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a124:	4b03      	ldr	r3, [pc, #12]	; (801a134 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a126:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a12a:	bf08      	it	eq
 801a12c:	2300      	moveq	r3, #0
 801a12e:	4308      	orrs	r0, r1
 801a130:	4318      	orrs	r0, r3
 801a132:	4770      	bx	lr
 801a134:	fffffe00 	.word	0xfffffe00

0801a138 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a138:	7b43      	ldrb	r3, [r0, #13]
 801a13a:	7201      	strb	r1, [r0, #8]
 801a13c:	b289      	uxth	r1, r1
 801a13e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a142:	05ca      	lsls	r2, r1, #23
 801a144:	bf48      	it	mi
 801a146:	f043 0320 	orrmi.w	r3, r3, #32
 801a14a:	7343      	strb	r3, [r0, #13]
 801a14c:	058b      	lsls	r3, r1, #22
 801a14e:	bf42      	ittt	mi
 801a150:	7b43      	ldrbmi	r3, [r0, #13]
 801a152:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a156:	7343      	strbmi	r3, [r0, #13]
 801a158:	4770      	bx	lr

0801a15a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a15a:	b530      	push	{r4, r5, lr}
 801a15c:	2500      	movs	r5, #0
 801a15e:	2401      	movs	r4, #1
 801a160:	6843      	ldr	r3, [r0, #4]
 801a162:	b913      	cbnz	r3, 801a16a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a164:	6803      	ldr	r3, [r0, #0]
 801a166:	b1f3      	cbz	r3, 801a1a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a168:	6043      	str	r3, [r0, #4]
 801a16a:	7c03      	ldrb	r3, [r0, #16]
 801a16c:	b143      	cbz	r3, 801a180 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a16e:	68c3      	ldr	r3, [r0, #12]
 801a170:	b12b      	cbz	r3, 801a17e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a172:	881a      	ldrh	r2, [r3, #0]
 801a174:	b11a      	cbz	r2, 801a17e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a176:	1c9a      	adds	r2, r3, #2
 801a178:	60c2      	str	r2, [r0, #12]
 801a17a:	8818      	ldrh	r0, [r3, #0]
 801a17c:	bd30      	pop	{r4, r5, pc}
 801a17e:	7405      	strb	r5, [r0, #16]
 801a180:	6843      	ldr	r3, [r0, #4]
 801a182:	8819      	ldrh	r1, [r3, #0]
 801a184:	b179      	cbz	r1, 801a1a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a186:	1c9a      	adds	r2, r3, #2
 801a188:	2902      	cmp	r1, #2
 801a18a:	6042      	str	r2, [r0, #4]
 801a18c:	d1f5      	bne.n	801a17a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a18e:	6883      	ldr	r3, [r0, #8]
 801a190:	1d1a      	adds	r2, r3, #4
 801a192:	6082      	str	r2, [r0, #8]
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	60c3      	str	r3, [r0, #12]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d0e1      	beq.n	801a160 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a19c:	881b      	ldrh	r3, [r3, #0]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d0de      	beq.n	801a160 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a1a2:	7404      	strb	r4, [r0, #16]
 801a1a4:	e7dc      	b.n	801a160 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a1a6:	2000      	movs	r0, #0
 801a1a8:	e7e8      	b.n	801a17c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a1aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a1aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ac:	4605      	mov	r5, r0
 801a1ae:	4608      	mov	r0, r1
 801a1b0:	b1f1      	cbz	r1, 801a1f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a1b2:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a1b6:	460b      	mov	r3, r1
 801a1b8:	f101 0708 	add.w	r7, r1, #8
 801a1bc:	4622      	mov	r2, r4
 801a1be:	6818      	ldr	r0, [r3, #0]
 801a1c0:	3308      	adds	r3, #8
 801a1c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a1c6:	4626      	mov	r6, r4
 801a1c8:	42bb      	cmp	r3, r7
 801a1ca:	c603      	stmia	r6!, {r0, r1}
 801a1cc:	4634      	mov	r4, r6
 801a1ce:	d1f6      	bne.n	801a1be <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a1d0:	6818      	ldr	r0, [r3, #0]
 801a1d2:	6030      	str	r0, [r6, #0]
 801a1d4:	4610      	mov	r0, r2
 801a1d6:	889b      	ldrh	r3, [r3, #4]
 801a1d8:	80b3      	strh	r3, [r6, #4]
 801a1da:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a1de:	015b      	lsls	r3, r3, #5
 801a1e0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a1e4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a1e8:	430b      	orrs	r3, r1
 801a1ea:	425b      	negs	r3, r3
 801a1ec:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a1f2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a1f2:	b538      	push	{r3, r4, r5, lr}
 801a1f4:	460c      	mov	r4, r1
 801a1f6:	6811      	ldr	r1, [r2, #0]
 801a1f8:	4610      	mov	r0, r2
 801a1fa:	68cd      	ldr	r5, [r1, #12]
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	47a8      	blx	r5
 801a200:	2800      	cmp	r0, #0
 801a202:	bf08      	it	eq
 801a204:	4620      	moveq	r0, r4
 801a206:	bd38      	pop	{r3, r4, r5, pc}

0801a208 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a208:	b570      	push	{r4, r5, r6, lr}
 801a20a:	8810      	ldrh	r0, [r2, #0]
 801a20c:	4298      	cmp	r0, r3
 801a20e:	d817      	bhi.n	801a240 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a210:	1e48      	subs	r0, r1, #1
 801a212:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a216:	4298      	cmp	r0, r3
 801a218:	d312      	bcc.n	801a240 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a21a:	2400      	movs	r4, #0
 801a21c:	428c      	cmp	r4, r1
 801a21e:	d20f      	bcs.n	801a240 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a220:	1860      	adds	r0, r4, r1
 801a222:	1040      	asrs	r0, r0, #1
 801a224:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a228:	0085      	lsls	r5, r0, #2
 801a22a:	42b3      	cmp	r3, r6
 801a22c:	d902      	bls.n	801a234 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a22e:	3001      	adds	r0, #1
 801a230:	b284      	uxth	r4, r0
 801a232:	e7f3      	b.n	801a21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a234:	d102      	bne.n	801a23c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a236:	442a      	add	r2, r5
 801a238:	8850      	ldrh	r0, [r2, #2]
 801a23a:	bd70      	pop	{r4, r5, r6, pc}
 801a23c:	b281      	uxth	r1, r0
 801a23e:	e7ed      	b.n	801a21c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a240:	2000      	movs	r0, #0
 801a242:	e7fa      	b.n	801a23a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801a244 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a244:	b510      	push	{r4, lr}
 801a246:	8ac3      	ldrh	r3, [r0, #22]
 801a248:	428b      	cmp	r3, r1
 801a24a:	d805      	bhi.n	801a258 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a24c:	4b07      	ldr	r3, [pc, #28]	; (801a26c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a24e:	21fd      	movs	r1, #253	; 0xfd
 801a250:	4a07      	ldr	r2, [pc, #28]	; (801a270 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a252:	4808      	ldr	r0, [pc, #32]	; (801a274 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a254:	f00a fe40 	bl	8024ed8 <__assert_func>
 801a258:	8a83      	ldrh	r3, [r0, #20]
 801a25a:	240a      	movs	r4, #10
 801a25c:	4419      	add	r1, r3
 801a25e:	fbb1 f3f4 	udiv	r3, r1, r4
 801a262:	fb04 1113 	mls	r1, r4, r3, r1
 801a266:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a26a:	bd10      	pop	{r4, pc}
 801a26c:	08028bb5 	.word	0x08028bb5
 801a270:	08028fe4 	.word	0x08028fe4
 801a274:	08028bc3 	.word	0x08028bc3

0801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a278:	b508      	push	{r3, lr}
 801a27a:	8ac3      	ldrh	r3, [r0, #22]
 801a27c:	428b      	cmp	r3, r1
 801a27e:	d805      	bhi.n	801a28c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a280:	4b07      	ldr	r3, [pc, #28]	; (801a2a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a282:	21d3      	movs	r1, #211	; 0xd3
 801a284:	4a07      	ldr	r2, [pc, #28]	; (801a2a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a286:	4808      	ldr	r0, [pc, #32]	; (801a2a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a288:	f00a fe26 	bl	8024ed8 <__assert_func>
 801a28c:	8a83      	ldrh	r3, [r0, #20]
 801a28e:	220a      	movs	r2, #10
 801a290:	4419      	add	r1, r3
 801a292:	fbb1 f3f2 	udiv	r3, r1, r2
 801a296:	fb02 1113 	mls	r1, r2, r3, r1
 801a29a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a29e:	bd08      	pop	{r3, pc}
 801a2a0:	08028bb5 	.word	0x08028bb5
 801a2a4:	08028d34 	.word	0x08028d34
 801a2a8:	08028bc3 	.word	0x08028bc3

0801a2ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b0:	4604      	mov	r4, r0
 801a2b2:	4688      	mov	r8, r1
 801a2b4:	4615      	mov	r5, r2
 801a2b6:	b94a      	cbnz	r2, 801a2cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a2b8:	4691      	mov	r9, r2
 801a2ba:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a2be:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a2c2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a2c6:	4648      	mov	r0, r9
 801a2c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2cc:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a2d0:	8892      	ldrh	r2, [r2, #4]
 801a2d2:	462b      	mov	r3, r5
 801a2d4:	f105 0c08 	add.w	ip, r5, #8
 801a2d8:	46b3      	mov	fp, r6
 801a2da:	6818      	ldr	r0, [r3, #0]
 801a2dc:	3308      	adds	r3, #8
 801a2de:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a2e2:	4637      	mov	r7, r6
 801a2e4:	4563      	cmp	r3, ip
 801a2e6:	c703      	stmia	r7!, {r0, r1}
 801a2e8:	463e      	mov	r6, r7
 801a2ea:	d1f6      	bne.n	801a2da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a2ec:	6818      	ldr	r0, [r3, #0]
 801a2ee:	46d9      	mov	r9, fp
 801a2f0:	6038      	str	r0, [r7, #0]
 801a2f2:	889b      	ldrh	r3, [r3, #4]
 801a2f4:	80bb      	strh	r3, [r7, #4]
 801a2f6:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a2fa:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a2fe:	18d3      	adds	r3, r2, r3
 801a300:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a304:	b298      	uxth	r0, r3
 801a306:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a30a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a30e:	281d      	cmp	r0, #29
 801a310:	ea4a 0a01 	orr.w	sl, sl, r1
 801a314:	fa1f f68a 	uxth.w	r6, sl
 801a318:	d842      	bhi.n	801a3a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a31a:	2301      	movs	r3, #1
 801a31c:	4950      	ldr	r1, [pc, #320]	; (801a460 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a31e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a322:	4083      	lsls	r3, r0
 801a324:	420b      	tst	r3, r1
 801a326:	d114      	bne.n	801a352 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a328:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a32c:	d03c      	beq.n	801a3a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a32e:	fa1f fa8a 	uxth.w	sl, sl
 801a332:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a336:	4658      	mov	r0, fp
 801a338:	eba1 010a 	sub.w	r1, r1, sl
 801a33c:	b209      	sxth	r1, r1
 801a33e:	f7ff fefb 	bl	801a138 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a342:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a346:	1b86      	subs	r6, r0, r6
 801a348:	eba6 0a0a 	sub.w	sl, r6, sl
 801a34c:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a350:	e7b9      	b.n	801a2c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a352:	2100      	movs	r1, #0
 801a354:	f104 001a 	add.w	r0, r4, #26
 801a358:	f7ff ff8e 	bl	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a35c:	f640 6333 	movw	r3, #3635	; 0xe33
 801a360:	4601      	mov	r1, r0
 801a362:	4298      	cmp	r0, r3
 801a364:	d10a      	bne.n	801a37c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a366:	f8d8 3000 	ldr.w	r3, [r8]
 801a36a:	4640      	mov	r0, r8
 801a36c:	68db      	ldr	r3, [r3, #12]
 801a36e:	4798      	blx	r3
 801a370:	7b41      	ldrb	r1, [r0, #13]
 801a372:	7a00      	ldrb	r0, [r0, #8]
 801a374:	f7ff fed2 	bl	801a11c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a378:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a37c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a380:	4658      	mov	r0, fp
 801a382:	4431      	add	r1, r6
 801a384:	4451      	add	r1, sl
 801a386:	b209      	sxth	r1, r1
 801a388:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a38c:	f7ff fed4 	bl	801a138 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a390:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a394:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a398:	1a9b      	subs	r3, r3, r2
 801a39a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a39e:	e792      	b.n	801a2c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a3a0:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	d005      	beq.n	801a3b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a3a8:	f022 0302 	bic.w	r3, r2, #2
 801a3ac:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a3b0:	428b      	cmp	r3, r1
 801a3b2:	d119      	bne.n	801a3e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a3b4:	1e53      	subs	r3, r2, #1
 801a3b6:	4629      	mov	r1, r5
 801a3b8:	4642      	mov	r2, r8
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	b29b      	uxth	r3, r3
 801a3be:	f7ff ff18 	bl	801a1f2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a3c2:	7b41      	ldrb	r1, [r0, #13]
 801a3c4:	7a00      	ldrb	r0, [r0, #8]
 801a3c6:	f7ff fea9 	bl	801a11c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a3ca:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a3ce:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a3d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a3d6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a3da:	4313      	orrs	r3, r2
 801a3dc:	115a      	asrs	r2, r3, #5
 801a3de:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a3e2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a3e6:	e02e      	b.n	801a446 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a3e8:	4639      	mov	r1, r7
 801a3ea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a3ee:	f7ff fe95 	bl	801a11c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a3f2:	f640 6109 	movw	r1, #3593	; 0xe09
 801a3f6:	f022 0310 	bic.w	r3, r2, #16
 801a3fa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a3fe:	428b      	cmp	r3, r1
 801a400:	d003      	beq.n	801a40a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a402:	f640 6313 	movw	r3, #3603	; 0xe13
 801a406:	429a      	cmp	r2, r3
 801a408:	d127      	bne.n	801a45a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a40a:	b27f      	sxtb	r7, r7
 801a40c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a410:	4629      	mov	r1, r5
 801a412:	4620      	mov	r0, r4
 801a414:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a418:	431f      	orrs	r7, r3
 801a41a:	f640 6313 	movw	r3, #3603	; 0xe13
 801a41e:	429a      	cmp	r2, r3
 801a420:	bf14      	ite	ne
 801a422:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a426:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a42a:	4642      	mov	r2, r8
 801a42c:	bf18      	it	ne
 801a42e:	b29b      	uxthne	r3, r3
 801a430:	f7ff fedf 	bl	801a1f2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a434:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a438:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a43c:	7a83      	ldrb	r3, [r0, #10]
 801a43e:	4313      	orrs	r3, r2
 801a440:	1aff      	subs	r7, r7, r3
 801a442:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a446:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a44a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a44e:	f7ff fe65 	bl	801a11c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a452:	1b80      	subs	r0, r0, r6
 801a454:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a458:	e735      	b.n	801a2c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a45a:	2300      	movs	r3, #0
 801a45c:	e7c1      	b.n	801a3e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a45e:	bf00      	nop
 801a460:	3fc00079 	.word	0x3fc00079

0801a464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a464:	3a01      	subs	r2, #1
 801a466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a46a:	b292      	uxth	r2, r2
 801a46c:	460c      	mov	r4, r1
 801a46e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a472:	42b2      	cmp	r2, r6
 801a474:	d018      	beq.n	801a4a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a476:	8b01      	ldrh	r1, [r0, #24]
 801a478:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a47c:	4291      	cmp	r1, r2
 801a47e:	d805      	bhi.n	801a48c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a480:	4b13      	ldr	r3, [pc, #76]	; (801a4d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a482:	21d3      	movs	r1, #211	; 0xd3
 801a484:	4a13      	ldr	r2, [pc, #76]	; (801a4d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a486:	4814      	ldr	r0, [pc, #80]	; (801a4d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a488:	f00a fd26 	bl	8024ed8 <__assert_func>
 801a48c:	8ac1      	ldrh	r1, [r0, #22]
 801a48e:	4411      	add	r1, r2
 801a490:	3a01      	subs	r2, #1
 801a492:	f001 0101 	and.w	r1, r1, #1
 801a496:	b292      	uxth	r2, r2
 801a498:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a49c:	8a49      	ldrh	r1, [r1, #18]
 801a49e:	428d      	cmp	r5, r1
 801a4a0:	d0e7      	beq.n	801a472 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a4a2:	2000      	movs	r0, #0
 801a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4a8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a4ac:	2600      	movs	r6, #0
 801a4ae:	f100 051a 	add.w	r5, r0, #26
 801a4b2:	441f      	add	r7, r3
 801a4b4:	b2b1      	uxth	r1, r6
 801a4b6:	42b9      	cmp	r1, r7
 801a4b8:	da08      	bge.n	801a4cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a4ba:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a4be:	4628      	mov	r0, r5
 801a4c0:	f7ff feda 	bl	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a4c4:	3601      	adds	r6, #1
 801a4c6:	4540      	cmp	r0, r8
 801a4c8:	d0f4      	beq.n	801a4b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a4ca:	e7ea      	b.n	801a4a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a4cc:	2001      	movs	r0, #1
 801a4ce:	e7e9      	b.n	801a4a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a4d0:	08028bb5 	.word	0x08028bb5
 801a4d4:	08029144 	.word	0x08029144
 801a4d8:	08028bc3 	.word	0x08028bc3

0801a4dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a4dc:	b538      	push	{r3, r4, r5, lr}
 801a4de:	8ac3      	ldrh	r3, [r0, #22]
 801a4e0:	428b      	cmp	r3, r1
 801a4e2:	d205      	bcs.n	801a4f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a4e4:	4b08      	ldr	r3, [pc, #32]	; (801a508 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a4e6:	21d8      	movs	r1, #216	; 0xd8
 801a4e8:	4a08      	ldr	r2, [pc, #32]	; (801a50c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a4ea:	4809      	ldr	r0, [pc, #36]	; (801a510 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a4ec:	f00a fcf4 	bl	8024ed8 <__assert_func>
 801a4f0:	8a82      	ldrh	r2, [r0, #20]
 801a4f2:	250a      	movs	r5, #10
 801a4f4:	1a5b      	subs	r3, r3, r1
 801a4f6:	440a      	add	r2, r1
 801a4f8:	82c3      	strh	r3, [r0, #22]
 801a4fa:	fbb2 f4f5 	udiv	r4, r2, r5
 801a4fe:	fb05 2214 	mls	r2, r5, r4, r2
 801a502:	8282      	strh	r2, [r0, #20]
 801a504:	bd38      	pop	{r3, r4, r5, pc}
 801a506:	bf00      	nop
 801a508:	08028ba9 	.word	0x08028ba9
 801a50c:	08028f60 	.word	0x08028f60
 801a510:	08028bc3 	.word	0x08028bc3

0801a514 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801a514:	b538      	push	{r3, r4, r5, lr}
 801a516:	8ac3      	ldrh	r3, [r0, #22]
 801a518:	2b09      	cmp	r3, #9
 801a51a:	d905      	bls.n	801a528 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801a51c:	4b08      	ldr	r3, [pc, #32]	; (801a540 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801a51e:	21f7      	movs	r1, #247	; 0xf7
 801a520:	4a08      	ldr	r2, [pc, #32]	; (801a544 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801a522:	4809      	ldr	r0, [pc, #36]	; (801a548 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801a524:	f00a fcd8 	bl	8024ed8 <__assert_func>
 801a528:	8a82      	ldrh	r2, [r0, #20]
 801a52a:	250a      	movs	r5, #10
 801a52c:	441a      	add	r2, r3
 801a52e:	3301      	adds	r3, #1
 801a530:	fbb2 f4f5 	udiv	r4, r2, r5
 801a534:	fb05 2214 	mls	r2, r5, r4, r2
 801a538:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801a53c:	82c3      	strh	r3, [r0, #22]
 801a53e:	bd38      	pop	{r3, r4, r5, pc}
 801a540:	08028b9d 	.word	0x08028b9d
 801a544:	08028eb1 	.word	0x08028eb1
 801a548:	08028bc3 	.word	0x08028bc3

0801a54c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a54c:	b538      	push	{r3, r4, r5, lr}
 801a54e:	4604      	mov	r4, r0
 801a550:	f100 051a 	add.w	r5, r0, #26
 801a554:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a556:	2b0a      	cmp	r3, #10
 801a558:	d01c      	beq.n	801a594 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a55a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801a55c:	b962      	cbnz	r2, 801a578 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a55e:	f104 051a 	add.w	r5, r4, #26
 801a562:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a564:	2b0a      	cmp	r3, #10
 801a566:	d015      	beq.n	801a594 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a568:	4620      	mov	r0, r4
 801a56a:	f7ff fdf6 	bl	801a15a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a56e:	4601      	mov	r1, r0
 801a570:	4628      	mov	r0, r5
 801a572:	f7ff ffcf 	bl	801a514 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a576:	e7f4      	b.n	801a562 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801a578:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a57a:	3a01      	subs	r2, #1
 801a57c:	4628      	mov	r0, r5
 801a57e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801a582:	3301      	adds	r3, #1
 801a584:	f003 0301 	and.w	r3, r3, #1
 801a588:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801a58a:	8722      	strh	r2, [r4, #56]	; 0x38
 801a58c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a58e:	f7ff ffc1 	bl	801a514 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a592:	e7df      	b.n	801a554 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801a594:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a598 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801a598:	2300      	movs	r3, #0
 801a59a:	b510      	push	{r4, lr}
 801a59c:	6043      	str	r3, [r0, #4]
 801a59e:	4604      	mov	r4, r0
 801a5a0:	60c3      	str	r3, [r0, #12]
 801a5a2:	7403      	strb	r3, [r0, #16]
 801a5a4:	8603      	strh	r3, [r0, #48]	; 0x30
 801a5a6:	8303      	strh	r3, [r0, #24]
 801a5a8:	8703      	strh	r3, [r0, #56]	; 0x38
 801a5aa:	f7ff ffcf 	bl	801a54c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a5ae:	4a0a      	ldr	r2, [pc, #40]	; (801a5d8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801a5b0:	6813      	ldr	r3, [r2, #0]
 801a5b2:	4611      	mov	r1, r2
 801a5b4:	b913      	cbnz	r3, 801a5bc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801a5b6:	6852      	ldr	r2, [r2, #4]
 801a5b8:	07d0      	lsls	r0, r2, #31
 801a5ba:	d50b      	bpl.n	801a5d4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801a5bc:	6849      	ldr	r1, [r1, #4]
 801a5be:	104a      	asrs	r2, r1, #1
 801a5c0:	07c9      	lsls	r1, r1, #31
 801a5c2:	eb04 0002 	add.w	r0, r4, r2
 801a5c6:	bf48      	it	mi
 801a5c8:	58a2      	ldrmi	r2, [r4, r2]
 801a5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5ce:	bf48      	it	mi
 801a5d0:	58d3      	ldrmi	r3, [r2, r3]
 801a5d2:	4718      	bx	r3
 801a5d4:	bd10      	pop	{r4, pc}
 801a5d6:	bf00      	nop
 801a5d8:	20008dd4 	.word	0x20008dd4

0801a5dc <_ZN8touchgfx12TextProviderC1Ev>:
 801a5dc:	2300      	movs	r3, #0
 801a5de:	2201      	movs	r2, #1
 801a5e0:	b510      	push	{r4, lr}
 801a5e2:	4604      	mov	r4, r0
 801a5e4:	60c3      	str	r3, [r0, #12]
 801a5e6:	7403      	strb	r3, [r0, #16]
 801a5e8:	82c3      	strh	r3, [r0, #22]
 801a5ea:	8303      	strh	r3, [r0, #24]
 801a5ec:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a5ee:	8603      	strh	r3, [r0, #48]	; 0x30
 801a5f0:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a5f2:	8703      	strh	r3, [r0, #56]	; 0x38
 801a5f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a5f6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a5fa:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a5fe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a602:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a606:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a60a:	e9c0 3300 	strd	r3, r3, [r0]
 801a60e:	f7ff ffc3 	bl	801a598 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a612:	4620      	mov	r0, r4
 801a614:	bd10      	pop	{r4, pc}

0801a616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a616:	b410      	push	{r4}
 801a618:	6082      	str	r2, [r0, #8]
 801a61a:	6001      	str	r1, [r0, #0]
 801a61c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a622:	f7ff bfb9 	b.w	801a598 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801a628 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801a628:	b508      	push	{r3, lr}
 801a62a:	88c2      	ldrh	r2, [r0, #6]
 801a62c:	440a      	add	r2, r1
 801a62e:	2a02      	cmp	r2, #2
 801a630:	dd05      	ble.n	801a63e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801a632:	4b06      	ldr	r3, [pc, #24]	; (801a64c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801a634:	21ec      	movs	r1, #236	; 0xec
 801a636:	4a06      	ldr	r2, [pc, #24]	; (801a650 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801a638:	4806      	ldr	r0, [pc, #24]	; (801a654 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801a63a:	f00a fc4d 	bl	8024ed8 <__assert_func>
 801a63e:	8883      	ldrh	r3, [r0, #4]
 801a640:	80c2      	strh	r2, [r0, #6]
 801a642:	1a59      	subs	r1, r3, r1
 801a644:	f001 0101 	and.w	r1, r1, #1
 801a648:	8081      	strh	r1, [r0, #4]
 801a64a:	bd08      	pop	{r3, pc}
 801a64c:	08028bef 	.word	0x08028bef
 801a650:	080290bd 	.word	0x080290bd
 801a654:	08028bc3 	.word	0x08028bc3

0801a658 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801a658:	b508      	push	{r3, lr}
 801a65a:	88c3      	ldrh	r3, [r0, #6]
 801a65c:	428b      	cmp	r3, r1
 801a65e:	d805      	bhi.n	801a66c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801a660:	4b06      	ldr	r3, [pc, #24]	; (801a67c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801a662:	21fd      	movs	r1, #253	; 0xfd
 801a664:	4a06      	ldr	r2, [pc, #24]	; (801a680 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801a666:	4807      	ldr	r0, [pc, #28]	; (801a684 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801a668:	f00a fc36 	bl	8024ed8 <__assert_func>
 801a66c:	8883      	ldrh	r3, [r0, #4]
 801a66e:	4419      	add	r1, r3
 801a670:	f001 0101 	and.w	r1, r1, #1
 801a674:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a678:	bd08      	pop	{r3, pc}
 801a67a:	bf00      	nop
 801a67c:	08028bb5 	.word	0x08028bb5
 801a680:	08029215 	.word	0x08029215
 801a684:	08028bc3 	.word	0x08028bc3

0801a688 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a688:	b570      	push	{r4, r5, r6, lr}
 801a68a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a68c:	4604      	mov	r4, r0
 801a68e:	b92a      	cbnz	r2, 801a69c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a690:	4b12      	ldr	r3, [pc, #72]	; (801a6dc <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801a692:	21de      	movs	r1, #222	; 0xde
 801a694:	4a12      	ldr	r2, [pc, #72]	; (801a6e0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a696:	4813      	ldr	r0, [pc, #76]	; (801a6e4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a698:	f00a fc1e 	bl	8024ed8 <__assert_func>
 801a69c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a69e:	260a      	movs	r6, #10
 801a6a0:	3a01      	subs	r2, #1
 801a6a2:	3412      	adds	r4, #18
 801a6a4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	8b4d      	ldrh	r5, [r1, #26]
 801a6ac:	8602      	strh	r2, [r0, #48]	; 0x30
 801a6ae:	fbb3 f1f6 	udiv	r1, r3, r6
 801a6b2:	fb06 3311 	mls	r3, r6, r1, r3
 801a6b6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a6b8:	f7ff ff48 	bl	801a54c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a6bc:	88e3      	ldrh	r3, [r4, #6]
 801a6be:	2101      	movs	r1, #1
 801a6c0:	2b02      	cmp	r3, #2
 801a6c2:	bf04      	itt	eq
 801a6c4:	2301      	moveq	r3, #1
 801a6c6:	80e3      	strheq	r3, [r4, #6]
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	f7ff ffad 	bl	801a628 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	462a      	mov	r2, r5
 801a6d2:	2100      	movs	r1, #0
 801a6d4:	f7ff ffc0 	bl	801a658 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a6d8:	4628      	mov	r0, r5
 801a6da:	bd70      	pop	{r4, r5, r6, pc}
 801a6dc:	08028b94 	.word	0x08028b94
 801a6e0:	08028e06 	.word	0x08028e06
 801a6e4:	08028bc3 	.word	0x08028bc3

0801a6e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a6e8:	428a      	cmp	r2, r1
 801a6ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ee:	4604      	mov	r4, r0
 801a6f0:	460e      	mov	r6, r1
 801a6f2:	4615      	mov	r5, r2
 801a6f4:	469a      	mov	sl, r3
 801a6f6:	d92b      	bls.n	801a750 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801a6f8:	1a57      	subs	r7, r2, r1
 801a6fa:	f04f 0800 	mov.w	r8, #0
 801a6fe:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801a702:	f04f 0b0a 	mov.w	fp, #10
 801a706:	b2bf      	uxth	r7, r7
 801a708:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a70a:	b92b      	cbnz	r3, 801a718 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801a70c:	4b24      	ldr	r3, [pc, #144]	; (801a7a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801a70e:	21e6      	movs	r1, #230	; 0xe6
 801a710:	4a24      	ldr	r2, [pc, #144]	; (801a7a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801a712:	4825      	ldr	r0, [pc, #148]	; (801a7a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801a714:	f00a fbe0 	bl	8024ed8 <__assert_func>
 801a718:	3b01      	subs	r3, #1
 801a71a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a71c:	2101      	movs	r1, #1
 801a71e:	4648      	mov	r0, r9
 801a720:	b29b      	uxth	r3, r3
 801a722:	f108 0801 	add.w	r8, r8, #1
 801a726:	441a      	add	r2, r3
 801a728:	8623      	strh	r3, [r4, #48]	; 0x30
 801a72a:	fbb2 f3fb 	udiv	r3, r2, fp
 801a72e:	fb0b 2313 	mls	r3, fp, r3, r2
 801a732:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a736:	8b5a      	ldrh	r2, [r3, #26]
 801a738:	9201      	str	r2, [sp, #4]
 801a73a:	f7ff ff75 	bl	801a628 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a73e:	9a01      	ldr	r2, [sp, #4]
 801a740:	2100      	movs	r1, #0
 801a742:	4648      	mov	r0, r9
 801a744:	f7ff ff88 	bl	801a658 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a748:	fa1f f388 	uxth.w	r3, r8
 801a74c:	429f      	cmp	r7, r3
 801a74e:	d8db      	bhi.n	801a708 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801a750:	f104 071a 	add.w	r7, r4, #26
 801a754:	4631      	mov	r1, r6
 801a756:	260a      	movs	r6, #10
 801a758:	4638      	mov	r0, r7
 801a75a:	f7ff febf 	bl	801a4dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a75e:	b1c5      	cbz	r5, 801a792 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a760:	3d01      	subs	r5, #1
 801a762:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a764:	b2ad      	uxth	r5, r5
 801a766:	2b09      	cmp	r3, #9
 801a768:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801a76c:	d903      	bls.n	801a776 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801a76e:	4b0f      	ldr	r3, [pc, #60]	; (801a7ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801a770:	21ec      	movs	r1, #236	; 0xec
 801a772:	4a0f      	ldr	r2, [pc, #60]	; (801a7b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801a774:	e7cd      	b.n	801a712 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801a776:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801a778:	3301      	adds	r3, #1
 801a77a:	3109      	adds	r1, #9
 801a77c:	8623      	strh	r3, [r4, #48]	; 0x30
 801a77e:	fbb1 f0f6 	udiv	r0, r1, r6
 801a782:	fb06 1110 	mls	r1, r6, r0, r1
 801a786:	4638      	mov	r0, r7
 801a788:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801a78a:	2100      	movs	r1, #0
 801a78c:	f7ff fd5a 	bl	801a244 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a790:	e7e5      	b.n	801a75e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801a792:	4620      	mov	r0, r4
 801a794:	b003      	add	sp, #12
 801a796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a79a:	f7ff bed7 	b.w	801a54c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a79e:	bf00      	nop
 801a7a0:	08028b94 	.word	0x08028b94
 801a7a4:	08028c8a 	.word	0x08028c8a
 801a7a8:	08028bc3 	.word	0x08028bc3
 801a7ac:	08028bef 	.word	0x08028bef
 801a7b0:	08028c02 	.word	0x08028c02

0801a7b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b8:	4605      	mov	r5, r0
 801a7ba:	4616      	mov	r6, r2
 801a7bc:	1c8c      	adds	r4, r1, #2
 801a7be:	8809      	ldrh	r1, [r1, #0]
 801a7c0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a7c4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a7c8:	42b3      	cmp	r3, r6
 801a7ca:	d124      	bne.n	801a816 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a7cc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a7d0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a7d4:	f001 070f 	and.w	r7, r1, #15
 801a7d8:	4652      	mov	r2, sl
 801a7da:	f8cd 8000 	str.w	r8, [sp]
 801a7de:	464b      	mov	r3, r9
 801a7e0:	4621      	mov	r1, r4
 801a7e2:	4628      	mov	r0, r5
 801a7e4:	f7ff fe3e 	bl	801a464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a7e8:	4683      	mov	fp, r0
 801a7ea:	b168      	cbz	r0, 801a808 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a7ec:	eb0a 0109 	add.w	r1, sl, r9
 801a7f0:	463a      	mov	r2, r7
 801a7f2:	4628      	mov	r0, r5
 801a7f4:	4441      	add	r1, r8
 801a7f6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a7fa:	4649      	mov	r1, r9
 801a7fc:	f7ff ff74 	bl	801a6e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a800:	4658      	mov	r0, fp
 801a802:	b003      	add	sp, #12
 801a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a808:	eb07 010a 	add.w	r1, r7, sl
 801a80c:	4449      	add	r1, r9
 801a80e:	4441      	add	r1, r8
 801a810:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a814:	e7d2      	b.n	801a7bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a816:	f04f 0b00 	mov.w	fp, #0
 801a81a:	e7f1      	b.n	801a800 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a81c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a820:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a822:	4604      	mov	r4, r0
 801a824:	260b      	movs	r6, #11
 801a826:	f100 091a 	add.w	r9, r0, #26
 801a82a:	886f      	ldrh	r7, [r5, #2]
 801a82c:	087f      	lsrs	r7, r7, #1
 801a82e:	3e01      	subs	r6, #1
 801a830:	d013      	beq.n	801a85a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a832:	2100      	movs	r1, #0
 801a834:	4648      	mov	r0, r9
 801a836:	f7ff fd1f 	bl	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a83a:	462a      	mov	r2, r5
 801a83c:	4680      	mov	r8, r0
 801a83e:	4603      	mov	r3, r0
 801a840:	4639      	mov	r1, r7
 801a842:	4620      	mov	r0, r4
 801a844:	f7ff fce0 	bl	801a208 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a848:	b138      	cbz	r0, 801a85a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a84a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a84e:	4642      	mov	r2, r8
 801a850:	4620      	mov	r0, r4
 801a852:	f7ff ffaf 	bl	801a7b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a856:	2800      	cmp	r0, #0
 801a858:	d1e9      	bne.n	801a82e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801a85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801a860:	4b1e      	ldr	r3, [pc, #120]	; (801a8dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801a862:	b570      	push	{r4, r5, r6, lr}
 801a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a868:	4604      	mov	r4, r0
 801a86a:	f003 0501 	and.w	r5, r3, #1
 801a86e:	b902      	cbnz	r2, 801a872 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801a870:	b165      	cbz	r5, 801a88c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801a872:	105b      	asrs	r3, r3, #1
 801a874:	f104 061a 	add.w	r6, r4, #26
 801a878:	18e0      	adds	r0, r4, r3
 801a87a:	b10d      	cbz	r5, 801a880 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801a87c:	58e3      	ldr	r3, [r4, r3]
 801a87e:	589a      	ldr	r2, [r3, r2]
 801a880:	4790      	blx	r2
 801a882:	2100      	movs	r1, #0
 801a884:	4602      	mov	r2, r0
 801a886:	4630      	mov	r0, r6
 801a888:	f7ff fcdc 	bl	801a244 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a88c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a88e:	b303      	cbz	r3, 801a8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a890:	f104 051a 	add.w	r5, r4, #26
 801a894:	2100      	movs	r1, #0
 801a896:	4628      	mov	r0, r5
 801a898:	f7ff fcee 	bl	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a89c:	b1c8      	cbz	r0, 801a8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f7ff ffbc 	bl	801a81c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801a8a4:	2101      	movs	r1, #1
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	f7ff fce6 	bl	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a8ac:	f640 133f 	movw	r3, #2367	; 0x93f
 801a8b0:	4606      	mov	r6, r0
 801a8b2:	4298      	cmp	r0, r3
 801a8b4:	d10d      	bne.n	801a8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a8b6:	2100      	movs	r1, #0
 801a8b8:	4628      	mov	r0, r5
 801a8ba:	f7ff fcdd 	bl	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a8be:	2101      	movs	r1, #1
 801a8c0:	4602      	mov	r2, r0
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f7ff fcbe 	bl	801a244 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a8c8:	4632      	mov	r2, r6
 801a8ca:	2100      	movs	r1, #0
 801a8cc:	4628      	mov	r0, r5
 801a8ce:	f7ff fcb9 	bl	801a244 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a8d2:	4620      	mov	r0, r4
 801a8d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8d8:	f7ff bed6 	b.w	801a688 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a8dc:	20008ddc 	.word	0x20008ddc

0801a8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8e2:	4617      	mov	r7, r2
 801a8e4:	461e      	mov	r6, r3
 801a8e6:	4605      	mov	r5, r0
 801a8e8:	f7ff ffba 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	4604      	mov	r4, r0
 801a8f0:	4601      	mov	r1, r0
 801a8f2:	4638      	mov	r0, r7
 801a8f4:	68db      	ldr	r3, [r3, #12]
 801a8f6:	4798      	blx	r3
 801a8f8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a8fc:	4602      	mov	r2, r0
 801a8fe:	6030      	str	r0, [r6, #0]
 801a900:	b29b      	uxth	r3, r3
 801a902:	2b7f      	cmp	r3, #127	; 0x7f
 801a904:	d813      	bhi.n	801a92e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a906:	4639      	mov	r1, r7
 801a908:	4628      	mov	r0, r5
 801a90a:	f7ff fccf 	bl	801a2ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a90e:	6030      	str	r0, [r6, #0]
 801a910:	6833      	ldr	r3, [r6, #0]
 801a912:	b143      	cbz	r3, 801a926 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a914:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a918:	7a9b      	ldrb	r3, [r3, #10]
 801a91a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a91e:	4313      	orrs	r3, r2
 801a920:	bf0c      	ite	eq
 801a922:	2301      	moveq	r3, #1
 801a924:	2300      	movne	r3, #0
 801a926:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a92a:	4620      	mov	r0, r4
 801a92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a92e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a932:	2b00      	cmp	r3, #0
 801a934:	d0ec      	beq.n	801a910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a936:	f640 1302 	movw	r3, #2306	; 0x902
 801a93a:	429c      	cmp	r4, r3
 801a93c:	d1e8      	bne.n	801a910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a93e:	4601      	mov	r1, r0
 801a940:	4628      	mov	r0, r5
 801a942:	f7ff fc32 	bl	801a1aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a946:	e7e2      	b.n	801a90e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a948 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a94c:	4617      	mov	r7, r2
 801a94e:	461e      	mov	r6, r3
 801a950:	4605      	mov	r5, r0
 801a952:	f7ff ff85 	bl	801a860 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	4604      	mov	r4, r0
 801a95a:	4601      	mov	r1, r0
 801a95c:	4638      	mov	r0, r7
 801a95e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a966:	47c0      	blx	r8
 801a968:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a96c:	4602      	mov	r2, r0
 801a96e:	6030      	str	r0, [r6, #0]
 801a970:	b29b      	uxth	r3, r3
 801a972:	2b7f      	cmp	r3, #127	; 0x7f
 801a974:	d814      	bhi.n	801a9a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a976:	4639      	mov	r1, r7
 801a978:	4628      	mov	r0, r5
 801a97a:	f7ff fc97 	bl	801a2ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a97e:	6030      	str	r0, [r6, #0]
 801a980:	6833      	ldr	r3, [r6, #0]
 801a982:	b143      	cbz	r3, 801a996 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a984:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a988:	7a9b      	ldrb	r3, [r3, #10]
 801a98a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a98e:	4313      	orrs	r3, r2
 801a990:	bf0c      	ite	eq
 801a992:	2301      	moveq	r3, #1
 801a994:	2300      	movne	r3, #0
 801a996:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a99a:	4620      	mov	r0, r4
 801a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9a0:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d0eb      	beq.n	801a980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a9a8:	f640 1302 	movw	r3, #2306	; 0x902
 801a9ac:	429c      	cmp	r4, r3
 801a9ae:	d1e7      	bne.n	801a980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a9b0:	4601      	mov	r1, r0
 801a9b2:	4628      	mov	r0, r5
 801a9b4:	f7ff fbf9 	bl	801a1aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a9b8:	e7e1      	b.n	801a97e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a9ba <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a9ba:	4602      	mov	r2, r0
 801a9bc:	b148      	cbz	r0, 801a9d2 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a9be:	2300      	movs	r3, #0
 801a9c0:	b298      	uxth	r0, r3
 801a9c2:	3301      	adds	r3, #1
 801a9c4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a9c8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a9cc:	2900      	cmp	r1, #0
 801a9ce:	d1f7      	bne.n	801a9c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a9d0:	4770      	bx	lr
 801a9d2:	4770      	bx	lr

0801a9d4 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a9d4:	b140      	cbz	r0, 801a9e8 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a9d6:	4602      	mov	r2, r0
 801a9d8:	1a13      	subs	r3, r2, r0
 801a9da:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	2900      	cmp	r1, #0
 801a9e2:	d1f9      	bne.n	801a9d8 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	4770      	bx	lr
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	e7fb      	b.n	801a9e4 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a9ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a9ec:	b530      	push	{r4, r5, lr}
 801a9ee:	4604      	mov	r4, r0
 801a9f0:	b159      	cbz	r1, 801aa0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a9f2:	b148      	cbz	r0, 801aa08 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	b298      	uxth	r0, r3
 801a9f8:	4282      	cmp	r2, r0
 801a9fa:	d905      	bls.n	801aa08 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a9fc:	5ccd      	ldrb	r5, [r1, r3]
 801a9fe:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801aa02:	3301      	adds	r3, #1
 801aa04:	2d00      	cmp	r5, #0
 801aa06:	d1f6      	bne.n	801a9f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801aa08:	bd30      	pop	{r4, r5, pc}
 801aa0a:	4608      	mov	r0, r1
 801aa0c:	e7fc      	b.n	801aa08 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801aa0e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801aa0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa10:	468c      	mov	ip, r1
 801aa12:	b08b      	sub	sp, #44	; 0x2c
 801aa14:	2100      	movs	r1, #0
 801aa16:	ae01      	add	r6, sp, #4
 801aa18:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801aa1c:	211f      	movs	r1, #31
 801aa1e:	fbb0 f7f3 	udiv	r7, r0, r3
 801aa22:	fb03 0517 	mls	r5, r3, r7, r0
 801aa26:	4638      	mov	r0, r7
 801aa28:	b2ec      	uxtb	r4, r5
 801aa2a:	2d09      	cmp	r5, #9
 801aa2c:	bfd4      	ite	le
 801aa2e:	3430      	addle	r4, #48	; 0x30
 801aa30:	3457      	addgt	r4, #87	; 0x57
 801aa32:	b2e4      	uxtb	r4, r4
 801aa34:	558c      	strb	r4, [r1, r6]
 801aa36:	1e4c      	subs	r4, r1, #1
 801aa38:	b92f      	cbnz	r7, 801aa46 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801aa3a:	4431      	add	r1, r6
 801aa3c:	4660      	mov	r0, ip
 801aa3e:	f7ff ffd5 	bl	801a9ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801aa42:	b00b      	add	sp, #44	; 0x2c
 801aa44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa46:	4621      	mov	r1, r4
 801aa48:	e7e9      	b.n	801aa1e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801aa4a <_ZN8touchgfx7Unicode4itoaElPtti>:
 801aa4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa4c:	4607      	mov	r7, r0
 801aa4e:	b08b      	sub	sp, #44	; 0x2c
 801aa50:	4608      	mov	r0, r1
 801aa52:	b341      	cbz	r1, 801aaa6 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801aa54:	1e99      	subs	r1, r3, #2
 801aa56:	290e      	cmp	r1, #14
 801aa58:	d825      	bhi.n	801aaa6 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801aa5a:	2100      	movs	r1, #0
 801aa5c:	463c      	mov	r4, r7
 801aa5e:	261f      	movs	r6, #31
 801aa60:	f10d 0c04 	add.w	ip, sp, #4
 801aa64:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801aa68:	1e71      	subs	r1, r6, #1
 801aa6a:	fb94 fef3 	sdiv	lr, r4, r3
 801aa6e:	fb03 441e 	mls	r4, r3, lr, r4
 801aa72:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801aa76:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801aa7a:	b2ec      	uxtb	r4, r5
 801aa7c:	2d09      	cmp	r5, #9
 801aa7e:	bfd4      	ite	le
 801aa80:	3430      	addle	r4, #48	; 0x30
 801aa82:	3457      	addgt	r4, #87	; 0x57
 801aa84:	b2e4      	uxtb	r4, r4
 801aa86:	f80c 4006 	strb.w	r4, [ip, r6]
 801aa8a:	4674      	mov	r4, lr
 801aa8c:	b96c      	cbnz	r4, 801aaaa <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801aa8e:	2f00      	cmp	r7, #0
 801aa90:	da05      	bge.n	801aa9e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801aa92:	ab0a      	add	r3, sp, #40	; 0x28
 801aa94:	4419      	add	r1, r3
 801aa96:	232d      	movs	r3, #45	; 0x2d
 801aa98:	f801 3c24 	strb.w	r3, [r1, #-36]
 801aa9c:	1eb1      	subs	r1, r6, #2
 801aa9e:	3101      	adds	r1, #1
 801aaa0:	4461      	add	r1, ip
 801aaa2:	f7ff ffa3 	bl	801a9ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801aaa6:	b00b      	add	sp, #44	; 0x2c
 801aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaaa:	460e      	mov	r6, r1
 801aaac:	e7dc      	b.n	801aa68 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801aaae <_ZN8touchgfx7Unicode4atoiEPKt>:
 801aaae:	b510      	push	{r4, lr}
 801aab0:	b158      	cbz	r0, 801aaca <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801aab2:	1e82      	subs	r2, r0, #2
 801aab4:	210a      	movs	r1, #10
 801aab6:	2000      	movs	r0, #0
 801aab8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801aabc:	3b30      	subs	r3, #48	; 0x30
 801aabe:	b29c      	uxth	r4, r3
 801aac0:	2c09      	cmp	r4, #9
 801aac2:	d802      	bhi.n	801aaca <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801aac4:	fb01 3000 	mla	r0, r1, r0, r3
 801aac8:	e7f6      	b.n	801aab8 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801aaca:	bd10      	pop	{r4, pc}

0801aacc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad0:	b085      	sub	sp, #20
 801aad2:	f8d0 8000 	ldr.w	r8, [r0]
 801aad6:	468a      	mov	sl, r1
 801aad8:	461c      	mov	r4, r3
 801aada:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801aade:	4681      	mov	r9, r0
 801aae0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801aae4:	4640      	mov	r0, r8
 801aae6:	9203      	str	r2, [sp, #12]
 801aae8:	9102      	str	r1, [sp, #8]
 801aaea:	9301      	str	r3, [sp, #4]
 801aaec:	f7ff ff65 	bl	801a9ba <_ZN8touchgfx7Unicode6strlenEPKt>
 801aaf0:	9a03      	ldr	r2, [sp, #12]
 801aaf2:	f1ba 0f00 	cmp.w	sl, #0
 801aaf6:	bf0c      	ite	eq
 801aaf8:	4684      	moveq	ip, r0
 801aafa:	f100 0c01 	addne.w	ip, r0, #1
 801aafe:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801ab02:	8812      	ldrh	r2, [r2, #0]
 801ab04:	fa1f fc8c 	uxth.w	ip, ip
 801ab08:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ab0a:	2a69      	cmp	r2, #105	; 0x69
 801ab0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ab0e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801ab10:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801ab14:	d004      	beq.n	801ab20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ab16:	d844      	bhi.n	801aba2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801ab18:	2a58      	cmp	r2, #88	; 0x58
 801ab1a:	d001      	beq.n	801ab20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ab1c:	2a64      	cmp	r2, #100	; 0x64
 801ab1e:	d14b      	bne.n	801abb8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801ab20:	b1a4      	cbz	r4, 801ab4c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801ab22:	b956      	cbnz	r6, 801ab3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801ab24:	2801      	cmp	r0, #1
 801ab26:	d108      	bne.n	801ab3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801ab28:	f8b8 2000 	ldrh.w	r2, [r8]
 801ab2c:	2a30      	cmp	r2, #48	; 0x30
 801ab2e:	bf02      	ittt	eq
 801ab30:	f108 0202 	addeq.w	r2, r8, #2
 801ab34:	4630      	moveq	r0, r6
 801ab36:	f8c9 2000 	streq.w	r2, [r9]
 801ab3a:	45b4      	cmp	ip, r6
 801ab3c:	da3e      	bge.n	801abbc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801ab3e:	b2b6      	uxth	r6, r6
 801ab40:	eba6 040c 	sub.w	r4, r6, ip
 801ab44:	46b4      	mov	ip, r6
 801ab46:	b2a4      	uxth	r4, r4
 801ab48:	f04f 0b00 	mov.w	fp, #0
 801ab4c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ab50:	3a01      	subs	r2, #1
 801ab52:	b169      	cbz	r1, 801ab70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801ab54:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ab56:	458c      	cmp	ip, r1
 801ab58:	da09      	bge.n	801ab6e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801ab5a:	eba1 010c 	sub.w	r1, r1, ip
 801ab5e:	b289      	uxth	r1, r1
 801ab60:	b933      	cbnz	r3, 801ab70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801ab62:	f1bb 0f00 	cmp.w	fp, #0
 801ab66:	d02b      	beq.n	801abc0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801ab68:	b350      	cbz	r0, 801abc0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801ab6a:	440c      	add	r4, r1
 801ab6c:	b2a4      	uxth	r4, r4
 801ab6e:	2100      	movs	r1, #0
 801ab70:	682b      	ldr	r3, [r5, #0]
 801ab72:	4293      	cmp	r3, r2
 801ab74:	da07      	bge.n	801ab86 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801ab76:	f1ba 0f00 	cmp.w	sl, #0
 801ab7a:	d004      	beq.n	801ab86 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801ab7c:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801ab80:	682b      	ldr	r3, [r5, #0]
 801ab82:	3301      	adds	r3, #1
 801ab84:	602b      	str	r3, [r5, #0]
 801ab86:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801ab8a:	b354      	cbz	r4, 801abe2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801ab8c:	682e      	ldr	r6, [r5, #0]
 801ab8e:	3c01      	subs	r4, #1
 801ab90:	42b2      	cmp	r2, r6
 801ab92:	b2a4      	uxth	r4, r4
 801ab94:	dd25      	ble.n	801abe2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801ab96:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801ab9a:	682b      	ldr	r3, [r5, #0]
 801ab9c:	3301      	adds	r3, #1
 801ab9e:	602b      	str	r3, [r5, #0]
 801aba0:	e7f3      	b.n	801ab8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801aba2:	2a73      	cmp	r2, #115	; 0x73
 801aba4:	d003      	beq.n	801abae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801aba6:	2a78      	cmp	r2, #120	; 0x78
 801aba8:	d0ba      	beq.n	801ab20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801abaa:	2a6f      	cmp	r2, #111	; 0x6f
 801abac:	e7b7      	b.n	801ab1e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801abae:	2c00      	cmp	r4, #0
 801abb0:	d0cc      	beq.n	801ab4c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801abb2:	42b0      	cmp	r0, r6
 801abb4:	dd00      	ble.n	801abb8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801abb6:	b2b0      	uxth	r0, r6
 801abb8:	2400      	movs	r4, #0
 801abba:	e7c7      	b.n	801ab4c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801abbc:	2400      	movs	r4, #0
 801abbe:	e7c3      	b.n	801ab48 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801abc0:	2900      	cmp	r1, #0
 801abc2:	d0d5      	beq.n	801ab70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801abc4:	f04f 0c20 	mov.w	ip, #32
 801abc8:	682e      	ldr	r6, [r5, #0]
 801abca:	2900      	cmp	r1, #0
 801abcc:	d0d0      	beq.n	801ab70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801abce:	3901      	subs	r1, #1
 801abd0:	4296      	cmp	r6, r2
 801abd2:	b289      	uxth	r1, r1
 801abd4:	dacb      	bge.n	801ab6e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801abd6:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801abda:	682b      	ldr	r3, [r5, #0]
 801abdc:	3301      	adds	r3, #1
 801abde:	602b      	str	r3, [r5, #0]
 801abe0:	e7f2      	b.n	801abc8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801abe2:	b198      	cbz	r0, 801ac0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801abe4:	f8d9 3000 	ldr.w	r3, [r9]
 801abe8:	881c      	ldrh	r4, [r3, #0]
 801abea:	b17c      	cbz	r4, 801ac0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801abec:	682c      	ldr	r4, [r5, #0]
 801abee:	3801      	subs	r0, #1
 801abf0:	42a2      	cmp	r2, r4
 801abf2:	b280      	uxth	r0, r0
 801abf4:	dd0a      	ble.n	801ac0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801abf6:	1c9c      	adds	r4, r3, #2
 801abf8:	f8c9 4000 	str.w	r4, [r9]
 801abfc:	881c      	ldrh	r4, [r3, #0]
 801abfe:	682b      	ldr	r3, [r5, #0]
 801ac00:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801ac04:	682b      	ldr	r3, [r5, #0]
 801ac06:	3301      	adds	r3, #1
 801ac08:	602b      	str	r3, [r5, #0]
 801ac0a:	e7ea      	b.n	801abe2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801ac0c:	2620      	movs	r6, #32
 801ac0e:	b151      	cbz	r1, 801ac26 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801ac10:	6828      	ldr	r0, [r5, #0]
 801ac12:	3901      	subs	r1, #1
 801ac14:	4282      	cmp	r2, r0
 801ac16:	b289      	uxth	r1, r1
 801ac18:	dd05      	ble.n	801ac26 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801ac1a:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801ac1e:	682b      	ldr	r3, [r5, #0]
 801ac20:	3301      	adds	r3, #1
 801ac22:	602b      	str	r3, [r5, #0]
 801ac24:	e7f3      	b.n	801ac0e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801ac26:	b005      	add	sp, #20
 801ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ac32:	4604      	mov	r4, r0
 801ac34:	f04f 0801 	mov.w	r8, #1
 801ac38:	2000      	movs	r0, #0
 801ac3a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801ac3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801ac42:	8008      	strh	r0, [r1, #0]
 801ac44:	7010      	strb	r0, [r2, #0]
 801ac46:	7018      	strb	r0, [r3, #0]
 801ac48:	f88c 0000 	strb.w	r0, [ip]
 801ac4c:	f88e 0000 	strb.w	r0, [lr]
 801ac50:	7030      	strb	r0, [r6, #0]
 801ac52:	6820      	ldr	r0, [r4, #0]
 801ac54:	8800      	ldrh	r0, [r0, #0]
 801ac56:	b190      	cbz	r0, 801ac7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801ac58:	282b      	cmp	r0, #43	; 0x2b
 801ac5a:	d001      	beq.n	801ac60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801ac5c:	2820      	cmp	r0, #32
 801ac5e:	d104      	bne.n	801ac6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801ac60:	8008      	strh	r0, [r1, #0]
 801ac62:	6820      	ldr	r0, [r4, #0]
 801ac64:	3002      	adds	r0, #2
 801ac66:	6020      	str	r0, [r4, #0]
 801ac68:	e7f3      	b.n	801ac52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801ac6a:	282d      	cmp	r0, #45	; 0x2d
 801ac6c:	d102      	bne.n	801ac74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801ac6e:	f882 8000 	strb.w	r8, [r2]
 801ac72:	e7f6      	b.n	801ac62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ac74:	2823      	cmp	r0, #35	; 0x23
 801ac76:	d102      	bne.n	801ac7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801ac78:	f883 8000 	strb.w	r8, [r3]
 801ac7c:	e7f1      	b.n	801ac62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ac7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ac82:	2b09      	cmp	r3, #9
 801ac84:	d901      	bls.n	801ac8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801ac86:	282a      	cmp	r0, #42	; 0x2a
 801ac88:	d114      	bne.n	801acb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801ac8a:	2201      	movs	r2, #1
 801ac8c:	f88e 2000 	strb.w	r2, [lr]
 801ac90:	6823      	ldr	r3, [r4, #0]
 801ac92:	8819      	ldrh	r1, [r3, #0]
 801ac94:	2930      	cmp	r1, #48	; 0x30
 801ac96:	bf02      	ittt	eq
 801ac98:	3302      	addeq	r3, #2
 801ac9a:	6023      	streq	r3, [r4, #0]
 801ac9c:	f88c 2000 	strbeq.w	r2, [ip]
 801aca0:	6820      	ldr	r0, [r4, #0]
 801aca2:	8803      	ldrh	r3, [r0, #0]
 801aca4:	2b2a      	cmp	r3, #42	; 0x2a
 801aca6:	d11e      	bne.n	801ace6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801aca8:	f04f 33ff 	mov.w	r3, #4294967295
 801acac:	603b      	str	r3, [r7, #0]
 801acae:	6823      	ldr	r3, [r4, #0]
 801acb0:	3302      	adds	r3, #2
 801acb2:	6023      	str	r3, [r4, #0]
 801acb4:	6823      	ldr	r3, [r4, #0]
 801acb6:	881b      	ldrh	r3, [r3, #0]
 801acb8:	2b2e      	cmp	r3, #46	; 0x2e
 801acba:	d112      	bne.n	801ace2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801acbc:	2301      	movs	r3, #1
 801acbe:	7033      	strb	r3, [r6, #0]
 801acc0:	6823      	ldr	r3, [r4, #0]
 801acc2:	1c98      	adds	r0, r3, #2
 801acc4:	6020      	str	r0, [r4, #0]
 801acc6:	885b      	ldrh	r3, [r3, #2]
 801acc8:	2b2a      	cmp	r3, #42	; 0x2a
 801acca:	d117      	bne.n	801acfc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801accc:	f04f 33ff 	mov.w	r3, #4294967295
 801acd0:	602b      	str	r3, [r5, #0]
 801acd2:	6823      	ldr	r3, [r4, #0]
 801acd4:	3302      	adds	r3, #2
 801acd6:	6023      	str	r3, [r4, #0]
 801acd8:	682b      	ldr	r3, [r5, #0]
 801acda:	2b06      	cmp	r3, #6
 801acdc:	bfa8      	it	ge
 801acde:	2306      	movge	r3, #6
 801ace0:	602b      	str	r3, [r5, #0]
 801ace2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ace6:	f7ff fee2 	bl	801aaae <_ZN8touchgfx7Unicode4atoiEPKt>
 801acea:	6038      	str	r0, [r7, #0]
 801acec:	6823      	ldr	r3, [r4, #0]
 801acee:	881a      	ldrh	r2, [r3, #0]
 801acf0:	3a30      	subs	r2, #48	; 0x30
 801acf2:	2a09      	cmp	r2, #9
 801acf4:	d8de      	bhi.n	801acb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801acf6:	3302      	adds	r3, #2
 801acf8:	6023      	str	r3, [r4, #0]
 801acfa:	e7f7      	b.n	801acec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801acfc:	f7ff fed7 	bl	801aaae <_ZN8touchgfx7Unicode4atoiEPKt>
 801ad00:	6028      	str	r0, [r5, #0]
 801ad02:	6823      	ldr	r3, [r4, #0]
 801ad04:	881a      	ldrh	r2, [r3, #0]
 801ad06:	3a30      	subs	r2, #48	; 0x30
 801ad08:	2a09      	cmp	r2, #9
 801ad0a:	d8e5      	bhi.n	801acd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801ad0c:	3302      	adds	r3, #2
 801ad0e:	6023      	str	r3, [r4, #0]
 801ad10:	e7f7      	b.n	801ad02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801ad12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801ad12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad16:	b0a2      	sub	sp, #136	; 0x88
 801ad18:	2500      	movs	r5, #0
 801ad1a:	4606      	mov	r6, r0
 801ad1c:	460f      	mov	r7, r1
 801ad1e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ad22:	9209      	str	r2, [sp, #36]	; 0x24
 801ad24:	4629      	mov	r1, r5
 801ad26:	2242      	movs	r2, #66	; 0x42
 801ad28:	4640      	mov	r0, r8
 801ad2a:	461c      	mov	r4, r3
 801ad2c:	950d      	str	r5, [sp, #52]	; 0x34
 801ad2e:	f7fe fe26 	bl	801997e <_ZN8touchgfx6memsetEPvhm>
 801ad32:	b30e      	cbz	r6, 801ad78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ad34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad36:	b1f3      	cbz	r3, 801ad76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801ad38:	f107 3aff 	add.w	sl, r7, #4294967295
 801ad3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad40:	8812      	ldrh	r2, [r2, #0]
 801ad42:	2a00      	cmp	r2, #0
 801ad44:	f000 80b3 	beq.w	801aeae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ad48:	459a      	cmp	sl, r3
 801ad4a:	f340 80b0 	ble.w	801aeae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ad4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ad52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad54:	f8b9 2000 	ldrh.w	r2, [r9]
 801ad58:	2a00      	cmp	r2, #0
 801ad5a:	d0ef      	beq.n	801ad3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ad5c:	2a25      	cmp	r2, #37	; 0x25
 801ad5e:	f000 80aa 	beq.w	801aeb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801ad62:	459a      	cmp	sl, r3
 801ad64:	ddea      	ble.n	801ad3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ad66:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ad6a:	f109 0202 	add.w	r2, r9, #2
 801ad6e:	3301      	adds	r3, #1
 801ad70:	9209      	str	r2, [sp, #36]	; 0x24
 801ad72:	930d      	str	r3, [sp, #52]	; 0x34
 801ad74:	e7eb      	b.n	801ad4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801ad76:	8033      	strh	r3, [r6, #0]
 801ad78:	4630      	mov	r0, r6
 801ad7a:	b022      	add	sp, #136	; 0x88
 801ad7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad80:	3b63      	subs	r3, #99	; 0x63
 801ad82:	2b01      	cmp	r3, #1
 801ad84:	f200 80df 	bhi.w	801af46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ad88:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ad8c:	8813      	ldrh	r3, [r2, #0]
 801ad8e:	2b69      	cmp	r3, #105	; 0x69
 801ad90:	d058      	beq.n	801ae44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ad92:	d81b      	bhi.n	801adcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801ad94:	2b63      	cmp	r3, #99	; 0x63
 801ad96:	d02e      	beq.n	801adf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801ad98:	2b64      	cmp	r3, #100	; 0x64
 801ad9a:	d053      	beq.n	801ae44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ad9c:	2b58      	cmp	r3, #88	; 0x58
 801ad9e:	d06f      	beq.n	801ae80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801ada0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801ada4:	46a1      	mov	r9, r4
 801ada6:	e02d      	b.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ada8:	2b73      	cmp	r3, #115	; 0x73
 801adaa:	d0ed      	beq.n	801ad88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801adac:	d803      	bhi.n	801adb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801adae:	2b6f      	cmp	r3, #111	; 0x6f
 801adb0:	f040 80c9 	bne.w	801af46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801adb4:	e7e8      	b.n	801ad88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801adb6:	2b75      	cmp	r3, #117	; 0x75
 801adb8:	d0e6      	beq.n	801ad88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801adba:	2b78      	cmp	r3, #120	; 0x78
 801adbc:	e7f8      	b.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801adbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801adc0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801adc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adc6:	3302      	adds	r3, #2
 801adc8:	9309      	str	r3, [sp, #36]	; 0x24
 801adca:	e7b7      	b.n	801ad3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801adcc:	2b73      	cmp	r3, #115	; 0x73
 801adce:	d034      	beq.n	801ae3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801add0:	d807      	bhi.n	801ade2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801add2:	2b6f      	cmp	r3, #111	; 0x6f
 801add4:	d1e4      	bne.n	801ada0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801add6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801add8:	f104 0904 	add.w	r9, r4, #4
 801addc:	2308      	movs	r3, #8
 801adde:	1aba      	subs	r2, r7, r2
 801ade0:	e048      	b.n	801ae74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ade2:	2b75      	cmp	r3, #117	; 0x75
 801ade4:	d041      	beq.n	801ae6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801ade6:	2b78      	cmp	r3, #120	; 0x78
 801ade8:	d1da      	bne.n	801ada0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801adea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801adec:	f104 0904 	add.w	r9, r4, #4
 801adf0:	2310      	movs	r3, #16
 801adf2:	1aba      	subs	r2, r7, r2
 801adf4:	e03e      	b.n	801ae74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801adf6:	7823      	ldrb	r3, [r4, #0]
 801adf8:	f104 0904 	add.w	r9, r4, #4
 801adfc:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801ae00:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ae04:	aa0d      	add	r2, sp, #52	; 0x34
 801ae06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ae0a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ae0e:	a810      	add	r0, sp, #64	; 0x40
 801ae10:	9205      	str	r2, [sp, #20]
 801ae12:	464c      	mov	r4, r9
 801ae14:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801ae18:	9204      	str	r2, [sp, #16]
 801ae1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae1c:	9203      	str	r2, [sp, #12]
 801ae1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ae22:	9202      	str	r2, [sp, #8]
 801ae24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae26:	9201      	str	r2, [sp, #4]
 801ae28:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801ae2c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801ae30:	9200      	str	r2, [sp, #0]
 801ae32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae34:	f7ff fe4a 	bl	801aacc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ae38:	e7c4      	b.n	801adc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801ae3a:	f104 0904 	add.w	r9, r4, #4
 801ae3e:	6823      	ldr	r3, [r4, #0]
 801ae40:	9310      	str	r3, [sp, #64]	; 0x40
 801ae42:	e7df      	b.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ae44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae46:	230a      	movs	r3, #10
 801ae48:	4641      	mov	r1, r8
 801ae4a:	6820      	ldr	r0, [r4, #0]
 801ae4c:	1aba      	subs	r2, r7, r2
 801ae4e:	f104 0904 	add.w	r9, r4, #4
 801ae52:	b292      	uxth	r2, r2
 801ae54:	f7ff fdf9 	bl	801aa4a <_ZN8touchgfx7Unicode4itoaElPtti>
 801ae58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ae5c:	2b2d      	cmp	r3, #45	; 0x2d
 801ae5e:	d1d1      	bne.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ae60:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ae64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae66:	3302      	adds	r3, #2
 801ae68:	e7ea      	b.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801ae6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae6c:	f104 0904 	add.w	r9, r4, #4
 801ae70:	230a      	movs	r3, #10
 801ae72:	1aba      	subs	r2, r7, r2
 801ae74:	b292      	uxth	r2, r2
 801ae76:	4641      	mov	r1, r8
 801ae78:	6820      	ldr	r0, [r4, #0]
 801ae7a:	f7ff fdc8 	bl	801aa0e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ae7e:	e7c1      	b.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ae80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae82:	2310      	movs	r3, #16
 801ae84:	4641      	mov	r1, r8
 801ae86:	6820      	ldr	r0, [r4, #0]
 801ae88:	1aba      	subs	r2, r7, r2
 801ae8a:	f104 0904 	add.w	r9, r4, #4
 801ae8e:	b292      	uxth	r2, r2
 801ae90:	f7ff fdbd 	bl	801aa0e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ae94:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ae98:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d0b1      	beq.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801aea0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801aea4:	2919      	cmp	r1, #25
 801aea6:	d8f7      	bhi.n	801ae98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801aea8:	3b20      	subs	r3, #32
 801aeaa:	8013      	strh	r3, [r2, #0]
 801aeac:	e7f4      	b.n	801ae98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801aeae:	2200      	movs	r2, #0
 801aeb0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801aeb4:	e760      	b.n	801ad78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801aeb6:	459a      	cmp	sl, r3
 801aeb8:	f77f af40 	ble.w	801ad3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801aebc:	f109 0302 	add.w	r3, r9, #2
 801aec0:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801aec4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801aec8:	a809      	add	r0, sp, #36	; 0x24
 801aeca:	9309      	str	r3, [sp, #36]	; 0x24
 801aecc:	ab0f      	add	r3, sp, #60	; 0x3c
 801aece:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801aed2:	9304      	str	r3, [sp, #16]
 801aed4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801aed8:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801aedc:	9303      	str	r3, [sp, #12]
 801aede:	ab0e      	add	r3, sp, #56	; 0x38
 801aee0:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801aee4:	9302      	str	r3, [sp, #8]
 801aee6:	ab0c      	add	r3, sp, #48	; 0x30
 801aee8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801aeec:	9301      	str	r3, [sp, #4]
 801aeee:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801aef2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801aef6:	9300      	str	r3, [sp, #0]
 801aef8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801aefc:	950e      	str	r5, [sp, #56]	; 0x38
 801aefe:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801af02:	950f      	str	r5, [sp, #60]	; 0x3c
 801af04:	f7ff fe92 	bl	801ac2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801af08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	bfbf      	itttt	lt
 801af10:	6823      	ldrlt	r3, [r4, #0]
 801af12:	3404      	addlt	r4, #4
 801af14:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801af18:	930e      	strlt	r3, [sp, #56]	; 0x38
 801af1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	bfbf      	itttt	lt
 801af20:	6823      	ldrlt	r3, [r4, #0]
 801af22:	3404      	addlt	r4, #4
 801af24:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801af28:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801af2a:	8813      	ldrh	r3, [r2, #0]
 801af2c:	2b69      	cmp	r3, #105	; 0x69
 801af2e:	f43f af2b 	beq.w	801ad88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801af32:	f63f af39 	bhi.w	801ada8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801af36:	2b58      	cmp	r3, #88	; 0x58
 801af38:	f43f af26 	beq.w	801ad88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801af3c:	f63f af20 	bhi.w	801ad80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801af40:	2b25      	cmp	r3, #37	; 0x25
 801af42:	f43f af3c 	beq.w	801adbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801af46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801af4c:	f8b9 2000 	ldrh.w	r2, [r9]
 801af50:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801af54:	3301      	adds	r3, #1
 801af56:	930d      	str	r3, [sp, #52]	; 0x34
 801af58:	e734      	b.n	801adc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801af5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801af5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af5e:	4605      	mov	r5, r0
 801af60:	b0a1      	sub	sp, #132	; 0x84
 801af62:	4610      	mov	r0, r2
 801af64:	460e      	mov	r6, r1
 801af66:	4614      	mov	r4, r2
 801af68:	461f      	mov	r7, r3
 801af6a:	f7ff fd33 	bl	801a9d4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801af6e:	283f      	cmp	r0, #63	; 0x3f
 801af70:	d906      	bls.n	801af80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801af72:	4b0a      	ldr	r3, [pc, #40]	; (801af9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801af74:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801af78:	4a09      	ldr	r2, [pc, #36]	; (801afa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801af7a:	480a      	ldr	r0, [pc, #40]	; (801afa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801af7c:	f009 ffac 	bl	8024ed8 <__assert_func>
 801af80:	4621      	mov	r1, r4
 801af82:	2240      	movs	r2, #64	; 0x40
 801af84:	4668      	mov	r0, sp
 801af86:	f7ff fd31 	bl	801a9ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801af8a:	463b      	mov	r3, r7
 801af8c:	466a      	mov	r2, sp
 801af8e:	4631      	mov	r1, r6
 801af90:	4628      	mov	r0, r5
 801af92:	f7ff febe 	bl	801ad12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801af96:	b021      	add	sp, #132	; 0x84
 801af98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af9a:	bf00      	nop
 801af9c:	080292ed 	.word	0x080292ed
 801afa0:	080293bf 	.word	0x080293bf
 801afa4:	0802930a 	.word	0x0802930a

0801afa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801afa8:	b40c      	push	{r2, r3}
 801afaa:	b507      	push	{r0, r1, r2, lr}
 801afac:	ab04      	add	r3, sp, #16
 801afae:	f853 2b04 	ldr.w	r2, [r3], #4
 801afb2:	9301      	str	r3, [sp, #4]
 801afb4:	f7ff ffd2 	bl	801af5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801afb8:	b003      	add	sp, #12
 801afba:	f85d eb04 	ldr.w	lr, [sp], #4
 801afbe:	b002      	add	sp, #8
 801afc0:	4770      	bx	lr
	...

0801afc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc8:	b0c3      	sub	sp, #268	; 0x10c
 801afca:	2400      	movs	r4, #0
 801afcc:	4606      	mov	r6, r0
 801afce:	4689      	mov	r9, r1
 801afd0:	af10      	add	r7, sp, #64	; 0x40
 801afd2:	9209      	str	r2, [sp, #36]	; 0x24
 801afd4:	4621      	mov	r1, r4
 801afd6:	22c8      	movs	r2, #200	; 0xc8
 801afd8:	4638      	mov	r0, r7
 801afda:	469a      	mov	sl, r3
 801afdc:	940c      	str	r4, [sp, #48]	; 0x30
 801afde:	f7fe fcce 	bl	801997e <_ZN8touchgfx6memsetEPvhm>
 801afe2:	b116      	cbz	r6, 801afea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801afe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afe6:	b923      	cbnz	r3, 801aff2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801afe8:	8033      	strh	r3, [r6, #0]
 801afea:	4630      	mov	r0, r6
 801afec:	b043      	add	sp, #268	; 0x10c
 801afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aff2:	f109 3bff 	add.w	fp, r9, #4294967295
 801aff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801affa:	8812      	ldrh	r2, [r2, #0]
 801affc:	2a00      	cmp	r2, #0
 801affe:	f000 80d1 	beq.w	801b1a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b002:	459b      	cmp	fp, r3
 801b004:	f340 80ce 	ble.w	801b1a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b008:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b00c:	882a      	ldrh	r2, [r5, #0]
 801b00e:	2a00      	cmp	r2, #0
 801b010:	d0f1      	beq.n	801aff6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b012:	2a25      	cmp	r2, #37	; 0x25
 801b014:	f000 80ca 	beq.w	801b1ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801b018:	459b      	cmp	fp, r3
 801b01a:	ddec      	ble.n	801aff6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b01c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b020:	3502      	adds	r5, #2
 801b022:	3301      	adds	r3, #1
 801b024:	9509      	str	r5, [sp, #36]	; 0x24
 801b026:	930c      	str	r3, [sp, #48]	; 0x30
 801b028:	e7ee      	b.n	801b008 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801b02a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b02e:	3202      	adds	r2, #2
 801b030:	920c      	str	r2, [sp, #48]	; 0x30
 801b032:	e0ac      	b.n	801b18e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801b034:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b038:	970f      	str	r7, [sp, #60]	; 0x3c
 801b03a:	3401      	adds	r4, #1
 801b03c:	edd3 7a00 	vldr	s15, [r3]
 801b040:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b044:	b923      	cbnz	r3, 801b050 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801b046:	2301      	movs	r3, #1
 801b048:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b04c:	2303      	movs	r3, #3
 801b04e:	930e      	str	r3, [sp, #56]	; 0x38
 801b050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b054:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b056:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801b05a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b258 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801b05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b062:	bf42      	ittt	mi
 801b064:	232d      	movmi	r3, #45	; 0x2d
 801b066:	eef1 7a67 	vnegmi.f32	s15, s15
 801b06a:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801b06e:	2300      	movs	r3, #0
 801b070:	4298      	cmp	r0, r3
 801b072:	dd03      	ble.n	801b07c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801b074:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b078:	3301      	adds	r3, #1
 801b07a:	e7f9      	b.n	801b070 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801b07c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b084:	eeb0 7a67 	vmov.f32	s14, s15
 801b088:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b090:	da26      	bge.n	801b0e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801b092:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b096:	eba9 0202 	sub.w	r2, r9, r2
 801b09a:	2100      	movs	r1, #0
 801b09c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b0a0:	b28d      	uxth	r5, r1
 801b0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0a6:	db21      	blt.n	801b0ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b0a8:	1a53      	subs	r3, r2, r1
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	dd1e      	ble.n	801b0ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b0ae:	2963      	cmp	r1, #99	; 0x63
 801b0b0:	d01b      	beq.n	801b0ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801b0b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b0b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b0ba:	ee17 3a10 	vmov	r3, s14
 801b0be:	2b09      	cmp	r3, #9
 801b0c0:	bfa8      	it	ge
 801b0c2:	2309      	movge	r3, #9
 801b0c4:	ee07 3a10 	vmov	s14, r3
 801b0c8:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801b0cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0d0:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801b0d4:	3101      	adds	r1, #1
 801b0d6:	eee7 7a66 	vfms.f32	s15, s14, s13
 801b0da:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801b0de:	e7dd      	b.n	801b09c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801b0e0:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b0e4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b0e8:	e7ce      	b.n	801b088 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801b0ea:	460d      	mov	r5, r1
 801b0ec:	2a63      	cmp	r2, #99	; 0x63
 801b0ee:	bfd4      	ite	le
 801b0f0:	ebc5 0202 	rsble	r2, r5, r2
 801b0f4:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801b0f8:	2a00      	cmp	r2, #0
 801b0fa:	dd4e      	ble.n	801b19a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801b0fc:	4603      	mov	r3, r0
 801b0fe:	f04f 0801 	mov.w	r8, #1
 801b102:	2b00      	cmp	r3, #0
 801b104:	dd0e      	ble.n	801b124 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801b106:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b10a:	210a      	movs	r1, #10
 801b10c:	3b01      	subs	r3, #1
 801b10e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b112:	ee17 ca10 	vmov	ip, s14
 801b116:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b11a:	fb01 c808 	mla	r8, r1, r8, ip
 801b11e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b122:	e7ee      	b.n	801b102 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801b124:	2800      	cmp	r0, #0
 801b126:	f100 33ff 	add.w	r3, r0, #4294967295
 801b12a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801b12e:	bfac      	ite	ge
 801b130:	1a18      	subge	r0, r3, r0
 801b132:	4618      	movlt	r0, r3
 801b134:	b292      	uxth	r2, r2
 801b136:	230a      	movs	r3, #10
 801b138:	900e      	str	r0, [sp, #56]	; 0x38
 801b13a:	1979      	adds	r1, r7, r5
 801b13c:	4640      	mov	r0, r8
 801b13e:	f7ff fc84 	bl	801aa4a <_ZN8touchgfx7Unicode4itoaElPtti>
 801b142:	f1b8 0f01 	cmp.w	r8, #1
 801b146:	dc26      	bgt.n	801b196 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801b148:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	bf0c      	ite	eq
 801b150:	2300      	moveq	r3, #0
 801b152:	232e      	movne	r3, #46	; 0x2e
 801b154:	aa42      	add	r2, sp, #264	; 0x108
 801b156:	4415      	add	r5, r2
 801b158:	aa0c      	add	r2, sp, #48	; 0x30
 801b15a:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801b15e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b162:	a80f      	add	r0, sp, #60	; 0x3c
 801b164:	9205      	str	r2, [sp, #20]
 801b166:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801b16a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b16e:	9204      	str	r2, [sp, #16]
 801b170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b172:	9203      	str	r2, [sp, #12]
 801b174:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801b178:	9202      	str	r2, [sp, #8]
 801b17a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b17c:	9201      	str	r2, [sp, #4]
 801b17e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801b182:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801b186:	9200      	str	r2, [sp, #0]
 801b188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b18a:	f7ff fc9f 	bl	801aacc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b190:	3302      	adds	r3, #2
 801b192:	9309      	str	r3, [sp, #36]	; 0x24
 801b194:	e72f      	b.n	801aff6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b196:	232e      	movs	r3, #46	; 0x2e
 801b198:	e7dc      	b.n	801b154 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801b19a:	ab42      	add	r3, sp, #264	; 0x108
 801b19c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	e7d9      	b.n	801b158 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801b1a4:	2200      	movs	r2, #0
 801b1a6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b1aa:	e71e      	b.n	801afea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b1ac:	459b      	cmp	fp, r3
 801b1ae:	f77f af22 	ble.w	801aff6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b1b2:	2300      	movs	r3, #0
 801b1b4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801b1b8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801b1bc:	a809      	add	r0, sp, #36	; 0x24
 801b1be:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b1ca:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b1ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b1d2:	930d      	str	r3, [sp, #52]	; 0x34
 801b1d4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b1d8:	930e      	str	r3, [sp, #56]	; 0x38
 801b1da:	1cab      	adds	r3, r5, #2
 801b1dc:	9309      	str	r3, [sp, #36]	; 0x24
 801b1de:	ab0e      	add	r3, sp, #56	; 0x38
 801b1e0:	9304      	str	r3, [sp, #16]
 801b1e2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b1e6:	9303      	str	r3, [sp, #12]
 801b1e8:	ab0d      	add	r3, sp, #52	; 0x34
 801b1ea:	9302      	str	r3, [sp, #8]
 801b1ec:	ab0b      	add	r3, sp, #44	; 0x2c
 801b1ee:	9301      	str	r3, [sp, #4]
 801b1f0:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801b1f4:	9300      	str	r3, [sp, #0]
 801b1f6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801b1fa:	f7ff fd17 	bl	801ac2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b200:	2b00      	cmp	r3, #0
 801b202:	da0b      	bge.n	801b21c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801b204:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b208:	3401      	adds	r4, #1
 801b20a:	edd3 7a00 	vldr	s15, [r3]
 801b20e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b212:	ee17 3a90 	vmov	r3, s15
 801b216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b21a:	930d      	str	r3, [sp, #52]	; 0x34
 801b21c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b21e:	2b00      	cmp	r3, #0
 801b220:	da0b      	bge.n	801b23a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801b222:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b226:	3401      	adds	r4, #1
 801b228:	edd3 7a00 	vldr	s15, [r3]
 801b22c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b230:	ee17 3a90 	vmov	r3, s15
 801b234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b238:	930e      	str	r3, [sp, #56]	; 0x38
 801b23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b23c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b23e:	881b      	ldrh	r3, [r3, #0]
 801b240:	2b25      	cmp	r3, #37	; 0x25
 801b242:	f43f aef2 	beq.w	801b02a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801b246:	2b66      	cmp	r3, #102	; 0x66
 801b248:	f43f aef4 	beq.w	801b034 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801b24c:	9509      	str	r5, [sp, #36]	; 0x24
 801b24e:	882b      	ldrh	r3, [r5, #0]
 801b250:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b254:	3201      	adds	r2, #1
 801b256:	e6eb      	b.n	801b030 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801b258:	3f000002 	.word	0x3f000002

0801b25c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b25e:	4605      	mov	r5, r0
 801b260:	b0a1      	sub	sp, #132	; 0x84
 801b262:	4610      	mov	r0, r2
 801b264:	460e      	mov	r6, r1
 801b266:	4614      	mov	r4, r2
 801b268:	461f      	mov	r7, r3
 801b26a:	f7ff fbb3 	bl	801a9d4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b26e:	283f      	cmp	r0, #63	; 0x3f
 801b270:	d906      	bls.n	801b280 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801b272:	4b0a      	ldr	r3, [pc, #40]	; (801b29c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801b274:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801b278:	4a09      	ldr	r2, [pc, #36]	; (801b2a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801b27a:	480a      	ldr	r0, [pc, #40]	; (801b2a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801b27c:	f009 fe2c 	bl	8024ed8 <__assert_func>
 801b280:	4621      	mov	r1, r4
 801b282:	2240      	movs	r2, #64	; 0x40
 801b284:	4668      	mov	r0, sp
 801b286:	f7ff fbb1 	bl	801a9ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b28a:	463b      	mov	r3, r7
 801b28c:	466a      	mov	r2, sp
 801b28e:	4631      	mov	r1, r6
 801b290:	4628      	mov	r0, r5
 801b292:	f7ff fe97 	bl	801afc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801b296:	b021      	add	sp, #132	; 0x84
 801b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b29a:	bf00      	nop
 801b29c:	080292ed 	.word	0x080292ed
 801b2a0:	08029330 	.word	0x08029330
 801b2a4:	0802930a 	.word	0x0802930a

0801b2a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b2a8:	4b01      	ldr	r3, [pc, #4]	; (801b2b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b2aa:	6018      	str	r0, [r3, #0]
 801b2ac:	4770      	bx	lr
 801b2ae:	bf00      	nop
 801b2b0:	2000c5a8 	.word	0x2000c5a8

0801b2b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b2b4:	4b07      	ldr	r3, [pc, #28]	; (801b2d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b2b6:	881a      	ldrh	r2, [r3, #0]
 801b2b8:	4282      	cmp	r2, r0
 801b2ba:	d809      	bhi.n	801b2d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b2bc:	4b06      	ldr	r3, [pc, #24]	; (801b2d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b2be:	881b      	ldrh	r3, [r3, #0]
 801b2c0:	4413      	add	r3, r2
 801b2c2:	4298      	cmp	r0, r3
 801b2c4:	da04      	bge.n	801b2d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b2c6:	4b05      	ldr	r3, [pc, #20]	; (801b2dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b2ce:	4770      	bx	lr
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	4770      	bx	lr
 801b2d4:	2000c5c8 	.word	0x2000c5c8
 801b2d8:	2000c5cc 	.word	0x2000c5cc
 801b2dc:	2000c5ac 	.word	0x2000c5ac

0801b2e0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2e4:	4d26      	ldr	r5, [pc, #152]	; (801b380 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b2e6:	682b      	ldr	r3, [r5, #0]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d046      	beq.n	801b37a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b2ec:	4a25      	ldr	r2, [pc, #148]	; (801b384 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b2ee:	4f26      	ldr	r7, [pc, #152]	; (801b388 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b2f0:	8810      	ldrh	r0, [r2, #0]
 801b2f2:	883c      	ldrh	r4, [r7, #0]
 801b2f4:	4e25      	ldr	r6, [pc, #148]	; (801b38c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b2f6:	4420      	add	r0, r4
 801b2f8:	1c42      	adds	r2, r0, #1
 801b2fa:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b2fe:	f022 0201 	bic.w	r2, r2, #1
 801b302:	0412      	lsls	r2, r2, #16
 801b304:	0c12      	lsrs	r2, r2, #16
 801b306:	0051      	lsls	r1, r2, #1
 801b308:	220e      	movs	r2, #14
 801b30a:	eb08 0e01 	add.w	lr, r8, r1
 801b30e:	fb02 fc04 	mul.w	ip, r2, r4
 801b312:	eb03 0208 	add.w	r2, r3, r8
 801b316:	4c1e      	ldr	r4, [pc, #120]	; (801b390 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b318:	6022      	str	r2, [r4, #0]
 801b31a:	eb03 020e 	add.w	r2, r3, lr
 801b31e:	44e6      	add	lr, ip
 801b320:	6032      	str	r2, [r6, #0]
 801b322:	4473      	add	r3, lr
 801b324:	4a1b      	ldr	r2, [pc, #108]	; (801b394 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b326:	6013      	str	r3, [r2, #0]
 801b328:	2300      	movs	r3, #0
 801b32a:	4a1b      	ldr	r2, [pc, #108]	; (801b398 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b32c:	8013      	strh	r3, [r2, #0]
 801b32e:	4a1b      	ldr	r2, [pc, #108]	; (801b39c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b330:	6812      	ldr	r2, [r2, #0]
 801b332:	eba2 0208 	sub.w	r2, r2, r8
 801b336:	1a52      	subs	r2, r2, r1
 801b338:	4919      	ldr	r1, [pc, #100]	; (801b3a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b33a:	eba2 020c 	sub.w	r2, r2, ip
 801b33e:	469c      	mov	ip, r3
 801b340:	600a      	str	r2, [r1, #0]
 801b342:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b346:	4a17      	ldr	r2, [pc, #92]	; (801b3a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b348:	8013      	strh	r3, [r2, #0]
 801b34a:	4283      	cmp	r3, r0
 801b34c:	d10d      	bne.n	801b36a <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b34e:	883d      	ldrh	r5, [r7, #0]
 801b350:	2300      	movs	r3, #0
 801b352:	6830      	ldr	r0, [r6, #0]
 801b354:	240e      	movs	r4, #14
 801b356:	429d      	cmp	r5, r3
 801b358:	d90f      	bls.n	801b37a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b35a:	fb04 0203 	mla	r2, r4, r3, r0
 801b35e:	3301      	adds	r3, #1
 801b360:	7b11      	ldrb	r1, [r2, #12]
 801b362:	f36f 1145 	bfc	r1, #5, #1
 801b366:	7311      	strb	r1, [r2, #12]
 801b368:	e7f5      	b.n	801b356 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b36a:	682a      	ldr	r2, [r5, #0]
 801b36c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b370:	6822      	ldr	r2, [r4, #0]
 801b372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b376:	3301      	adds	r3, #1
 801b378:	e7e7      	b.n	801b34a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801b37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b37e:	bf00      	nop
 801b380:	2000c5ac 	.word	0x2000c5ac
 801b384:	2000c5c8 	.word	0x2000c5c8
 801b388:	2000c5cc 	.word	0x2000c5cc
 801b38c:	2000c5b0 	.word	0x2000c5b0
 801b390:	2000c5c0 	.word	0x2000c5c0
 801b394:	2000c5b8 	.word	0x2000c5b8
 801b398:	2000c5ca 	.word	0x2000c5ca
 801b39c:	2000c5b4 	.word	0x2000c5b4
 801b3a0:	2000c5c4 	.word	0x2000c5c4
 801b3a4:	2000c5bc 	.word	0x2000c5bc

0801b3a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b3a8:	4b10      	ldr	r3, [pc, #64]	; (801b3ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b3aa:	b510      	push	{r4, lr}
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	b9db      	cbnz	r3, 801b3e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b3b0:	b1d1      	cbz	r1, 801b3e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b3b2:	4b0f      	ldr	r3, [pc, #60]	; (801b3f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b3b4:	240e      	movs	r4, #14
 801b3b6:	801a      	strh	r2, [r3, #0]
 801b3b8:	b292      	uxth	r2, r2
 801b3ba:	4b0e      	ldr	r3, [pc, #56]	; (801b3f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b3bc:	881b      	ldrh	r3, [r3, #0]
 801b3be:	4413      	add	r3, r2
 801b3c0:	4362      	muls	r2, r4
 801b3c2:	2406      	movs	r4, #6
 801b3c4:	fb04 2203 	mla	r2, r4, r3, r2
 801b3c8:	428a      	cmp	r2, r1
 801b3ca:	d305      	bcc.n	801b3d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b3cc:	4b0a      	ldr	r3, [pc, #40]	; (801b3f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b3ce:	2137      	movs	r1, #55	; 0x37
 801b3d0:	4a0a      	ldr	r2, [pc, #40]	; (801b3fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b3d2:	480b      	ldr	r0, [pc, #44]	; (801b400 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b3d4:	f009 fd80 	bl	8024ed8 <__assert_func>
 801b3d8:	4b0a      	ldr	r3, [pc, #40]	; (801b404 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b3da:	6019      	str	r1, [r3, #0]
 801b3dc:	4b0a      	ldr	r3, [pc, #40]	; (801b408 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b3de:	6018      	str	r0, [r3, #0]
 801b3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3e4:	f7ff bf7c 	b.w	801b2e0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b3e8:	bd10      	pop	{r4, pc}
 801b3ea:	bf00      	nop
 801b3ec:	2000c5b8 	.word	0x2000c5b8
 801b3f0:	2000c5cc 	.word	0x2000c5cc
 801b3f4:	2000c5c8 	.word	0x2000c5c8
 801b3f8:	080294a1 	.word	0x080294a1
 801b3fc:	080294fa 	.word	0x080294fa
 801b400:	0802947c 	.word	0x0802947c
 801b404:	2000c5b4 	.word	0x2000c5b4
 801b408:	2000c5ac 	.word	0x2000c5ac

0801b40c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b40c:	b470      	push	{r4, r5, r6}
 801b40e:	4c07      	ldr	r4, [pc, #28]	; (801b42c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b410:	4605      	mov	r5, r0
 801b412:	4610      	mov	r0, r2
 801b414:	9a03      	ldr	r2, [sp, #12]
 801b416:	6826      	ldr	r6, [r4, #0]
 801b418:	b936      	cbnz	r6, 801b428 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b41a:	6025      	str	r5, [r4, #0]
 801b41c:	4c04      	ldr	r4, [pc, #16]	; (801b430 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b41e:	8021      	strh	r1, [r4, #0]
 801b420:	4619      	mov	r1, r3
 801b422:	bc70      	pop	{r4, r5, r6}
 801b424:	f7ff bfc0 	b.w	801b3a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b428:	bc70      	pop	{r4, r5, r6}
 801b42a:	4770      	bx	lr
 801b42c:	2000c5d0 	.word	0x2000c5d0
 801b430:	2000c5c8 	.word	0x2000c5c8

0801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b434:	b508      	push	{r3, lr}
 801b436:	4b14      	ldr	r3, [pc, #80]	; (801b488 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b438:	6819      	ldr	r1, [r3, #0]
 801b43a:	b931      	cbnz	r1, 801b44a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b43c:	4b13      	ldr	r3, [pc, #76]	; (801b48c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b43e:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b442:	4a13      	ldr	r2, [pc, #76]	; (801b490 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b444:	4813      	ldr	r0, [pc, #76]	; (801b494 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b446:	f009 fd47 	bl	8024ed8 <__assert_func>
 801b44a:	4a13      	ldr	r2, [pc, #76]	; (801b498 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b44c:	8803      	ldrh	r3, [r0, #0]
 801b44e:	8812      	ldrh	r2, [r2, #0]
 801b450:	4293      	cmp	r3, r2
 801b452:	d204      	bcs.n	801b45e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b454:	2214      	movs	r2, #20
 801b456:	fb02 1303 	mla	r3, r2, r3, r1
 801b45a:	8918      	ldrh	r0, [r3, #8]
 801b45c:	bd08      	pop	{r3, pc}
 801b45e:	490f      	ldr	r1, [pc, #60]	; (801b49c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b460:	8809      	ldrh	r1, [r1, #0]
 801b462:	4411      	add	r1, r2
 801b464:	428b      	cmp	r3, r1
 801b466:	da06      	bge.n	801b476 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b468:	1a9b      	subs	r3, r3, r2
 801b46a:	4a0d      	ldr	r2, [pc, #52]	; (801b4a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b46c:	210e      	movs	r1, #14
 801b46e:	6812      	ldr	r2, [r2, #0]
 801b470:	fb01 2303 	mla	r3, r1, r3, r2
 801b474:	e7f1      	b.n	801b45a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b476:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b47a:	4293      	cmp	r3, r2
 801b47c:	bf0a      	itet	eq
 801b47e:	4b09      	ldreq	r3, [pc, #36]	; (801b4a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b480:	2000      	movne	r0, #0
 801b482:	8818      	ldrheq	r0, [r3, #0]
 801b484:	e7ea      	b.n	801b45c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b486:	bf00      	nop
 801b488:	2000c5d0 	.word	0x2000c5d0
 801b48c:	08027454 	.word	0x08027454
 801b490:	080295a7 	.word	0x080295a7
 801b494:	0802947c 	.word	0x0802947c
 801b498:	2000c5c8 	.word	0x2000c5c8
 801b49c:	2000c5cc 	.word	0x2000c5cc
 801b4a0:	2000c5b0 	.word	0x2000c5b0
 801b4a4:	2000c4fc 	.word	0x2000c4fc

0801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b4a8:	b508      	push	{r3, lr}
 801b4aa:	4b14      	ldr	r3, [pc, #80]	; (801b4fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b4ac:	6819      	ldr	r1, [r3, #0]
 801b4ae:	b931      	cbnz	r1, 801b4be <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b4b0:	4b13      	ldr	r3, [pc, #76]	; (801b500 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b4b2:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b4b6:	4a13      	ldr	r2, [pc, #76]	; (801b504 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b4b8:	4813      	ldr	r0, [pc, #76]	; (801b508 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b4ba:	f009 fd0d 	bl	8024ed8 <__assert_func>
 801b4be:	4a13      	ldr	r2, [pc, #76]	; (801b50c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b4c0:	8803      	ldrh	r3, [r0, #0]
 801b4c2:	8812      	ldrh	r2, [r2, #0]
 801b4c4:	4293      	cmp	r3, r2
 801b4c6:	d204      	bcs.n	801b4d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b4c8:	2214      	movs	r2, #20
 801b4ca:	fb02 1303 	mla	r3, r2, r3, r1
 801b4ce:	8958      	ldrh	r0, [r3, #10]
 801b4d0:	bd08      	pop	{r3, pc}
 801b4d2:	490f      	ldr	r1, [pc, #60]	; (801b510 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b4d4:	8809      	ldrh	r1, [r1, #0]
 801b4d6:	4411      	add	r1, r2
 801b4d8:	428b      	cmp	r3, r1
 801b4da:	da06      	bge.n	801b4ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b4dc:	1a9b      	subs	r3, r3, r2
 801b4de:	4a0d      	ldr	r2, [pc, #52]	; (801b514 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b4e0:	210e      	movs	r1, #14
 801b4e2:	6812      	ldr	r2, [r2, #0]
 801b4e4:	fb01 2303 	mla	r3, r1, r3, r2
 801b4e8:	e7f1      	b.n	801b4ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b4ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	bf0a      	itet	eq
 801b4f2:	4b09      	ldreq	r3, [pc, #36]	; (801b518 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b4f4:	2000      	movne	r0, #0
 801b4f6:	8818      	ldrheq	r0, [r3, #0]
 801b4f8:	e7ea      	b.n	801b4d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b4fa:	bf00      	nop
 801b4fc:	2000c5d0 	.word	0x2000c5d0
 801b500:	08027454 	.word	0x08027454
 801b504:	080295d3 	.word	0x080295d3
 801b508:	0802947c 	.word	0x0802947c
 801b50c:	2000c5c8 	.word	0x2000c5c8
 801b510:	2000c5cc 	.word	0x2000c5cc
 801b514:	2000c5b0 	.word	0x2000c5b0
 801b518:	2000c4fe 	.word	0x2000c4fe

0801b51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b51c:	4b23      	ldr	r3, [pc, #140]	; (801b5ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b51e:	b510      	push	{r4, lr}
 801b520:	681c      	ldr	r4, [r3, #0]
 801b522:	b934      	cbnz	r4, 801b532 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b524:	4b22      	ldr	r3, [pc, #136]	; (801b5b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b526:	f240 310e 	movw	r1, #782	; 0x30e
 801b52a:	4a22      	ldr	r2, [pc, #136]	; (801b5b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b52c:	4822      	ldr	r0, [pc, #136]	; (801b5b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b52e:	f009 fcd3 	bl	8024ed8 <__assert_func>
 801b532:	4a22      	ldr	r2, [pc, #136]	; (801b5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b534:	880b      	ldrh	r3, [r1, #0]
 801b536:	8812      	ldrh	r2, [r2, #0]
 801b538:	4293      	cmp	r3, r2
 801b53a:	d211      	bcs.n	801b560 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b53c:	2214      	movs	r2, #20
 801b53e:	fb02 4303 	mla	r3, r2, r3, r4
 801b542:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b546:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b54a:	8a1a      	ldrh	r2, [r3, #16]
 801b54c:	8a5b      	ldrh	r3, [r3, #18]
 801b54e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b552:	8004      	strh	r4, [r0, #0]
 801b554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b558:	8041      	strh	r1, [r0, #2]
 801b55a:	8082      	strh	r2, [r0, #4]
 801b55c:	80c3      	strh	r3, [r0, #6]
 801b55e:	e00e      	b.n	801b57e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b560:	4917      	ldr	r1, [pc, #92]	; (801b5c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b562:	8809      	ldrh	r1, [r1, #0]
 801b564:	4411      	add	r1, r2
 801b566:	428b      	cmp	r3, r1
 801b568:	da0a      	bge.n	801b580 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b56a:	1a9b      	subs	r3, r3, r2
 801b56c:	4a15      	ldr	r2, [pc, #84]	; (801b5c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b56e:	210e      	movs	r1, #14
 801b570:	6812      	ldr	r2, [r2, #0]
 801b572:	fb01 2303 	mla	r3, r1, r3, r2
 801b576:	681a      	ldr	r2, [r3, #0]
 801b578:	6002      	str	r2, [r0, #0]
 801b57a:	685a      	ldr	r2, [r3, #4]
 801b57c:	6042      	str	r2, [r0, #4]
 801b57e:	bd10      	pop	{r4, pc}
 801b580:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b584:	4293      	cmp	r3, r2
 801b586:	d10b      	bne.n	801b5a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b588:	4b0f      	ldr	r3, [pc, #60]	; (801b5c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b58a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b58e:	4b0f      	ldr	r3, [pc, #60]	; (801b5cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b590:	8081      	strh	r1, [r0, #4]
 801b592:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b596:	2300      	movs	r3, #0
 801b598:	80c2      	strh	r2, [r0, #6]
 801b59a:	8003      	strh	r3, [r0, #0]
 801b59c:	8043      	strh	r3, [r0, #2]
 801b59e:	e7ee      	b.n	801b57e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	8003      	strh	r3, [r0, #0]
 801b5a4:	8043      	strh	r3, [r0, #2]
 801b5a6:	8083      	strh	r3, [r0, #4]
 801b5a8:	e7d8      	b.n	801b55c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b5aa:	bf00      	nop
 801b5ac:	2000c5d0 	.word	0x2000c5d0
 801b5b0:	08027454 	.word	0x08027454
 801b5b4:	08029540 	.word	0x08029540
 801b5b8:	0802947c 	.word	0x0802947c
 801b5bc:	2000c5c8 	.word	0x2000c5c8
 801b5c0:	2000c5cc 	.word	0x2000c5cc
 801b5c4:	2000c5b0 	.word	0x2000c5b0
 801b5c8:	2000c4fc 	.word	0x2000c4fc
 801b5cc:	2000c4fe 	.word	0x2000c4fe

0801b5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b5d0:	4b18      	ldr	r3, [pc, #96]	; (801b634 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	b34b      	cbz	r3, 801b62a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b5d6:	4a18      	ldr	r2, [pc, #96]	; (801b638 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b5d8:	8800      	ldrh	r0, [r0, #0]
 801b5da:	8812      	ldrh	r2, [r2, #0]
 801b5dc:	4290      	cmp	r0, r2
 801b5de:	d211      	bcs.n	801b604 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b5e0:	2214      	movs	r2, #20
 801b5e2:	fb02 3300 	mla	r3, r2, r0, r3
 801b5e6:	8a1a      	ldrh	r2, [r3, #16]
 801b5e8:	8919      	ldrh	r1, [r3, #8]
 801b5ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b5ee:	428a      	cmp	r2, r1
 801b5f0:	db1d      	blt.n	801b62e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b5f2:	8a58      	ldrh	r0, [r3, #18]
 801b5f4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b5f8:	895b      	ldrh	r3, [r3, #10]
 801b5fa:	4298      	cmp	r0, r3
 801b5fc:	bfac      	ite	ge
 801b5fe:	2000      	movge	r0, #0
 801b600:	2001      	movlt	r0, #1
 801b602:	4770      	bx	lr
 801b604:	4b0d      	ldr	r3, [pc, #52]	; (801b63c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b606:	881b      	ldrh	r3, [r3, #0]
 801b608:	4413      	add	r3, r2
 801b60a:	4298      	cmp	r0, r3
 801b60c:	da0d      	bge.n	801b62a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b60e:	4b0c      	ldr	r3, [pc, #48]	; (801b640 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b610:	1a80      	subs	r0, r0, r2
 801b612:	220e      	movs	r2, #14
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	fb02 3300 	mla	r3, r2, r0, r3
 801b61a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b61e:	891a      	ldrh	r2, [r3, #8]
 801b620:	4291      	cmp	r1, r2
 801b622:	db04      	blt.n	801b62e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b624:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b628:	e7e6      	b.n	801b5f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b62a:	2000      	movs	r0, #0
 801b62c:	4770      	bx	lr
 801b62e:	2001      	movs	r0, #1
 801b630:	4770      	bx	lr
 801b632:	bf00      	nop
 801b634:	2000c5d0 	.word	0x2000c5d0
 801b638:	2000c5c8 	.word	0x2000c5c8
 801b63c:	2000c5cc 	.word	0x2000c5cc
 801b640:	2000c5b0 	.word	0x2000c5b0

0801b644 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b644:	b508      	push	{r3, lr}
 801b646:	4b12      	ldr	r3, [pc, #72]	; (801b690 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b648:	6819      	ldr	r1, [r3, #0]
 801b64a:	b931      	cbnz	r1, 801b65a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b64c:	4b11      	ldr	r3, [pc, #68]	; (801b694 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b64e:	f240 3132 	movw	r1, #818	; 0x332
 801b652:	4a11      	ldr	r2, [pc, #68]	; (801b698 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b654:	4811      	ldr	r0, [pc, #68]	; (801b69c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b656:	f009 fc3f 	bl	8024ed8 <__assert_func>
 801b65a:	8803      	ldrh	r3, [r0, #0]
 801b65c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b660:	4293      	cmp	r3, r2
 801b662:	d012      	beq.n	801b68a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b664:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b668:	4293      	cmp	r3, r2
 801b66a:	d103      	bne.n	801b674 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b66c:	4b0c      	ldr	r3, [pc, #48]	; (801b6a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b672:	bd08      	pop	{r3, pc}
 801b674:	4a0b      	ldr	r2, [pc, #44]	; (801b6a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b676:	6812      	ldr	r2, [r2, #0]
 801b678:	b11a      	cbz	r2, 801b682 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b67a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b67e:	2800      	cmp	r0, #0
 801b680:	d1f7      	bne.n	801b672 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b682:	2214      	movs	r2, #20
 801b684:	4353      	muls	r3, r2
 801b686:	58c8      	ldr	r0, [r1, r3]
 801b688:	e7f3      	b.n	801b672 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b68a:	2000      	movs	r0, #0
 801b68c:	e7f1      	b.n	801b672 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b68e:	bf00      	nop
 801b690:	2000c5d0 	.word	0x2000c5d0
 801b694:	08027454 	.word	0x08027454
 801b698:	08029576 	.word	0x08029576
 801b69c:	0802947c 	.word	0x0802947c
 801b6a0:	2000c508 	.word	0x2000c508
 801b6a4:	2000c5ac 	.word	0x2000c5ac

0801b6a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b6a8:	8802      	ldrh	r2, [r0, #0]
 801b6aa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b6ae:	429a      	cmp	r2, r3
 801b6b0:	d840      	bhi.n	801b734 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b6b2:	4b21      	ldr	r3, [pc, #132]	; (801b738 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801b6b4:	881b      	ldrh	r3, [r3, #0]
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d220      	bcs.n	801b6fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801b6ba:	4b20      	ldr	r3, [pc, #128]	; (801b73c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b6bc:	6819      	ldr	r1, [r3, #0]
 801b6be:	2314      	movs	r3, #20
 801b6c0:	fb03 1302 	mla	r3, r3, r2, r1
 801b6c4:	6858      	ldr	r0, [r3, #4]
 801b6c6:	2800      	cmp	r0, #0
 801b6c8:	d035      	beq.n	801b736 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b6ca:	491d      	ldr	r1, [pc, #116]	; (801b740 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b6cc:	6809      	ldr	r1, [r1, #0]
 801b6ce:	2900      	cmp	r1, #0
 801b6d0:	d031      	beq.n	801b736 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b6d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b6d6:	b371      	cbz	r1, 801b736 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b6d8:	895a      	ldrh	r2, [r3, #10]
 801b6da:	8918      	ldrh	r0, [r3, #8]
 801b6dc:	4350      	muls	r0, r2
 801b6de:	7c5a      	ldrb	r2, [r3, #17]
 801b6e0:	7cdb      	ldrb	r3, [r3, #19]
 801b6e2:	0952      	lsrs	r2, r2, #5
 801b6e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b6e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b6ec:	2b0b      	cmp	r3, #11
 801b6ee:	bf18      	it	ne
 801b6f0:	0040      	lslne	r0, r0, #1
 801b6f2:	3003      	adds	r0, #3
 801b6f4:	f020 0003 	bic.w	r0, r0, #3
 801b6f8:	4408      	add	r0, r1
 801b6fa:	4770      	bx	lr
 801b6fc:	4911      	ldr	r1, [pc, #68]	; (801b744 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b6fe:	8809      	ldrh	r1, [r1, #0]
 801b700:	4419      	add	r1, r3
 801b702:	428a      	cmp	r2, r1
 801b704:	da16      	bge.n	801b734 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b706:	4910      	ldr	r1, [pc, #64]	; (801b748 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b708:	1ad3      	subs	r3, r2, r3
 801b70a:	200e      	movs	r0, #14
 801b70c:	6809      	ldr	r1, [r1, #0]
 801b70e:	fb00 1303 	mla	r3, r0, r3, r1
 801b712:	7b19      	ldrb	r1, [r3, #12]
 801b714:	f001 011f 	and.w	r1, r1, #31
 801b718:	290b      	cmp	r1, #11
 801b71a:	d10b      	bne.n	801b734 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b71c:	8919      	ldrh	r1, [r3, #8]
 801b71e:	8958      	ldrh	r0, [r3, #10]
 801b720:	4b07      	ldr	r3, [pc, #28]	; (801b740 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b722:	4348      	muls	r0, r1
 801b724:	6819      	ldr	r1, [r3, #0]
 801b726:	3003      	adds	r0, #3
 801b728:	f020 0303 	bic.w	r3, r0, #3
 801b72c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b730:	4418      	add	r0, r3
 801b732:	4770      	bx	lr
 801b734:	2000      	movs	r0, #0
 801b736:	4770      	bx	lr
 801b738:	2000c5c8 	.word	0x2000c5c8
 801b73c:	2000c5d0 	.word	0x2000c5d0
 801b740:	2000c5ac 	.word	0x2000c5ac
 801b744:	2000c5cc 	.word	0x2000c5cc
 801b748:	2000c5b0 	.word	0x2000c5b0

0801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b74c:	4b19      	ldr	r3, [pc, #100]	; (801b7b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b74e:	6819      	ldr	r1, [r3, #0]
 801b750:	8803      	ldrh	r3, [r0, #0]
 801b752:	b1e9      	cbz	r1, 801b790 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b754:	4a18      	ldr	r2, [pc, #96]	; (801b7b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b756:	8812      	ldrh	r2, [r2, #0]
 801b758:	429a      	cmp	r2, r3
 801b75a:	d90a      	bls.n	801b772 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b75c:	2214      	movs	r2, #20
 801b75e:	fb02 1303 	mla	r3, r2, r3, r1
 801b762:	7c58      	ldrb	r0, [r3, #17]
 801b764:	0942      	lsrs	r2, r0, #5
 801b766:	7cd8      	ldrb	r0, [r3, #19]
 801b768:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b76c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b770:	4770      	bx	lr
 801b772:	4912      	ldr	r1, [pc, #72]	; (801b7bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b774:	8809      	ldrh	r1, [r1, #0]
 801b776:	4411      	add	r1, r2
 801b778:	428b      	cmp	r3, r1
 801b77a:	da09      	bge.n	801b790 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b77c:	1a9b      	subs	r3, r3, r2
 801b77e:	4a10      	ldr	r2, [pc, #64]	; (801b7c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b780:	210e      	movs	r1, #14
 801b782:	6812      	ldr	r2, [r2, #0]
 801b784:	fb01 2303 	mla	r3, r1, r3, r2
 801b788:	7b18      	ldrb	r0, [r3, #12]
 801b78a:	f000 001f 	and.w	r0, r0, #31
 801b78e:	4770      	bx	lr
 801b790:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b794:	4293      	cmp	r3, r2
 801b796:	d10a      	bne.n	801b7ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b798:	4b0a      	ldr	r3, [pc, #40]	; (801b7c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b7a0:	b10a      	cbz	r2, 801b7a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b7a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b7a4:	b900      	cbnz	r0, 801b7a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b7a6:	6898      	ldr	r0, [r3, #8]
 801b7a8:	6803      	ldr	r3, [r0, #0]
 801b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7ac:	4718      	bx	r3
 801b7ae:	2000      	movs	r0, #0
 801b7b0:	4770      	bx	lr
 801b7b2:	bf00      	nop
 801b7b4:	2000c5d0 	.word	0x2000c5d0
 801b7b8:	2000c5c8 	.word	0x2000c5c8
 801b7bc:	2000c5cc 	.word	0x2000c5cc
 801b7c0:	2000c5b0 	.word	0x2000c5b0
 801b7c4:	2000c508 	.word	0x2000c508

0801b7c8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b7c8:	2018      	movs	r0, #24
 801b7ca:	4770      	bx	lr

0801b7cc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b7cc:	2001      	movs	r0, #1
 801b7ce:	4770      	bx	lr

0801b7d0 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801b7d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b7d4:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801b7d8:	4770      	bx	lr

0801b7da <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801b7da:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801b7de:	4770      	bx	lr

0801b7e0 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801b7e0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801b7e4:	4770      	bx	lr

0801b7e6 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801b7e6:	b2c8      	uxtb	r0, r1
 801b7e8:	4770      	bx	lr

0801b7ea <_ZN8touchgfx8LCD24bpp4initEv>:
 801b7ea:	4770      	bx	lr

0801b7ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f0:	b085      	sub	sp, #20
 801b7f2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b7f4:	9203      	str	r2, [sp, #12]
 801b7f6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b7fa:	6878      	ldr	r0, [r7, #4]
 801b7fc:	9201      	str	r2, [sp, #4]
 801b7fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801b800:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801b804:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801b808:	fa1f fc84 	uxth.w	ip, r4
 801b80c:	43e4      	mvns	r4, r4
 801b80e:	9100      	str	r1, [sp, #0]
 801b810:	b2e4      	uxtb	r4, r4
 801b812:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b816:	fb00 2505 	mla	r5, r0, r5, r2
 801b81a:	683a      	ldr	r2, [r7, #0]
 801b81c:	6877      	ldr	r7, [r6, #4]
 801b81e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b822:	3704      	adds	r7, #4
 801b824:	4415      	add	r5, r2
 801b826:	6832      	ldr	r2, [r6, #0]
 801b828:	9202      	str	r2, [sp, #8]
 801b82a:	9a00      	ldr	r2, [sp, #0]
 801b82c:	2a00      	cmp	r2, #0
 801b82e:	dc03      	bgt.n	801b838 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b830:	9a03      	ldr	r2, [sp, #12]
 801b832:	2a00      	cmp	r2, #0
 801b834:	f340 8116 	ble.w	801ba64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b83a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b83e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b840:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b844:	2b00      	cmp	r3, #0
 801b846:	dd0f      	ble.n	801b868 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b848:	1406      	asrs	r6, r0, #16
 801b84a:	d406      	bmi.n	801b85a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b84c:	4546      	cmp	r6, r8
 801b84e:	da04      	bge.n	801b85a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b850:	1416      	asrs	r6, r2, #16
 801b852:	d402      	bmi.n	801b85a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b854:	9901      	ldr	r1, [sp, #4]
 801b856:	428e      	cmp	r6, r1
 801b858:	db07      	blt.n	801b86a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b85a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b85c:	3b01      	subs	r3, #1
 801b85e:	3503      	adds	r5, #3
 801b860:	4408      	add	r0, r1
 801b862:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b864:	440a      	add	r2, r1
 801b866:	e7ed      	b.n	801b844 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b868:	d011      	beq.n	801b88e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b86a:	1e5e      	subs	r6, r3, #1
 801b86c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b86e:	fb01 0e06 	mla	lr, r1, r6, r0
 801b872:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b876:	d548      	bpl.n	801b90a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801b878:	4699      	mov	r9, r3
 801b87a:	462e      	mov	r6, r5
 801b87c:	f1b9 0f00 	cmp.w	r9, #0
 801b880:	f300 809e 	bgt.w	801b9c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801b884:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b88c:	441d      	add	r5, r3
 801b88e:	9b00      	ldr	r3, [sp, #0]
 801b890:	2b00      	cmp	r3, #0
 801b892:	f340 80e7 	ble.w	801ba64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b89c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8a4:	eef0 6a62 	vmov.f32	s13, s5
 801b8a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b8ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8b4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b8b8:	eef0 6a43 	vmov.f32	s13, s6
 801b8bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8c0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b8c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8dc:	ee12 2a90 	vmov	r2, s5
 801b8e0:	eef0 2a47 	vmov.f32	s5, s14
 801b8e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8e8:	ee13 2a10 	vmov	r2, s6
 801b8ec:	9311      	str	r3, [sp, #68]	; 0x44
 801b8ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8f0:	eeb0 3a67 	vmov.f32	s6, s15
 801b8f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8f8:	9312      	str	r3, [sp, #72]	; 0x48
 801b8fa:	9b00      	ldr	r3, [sp, #0]
 801b8fc:	9a03      	ldr	r2, [sp, #12]
 801b8fe:	3b01      	subs	r3, #1
 801b900:	9300      	str	r3, [sp, #0]
 801b902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b904:	bf08      	it	eq
 801b906:	4613      	moveq	r3, r2
 801b908:	e78f      	b.n	801b82a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b90a:	45c6      	cmp	lr, r8
 801b90c:	dab4      	bge.n	801b878 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b90e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b910:	fb01 2606 	mla	r6, r1, r6, r2
 801b914:	1436      	asrs	r6, r6, #16
 801b916:	d4af      	bmi.n	801b878 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b918:	9901      	ldr	r1, [sp, #4]
 801b91a:	428e      	cmp	r6, r1
 801b91c:	daac      	bge.n	801b878 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b91e:	1cee      	adds	r6, r5, #3
 801b920:	4699      	mov	r9, r3
 801b922:	f1b9 0f00 	cmp.w	r9, #0
 801b926:	f106 0603 	add.w	r6, r6, #3
 801b92a:	ddab      	ble.n	801b884 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b92c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b930:	9902      	ldr	r1, [sp, #8]
 801b932:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b936:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b93a:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b93e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b940:	fb1b fb04 	smulbb	fp, fp, r4
 801b944:	f109 39ff 	add.w	r9, r9, #4294967295
 801b948:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b94c:	4408      	add	r0, r1
 801b94e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b950:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b954:	440a      	add	r2, r1
 801b956:	eb07 0a0e 	add.w	sl, r7, lr
 801b95a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b95e:	fb0e be0c 	mla	lr, lr, ip, fp
 801b962:	fa1f fe8e 	uxth.w	lr, lr
 801b966:	f10e 0b01 	add.w	fp, lr, #1
 801b96a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b96e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b972:	fb1b fb04 	smulbb	fp, fp, r4
 801b976:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b97a:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b97e:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b982:	fb0e be0c 	mla	lr, lr, ip, fp
 801b986:	fa1f fe8e 	uxth.w	lr, lr
 801b98a:	f10e 0b01 	add.w	fp, lr, #1
 801b98e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b992:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b996:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b99a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b99e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b9a2:	fb1a fa04 	smulbb	sl, sl, r4
 801b9a6:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b9aa:	fa1f fe8e 	uxth.w	lr, lr
 801b9ae:	f10e 0a01 	add.w	sl, lr, #1
 801b9b2:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b9b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b9ba:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b9be:	e7b0      	b.n	801b922 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b9c0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b9c4:	d446      	bmi.n	801ba54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b9c6:	45c2      	cmp	sl, r8
 801b9c8:	da44      	bge.n	801ba54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b9ca:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b9ce:	d441      	bmi.n	801ba54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b9d0:	9901      	ldr	r1, [sp, #4]
 801b9d2:	458e      	cmp	lr, r1
 801b9d4:	da3e      	bge.n	801ba54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b9d6:	9902      	ldr	r1, [sp, #8]
 801b9d8:	f896 b000 	ldrb.w	fp, [r6]
 801b9dc:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b9e0:	fb1b fb04 	smulbb	fp, fp, r4
 801b9e4:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b9e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b9ec:	eb07 0a0e 	add.w	sl, r7, lr
 801b9f0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b9f4:	fb0e be0c 	mla	lr, lr, ip, fp
 801b9f8:	fa1f fe8e 	uxth.w	lr, lr
 801b9fc:	f10e 0b01 	add.w	fp, lr, #1
 801ba00:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ba04:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ba08:	fb1b fb04 	smulbb	fp, fp, r4
 801ba0c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ba10:	f886 e000 	strb.w	lr, [r6]
 801ba14:	f89a e001 	ldrb.w	lr, [sl, #1]
 801ba18:	fb0e be0c 	mla	lr, lr, ip, fp
 801ba1c:	fa1f fe8e 	uxth.w	lr, lr
 801ba20:	f10e 0b01 	add.w	fp, lr, #1
 801ba24:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ba28:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ba2c:	f886 e001 	strb.w	lr, [r6, #1]
 801ba30:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ba34:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ba38:	fb1a fa04 	smulbb	sl, sl, r4
 801ba3c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ba40:	fa1f fe8e 	uxth.w	lr, lr
 801ba44:	f10e 0a01 	add.w	sl, lr, #1
 801ba48:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ba4c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ba50:	f886 e002 	strb.w	lr, [r6, #2]
 801ba54:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ba56:	3603      	adds	r6, #3
 801ba58:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba5c:	4408      	add	r0, r1
 801ba5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ba60:	440a      	add	r2, r1
 801ba62:	e70b      	b.n	801b87c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801ba64:	b005      	add	sp, #20
 801ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ba6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba6e:	b085      	sub	sp, #20
 801ba70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba74:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba76:	9203      	str	r2, [sp, #12]
 801ba78:	6870      	ldr	r0, [r6, #4]
 801ba7a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ba7c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ba80:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ba84:	9101      	str	r1, [sp, #4]
 801ba86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ba8a:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801ba8e:	fb00 2404 	mla	r4, r0, r4, r2
 801ba92:	6832      	ldr	r2, [r6, #0]
 801ba94:	686e      	ldr	r6, [r5, #4]
 801ba96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba9a:	3604      	adds	r6, #4
 801ba9c:	4414      	add	r4, r2
 801ba9e:	682a      	ldr	r2, [r5, #0]
 801baa0:	9202      	str	r2, [sp, #8]
 801baa2:	9a01      	ldr	r2, [sp, #4]
 801baa4:	2a00      	cmp	r2, #0
 801baa6:	dc03      	bgt.n	801bab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801baa8:	9a03      	ldr	r2, [sp, #12]
 801baaa:	2a00      	cmp	r2, #0
 801baac:	f340 80b2 	ble.w	801bc14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801bab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bab2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bab8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801babc:	2b00      	cmp	r3, #0
 801babe:	dd0c      	ble.n	801bada <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801bac0:	1405      	asrs	r5, r0, #16
 801bac2:	d405      	bmi.n	801bad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bac4:	4575      	cmp	r5, lr
 801bac6:	da03      	bge.n	801bad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bac8:	1415      	asrs	r5, r2, #16
 801baca:	d401      	bmi.n	801bad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bacc:	4545      	cmp	r5, r8
 801bace:	db05      	blt.n	801badc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bad0:	4460      	add	r0, ip
 801bad2:	443a      	add	r2, r7
 801bad4:	3b01      	subs	r3, #1
 801bad6:	3403      	adds	r4, #3
 801bad8:	e7f0      	b.n	801babc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801bada:	d03d      	beq.n	801bb58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801badc:	1e5d      	subs	r5, r3, #1
 801bade:	fb0c 0905 	mla	r9, ip, r5, r0
 801bae2:	ea5f 4929 	movs.w	r9, r9, asr #16
 801bae6:	d42c      	bmi.n	801bb42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801bae8:	45f1      	cmp	r9, lr
 801baea:	da2a      	bge.n	801bb42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801baec:	fb07 2505 	mla	r5, r7, r5, r2
 801baf0:	142d      	asrs	r5, r5, #16
 801baf2:	d426      	bmi.n	801bb42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801baf4:	4545      	cmp	r5, r8
 801baf6:	da24      	bge.n	801bb42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801baf8:	1ce5      	adds	r5, r4, #3
 801bafa:	469a      	mov	sl, r3
 801bafc:	f1ba 0f00 	cmp.w	sl, #0
 801bb00:	f105 0503 	add.w	r5, r5, #3
 801bb04:	dd23      	ble.n	801bb4e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801bb06:	ea4f 4922 	mov.w	r9, r2, asr #16
 801bb0a:	9902      	ldr	r1, [sp, #8]
 801bb0c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801bb10:	443a      	add	r2, r7
 801bb12:	fb0e 1909 	mla	r9, lr, r9, r1
 801bb16:	4460      	add	r0, ip
 801bb18:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb1c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801bb20:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bb24:	eb06 0b09 	add.w	fp, r6, r9
 801bb28:	f816 9009 	ldrb.w	r9, [r6, r9]
 801bb2c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801bb30:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801bb34:	f805 9c05 	strb.w	r9, [r5, #-5]
 801bb38:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bb3c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801bb40:	e7dc      	b.n	801bafc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bb42:	2500      	movs	r5, #0
 801bb44:	eba3 0905 	sub.w	r9, r3, r5
 801bb48:	f1b9 0f00 	cmp.w	r9, #0
 801bb4c:	dc3c      	bgt.n	801bbc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801bb4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb56:	441c      	add	r4, r3
 801bb58:	9b01      	ldr	r3, [sp, #4]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	dd5a      	ble.n	801bc14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801bb5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb68:	eeb0 6a62 	vmov.f32	s12, s5
 801bb6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb78:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bb7c:	eeb0 6a43 	vmov.f32	s12, s6
 801bb80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb84:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bb88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bba0:	ee12 2a90 	vmov	r2, s5
 801bba4:	eef0 2a47 	vmov.f32	s5, s14
 801bba8:	fb92 fcf3 	sdiv	ip, r2, r3
 801bbac:	ee13 2a10 	vmov	r2, s6
 801bbb0:	eeb0 3a67 	vmov.f32	s6, s15
 801bbb4:	fb92 f7f3 	sdiv	r7, r2, r3
 801bbb8:	9b01      	ldr	r3, [sp, #4]
 801bbba:	9a03      	ldr	r2, [sp, #12]
 801bbbc:	3b01      	subs	r3, #1
 801bbbe:	9301      	str	r3, [sp, #4]
 801bbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbc2:	bf08      	it	eq
 801bbc4:	4613      	moveq	r3, r2
 801bbc6:	e76c      	b.n	801baa2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801bbc8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bbcc:	d41e      	bmi.n	801bc0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bbce:	45f2      	cmp	sl, lr
 801bbd0:	da1c      	bge.n	801bc0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bbd2:	ea5f 4922 	movs.w	r9, r2, asr #16
 801bbd6:	d419      	bmi.n	801bc0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bbd8:	45c1      	cmp	r9, r8
 801bbda:	da17      	bge.n	801bc0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bbdc:	9902      	ldr	r1, [sp, #8]
 801bbde:	fb0e 1909 	mla	r9, lr, r9, r1
 801bbe2:	f819 900a 	ldrb.w	r9, [r9, sl]
 801bbe6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bbea:	f816 b009 	ldrb.w	fp, [r6, r9]
 801bbee:	eb06 0a09 	add.w	sl, r6, r9
 801bbf2:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801bbf6:	f804 b009 	strb.w	fp, [r4, r9]
 801bbfa:	44a1      	add	r9, r4
 801bbfc:	f89a b001 	ldrb.w	fp, [sl, #1]
 801bc00:	f889 b001 	strb.w	fp, [r9, #1]
 801bc04:	f89a a002 	ldrb.w	sl, [sl, #2]
 801bc08:	f889 a002 	strb.w	sl, [r9, #2]
 801bc0c:	4460      	add	r0, ip
 801bc0e:	443a      	add	r2, r7
 801bc10:	3501      	adds	r5, #1
 801bc12:	e797      	b.n	801bb44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801bc14:	b005      	add	sp, #20
 801bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc1a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc1e:	b087      	sub	sp, #28
 801bc20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc24:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801bc26:	9204      	str	r2, [sp, #16]
 801bc28:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801bc2c:	6870      	ldr	r0, [r6, #4]
 801bc2e:	9205      	str	r2, [sp, #20]
 801bc30:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801bc32:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801bc36:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801bc3a:	9101      	str	r1, [sp, #4]
 801bc3c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801bc40:	fb00 2505 	mla	r5, r0, r5, r2
 801bc44:	6832      	ldr	r2, [r6, #0]
 801bc46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc4a:	4415      	add	r5, r2
 801bc4c:	6822      	ldr	r2, [r4, #0]
 801bc4e:	9202      	str	r2, [sp, #8]
 801bc50:	6862      	ldr	r2, [r4, #4]
 801bc52:	3204      	adds	r2, #4
 801bc54:	9203      	str	r2, [sp, #12]
 801bc56:	9a01      	ldr	r2, [sp, #4]
 801bc58:	2a00      	cmp	r2, #0
 801bc5a:	dc03      	bgt.n	801bc64 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801bc5c:	9a04      	ldr	r2, [sp, #16]
 801bc5e:	2a00      	cmp	r2, #0
 801bc60:	f340 8124 	ble.w	801beac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801bc64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc66:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bc6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc6c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	dd0e      	ble.n	801bc92 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801bc74:	1422      	asrs	r2, r4, #16
 801bc76:	d405      	bmi.n	801bc84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801bc78:	4572      	cmp	r2, lr
 801bc7a:	da03      	bge.n	801bc84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801bc7c:	1402      	asrs	r2, r0, #16
 801bc7e:	d401      	bmi.n	801bc84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801bc80:	4542      	cmp	r2, r8
 801bc82:	db07      	blt.n	801bc94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801bc84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc86:	3b01      	subs	r3, #1
 801bc88:	3503      	adds	r5, #3
 801bc8a:	4414      	add	r4, r2
 801bc8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc8e:	4410      	add	r0, r2
 801bc90:	e7ee      	b.n	801bc70 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801bc92:	d010      	beq.n	801bcb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801bc94:	1e5a      	subs	r2, r3, #1
 801bc96:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bc98:	fb06 4602 	mla	r6, r6, r2, r4
 801bc9c:	1436      	asrs	r6, r6, #16
 801bc9e:	d546      	bpl.n	801bd2e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801bca0:	4699      	mov	r9, r3
 801bca2:	462f      	mov	r7, r5
 801bca4:	f1b9 0f00 	cmp.w	r9, #0
 801bca8:	f300 80a5 	bgt.w	801bdf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801bcac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bcb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bcb4:	441d      	add	r5, r3
 801bcb6:	9b01      	ldr	r3, [sp, #4]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	f340 80f7 	ble.w	801beac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801bcbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bcc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bcc8:	eeb0 6a62 	vmov.f32	s12, s5
 801bccc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bcd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcd8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bcdc:	eeb0 6a43 	vmov.f32	s12, s6
 801bce0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bce4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bce8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bcec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bcf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcfc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd00:	ee12 2a90 	vmov	r2, s5
 801bd04:	eef0 2a47 	vmov.f32	s5, s14
 801bd08:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd0c:	ee13 2a10 	vmov	r2, s6
 801bd10:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd14:	eeb0 3a67 	vmov.f32	s6, s15
 801bd18:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd1c:	9314      	str	r3, [sp, #80]	; 0x50
 801bd1e:	9b01      	ldr	r3, [sp, #4]
 801bd20:	9a04      	ldr	r2, [sp, #16]
 801bd22:	3b01      	subs	r3, #1
 801bd24:	9301      	str	r3, [sp, #4]
 801bd26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd28:	bf08      	it	eq
 801bd2a:	4613      	moveq	r3, r2
 801bd2c:	e793      	b.n	801bc56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bd2e:	4576      	cmp	r6, lr
 801bd30:	dab6      	bge.n	801bca0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bd32:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bd34:	fb06 0202 	mla	r2, r6, r2, r0
 801bd38:	1412      	asrs	r2, r2, #16
 801bd3a:	d4b1      	bmi.n	801bca0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bd3c:	4542      	cmp	r2, r8
 801bd3e:	daaf      	bge.n	801bca0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bd40:	1cef      	adds	r7, r5, #3
 801bd42:	4699      	mov	r9, r3
 801bd44:	f1b9 0f00 	cmp.w	r9, #0
 801bd48:	ddb0      	ble.n	801bcac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bd4a:	9902      	ldr	r1, [sp, #8]
 801bd4c:	1402      	asrs	r2, r0, #16
 801bd4e:	1426      	asrs	r6, r4, #16
 801bd50:	fb0e 1202 	mla	r2, lr, r2, r1
 801bd54:	9903      	ldr	r1, [sp, #12]
 801bd56:	5d92      	ldrb	r2, [r2, r6]
 801bd58:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bd5c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bd60:	d041      	beq.n	801bde6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bd62:	9a05      	ldr	r2, [sp, #20]
 801bd64:	fa5f fb86 	uxtb.w	fp, r6
 801bd68:	fb02 fc0c 	mul.w	ip, r2, ip
 801bd6c:	f10c 0201 	add.w	r2, ip, #1
 801bd70:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bd74:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801bd78:	1212      	asrs	r2, r2, #8
 801bd7a:	fa1f fa82 	uxth.w	sl, r2
 801bd7e:	43d2      	mvns	r2, r2
 801bd80:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd84:	b2d2      	uxtb	r2, r2
 801bd86:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd8a:	fa1f fc8c 	uxth.w	ip, ip
 801bd8e:	f10c 0b01 	add.w	fp, ip, #1
 801bd92:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd96:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bd9a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bd9e:	fb1b fb0a 	smulbb	fp, fp, sl
 801bda2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bda6:	fb16 fa0a 	smulbb	sl, r6, sl
 801bdaa:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bdae:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bdb2:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bdb6:	fb06 aa02 	mla	sl, r6, r2, sl
 801bdba:	fb0c bc02 	mla	ip, ip, r2, fp
 801bdbe:	fa1f fa8a 	uxth.w	sl, sl
 801bdc2:	fa1f fc8c 	uxth.w	ip, ip
 801bdc6:	f10a 0601 	add.w	r6, sl, #1
 801bdca:	f10c 0b01 	add.w	fp, ip, #1
 801bdce:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bdd2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bdd6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bdda:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bdde:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bde2:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bde6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bde8:	3703      	adds	r7, #3
 801bdea:	f109 39ff 	add.w	r9, r9, #4294967295
 801bdee:	4414      	add	r4, r2
 801bdf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdf2:	4410      	add	r0, r2
 801bdf4:	e7a6      	b.n	801bd44 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bdf6:	1426      	asrs	r6, r4, #16
 801bdf8:	d450      	bmi.n	801be9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bdfa:	4576      	cmp	r6, lr
 801bdfc:	da4e      	bge.n	801be9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bdfe:	1402      	asrs	r2, r0, #16
 801be00:	d44c      	bmi.n	801be9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801be02:	4542      	cmp	r2, r8
 801be04:	da4a      	bge.n	801be9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801be06:	9902      	ldr	r1, [sp, #8]
 801be08:	fb0e 1202 	mla	r2, lr, r2, r1
 801be0c:	9903      	ldr	r1, [sp, #12]
 801be0e:	5d92      	ldrb	r2, [r2, r6]
 801be10:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801be14:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801be18:	d040      	beq.n	801be9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801be1a:	9a05      	ldr	r2, [sp, #20]
 801be1c:	fa5f fb86 	uxtb.w	fp, r6
 801be20:	fb02 fc0c 	mul.w	ip, r2, ip
 801be24:	f10c 0201 	add.w	r2, ip, #1
 801be28:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801be2c:	f897 c000 	ldrb.w	ip, [r7]
 801be30:	1212      	asrs	r2, r2, #8
 801be32:	fa1f fa82 	uxth.w	sl, r2
 801be36:	43d2      	mvns	r2, r2
 801be38:	fb1b fb0a 	smulbb	fp, fp, sl
 801be3c:	b2d2      	uxtb	r2, r2
 801be3e:	fb0c bc02 	mla	ip, ip, r2, fp
 801be42:	fa1f fc8c 	uxth.w	ip, ip
 801be46:	f10c 0b01 	add.w	fp, ip, #1
 801be4a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801be4e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801be52:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801be56:	fb1b fb0a 	smulbb	fp, fp, sl
 801be5a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801be5e:	fb16 fa0a 	smulbb	sl, r6, sl
 801be62:	78be      	ldrb	r6, [r7, #2]
 801be64:	f887 c000 	strb.w	ip, [r7]
 801be68:	f897 c001 	ldrb.w	ip, [r7, #1]
 801be6c:	fb06 aa02 	mla	sl, r6, r2, sl
 801be70:	fb0c bc02 	mla	ip, ip, r2, fp
 801be74:	fa1f fa8a 	uxth.w	sl, sl
 801be78:	fa1f fc8c 	uxth.w	ip, ip
 801be7c:	f10a 0601 	add.w	r6, sl, #1
 801be80:	f10c 0b01 	add.w	fp, ip, #1
 801be84:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801be88:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801be8c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be90:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801be94:	f887 a002 	strb.w	sl, [r7, #2]
 801be98:	f887 c001 	strb.w	ip, [r7, #1]
 801be9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be9e:	3703      	adds	r7, #3
 801bea0:	f109 39ff 	add.w	r9, r9, #4294967295
 801bea4:	4414      	add	r4, r2
 801bea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bea8:	4410      	add	r0, r2
 801beaa:	e6fb      	b.n	801bca4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801beac:	b007      	add	sp, #28
 801beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801beb2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801beb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb6:	b085      	sub	sp, #20
 801beb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bebc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bebe:	9203      	str	r2, [sp, #12]
 801bec0:	6870      	ldr	r0, [r6, #4]
 801bec2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bec4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bec8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801becc:	9100      	str	r1, [sp, #0]
 801bece:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bed2:	fb00 2404 	mla	r4, r0, r4, r2
 801bed6:	6832      	ldr	r2, [r6, #0]
 801bed8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bedc:	4414      	add	r4, r2
 801bede:	682a      	ldr	r2, [r5, #0]
 801bee0:	9201      	str	r2, [sp, #4]
 801bee2:	686a      	ldr	r2, [r5, #4]
 801bee4:	3204      	adds	r2, #4
 801bee6:	9202      	str	r2, [sp, #8]
 801bee8:	9a00      	ldr	r2, [sp, #0]
 801beea:	2a00      	cmp	r2, #0
 801beec:	dc03      	bgt.n	801bef6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801beee:	9a03      	ldr	r2, [sp, #12]
 801bef0:	2a00      	cmp	r2, #0
 801bef2:	f340 8131 	ble.w	801c158 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bef8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801befc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801befe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	dd0e      	ble.n	801bf24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bf06:	1405      	asrs	r5, r0, #16
 801bf08:	d405      	bmi.n	801bf16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf0a:	4575      	cmp	r5, lr
 801bf0c:	da03      	bge.n	801bf16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf0e:	1415      	asrs	r5, r2, #16
 801bf10:	d401      	bmi.n	801bf16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf12:	4545      	cmp	r5, r8
 801bf14:	db07      	blt.n	801bf26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bf16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bf18:	3b01      	subs	r3, #1
 801bf1a:	3403      	adds	r4, #3
 801bf1c:	4428      	add	r0, r5
 801bf1e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bf20:	442a      	add	r2, r5
 801bf22:	e7ee      	b.n	801bf02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801bf24:	d06f      	beq.n	801c006 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801bf26:	1e5d      	subs	r5, r3, #1
 801bf28:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bf2a:	fb06 0605 	mla	r6, r6, r5, r0
 801bf2e:	1436      	asrs	r6, r6, #16
 801bf30:	d460      	bmi.n	801bff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf32:	4576      	cmp	r6, lr
 801bf34:	da5e      	bge.n	801bff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf36:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bf38:	fb06 2505 	mla	r5, r6, r5, r2
 801bf3c:	142d      	asrs	r5, r5, #16
 801bf3e:	d459      	bmi.n	801bff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf40:	4545      	cmp	r5, r8
 801bf42:	da57      	bge.n	801bff4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf44:	1ce5      	adds	r5, r4, #3
 801bf46:	469a      	mov	sl, r3
 801bf48:	f1ba 0f00 	cmp.w	sl, #0
 801bf4c:	dd56      	ble.n	801bffc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801bf4e:	9901      	ldr	r1, [sp, #4]
 801bf50:	1416      	asrs	r6, r2, #16
 801bf52:	1407      	asrs	r7, r0, #16
 801bf54:	fb0e 1606 	mla	r6, lr, r6, r1
 801bf58:	9902      	ldr	r1, [sp, #8]
 801bf5a:	5df6      	ldrb	r6, [r6, r7]
 801bf5c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801bf60:	0e37      	lsrs	r7, r6, #24
 801bf62:	2fff      	cmp	r7, #255	; 0xff
 801bf64:	f000 80ef 	beq.w	801c146 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801bf68:	fa5f fc87 	uxtb.w	ip, r7
 801bf6c:	b3d7      	cbz	r7, 801bfe4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bf6e:	fa1f f78c 	uxth.w	r7, ip
 801bf72:	ea6f 0c0c 	mvn.w	ip, ip
 801bf76:	fa5f fb86 	uxtb.w	fp, r6
 801bf7a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bf7e:	fa5f fc8c 	uxtb.w	ip, ip
 801bf82:	fb1b fb07 	smulbb	fp, fp, r7
 801bf86:	fb09 b90c 	mla	r9, r9, ip, fp
 801bf8a:	fa1f f989 	uxth.w	r9, r9
 801bf8e:	f109 0b01 	add.w	fp, r9, #1
 801bf92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf96:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bf9a:	fb1b fb0c 	smulbb	fp, fp, ip
 801bf9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bfa2:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bfa6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bfaa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bfae:	fb09 b907 	mla	r9, r9, r7, fp
 801bfb2:	fa1f f989 	uxth.w	r9, r9
 801bfb6:	f109 0b01 	add.w	fp, r9, #1
 801bfba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bfbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bfc2:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bfc6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bfca:	fb19 fc0c 	smulbb	ip, r9, ip
 801bfce:	fb06 c607 	mla	r6, r6, r7, ip
 801bfd2:	b2b6      	uxth	r6, r6
 801bfd4:	f106 0c01 	add.w	ip, r6, #1
 801bfd8:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801bfdc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bfe0:	f805 cc01 	strb.w	ip, [r5, #-1]
 801bfe4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bfe6:	3503      	adds	r5, #3
 801bfe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bfec:	4408      	add	r0, r1
 801bfee:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bff0:	440a      	add	r2, r1
 801bff2:	e7a9      	b.n	801bf48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bff4:	2600      	movs	r6, #0
 801bff6:	1b9d      	subs	r5, r3, r6
 801bff8:	2d00      	cmp	r5, #0
 801bffa:	dc40      	bgt.n	801c07e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c004:	441c      	add	r4, r3
 801c006:	9b00      	ldr	r3, [sp, #0]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	f340 80a5 	ble.w	801c158 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c00e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c014:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c018:	eeb0 6a62 	vmov.f32	s12, s5
 801c01c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c020:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c024:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c028:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c02c:	eeb0 6a43 	vmov.f32	s12, s6
 801c030:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c034:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c038:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c03c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c040:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c044:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c048:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c04c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c050:	ee12 2a90 	vmov	r2, s5
 801c054:	eef0 2a47 	vmov.f32	s5, s14
 801c058:	fb92 f3f3 	sdiv	r3, r2, r3
 801c05c:	ee13 2a10 	vmov	r2, s6
 801c060:	9311      	str	r3, [sp, #68]	; 0x44
 801c062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c064:	eeb0 3a67 	vmov.f32	s6, s15
 801c068:	fb92 f3f3 	sdiv	r3, r2, r3
 801c06c:	9312      	str	r3, [sp, #72]	; 0x48
 801c06e:	9b00      	ldr	r3, [sp, #0]
 801c070:	9a03      	ldr	r2, [sp, #12]
 801c072:	3b01      	subs	r3, #1
 801c074:	9300      	str	r3, [sp, #0]
 801c076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c078:	bf08      	it	eq
 801c07a:	4613      	moveq	r3, r2
 801c07c:	e734      	b.n	801bee8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c07e:	1407      	asrs	r7, r0, #16
 801c080:	d450      	bmi.n	801c124 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c082:	4577      	cmp	r7, lr
 801c084:	da4e      	bge.n	801c124 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c086:	1415      	asrs	r5, r2, #16
 801c088:	d44c      	bmi.n	801c124 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c08a:	4545      	cmp	r5, r8
 801c08c:	da4a      	bge.n	801c124 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c08e:	9901      	ldr	r1, [sp, #4]
 801c090:	fb0e 1505 	mla	r5, lr, r5, r1
 801c094:	9902      	ldr	r1, [sp, #8]
 801c096:	5ded      	ldrb	r5, [r5, r7]
 801c098:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c09c:	0e2f      	lsrs	r7, r5, #24
 801c09e:	2fff      	cmp	r7, #255	; 0xff
 801c0a0:	d046      	beq.n	801c130 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c0a2:	fa5f f987 	uxtb.w	r9, r7
 801c0a6:	b3ef      	cbz	r7, 801c124 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c0a8:	fa1f fc89 	uxth.w	ip, r9
 801c0ac:	ea6f 0909 	mvn.w	r9, r9
 801c0b0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c0b4:	fa5f fb85 	uxtb.w	fp, r5
 801c0b8:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c0bc:	fa5f f989 	uxtb.w	r9, r9
 801c0c0:	fb1b fb0c 	smulbb	fp, fp, ip
 801c0c4:	fb0a ba09 	mla	sl, sl, r9, fp
 801c0c8:	fa1f fa8a 	uxth.w	sl, sl
 801c0cc:	f10a 0b01 	add.w	fp, sl, #1
 801c0d0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c0d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c0d8:	f804 a007 	strb.w	sl, [r4, r7]
 801c0dc:	4427      	add	r7, r4
 801c0de:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c0e2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c0e6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c0ea:	fb1b fb09 	smulbb	fp, fp, r9
 801c0ee:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c0f2:	fa1f fa8a 	uxth.w	sl, sl
 801c0f6:	f10a 0b01 	add.w	fp, sl, #1
 801c0fa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c0fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c102:	f887 a001 	strb.w	sl, [r7, #1]
 801c106:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c10a:	fb1a f909 	smulbb	r9, sl, r9
 801c10e:	fb05 950c 	mla	r5, r5, ip, r9
 801c112:	b2ad      	uxth	r5, r5
 801c114:	f105 0901 	add.w	r9, r5, #1
 801c118:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c11c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c120:	f887 9002 	strb.w	r9, [r7, #2]
 801c124:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c126:	3601      	adds	r6, #1
 801c128:	4408      	add	r0, r1
 801c12a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c12c:	440a      	add	r2, r1
 801c12e:	e762      	b.n	801bff6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c130:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c134:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c138:	55e5      	strb	r5, [r4, r7]
 801c13a:	4427      	add	r7, r4
 801c13c:	0c2d      	lsrs	r5, r5, #16
 801c13e:	f887 c001 	strb.w	ip, [r7, #1]
 801c142:	70bd      	strb	r5, [r7, #2]
 801c144:	e7ee      	b.n	801c124 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c146:	0a37      	lsrs	r7, r6, #8
 801c148:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c14c:	0c36      	lsrs	r6, r6, #16
 801c14e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c152:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c156:	e745      	b.n	801bfe4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c158:	b005      	add	sp, #20
 801c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c15e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c15e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c162:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c164:	9201      	str	r2, [sp, #4]
 801c166:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c16a:	6870      	ldr	r0, [r6, #4]
 801c16c:	9200      	str	r2, [sp, #0]
 801c16e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c172:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c176:	fa1f fc85 	uxth.w	ip, r5
 801c17a:	43ed      	mvns	r5, r5
 801c17c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c180:	b2ed      	uxtb	r5, r5
 801c182:	fb00 2404 	mla	r4, r0, r4, r2
 801c186:	6832      	ldr	r2, [r6, #0]
 801c188:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c18c:	4414      	add	r4, r2
 801c18e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c190:	f8d2 8000 	ldr.w	r8, [r2]
 801c194:	2900      	cmp	r1, #0
 801c196:	dc03      	bgt.n	801c1a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c198:	9a01      	ldr	r2, [sp, #4]
 801c19a:	2a00      	cmp	r2, #0
 801c19c:	f340 8104 	ble.w	801c3a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c1a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c1a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c1a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	dd0f      	ble.n	801c1d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c1b0:	1406      	asrs	r6, r0, #16
 801c1b2:	d406      	bmi.n	801c1c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c1b4:	4576      	cmp	r6, lr
 801c1b6:	da04      	bge.n	801c1c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c1b8:	1416      	asrs	r6, r2, #16
 801c1ba:	d402      	bmi.n	801c1c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c1bc:	9f00      	ldr	r7, [sp, #0]
 801c1be:	42be      	cmp	r6, r7
 801c1c0:	db07      	blt.n	801c1d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c1c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c1c4:	3b01      	subs	r3, #1
 801c1c6:	3403      	adds	r4, #3
 801c1c8:	4430      	add	r0, r6
 801c1ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c1cc:	4432      	add	r2, r6
 801c1ce:	e7ed      	b.n	801c1ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c1d0:	d05f      	beq.n	801c292 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c1d2:	1e5e      	subs	r6, r3, #1
 801c1d4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c1d6:	fb07 0706 	mla	r7, r7, r6, r0
 801c1da:	143f      	asrs	r7, r7, #16
 801c1dc:	d450      	bmi.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c1de:	4577      	cmp	r7, lr
 801c1e0:	da4e      	bge.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c1e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c1e4:	fb07 2606 	mla	r6, r7, r6, r2
 801c1e8:	1436      	asrs	r6, r6, #16
 801c1ea:	d449      	bmi.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c1ec:	9f00      	ldr	r7, [sp, #0]
 801c1ee:	42be      	cmp	r6, r7
 801c1f0:	da46      	bge.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c1f2:	1ce6      	adds	r6, r4, #3
 801c1f4:	4699      	mov	r9, r3
 801c1f6:	f1b9 0f00 	cmp.w	r9, #0
 801c1fa:	f106 0603 	add.w	r6, r6, #3
 801c1fe:	dd43      	ble.n	801c288 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c200:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c204:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c208:	1417      	asrs	r7, r2, #16
 801c20a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c20e:	fb1b fb05 	smulbb	fp, fp, r5
 801c212:	fb0e a707 	mla	r7, lr, r7, sl
 801c216:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c21a:	eb08 0a07 	add.w	sl, r8, r7
 801c21e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c222:	fb07 b70c 	mla	r7, r7, ip, fp
 801c226:	b2bf      	uxth	r7, r7
 801c228:	f107 0b01 	add.w	fp, r7, #1
 801c22c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c230:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c234:	fb1b fb05 	smulbb	fp, fp, r5
 801c238:	123f      	asrs	r7, r7, #8
 801c23a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c23e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c242:	fb07 b70c 	mla	r7, r7, ip, fp
 801c246:	b2bf      	uxth	r7, r7
 801c248:	f107 0b01 	add.w	fp, r7, #1
 801c24c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c250:	123f      	asrs	r7, r7, #8
 801c252:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c256:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c25a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c25e:	fb1a fa05 	smulbb	sl, sl, r5
 801c262:	fb07 a70c 	mla	r7, r7, ip, sl
 801c266:	b2bf      	uxth	r7, r7
 801c268:	f107 0a01 	add.w	sl, r7, #1
 801c26c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c270:	123f      	asrs	r7, r7, #8
 801c272:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c276:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c278:	4438      	add	r0, r7
 801c27a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c27c:	443a      	add	r2, r7
 801c27e:	e7ba      	b.n	801c1f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c280:	2700      	movs	r7, #0
 801c282:	1bde      	subs	r6, r3, r7
 801c284:	2e00      	cmp	r6, #0
 801c286:	dc3f      	bgt.n	801c308 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c288:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c28c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c290:	441c      	add	r4, r3
 801c292:	2900      	cmp	r1, #0
 801c294:	f340 8088 	ble.w	801c3a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c29c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c29e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c2a2:	3901      	subs	r1, #1
 801c2a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2a8:	eef0 6a62 	vmov.f32	s13, s5
 801c2ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c2b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2b8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c2bc:	eef0 6a43 	vmov.f32	s13, s6
 801c2c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2c4:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c2c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2e0:	ee12 2a90 	vmov	r2, s5
 801c2e4:	eef0 2a47 	vmov.f32	s5, s14
 801c2e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2ec:	ee13 2a10 	vmov	r2, s6
 801c2f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c2f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2f4:	eeb0 3a67 	vmov.f32	s6, s15
 801c2f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2fc:	9a01      	ldr	r2, [sp, #4]
 801c2fe:	9310      	str	r3, [sp, #64]	; 0x40
 801c300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c302:	bf08      	it	eq
 801c304:	4613      	moveq	r3, r2
 801c306:	e745      	b.n	801c194 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c308:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c30c:	d446      	bmi.n	801c39c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c30e:	45f2      	cmp	sl, lr
 801c310:	da44      	bge.n	801c39c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c312:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c316:	d441      	bmi.n	801c39c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c318:	9e00      	ldr	r6, [sp, #0]
 801c31a:	45b1      	cmp	r9, r6
 801c31c:	da3e      	bge.n	801c39c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c31e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c322:	fb0e a909 	mla	r9, lr, r9, sl
 801c326:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c32a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c32e:	fb1b fb05 	smulbb	fp, fp, r5
 801c332:	eb08 0a09 	add.w	sl, r8, r9
 801c336:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c33a:	fb09 b90c 	mla	r9, r9, ip, fp
 801c33e:	fa1f f989 	uxth.w	r9, r9
 801c342:	f109 0b01 	add.w	fp, r9, #1
 801c346:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c34a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c34e:	f804 9006 	strb.w	r9, [r4, r6]
 801c352:	4426      	add	r6, r4
 801c354:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c358:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c35c:	fb1b fb05 	smulbb	fp, fp, r5
 801c360:	fb09 b90c 	mla	r9, r9, ip, fp
 801c364:	fa1f f989 	uxth.w	r9, r9
 801c368:	f109 0b01 	add.w	fp, r9, #1
 801c36c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c370:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c374:	f886 9001 	strb.w	r9, [r6, #1]
 801c378:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c37c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c380:	fb1a fa05 	smulbb	sl, sl, r5
 801c384:	fb09 a90c 	mla	r9, r9, ip, sl
 801c388:	fa1f f989 	uxth.w	r9, r9
 801c38c:	f109 0a01 	add.w	sl, r9, #1
 801c390:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c394:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c398:	f886 9002 	strb.w	r9, [r6, #2]
 801c39c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c39e:	3701      	adds	r7, #1
 801c3a0:	4430      	add	r0, r6
 801c3a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c3a4:	4432      	add	r2, r6
 801c3a6:	e76c      	b.n	801c282 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c3a8:	b003      	add	sp, #12
 801c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c3ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c3b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c3b8:	9201      	str	r2, [sp, #4]
 801c3ba:	6868      	ldr	r0, [r5, #4]
 801c3bc:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c3c0:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c3c4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c3c8:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c3cc:	fb00 2404 	mla	r4, r0, r4, r2
 801c3d0:	682a      	ldr	r2, [r5, #0]
 801c3d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3d6:	4414      	add	r4, r2
 801c3d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c3da:	f8d2 9000 	ldr.w	r9, [r2]
 801c3de:	2900      	cmp	r1, #0
 801c3e0:	dc03      	bgt.n	801c3ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c3e2:	9a01      	ldr	r2, [sp, #4]
 801c3e4:	2a00      	cmp	r2, #0
 801c3e6:	f340 80a8 	ble.w	801c53a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	dd0c      	ble.n	801c414 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3fa:	1405      	asrs	r5, r0, #16
 801c3fc:	d405      	bmi.n	801c40a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c3fe:	4565      	cmp	r5, ip
 801c400:	da03      	bge.n	801c40a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c402:	1415      	asrs	r5, r2, #16
 801c404:	d401      	bmi.n	801c40a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c406:	4575      	cmp	r5, lr
 801c408:	db05      	blt.n	801c416 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c40a:	4438      	add	r0, r7
 801c40c:	4432      	add	r2, r6
 801c40e:	3b01      	subs	r3, #1
 801c410:	3403      	adds	r4, #3
 801c412:	e7f0      	b.n	801c3f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c414:	d03a      	beq.n	801c48c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c416:	1e5d      	subs	r5, r3, #1
 801c418:	fb07 0805 	mla	r8, r7, r5, r0
 801c41c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c420:	d429      	bmi.n	801c476 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c422:	45e0      	cmp	r8, ip
 801c424:	da27      	bge.n	801c476 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c426:	fb06 2505 	mla	r5, r6, r5, r2
 801c42a:	142d      	asrs	r5, r5, #16
 801c42c:	d423      	bmi.n	801c476 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c42e:	4575      	cmp	r5, lr
 801c430:	da21      	bge.n	801c476 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c432:	f104 0803 	add.w	r8, r4, #3
 801c436:	469a      	mov	sl, r3
 801c438:	f1ba 0f00 	cmp.w	sl, #0
 801c43c:	f108 0803 	add.w	r8, r8, #3
 801c440:	dd1f      	ble.n	801c482 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c442:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c446:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c44a:	1415      	asrs	r5, r2, #16
 801c44c:	4438      	add	r0, r7
 801c44e:	4432      	add	r2, r6
 801c450:	fb0c b505 	mla	r5, ip, r5, fp
 801c454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c458:	eb09 0b05 	add.w	fp, r9, r5
 801c45c:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c460:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c464:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c468:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c46c:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c470:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c474:	e7e0      	b.n	801c438 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c476:	2500      	movs	r5, #0
 801c478:	eba3 0805 	sub.w	r8, r3, r5
 801c47c:	f1b8 0f00 	cmp.w	r8, #0
 801c480:	dc38      	bgt.n	801c4f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c482:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c486:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c48a:	441c      	add	r4, r3
 801c48c:	2900      	cmp	r1, #0
 801c48e:	dd54      	ble.n	801c53a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c490:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c496:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c49a:	3901      	subs	r1, #1
 801c49c:	eeb0 6a62 	vmov.f32	s12, s5
 801c4a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4ac:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c4b0:	eeb0 6a43 	vmov.f32	s12, s6
 801c4b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4b8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c4bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4d4:	ee12 2a90 	vmov	r2, s5
 801c4d8:	eef0 2a47 	vmov.f32	s5, s14
 801c4dc:	fb92 f7f3 	sdiv	r7, r2, r3
 801c4e0:	ee13 2a10 	vmov	r2, s6
 801c4e4:	eeb0 3a67 	vmov.f32	s6, s15
 801c4e8:	fb92 f6f3 	sdiv	r6, r2, r3
 801c4ec:	9a01      	ldr	r2, [sp, #4]
 801c4ee:	bf08      	it	eq
 801c4f0:	4613      	moveq	r3, r2
 801c4f2:	e774      	b.n	801c3de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c4f4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c4f8:	d41b      	bmi.n	801c532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c4fa:	45e2      	cmp	sl, ip
 801c4fc:	da19      	bge.n	801c532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c4fe:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c502:	d416      	bmi.n	801c532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c504:	45f0      	cmp	r8, lr
 801c506:	da14      	bge.n	801c532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c508:	fb0c a808 	mla	r8, ip, r8, sl
 801c50c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c510:	f819 b008 	ldrb.w	fp, [r9, r8]
 801c514:	eb09 0a08 	add.w	sl, r9, r8
 801c518:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801c51c:	f804 b008 	strb.w	fp, [r4, r8]
 801c520:	44a0      	add	r8, r4
 801c522:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c526:	f888 b001 	strb.w	fp, [r8, #1]
 801c52a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c52e:	f888 a002 	strb.w	sl, [r8, #2]
 801c532:	4438      	add	r0, r7
 801c534:	4432      	add	r2, r6
 801c536:	3501      	adds	r5, #1
 801c538:	e79e      	b.n	801c478 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801c53a:	b003      	add	sp, #12
 801c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c540 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c544:	b085      	sub	sp, #20
 801c546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c54a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c54c:	9202      	str	r2, [sp, #8]
 801c54e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c552:	6860      	ldr	r0, [r4, #4]
 801c554:	9203      	str	r2, [sp, #12]
 801c556:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c55a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c55e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c562:	fb00 2505 	mla	r5, r0, r5, r2
 801c566:	6822      	ldr	r2, [r4, #0]
 801c568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c56c:	4415      	add	r5, r2
 801c56e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c570:	6812      	ldr	r2, [r2, #0]
 801c572:	9201      	str	r2, [sp, #4]
 801c574:	2900      	cmp	r1, #0
 801c576:	dc03      	bgt.n	801c580 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c578:	9a02      	ldr	r2, [sp, #8]
 801c57a:	2a00      	cmp	r2, #0
 801c57c:	f340 811c 	ble.w	801c7b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c582:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c588:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	dd0e      	ble.n	801c5ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c590:	1422      	asrs	r2, r4, #16
 801c592:	d405      	bmi.n	801c5a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c594:	4572      	cmp	r2, lr
 801c596:	da03      	bge.n	801c5a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c598:	1402      	asrs	r2, r0, #16
 801c59a:	d401      	bmi.n	801c5a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c59c:	4542      	cmp	r2, r8
 801c59e:	db07      	blt.n	801c5b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c5a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5a2:	3b01      	subs	r3, #1
 801c5a4:	3503      	adds	r5, #3
 801c5a6:	4414      	add	r4, r2
 801c5a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5aa:	4410      	add	r0, r2
 801c5ac:	e7ee      	b.n	801c58c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c5ae:	d072      	beq.n	801c696 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801c5b0:	1e5a      	subs	r2, r3, #1
 801c5b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c5b4:	fb06 4602 	mla	r6, r6, r2, r4
 801c5b8:	1436      	asrs	r6, r6, #16
 801c5ba:	d461      	bmi.n	801c680 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c5bc:	4576      	cmp	r6, lr
 801c5be:	da5f      	bge.n	801c680 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c5c0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c5c2:	fb06 0202 	mla	r2, r6, r2, r0
 801c5c6:	1412      	asrs	r2, r2, #16
 801c5c8:	d45a      	bmi.n	801c680 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c5ca:	4542      	cmp	r2, r8
 801c5cc:	da58      	bge.n	801c680 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c5ce:	1cef      	adds	r7, r5, #3
 801c5d0:	4699      	mov	r9, r3
 801c5d2:	f1b9 0f00 	cmp.w	r9, #0
 801c5d6:	dd59      	ble.n	801c68c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c5d8:	1426      	asrs	r6, r4, #16
 801c5da:	1402      	asrs	r2, r0, #16
 801c5dc:	fb0e 6202 	mla	r2, lr, r2, r6
 801c5e0:	9e01      	ldr	r6, [sp, #4]
 801c5e2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c5e6:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c5ea:	d041      	beq.n	801c670 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801c5ec:	9a03      	ldr	r2, [sp, #12]
 801c5ee:	fa5f fb86 	uxtb.w	fp, r6
 801c5f2:	fb02 fc0c 	mul.w	ip, r2, ip
 801c5f6:	f10c 0201 	add.w	r2, ip, #1
 801c5fa:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c5fe:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c602:	1212      	asrs	r2, r2, #8
 801c604:	fa1f fa82 	uxth.w	sl, r2
 801c608:	43d2      	mvns	r2, r2
 801c60a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c60e:	b2d2      	uxtb	r2, r2
 801c610:	fb0c bc02 	mla	ip, ip, r2, fp
 801c614:	fa1f fc8c 	uxth.w	ip, ip
 801c618:	f10c 0b01 	add.w	fp, ip, #1
 801c61c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c620:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c624:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c628:	fb1b fb0a 	smulbb	fp, fp, sl
 801c62c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c630:	fb16 fa0a 	smulbb	sl, r6, sl
 801c634:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c638:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c63c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c640:	fb06 aa02 	mla	sl, r6, r2, sl
 801c644:	fb0c bc02 	mla	ip, ip, r2, fp
 801c648:	fa1f fa8a 	uxth.w	sl, sl
 801c64c:	fa1f fc8c 	uxth.w	ip, ip
 801c650:	f10a 0601 	add.w	r6, sl, #1
 801c654:	f10c 0b01 	add.w	fp, ip, #1
 801c658:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c65c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c660:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c664:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c668:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c66c:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c670:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c672:	3703      	adds	r7, #3
 801c674:	f109 39ff 	add.w	r9, r9, #4294967295
 801c678:	4414      	add	r4, r2
 801c67a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c67c:	4410      	add	r0, r2
 801c67e:	e7a8      	b.n	801c5d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c680:	f04f 0c00 	mov.w	ip, #0
 801c684:	eba3 020c 	sub.w	r2, r3, ip
 801c688:	2a00      	cmp	r2, #0
 801c68a:	dc3d      	bgt.n	801c708 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801c68c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c694:	441d      	add	r5, r3
 801c696:	2900      	cmp	r1, #0
 801c698:	f340 808e 	ble.w	801c7b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c69c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6a6:	3901      	subs	r1, #1
 801c6a8:	eeb0 6a62 	vmov.f32	s12, s5
 801c6ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c6bc:	eeb0 6a43 	vmov.f32	s12, s6
 801c6c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6c4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6e0:	ee12 2a90 	vmov	r2, s5
 801c6e4:	eef0 2a47 	vmov.f32	s5, s14
 801c6e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6ec:	ee13 2a10 	vmov	r2, s6
 801c6f0:	9311      	str	r3, [sp, #68]	; 0x44
 801c6f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6f4:	eeb0 3a67 	vmov.f32	s6, s15
 801c6f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6fc:	9a02      	ldr	r2, [sp, #8]
 801c6fe:	9312      	str	r3, [sp, #72]	; 0x48
 801c700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c702:	bf08      	it	eq
 801c704:	4613      	moveq	r3, r2
 801c706:	e735      	b.n	801c574 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801c708:	1426      	asrs	r6, r4, #16
 801c70a:	d44e      	bmi.n	801c7aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c70c:	4576      	cmp	r6, lr
 801c70e:	da4c      	bge.n	801c7aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c710:	1402      	asrs	r2, r0, #16
 801c712:	d44a      	bmi.n	801c7aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c714:	4542      	cmp	r2, r8
 801c716:	da48      	bge.n	801c7aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c718:	fb0e 6202 	mla	r2, lr, r2, r6
 801c71c:	9e01      	ldr	r6, [sp, #4]
 801c71e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c722:	0e3a      	lsrs	r2, r7, #24
 801c724:	d041      	beq.n	801c7aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c726:	9e03      	ldr	r6, [sp, #12]
 801c728:	fa5f fb87 	uxtb.w	fp, r7
 801c72c:	4372      	muls	r2, r6
 801c72e:	1c56      	adds	r6, r2, #1
 801c730:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c734:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801c738:	1212      	asrs	r2, r2, #8
 801c73a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c73e:	fa1f fa82 	uxth.w	sl, r2
 801c742:	43d2      	mvns	r2, r2
 801c744:	fb1b fb0a 	smulbb	fp, fp, sl
 801c748:	b2d2      	uxtb	r2, r2
 801c74a:	fb09 b902 	mla	r9, r9, r2, fp
 801c74e:	fa1f f989 	uxth.w	r9, r9
 801c752:	f109 0b01 	add.w	fp, r9, #1
 801c756:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c75a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c75e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c762:	fb1b fb0a 	smulbb	fp, fp, sl
 801c766:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c76a:	fb17 fa0a 	smulbb	sl, r7, sl
 801c76e:	f805 9006 	strb.w	r9, [r5, r6]
 801c772:	442e      	add	r6, r5
 801c774:	78b7      	ldrb	r7, [r6, #2]
 801c776:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c77a:	fb07 aa02 	mla	sl, r7, r2, sl
 801c77e:	fb09 b902 	mla	r9, r9, r2, fp
 801c782:	fa1f fa8a 	uxth.w	sl, sl
 801c786:	fa1f f989 	uxth.w	r9, r9
 801c78a:	f10a 0701 	add.w	r7, sl, #1
 801c78e:	f109 0b01 	add.w	fp, r9, #1
 801c792:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c796:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c79a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c79e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7a2:	f886 a002 	strb.w	sl, [r6, #2]
 801c7a6:	f886 9001 	strb.w	r9, [r6, #1]
 801c7aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c7ac:	f10c 0c01 	add.w	ip, ip, #1
 801c7b0:	4414      	add	r4, r2
 801c7b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7b4:	4410      	add	r0, r2
 801c7b6:	e765      	b.n	801c684 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c7b8:	b005      	add	sp, #20
 801c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c7be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c2:	b085      	sub	sp, #20
 801c7c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7ca:	9203      	str	r2, [sp, #12]
 801c7cc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c7d0:	6860      	ldr	r0, [r4, #4]
 801c7d2:	9201      	str	r2, [sp, #4]
 801c7d4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c7d8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c7dc:	fb00 2505 	mla	r5, r0, r5, r2
 801c7e0:	6822      	ldr	r2, [r4, #0]
 801c7e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7e6:	4415      	add	r5, r2
 801c7e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c7ea:	6812      	ldr	r2, [r2, #0]
 801c7ec:	9202      	str	r2, [sp, #8]
 801c7ee:	2900      	cmp	r1, #0
 801c7f0:	dc03      	bgt.n	801c7fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c7f2:	9a03      	ldr	r2, [sp, #12]
 801c7f4:	2a00      	cmp	r2, #0
 801c7f6:	f340 8122 	ble.w	801ca3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c7fc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c800:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c802:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c806:	2b00      	cmp	r3, #0
 801c808:	dd0f      	ble.n	801c82a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c80a:	1422      	asrs	r2, r4, #16
 801c80c:	d406      	bmi.n	801c81c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c80e:	4572      	cmp	r2, lr
 801c810:	da04      	bge.n	801c81c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c812:	1402      	asrs	r2, r0, #16
 801c814:	d402      	bmi.n	801c81c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c816:	9e01      	ldr	r6, [sp, #4]
 801c818:	42b2      	cmp	r2, r6
 801c81a:	db07      	blt.n	801c82c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c81c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c81e:	3b01      	subs	r3, #1
 801c820:	3503      	adds	r5, #3
 801c822:	4414      	add	r4, r2
 801c824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c826:	4410      	add	r0, r2
 801c828:	e7ed      	b.n	801c806 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c82a:	d06e      	beq.n	801c90a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c82c:	1e5a      	subs	r2, r3, #1
 801c82e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c830:	fb06 4602 	mla	r6, r6, r2, r4
 801c834:	1436      	asrs	r6, r6, #16
 801c836:	d45d      	bmi.n	801c8f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c838:	4576      	cmp	r6, lr
 801c83a:	da5b      	bge.n	801c8f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c83c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c83e:	fb06 0202 	mla	r2, r6, r2, r0
 801c842:	1412      	asrs	r2, r2, #16
 801c844:	d456      	bmi.n	801c8f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c846:	9e01      	ldr	r6, [sp, #4]
 801c848:	42b2      	cmp	r2, r6
 801c84a:	da53      	bge.n	801c8f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c84c:	1cee      	adds	r6, r5, #3
 801c84e:	469a      	mov	sl, r3
 801c850:	f1ba 0f00 	cmp.w	sl, #0
 801c854:	dd54      	ble.n	801c900 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c856:	1427      	asrs	r7, r4, #16
 801c858:	1402      	asrs	r2, r0, #16
 801c85a:	fb0e 7202 	mla	r2, lr, r2, r7
 801c85e:	9f02      	ldr	r7, [sp, #8]
 801c860:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c864:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801c868:	d03c      	beq.n	801c8e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c86a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c86e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c872:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c876:	fa5f f28c 	uxtb.w	r2, ip
 801c87a:	b2ff      	uxtb	r7, r7
 801c87c:	f000 80d8 	beq.w	801ca30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c880:	fa1f f882 	uxth.w	r8, r2
 801c884:	43d2      	mvns	r2, r2
 801c886:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c88a:	fb17 f708 	smulbb	r7, r7, r8
 801c88e:	b2d2      	uxtb	r2, r2
 801c890:	fb19 f908 	smulbb	r9, r9, r8
 801c894:	fb0c 7702 	mla	r7, ip, r2, r7
 801c898:	fb1b f808 	smulbb	r8, fp, r8
 801c89c:	b2bf      	uxth	r7, r7
 801c89e:	f107 0c01 	add.w	ip, r7, #1
 801c8a2:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c8a6:	123f      	asrs	r7, r7, #8
 801c8a8:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c8ac:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c8b0:	fb07 9902 	mla	r9, r7, r2, r9
 801c8b4:	fa1f f989 	uxth.w	r9, r9
 801c8b8:	f109 0701 	add.w	r7, r9, #1
 801c8bc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c8c0:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c8c4:	fb07 8802 	mla	r8, r7, r2, r8
 801c8c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8cc:	fa1f f888 	uxth.w	r8, r8
 801c8d0:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c8d4:	f108 0201 	add.w	r2, r8, #1
 801c8d8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c8dc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c8e0:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c8e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8e6:	3603      	adds	r6, #3
 801c8e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c8ec:	4414      	add	r4, r2
 801c8ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c8f0:	4410      	add	r0, r2
 801c8f2:	e7ad      	b.n	801c850 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c8f4:	f04f 0c00 	mov.w	ip, #0
 801c8f8:	eba3 020c 	sub.w	r2, r3, ip
 801c8fc:	2a00      	cmp	r2, #0
 801c8fe:	dc3d      	bgt.n	801c97c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c900:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c904:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c908:	441d      	add	r5, r3
 801c90a:	2900      	cmp	r1, #0
 801c90c:	f340 8097 	ble.w	801ca3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c910:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c916:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c91a:	3901      	subs	r1, #1
 801c91c:	eeb0 6a62 	vmov.f32	s12, s5
 801c920:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c924:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c928:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c92c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c930:	eeb0 6a43 	vmov.f32	s12, s6
 801c934:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c938:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c93c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c940:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c944:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c948:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c94c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c950:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c954:	ee12 2a90 	vmov	r2, s5
 801c958:	eef0 2a47 	vmov.f32	s5, s14
 801c95c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c960:	ee13 2a10 	vmov	r2, s6
 801c964:	9311      	str	r3, [sp, #68]	; 0x44
 801c966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c968:	eeb0 3a67 	vmov.f32	s6, s15
 801c96c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c970:	9a03      	ldr	r2, [sp, #12]
 801c972:	9312      	str	r3, [sp, #72]	; 0x48
 801c974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c976:	bf08      	it	eq
 801c978:	4613      	moveq	r3, r2
 801c97a:	e738      	b.n	801c7ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c97c:	1426      	asrs	r6, r4, #16
 801c97e:	d448      	bmi.n	801ca12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c980:	4576      	cmp	r6, lr
 801c982:	da46      	bge.n	801ca12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c984:	1402      	asrs	r2, r0, #16
 801c986:	d444      	bmi.n	801ca12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c988:	9f01      	ldr	r7, [sp, #4]
 801c98a:	42ba      	cmp	r2, r7
 801c98c:	da41      	bge.n	801ca12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c98e:	fb0e 6202 	mla	r2, lr, r2, r6
 801c992:	9e02      	ldr	r6, [sp, #8]
 801c994:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c998:	0e3a      	lsrs	r2, r7, #24
 801c99a:	d03a      	beq.n	801ca12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c99c:	2aff      	cmp	r2, #255	; 0xff
 801c99e:	b2d6      	uxtb	r6, r2
 801c9a0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c9a4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c9a8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c9ac:	b2ff      	uxtb	r7, r7
 801c9ae:	d037      	beq.n	801ca20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c9b0:	fa1f f986 	uxth.w	r9, r6
 801c9b4:	4462      	add	r2, ip
 801c9b6:	43f6      	mvns	r6, r6
 801c9b8:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c9bc:	fb17 f709 	smulbb	r7, r7, r9
 801c9c0:	fb1a fa09 	smulbb	sl, sl, r9
 801c9c4:	b2f6      	uxtb	r6, r6
 801c9c6:	fb1b f909 	smulbb	r9, fp, r9
 801c9ca:	fb08 7706 	mla	r7, r8, r6, r7
 801c9ce:	b2bf      	uxth	r7, r7
 801c9d0:	f107 0801 	add.w	r8, r7, #1
 801c9d4:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c9d8:	123f      	asrs	r7, r7, #8
 801c9da:	54af      	strb	r7, [r5, r2]
 801c9dc:	442a      	add	r2, r5
 801c9de:	7857      	ldrb	r7, [r2, #1]
 801c9e0:	fb07 aa06 	mla	sl, r7, r6, sl
 801c9e4:	fa1f fa8a 	uxth.w	sl, sl
 801c9e8:	f10a 0701 	add.w	r7, sl, #1
 801c9ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c9f0:	7897      	ldrb	r7, [r2, #2]
 801c9f2:	fb07 9906 	mla	r9, r7, r6, r9
 801c9f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9fa:	fa1f f989 	uxth.w	r9, r9
 801c9fe:	f882 a001 	strb.w	sl, [r2, #1]
 801ca02:	f109 0601 	add.w	r6, r9, #1
 801ca06:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ca0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca0e:	f882 9002 	strb.w	r9, [r2, #2]
 801ca12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ca14:	f10c 0c01 	add.w	ip, ip, #1
 801ca18:	4414      	add	r4, r2
 801ca1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca1c:	4410      	add	r0, r2
 801ca1e:	e76b      	b.n	801c8f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801ca20:	4462      	add	r2, ip
 801ca22:	54af      	strb	r7, [r5, r2]
 801ca24:	442a      	add	r2, r5
 801ca26:	f882 a001 	strb.w	sl, [r2, #1]
 801ca2a:	f882 b002 	strb.w	fp, [r2, #2]
 801ca2e:	e7f0      	b.n	801ca12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ca30:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ca34:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ca38:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ca3c:	e752      	b.n	801c8e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ca3e:	b005      	add	sp, #20
 801ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca48:	b087      	sub	sp, #28
 801ca4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca4e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ca50:	9204      	str	r2, [sp, #16]
 801ca52:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ca56:	6860      	ldr	r0, [r4, #4]
 801ca58:	9205      	str	r2, [sp, #20]
 801ca5a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ca5e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ca62:	9101      	str	r1, [sp, #4]
 801ca64:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ca68:	fb00 2505 	mla	r5, r0, r5, r2
 801ca6c:	6822      	ldr	r2, [r4, #0]
 801ca6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca72:	4415      	add	r5, r2
 801ca74:	f10e 0201 	add.w	r2, lr, #1
 801ca78:	f022 0201 	bic.w	r2, r2, #1
 801ca7c:	9202      	str	r2, [sp, #8]
 801ca7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ca80:	6812      	ldr	r2, [r2, #0]
 801ca82:	9203      	str	r2, [sp, #12]
 801ca84:	9a01      	ldr	r2, [sp, #4]
 801ca86:	2a00      	cmp	r2, #0
 801ca88:	dc03      	bgt.n	801ca92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801ca8a:	9a04      	ldr	r2, [sp, #16]
 801ca8c:	2a00      	cmp	r2, #0
 801ca8e:	f340 8132 	ble.w	801ccf6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ca92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ca94:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ca98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca9a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	dd0e      	ble.n	801cac0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801caa2:	1422      	asrs	r2, r4, #16
 801caa4:	d405      	bmi.n	801cab2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801caa6:	4596      	cmp	lr, r2
 801caa8:	dd03      	ble.n	801cab2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801caaa:	1402      	asrs	r2, r0, #16
 801caac:	d401      	bmi.n	801cab2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801caae:	4542      	cmp	r2, r8
 801cab0:	db07      	blt.n	801cac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801cab2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cab4:	3b01      	subs	r3, #1
 801cab6:	3503      	adds	r5, #3
 801cab8:	4414      	add	r4, r2
 801caba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cabc:	4410      	add	r0, r2
 801cabe:	e7ee      	b.n	801ca9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801cac0:	d010      	beq.n	801cae4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cac2:	1e5a      	subs	r2, r3, #1
 801cac4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cac6:	fb06 4602 	mla	r6, r6, r2, r4
 801caca:	1436      	asrs	r6, r6, #16
 801cacc:	d546      	bpl.n	801cb5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801cace:	4699      	mov	r9, r3
 801cad0:	462e      	mov	r6, r5
 801cad2:	f1b9 0f00 	cmp.w	r9, #0
 801cad6:	f300 80ac 	bgt.w	801cc32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801cada:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cae2:	441d      	add	r5, r3
 801cae4:	9b01      	ldr	r3, [sp, #4]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	f340 8105 	ble.w	801ccf6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801caec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801caf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801caf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801caf6:	eeb0 6a62 	vmov.f32	s12, s5
 801cafa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cafe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb06:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cb0a:	eeb0 6a43 	vmov.f32	s12, s6
 801cb0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb12:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cb16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb2e:	ee12 2a90 	vmov	r2, s5
 801cb32:	eef0 2a47 	vmov.f32	s5, s14
 801cb36:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb3a:	ee13 2a10 	vmov	r2, s6
 801cb3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb42:	eeb0 3a67 	vmov.f32	s6, s15
 801cb46:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb4a:	9314      	str	r3, [sp, #80]	; 0x50
 801cb4c:	9b01      	ldr	r3, [sp, #4]
 801cb4e:	9a04      	ldr	r2, [sp, #16]
 801cb50:	3b01      	subs	r3, #1
 801cb52:	9301      	str	r3, [sp, #4]
 801cb54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb56:	bf08      	it	eq
 801cb58:	4613      	moveq	r3, r2
 801cb5a:	e793      	b.n	801ca84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801cb5c:	45b6      	cmp	lr, r6
 801cb5e:	ddb6      	ble.n	801cace <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cb60:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801cb62:	fb06 0202 	mla	r2, r6, r2, r0
 801cb66:	1412      	asrs	r2, r2, #16
 801cb68:	d4b1      	bmi.n	801cace <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cb6a:	4542      	cmp	r2, r8
 801cb6c:	daaf      	bge.n	801cace <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cb6e:	1cee      	adds	r6, r5, #3
 801cb70:	4699      	mov	r9, r3
 801cb72:	f1b9 0f00 	cmp.w	r9, #0
 801cb76:	ddb0      	ble.n	801cada <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801cb78:	1422      	asrs	r2, r4, #16
 801cb7a:	9902      	ldr	r1, [sp, #8]
 801cb7c:	1407      	asrs	r7, r0, #16
 801cb7e:	fb01 2707 	mla	r7, r1, r7, r2
 801cb82:	9903      	ldr	r1, [sp, #12]
 801cb84:	087a      	lsrs	r2, r7, #1
 801cb86:	5c8a      	ldrb	r2, [r1, r2]
 801cb88:	07f9      	lsls	r1, r7, #31
 801cb8a:	bf54      	ite	pl
 801cb8c:	f002 020f 	andpl.w	r2, r2, #15
 801cb90:	1112      	asrmi	r2, r2, #4
 801cb92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb96:	b2d2      	uxtb	r2, r2
 801cb98:	2a00      	cmp	r2, #0
 801cb9a:	d042      	beq.n	801cc22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801cb9c:	4957      	ldr	r1, [pc, #348]	; (801ccfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801cb9e:	680f      	ldr	r7, [r1, #0]
 801cba0:	9905      	ldr	r1, [sp, #20]
 801cba2:	fa5f fb87 	uxtb.w	fp, r7
 801cba6:	434a      	muls	r2, r1
 801cba8:	f102 0c01 	add.w	ip, r2, #1
 801cbac:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801cbb0:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801cbb4:	1212      	asrs	r2, r2, #8
 801cbb6:	fa1f fa82 	uxth.w	sl, r2
 801cbba:	43d2      	mvns	r2, r2
 801cbbc:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbc0:	b2d2      	uxtb	r2, r2
 801cbc2:	fb0c bc02 	mla	ip, ip, r2, fp
 801cbc6:	fa1f fc8c 	uxth.w	ip, ip
 801cbca:	f10c 0b01 	add.w	fp, ip, #1
 801cbce:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cbd2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cbd6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cbda:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbde:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cbe2:	fb17 fa0a 	smulbb	sl, r7, sl
 801cbe6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801cbea:	f806 cc03 	strb.w	ip, [r6, #-3]
 801cbee:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801cbf2:	fb07 aa02 	mla	sl, r7, r2, sl
 801cbf6:	fb0c bc02 	mla	ip, ip, r2, fp
 801cbfa:	fa1f fa8a 	uxth.w	sl, sl
 801cbfe:	fa1f fc8c 	uxth.w	ip, ip
 801cc02:	f10a 0701 	add.w	r7, sl, #1
 801cc06:	f10c 0b01 	add.w	fp, ip, #1
 801cc0a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cc0e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cc12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc16:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cc1a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801cc1e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801cc22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc24:	3603      	adds	r6, #3
 801cc26:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc2a:	4414      	add	r4, r2
 801cc2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc2e:	4410      	add	r0, r2
 801cc30:	e79f      	b.n	801cb72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801cc32:	1422      	asrs	r2, r4, #16
 801cc34:	d457      	bmi.n	801cce6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc36:	4596      	cmp	lr, r2
 801cc38:	dd55      	ble.n	801cce6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc3a:	1407      	asrs	r7, r0, #16
 801cc3c:	d453      	bmi.n	801cce6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc3e:	4547      	cmp	r7, r8
 801cc40:	da51      	bge.n	801cce6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc42:	9902      	ldr	r1, [sp, #8]
 801cc44:	fb07 2701 	mla	r7, r7, r1, r2
 801cc48:	9903      	ldr	r1, [sp, #12]
 801cc4a:	087a      	lsrs	r2, r7, #1
 801cc4c:	07ff      	lsls	r7, r7, #31
 801cc4e:	5c8a      	ldrb	r2, [r1, r2]
 801cc50:	bf54      	ite	pl
 801cc52:	f002 020f 	andpl.w	r2, r2, #15
 801cc56:	1112      	asrmi	r2, r2, #4
 801cc58:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cc5c:	b2d2      	uxtb	r2, r2
 801cc5e:	2a00      	cmp	r2, #0
 801cc60:	d041      	beq.n	801cce6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc62:	4926      	ldr	r1, [pc, #152]	; (801ccfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801cc64:	680f      	ldr	r7, [r1, #0]
 801cc66:	9905      	ldr	r1, [sp, #20]
 801cc68:	fa5f fb87 	uxtb.w	fp, r7
 801cc6c:	434a      	muls	r2, r1
 801cc6e:	f102 0c01 	add.w	ip, r2, #1
 801cc72:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801cc76:	f896 c000 	ldrb.w	ip, [r6]
 801cc7a:	1212      	asrs	r2, r2, #8
 801cc7c:	fa1f fa82 	uxth.w	sl, r2
 801cc80:	43d2      	mvns	r2, r2
 801cc82:	fb1b fb0a 	smulbb	fp, fp, sl
 801cc86:	b2d2      	uxtb	r2, r2
 801cc88:	fb0c bc02 	mla	ip, ip, r2, fp
 801cc8c:	fa1f fc8c 	uxth.w	ip, ip
 801cc90:	f10c 0b01 	add.w	fp, ip, #1
 801cc94:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cc98:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cc9c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cca0:	fb1b fb0a 	smulbb	fp, fp, sl
 801cca4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cca8:	fb17 fa0a 	smulbb	sl, r7, sl
 801ccac:	78b7      	ldrb	r7, [r6, #2]
 801ccae:	f886 c000 	strb.w	ip, [r6]
 801ccb2:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ccb6:	fb07 aa02 	mla	sl, r7, r2, sl
 801ccba:	fb0c bc02 	mla	ip, ip, r2, fp
 801ccbe:	fa1f fa8a 	uxth.w	sl, sl
 801ccc2:	fa1f fc8c 	uxth.w	ip, ip
 801ccc6:	f10a 0701 	add.w	r7, sl, #1
 801ccca:	f10c 0b01 	add.w	fp, ip, #1
 801ccce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ccd2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ccd6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ccda:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ccde:	f886 a002 	strb.w	sl, [r6, #2]
 801cce2:	f886 c001 	strb.w	ip, [r6, #1]
 801cce6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cce8:	3603      	adds	r6, #3
 801ccea:	f109 39ff 	add.w	r9, r9, #4294967295
 801ccee:	4414      	add	r4, r2
 801ccf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ccf2:	4410      	add	r0, r2
 801ccf4:	e6ed      	b.n	801cad2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801ccf6:	b007      	add	sp, #28
 801ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccfc:	2000c530 	.word	0x2000c530

0801cd00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd04:	b087      	sub	sp, #28
 801cd06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cd0c:	9205      	str	r2, [sp, #20]
 801cd0e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801cd12:	6860      	ldr	r0, [r4, #4]
 801cd14:	9202      	str	r2, [sp, #8]
 801cd16:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801cd1a:	9101      	str	r1, [sp, #4]
 801cd1c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801cd20:	fb00 2606 	mla	r6, r0, r6, r2
 801cd24:	6822      	ldr	r2, [r4, #0]
 801cd26:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd2a:	4416      	add	r6, r2
 801cd2c:	f108 0201 	add.w	r2, r8, #1
 801cd30:	f022 0201 	bic.w	r2, r2, #1
 801cd34:	9203      	str	r2, [sp, #12]
 801cd36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cd38:	6812      	ldr	r2, [r2, #0]
 801cd3a:	9204      	str	r2, [sp, #16]
 801cd3c:	9a01      	ldr	r2, [sp, #4]
 801cd3e:	2a00      	cmp	r2, #0
 801cd40:	dc03      	bgt.n	801cd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801cd42:	9a05      	ldr	r2, [sp, #20]
 801cd44:	2a00      	cmp	r2, #0
 801cd46:	f340 813a 	ble.w	801cfbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cd4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd4c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801cd50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd52:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	dd0f      	ble.n	801cd7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cd5a:	142a      	asrs	r2, r5, #16
 801cd5c:	d406      	bmi.n	801cd6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cd5e:	4590      	cmp	r8, r2
 801cd60:	dd04      	ble.n	801cd6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cd62:	1422      	asrs	r2, r4, #16
 801cd64:	d402      	bmi.n	801cd6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cd66:	9802      	ldr	r0, [sp, #8]
 801cd68:	4282      	cmp	r2, r0
 801cd6a:	db07      	blt.n	801cd7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801cd6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd6e:	3b01      	subs	r3, #1
 801cd70:	3603      	adds	r6, #3
 801cd72:	4415      	add	r5, r2
 801cd74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cd76:	4414      	add	r4, r2
 801cd78:	e7ed      	b.n	801cd56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801cd7a:	d073      	beq.n	801ce64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801cd7c:	1e5a      	subs	r2, r3, #1
 801cd7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cd80:	fb00 5002 	mla	r0, r0, r2, r5
 801cd84:	1400      	asrs	r0, r0, #16
 801cd86:	d464      	bmi.n	801ce52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cd88:	4580      	cmp	r8, r0
 801cd8a:	dd62      	ble.n	801ce52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cd8c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cd8e:	fb00 4202 	mla	r2, r0, r2, r4
 801cd92:	1412      	asrs	r2, r2, #16
 801cd94:	d45d      	bmi.n	801ce52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cd96:	9802      	ldr	r0, [sp, #8]
 801cd98:	4282      	cmp	r2, r0
 801cd9a:	da5a      	bge.n	801ce52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cd9c:	1cf0      	adds	r0, r6, #3
 801cd9e:	469a      	mov	sl, r3
 801cda0:	f1ba 0f00 	cmp.w	sl, #0
 801cda4:	dd59      	ble.n	801ce5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801cda6:	142a      	asrs	r2, r5, #16
 801cda8:	9903      	ldr	r1, [sp, #12]
 801cdaa:	1427      	asrs	r7, r4, #16
 801cdac:	fb01 2707 	mla	r7, r1, r7, r2
 801cdb0:	9904      	ldr	r1, [sp, #16]
 801cdb2:	087a      	lsrs	r2, r7, #1
 801cdb4:	5c8a      	ldrb	r2, [r1, r2]
 801cdb6:	07f9      	lsls	r1, r7, #31
 801cdb8:	bf54      	ite	pl
 801cdba:	f002 020f 	andpl.w	r2, r2, #15
 801cdbe:	1112      	asrmi	r2, r2, #4
 801cdc0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cdc4:	b2d2      	uxtb	r2, r2
 801cdc6:	2a00      	cmp	r2, #0
 801cdc8:	d03b      	beq.n	801ce42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cdca:	497e      	ldr	r1, [pc, #504]	; (801cfc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cdcc:	2aff      	cmp	r2, #255	; 0xff
 801cdce:	680f      	ldr	r7, [r1, #0]
 801cdd0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cdd4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cdd8:	b2ff      	uxtb	r7, r7
 801cdda:	f000 80e9 	beq.w	801cfb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801cdde:	fa1f fe82 	uxth.w	lr, r2
 801cde2:	43d2      	mvns	r2, r2
 801cde4:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801cde8:	fb17 f70e 	smulbb	r7, r7, lr
 801cdec:	b2d2      	uxtb	r2, r2
 801cdee:	fb19 f90e 	smulbb	r9, r9, lr
 801cdf2:	fb0c 7702 	mla	r7, ip, r2, r7
 801cdf6:	fb1b fe0e 	smulbb	lr, fp, lr
 801cdfa:	b2bf      	uxth	r7, r7
 801cdfc:	f107 0c01 	add.w	ip, r7, #1
 801ce00:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ce04:	123f      	asrs	r7, r7, #8
 801ce06:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ce0a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801ce0e:	fb07 9902 	mla	r9, r7, r2, r9
 801ce12:	fa1f f989 	uxth.w	r9, r9
 801ce16:	f109 0701 	add.w	r7, r9, #1
 801ce1a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ce1e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801ce22:	fb07 ee02 	mla	lr, r7, r2, lr
 801ce26:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce2a:	fa1f fe8e 	uxth.w	lr, lr
 801ce2e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ce32:	f10e 0201 	add.w	r2, lr, #1
 801ce36:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ce3a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce3e:	f800 ec01 	strb.w	lr, [r0, #-1]
 801ce42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce44:	3003      	adds	r0, #3
 801ce46:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ce4a:	4415      	add	r5, r2
 801ce4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ce4e:	4414      	add	r4, r2
 801ce50:	e7a6      	b.n	801cda0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ce52:	2700      	movs	r7, #0
 801ce54:	1bda      	subs	r2, r3, r7
 801ce56:	2a00      	cmp	r2, #0
 801ce58:	dc40      	bgt.n	801cedc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801ce5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce62:	441e      	add	r6, r3
 801ce64:	9b01      	ldr	r3, [sp, #4]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	f340 80a9 	ble.w	801cfbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801ce6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ce72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce76:	eeb0 6a62 	vmov.f32	s12, s5
 801ce7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce86:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ce8a:	eeb0 6a43 	vmov.f32	s12, s6
 801ce8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce92:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ce96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cea2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cea6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ceaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ceae:	ee12 2a90 	vmov	r2, s5
 801ceb2:	eef0 2a47 	vmov.f32	s5, s14
 801ceb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ceba:	ee13 2a10 	vmov	r2, s6
 801cebe:	9313      	str	r3, [sp, #76]	; 0x4c
 801cec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cec2:	eeb0 3a67 	vmov.f32	s6, s15
 801cec6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ceca:	9314      	str	r3, [sp, #80]	; 0x50
 801cecc:	9b01      	ldr	r3, [sp, #4]
 801cece:	9a05      	ldr	r2, [sp, #20]
 801ced0:	3b01      	subs	r3, #1
 801ced2:	9301      	str	r3, [sp, #4]
 801ced4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ced6:	bf08      	it	eq
 801ced8:	4613      	moveq	r3, r2
 801ceda:	e72f      	b.n	801cd3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cedc:	142a      	asrs	r2, r5, #16
 801cede:	d458      	bmi.n	801cf92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cee0:	4590      	cmp	r8, r2
 801cee2:	dd56      	ble.n	801cf92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cee4:	1420      	asrs	r0, r4, #16
 801cee6:	d454      	bmi.n	801cf92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cee8:	9902      	ldr	r1, [sp, #8]
 801ceea:	4288      	cmp	r0, r1
 801ceec:	da51      	bge.n	801cf92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ceee:	9903      	ldr	r1, [sp, #12]
 801cef0:	fb00 2001 	mla	r0, r0, r1, r2
 801cef4:	9904      	ldr	r1, [sp, #16]
 801cef6:	0842      	lsrs	r2, r0, #1
 801cef8:	07c0      	lsls	r0, r0, #31
 801cefa:	5c8a      	ldrb	r2, [r1, r2]
 801cefc:	bf54      	ite	pl
 801cefe:	f002 020f 	andpl.w	r2, r2, #15
 801cf02:	1112      	asrmi	r2, r2, #4
 801cf04:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cf08:	b2d2      	uxtb	r2, r2
 801cf0a:	2a00      	cmp	r2, #0
 801cf0c:	d041      	beq.n	801cf92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cf0e:	492d      	ldr	r1, [pc, #180]	; (801cfc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cf10:	2aff      	cmp	r2, #255	; 0xff
 801cf12:	6808      	ldr	r0, [r1, #0]
 801cf14:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cf18:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cf1c:	fa5f fc80 	uxtb.w	ip, r0
 801cf20:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cf24:	d03b      	beq.n	801cf9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801cf26:	fa1f f982 	uxth.w	r9, r2
 801cf2a:	4438      	add	r0, r7
 801cf2c:	43d2      	mvns	r2, r2
 801cf2e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cf32:	fb1c fc09 	smulbb	ip, ip, r9
 801cf36:	fb1a fa09 	smulbb	sl, sl, r9
 801cf3a:	b2d2      	uxtb	r2, r2
 801cf3c:	fb1b f909 	smulbb	r9, fp, r9
 801cf40:	fb0e cc02 	mla	ip, lr, r2, ip
 801cf44:	fa1f fc8c 	uxth.w	ip, ip
 801cf48:	f10c 0e01 	add.w	lr, ip, #1
 801cf4c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cf50:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf54:	f806 c000 	strb.w	ip, [r6, r0]
 801cf58:	4430      	add	r0, r6
 801cf5a:	f890 c001 	ldrb.w	ip, [r0, #1]
 801cf5e:	fb0c aa02 	mla	sl, ip, r2, sl
 801cf62:	fa1f fa8a 	uxth.w	sl, sl
 801cf66:	f10a 0c01 	add.w	ip, sl, #1
 801cf6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cf6e:	f890 c002 	ldrb.w	ip, [r0, #2]
 801cf72:	fb0c 9902 	mla	r9, ip, r2, r9
 801cf76:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf7a:	fa1f f989 	uxth.w	r9, r9
 801cf7e:	f880 a001 	strb.w	sl, [r0, #1]
 801cf82:	f109 0201 	add.w	r2, r9, #1
 801cf86:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cf8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf8e:	f880 9002 	strb.w	r9, [r0, #2]
 801cf92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cf94:	3701      	adds	r7, #1
 801cf96:	4415      	add	r5, r2
 801cf98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cf9a:	4414      	add	r4, r2
 801cf9c:	e75a      	b.n	801ce54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801cf9e:	4438      	add	r0, r7
 801cfa0:	f806 c000 	strb.w	ip, [r6, r0]
 801cfa4:	4430      	add	r0, r6
 801cfa6:	f880 a001 	strb.w	sl, [r0, #1]
 801cfaa:	f880 b002 	strb.w	fp, [r0, #2]
 801cfae:	e7f0      	b.n	801cf92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cfb0:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cfb4:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cfb8:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cfbc:	e741      	b.n	801ce42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cfbe:	b007      	add	sp, #28
 801cfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfc4:	2000c530 	.word	0x2000c530

0801cfc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cfc8:	4770      	bx	lr

0801cfca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cfca:	4770      	bx	lr

0801cfcc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cfcc:	4770      	bx	lr

0801cfce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cfce:	4770      	bx	lr

0801cfd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cfd0:	4770      	bx	lr

0801cfd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cfd2:	4770      	bx	lr

0801cfd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cfd4:	4770      	bx	lr

0801cfd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cfd6:	4770      	bx	lr

0801cfd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cfd8:	4770      	bx	lr

0801cfda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cfda:	4770      	bx	lr

0801cfdc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cfdc:	4770      	bx	lr

0801cfde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cfde:	4770      	bx	lr

0801cfe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cfe0:	4770      	bx	lr

0801cfe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cfe2:	4770      	bx	lr

0801cfe4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cfe4:	4770      	bx	lr

0801cfe6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cfe6:	4770      	bx	lr

0801cfe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cfe8:	4770      	bx	lr

0801cfea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cfea:	4770      	bx	lr

0801cfec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cfec:	4770      	bx	lr

0801cfee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cfee:	4770      	bx	lr

0801cff0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cff0:	2bff      	cmp	r3, #255	; 0xff
 801cff2:	b508      	push	{r3, lr}
 801cff4:	d04f      	beq.n	801d096 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cff6:	2a2c      	cmp	r2, #44	; 0x2c
 801cff8:	d032      	beq.n	801d060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801cffa:	d80f      	bhi.n	801d01c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801cffc:	2a08      	cmp	r2, #8
 801cffe:	d046      	beq.n	801d08e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d000:	d805      	bhi.n	801d00e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d002:	2a04      	cmp	r2, #4
 801d004:	d041      	beq.n	801d08a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d006:	2a05      	cmp	r2, #5
 801d008:	d03d      	beq.n	801d086 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d00a:	2000      	movs	r0, #0
 801d00c:	e027      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d00e:	2a0a      	cmp	r2, #10
 801d010:	d03d      	beq.n	801d08e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d012:	d301      	bcc.n	801d018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d014:	2a0b      	cmp	r2, #11
 801d016:	d1f8      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d018:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d01a:	e020      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d01c:	2a30      	cmp	r2, #48	; 0x30
 801d01e:	d038      	beq.n	801d092 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d020:	d808      	bhi.n	801d034 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d022:	2a2e      	cmp	r2, #46	; 0x2e
 801d024:	684b      	ldr	r3, [r1, #4]
 801d026:	d029      	beq.n	801d07c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d028:	d90b      	bls.n	801d042 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d02a:	781b      	ldrb	r3, [r3, #0]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d1ec      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d030:	6a00      	ldr	r0, [r0, #32]
 801d032:	e014      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d034:	2a32      	cmp	r2, #50	; 0x32
 801d036:	d02c      	beq.n	801d092 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d038:	d301      	bcc.n	801d03e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d03a:	2a33      	cmp	r2, #51	; 0x33
 801d03c:	d1e5      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d03e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d040:	e00d      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d042:	781b      	ldrb	r3, [r3, #0]
 801d044:	2b01      	cmp	r3, #1
 801d046:	d009      	beq.n	801d05c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d048:	d3f2      	bcc.n	801d030 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d04a:	2b02      	cmp	r3, #2
 801d04c:	d1dd      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d04e:	4b39      	ldr	r3, [pc, #228]	; (801d134 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d050:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801d054:	4a38      	ldr	r2, [pc, #224]	; (801d138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d056:	4839      	ldr	r0, [pc, #228]	; (801d13c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d058:	f007 ff3e 	bl	8024ed8 <__assert_func>
 801d05c:	6900      	ldr	r0, [r0, #16]
 801d05e:	bd08      	pop	{r3, pc}
 801d060:	684b      	ldr	r3, [r1, #4]
 801d062:	781b      	ldrb	r3, [r3, #0]
 801d064:	2b01      	cmp	r3, #1
 801d066:	d007      	beq.n	801d078 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d068:	d30b      	bcc.n	801d082 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d06a:	2b02      	cmp	r3, #2
 801d06c:	d1cd      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d06e:	4b31      	ldr	r3, [pc, #196]	; (801d134 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d070:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801d074:	4a30      	ldr	r2, [pc, #192]	; (801d138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d076:	e7ee      	b.n	801d056 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d078:	6880      	ldr	r0, [r0, #8]
 801d07a:	e7f0      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d07c:	781b      	ldrb	r3, [r3, #0]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d1c3      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d082:	6980      	ldr	r0, [r0, #24]
 801d084:	e7eb      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d086:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d088:	e7e9      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d08a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d08c:	e7e7      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d08e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d090:	e7e5      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d092:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d094:	e7e3      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d096:	2a2c      	cmp	r2, #44	; 0x2c
 801d098:	d030      	beq.n	801d0fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d09a:	d80f      	bhi.n	801d0bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d09c:	2a08      	cmp	r2, #8
 801d09e:	d044      	beq.n	801d12a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d0a0:	d805      	bhi.n	801d0ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d0a2:	2a04      	cmp	r2, #4
 801d0a4:	d03f      	beq.n	801d126 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d0a6:	2a05      	cmp	r2, #5
 801d0a8:	d1af      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d0aa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d0ac:	e7d7      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d0ae:	2a0a      	cmp	r2, #10
 801d0b0:	d03b      	beq.n	801d12a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d0b2:	d301      	bcc.n	801d0b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d0b4:	2a0b      	cmp	r2, #11
 801d0b6:	d1a8      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d0b8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d0ba:	e7d0      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d0bc:	2a30      	cmp	r2, #48	; 0x30
 801d0be:	d036      	beq.n	801d12e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d0c0:	d808      	bhi.n	801d0d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d0c2:	2a2e      	cmp	r2, #46	; 0x2e
 801d0c4:	684b      	ldr	r3, [r1, #4]
 801d0c6:	d028      	beq.n	801d11a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d0c8:	d90b      	bls.n	801d0e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d0ca:	781b      	ldrb	r3, [r3, #0]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d19c      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d0d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d0d2:	e7c4      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d0d4:	2a32      	cmp	r2, #50	; 0x32
 801d0d6:	d02a      	beq.n	801d12e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d0d8:	d301      	bcc.n	801d0de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d0da:	2a33      	cmp	r2, #51	; 0x33
 801d0dc:	d195      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d0de:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d0e0:	e7bd      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d0e2:	781b      	ldrb	r3, [r3, #0]
 801d0e4:	2b01      	cmp	r3, #1
 801d0e6:	d007      	beq.n	801d0f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d0e8:	d3f2      	bcc.n	801d0d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d0ea:	2b02      	cmp	r3, #2
 801d0ec:	d18d      	bne.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d0ee:	4b11      	ldr	r3, [pc, #68]	; (801d134 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d0f0:	f240 31e1 	movw	r1, #993	; 0x3e1
 801d0f4:	4a10      	ldr	r2, [pc, #64]	; (801d138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d0f6:	e7ae      	b.n	801d056 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d0f8:	6940      	ldr	r0, [r0, #20]
 801d0fa:	e7b0      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d0fc:	684b      	ldr	r3, [r1, #4]
 801d0fe:	781b      	ldrb	r3, [r3, #0]
 801d100:	2b01      	cmp	r3, #1
 801d102:	d008      	beq.n	801d116 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d104:	d30d      	bcc.n	801d122 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d106:	2b02      	cmp	r3, #2
 801d108:	f47f af7f 	bne.w	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d10c:	4b09      	ldr	r3, [pc, #36]	; (801d134 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d10e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801d112:	4a09      	ldr	r2, [pc, #36]	; (801d138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d114:	e79f      	b.n	801d056 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d116:	68c0      	ldr	r0, [r0, #12]
 801d118:	e7a1      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d11a:	781b      	ldrb	r3, [r3, #0]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	f47f af74 	bne.w	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d122:	69c0      	ldr	r0, [r0, #28]
 801d124:	e79b      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d126:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d128:	e799      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d12a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d12c:	e797      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d12e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d130:	e795      	b.n	801d05e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d132:	bf00      	nop
 801d134:	0802978f 	.word	0x0802978f
 801d138:	08029f43 	.word	0x08029f43
 801d13c:	080297db 	.word	0x080297db

0801d140 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d140:	b508      	push	{r3, lr}
 801d142:	4b06      	ldr	r3, [pc, #24]	; (801d15c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d144:	8818      	ldrh	r0, [r3, #0]
 801d146:	b928      	cbnz	r0, 801d154 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d148:	4b05      	ldr	r3, [pc, #20]	; (801d160 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d14a:	21d7      	movs	r1, #215	; 0xd7
 801d14c:	4a05      	ldr	r2, [pc, #20]	; (801d164 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d14e:	4806      	ldr	r0, [pc, #24]	; (801d168 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d150:	f007 fec2 	bl	8024ed8 <__assert_func>
 801d154:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d158:	b280      	uxth	r0, r0
 801d15a:	bd08      	pop	{r3, pc}
 801d15c:	2000c502 	.word	0x2000c502
 801d160:	08029a2a 	.word	0x08029a2a
 801d164:	08029f08 	.word	0x08029f08
 801d168:	08029a6c 	.word	0x08029a6c

0801d16c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d170:	4616      	mov	r6, r2
 801d172:	b087      	sub	sp, #28
 801d174:	461f      	mov	r7, r3
 801d176:	b33b      	cbz	r3, 801d1c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d178:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d17c:	b323      	cbz	r3, 801d1c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d17e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d182:	b30b      	cbz	r3, 801d1c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d184:	6808      	ldr	r0, [r1, #0]
 801d186:	ab04      	add	r3, sp, #16
 801d188:	6849      	ldr	r1, [r1, #4]
 801d18a:	4c5a      	ldr	r4, [pc, #360]	; (801d2f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d18c:	c303      	stmia	r3!, {r0, r1}
 801d18e:	a804      	add	r0, sp, #16
 801d190:	f7fb fd6e 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d194:	6820      	ldr	r0, [r4, #0]
 801d196:	6803      	ldr	r3, [r0, #0]
 801d198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d19a:	4798      	blx	r3
 801d19c:	2fff      	cmp	r7, #255	; 0xff
 801d19e:	4623      	mov	r3, r4
 801d1a0:	d015      	beq.n	801d1ce <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d1a2:	f010 0f08 	tst.w	r0, #8
 801d1a6:	d015      	beq.n	801d1d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801d1a8:	6818      	ldr	r0, [r3, #0]
 801d1aa:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d1ae:	6801      	ldr	r1, [r0, #0]
 801d1b0:	9401      	str	r4, [sp, #4]
 801d1b2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d1b6:	9702      	str	r7, [sp, #8]
 801d1b8:	9400      	str	r4, [sp, #0]
 801d1ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d1be:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d1c0:	4631      	mov	r1, r6
 801d1c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d1c6:	47a0      	blx	r4
 801d1c8:	b007      	add	sp, #28
 801d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ce:	f010 0f02 	tst.w	r0, #2
 801d1d2:	e7e8      	b.n	801d1a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801d1d4:	6818      	ldr	r0, [r3, #0]
 801d1d6:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d1da:	6803      	ldr	r3, [r0, #0]
 801d1dc:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d1e0:	6a1b      	ldr	r3, [r3, #32]
 801d1e2:	4798      	blx	r3
 801d1e4:	4944      	ldr	r1, [pc, #272]	; (801d2f8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d1e6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d1ea:	2fff      	cmp	r7, #255	; 0xff
 801d1ec:	f8b1 c000 	ldrh.w	ip, [r1]
 801d1f0:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d1f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d1f8:	4688      	mov	r8, r1
 801d1fa:	fb0c 2303 	mla	r3, ip, r3, r2
 801d1fe:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d202:	b2f2      	uxtb	r2, r6
 801d204:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d20c:	4418      	add	r0, r3
 801d20e:	d112      	bne.n	801d236 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801d210:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d214:	2100      	movs	r1, #0
 801d216:	42a9      	cmp	r1, r5
 801d218:	da66      	bge.n	801d2e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d21a:	4603      	mov	r3, r0
 801d21c:	2700      	movs	r7, #0
 801d21e:	42a7      	cmp	r7, r4
 801d220:	f103 0303 	add.w	r3, r3, #3
 801d224:	da57      	bge.n	801d2d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801d226:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d22a:	3701      	adds	r7, #1
 801d22c:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d230:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d234:	e7f3      	b.n	801d21e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801d236:	b2bb      	uxth	r3, r7
 801d238:	f04f 0800 	mov.w	r8, #0
 801d23c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d240:	fb0c fc03 	mul.w	ip, ip, r3
 801d244:	fb0e fe03 	mul.w	lr, lr, r3
 801d248:	435a      	muls	r2, r3
 801d24a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d24e:	460f      	mov	r7, r1
 801d250:	b29b      	uxth	r3, r3
 801d252:	45a8      	cmp	r8, r5
 801d254:	da48      	bge.n	801d2e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d256:	4601      	mov	r1, r0
 801d258:	f04f 0a00 	mov.w	sl, #0
 801d25c:	45a2      	cmp	sl, r4
 801d25e:	f101 0103 	add.w	r1, r1, #3
 801d262:	da2f      	bge.n	801d2c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801d264:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d268:	f10a 0a01 	add.w	sl, sl, #1
 801d26c:	fb19 f903 	smulbb	r9, r9, r3
 801d270:	4491      	add	r9, r2
 801d272:	fa1f f989 	uxth.w	r9, r9
 801d276:	f109 0b01 	add.w	fp, r9, #1
 801d27a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d27e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d282:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d286:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d28a:	fb19 f903 	smulbb	r9, r9, r3
 801d28e:	44f1      	add	r9, lr
 801d290:	fa1f f989 	uxth.w	r9, r9
 801d294:	f109 0b01 	add.w	fp, r9, #1
 801d298:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d29c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d2a0:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d2a4:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d2a8:	fb19 f903 	smulbb	r9, r9, r3
 801d2ac:	44e1      	add	r9, ip
 801d2ae:	fa1f f989 	uxth.w	r9, r9
 801d2b2:	f109 0b01 	add.w	fp, r9, #1
 801d2b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d2ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d2be:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d2c2:	e7cb      	b.n	801d25c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d2c4:	8839      	ldrh	r1, [r7, #0]
 801d2c6:	f108 0801 	add.w	r8, r8, #1
 801d2ca:	1b09      	subs	r1, r1, r4
 801d2cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d2d0:	4431      	add	r1, r6
 801d2d2:	4408      	add	r0, r1
 801d2d4:	e7bd      	b.n	801d252 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d2d6:	f8b8 3000 	ldrh.w	r3, [r8]
 801d2da:	3101      	adds	r1, #1
 801d2dc:	1b1b      	subs	r3, r3, r4
 801d2de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2e2:	4433      	add	r3, r6
 801d2e4:	4418      	add	r0, r3
 801d2e6:	e796      	b.n	801d216 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d2e8:	4b02      	ldr	r3, [pc, #8]	; (801d2f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d2ea:	6818      	ldr	r0, [r3, #0]
 801d2ec:	6803      	ldr	r3, [r0, #0]
 801d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2f0:	4798      	blx	r3
 801d2f2:	e769      	b.n	801d1c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d2f4:	2000c508 	.word	0x2000c508
 801d2f8:	2000c502 	.word	0x2000c502

0801d2fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d300:	b08d      	sub	sp, #52	; 0x34
 801d302:	460c      	mov	r4, r1
 801d304:	4617      	mov	r7, r2
 801d306:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d30a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d30e:	2e00      	cmp	r6, #0
 801d310:	d04a      	beq.n	801d3a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d312:	6810      	ldr	r0, [r2, #0]
 801d314:	ad08      	add	r5, sp, #32
 801d316:	6851      	ldr	r1, [r2, #4]
 801d318:	c503      	stmia	r5!, {r0, r1}
 801d31a:	6818      	ldr	r0, [r3, #0]
 801d31c:	ad0a      	add	r5, sp, #40	; 0x28
 801d31e:	6859      	ldr	r1, [r3, #4]
 801d320:	c503      	stmia	r5!, {r0, r1}
 801d322:	a808      	add	r0, sp, #32
 801d324:	f7fb fca4 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d328:	4639      	mov	r1, r7
 801d32a:	a80a      	add	r0, sp, #40	; 0x28
 801d32c:	4f59      	ldr	r7, [pc, #356]	; (801d494 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d32e:	f7fb fc87 	bl	8018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d332:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d336:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d33a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d33e:	6838      	ldr	r0, [r7, #0]
 801d340:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d344:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d348:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d34c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d350:	440c      	add	r4, r1
 801d352:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d356:	440a      	add	r2, r1
 801d358:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d35c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d360:	4413      	add	r3, r2
 801d362:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d366:	6803      	ldr	r3, [r0, #0]
 801d368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d36a:	4798      	blx	r3
 801d36c:	2eff      	cmp	r6, #255	; 0xff
 801d36e:	f000 8089 	beq.w	801d484 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d372:	0743      	lsls	r3, r0, #29
 801d374:	d405      	bmi.n	801d382 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d376:	f1b9 0f00 	cmp.w	r9, #0
 801d37a:	d018      	beq.n	801d3ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d37c:	f010 0f10 	tst.w	r0, #16
 801d380:	d015      	beq.n	801d3ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d382:	6838      	ldr	r0, [r7, #0]
 801d384:	b2ad      	uxth	r5, r5
 801d386:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d38a:	6801      	ldr	r1, [r0, #0]
 801d38c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d390:	9500      	str	r5, [sp, #0]
 801d392:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d396:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d39a:	9602      	str	r6, [sp, #8]
 801d39c:	fa1f f688 	uxth.w	r6, r8
 801d3a0:	9601      	str	r6, [sp, #4]
 801d3a2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d3a4:	4621      	mov	r1, r4
 801d3a6:	47a8      	blx	r5
 801d3a8:	b00d      	add	sp, #52	; 0x34
 801d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ae:	6838      	ldr	r0, [r7, #0]
 801d3b0:	6803      	ldr	r3, [r0, #0]
 801d3b2:	6a1b      	ldr	r3, [r3, #32]
 801d3b4:	4798      	blx	r3
 801d3b6:	4a38      	ldr	r2, [pc, #224]	; (801d498 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d3b8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d3bc:	2eff      	cmp	r6, #255	; 0xff
 801d3be:	8813      	ldrh	r3, [r2, #0]
 801d3c0:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d3c4:	fb0c 1303 	mla	r3, ip, r3, r1
 801d3c8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d3cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3d0:	4418      	add	r0, r3
 801d3d2:	d032      	beq.n	801d43a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d3d4:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d3d8:	f04f 0c00 	mov.w	ip, #0
 801d3dc:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d3e0:	9306      	str	r3, [sp, #24]
 801d3e2:	45c4      	cmp	ip, r8
 801d3e4:	da49      	bge.n	801d47a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d3e6:	4686      	mov	lr, r0
 801d3e8:	46a1      	mov	r9, r4
 801d3ea:	eba9 0304 	sub.w	r3, r9, r4
 801d3ee:	428b      	cmp	r3, r1
 801d3f0:	da13      	bge.n	801d41a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d3f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d3f6:	f89e b000 	ldrb.w	fp, [lr]
 801d3fa:	9307      	str	r3, [sp, #28]
 801d3fc:	9b06      	ldr	r3, [sp, #24]
 801d3fe:	fb1b fb03 	smulbb	fp, fp, r3
 801d402:	9b07      	ldr	r3, [sp, #28]
 801d404:	fb03 b306 	mla	r3, r3, r6, fp
 801d408:	b29b      	uxth	r3, r3
 801d40a:	f103 0b01 	add.w	fp, r3, #1
 801d40e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d412:	121b      	asrs	r3, r3, #8
 801d414:	f80e 3b01 	strb.w	r3, [lr], #1
 801d418:	e7e7      	b.n	801d3ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d41a:	8813      	ldrh	r3, [r2, #0]
 801d41c:	f10c 0c01 	add.w	ip, ip, #1
 801d420:	1b5b      	subs	r3, r3, r5
 801d422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d426:	4453      	add	r3, sl
 801d428:	4418      	add	r0, r3
 801d42a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d42e:	1b5b      	subs	r3, r3, r5
 801d430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d434:	4453      	add	r3, sl
 801d436:	441c      	add	r4, r3
 801d438:	e7d3      	b.n	801d3e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d43a:	2600      	movs	r6, #0
 801d43c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d440:	4546      	cmp	r6, r8
 801d442:	da1a      	bge.n	801d47a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d444:	f100 3eff 	add.w	lr, r0, #4294967295
 801d448:	4623      	mov	r3, r4
 801d44a:	eba3 0904 	sub.w	r9, r3, r4
 801d44e:	4589      	cmp	r9, r1
 801d450:	da04      	bge.n	801d45c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d452:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d456:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d45a:	e7f6      	b.n	801d44a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d45c:	8813      	ldrh	r3, [r2, #0]
 801d45e:	3601      	adds	r6, #1
 801d460:	1b5b      	subs	r3, r3, r5
 801d462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d466:	4463      	add	r3, ip
 801d468:	4418      	add	r0, r3
 801d46a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d46e:	1b5b      	subs	r3, r3, r5
 801d470:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d474:	4463      	add	r3, ip
 801d476:	441c      	add	r4, r3
 801d478:	e7e2      	b.n	801d440 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d47a:	6838      	ldr	r0, [r7, #0]
 801d47c:	6803      	ldr	r3, [r0, #0]
 801d47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d480:	4798      	blx	r3
 801d482:	e791      	b.n	801d3a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d484:	f1b9 0f00 	cmp.w	r9, #0
 801d488:	f47f af78 	bne.w	801d37c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d48c:	f010 0f01 	tst.w	r0, #1
 801d490:	e776      	b.n	801d380 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d492:	bf00      	nop
 801d494:	2000c508 	.word	0x2000c508
 801d498:	2000c502 	.word	0x2000c502

0801d49c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d49c:	b510      	push	{r4, lr}
 801d49e:	4604      	mov	r4, r0
 801d4a0:	2104      	movs	r1, #4
 801d4a2:	f007 fceb 	bl	8024e7c <_ZdlPvj>
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	bd10      	pop	{r4, pc}

0801d4aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d4aa:	b510      	push	{r4, lr}
 801d4ac:	4604      	mov	r4, r0
 801d4ae:	2104      	movs	r1, #4
 801d4b0:	f007 fce4 	bl	8024e7c <_ZdlPvj>
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	bd10      	pop	{r4, pc}

0801d4b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d4b8:	b510      	push	{r4, lr}
 801d4ba:	4604      	mov	r4, r0
 801d4bc:	2104      	movs	r1, #4
 801d4be:	f007 fcdd 	bl	8024e7c <_ZdlPvj>
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	bd10      	pop	{r4, pc}

0801d4c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d4c6:	b510      	push	{r4, lr}
 801d4c8:	4604      	mov	r4, r0
 801d4ca:	2104      	movs	r1, #4
 801d4cc:	f007 fcd6 	bl	8024e7c <_ZdlPvj>
 801d4d0:	4620      	mov	r0, r4
 801d4d2:	bd10      	pop	{r4, pc}

0801d4d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d4d4:	b510      	push	{r4, lr}
 801d4d6:	4604      	mov	r4, r0
 801d4d8:	2104      	movs	r1, #4
 801d4da:	f007 fccf 	bl	8024e7c <_ZdlPvj>
 801d4de:	4620      	mov	r0, r4
 801d4e0:	bd10      	pop	{r4, pc}

0801d4e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d4e2:	b510      	push	{r4, lr}
 801d4e4:	4604      	mov	r4, r0
 801d4e6:	2104      	movs	r1, #4
 801d4e8:	f007 fcc8 	bl	8024e7c <_ZdlPvj>
 801d4ec:	4620      	mov	r0, r4
 801d4ee:	bd10      	pop	{r4, pc}

0801d4f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d4f0:	b510      	push	{r4, lr}
 801d4f2:	4604      	mov	r4, r0
 801d4f4:	2104      	movs	r1, #4
 801d4f6:	f007 fcc1 	bl	8024e7c <_ZdlPvj>
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	bd10      	pop	{r4, pc}

0801d4fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d4fe:	b510      	push	{r4, lr}
 801d500:	4604      	mov	r4, r0
 801d502:	2104      	movs	r1, #4
 801d504:	f007 fcba 	bl	8024e7c <_ZdlPvj>
 801d508:	4620      	mov	r0, r4
 801d50a:	bd10      	pop	{r4, pc}

0801d50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d50c:	b510      	push	{r4, lr}
 801d50e:	4604      	mov	r4, r0
 801d510:	2104      	movs	r1, #4
 801d512:	f007 fcb3 	bl	8024e7c <_ZdlPvj>
 801d516:	4620      	mov	r0, r4
 801d518:	bd10      	pop	{r4, pc}

0801d51a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d51a:	b510      	push	{r4, lr}
 801d51c:	4604      	mov	r4, r0
 801d51e:	2104      	movs	r1, #4
 801d520:	f007 fcac 	bl	8024e7c <_ZdlPvj>
 801d524:	4620      	mov	r0, r4
 801d526:	bd10      	pop	{r4, pc}

0801d528 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d528:	b510      	push	{r4, lr}
 801d52a:	4604      	mov	r4, r0
 801d52c:	2104      	movs	r1, #4
 801d52e:	f007 fca5 	bl	8024e7c <_ZdlPvj>
 801d532:	4620      	mov	r0, r4
 801d534:	bd10      	pop	{r4, pc}

0801d536 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d536:	b510      	push	{r4, lr}
 801d538:	4604      	mov	r4, r0
 801d53a:	2104      	movs	r1, #4
 801d53c:	f007 fc9e 	bl	8024e7c <_ZdlPvj>
 801d540:	4620      	mov	r0, r4
 801d542:	bd10      	pop	{r4, pc}

0801d544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d544:	b510      	push	{r4, lr}
 801d546:	4604      	mov	r4, r0
 801d548:	2104      	movs	r1, #4
 801d54a:	f007 fc97 	bl	8024e7c <_ZdlPvj>
 801d54e:	4620      	mov	r0, r4
 801d550:	bd10      	pop	{r4, pc}

0801d552 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d552:	b510      	push	{r4, lr}
 801d554:	4604      	mov	r4, r0
 801d556:	2104      	movs	r1, #4
 801d558:	f007 fc90 	bl	8024e7c <_ZdlPvj>
 801d55c:	4620      	mov	r0, r4
 801d55e:	bd10      	pop	{r4, pc}

0801d560 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d560:	b510      	push	{r4, lr}
 801d562:	4604      	mov	r4, r0
 801d564:	2104      	movs	r1, #4
 801d566:	f007 fc89 	bl	8024e7c <_ZdlPvj>
 801d56a:	4620      	mov	r0, r4
 801d56c:	bd10      	pop	{r4, pc}

0801d56e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d56e:	b510      	push	{r4, lr}
 801d570:	4604      	mov	r4, r0
 801d572:	2104      	movs	r1, #4
 801d574:	f007 fc82 	bl	8024e7c <_ZdlPvj>
 801d578:	4620      	mov	r0, r4
 801d57a:	bd10      	pop	{r4, pc}

0801d57c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d57c:	b510      	push	{r4, lr}
 801d57e:	4604      	mov	r4, r0
 801d580:	2104      	movs	r1, #4
 801d582:	f007 fc7b 	bl	8024e7c <_ZdlPvj>
 801d586:	4620      	mov	r0, r4
 801d588:	bd10      	pop	{r4, pc}

0801d58a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d58a:	b510      	push	{r4, lr}
 801d58c:	4604      	mov	r4, r0
 801d58e:	2104      	movs	r1, #4
 801d590:	f007 fc74 	bl	8024e7c <_ZdlPvj>
 801d594:	4620      	mov	r0, r4
 801d596:	bd10      	pop	{r4, pc}

0801d598 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d598:	b510      	push	{r4, lr}
 801d59a:	4604      	mov	r4, r0
 801d59c:	2104      	movs	r1, #4
 801d59e:	f007 fc6d 	bl	8024e7c <_ZdlPvj>
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	bd10      	pop	{r4, pc}

0801d5a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d5a6:	b510      	push	{r4, lr}
 801d5a8:	4604      	mov	r4, r0
 801d5aa:	2104      	movs	r1, #4
 801d5ac:	f007 fc66 	bl	8024e7c <_ZdlPvj>
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	bd10      	pop	{r4, pc}

0801d5b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b8:	4d9e      	ldr	r5, [pc, #632]	; (801d834 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801d5ba:	4690      	mov	r8, r2
 801d5bc:	b08f      	sub	sp, #60	; 0x3c
 801d5be:	4604      	mov	r4, r0
 801d5c0:	682a      	ldr	r2, [r5, #0]
 801d5c2:	4689      	mov	r9, r1
 801d5c4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d5c8:	2a02      	cmp	r2, #2
 801d5ca:	d106      	bne.n	801d5da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d5cc:	4b9a      	ldr	r3, [pc, #616]	; (801d838 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801d5ce:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801d5d2:	4a9a      	ldr	r2, [pc, #616]	; (801d83c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d5d4:	489a      	ldr	r0, [pc, #616]	; (801d840 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801d5d6:	f007 fc7f 	bl	8024ed8 <__assert_func>
 801d5da:	ae0e      	add	r6, sp, #56	; 0x38
 801d5dc:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	f7fe f8b3 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5e6:	6823      	ldr	r3, [r4, #0]
 801d5e8:	4607      	mov	r7, r0
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5ee:	4798      	blx	r3
 801d5f0:	4287      	cmp	r7, r0
 801d5f2:	d004      	beq.n	801d5fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d5f4:	4b93      	ldr	r3, [pc, #588]	; (801d844 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d5f6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d5fa:	4a90      	ldr	r2, [pc, #576]	; (801d83c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d5fc:	e7ea      	b.n	801d5d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d5fe:	4630      	mov	r0, r6
 801d600:	f7fe f820 	bl	801b644 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d604:	4607      	mov	r7, r0
 801d606:	b920      	cbnz	r0, 801d612 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d608:	4b8f      	ldr	r3, [pc, #572]	; (801d848 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d60a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d60e:	4a8b      	ldr	r2, [pc, #556]	; (801d83c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d610:	e7e0      	b.n	801d5d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d612:	f8d8 0000 	ldr.w	r0, [r8]
 801d616:	ab06      	add	r3, sp, #24
 801d618:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d61c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d620:	c303      	stmia	r3!, {r0, r1}
 801d622:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d626:	ab08      	add	r3, sp, #32
 801d628:	f8d9 0000 	ldr.w	r0, [r9]
 801d62c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d630:	c303      	stmia	r3!, {r0, r1}
 801d632:	4630      	mov	r0, r6
 801d634:	f7fd fefe 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d638:	4680      	mov	r8, r0
 801d63a:	4630      	mov	r0, r6
 801d63c:	4e83      	ldr	r6, [pc, #524]	; (801d84c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d63e:	f7fd ff33 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d642:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d646:	f10d 0920 	add.w	r9, sp, #32
 801d64a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d64e:	a806      	add	r0, sp, #24
 801d650:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d654:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d658:	f7fb fb0a 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d65c:	4648      	mov	r0, r9
 801d65e:	f7fb fb07 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d662:	a80a      	add	r0, sp, #40	; 0x28
 801d664:	f7fb fb04 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d668:	4b79      	ldr	r3, [pc, #484]	; (801d850 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d66a:	2100      	movs	r1, #0
 801d66c:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d670:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d674:	4648      	mov	r0, r9
 801d676:	910c      	str	r1, [sp, #48]	; 0x30
 801d678:	a90c      	add	r1, sp, #48	; 0x30
 801d67a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d67e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d682:	f7f8 fac9 	bl	8015c18 <_ZN8touchgfx4RectaNERKS0_>
 801d686:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d68a:	9602      	str	r6, [sp, #8]
 801d68c:	f1bc 0f00 	cmp.w	ip, #0
 801d690:	f000 80a4 	beq.w	801d7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d694:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d698:	2e00      	cmp	r6, #0
 801d69a:	f000 809f 	beq.w	801d7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d69e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d6a2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d6a6:	4288      	cmp	r0, r1
 801d6a8:	db36      	blt.n	801d718 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d6aa:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d6ae:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d6b2:	429a      	cmp	r2, r3
 801d6b4:	db30      	blt.n	801d718 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d6b6:	4460      	add	r0, ip
 801d6b8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d6bc:	4461      	add	r1, ip
 801d6be:	b200      	sxth	r0, r0
 801d6c0:	b209      	sxth	r1, r1
 801d6c2:	4288      	cmp	r0, r1
 801d6c4:	dc28      	bgt.n	801d718 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d6c6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d6ca:	4432      	add	r2, r6
 801d6cc:	440b      	add	r3, r1
 801d6ce:	b212      	sxth	r2, r2
 801d6d0:	b21b      	sxth	r3, r3
 801d6d2:	429a      	cmp	r2, r3
 801d6d4:	dc20      	bgt.n	801d718 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d6d6:	6823      	ldr	r3, [r4, #0]
 801d6d8:	4620      	mov	r0, r4
 801d6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6dc:	4798      	blx	r3
 801d6de:	4682      	mov	sl, r0
 801d6e0:	6828      	ldr	r0, [r5, #0]
 801d6e2:	6803      	ldr	r3, [r0, #0]
 801d6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6e6:	4798      	blx	r3
 801d6e8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d6ec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d6f0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d6f4:	9303      	str	r3, [sp, #12]
 801d6f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d6fa:	1a9b      	subs	r3, r3, r2
 801d6fc:	b29b      	uxth	r3, r3
 801d6fe:	b21c      	sxth	r4, r3
 801d700:	2c00      	cmp	r4, #0
 801d702:	dc0e      	bgt.n	801d722 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801d704:	b134      	cbz	r4, 801d714 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801d706:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d70a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d70e:	4413      	add	r3, r2
 801d710:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d714:	463c      	mov	r4, r7
 801d716:	e00b      	b.n	801d730 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801d718:	4b4e      	ldr	r3, [pc, #312]	; (801d854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d71a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d71e:	4a47      	ldr	r2, [pc, #284]	; (801d83c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d720:	e758      	b.n	801d5d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d722:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d726:	ebab 0303 	sub.w	r3, fp, r3
 801d72a:	443c      	add	r4, r7
 801d72c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d730:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d734:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d738:	1a9b      	subs	r3, r3, r2
 801d73a:	b29b      	uxth	r3, r3
 801d73c:	b219      	sxth	r1, r3
 801d73e:	2900      	cmp	r1, #0
 801d740:	dd50      	ble.n	801d7e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801d742:	9a03      	ldr	r2, [sp, #12]
 801d744:	fb02 4401 	mla	r4, r2, r1, r4
 801d748:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d74c:	1ad3      	subs	r3, r2, r3
 801d74e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d752:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d756:	f1bc 0f00 	cmp.w	ip, #0
 801d75a:	dd3f      	ble.n	801d7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d75c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d760:	2e00      	cmp	r6, #0
 801d762:	dd3b      	ble.n	801d7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d764:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d768:	2203      	movs	r2, #3
 801d76a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d76e:	fb0a f801 	mul.w	r8, sl, r1
 801d772:	fb13 8802 	smlabb	r8, r3, r2, r8
 801d776:	9a02      	ldr	r2, [sp, #8]
 801d778:	4480      	add	r8, r0
 801d77a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d77e:	8812      	ldrh	r2, [r2, #0]
 801d780:	4584      	cmp	ip, r0
 801d782:	eba2 0303 	sub.w	r3, r2, r3
 801d786:	bfa8      	it	ge
 801d788:	4684      	movge	ip, r0
 801d78a:	459c      	cmp	ip, r3
 801d78c:	bfa8      	it	ge
 801d78e:	469c      	movge	ip, r3
 801d790:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801d794:	429e      	cmp	r6, r3
 801d796:	bfa8      	it	ge
 801d798:	461e      	movge	r6, r3
 801d79a:	4b2d      	ldr	r3, [pc, #180]	; (801d850 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d79c:	881b      	ldrh	r3, [r3, #0]
 801d79e:	1a59      	subs	r1, r3, r1
 801d7a0:	4633      	mov	r3, r6
 801d7a2:	428e      	cmp	r6, r1
 801d7a4:	bfa8      	it	ge
 801d7a6:	460b      	movge	r3, r1
 801d7a8:	4562      	cmp	r2, ip
 801d7aa:	9302      	str	r3, [sp, #8]
 801d7ac:	d12d      	bne.n	801d80a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d7ae:	455a      	cmp	r2, fp
 801d7b0:	d12b      	bne.n	801d80a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d7b2:	6828      	ldr	r0, [r5, #0]
 801d7b4:	6803      	ldr	r3, [r0, #0]
 801d7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d7b8:	4798      	blx	r3
 801d7ba:	07c3      	lsls	r3, r0, #31
 801d7bc:	d51b      	bpl.n	801d7f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801d7be:	6828      	ldr	r0, [r5, #0]
 801d7c0:	9b02      	ldr	r3, [sp, #8]
 801d7c2:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d7c6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d7ca:	6803      	ldr	r3, [r0, #0]
 801d7cc:	f8cd b000 	str.w	fp, [sp]
 801d7d0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801d7d2:	4623      	mov	r3, r4
 801d7d4:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d7d8:	47a8      	blx	r5
 801d7da:	4607      	mov	r7, r0
 801d7dc:	4638      	mov	r0, r7
 801d7de:	b00f      	add	sp, #60	; 0x3c
 801d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e4:	bf1f      	itttt	ne
 801d7e6:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d7ea:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d7ee:	189b      	addne	r3, r3, r2
 801d7f0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d7f4:	e7ad      	b.n	801d752 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801d7f6:	6828      	ldr	r0, [r5, #0]
 801d7f8:	4642      	mov	r2, r8
 801d7fa:	4621      	mov	r1, r4
 801d7fc:	6803      	ldr	r3, [r0, #0]
 801d7fe:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801d800:	9b02      	ldr	r3, [sp, #8]
 801d802:	fb03 f30a 	mul.w	r3, r3, sl
 801d806:	47a8      	blx	r5
 801d808:	e7e8      	b.n	801d7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d80a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801d80e:	f04f 0900 	mov.w	r9, #0
 801d812:	9b02      	ldr	r3, [sp, #8]
 801d814:	454b      	cmp	r3, r9
 801d816:	dde1      	ble.n	801d7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d818:	6828      	ldr	r0, [r5, #0]
 801d81a:	4642      	mov	r2, r8
 801d81c:	4621      	mov	r1, r4
 801d81e:	44d0      	add	r8, sl
 801d820:	6803      	ldr	r3, [r0, #0]
 801d822:	f109 0901 	add.w	r9, r9, #1
 801d826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d828:	461e      	mov	r6, r3
 801d82a:	465b      	mov	r3, fp
 801d82c:	47b0      	blx	r6
 801d82e:	9b03      	ldr	r3, [sp, #12]
 801d830:	441c      	add	r4, r3
 801d832:	e7ee      	b.n	801d812 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801d834:	2000c508 	.word	0x2000c508
 801d838:	0802980d 	.word	0x0802980d
 801d83c:	08029fed 	.word	0x08029fed
 801d840:	080297db 	.word	0x080297db
 801d844:	080298c1 	.word	0x080298c1
 801d848:	08029916 	.word	0x08029916
 801d84c:	2000c502 	.word	0x2000c502
 801d850:	2000c504 	.word	0x2000c504
 801d854:	08029954 	.word	0x08029954

0801d858 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d858:	4a0b      	ldr	r2, [pc, #44]	; (801d888 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801d85a:	6002      	str	r2, [r0, #0]
 801d85c:	2200      	movs	r2, #0
 801d85e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d862:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d866:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d86a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d86e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d872:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d876:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d87a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d87e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d882:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d886:	4770      	bx	lr
 801d888:	08029c38 	.word	0x08029c38

0801d88c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d890:	b093      	sub	sp, #76	; 0x4c
 801d892:	880c      	ldrh	r4, [r1, #0]
 801d894:	4605      	mov	r5, r0
 801d896:	460f      	mov	r7, r1
 801d898:	4691      	mov	r9, r2
 801d89a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801d89e:	b12c      	cbz	r4, 801d8ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d8a0:	4b71      	ldr	r3, [pc, #452]	; (801da68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d8a2:	2167      	movs	r1, #103	; 0x67
 801d8a4:	4a71      	ldr	r2, [pc, #452]	; (801da6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d8a6:	4872      	ldr	r0, [pc, #456]	; (801da70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d8a8:	f007 fb16 	bl	8024ed8 <__assert_func>
 801d8ac:	6810      	ldr	r0, [r2, #0]
 801d8ae:	ae0e      	add	r6, sp, #56	; 0x38
 801d8b0:	6851      	ldr	r1, [r2, #4]
 801d8b2:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801da78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801d8b6:	c603      	stmia	r6!, {r0, r1}
 801d8b8:	6818      	ldr	r0, [r3, #0]
 801d8ba:	ae10      	add	r6, sp, #64	; 0x40
 801d8bc:	6859      	ldr	r1, [r3, #4]
 801d8be:	c603      	stmia	r6!, {r0, r1}
 801d8c0:	a80e      	add	r0, sp, #56	; 0x38
 801d8c2:	f7fb f9d5 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8c6:	4649      	mov	r1, r9
 801d8c8:	a810      	add	r0, sp, #64	; 0x40
 801d8ca:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801da74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d8ce:	f7fb f9b7 	bl	8018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8d2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d8d6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d8da:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d8de:	f8d9 0000 	ldr.w	r0, [r9]
 801d8e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8e6:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d8ea:	440d      	add	r5, r1
 801d8ec:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d8f0:	440a      	add	r2, r1
 801d8f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d8f6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d8fa:	4413      	add	r3, r2
 801d8fc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d900:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d904:	930b      	str	r3, [sp, #44]	; 0x2c
 801d906:	6803      	ldr	r3, [r0, #0]
 801d908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d90c:	4798      	blx	r3
 801d90e:	2801      	cmp	r0, #1
 801d910:	d11e      	bne.n	801d950 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d912:	220b      	movs	r2, #11
 801d914:	9008      	str	r0, [sp, #32]
 801d916:	b2b6      	uxth	r6, r6
 801d918:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d91c:	9207      	str	r2, [sp, #28]
 801d91e:	4629      	mov	r1, r5
 801d920:	f8ba 2000 	ldrh.w	r2, [sl]
 801d924:	f8cd 8010 	str.w	r8, [sp, #16]
 801d928:	9601      	str	r6, [sp, #4]
 801d92a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d92e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d932:	9203      	str	r2, [sp, #12]
 801d934:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d938:	9202      	str	r2, [sp, #8]
 801d93a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d93e:	9200      	str	r2, [sp, #0]
 801d940:	463a      	mov	r2, r7
 801d942:	f8d9 0000 	ldr.w	r0, [r9]
 801d946:	f7f8 fdb5 	bl	80164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d94a:	b013      	add	sp, #76	; 0x4c
 801d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d950:	f8d9 0000 	ldr.w	r0, [r9]
 801d954:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d958:	6803      	ldr	r3, [r0, #0]
 801d95a:	6a1b      	ldr	r3, [r3, #32]
 801d95c:	4798      	blx	r3
 801d95e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d962:	f8ba 3000 	ldrh.w	r3, [sl]
 801d966:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d96a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d96e:	fb01 2303 	mla	r3, r1, r3, r2
 801d972:	4621      	mov	r1, r4
 801d974:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d978:	4418      	add	r0, r3
 801d97a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d97e:	930c      	str	r3, [sp, #48]	; 0x30
 801d980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d982:	4299      	cmp	r1, r3
 801d984:	da6a      	bge.n	801da5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d986:	1cc2      	adds	r2, r0, #3
 801d988:	46aa      	mov	sl, r5
 801d98a:	ebaa 0305 	sub.w	r3, sl, r5
 801d98e:	429e      	cmp	r6, r3
 801d990:	dd55      	ble.n	801da3e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d992:	2404      	movs	r4, #4
 801d994:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d998:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d99c:	eb07 0e03 	add.w	lr, r7, r3
 801d9a0:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d9a4:	b184      	cbz	r4, 801d9c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d9a6:	2cff      	cmp	r4, #255	; 0xff
 801d9a8:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d9ac:	d10e      	bne.n	801d9cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d9ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d9b2:	d10b      	bne.n	801d9cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d9b4:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d9b8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d9bc:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d9c0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d9c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d9c8:	3203      	adds	r2, #3
 801d9ca:	e7de      	b.n	801d98a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d9cc:	fb08 f404 	mul.w	r4, r8, r4
 801d9d0:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d9d4:	1c63      	adds	r3, r4, #1
 801d9d6:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d9da:	121b      	asrs	r3, r3, #8
 801d9dc:	b29c      	uxth	r4, r3
 801d9de:	43db      	mvns	r3, r3
 801d9e0:	fb1b fb04 	smulbb	fp, fp, r4
 801d9e4:	b2db      	uxtb	r3, r3
 801d9e6:	fb0c bc03 	mla	ip, ip, r3, fp
 801d9ea:	fa1f fc8c 	uxth.w	ip, ip
 801d9ee:	f10c 0b01 	add.w	fp, ip, #1
 801d9f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d9f6:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d9fa:	fb1b fb03 	smulbb	fp, fp, r3
 801d9fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801da02:	f802 cc03 	strb.w	ip, [r2, #-3]
 801da06:	f89e c001 	ldrb.w	ip, [lr, #1]
 801da0a:	fb0c bc04 	mla	ip, ip, r4, fp
 801da0e:	fa1f fc8c 	uxth.w	ip, ip
 801da12:	f10c 0b01 	add.w	fp, ip, #1
 801da16:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801da1a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801da1e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801da22:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801da26:	f89e e002 	ldrb.w	lr, [lr, #2]
 801da2a:	fb1c f303 	smulbb	r3, ip, r3
 801da2e:	fb0e 3304 	mla	r3, lr, r4, r3
 801da32:	b29b      	uxth	r3, r3
 801da34:	1c5c      	adds	r4, r3, #1
 801da36:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801da3a:	121b      	asrs	r3, r3, #8
 801da3c:	e7c2      	b.n	801d9c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801da3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da40:	3101      	adds	r1, #1
 801da42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801da44:	881b      	ldrh	r3, [r3, #0]
 801da46:	1b9b      	subs	r3, r3, r6
 801da48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da4c:	4413      	add	r3, r2
 801da4e:	4418      	add	r0, r3
 801da50:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801da54:	1b9b      	subs	r3, r3, r6
 801da56:	444b      	add	r3, r9
 801da58:	441d      	add	r5, r3
 801da5a:	e791      	b.n	801d980 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801da5c:	4b05      	ldr	r3, [pc, #20]	; (801da74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801da5e:	6818      	ldr	r0, [r3, #0]
 801da60:	6803      	ldr	r3, [r0, #0]
 801da62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da64:	4798      	blx	r3
 801da66:	e770      	b.n	801d94a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801da68:	0802973f 	.word	0x0802973f
 801da6c:	08029e0f 	.word	0x08029e0f
 801da70:	080297db 	.word	0x080297db
 801da74:	2000c508 	.word	0x2000c508
 801da78:	2000c502 	.word	0x2000c502

0801da7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801da7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da80:	4614      	mov	r4, r2
 801da82:	880a      	ldrh	r2, [r1, #0]
 801da84:	b091      	sub	sp, #68	; 0x44
 801da86:	4680      	mov	r8, r0
 801da88:	2a01      	cmp	r2, #1
 801da8a:	460e      	mov	r6, r1
 801da8c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801da90:	d005      	beq.n	801da9e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801da92:	4b6d      	ldr	r3, [pc, #436]	; (801dc48 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801da94:	21b5      	movs	r1, #181	; 0xb5
 801da96:	4a6d      	ldr	r2, [pc, #436]	; (801dc4c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801da98:	486d      	ldr	r0, [pc, #436]	; (801dc50 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801da9a:	f007 fa1d 	bl	8024ed8 <__assert_func>
 801da9e:	6820      	ldr	r0, [r4, #0]
 801daa0:	ad0c      	add	r5, sp, #48	; 0x30
 801daa2:	6861      	ldr	r1, [r4, #4]
 801daa4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801dc54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801daa8:	c503      	stmia	r5!, {r0, r1}
 801daaa:	6818      	ldr	r0, [r3, #0]
 801daac:	ad0e      	add	r5, sp, #56	; 0x38
 801daae:	6859      	ldr	r1, [r3, #4]
 801dab0:	c503      	stmia	r5!, {r0, r1}
 801dab2:	a80c      	add	r0, sp, #48	; 0x30
 801dab4:	f7fb f8dc 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dab8:	4621      	mov	r1, r4
 801daba:	a80e      	add	r0, sp, #56	; 0x38
 801dabc:	f7fb f8c0 	bl	8018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dac0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801dac4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dac8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801dacc:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801dad0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dad4:	eb08 0401 	add.w	r4, r8, r1
 801dad8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801dadc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801dc58 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801dae0:	440a      	add	r2, r1
 801dae2:	f8d8 0000 	ldr.w	r0, [r8]
 801dae6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801daea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801daee:	4413      	add	r3, r2
 801daf0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801daf4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801daf8:	930a      	str	r3, [sp, #40]	; 0x28
 801dafa:	6803      	ldr	r3, [r0, #0]
 801dafc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801db00:	4798      	blx	r3
 801db02:	2801      	cmp	r0, #1
 801db04:	d11e      	bne.n	801db44 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801db06:	220b      	movs	r2, #11
 801db08:	9008      	str	r0, [sp, #32]
 801db0a:	b2ad      	uxth	r5, r5
 801db0c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801db10:	9207      	str	r2, [sp, #28]
 801db12:	4621      	mov	r1, r4
 801db14:	f8b9 2000 	ldrh.w	r2, [r9]
 801db18:	9501      	str	r5, [sp, #4]
 801db1a:	9206      	str	r2, [sp, #24]
 801db1c:	2200      	movs	r2, #0
 801db1e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801db22:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801db26:	9203      	str	r2, [sp, #12]
 801db28:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801db2c:	9202      	str	r2, [sp, #8]
 801db2e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801db32:	9200      	str	r2, [sp, #0]
 801db34:	4632      	mov	r2, r6
 801db36:	f8d8 0000 	ldr.w	r0, [r8]
 801db3a:	f7f8 fcbb 	bl	80164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801db3e:	b011      	add	sp, #68	; 0x44
 801db40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db44:	f8d8 0000 	ldr.w	r0, [r8]
 801db48:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801db4c:	6803      	ldr	r3, [r0, #0]
 801db4e:	6a1b      	ldr	r3, [r3, #32]
 801db50:	4798      	blx	r3
 801db52:	f8b9 3000 	ldrh.w	r3, [r9]
 801db56:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801db5a:	f04f 0e00 	mov.w	lr, #0
 801db5e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801db62:	fa1f f987 	uxth.w	r9, r7
 801db66:	fb01 2303 	mla	r3, r1, r3, r2
 801db6a:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801db6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db72:	b289      	uxth	r1, r1
 801db74:	4418      	add	r0, r3
 801db76:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801db7a:	930b      	str	r3, [sp, #44]	; 0x2c
 801db7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db7e:	459e      	cmp	lr, r3
 801db80:	da5c      	bge.n	801dc3c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801db82:	1cc3      	adds	r3, r0, #3
 801db84:	46a2      	mov	sl, r4
 801db86:	ebaa 0204 	sub.w	r2, sl, r4
 801db8a:	4295      	cmp	r5, r2
 801db8c:	dd46      	ble.n	801dc1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801db8e:	f04f 0c03 	mov.w	ip, #3
 801db92:	f04f 0b04 	mov.w	fp, #4
 801db96:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801db9a:	2fff      	cmp	r7, #255	; 0xff
 801db9c:	fb1c b202 	smlabb	r2, ip, r2, fp
 801dba0:	eb06 0c02 	add.w	ip, r6, r2
 801dba4:	f816 b002 	ldrb.w	fp, [r6, r2]
 801dba8:	d02f      	beq.n	801dc0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801dbaa:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801dbae:	fb12 f201 	smulbb	r2, r2, r1
 801dbb2:	fb0b 2209 	mla	r2, fp, r9, r2
 801dbb6:	b292      	uxth	r2, r2
 801dbb8:	f102 0b01 	add.w	fp, r2, #1
 801dbbc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801dbc0:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801dbc4:	fb1b fb01 	smulbb	fp, fp, r1
 801dbc8:	1212      	asrs	r2, r2, #8
 801dbca:	f803 2c03 	strb.w	r2, [r3, #-3]
 801dbce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dbd2:	fb02 b209 	mla	r2, r2, r9, fp
 801dbd6:	b292      	uxth	r2, r2
 801dbd8:	f102 0b01 	add.w	fp, r2, #1
 801dbdc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801dbe0:	1212      	asrs	r2, r2, #8
 801dbe2:	f803 2c02 	strb.w	r2, [r3, #-2]
 801dbe6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801dbea:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801dbee:	fb1c fc01 	smulbb	ip, ip, r1
 801dbf2:	fb02 c209 	mla	r2, r2, r9, ip
 801dbf6:	b292      	uxth	r2, r2
 801dbf8:	f102 0c01 	add.w	ip, r2, #1
 801dbfc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801dc00:	1212      	asrs	r2, r2, #8
 801dc02:	f803 2c01 	strb.w	r2, [r3, #-1]
 801dc06:	3303      	adds	r3, #3
 801dc08:	e7bd      	b.n	801db86 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801dc0a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801dc0e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dc12:	f803 2c02 	strb.w	r2, [r3, #-2]
 801dc16:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801dc1a:	e7f2      	b.n	801dc02 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801dc1c:	4b0d      	ldr	r3, [pc, #52]	; (801dc54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801dc1e:	f10e 0e01 	add.w	lr, lr, #1
 801dc22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dc24:	881b      	ldrh	r3, [r3, #0]
 801dc26:	1b5b      	subs	r3, r3, r5
 801dc28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc2c:	4413      	add	r3, r2
 801dc2e:	4418      	add	r0, r3
 801dc30:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dc34:	1b5b      	subs	r3, r3, r5
 801dc36:	4443      	add	r3, r8
 801dc38:	441c      	add	r4, r3
 801dc3a:	e79f      	b.n	801db7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801dc3c:	4b06      	ldr	r3, [pc, #24]	; (801dc58 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801dc3e:	6818      	ldr	r0, [r3, #0]
 801dc40:	6803      	ldr	r3, [r0, #0]
 801dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc44:	4798      	blx	r3
 801dc46:	e77a      	b.n	801db3e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801dc48:	0802964b 	.word	0x0802964b
 801dc4c:	08029d02 	.word	0x08029d02
 801dc50:	080297db 	.word	0x080297db
 801dc54:	2000c502 	.word	0x2000c502
 801dc58:	2000c508 	.word	0x2000c508

0801dc5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dc5c:	b570      	push	{r4, r5, r6, lr}
 801dc5e:	780d      	ldrb	r5, [r1, #0]
 801dc60:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801dc64:	2d01      	cmp	r5, #1
 801dc66:	d00d      	beq.n	801dc84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801dc68:	d307      	bcc.n	801dc7a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801dc6a:	2d02      	cmp	r5, #2
 801dc6c:	d10f      	bne.n	801dc8e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801dc6e:	4b08      	ldr	r3, [pc, #32]	; (801dc90 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801dc70:	215a      	movs	r1, #90	; 0x5a
 801dc72:	4a08      	ldr	r2, [pc, #32]	; (801dc94 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801dc74:	4808      	ldr	r0, [pc, #32]	; (801dc98 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801dc76:	f007 f92f 	bl	8024ed8 <__assert_func>
 801dc7a:	9404      	str	r4, [sp, #16]
 801dc7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc80:	f7ff be04 	b.w	801d88c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dc84:	9404      	str	r4, [sp, #16]
 801dc86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc8a:	f7ff bef7 	b.w	801da7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801dc8e:	bd70      	pop	{r4, r5, r6, pc}
 801dc90:	08029600 	.word	0x08029600
 801dc94:	08029c80 	.word	0x08029c80
 801dc98:	080297db 	.word	0x080297db

0801dc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca0:	b08b      	sub	sp, #44	; 0x2c
 801dca2:	460c      	mov	r4, r1
 801dca4:	4680      	mov	r8, r0
 801dca6:	469a      	mov	sl, r3
 801dca8:	6808      	ldr	r0, [r1, #0]
 801dcaa:	ab06      	add	r3, sp, #24
 801dcac:	6849      	ldr	r1, [r1, #4]
 801dcae:	c303      	stmia	r3!, {r0, r1}
 801dcb0:	6810      	ldr	r0, [r2, #0]
 801dcb2:	ab08      	add	r3, sp, #32
 801dcb4:	6851      	ldr	r1, [r2, #4]
 801dcb6:	c303      	stmia	r3!, {r0, r1}
 801dcb8:	a806      	add	r0, sp, #24
 801dcba:	f7fa ffd9 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcbe:	4621      	mov	r1, r4
 801dcc0:	a808      	add	r0, sp, #32
 801dcc2:	4c61      	ldr	r4, [pc, #388]	; (801de48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801dcc4:	f7fa ffbc 	bl	8018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dcc8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dccc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dcd0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dcd4:	6820      	ldr	r0, [r4, #0]
 801dcd6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dcda:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801dcde:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801dce2:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801dce6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dcea:	440a      	add	r2, r1
 801dcec:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dcf0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dcf4:	4413      	add	r3, r2
 801dcf6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dcfa:	6803      	ldr	r3, [r0, #0]
 801dcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcfe:	4798      	blx	r3
 801dd00:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dd04:	d118      	bne.n	801dd38 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801dd06:	f010 0f20 	tst.w	r0, #32
 801dd0a:	6820      	ldr	r0, [r4, #0]
 801dd0c:	d017      	beq.n	801dd3e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801dd0e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801dd12:	b2bf      	uxth	r7, r7
 801dd14:	6801      	ldr	r1, [r0, #0]
 801dd16:	9402      	str	r4, [sp, #8]
 801dd18:	fa1f f489 	uxth.w	r4, r9
 801dd1c:	f8cd a00c 	str.w	sl, [sp, #12]
 801dd20:	9401      	str	r4, [sp, #4]
 801dd22:	9700      	str	r7, [sp, #0]
 801dd24:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dd28:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801dd2a:	4641      	mov	r1, r8
 801dd2c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dd30:	47a0      	blx	r4
 801dd32:	b00b      	add	sp, #44	; 0x2c
 801dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd38:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dd3c:	e7e5      	b.n	801dd0a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801dd3e:	6803      	ldr	r3, [r0, #0]
 801dd40:	6a1b      	ldr	r3, [r3, #32]
 801dd42:	4798      	blx	r3
 801dd44:	4b41      	ldr	r3, [pc, #260]	; (801de4c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801dd46:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801dd4a:	f04f 0c00 	mov.w	ip, #0
 801dd4e:	881a      	ldrh	r2, [r3, #0]
 801dd50:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801dd54:	fb04 1202 	mla	r2, r4, r2, r1
 801dd58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd5c:	4410      	add	r0, r2
 801dd5e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801dd62:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801dd66:	0092      	lsls	r2, r2, #2
 801dd68:	9105      	str	r1, [sp, #20]
 801dd6a:	9204      	str	r2, [sp, #16]
 801dd6c:	45cc      	cmp	ip, r9
 801dd6e:	da65      	bge.n	801de3c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801dd70:	1cc4      	adds	r4, r0, #3
 801dd72:	f108 0504 	add.w	r5, r8, #4
 801dd76:	f04f 0e00 	mov.w	lr, #0
 801dd7a:	45be      	cmp	lr, r7
 801dd7c:	da4d      	bge.n	801de1a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801dd7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dd82:	b181      	cbz	r1, 801dda6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801dd84:	29ff      	cmp	r1, #255	; 0xff
 801dd86:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801dd8a:	d111      	bne.n	801ddb0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dd8c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dd90:	d10e      	bne.n	801ddb0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dd92:	f804 bc03 	strb.w	fp, [r4, #-3]
 801dd96:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801dd9a:	f804 2c02 	strb.w	r2, [r4, #-2]
 801dd9e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801dda2:	f804 2c01 	strb.w	r2, [r4, #-1]
 801dda6:	f10e 0e01 	add.w	lr, lr, #1
 801ddaa:	3403      	adds	r4, #3
 801ddac:	3504      	adds	r5, #4
 801ddae:	e7e4      	b.n	801dd7a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801ddb0:	fb0a f101 	mul.w	r1, sl, r1
 801ddb4:	1c4a      	adds	r2, r1, #1
 801ddb6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801ddba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ddbe:	1212      	asrs	r2, r2, #8
 801ddc0:	b296      	uxth	r6, r2
 801ddc2:	43d2      	mvns	r2, r2
 801ddc4:	fb1b fb06 	smulbb	fp, fp, r6
 801ddc8:	b2d2      	uxtb	r2, r2
 801ddca:	fb01 b102 	mla	r1, r1, r2, fp
 801ddce:	b289      	uxth	r1, r1
 801ddd0:	f101 0b01 	add.w	fp, r1, #1
 801ddd4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ddd8:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801dddc:	fb1b fb02 	smulbb	fp, fp, r2
 801dde0:	1209      	asrs	r1, r1, #8
 801dde2:	f804 1c03 	strb.w	r1, [r4, #-3]
 801dde6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801ddea:	fb01 b106 	mla	r1, r1, r6, fp
 801ddee:	b289      	uxth	r1, r1
 801ddf0:	f101 0b01 	add.w	fp, r1, #1
 801ddf4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ddf8:	1209      	asrs	r1, r1, #8
 801ddfa:	f804 1c02 	strb.w	r1, [r4, #-2]
 801ddfe:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801de02:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801de06:	fb11 f202 	smulbb	r2, r1, r2
 801de0a:	fb0b 2206 	mla	r2, fp, r6, r2
 801de0e:	b292      	uxth	r2, r2
 801de10:	1c56      	adds	r6, r2, #1
 801de12:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801de16:	1212      	asrs	r2, r2, #8
 801de18:	e7c3      	b.n	801dda2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801de1a:	881a      	ldrh	r2, [r3, #0]
 801de1c:	f10c 0c01 	add.w	ip, ip, #1
 801de20:	9905      	ldr	r1, [sp, #20]
 801de22:	1bd2      	subs	r2, r2, r7
 801de24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801de28:	440a      	add	r2, r1
 801de2a:	9904      	ldr	r1, [sp, #16]
 801de2c:	4410      	add	r0, r2
 801de2e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801de32:	1bd2      	subs	r2, r2, r7
 801de34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801de38:	4490      	add	r8, r2
 801de3a:	e797      	b.n	801dd6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801de3c:	4b02      	ldr	r3, [pc, #8]	; (801de48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801de3e:	6818      	ldr	r0, [r3, #0]
 801de40:	6803      	ldr	r3, [r0, #0]
 801de42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de44:	4798      	blx	r3
 801de46:	e774      	b.n	801dd32 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801de48:	2000c508 	.word	0x2000c508
 801de4c:	2000c502 	.word	0x2000c502

0801de50 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801de50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de54:	b085      	sub	sp, #20
 801de56:	4606      	mov	r6, r0
 801de58:	460c      	mov	r4, r1
 801de5a:	4691      	mov	r9, r2
 801de5c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801de60:	4698      	mov	r8, r3
 801de62:	b385      	cbz	r5, 801dec6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801de64:	4608      	mov	r0, r1
 801de66:	f7fd fae5 	bl	801b434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801de6a:	4607      	mov	r7, r0
 801de6c:	4620      	mov	r0, r4
 801de6e:	f7fd fb1b 	bl	801b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801de72:	f8ad 000e 	strh.w	r0, [sp, #14]
 801de76:	4620      	mov	r0, r4
 801de78:	f8ad 9008 	strh.w	r9, [sp, #8]
 801de7c:	f8ad 800a 	strh.w	r8, [sp, #10]
 801de80:	f8ad 700c 	strh.w	r7, [sp, #12]
 801de84:	f7fd fc62 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801de88:	2801      	cmp	r0, #1
 801de8a:	d00f      	beq.n	801deac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801de8c:	4620      	mov	r0, r4
 801de8e:	f7fd fc5d 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801de92:	2802      	cmp	r0, #2
 801de94:	d00a      	beq.n	801deac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801de96:	4620      	mov	r0, r4
 801de98:	f7fd fc58 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801de9c:	280b      	cmp	r0, #11
 801de9e:	d005      	beq.n	801deac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dea0:	4b1b      	ldr	r3, [pc, #108]	; (801df10 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801dea2:	2142      	movs	r1, #66	; 0x42
 801dea4:	4a1b      	ldr	r2, [pc, #108]	; (801df14 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801dea6:	481c      	ldr	r0, [pc, #112]	; (801df18 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801dea8:	f007 f816 	bl	8024ed8 <__assert_func>
 801deac:	4620      	mov	r0, r4
 801deae:	f7fd fc4d 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801deb2:	2802      	cmp	r0, #2
 801deb4:	4620      	mov	r0, r4
 801deb6:	d109      	bne.n	801decc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801deb8:	f7fd fbc4 	bl	801b644 <_ZNK8touchgfx6Bitmap7getDataEv>
 801debc:	462b      	mov	r3, r5
 801debe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dec0:	a902      	add	r1, sp, #8
 801dec2:	f7ff feeb 	bl	801dc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dec6:	b005      	add	sp, #20
 801dec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801decc:	f7fd fc3e 	bl	801b74c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ded0:	280b      	cmp	r0, #11
 801ded2:	d10e      	bne.n	801def2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801ded4:	4620      	mov	r0, r4
 801ded6:	f7fd fbb5 	bl	801b644 <_ZNK8touchgfx6Bitmap7getDataEv>
 801deda:	4606      	mov	r6, r0
 801dedc:	4620      	mov	r0, r4
 801dede:	f7fd fbe3 	bl	801b6a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dee2:	9500      	str	r5, [sp, #0]
 801dee4:	4601      	mov	r1, r0
 801dee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dee8:	aa02      	add	r2, sp, #8
 801deea:	4630      	mov	r0, r6
 801deec:	f7ff feb6 	bl	801dc5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801def0:	e7e9      	b.n	801dec6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801def2:	6833      	ldr	r3, [r6, #0]
 801def4:	4620      	mov	r0, r4
 801def6:	691f      	ldr	r7, [r3, #16]
 801def8:	f7fd fba4 	bl	801b644 <_ZNK8touchgfx6Bitmap7getDataEv>
 801defc:	2300      	movs	r3, #0
 801defe:	4601      	mov	r1, r0
 801df00:	aa02      	add	r2, sp, #8
 801df02:	4630      	mov	r0, r6
 801df04:	e9cd 5300 	strd	r5, r3, [sp]
 801df08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df0a:	47b8      	blx	r7
 801df0c:	e7db      	b.n	801dec6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801df0e:	bf00      	nop
 801df10:	08029699 	.word	0x08029699
 801df14:	08029d8b 	.word	0x08029d8b
 801df18:	080297db 	.word	0x080297db

0801df1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801df1c:	b570      	push	{r4, r5, r6, lr}
 801df1e:	9d04      	ldr	r5, [sp, #16]
 801df20:	460c      	mov	r4, r1
 801df22:	4619      	mov	r1, r3
 801df24:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801df28:	2a0c      	cmp	r2, #12
 801df2a:	d826      	bhi.n	801df7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801df2c:	e8df f002 	tbb	[pc, r2]
 801df30:	200e1407 	.word	0x200e1407
 801df34:	20202020 	.word	0x20202020
 801df38:	20202020 	.word	0x20202020
 801df3c:	20          	.byte	0x20
 801df3d:	00          	.byte	0x00
 801df3e:	4b0f      	ldr	r3, [pc, #60]	; (801df7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801df40:	f240 117f 	movw	r1, #383	; 0x17f
 801df44:	4a0e      	ldr	r2, [pc, #56]	; (801df80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801df46:	480f      	ldr	r0, [pc, #60]	; (801df84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801df48:	f006 ffc6 	bl	8024ed8 <__assert_func>
 801df4c:	462a      	mov	r2, r5
 801df4e:	4620      	mov	r0, r4
 801df50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df54:	f7ff bea2 	b.w	801dc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df58:	6802      	ldr	r2, [r0, #0]
 801df5a:	2600      	movs	r6, #0
 801df5c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801df60:	6916      	ldr	r6, [r2, #16]
 801df62:	462b      	mov	r3, r5
 801df64:	460a      	mov	r2, r1
 801df66:	4621      	mov	r1, r4
 801df68:	46b4      	mov	ip, r6
 801df6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df6e:	4760      	bx	ip
 801df70:	4b05      	ldr	r3, [pc, #20]	; (801df88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801df72:	f240 1191 	movw	r1, #401	; 0x191
 801df76:	4a02      	ldr	r2, [pc, #8]	; (801df80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801df78:	e7e5      	b.n	801df46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801df7a:	bd70      	pop	{r4, r5, r6, pc}
 801df7c:	080299b4 	.word	0x080299b4
 801df80:	0802a073 	.word	0x0802a073
 801df84:	080297db 	.word	0x080297db
 801df88:	080299f5 	.word	0x080299f5

0801df8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801df8c:	b158      	cbz	r0, 801dfa6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801df8e:	2902      	cmp	r1, #2
 801df90:	d00f      	beq.n	801dfb2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801df92:	2903      	cmp	r1, #3
 801df94:	d010      	beq.n	801dfb8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801df96:	2901      	cmp	r1, #1
 801df98:	d101      	bne.n	801df9e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801df9a:	2001      	movs	r0, #1
 801df9c:	4770      	bx	lr
 801df9e:	4b08      	ldr	r3, [pc, #32]	; (801dfc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dfa0:	8819      	ldrh	r1, [r3, #0]
 801dfa2:	4248      	negs	r0, r1
 801dfa4:	4770      	bx	lr
 801dfa6:	2902      	cmp	r1, #2
 801dfa8:	d006      	beq.n	801dfb8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dfaa:	2903      	cmp	r1, #3
 801dfac:	d0f7      	beq.n	801df9e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dfae:	2901      	cmp	r1, #1
 801dfb0:	d1f3      	bne.n	801df9a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801dfb2:	4b03      	ldr	r3, [pc, #12]	; (801dfc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dfb4:	8818      	ldrh	r0, [r3, #0]
 801dfb6:	4770      	bx	lr
 801dfb8:	f04f 30ff 	mov.w	r0, #4294967295
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop
 801dfc0:	2000c502 	.word	0x2000c502

0801dfc4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dfc4:	b170      	cbz	r0, 801dfe4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801dfc6:	2902      	cmp	r1, #2
 801dfc8:	d012      	beq.n	801dff0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801dfca:	2903      	cmp	r1, #3
 801dfcc:	d006      	beq.n	801dfdc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dfce:	2901      	cmp	r1, #1
 801dfd0:	d001      	beq.n	801dfd6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dfd2:	2001      	movs	r0, #1
 801dfd4:	4770      	bx	lr
 801dfd6:	4b08      	ldr	r3, [pc, #32]	; (801dff8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dfd8:	8818      	ldrh	r0, [r3, #0]
 801dfda:	4770      	bx	lr
 801dfdc:	4b06      	ldr	r3, [pc, #24]	; (801dff8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dfde:	8818      	ldrh	r0, [r3, #0]
 801dfe0:	4240      	negs	r0, r0
 801dfe2:	4770      	bx	lr
 801dfe4:	2902      	cmp	r1, #2
 801dfe6:	d0f9      	beq.n	801dfdc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dfe8:	2903      	cmp	r1, #3
 801dfea:	d0f2      	beq.n	801dfd2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801dfec:	2901      	cmp	r1, #1
 801dfee:	d1f2      	bne.n	801dfd6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dff0:	f04f 30ff 	mov.w	r0, #4294967295
 801dff4:	4770      	bx	lr
 801dff6:	bf00      	nop
 801dff8:	2000c502 	.word	0x2000c502

0801dffc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e000:	b095      	sub	sp, #84	; 0x54
 801e002:	9109      	str	r1, [sp, #36]	; 0x24
 801e004:	a910      	add	r1, sp, #64	; 0x40
 801e006:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801e00a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801e00e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801e012:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801e016:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801e01a:	e881 000c 	stmia.w	r1, {r2, r3}
 801e01e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801e022:	9306      	str	r3, [sp, #24]
 801e024:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e028:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801e02c:	930e      	str	r3, [sp, #56]	; 0x38
 801e02e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e032:	798f      	ldrb	r7, [r1, #6]
 801e034:	930a      	str	r3, [sp, #40]	; 0x28
 801e036:	7b4b      	ldrb	r3, [r1, #13]
 801e038:	0158      	lsls	r0, r3, #5
 801e03a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e03e:	4338      	orrs	r0, r7
 801e040:	9008      	str	r0, [sp, #32]
 801e042:	f000 8174 	beq.w	801e32e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e046:	011b      	lsls	r3, r3, #4
 801e048:	79c8      	ldrb	r0, [r1, #7]
 801e04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e04e:	4303      	orrs	r3, r0
 801e050:	9307      	str	r3, [sp, #28]
 801e052:	f000 816c 	beq.w	801e32e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e056:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e05a:	b29b      	uxth	r3, r3
 801e05c:	2e00      	cmp	r6, #0
 801e05e:	f000 8112 	beq.w	801e286 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801e062:	1af6      	subs	r6, r6, r3
 801e064:	b2b6      	uxth	r6, r6
 801e066:	0433      	lsls	r3, r6, #16
 801e068:	d502      	bpl.n	801e070 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e06a:	1bad      	subs	r5, r5, r6
 801e06c:	2600      	movs	r6, #0
 801e06e:	b22d      	sxth	r5, r5
 801e070:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e074:	a810      	add	r0, sp, #64	; 0x40
 801e076:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e07a:	428d      	cmp	r5, r1
 801e07c:	b28b      	uxth	r3, r1
 801e07e:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801e082:	bfbf      	itttt	lt
 801e084:	18f6      	addlt	r6, r6, r3
 801e086:	1b75      	sublt	r5, r6, r5
 801e088:	b2ae      	uxthlt	r6, r5
 801e08a:	460d      	movlt	r5, r1
 801e08c:	8891      	ldrh	r1, [r2, #4]
 801e08e:	440b      	add	r3, r1
 801e090:	4629      	mov	r1, r5
 801e092:	b21b      	sxth	r3, r3
 801e094:	930d      	str	r3, [sp, #52]	; 0x34
 801e096:	88d3      	ldrh	r3, [r2, #6]
 801e098:	9a06      	ldr	r2, [sp, #24]
 801e09a:	449a      	add	sl, r3
 801e09c:	fa0f f38a 	sxth.w	r3, sl
 801e0a0:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801e0a4:	930c      	str	r3, [sp, #48]	; 0x30
 801e0a6:	4bb8      	ldr	r3, [pc, #736]	; (801e388 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e0a8:	f893 b000 	ldrb.w	fp, [r3]
 801e0ac:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e0b0:	f1dc 0300 	rsbs	r3, ip, #0
 801e0b4:	eb43 030c 	adc.w	r3, r3, ip
 801e0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e0ba:	464b      	mov	r3, r9
 801e0bc:	f7fa fcb2 	bl	8018a24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e0c0:	4629      	mov	r1, r5
 801e0c2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801e0c6:	464b      	mov	r3, r9
 801e0c8:	9a06      	ldr	r2, [sp, #24]
 801e0ca:	a810      	add	r0, sp, #64	; 0x40
 801e0cc:	f7fa fcc2 	bl	8018a54 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e0d0:	a914      	add	r1, sp, #80	; 0x50
 801e0d2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e0d6:	a813      	add	r0, sp, #76	; 0x4c
 801e0d8:	f7fa fd9c 	bl	8018c14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e0dc:	f1b9 0f00 	cmp.w	r9, #0
 801e0e0:	f040 80d4 	bne.w	801e28c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801e0e4:	f1bb 0f01 	cmp.w	fp, #1
 801e0e8:	f040 80d8 	bne.w	801e29c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801e0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	f040 8122 	bne.w	801e338 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801e0f4:	4ba5      	ldr	r3, [pc, #660]	; (801e38c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e0f6:	6818      	ldr	r0, [r3, #0]
 801e0f8:	6803      	ldr	r3, [r0, #0]
 801e0fa:	6a1b      	ldr	r3, [r3, #32]
 801e0fc:	4798      	blx	r3
 801e0fe:	4aa4      	ldr	r2, [pc, #656]	; (801e390 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801e100:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e104:	8811      	ldrh	r1, [r2, #0]
 801e106:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e10a:	fb01 2303 	mla	r3, r1, r3, r2
 801e10e:	2201      	movs	r2, #1
 801e110:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e114:	4590      	cmp	r8, r2
 801e116:	4403      	add	r3, r0
 801e118:	9307      	str	r3, [sp, #28]
 801e11a:	fa02 f308 	lsl.w	r3, r2, r8
 801e11e:	f103 33ff 	add.w	r3, r3, #4294967295
 801e122:	b2db      	uxtb	r3, r3
 801e124:	930f      	str	r3, [sp, #60]	; 0x3c
 801e126:	f000 8109 	beq.w	801e33c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801e12a:	f1b8 0f02 	cmp.w	r8, #2
 801e12e:	f000 813e 	beq.w	801e3ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801e132:	f1b8 0f04 	cmp.w	r8, #4
 801e136:	f000 8132 	beq.w	801e39e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801e13a:	b906      	cbnz	r6, 801e13e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801e13c:	b174      	cbz	r4, 801e15c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801e13e:	fb17 6304 	smlabb	r3, r7, r4, r6
 801e142:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e144:	ebaa 0a04 	sub.w	sl, sl, r4
 801e148:	fb13 f308 	smulbb	r3, r3, r8
 801e14c:	fa1f fa8a 	uxth.w	sl, sl
 801e150:	b29b      	uxth	r3, r3
 801e152:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801e156:	f003 0407 	and.w	r4, r3, #7
 801e15a:	9124      	str	r1, [sp, #144]	; 0x90
 801e15c:	4649      	mov	r1, r9
 801e15e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e160:	f7ff ff14 	bl	801df8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e164:	4649      	mov	r1, r9
 801e166:	4683      	mov	fp, r0
 801e168:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e16a:	f7ff ff2b 	bl	801dfc4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e16e:	9906      	ldr	r1, [sp, #24]
 801e170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e172:	1bad      	subs	r5, r5, r6
 801e174:	1a5b      	subs	r3, r3, r1
 801e176:	459a      	cmp	sl, r3
 801e178:	bfa8      	it	ge
 801e17a:	469a      	movge	sl, r3
 801e17c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e17e:	1b5d      	subs	r5, r3, r5
 801e180:	9b08      	ldr	r3, [sp, #32]
 801e182:	429d      	cmp	r5, r3
 801e184:	bfd4      	ite	le
 801e186:	ebc6 0605 	rsble	r6, r6, r5
 801e18a:	ebc6 0603 	rsbgt	r6, r6, r3
 801e18e:	1bbf      	subs	r7, r7, r6
 801e190:	fb0b 0016 	mls	r0, fp, r6, r0
 801e194:	fb08 f307 	mul.w	r3, r8, r7
 801e198:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e19c:	9308      	str	r3, [sp, #32]
 801e19e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e1a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e1a4:	930b      	str	r3, [sp, #44]	; 0x2c
 801e1a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e1a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e1ac:	930c      	str	r3, [sp, #48]	; 0x30
 801e1ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e1b0:	b2db      	uxtb	r3, r3
 801e1b2:	930d      	str	r3, [sp, #52]	; 0x34
 801e1b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e1b6:	7819      	ldrb	r1, [r3, #0]
 801e1b8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e1bc:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801e1c0:	4121      	asrs	r1, r4
 801e1c2:	9306      	str	r3, [sp, #24]
 801e1c4:	fb03 0b0b 	mla	fp, r3, fp, r0
 801e1c8:	b2c9      	uxtb	r1, r1
 801e1ca:	f1ba 0f00 	cmp.w	sl, #0
 801e1ce:	f340 80d1 	ble.w	801e374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e1d2:	46b6      	mov	lr, r6
 801e1d4:	9807      	ldr	r0, [sp, #28]
 801e1d6:	f1be 0f00 	cmp.w	lr, #0
 801e1da:	f340 80b8 	ble.w	801e34e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e1de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e1e0:	400b      	ands	r3, r1
 801e1e2:	d03e      	beq.n	801e262 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e1e4:	fb13 f302 	smulbb	r3, r3, r2
 801e1e8:	2bfe      	cmp	r3, #254	; 0xfe
 801e1ea:	dd03      	ble.n	801e1f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801e1ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e1ee:	2dff      	cmp	r5, #255	; 0xff
 801e1f0:	f000 80a6 	beq.w	801e340 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e1f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e1f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e1f8:	fb15 f303 	smulbb	r3, r5, r3
 801e1fc:	b29b      	uxth	r3, r3
 801e1fe:	1c5d      	adds	r5, r3, #1
 801e200:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e204:	7805      	ldrb	r5, [r0, #0]
 801e206:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e20a:	fa1f fc83 	uxth.w	ip, r3
 801e20e:	43db      	mvns	r3, r3
 801e210:	fb17 f90c 	smulbb	r9, r7, ip
 801e214:	b2db      	uxtb	r3, r3
 801e216:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e218:	fb05 9503 	mla	r5, r5, r3, r9
 801e21c:	b2ad      	uxth	r5, r5
 801e21e:	f105 0901 	add.w	r9, r5, #1
 801e222:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e226:	fb17 f90c 	smulbb	r9, r7, ip
 801e22a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e22c:	122d      	asrs	r5, r5, #8
 801e22e:	fb17 fc0c 	smulbb	ip, r7, ip
 801e232:	7005      	strb	r5, [r0, #0]
 801e234:	7845      	ldrb	r5, [r0, #1]
 801e236:	fb05 9503 	mla	r5, r5, r3, r9
 801e23a:	b2ad      	uxth	r5, r5
 801e23c:	f105 0901 	add.w	r9, r5, #1
 801e240:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e244:	122d      	asrs	r5, r5, #8
 801e246:	7045      	strb	r5, [r0, #1]
 801e248:	7885      	ldrb	r5, [r0, #2]
 801e24a:	fb05 cc03 	mla	ip, r5, r3, ip
 801e24e:	fa1f fc8c 	uxth.w	ip, ip
 801e252:	f10c 0301 	add.w	r3, ip, #1
 801e256:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e25a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e25e:	f880 c002 	strb.w	ip, [r0, #2]
 801e262:	4444      	add	r4, r8
 801e264:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e268:	b2a4      	uxth	r4, r4
 801e26a:	2c07      	cmp	r4, #7
 801e26c:	bf89      	itett	hi
 801e26e:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801e270:	fa41 f108 	asrls.w	r1, r1, r8
 801e274:	2400      	movhi	r4, #0
 801e276:	7859      	ldrbhi	r1, [r3, #1]
 801e278:	bf8a      	itet	hi
 801e27a:	3301      	addhi	r3, #1
 801e27c:	b2c9      	uxtbls	r1, r1
 801e27e:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e280:	9b06      	ldr	r3, [sp, #24]
 801e282:	4418      	add	r0, r3
 801e284:	e7a7      	b.n	801e1d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e286:	441d      	add	r5, r3
 801e288:	b22d      	sxth	r5, r5
 801e28a:	e6f1      	b.n	801e070 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e28c:	f1b9 0f01 	cmp.w	r9, #1
 801e290:	f47f af2c 	bne.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e294:	f1bb 0f01 	cmp.w	fp, #1
 801e298:	f47f af28 	bne.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e29c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801e38c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e2a0:	f8db 0000 	ldr.w	r0, [fp]
 801e2a4:	6803      	ldr	r3, [r0, #0]
 801e2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2a8:	4798      	blx	r3
 801e2aa:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e2ae:	465a      	mov	r2, fp
 801e2b0:	d006      	beq.n	801e2c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e2b2:	f1b8 0f04 	cmp.w	r8, #4
 801e2b6:	d13d      	bne.n	801e334 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2ba:	3300      	adds	r3, #0
 801e2bc:	bf18      	it	ne
 801e2be:	2301      	movne	r3, #1
 801e2c0:	05c0      	lsls	r0, r0, #23
 801e2c2:	d567      	bpl.n	801e394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e2c4:	f1b8 0f08 	cmp.w	r8, #8
 801e2c8:	d164      	bne.n	801e394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	bf0c      	ite	eq
 801e2ce:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e2d2:	2180      	movne	r1, #128	; 0x80
 801e2d4:	2e00      	cmp	r6, #0
 801e2d6:	f47f af09 	bne.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e2da:	2c00      	cmp	r4, #0
 801e2dc:	f47f af06 	bne.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e2e0:	9b08      	ldr	r3, [sp, #32]
 801e2e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e2e4:	442b      	add	r3, r5
 801e2e6:	4283      	cmp	r3, r0
 801e2e8:	f73f af00 	bgt.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e2ec:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e2f0:	4403      	add	r3, r0
 801e2f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e2f4:	4283      	cmp	r3, r0
 801e2f6:	f73f aef9 	bgt.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e2fa:	f1b8 0f08 	cmp.w	r8, #8
 801e2fe:	6810      	ldr	r0, [r2, #0]
 801e300:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e304:	bf18      	it	ne
 801e306:	3701      	addne	r7, #1
 801e308:	6804      	ldr	r4, [r0, #0]
 801e30a:	9105      	str	r1, [sp, #20]
 801e30c:	bf18      	it	ne
 801e30e:	f027 0701 	bicne.w	r7, r7, #1
 801e312:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e314:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e318:	bf18      	it	ne
 801e31a:	b2bf      	uxthne	r7, r7
 801e31c:	9104      	str	r1, [sp, #16]
 801e31e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e320:	e9cd 7a00 	strd	r7, sl, [sp]
 801e324:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e328:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e32a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e32c:	47a0      	blx	r4
 801e32e:	b015      	add	sp, #84	; 0x54
 801e330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e334:	2300      	movs	r3, #0
 801e336:	e7c3      	b.n	801e2c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e338:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e33a:	e6e0      	b.n	801e0fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e33c:	22ff      	movs	r2, #255	; 0xff
 801e33e:	e6fc      	b.n	801e13a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e342:	7003      	strb	r3, [r0, #0]
 801e344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e346:	7043      	strb	r3, [r0, #1]
 801e348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e34a:	7083      	strb	r3, [r0, #2]
 801e34c:	e789      	b.n	801e262 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e34e:	9b08      	ldr	r3, [sp, #32]
 801e350:	b153      	cbz	r3, 801e368 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e352:	441c      	add	r4, r3
 801e354:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e356:	b2a4      	uxth	r4, r4
 801e358:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e35c:	f004 0407 	and.w	r4, r4, #7
 801e360:	7819      	ldrb	r1, [r3, #0]
 801e362:	9324      	str	r3, [sp, #144]	; 0x90
 801e364:	4121      	asrs	r1, r4
 801e366:	b2c9      	uxtb	r1, r1
 801e368:	9b07      	ldr	r3, [sp, #28]
 801e36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e36e:	445b      	add	r3, fp
 801e370:	9307      	str	r3, [sp, #28]
 801e372:	e72a      	b.n	801e1ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801e374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e376:	2b00      	cmp	r3, #0
 801e378:	d1d9      	bne.n	801e32e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e37a:	4b04      	ldr	r3, [pc, #16]	; (801e38c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e37c:	6818      	ldr	r0, [r3, #0]
 801e37e:	6803      	ldr	r3, [r0, #0]
 801e380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e382:	4798      	blx	r3
 801e384:	e7d3      	b.n	801e32e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e386:	bf00      	nop
 801e388:	2000c500 	.word	0x2000c500
 801e38c:	2000c508 	.word	0x2000c508
 801e390:	2000c502 	.word	0x2000c502
 801e394:	2b00      	cmp	r3, #0
 801e396:	f43f aea9 	beq.w	801e0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e39a:	2180      	movs	r1, #128	; 0x80
 801e39c:	e79a      	b.n	801e2d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801e39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3a0:	b11b      	cbz	r3, 801e3aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e3a2:	07fb      	lsls	r3, r7, #31
 801e3a4:	d501      	bpl.n	801e3aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e3a6:	3701      	adds	r7, #1
 801e3a8:	b2bf      	uxth	r7, r7
 801e3aa:	2211      	movs	r2, #17
 801e3ac:	e6c5      	b.n	801e13a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e3ae:	2255      	movs	r2, #85	; 0x55
 801e3b0:	e6c3      	b.n	801e13a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e3b2:	bf00      	nop

0801e3b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e3b4:	b538      	push	{r3, r4, r5, lr}
 801e3b6:	4c15      	ldr	r4, [pc, #84]	; (801e40c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e3b8:	4605      	mov	r5, r0
 801e3ba:	7823      	ldrb	r3, [r4, #0]
 801e3bc:	f3bf 8f5b 	dmb	ish
 801e3c0:	07da      	lsls	r2, r3, #31
 801e3c2:	d40b      	bmi.n	801e3dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f006 fd5b 	bl	8024e80 <__cxa_guard_acquire>
 801e3ca:	b138      	cbz	r0, 801e3dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f006 fd63 	bl	8024e98 <__cxa_guard_release>
 801e3d2:	4a0f      	ldr	r2, [pc, #60]	; (801e410 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e3d4:	490f      	ldr	r1, [pc, #60]	; (801e414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e3d6:	4810      	ldr	r0, [pc, #64]	; (801e418 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e3d8:	f006 fd4b 	bl	8024e72 <__aeabi_atexit>
 801e3dc:	4c0f      	ldr	r4, [pc, #60]	; (801e41c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e3de:	7823      	ldrb	r3, [r4, #0]
 801e3e0:	f3bf 8f5b 	dmb	ish
 801e3e4:	07db      	lsls	r3, r3, #31
 801e3e6:	d40b      	bmi.n	801e400 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f006 fd49 	bl	8024e80 <__cxa_guard_acquire>
 801e3ee:	b138      	cbz	r0, 801e400 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e3f0:	4620      	mov	r0, r4
 801e3f2:	f006 fd51 	bl	8024e98 <__cxa_guard_release>
 801e3f6:	4a06      	ldr	r2, [pc, #24]	; (801e410 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e3f8:	4909      	ldr	r1, [pc, #36]	; (801e420 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e3fa:	480a      	ldr	r0, [pc, #40]	; (801e424 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e3fc:	f006 fd39 	bl	8024e72 <__aeabi_atexit>
 801e400:	4b05      	ldr	r3, [pc, #20]	; (801e418 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e402:	612b      	str	r3, [r5, #16]
 801e404:	4b07      	ldr	r3, [pc, #28]	; (801e424 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e406:	616b      	str	r3, [r5, #20]
 801e408:	bd38      	pop	{r3, r4, r5, pc}
 801e40a:	bf00      	nop
 801e40c:	2000c614 	.word	0x2000c614
 801e410:	20000000 	.word	0x20000000
 801e414:	0801cfeb 	.word	0x0801cfeb
 801e418:	2000009c 	.word	0x2000009c
 801e41c:	2000c618 	.word	0x2000c618
 801e420:	0801cfe9 	.word	0x0801cfe9
 801e424:	200000a0 	.word	0x200000a0

0801e428 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e428:	b538      	push	{r3, r4, r5, lr}
 801e42a:	4c15      	ldr	r4, [pc, #84]	; (801e480 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e42c:	4605      	mov	r5, r0
 801e42e:	7823      	ldrb	r3, [r4, #0]
 801e430:	f3bf 8f5b 	dmb	ish
 801e434:	07da      	lsls	r2, r3, #31
 801e436:	d40b      	bmi.n	801e450 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e438:	4620      	mov	r0, r4
 801e43a:	f006 fd21 	bl	8024e80 <__cxa_guard_acquire>
 801e43e:	b138      	cbz	r0, 801e450 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e440:	4620      	mov	r0, r4
 801e442:	f006 fd29 	bl	8024e98 <__cxa_guard_release>
 801e446:	4a0f      	ldr	r2, [pc, #60]	; (801e484 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e448:	490f      	ldr	r1, [pc, #60]	; (801e488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e44a:	4810      	ldr	r0, [pc, #64]	; (801e48c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e44c:	f006 fd11 	bl	8024e72 <__aeabi_atexit>
 801e450:	4c0f      	ldr	r4, [pc, #60]	; (801e490 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e452:	7823      	ldrb	r3, [r4, #0]
 801e454:	f3bf 8f5b 	dmb	ish
 801e458:	07db      	lsls	r3, r3, #31
 801e45a:	d40b      	bmi.n	801e474 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e45c:	4620      	mov	r0, r4
 801e45e:	f006 fd0f 	bl	8024e80 <__cxa_guard_acquire>
 801e462:	b138      	cbz	r0, 801e474 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e464:	4620      	mov	r0, r4
 801e466:	f006 fd17 	bl	8024e98 <__cxa_guard_release>
 801e46a:	4a06      	ldr	r2, [pc, #24]	; (801e484 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e46c:	4909      	ldr	r1, [pc, #36]	; (801e494 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e46e:	480a      	ldr	r0, [pc, #40]	; (801e498 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e470:	f006 fcff 	bl	8024e72 <__aeabi_atexit>
 801e474:	4b05      	ldr	r3, [pc, #20]	; (801e48c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e476:	60ab      	str	r3, [r5, #8]
 801e478:	4b07      	ldr	r3, [pc, #28]	; (801e498 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e47a:	60eb      	str	r3, [r5, #12]
 801e47c:	bd38      	pop	{r3, r4, r5, pc}
 801e47e:	bf00      	nop
 801e480:	2000c5f4 	.word	0x2000c5f4
 801e484:	20000000 	.word	0x20000000
 801e488:	0801cfef 	.word	0x0801cfef
 801e48c:	2000007c 	.word	0x2000007c
 801e490:	2000c5f8 	.word	0x2000c5f8
 801e494:	0801cfed 	.word	0x0801cfed
 801e498:	20000080 	.word	0x20000080

0801e49c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e49c:	b510      	push	{r4, lr}
 801e49e:	4604      	mov	r4, r0
 801e4a0:	f7ff ff88 	bl	801e3b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e4a4:	4620      	mov	r0, r4
 801e4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4aa:	f7ff bfbd 	b.w	801e428 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e4b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e4b0:	b538      	push	{r3, r4, r5, lr}
 801e4b2:	4c15      	ldr	r4, [pc, #84]	; (801e508 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e4b4:	4605      	mov	r5, r0
 801e4b6:	7823      	ldrb	r3, [r4, #0]
 801e4b8:	f3bf 8f5b 	dmb	ish
 801e4bc:	07da      	lsls	r2, r3, #31
 801e4be:	d40b      	bmi.n	801e4d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f006 fcdd 	bl	8024e80 <__cxa_guard_acquire>
 801e4c6:	b138      	cbz	r0, 801e4d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	f006 fce5 	bl	8024e98 <__cxa_guard_release>
 801e4ce:	4a0f      	ldr	r2, [pc, #60]	; (801e50c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e4d0:	490f      	ldr	r1, [pc, #60]	; (801e510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e4d2:	4810      	ldr	r0, [pc, #64]	; (801e514 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e4d4:	f006 fccd 	bl	8024e72 <__aeabi_atexit>
 801e4d8:	4c0f      	ldr	r4, [pc, #60]	; (801e518 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e4da:	7823      	ldrb	r3, [r4, #0]
 801e4dc:	f3bf 8f5b 	dmb	ish
 801e4e0:	07db      	lsls	r3, r3, #31
 801e4e2:	d40b      	bmi.n	801e4fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f006 fccb 	bl	8024e80 <__cxa_guard_acquire>
 801e4ea:	b138      	cbz	r0, 801e4fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f006 fcd3 	bl	8024e98 <__cxa_guard_release>
 801e4f2:	4a06      	ldr	r2, [pc, #24]	; (801e50c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e4f4:	4909      	ldr	r1, [pc, #36]	; (801e51c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e4f6:	480a      	ldr	r0, [pc, #40]	; (801e520 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e4f8:	f006 fcbb 	bl	8024e72 <__aeabi_atexit>
 801e4fc:	4b05      	ldr	r3, [pc, #20]	; (801e514 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e4fe:	622b      	str	r3, [r5, #32]
 801e500:	4b07      	ldr	r3, [pc, #28]	; (801e520 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e502:	626b      	str	r3, [r5, #36]	; 0x24
 801e504:	bd38      	pop	{r3, r4, r5, pc}
 801e506:	bf00      	nop
 801e508:	2000c61c 	.word	0x2000c61c
 801e50c:	20000000 	.word	0x20000000
 801e510:	0801cfe3 	.word	0x0801cfe3
 801e514:	200000a4 	.word	0x200000a4
 801e518:	2000c620 	.word	0x2000c620
 801e51c:	0801cfe1 	.word	0x0801cfe1
 801e520:	200000a8 	.word	0x200000a8

0801e524 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e524:	b538      	push	{r3, r4, r5, lr}
 801e526:	4c15      	ldr	r4, [pc, #84]	; (801e57c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e528:	4605      	mov	r5, r0
 801e52a:	7823      	ldrb	r3, [r4, #0]
 801e52c:	f3bf 8f5b 	dmb	ish
 801e530:	07da      	lsls	r2, r3, #31
 801e532:	d40b      	bmi.n	801e54c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e534:	4620      	mov	r0, r4
 801e536:	f006 fca3 	bl	8024e80 <__cxa_guard_acquire>
 801e53a:	b138      	cbz	r0, 801e54c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e53c:	4620      	mov	r0, r4
 801e53e:	f006 fcab 	bl	8024e98 <__cxa_guard_release>
 801e542:	4a0f      	ldr	r2, [pc, #60]	; (801e580 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e544:	490f      	ldr	r1, [pc, #60]	; (801e584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e546:	4810      	ldr	r0, [pc, #64]	; (801e588 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e548:	f006 fc93 	bl	8024e72 <__aeabi_atexit>
 801e54c:	4c0f      	ldr	r4, [pc, #60]	; (801e58c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e54e:	7823      	ldrb	r3, [r4, #0]
 801e550:	f3bf 8f5b 	dmb	ish
 801e554:	07db      	lsls	r3, r3, #31
 801e556:	d40b      	bmi.n	801e570 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e558:	4620      	mov	r0, r4
 801e55a:	f006 fc91 	bl	8024e80 <__cxa_guard_acquire>
 801e55e:	b138      	cbz	r0, 801e570 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e560:	4620      	mov	r0, r4
 801e562:	f006 fc99 	bl	8024e98 <__cxa_guard_release>
 801e566:	4a06      	ldr	r2, [pc, #24]	; (801e580 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e568:	4909      	ldr	r1, [pc, #36]	; (801e590 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e56a:	480a      	ldr	r0, [pc, #40]	; (801e594 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e56c:	f006 fc81 	bl	8024e72 <__aeabi_atexit>
 801e570:	4b05      	ldr	r3, [pc, #20]	; (801e588 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e572:	61ab      	str	r3, [r5, #24]
 801e574:	4b07      	ldr	r3, [pc, #28]	; (801e594 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e576:	61eb      	str	r3, [r5, #28]
 801e578:	bd38      	pop	{r3, r4, r5, pc}
 801e57a:	bf00      	nop
 801e57c:	2000c5fc 	.word	0x2000c5fc
 801e580:	20000000 	.word	0x20000000
 801e584:	0801cfe7 	.word	0x0801cfe7
 801e588:	20000084 	.word	0x20000084
 801e58c:	2000c600 	.word	0x2000c600
 801e590:	0801cfe5 	.word	0x0801cfe5
 801e594:	20000088 	.word	0x20000088

0801e598 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e598:	b510      	push	{r4, lr}
 801e59a:	4604      	mov	r4, r0
 801e59c:	f7ff ff88 	bl	801e4b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5a6:	f7ff bfbd 	b.w	801e524 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e5ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e5ac:	b538      	push	{r3, r4, r5, lr}
 801e5ae:	4c15      	ldr	r4, [pc, #84]	; (801e604 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e5b0:	4605      	mov	r5, r0
 801e5b2:	7823      	ldrb	r3, [r4, #0]
 801e5b4:	f3bf 8f5b 	dmb	ish
 801e5b8:	07da      	lsls	r2, r3, #31
 801e5ba:	d40b      	bmi.n	801e5d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e5bc:	4620      	mov	r0, r4
 801e5be:	f006 fc5f 	bl	8024e80 <__cxa_guard_acquire>
 801e5c2:	b138      	cbz	r0, 801e5d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e5c4:	4620      	mov	r0, r4
 801e5c6:	f006 fc67 	bl	8024e98 <__cxa_guard_release>
 801e5ca:	4a0f      	ldr	r2, [pc, #60]	; (801e608 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e5cc:	490f      	ldr	r1, [pc, #60]	; (801e60c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e5ce:	4810      	ldr	r0, [pc, #64]	; (801e610 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e5d0:	f006 fc4f 	bl	8024e72 <__aeabi_atexit>
 801e5d4:	4c0f      	ldr	r4, [pc, #60]	; (801e614 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e5d6:	7823      	ldrb	r3, [r4, #0]
 801e5d8:	f3bf 8f5b 	dmb	ish
 801e5dc:	07db      	lsls	r3, r3, #31
 801e5de:	d40b      	bmi.n	801e5f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f006 fc4d 	bl	8024e80 <__cxa_guard_acquire>
 801e5e6:	b138      	cbz	r0, 801e5f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e5e8:	4620      	mov	r0, r4
 801e5ea:	f006 fc55 	bl	8024e98 <__cxa_guard_release>
 801e5ee:	4a06      	ldr	r2, [pc, #24]	; (801e608 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e5f0:	4909      	ldr	r1, [pc, #36]	; (801e618 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e5f2:	480a      	ldr	r0, [pc, #40]	; (801e61c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e5f4:	f006 fc3d 	bl	8024e72 <__aeabi_atexit>
 801e5f8:	4b05      	ldr	r3, [pc, #20]	; (801e610 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e5fa:	632b      	str	r3, [r5, #48]	; 0x30
 801e5fc:	4b07      	ldr	r3, [pc, #28]	; (801e61c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e5fe:	636b      	str	r3, [r5, #52]	; 0x34
 801e600:	bd38      	pop	{r3, r4, r5, pc}
 801e602:	bf00      	nop
 801e604:	2000c604 	.word	0x2000c604
 801e608:	20000000 	.word	0x20000000
 801e60c:	0801cfdb 	.word	0x0801cfdb
 801e610:	2000008c 	.word	0x2000008c
 801e614:	2000c608 	.word	0x2000c608
 801e618:	0801cfd9 	.word	0x0801cfd9
 801e61c:	20000090 	.word	0x20000090

0801e620 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e620:	b538      	push	{r3, r4, r5, lr}
 801e622:	4c15      	ldr	r4, [pc, #84]	; (801e678 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e624:	4605      	mov	r5, r0
 801e626:	7823      	ldrb	r3, [r4, #0]
 801e628:	f3bf 8f5b 	dmb	ish
 801e62c:	07da      	lsls	r2, r3, #31
 801e62e:	d40b      	bmi.n	801e648 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e630:	4620      	mov	r0, r4
 801e632:	f006 fc25 	bl	8024e80 <__cxa_guard_acquire>
 801e636:	b138      	cbz	r0, 801e648 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e638:	4620      	mov	r0, r4
 801e63a:	f006 fc2d 	bl	8024e98 <__cxa_guard_release>
 801e63e:	4a0f      	ldr	r2, [pc, #60]	; (801e67c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e640:	490f      	ldr	r1, [pc, #60]	; (801e680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e642:	4810      	ldr	r0, [pc, #64]	; (801e684 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e644:	f006 fc15 	bl	8024e72 <__aeabi_atexit>
 801e648:	4c0f      	ldr	r4, [pc, #60]	; (801e688 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e64a:	7823      	ldrb	r3, [r4, #0]
 801e64c:	f3bf 8f5b 	dmb	ish
 801e650:	07db      	lsls	r3, r3, #31
 801e652:	d40b      	bmi.n	801e66c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e654:	4620      	mov	r0, r4
 801e656:	f006 fc13 	bl	8024e80 <__cxa_guard_acquire>
 801e65a:	b138      	cbz	r0, 801e66c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e65c:	4620      	mov	r0, r4
 801e65e:	f006 fc1b 	bl	8024e98 <__cxa_guard_release>
 801e662:	4a06      	ldr	r2, [pc, #24]	; (801e67c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e664:	4909      	ldr	r1, [pc, #36]	; (801e68c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e666:	480a      	ldr	r0, [pc, #40]	; (801e690 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e668:	f006 fc03 	bl	8024e72 <__aeabi_atexit>
 801e66c:	4b05      	ldr	r3, [pc, #20]	; (801e684 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e66e:	62ab      	str	r3, [r5, #40]	; 0x28
 801e670:	4b07      	ldr	r3, [pc, #28]	; (801e690 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e672:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e674:	bd38      	pop	{r3, r4, r5, pc}
 801e676:	bf00      	nop
 801e678:	2000c5dc 	.word	0x2000c5dc
 801e67c:	20000000 	.word	0x20000000
 801e680:	0801cfdf 	.word	0x0801cfdf
 801e684:	20000064 	.word	0x20000064
 801e688:	2000c5e0 	.word	0x2000c5e0
 801e68c:	0801cfdd 	.word	0x0801cfdd
 801e690:	20000068 	.word	0x20000068

0801e694 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e694:	b510      	push	{r4, lr}
 801e696:	4604      	mov	r4, r0
 801e698:	f7ff ff88 	bl	801e5ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e69c:	4620      	mov	r0, r4
 801e69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6a2:	f7ff bfbd 	b.w	801e620 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e6a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e6a8:	b538      	push	{r3, r4, r5, lr}
 801e6aa:	4c15      	ldr	r4, [pc, #84]	; (801e700 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e6ac:	4605      	mov	r5, r0
 801e6ae:	7823      	ldrb	r3, [r4, #0]
 801e6b0:	f3bf 8f5b 	dmb	ish
 801e6b4:	07da      	lsls	r2, r3, #31
 801e6b6:	d40b      	bmi.n	801e6d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	f006 fbe1 	bl	8024e80 <__cxa_guard_acquire>
 801e6be:	b138      	cbz	r0, 801e6d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e6c0:	4620      	mov	r0, r4
 801e6c2:	f006 fbe9 	bl	8024e98 <__cxa_guard_release>
 801e6c6:	4a0f      	ldr	r2, [pc, #60]	; (801e704 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e6c8:	490f      	ldr	r1, [pc, #60]	; (801e708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e6ca:	4810      	ldr	r0, [pc, #64]	; (801e70c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e6cc:	f006 fbd1 	bl	8024e72 <__aeabi_atexit>
 801e6d0:	4c0f      	ldr	r4, [pc, #60]	; (801e710 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e6d2:	7823      	ldrb	r3, [r4, #0]
 801e6d4:	f3bf 8f5b 	dmb	ish
 801e6d8:	07db      	lsls	r3, r3, #31
 801e6da:	d40b      	bmi.n	801e6f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e6dc:	4620      	mov	r0, r4
 801e6de:	f006 fbcf 	bl	8024e80 <__cxa_guard_acquire>
 801e6e2:	b138      	cbz	r0, 801e6f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e6e4:	4620      	mov	r0, r4
 801e6e6:	f006 fbd7 	bl	8024e98 <__cxa_guard_release>
 801e6ea:	4a06      	ldr	r2, [pc, #24]	; (801e704 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e6ec:	4909      	ldr	r1, [pc, #36]	; (801e714 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e6ee:	480a      	ldr	r0, [pc, #40]	; (801e718 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e6f0:	f006 fbbf 	bl	8024e72 <__aeabi_atexit>
 801e6f4:	4b05      	ldr	r3, [pc, #20]	; (801e70c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e6f6:	642b      	str	r3, [r5, #64]	; 0x40
 801e6f8:	4b07      	ldr	r3, [pc, #28]	; (801e718 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e6fa:	646b      	str	r3, [r5, #68]	; 0x44
 801e6fc:	bd38      	pop	{r3, r4, r5, pc}
 801e6fe:	bf00      	nop
 801e700:	2000c60c 	.word	0x2000c60c
 801e704:	20000000 	.word	0x20000000
 801e708:	0801cfd3 	.word	0x0801cfd3
 801e70c:	20000094 	.word	0x20000094
 801e710:	2000c610 	.word	0x2000c610
 801e714:	0801cfd1 	.word	0x0801cfd1
 801e718:	20000098 	.word	0x20000098

0801e71c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e71c:	b538      	push	{r3, r4, r5, lr}
 801e71e:	4c15      	ldr	r4, [pc, #84]	; (801e774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e720:	4605      	mov	r5, r0
 801e722:	7823      	ldrb	r3, [r4, #0]
 801e724:	f3bf 8f5b 	dmb	ish
 801e728:	07da      	lsls	r2, r3, #31
 801e72a:	d40b      	bmi.n	801e744 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e72c:	4620      	mov	r0, r4
 801e72e:	f006 fba7 	bl	8024e80 <__cxa_guard_acquire>
 801e732:	b138      	cbz	r0, 801e744 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e734:	4620      	mov	r0, r4
 801e736:	f006 fbaf 	bl	8024e98 <__cxa_guard_release>
 801e73a:	4a0f      	ldr	r2, [pc, #60]	; (801e778 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e73c:	490f      	ldr	r1, [pc, #60]	; (801e77c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e73e:	4810      	ldr	r0, [pc, #64]	; (801e780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e740:	f006 fb97 	bl	8024e72 <__aeabi_atexit>
 801e744:	4c0f      	ldr	r4, [pc, #60]	; (801e784 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e746:	7823      	ldrb	r3, [r4, #0]
 801e748:	f3bf 8f5b 	dmb	ish
 801e74c:	07db      	lsls	r3, r3, #31
 801e74e:	d40b      	bmi.n	801e768 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e750:	4620      	mov	r0, r4
 801e752:	f006 fb95 	bl	8024e80 <__cxa_guard_acquire>
 801e756:	b138      	cbz	r0, 801e768 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e758:	4620      	mov	r0, r4
 801e75a:	f006 fb9d 	bl	8024e98 <__cxa_guard_release>
 801e75e:	4a06      	ldr	r2, [pc, #24]	; (801e778 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e760:	4909      	ldr	r1, [pc, #36]	; (801e788 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e762:	480a      	ldr	r0, [pc, #40]	; (801e78c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e764:	f006 fb85 	bl	8024e72 <__aeabi_atexit>
 801e768:	4b05      	ldr	r3, [pc, #20]	; (801e780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e76a:	63ab      	str	r3, [r5, #56]	; 0x38
 801e76c:	4b07      	ldr	r3, [pc, #28]	; (801e78c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e76e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e770:	bd38      	pop	{r3, r4, r5, pc}
 801e772:	bf00      	nop
 801e774:	2000c5ec 	.word	0x2000c5ec
 801e778:	20000000 	.word	0x20000000
 801e77c:	0801cfd7 	.word	0x0801cfd7
 801e780:	20000074 	.word	0x20000074
 801e784:	2000c5f0 	.word	0x2000c5f0
 801e788:	0801cfd5 	.word	0x0801cfd5
 801e78c:	20000078 	.word	0x20000078

0801e790 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e790:	b510      	push	{r4, lr}
 801e792:	4604      	mov	r4, r0
 801e794:	f7ff ff88 	bl	801e6a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e798:	4620      	mov	r0, r4
 801e79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e79e:	f7ff bfbd 	b.w	801e71c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e7a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e7a4:	b538      	push	{r3, r4, r5, lr}
 801e7a6:	4c15      	ldr	r4, [pc, #84]	; (801e7fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e7a8:	4605      	mov	r5, r0
 801e7aa:	7823      	ldrb	r3, [r4, #0]
 801e7ac:	f3bf 8f5b 	dmb	ish
 801e7b0:	07da      	lsls	r2, r3, #31
 801e7b2:	d40b      	bmi.n	801e7cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	f006 fb63 	bl	8024e80 <__cxa_guard_acquire>
 801e7ba:	b138      	cbz	r0, 801e7cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e7bc:	4620      	mov	r0, r4
 801e7be:	f006 fb6b 	bl	8024e98 <__cxa_guard_release>
 801e7c2:	4a0f      	ldr	r2, [pc, #60]	; (801e800 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e7c4:	490f      	ldr	r1, [pc, #60]	; (801e804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e7c6:	4810      	ldr	r0, [pc, #64]	; (801e808 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e7c8:	f006 fb53 	bl	8024e72 <__aeabi_atexit>
 801e7cc:	4c0f      	ldr	r4, [pc, #60]	; (801e80c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e7ce:	7823      	ldrb	r3, [r4, #0]
 801e7d0:	f3bf 8f5b 	dmb	ish
 801e7d4:	07db      	lsls	r3, r3, #31
 801e7d6:	d40b      	bmi.n	801e7f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e7d8:	4620      	mov	r0, r4
 801e7da:	f006 fb51 	bl	8024e80 <__cxa_guard_acquire>
 801e7de:	b138      	cbz	r0, 801e7f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e7e0:	4620      	mov	r0, r4
 801e7e2:	f006 fb59 	bl	8024e98 <__cxa_guard_release>
 801e7e6:	4a06      	ldr	r2, [pc, #24]	; (801e800 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e7e8:	4909      	ldr	r1, [pc, #36]	; (801e810 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e7ea:	480a      	ldr	r0, [pc, #40]	; (801e814 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e7ec:	f006 fb41 	bl	8024e72 <__aeabi_atexit>
 801e7f0:	4b05      	ldr	r3, [pc, #20]	; (801e808 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e7f2:	652b      	str	r3, [r5, #80]	; 0x50
 801e7f4:	4b07      	ldr	r3, [pc, #28]	; (801e814 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e7f6:	656b      	str	r3, [r5, #84]	; 0x54
 801e7f8:	bd38      	pop	{r3, r4, r5, pc}
 801e7fa:	bf00      	nop
 801e7fc:	2000c5e4 	.word	0x2000c5e4
 801e800:	20000000 	.word	0x20000000
 801e804:	0801cfcb 	.word	0x0801cfcb
 801e808:	2000006c 	.word	0x2000006c
 801e80c:	2000c5e8 	.word	0x2000c5e8
 801e810:	0801cfc9 	.word	0x0801cfc9
 801e814:	20000070 	.word	0x20000070

0801e818 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e818:	b538      	push	{r3, r4, r5, lr}
 801e81a:	4c15      	ldr	r4, [pc, #84]	; (801e870 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e81c:	4605      	mov	r5, r0
 801e81e:	7823      	ldrb	r3, [r4, #0]
 801e820:	f3bf 8f5b 	dmb	ish
 801e824:	07da      	lsls	r2, r3, #31
 801e826:	d40b      	bmi.n	801e840 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e828:	4620      	mov	r0, r4
 801e82a:	f006 fb29 	bl	8024e80 <__cxa_guard_acquire>
 801e82e:	b138      	cbz	r0, 801e840 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e830:	4620      	mov	r0, r4
 801e832:	f006 fb31 	bl	8024e98 <__cxa_guard_release>
 801e836:	4a0f      	ldr	r2, [pc, #60]	; (801e874 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e838:	490f      	ldr	r1, [pc, #60]	; (801e878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e83a:	4810      	ldr	r0, [pc, #64]	; (801e87c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e83c:	f006 fb19 	bl	8024e72 <__aeabi_atexit>
 801e840:	4c0f      	ldr	r4, [pc, #60]	; (801e880 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e842:	7823      	ldrb	r3, [r4, #0]
 801e844:	f3bf 8f5b 	dmb	ish
 801e848:	07db      	lsls	r3, r3, #31
 801e84a:	d40b      	bmi.n	801e864 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e84c:	4620      	mov	r0, r4
 801e84e:	f006 fb17 	bl	8024e80 <__cxa_guard_acquire>
 801e852:	b138      	cbz	r0, 801e864 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e854:	4620      	mov	r0, r4
 801e856:	f006 fb1f 	bl	8024e98 <__cxa_guard_release>
 801e85a:	4a06      	ldr	r2, [pc, #24]	; (801e874 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e85c:	4909      	ldr	r1, [pc, #36]	; (801e884 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e85e:	480a      	ldr	r0, [pc, #40]	; (801e888 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e860:	f006 fb07 	bl	8024e72 <__aeabi_atexit>
 801e864:	4b05      	ldr	r3, [pc, #20]	; (801e87c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e866:	64ab      	str	r3, [r5, #72]	; 0x48
 801e868:	4b07      	ldr	r3, [pc, #28]	; (801e888 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e86a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e86c:	bd38      	pop	{r3, r4, r5, pc}
 801e86e:	bf00      	nop
 801e870:	2000c5d4 	.word	0x2000c5d4
 801e874:	20000000 	.word	0x20000000
 801e878:	0801cfcf 	.word	0x0801cfcf
 801e87c:	2000005c 	.word	0x2000005c
 801e880:	2000c5d8 	.word	0x2000c5d8
 801e884:	0801cfcd 	.word	0x0801cfcd
 801e888:	20000060 	.word	0x20000060

0801e88c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e88c:	b510      	push	{r4, lr}
 801e88e:	4604      	mov	r4, r0
 801e890:	f7ff ff88 	bl	801e7a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e894:	4620      	mov	r0, r4
 801e896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e89a:	f7ff bfbd 	b.w	801e818 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e89e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e89e:	b510      	push	{r4, lr}
 801e8a0:	4604      	mov	r4, r0
 801e8a2:	f7ff fff3 	bl	801e88c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e8a6:	4620      	mov	r0, r4
 801e8a8:	f7ff ff72 	bl	801e790 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f7ff fe73 	bl	801e598 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e8b2:	4620      	mov	r0, r4
 801e8b4:	f7ff fdf2 	bl	801e49c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e8b8:	4620      	mov	r0, r4
 801e8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8be:	f7ff bee9 	b.w	801e694 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e8c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c8:	b087      	sub	sp, #28
 801e8ca:	7888      	ldrb	r0, [r1, #2]
 801e8cc:	4616      	mov	r6, r2
 801e8ce:	9001      	str	r0, [sp, #4]
 801e8d0:	7848      	ldrb	r0, [r1, #1]
 801e8d2:	9100      	str	r1, [sp, #0]
 801e8d4:	9002      	str	r0, [sp, #8]
 801e8d6:	7808      	ldrb	r0, [r1, #0]
 801e8d8:	9901      	ldr	r1, [sp, #4]
 801e8da:	9003      	str	r0, [sp, #12]
 801e8dc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e8e0:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e8e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e8e8:	9902      	ldr	r1, [sp, #8]
 801e8ea:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e8ee:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e8f2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e8f6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e8fa:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e8fe:	9005      	str	r0, [sp, #20]
 801e900:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e904:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e908:	2d00      	cmp	r5, #0
 801e90a:	eb06 080a 	add.w	r8, r6, sl
 801e90e:	db4a      	blt.n	801e9a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e910:	45a9      	cmp	r9, r5
 801e912:	dd48      	ble.n	801e9a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e914:	f1bc 0f00 	cmp.w	ip, #0
 801e918:	db43      	blt.n	801e9a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e91a:	45e6      	cmp	lr, ip
 801e91c:	dd41      	ble.n	801e9a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e91e:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e922:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e926:	441e      	add	r6, r3
 801e928:	f11c 0001 	adds.w	r0, ip, #1
 801e92c:	d43e      	bmi.n	801e9ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e92e:	4586      	cmp	lr, r0
 801e930:	dd3c      	ble.n	801e9ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e932:	2a00      	cmp	r2, #0
 801e934:	d03a      	beq.n	801e9ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e936:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e93a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e93e:	4418      	add	r0, r3
 801e940:	3501      	adds	r5, #1
 801e942:	d437      	bmi.n	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e944:	45a9      	cmp	r9, r5
 801e946:	dd35      	ble.n	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e948:	b3a4      	cbz	r4, 801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e94a:	f1bc 0f00 	cmp.w	ip, #0
 801e94e:	db2f      	blt.n	801e9b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e950:	45e6      	cmp	lr, ip
 801e952:	dd2d      	ble.n	801e9b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e954:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e95c:	441d      	add	r5, r3
 801e95e:	f11c 0c01 	adds.w	ip, ip, #1
 801e962:	d42a      	bmi.n	801e9ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e964:	45e6      	cmp	lr, ip
 801e966:	dd28      	ble.n	801e9ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e968:	b33a      	cbz	r2, 801e9ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e96a:	44c6      	add	lr, r8
 801e96c:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e970:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e974:	4463      	add	r3, ip
 801e976:	ea6f 0c07 	mvn.w	ip, r7
 801e97a:	2a0f      	cmp	r2, #15
 801e97c:	f896 a000 	ldrb.w	sl, [r6]
 801e980:	fa5f fc8c 	uxtb.w	ip, ip
 801e984:	f890 b000 	ldrb.w	fp, [r0]
 801e988:	f895 9000 	ldrb.w	r9, [r5]
 801e98c:	7819      	ldrb	r1, [r3, #0]
 801e98e:	d801      	bhi.n	801e994 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e990:	2c0f      	cmp	r4, #15
 801e992:	d914      	bls.n	801e9be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e994:	4b40      	ldr	r3, [pc, #256]	; (801ea98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e996:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e99a:	4a40      	ldr	r2, [pc, #256]	; (801ea9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e99c:	4840      	ldr	r0, [pc, #256]	; (801eaa0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e99e:	f006 fa9b 	bl	8024ed8 <__assert_func>
 801e9a2:	ae05      	add	r6, sp, #20
 801e9a4:	e7c0      	b.n	801e928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e9a6:	a805      	add	r0, sp, #20
 801e9a8:	4606      	mov	r6, r0
 801e9aa:	e7c9      	b.n	801e940 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e9ac:	a805      	add	r0, sp, #20
 801e9ae:	e7c7      	b.n	801e940 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e9b0:	ad05      	add	r5, sp, #20
 801e9b2:	e7d4      	b.n	801e95e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e9b4:	ab05      	add	r3, sp, #20
 801e9b6:	461d      	mov	r5, r3
 801e9b8:	e7dd      	b.n	801e976 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e9ba:	ab05      	add	r3, sp, #20
 801e9bc:	e7db      	b.n	801e976 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e9be:	b292      	uxth	r2, r2
 801e9c0:	b2a4      	uxth	r4, r4
 801e9c2:	fa1f fc8c 	uxth.w	ip, ip
 801e9c6:	fb02 f804 	mul.w	r8, r2, r4
 801e9ca:	0112      	lsls	r2, r2, #4
 801e9cc:	b2bf      	uxth	r7, r7
 801e9ce:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e9d2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e9d6:	eba2 0208 	sub.w	r2, r2, r8
 801e9da:	b2a4      	uxth	r4, r4
 801e9dc:	b292      	uxth	r2, r2
 801e9de:	ebae 0e04 	sub.w	lr, lr, r4
 801e9e2:	fb02 fb0b 	mul.w	fp, r2, fp
 801e9e6:	fa1f fe8e 	uxth.w	lr, lr
 801e9ea:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e9ee:	fb04 aa09 	mla	sl, r4, r9, sl
 801e9f2:	fb08 aa01 	mla	sl, r8, r1, sl
 801e9f6:	9903      	ldr	r1, [sp, #12]
 801e9f8:	fb11 f90c 	smulbb	r9, r1, ip
 801e9fc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ea00:	9900      	ldr	r1, [sp, #0]
 801ea02:	fb0a 9a07 	mla	sl, sl, r7, r9
 801ea06:	fa1f fa8a 	uxth.w	sl, sl
 801ea0a:	f10a 0901 	add.w	r9, sl, #1
 801ea0e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801ea12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ea16:	f881 a000 	strb.w	sl, [r1]
 801ea1a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ea1e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ea22:	fb02 fa0a 	mul.w	sl, r2, sl
 801ea26:	9902      	ldr	r1, [sp, #8]
 801ea28:	fb0e aa09 	mla	sl, lr, r9, sl
 801ea2c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801ea30:	fb04 aa09 	mla	sl, r4, r9, sl
 801ea34:	f893 9001 	ldrb.w	r9, [r3, #1]
 801ea38:	fb08 a909 	mla	r9, r8, r9, sl
 801ea3c:	fb11 fa0c 	smulbb	sl, r1, ip
 801ea40:	9900      	ldr	r1, [sp, #0]
 801ea42:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ea46:	fb09 a907 	mla	r9, r9, r7, sl
 801ea4a:	fa1f f989 	uxth.w	r9, r9
 801ea4e:	f109 0a01 	add.w	sl, r9, #1
 801ea52:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ea56:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea5a:	f881 9001 	strb.w	r9, [r1, #1]
 801ea5e:	7880      	ldrb	r0, [r0, #2]
 801ea60:	78b6      	ldrb	r6, [r6, #2]
 801ea62:	4342      	muls	r2, r0
 801ea64:	78a8      	ldrb	r0, [r5, #2]
 801ea66:	789b      	ldrb	r3, [r3, #2]
 801ea68:	fb0e 2206 	mla	r2, lr, r6, r2
 801ea6c:	fb04 2400 	mla	r4, r4, r0, r2
 801ea70:	fb08 4803 	mla	r8, r8, r3, r4
 801ea74:	9b01      	ldr	r3, [sp, #4]
 801ea76:	fb13 fc0c 	smulbb	ip, r3, ip
 801ea7a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ea7e:	fb08 c707 	mla	r7, r8, r7, ip
 801ea82:	b2bf      	uxth	r7, r7
 801ea84:	f107 0c01 	add.w	ip, r7, #1
 801ea88:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ea8c:	123f      	asrs	r7, r7, #8
 801ea8e:	708f      	strb	r7, [r1, #2]
 801ea90:	b007      	add	sp, #28
 801ea92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea96:	bf00      	nop
 801ea98:	080299a3 	.word	0x080299a3
 801ea9c:	08029e9a 	.word	0x08029e9a
 801eaa0:	08029a6c 	.word	0x08029a6c

0801eaa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa8:	ed2d 8b08 	vpush	{d8-d11}
 801eaac:	b095      	sub	sp, #84	; 0x54
 801eaae:	eeb0 aa40 	vmov.f32	s20, s0
 801eab2:	eef0 9a60 	vmov.f32	s19, s1
 801eab6:	930a      	str	r3, [sp, #40]	; 0x28
 801eab8:	eeb0 9a41 	vmov.f32	s18, s2
 801eabc:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801eac0:	eeb0 8a62 	vmov.f32	s16, s5
 801eac4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801eac6:	eef0 8a43 	vmov.f32	s17, s6
 801eaca:	930c      	str	r3, [sp, #48]	; 0x30
 801eacc:	eef0 ba44 	vmov.f32	s23, s8
 801ead0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ead4:	eeb0 ba64 	vmov.f32	s22, s9
 801ead8:	9013      	str	r0, [sp, #76]	; 0x4c
 801eada:	eef0 aa45 	vmov.f32	s21, s10
 801eade:	9310      	str	r3, [sp, #64]	; 0x40
 801eae0:	6860      	ldr	r0, [r4, #4]
 801eae2:	910f      	str	r1, [sp, #60]	; 0x3c
 801eae4:	9212      	str	r2, [sp, #72]	; 0x48
 801eae6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801eae8:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801eaec:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801eaf0:	fb00 1303 	mla	r3, r0, r3, r1
 801eaf4:	6821      	ldr	r1, [r4, #0]
 801eaf6:	6854      	ldr	r4, [r2, #4]
 801eaf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eafc:	18cb      	adds	r3, r1, r3
 801eafe:	930b      	str	r3, [sp, #44]	; 0x2c
 801eb00:	6813      	ldr	r3, [r2, #0]
 801eb02:	930e      	str	r3, [sp, #56]	; 0x38
 801eb04:	1d23      	adds	r3, r4, #4
 801eb06:	9309      	str	r3, [sp, #36]	; 0x24
 801eb08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb0a:	43db      	mvns	r3, r3
 801eb0c:	b2db      	uxtb	r3, r3
 801eb0e:	930d      	str	r3, [sp, #52]	; 0x34
 801eb10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	dc03      	bgt.n	801eb1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801eb16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	f340 823c 	ble.w	801ef96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801eb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	f340 8115 	ble.w	801ed50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801eb26:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801eb28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb2a:	1412      	asrs	r2, r2, #16
 801eb2c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801eb30:	d431      	bmi.n	801eb96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801eb32:	1c51      	adds	r1, r2, #1
 801eb34:	428d      	cmp	r5, r1
 801eb36:	dd31      	ble.n	801eb9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	db2f      	blt.n	801eb9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801eb3c:	1c59      	adds	r1, r3, #1
 801eb3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eb40:	4288      	cmp	r0, r1
 801eb42:	dd2b      	ble.n	801eb9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801eb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb48:	3b01      	subs	r3, #1
 801eb4a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801eb4c:	fb02 1203 	mla	r2, r2, r3, r1
 801eb50:	1412      	asrs	r2, r2, #16
 801eb52:	d42d      	bmi.n	801ebb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801eb54:	3201      	adds	r2, #1
 801eb56:	4295      	cmp	r5, r2
 801eb58:	dd2a      	ble.n	801ebb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801eb5a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eb5c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eb5e:	fb02 1303 	mla	r3, r2, r3, r1
 801eb62:	141b      	asrs	r3, r3, #16
 801eb64:	d424      	bmi.n	801ebb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801eb66:	3301      	adds	r3, #1
 801eb68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb6a:	429a      	cmp	r2, r3
 801eb6c:	dd20      	ble.n	801ebb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801eb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb70:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801eb74:	f103 0c03 	add.w	ip, r3, #3
 801eb78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb7a:	9311      	str	r3, [sp, #68]	; 0x44
 801eb7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	f300 814f 	bgt.w	801ee22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801eb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eb88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb90:	441a      	add	r2, r3
 801eb92:	920b      	str	r2, [sp, #44]	; 0x2c
 801eb94:	e0de      	b.n	801ed54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eb96:	1c51      	adds	r1, r2, #1
 801eb98:	f040 80cb 	bne.w	801ed32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801eb9c:	42aa      	cmp	r2, r5
 801eb9e:	f280 80c8 	bge.w	801ed32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801eba2:	1c5f      	adds	r7, r3, #1
 801eba4:	f2c0 80c5 	blt.w	801ed32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801eba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ebaa:	4293      	cmp	r3, r2
 801ebac:	f280 80c1 	bge.w	801ed32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ebb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebb2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ebb4:	9311      	str	r3, [sp, #68]	; 0x44
 801ebb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebb8:	2b00      	cmp	r3, #0
 801ebba:	dde3      	ble.n	801eb84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801ebbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ebbe:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ebc0:	141a      	asrs	r2, r3, #16
 801ebc2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ebc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ebc6:	1400      	asrs	r0, r0, #16
 801ebc8:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801ebcc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ebd0:	f100 810e 	bmi.w	801edf0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ebd4:	1c46      	adds	r6, r0, #1
 801ebd6:	42b5      	cmp	r5, r6
 801ebd8:	f340 810c 	ble.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801ebdc:	2a00      	cmp	r2, #0
 801ebde:	f2c0 8109 	blt.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801ebe2:	1c56      	adds	r6, r2, #1
 801ebe4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ebe6:	42b4      	cmp	r4, r6
 801ebe8:	f340 8104 	ble.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801ebec:	fb02 0005 	mla	r0, r2, r5, r0
 801ebf0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ebf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ebf4:	f814 e000 	ldrb.w	lr, [r4, r0]
 801ebf8:	4402      	add	r2, r0
 801ebfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ebfc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ec00:	eb00 080e 	add.w	r8, r0, lr
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	f000 80e4 	beq.w	801edd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801ec0a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ec0e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ec12:	4484      	add	ip, r0
 801ec14:	2900      	cmp	r1, #0
 801ec16:	f000 80e5 	beq.w	801ede4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801ec1a:	1950      	adds	r0, r2, r5
 801ec1c:	5d52      	ldrb	r2, [r2, r5]
 801ec1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ec20:	7840      	ldrb	r0, [r0, #1]
 801ec22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec2a:	4422      	add	r2, r4
 801ec2c:	4420      	add	r0, r4
 801ec2e:	b29b      	uxth	r3, r3
 801ec30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ec32:	b289      	uxth	r1, r1
 801ec34:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801ec38:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ec3c:	fb03 fa01 	mul.w	sl, r3, r1
 801ec40:	011b      	lsls	r3, r3, #4
 801ec42:	f89c e000 	ldrb.w	lr, [ip]
 801ec46:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ec4a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801ec4e:	eba3 030a 	sub.w	r3, r3, sl
 801ec52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ec54:	b289      	uxth	r1, r1
 801ec56:	b29b      	uxth	r3, r3
 801ec58:	eba9 0901 	sub.w	r9, r9, r1
 801ec5c:	fb03 fe0e 	mul.w	lr, r3, lr
 801ec60:	fa1f f989 	uxth.w	r9, r9
 801ec64:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ec68:	f892 b000 	ldrb.w	fp, [r2]
 801ec6c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ec70:	f890 b000 	ldrb.w	fp, [r0]
 801ec74:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ec78:	f897 b000 	ldrb.w	fp, [r7]
 801ec7c:	fb1b fb04 	smulbb	fp, fp, r4
 801ec80:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ec84:	fb0e be06 	mla	lr, lr, r6, fp
 801ec88:	fa1f fe8e 	uxth.w	lr, lr
 801ec8c:	f10e 0b01 	add.w	fp, lr, #1
 801ec90:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801ec94:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801ec98:	f887 b000 	strb.w	fp, [r7]
 801ec9c:	f89c e001 	ldrb.w	lr, [ip, #1]
 801eca0:	f898 b001 	ldrb.w	fp, [r8, #1]
 801eca4:	fb03 fe0e 	mul.w	lr, r3, lr
 801eca8:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ecac:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ecb0:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ecb4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ecb8:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ecbc:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ecc0:	fb1b fb04 	smulbb	fp, fp, r4
 801ecc4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ecc8:	fb0e be06 	mla	lr, lr, r6, fp
 801eccc:	fa1f fe8e 	uxth.w	lr, lr
 801ecd0:	f10e 0b01 	add.w	fp, lr, #1
 801ecd4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ecd8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecdc:	f887 e001 	strb.w	lr, [r7, #1]
 801ece0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ece4:	f898 e002 	ldrb.w	lr, [r8, #2]
 801ece8:	fb03 f30c 	mul.w	r3, r3, ip
 801ecec:	fb09 330e 	mla	r3, r9, lr, r3
 801ecf0:	f892 e002 	ldrb.w	lr, [r2, #2]
 801ecf4:	7882      	ldrb	r2, [r0, #2]
 801ecf6:	fb01 310e 	mla	r1, r1, lr, r3
 801ecfa:	fb0a 1a02 	mla	sl, sl, r2, r1
 801ecfe:	78b9      	ldrb	r1, [r7, #2]
 801ed00:	fb11 f104 	smulbb	r1, r1, r4
 801ed04:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ed08:	fb0a 1606 	mla	r6, sl, r6, r1
 801ed0c:	b2b6      	uxth	r6, r6
 801ed0e:	1c73      	adds	r3, r6, #1
 801ed10:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ed14:	1236      	asrs	r6, r6, #8
 801ed16:	70be      	strb	r6, [r7, #2]
 801ed18:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ed1a:	3703      	adds	r7, #3
 801ed1c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ed1e:	4413      	add	r3, r2
 801ed20:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ed22:	9327      	str	r3, [sp, #156]	; 0x9c
 801ed24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed26:	4413      	add	r3, r2
 801ed28:	9328      	str	r3, [sp, #160]	; 0xa0
 801ed2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ed2c:	3b01      	subs	r3, #1
 801ed2e:	9311      	str	r3, [sp, #68]	; 0x44
 801ed30:	e741      	b.n	801ebb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801ed32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ed34:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ed36:	4413      	add	r3, r2
 801ed38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ed3a:	9327      	str	r3, [sp, #156]	; 0x9c
 801ed3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed3e:	4413      	add	r3, r2
 801ed40:	9328      	str	r3, [sp, #160]	; 0xa0
 801ed42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed44:	3b01      	subs	r3, #1
 801ed46:	930a      	str	r3, [sp, #40]	; 0x28
 801ed48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed4a:	3303      	adds	r3, #3
 801ed4c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ed4e:	e6e6      	b.n	801eb1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ed50:	f47f aef8 	bne.w	801eb44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ed54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	f340 811d 	ble.w	801ef96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801ed5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed62:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ed66:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ed6a:	eef0 6a48 	vmov.f32	s13, s16
 801ed6e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ed72:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ed76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed7a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801ed7e:	eef0 6a68 	vmov.f32	s13, s17
 801ed82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed86:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801ed8a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ed8e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ed92:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ed96:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ed9a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ed9e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eda2:	ee18 2a10 	vmov	r2, s16
 801eda6:	eeb0 8a47 	vmov.f32	s16, s14
 801edaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801edae:	ee18 2a90 	vmov	r2, s17
 801edb2:	9329      	str	r3, [sp, #164]	; 0xa4
 801edb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edb6:	eef0 8a67 	vmov.f32	s17, s15
 801edba:	fb92 f3f3 	sdiv	r3, r2, r3
 801edbe:	932a      	str	r3, [sp, #168]	; 0xa8
 801edc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801edc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801edc4:	3b01      	subs	r3, #1
 801edc6:	930f      	str	r3, [sp, #60]	; 0x3c
 801edc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edca:	bf08      	it	eq
 801edcc:	4613      	moveq	r3, r2
 801edce:	930a      	str	r3, [sp, #40]	; 0x28
 801edd0:	e69e      	b.n	801eb10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801edd2:	b151      	cbz	r1, 801edea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801edd4:	5d52      	ldrb	r2, [r2, r5]
 801edd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801edd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eddc:	4402      	add	r2, r0
 801edde:	4640      	mov	r0, r8
 801ede0:	46c4      	mov	ip, r8
 801ede2:	e724      	b.n	801ec2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801ede4:	4640      	mov	r0, r8
 801ede6:	4642      	mov	r2, r8
 801ede8:	e721      	b.n	801ec2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801edea:	4640      	mov	r0, r8
 801edec:	4642      	mov	r2, r8
 801edee:	e7f7      	b.n	801ede0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801edf0:	1c46      	adds	r6, r0, #1
 801edf2:	d191      	bne.n	801ed18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801edf4:	4285      	cmp	r5, r0
 801edf6:	dd8f      	ble.n	801ed18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801edf8:	1c54      	adds	r4, r2, #1
 801edfa:	db8d      	blt.n	801ed18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801edfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801edfe:	4294      	cmp	r4, r2
 801ee00:	dd8a      	ble.n	801ed18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ee02:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ee04:	9002      	str	r0, [sp, #8]
 801ee06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ee08:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801ee0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee10:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ee14:	e9cd 5300 	strd	r5, r3, [sp]
 801ee18:	4639      	mov	r1, r7
 801ee1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee1c:	f7ff fd52 	bl	801e8c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ee20:	e77a      	b.n	801ed18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ee22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ee24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee26:	1410      	asrs	r0, r2, #16
 801ee28:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ee2c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ee2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ee30:	1412      	asrs	r2, r2, #16
 801ee32:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ee36:	fb05 2000 	mla	r0, r5, r0, r2
 801ee3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee3c:	f814 8000 	ldrb.w	r8, [r4, r0]
 801ee40:	4402      	add	r2, r0
 801ee42:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee44:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ee48:	eb00 0708 	add.w	r7, r0, r8
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	f000 8093 	beq.w	801ef78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801ee52:	7856      	ldrb	r6, [r2, #1]
 801ee54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ee58:	4406      	add	r6, r0
 801ee5a:	2900      	cmp	r1, #0
 801ee5c:	f000 8095 	beq.w	801ef8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ee60:	1950      	adds	r0, r2, r5
 801ee62:	5d52      	ldrb	r2, [r2, r5]
 801ee64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee66:	7840      	ldrb	r0, [r0, #1]
 801ee68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee70:	4422      	add	r2, r4
 801ee72:	4420      	add	r0, r4
 801ee74:	b29b      	uxth	r3, r3
 801ee76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee78:	b289      	uxth	r1, r1
 801ee7a:	f10c 0c03 	add.w	ip, ip, #3
 801ee7e:	f814 b008 	ldrb.w	fp, [r4, r8]
 801ee82:	fb03 f901 	mul.w	r9, r3, r1
 801ee86:	011b      	lsls	r3, r3, #4
 801ee88:	f896 8000 	ldrb.w	r8, [r6]
 801ee8c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ee90:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ee94:	eba3 0309 	sub.w	r3, r3, r9
 801ee98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee9a:	b289      	uxth	r1, r1
 801ee9c:	b29b      	uxth	r3, r3
 801ee9e:	ebae 0e01 	sub.w	lr, lr, r1
 801eea2:	fb03 f808 	mul.w	r8, r3, r8
 801eea6:	fa1f fe8e 	uxth.w	lr, lr
 801eeaa:	fb0e 880b 	mla	r8, lr, fp, r8
 801eeae:	f892 b000 	ldrb.w	fp, [r2]
 801eeb2:	fb01 880b 	mla	r8, r1, fp, r8
 801eeb6:	f890 b000 	ldrb.w	fp, [r0]
 801eeba:	fb09 880b 	mla	r8, r9, fp, r8
 801eebe:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801eec2:	fb1b fb04 	smulbb	fp, fp, r4
 801eec6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801eeca:	fb08 b80a 	mla	r8, r8, sl, fp
 801eece:	fa1f f888 	uxth.w	r8, r8
 801eed2:	f108 0b01 	add.w	fp, r8, #1
 801eed6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eeda:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eede:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801eee2:	f896 8001 	ldrb.w	r8, [r6, #1]
 801eee6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801eeea:	fb03 f808 	mul.w	r8, r3, r8
 801eeee:	fb0e 880b 	mla	r8, lr, fp, r8
 801eef2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801eef6:	fb01 880b 	mla	r8, r1, fp, r8
 801eefa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801eefe:	fb09 880b 	mla	r8, r9, fp, r8
 801ef02:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801ef06:	fb1b fb04 	smulbb	fp, fp, r4
 801ef0a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ef0e:	fb08 b80a 	mla	r8, r8, sl, fp
 801ef12:	fa1f f888 	uxth.w	r8, r8
 801ef16:	f108 0b01 	add.w	fp, r8, #1
 801ef1a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ef1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef22:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801ef26:	78b6      	ldrb	r6, [r6, #2]
 801ef28:	78bf      	ldrb	r7, [r7, #2]
 801ef2a:	4373      	muls	r3, r6
 801ef2c:	7896      	ldrb	r6, [r2, #2]
 801ef2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ef30:	fb0e 3307 	mla	r3, lr, r7, r3
 801ef34:	fb01 3306 	mla	r3, r1, r6, r3
 801ef38:	7886      	ldrb	r6, [r0, #2]
 801ef3a:	fb09 3906 	mla	r9, r9, r6, r3
 801ef3e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801ef42:	fb13 f304 	smulbb	r3, r3, r4
 801ef46:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ef4a:	fb09 390a 	mla	r9, r9, sl, r3
 801ef4e:	fa1f f989 	uxth.w	r9, r9
 801ef52:	f109 0301 	add.w	r3, r9, #1
 801ef56:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ef5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ef5c:	4413      	add	r3, r2
 801ef5e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ef60:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef64:	9327      	str	r3, [sp, #156]	; 0x9c
 801ef66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ef68:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801ef6c:	4413      	add	r3, r2
 801ef6e:	9328      	str	r3, [sp, #160]	; 0xa0
 801ef70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ef72:	3b01      	subs	r3, #1
 801ef74:	9311      	str	r3, [sp, #68]	; 0x44
 801ef76:	e601      	b.n	801eb7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ef78:	b151      	cbz	r1, 801ef90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801ef7a:	5d52      	ldrb	r2, [r2, r5]
 801ef7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef82:	4402      	add	r2, r0
 801ef84:	4638      	mov	r0, r7
 801ef86:	463e      	mov	r6, r7
 801ef88:	e774      	b.n	801ee74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ef8a:	4638      	mov	r0, r7
 801ef8c:	463a      	mov	r2, r7
 801ef8e:	e771      	b.n	801ee74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ef90:	4638      	mov	r0, r7
 801ef92:	463a      	mov	r2, r7
 801ef94:	e7f7      	b.n	801ef86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801ef96:	b015      	add	sp, #84	; 0x54
 801ef98:	ecbd 8b08 	vpop	{d8-d11}
 801ef9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801efa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801efa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa4:	780d      	ldrb	r5, [r1, #0]
 801efa6:	f891 9002 	ldrb.w	r9, [r1, #2]
 801efaa:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801efae:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801efb2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801efb6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801efba:	f891 9001 	ldrb.w	r9, [r1, #1]
 801efbe:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801efc2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801efc6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801efca:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801efce:	9501      	str	r5, [sp, #4]
 801efd0:	fb06 470c 	mla	r7, r6, ip, r4
 801efd4:	2e00      	cmp	r6, #0
 801efd6:	eb02 0e07 	add.w	lr, r2, r7
 801efda:	db46      	blt.n	801f06a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801efdc:	45b0      	cmp	r8, r6
 801efde:	dd44      	ble.n	801f06a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801efe0:	2c00      	cmp	r4, #0
 801efe2:	db40      	blt.n	801f066 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801efe4:	45a4      	cmp	ip, r4
 801efe6:	dd3e      	ble.n	801f066 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801efe8:	5dd7      	ldrb	r7, [r2, r7]
 801efea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801efee:	441f      	add	r7, r3
 801eff0:	1c62      	adds	r2, r4, #1
 801eff2:	d43d      	bmi.n	801f070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801eff4:	4594      	cmp	ip, r2
 801eff6:	dd3b      	ble.n	801f070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801eff8:	f1ba 0f00 	cmp.w	sl, #0
 801effc:	d038      	beq.n	801f070 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801effe:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f006:	441d      	add	r5, r3
 801f008:	3601      	adds	r6, #1
 801f00a:	d435      	bmi.n	801f078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f00c:	45b0      	cmp	r8, r6
 801f00e:	dd33      	ble.n	801f078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f010:	b390      	cbz	r0, 801f078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f012:	2c00      	cmp	r4, #0
 801f014:	db2e      	blt.n	801f074 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f016:	45a4      	cmp	ip, r4
 801f018:	dd2c      	ble.n	801f074 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f01a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f01e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f022:	441e      	add	r6, r3
 801f024:	1c62      	adds	r2, r4, #1
 801f026:	d42a      	bmi.n	801f07e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f028:	4594      	cmp	ip, r2
 801f02a:	dd28      	ble.n	801f07e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f02c:	f1ba 0f00 	cmp.w	sl, #0
 801f030:	d025      	beq.n	801f07e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f032:	44f4      	add	ip, lr
 801f034:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f038:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f03c:	4413      	add	r3, r2
 801f03e:	f1ba 0f0f 	cmp.w	sl, #15
 801f042:	f897 8000 	ldrb.w	r8, [r7]
 801f046:	f895 9000 	ldrb.w	r9, [r5]
 801f04a:	f896 e000 	ldrb.w	lr, [r6]
 801f04e:	f893 c000 	ldrb.w	ip, [r3]
 801f052:	d801      	bhi.n	801f058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f054:	280f      	cmp	r0, #15
 801f056:	d914      	bls.n	801f082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f058:	4b29      	ldr	r3, [pc, #164]	; (801f100 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f05a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f05e:	4a29      	ldr	r2, [pc, #164]	; (801f104 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f060:	4829      	ldr	r0, [pc, #164]	; (801f108 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f062:	f005 ff39 	bl	8024ed8 <__assert_func>
 801f066:	af01      	add	r7, sp, #4
 801f068:	e7c2      	b.n	801eff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f06a:	ad01      	add	r5, sp, #4
 801f06c:	462f      	mov	r7, r5
 801f06e:	e7cb      	b.n	801f008 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f070:	ad01      	add	r5, sp, #4
 801f072:	e7c9      	b.n	801f008 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f074:	ae01      	add	r6, sp, #4
 801f076:	e7d5      	b.n	801f024 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f078:	ab01      	add	r3, sp, #4
 801f07a:	461e      	mov	r6, r3
 801f07c:	e7df      	b.n	801f03e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f07e:	ab01      	add	r3, sp, #4
 801f080:	e7dd      	b.n	801f03e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f082:	fa1f f48a 	uxth.w	r4, sl
 801f086:	b280      	uxth	r0, r0
 801f088:	fb04 fa00 	mul.w	sl, r4, r0
 801f08c:	0124      	lsls	r4, r4, #4
 801f08e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f092:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f096:	b282      	uxth	r2, r0
 801f098:	eba4 000a 	sub.w	r0, r4, sl
 801f09c:	ebab 0b02 	sub.w	fp, fp, r2
 801f0a0:	b280      	uxth	r0, r0
 801f0a2:	fa1f fb8b 	uxth.w	fp, fp
 801f0a6:	fb00 f909 	mul.w	r9, r0, r9
 801f0aa:	fb0b 9808 	mla	r8, fp, r8, r9
 801f0ae:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f0b2:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f0b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f0ba:	f881 c000 	strb.w	ip, [r1]
 801f0be:	786c      	ldrb	r4, [r5, #1]
 801f0c0:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f0c4:	4344      	muls	r4, r0
 801f0c6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f0ca:	7874      	ldrb	r4, [r6, #1]
 801f0cc:	fb02 cc04 	mla	ip, r2, r4, ip
 801f0d0:	785c      	ldrb	r4, [r3, #1]
 801f0d2:	fb0a c404 	mla	r4, sl, r4, ip
 801f0d6:	1224      	asrs	r4, r4, #8
 801f0d8:	704c      	strb	r4, [r1, #1]
 801f0da:	78ad      	ldrb	r5, [r5, #2]
 801f0dc:	78bc      	ldrb	r4, [r7, #2]
 801f0de:	4368      	muls	r0, r5
 801f0e0:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f0e4:	78b0      	ldrb	r0, [r6, #2]
 801f0e6:	fb02 b000 	mla	r0, r2, r0, fp
 801f0ea:	789a      	ldrb	r2, [r3, #2]
 801f0ec:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f0f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f0f4:	f881 a002 	strb.w	sl, [r1, #2]
 801f0f8:	b003      	add	sp, #12
 801f0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0fe:	bf00      	nop
 801f100:	080299a3 	.word	0x080299a3
 801f104:	08029e9a 	.word	0x08029e9a
 801f108:	08029a6c 	.word	0x08029a6c

0801f10c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f110:	ed2d 8b0a 	vpush	{d8-d12}
 801f114:	b08f      	sub	sp, #60	; 0x3c
 801f116:	eeb0 aa40 	vmov.f32	s20, s0
 801f11a:	eef0 9a60 	vmov.f32	s19, s1
 801f11e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801f120:	eeb0 9a41 	vmov.f32	s18, s2
 801f124:	9307      	str	r3, [sp, #28]
 801f126:	eeb0 8a62 	vmov.f32	s16, s5
 801f12a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f12e:	eef0 8a43 	vmov.f32	s17, s6
 801f132:	900d      	str	r0, [sp, #52]	; 0x34
 801f134:	eeb0 ca44 	vmov.f32	s24, s8
 801f138:	6860      	ldr	r0, [r4, #4]
 801f13a:	eef0 ba64 	vmov.f32	s23, s9
 801f13e:	9309      	str	r3, [sp, #36]	; 0x24
 801f140:	eeb0 ba45 	vmov.f32	s22, s10
 801f144:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f148:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801f14c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801f150:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f154:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f156:	fb00 1303 	mla	r3, r0, r3, r1
 801f15a:	6821      	ldr	r1, [r4, #0]
 801f15c:	6854      	ldr	r4, [r2, #4]
 801f15e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f162:	3404      	adds	r4, #4
 801f164:	18cb      	adds	r3, r1, r3
 801f166:	9308      	str	r3, [sp, #32]
 801f168:	6813      	ldr	r3, [r2, #0]
 801f16a:	930a      	str	r3, [sp, #40]	; 0x28
 801f16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f16e:	2b00      	cmp	r3, #0
 801f170:	dc03      	bgt.n	801f17a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f174:	2b00      	cmp	r3, #0
 801f176:	f340 81d2 	ble.w	801f51e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f17a:	9b07      	ldr	r3, [sp, #28]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	f340 80e3 	ble.w	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f182:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f184:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f186:	1412      	asrs	r2, r2, #16
 801f188:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f18c:	d42f      	bmi.n	801f1ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f18e:	1c51      	adds	r1, r2, #1
 801f190:	428d      	cmp	r5, r1
 801f192:	dd2f      	ble.n	801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f194:	2b00      	cmp	r3, #0
 801f196:	db2d      	blt.n	801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f198:	1c59      	adds	r1, r3, #1
 801f19a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f19c:	4288      	cmp	r0, r1
 801f19e:	dd29      	ble.n	801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f1a0:	9b07      	ldr	r3, [sp, #28]
 801f1a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f1a4:	3b01      	subs	r3, #1
 801f1a6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f1a8:	fb02 1203 	mla	r2, r2, r3, r1
 801f1ac:	1412      	asrs	r2, r2, #16
 801f1ae:	d42b      	bmi.n	801f208 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f1b0:	3201      	adds	r2, #1
 801f1b2:	4295      	cmp	r5, r2
 801f1b4:	dd28      	ble.n	801f208 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f1b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f1b8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f1ba:	fb02 1303 	mla	r3, r2, r3, r1
 801f1be:	141b      	asrs	r3, r3, #16
 801f1c0:	d422      	bmi.n	801f208 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f1c2:	3301      	adds	r3, #1
 801f1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f1c6:	429a      	cmp	r2, r3
 801f1c8:	dd1e      	ble.n	801f208 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f1ca:	9b08      	ldr	r3, [sp, #32]
 801f1cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f1d0:	f103 0803 	add.w	r8, r3, #3
 801f1d4:	f1ba 0f00 	cmp.w	sl, #0
 801f1d8:	f300 8119 	bgt.w	801f40e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801f1dc:	9b07      	ldr	r3, [sp, #28]
 801f1de:	9a08      	ldr	r2, [sp, #32]
 801f1e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f1e8:	441a      	add	r2, r3
 801f1ea:	9208      	str	r2, [sp, #32]
 801f1ec:	e0ae      	b.n	801f34c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f1ee:	1c51      	adds	r1, r2, #1
 801f1f0:	f040 809b 	bne.w	801f32a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f1f4:	42aa      	cmp	r2, r5
 801f1f6:	f280 8098 	bge.w	801f32a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f1fa:	1c5a      	adds	r2, r3, #1
 801f1fc:	f2c0 8095 	blt.w	801f32a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f202:	4293      	cmp	r3, r2
 801f204:	f280 8091 	bge.w	801f32a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f208:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801f20c:	f1bb 0f00 	cmp.w	fp, #0
 801f210:	dde4      	ble.n	801f1dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f212:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f214:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f216:	141a      	asrs	r2, r3, #16
 801f218:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f21a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f21c:	1400      	asrs	r0, r0, #16
 801f21e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f222:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f226:	f100 80dc 	bmi.w	801f3e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801f22a:	1c47      	adds	r7, r0, #1
 801f22c:	42bd      	cmp	r5, r7
 801f22e:	f340 80da 	ble.w	801f3e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f232:	2a00      	cmp	r2, #0
 801f234:	f2c0 80d7 	blt.w	801f3e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f238:	f102 0c01 	add.w	ip, r2, #1
 801f23c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f23e:	4567      	cmp	r7, ip
 801f240:	f340 80d1 	ble.w	801f3e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f244:	fb02 0005 	mla	r0, r2, r5, r0
 801f248:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f24c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f250:	4402      	add	r2, r0
 801f252:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f256:	eb04 0c08 	add.w	ip, r4, r8
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	f000 80b3 	beq.w	801f3c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801f260:	7857      	ldrb	r7, [r2, #1]
 801f262:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f266:	4427      	add	r7, r4
 801f268:	2900      	cmp	r1, #0
 801f26a:	f000 80b4 	beq.w	801f3d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801f26e:	1950      	adds	r0, r2, r5
 801f270:	5d52      	ldrb	r2, [r2, r5]
 801f272:	7840      	ldrb	r0, [r0, #1]
 801f274:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f278:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f27c:	4422      	add	r2, r4
 801f27e:	4420      	add	r0, r4
 801f280:	b29b      	uxth	r3, r3
 801f282:	f814 a008 	ldrb.w	sl, [r4, r8]
 801f286:	b289      	uxth	r1, r1
 801f288:	f897 8000 	ldrb.w	r8, [r7]
 801f28c:	fb03 f901 	mul.w	r9, r3, r1
 801f290:	011b      	lsls	r3, r3, #4
 801f292:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f296:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f29a:	eba3 0309 	sub.w	r3, r3, r9
 801f29e:	b289      	uxth	r1, r1
 801f2a0:	b29b      	uxth	r3, r3
 801f2a2:	ebae 0e01 	sub.w	lr, lr, r1
 801f2a6:	fb03 f808 	mul.w	r8, r3, r8
 801f2aa:	fa1f fe8e 	uxth.w	lr, lr
 801f2ae:	fb0e 880a 	mla	r8, lr, sl, r8
 801f2b2:	f892 a000 	ldrb.w	sl, [r2]
 801f2b6:	fb01 880a 	mla	r8, r1, sl, r8
 801f2ba:	f890 a000 	ldrb.w	sl, [r0]
 801f2be:	fb09 880a 	mla	r8, r9, sl, r8
 801f2c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f2c6:	f886 8000 	strb.w	r8, [r6]
 801f2ca:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f2ce:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f2d2:	fb03 f808 	mul.w	r8, r3, r8
 801f2d6:	fb0e 880a 	mla	r8, lr, sl, r8
 801f2da:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f2de:	fb01 880a 	mla	r8, r1, sl, r8
 801f2e2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f2e6:	fb09 880a 	mla	r8, r9, sl, r8
 801f2ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f2ee:	f886 8001 	strb.w	r8, [r6, #1]
 801f2f2:	78bf      	ldrb	r7, [r7, #2]
 801f2f4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f2f8:	437b      	muls	r3, r7
 801f2fa:	7892      	ldrb	r2, [r2, #2]
 801f2fc:	fb0e 330c 	mla	r3, lr, ip, r3
 801f300:	fb01 3102 	mla	r1, r1, r2, r3
 801f304:	7882      	ldrb	r2, [r0, #2]
 801f306:	fb09 1902 	mla	r9, r9, r2, r1
 801f30a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f30e:	f886 9002 	strb.w	r9, [r6, #2]
 801f312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f314:	3603      	adds	r6, #3
 801f316:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f318:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f31c:	4413      	add	r3, r2
 801f31e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f320:	9323      	str	r3, [sp, #140]	; 0x8c
 801f322:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f324:	4413      	add	r3, r2
 801f326:	9324      	str	r3, [sp, #144]	; 0x90
 801f328:	e770      	b.n	801f20c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f32a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f32c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f32e:	4413      	add	r3, r2
 801f330:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f332:	9323      	str	r3, [sp, #140]	; 0x8c
 801f334:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f336:	4413      	add	r3, r2
 801f338:	9324      	str	r3, [sp, #144]	; 0x90
 801f33a:	9b07      	ldr	r3, [sp, #28]
 801f33c:	3b01      	subs	r3, #1
 801f33e:	9307      	str	r3, [sp, #28]
 801f340:	9b08      	ldr	r3, [sp, #32]
 801f342:	3303      	adds	r3, #3
 801f344:	9308      	str	r3, [sp, #32]
 801f346:	e718      	b.n	801f17a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f348:	f47f af2a 	bne.w	801f1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f34e:	2b00      	cmp	r3, #0
 801f350:	f340 80e5 	ble.w	801f51e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f354:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f358:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f35a:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f35e:	eef0 6a48 	vmov.f32	s13, s16
 801f362:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f366:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f36a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f36e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801f372:	eef0 6a68 	vmov.f32	s13, s17
 801f376:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f37a:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801f37e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f382:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f386:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f38a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f38e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f392:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f396:	ee18 2a10 	vmov	r2, s16
 801f39a:	eeb0 8a47 	vmov.f32	s16, s14
 801f39e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3a2:	ee18 2a90 	vmov	r2, s17
 801f3a6:	9325      	str	r3, [sp, #148]	; 0x94
 801f3a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f3aa:	eef0 8a67 	vmov.f32	s17, s15
 801f3ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3b2:	9326      	str	r3, [sp, #152]	; 0x98
 801f3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f3b8:	3b01      	subs	r3, #1
 801f3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f3be:	bf08      	it	eq
 801f3c0:	4613      	moveq	r3, r2
 801f3c2:	9307      	str	r3, [sp, #28]
 801f3c4:	e6d2      	b.n	801f16c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f3c6:	b149      	cbz	r1, 801f3dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f3c8:	5d52      	ldrb	r2, [r2, r5]
 801f3ca:	4660      	mov	r0, ip
 801f3cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f3d0:	4422      	add	r2, r4
 801f3d2:	4667      	mov	r7, ip
 801f3d4:	e754      	b.n	801f280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f3d6:	4660      	mov	r0, ip
 801f3d8:	4662      	mov	r2, ip
 801f3da:	e751      	b.n	801f280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f3dc:	4660      	mov	r0, ip
 801f3de:	4662      	mov	r2, ip
 801f3e0:	e7f7      	b.n	801f3d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f3e2:	1c47      	adds	r7, r0, #1
 801f3e4:	d195      	bne.n	801f312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f3e6:	4285      	cmp	r5, r0
 801f3e8:	dd93      	ble.n	801f312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f3ea:	1c57      	adds	r7, r2, #1
 801f3ec:	db91      	blt.n	801f312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f3ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f3f0:	4297      	cmp	r7, r2
 801f3f2:	dd8e      	ble.n	801f312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f3f4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f3f8:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f3fc:	e9cd 5700 	strd	r5, r7, [sp]
 801f400:	4623      	mov	r3, r4
 801f402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f404:	4631      	mov	r1, r6
 801f406:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f408:	f7ff fdca 	bl	801efa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f40c:	e781      	b.n	801f312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f40e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f410:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f412:	1410      	asrs	r0, r2, #16
 801f414:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f418:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f41a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f41c:	1412      	asrs	r2, r2, #16
 801f41e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f422:	fb05 2000 	mla	r0, r5, r0, r2
 801f426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f428:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f42c:	4402      	add	r2, r0
 801f42e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f432:	eb04 070e 	add.w	r7, r4, lr
 801f436:	2b00      	cmp	r3, #0
 801f438:	d063      	beq.n	801f502 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f43a:	7856      	ldrb	r6, [r2, #1]
 801f43c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f440:	4426      	add	r6, r4
 801f442:	2900      	cmp	r1, #0
 801f444:	d065      	beq.n	801f512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f446:	1950      	adds	r0, r2, r5
 801f448:	5d52      	ldrb	r2, [r2, r5]
 801f44a:	7840      	ldrb	r0, [r0, #1]
 801f44c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f450:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f454:	4422      	add	r2, r4
 801f456:	4420      	add	r0, r4
 801f458:	b29b      	uxth	r3, r3
 801f45a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f45e:	b289      	uxth	r1, r1
 801f460:	f896 e000 	ldrb.w	lr, [r6]
 801f464:	f108 0803 	add.w	r8, r8, #3
 801f468:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f46c:	fb03 f901 	mul.w	r9, r3, r1
 801f470:	011b      	lsls	r3, r3, #4
 801f472:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f476:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f47a:	eba3 0309 	sub.w	r3, r3, r9
 801f47e:	b289      	uxth	r1, r1
 801f480:	b29b      	uxth	r3, r3
 801f482:	ebac 0c01 	sub.w	ip, ip, r1
 801f486:	fb03 fe0e 	mul.w	lr, r3, lr
 801f48a:	fa1f fc8c 	uxth.w	ip, ip
 801f48e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f492:	f892 b000 	ldrb.w	fp, [r2]
 801f496:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f49a:	f890 b000 	ldrb.w	fp, [r0]
 801f49e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f4a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f4a6:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f4aa:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f4ae:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f4b2:	fb03 fe0e 	mul.w	lr, r3, lr
 801f4b6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f4ba:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f4be:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f4c2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f4c6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f4ca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f4ce:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f4d2:	78b6      	ldrb	r6, [r6, #2]
 801f4d4:	78bf      	ldrb	r7, [r7, #2]
 801f4d6:	4373      	muls	r3, r6
 801f4d8:	7896      	ldrb	r6, [r2, #2]
 801f4da:	7882      	ldrb	r2, [r0, #2]
 801f4dc:	fb0c 3307 	mla	r3, ip, r7, r3
 801f4e0:	fb01 3306 	mla	r3, r1, r6, r3
 801f4e4:	fb09 3902 	mla	r9, r9, r2, r3
 801f4e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f4ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f4ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4f0:	4413      	add	r3, r2
 801f4f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f4f4:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f4f8:	9323      	str	r3, [sp, #140]	; 0x8c
 801f4fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f4fc:	4413      	add	r3, r2
 801f4fe:	9324      	str	r3, [sp, #144]	; 0x90
 801f500:	e668      	b.n	801f1d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f502:	b149      	cbz	r1, 801f518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801f504:	5d52      	ldrb	r2, [r2, r5]
 801f506:	4638      	mov	r0, r7
 801f508:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f50c:	4422      	add	r2, r4
 801f50e:	463e      	mov	r6, r7
 801f510:	e7a2      	b.n	801f458 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f512:	4638      	mov	r0, r7
 801f514:	463a      	mov	r2, r7
 801f516:	e79f      	b.n	801f458 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f518:	4638      	mov	r0, r7
 801f51a:	463a      	mov	r2, r7
 801f51c:	e7f7      	b.n	801f50e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801f51e:	b00f      	add	sp, #60	; 0x3c
 801f520:	ecbd 8b0a 	vpop	{d8-d12}
 801f524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52c:	b087      	sub	sp, #28
 801f52e:	7888      	ldrb	r0, [r1, #2]
 801f530:	9002      	str	r0, [sp, #8]
 801f532:	7848      	ldrb	r0, [r1, #1]
 801f534:	9e02      	ldr	r6, [sp, #8]
 801f536:	9003      	str	r0, [sp, #12]
 801f538:	7808      	ldrb	r0, [r1, #0]
 801f53a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f53e:	9004      	str	r0, [sp, #16]
 801f540:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f544:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801f548:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f54c:	9e03      	ldr	r6, [sp, #12]
 801f54e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801f552:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f556:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801f55a:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801f55e:	fb04 7508 	mla	r5, r4, r8, r7
 801f562:	2c00      	cmp	r4, #0
 801f564:	eb02 0905 	add.w	r9, r2, r5
 801f568:	db45      	blt.n	801f5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f56a:	45a2      	cmp	sl, r4
 801f56c:	dd43      	ble.n	801f5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f56e:	2f00      	cmp	r7, #0
 801f570:	db3f      	blt.n	801f5f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f572:	45b8      	cmp	r8, r7
 801f574:	dd3d      	ble.n	801f5f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f576:	5d52      	ldrb	r2, [r2, r5]
 801f578:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f57c:	1c7a      	adds	r2, r7, #1
 801f57e:	d43d      	bmi.n	801f5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f580:	4590      	cmp	r8, r2
 801f582:	dd3b      	ble.n	801f5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f584:	f1bc 0f00 	cmp.w	ip, #0
 801f588:	d038      	beq.n	801f5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f58a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f58e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f592:	3401      	adds	r4, #1
 801f594:	d436      	bmi.n	801f604 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f596:	45a2      	cmp	sl, r4
 801f598:	dd34      	ble.n	801f604 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f59a:	f1be 0f00 	cmp.w	lr, #0
 801f59e:	d031      	beq.n	801f604 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f5a0:	2f00      	cmp	r7, #0
 801f5a2:	db2d      	blt.n	801f600 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f5a4:	45b8      	cmp	r8, r7
 801f5a6:	dd2b      	ble.n	801f600 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f5a8:	f819 2008 	ldrb.w	r2, [r9, r8]
 801f5ac:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f5b0:	3701      	adds	r7, #1
 801f5b2:	d409      	bmi.n	801f5c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f5b4:	45b8      	cmp	r8, r7
 801f5b6:	dd07      	ble.n	801f5c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f5b8:	f1bc 0f00 	cmp.w	ip, #0
 801f5bc:	d004      	beq.n	801f5c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f5be:	44c8      	add	r8, r9
 801f5c0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f5c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f5c8:	f1bc 0f0f 	cmp.w	ip, #15
 801f5cc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f5d0:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f5d4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f5d8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f5dc:	d802      	bhi.n	801f5e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801f5de:	f1be 0f0f 	cmp.w	lr, #15
 801f5e2:	d911      	bls.n	801f608 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801f5e4:	4b77      	ldr	r3, [pc, #476]	; (801f7c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801f5e6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f5ea:	4a77      	ldr	r2, [pc, #476]	; (801f7c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801f5ec:	4877      	ldr	r0, [pc, #476]	; (801f7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801f5ee:	f005 fc73 	bl	8024ed8 <__assert_func>
 801f5f2:	4606      	mov	r6, r0
 801f5f4:	e7c2      	b.n	801f57c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801f5f6:	4605      	mov	r5, r0
 801f5f8:	4606      	mov	r6, r0
 801f5fa:	e7ca      	b.n	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f5fc:	4605      	mov	r5, r0
 801f5fe:	e7c8      	b.n	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f600:	4604      	mov	r4, r0
 801f602:	e7d5      	b.n	801f5b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801f604:	4604      	mov	r4, r0
 801f606:	e7df      	b.n	801f5c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f608:	fa1f fc8c 	uxth.w	ip, ip
 801f60c:	fa1f f28e 	uxth.w	r2, lr
 801f610:	fb02 fe0c 	mul.w	lr, r2, ip
 801f614:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f618:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801f61c:	ebac 070e 	sub.w	r7, ip, lr
 801f620:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f624:	b292      	uxth	r2, r2
 801f626:	b2bf      	uxth	r7, r7
 801f628:	1a9b      	subs	r3, r3, r2
 801f62a:	fb07 fc0a 	mul.w	ip, r7, sl
 801f62e:	b29b      	uxth	r3, r3
 801f630:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f634:	9301      	str	r3, [sp, #4]
 801f636:	fb02 cc09 	mla	ip, r2, r9, ip
 801f63a:	fb0e cc08 	mla	ip, lr, r8, ip
 801f63e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f642:	9305      	str	r3, [sp, #20]
 801f644:	2b00      	cmp	r3, #0
 801f646:	f000 80b9 	beq.w	801f7bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801f64a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f64e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f652:	fb0b fc0c 	mul.w	ip, fp, ip
 801f656:	fb0b f606 	mul.w	r6, fp, r6
 801f65a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f65e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f662:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f666:	44dc      	add	ip, fp
 801f668:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f66c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f670:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f674:	fb0a fb0b 	mul.w	fp, sl, fp
 801f678:	fb0a fa05 	mul.w	sl, sl, r5
 801f67c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f680:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f684:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801f688:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f68c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f690:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f694:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801f698:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f69c:	0a36      	lsrs	r6, r6, #8
 801f69e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6a2:	44dc      	add	ip, fp
 801f6a4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f6a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f6ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f6b0:	fb09 fb0b 	mul.w	fp, r9, fp
 801f6b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6b8:	fb09 f904 	mul.w	r9, r9, r4
 801f6bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f6c0:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801f6c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f6c8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f6cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f6d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f6d4:	fb0c fc07 	mul.w	ip, ip, r7
 801f6d8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f6dc:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801f6e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f6e4:	445d      	add	r5, fp
 801f6e6:	fb08 f404 	mul.w	r4, r8, r4
 801f6ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f6ee:	fb08 f800 	mul.w	r8, r8, r0
 801f6f2:	0a2d      	lsrs	r5, r5, #8
 801f6f4:	0a20      	lsrs	r0, r4, #8
 801f6f6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f6fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f6fe:	fb07 f70a 	mul.w	r7, r7, sl
 801f702:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f706:	4404      	add	r4, r0
 801f708:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f70c:	0a24      	lsrs	r4, r4, #8
 801f70e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801f712:	9801      	ldr	r0, [sp, #4]
 801f714:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f718:	fb03 cc00 	mla	ip, r3, r0, ip
 801f71c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f720:	fb00 7606 	mla	r6, r0, r6, r7
 801f724:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801f728:	fb04 cc0e 	mla	ip, r4, lr, ip
 801f72c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f730:	b280      	uxth	r0, r0
 801f732:	9c04      	ldr	r4, [sp, #16]
 801f734:	fb05 cc02 	mla	ip, r5, r2, ip
 801f738:	fb0e 6e08 	mla	lr, lr, r8, r6
 801f73c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f740:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f744:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801f748:	fb02 ec0c 	mla	ip, r2, ip, lr
 801f74c:	9a05      	ldr	r2, [sp, #20]
 801f74e:	4342      	muls	r2, r0
 801f750:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f754:	1c53      	adds	r3, r2, #1
 801f756:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f75a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f75e:	ea45 0c0c 	orr.w	ip, r5, ip
 801f762:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f766:	fa5f f28c 	uxtb.w	r2, ip
 801f76a:	b2db      	uxtb	r3, r3
 801f76c:	fb14 f403 	smulbb	r4, r4, r3
 801f770:	fb02 4200 	mla	r2, r2, r0, r4
 801f774:	b292      	uxth	r2, r2
 801f776:	1c54      	adds	r4, r2, #1
 801f778:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f77c:	9c03      	ldr	r4, [sp, #12]
 801f77e:	fb14 f403 	smulbb	r4, r4, r3
 801f782:	1212      	asrs	r2, r2, #8
 801f784:	700a      	strb	r2, [r1, #0]
 801f786:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801f78a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f78e:	fb02 4200 	mla	r2, r2, r0, r4
 801f792:	b292      	uxth	r2, r2
 801f794:	1c54      	adds	r4, r2, #1
 801f796:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f79a:	1212      	asrs	r2, r2, #8
 801f79c:	704a      	strb	r2, [r1, #1]
 801f79e:	9a02      	ldr	r2, [sp, #8]
 801f7a0:	fb12 f303 	smulbb	r3, r2, r3
 801f7a4:	fb0c 3c00 	mla	ip, ip, r0, r3
 801f7a8:	fa1f fc8c 	uxth.w	ip, ip
 801f7ac:	f10c 0301 	add.w	r3, ip, #1
 801f7b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f7b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f7b8:	f881 c002 	strb.w	ip, [r1, #2]
 801f7bc:	b007      	add	sp, #28
 801f7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7c2:	bf00      	nop
 801f7c4:	080299a3 	.word	0x080299a3
 801f7c8:	08029e9a 	.word	0x08029e9a
 801f7cc:	08029a6c 	.word	0x08029a6c

0801f7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7d4:	ed2d 8b08 	vpush	{d8-d11}
 801f7d8:	b09b      	sub	sp, #108	; 0x6c
 801f7da:	eeb0 aa40 	vmov.f32	s20, s0
 801f7de:	eef0 9a60 	vmov.f32	s19, s1
 801f7e2:	930a      	str	r3, [sp, #40]	; 0x28
 801f7e4:	eeb0 9a41 	vmov.f32	s18, s2
 801f7e8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f7ec:	eeb0 8a62 	vmov.f32	s16, s5
 801f7f0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f7f2:	eef0 8a43 	vmov.f32	s17, s6
 801f7f6:	9312      	str	r3, [sp, #72]	; 0x48
 801f7f8:	eef0 ba44 	vmov.f32	s23, s8
 801f7fc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f800:	eeb0 ba64 	vmov.f32	s22, s9
 801f804:	9019      	str	r0, [sp, #100]	; 0x64
 801f806:	eef0 aa45 	vmov.f32	s21, s10
 801f80a:	9114      	str	r1, [sp, #80]	; 0x50
 801f80c:	9317      	str	r3, [sp, #92]	; 0x5c
 801f80e:	6868      	ldr	r0, [r5, #4]
 801f810:	9218      	str	r2, [sp, #96]	; 0x60
 801f812:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f814:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f818:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f81c:	fb00 1303 	mla	r3, r0, r3, r1
 801f820:	6829      	ldr	r1, [r5, #0]
 801f822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f826:	18cb      	adds	r3, r1, r3
 801f828:	930d      	str	r3, [sp, #52]	; 0x34
 801f82a:	6813      	ldr	r3, [r2, #0]
 801f82c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f82e:	6853      	ldr	r3, [r2, #4]
 801f830:	3304      	adds	r3, #4
 801f832:	9309      	str	r3, [sp, #36]	; 0x24
 801f834:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f836:	2b00      	cmp	r3, #0
 801f838:	dc03      	bgt.n	801f842 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f83a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	f340 8352 	ble.w	801fee6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f844:	2b00      	cmp	r3, #0
 801f846:	f340 81a2 	ble.w	801fb8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801f84a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f84c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f84e:	1412      	asrs	r2, r2, #16
 801f850:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f854:	d431      	bmi.n	801f8ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f856:	1c51      	adds	r1, r2, #1
 801f858:	428c      	cmp	r4, r1
 801f85a:	dd31      	ble.n	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	db2f      	blt.n	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f860:	1c59      	adds	r1, r3, #1
 801f862:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f864:	4288      	cmp	r0, r1
 801f866:	dd2b      	ble.n	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f86a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f86c:	3b01      	subs	r3, #1
 801f86e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f870:	fb02 1203 	mla	r2, r2, r3, r1
 801f874:	1412      	asrs	r2, r2, #16
 801f876:	d42d      	bmi.n	801f8d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f878:	3201      	adds	r2, #1
 801f87a:	4294      	cmp	r4, r2
 801f87c:	dd2a      	ble.n	801f8d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f87e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f880:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f882:	fb02 1303 	mla	r3, r2, r3, r1
 801f886:	141b      	asrs	r3, r3, #16
 801f888:	d424      	bmi.n	801f8d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f88a:	3301      	adds	r3, #1
 801f88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f88e:	429a      	cmp	r2, r3
 801f890:	dd20      	ble.n	801f8d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f894:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f898:	f103 0e03 	add.w	lr, r3, #3
 801f89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f89e:	9315      	str	r3, [sp, #84]	; 0x54
 801f8a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	f300 81de 	bgt.w	801fc64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8b4:	441a      	add	r2, r3
 801f8b6:	920d      	str	r2, [sp, #52]	; 0x34
 801f8b8:	e16b      	b.n	801fb92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801f8ba:	1c51      	adds	r1, r2, #1
 801f8bc:	f040 8158 	bne.w	801fb70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f8c0:	42a2      	cmp	r2, r4
 801f8c2:	f280 8155 	bge.w	801fb70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f8c6:	1c5a      	adds	r2, r3, #1
 801f8c8:	f2c0 8152 	blt.w	801fb70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f8cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f8ce:	4293      	cmp	r3, r2
 801f8d0:	f280 814e 	bge.w	801fb70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8d6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f8d8:	9316      	str	r3, [sp, #88]	; 0x58
 801f8da:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f8de:	9315      	str	r3, [sp, #84]	; 0x54
 801f8e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	dde0      	ble.n	801f8a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f8e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f8e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f8ea:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f8ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f8f0:	141b      	asrs	r3, r3, #16
 801f8f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f8f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f8f8:	1412      	asrs	r2, r2, #16
 801f8fa:	f100 819a 	bmi.w	801fc32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f8fe:	1c55      	adds	r5, r2, #1
 801f900:	42ac      	cmp	r4, r5
 801f902:	f340 8198 	ble.w	801fc36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f906:	2b00      	cmp	r3, #0
 801f908:	f2c0 8195 	blt.w	801fc36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f90c:	1c5d      	adds	r5, r3, #1
 801f90e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f910:	42af      	cmp	r7, r5
 801f912:	f340 8190 	ble.w	801fc36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f916:	fb03 2304 	mla	r3, r3, r4, r2
 801f91a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f91c:	18d5      	adds	r5, r2, r3
 801f91e:	5cd3      	ldrb	r3, [r2, r3]
 801f920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f926:	0e1f      	lsrs	r7, r3, #24
 801f928:	2800      	cmp	r0, #0
 801f92a:	f000 8171 	beq.w	801fc10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f92e:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f932:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f936:	920e      	str	r2, [sp, #56]	; 0x38
 801f938:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f93c:	2900      	cmp	r1, #0
 801f93e:	f000 8172 	beq.w	801fc26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f942:	eb05 0c04 	add.w	ip, r5, r4
 801f946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f948:	5d2d      	ldrb	r5, [r5, r4]
 801f94a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f94e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f952:	950b      	str	r5, [sp, #44]	; 0x2c
 801f954:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f958:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f95a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f95e:	0e15      	lsrs	r5, r2, #24
 801f960:	920f      	str	r2, [sp, #60]	; 0x3c
 801f962:	b280      	uxth	r0, r0
 801f964:	b289      	uxth	r1, r1
 801f966:	fb00 fa01 	mul.w	sl, r0, r1
 801f96a:	0100      	lsls	r0, r0, #4
 801f96c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f970:	eba0 080a 	sub.w	r8, r0, sl
 801f974:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f978:	b289      	uxth	r1, r1
 801f97a:	fa1f f888 	uxth.w	r8, r8
 801f97e:	1a52      	subs	r2, r2, r1
 801f980:	fb08 f00e 	mul.w	r0, r8, lr
 801f984:	b292      	uxth	r2, r2
 801f986:	fb02 0007 	mla	r0, r2, r7, r0
 801f98a:	fb01 0009 	mla	r0, r1, r9, r0
 801f98e:	fb0a 0005 	mla	r0, sl, r5, r0
 801f992:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f996:	2800      	cmp	r0, #0
 801f998:	f000 80dd 	beq.w	801fb56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f99c:	2fff      	cmp	r7, #255	; 0xff
 801f99e:	d01a      	beq.n	801f9d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f9a0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f9a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f9a8:	fb07 fc0c 	mul.w	ip, r7, ip
 801f9ac:	435f      	muls	r7, r3
 801f9ae:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f9b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f9b6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f9ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f9be:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f9c2:	4463      	add	r3, ip
 801f9c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f9c8:	0a1b      	lsrs	r3, r3, #8
 801f9ca:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f9ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f9d2:	ea43 030b 	orr.w	r3, r3, fp
 801f9d6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f9da:	d01e      	beq.n	801fa1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f9dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f9de:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f9e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f9e6:	fb0e fb0b 	mul.w	fp, lr, fp
 801f9ea:	fb0e fe07 	mul.w	lr, lr, r7
 801f9ee:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f9f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f9f6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f9fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9fe:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fa02:	44dc      	add	ip, fp
 801fa04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa0c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fa10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa14:	ea4c 070e 	orr.w	r7, ip, lr
 801fa18:	970e      	str	r7, [sp, #56]	; 0x38
 801fa1a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fa1e:	d01e      	beq.n	801fa5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801fa20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fa22:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801fa26:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fa2a:	fb09 fe0e 	mul.w	lr, r9, lr
 801fa2e:	fb09 f907 	mul.w	r9, r9, r7
 801fa32:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fa36:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa3a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801fa3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa42:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fa46:	44f4      	add	ip, lr
 801fa48:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fa4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa50:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fa54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa58:	ea4c 0709 	orr.w	r7, ip, r9
 801fa5c:	970b      	str	r7, [sp, #44]	; 0x2c
 801fa5e:	2dff      	cmp	r5, #255	; 0xff
 801fa60:	d01c      	beq.n	801fa9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801fa62:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fa64:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801fa68:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fa6c:	fb05 fe0e 	mul.w	lr, r5, lr
 801fa70:	437d      	muls	r5, r7
 801fa72:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fa76:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa7a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801fa7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa82:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801fa86:	44f4      	add	ip, lr
 801fa88:	0a2d      	lsrs	r5, r5, #8
 801fa8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa8e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fa92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa96:	ea4c 0505 	orr.w	r5, ip, r5
 801fa9a:	950f      	str	r5, [sp, #60]	; 0x3c
 801fa9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fa9e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801faa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801faa6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801faaa:	fb08 f505 	mul.w	r5, r8, r5
 801faae:	fb02 5507 	mla	r5, r2, r7, r5
 801fab2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fab4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fab8:	fb01 5507 	mla	r5, r1, r7, r5
 801fabc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fabe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fac2:	fb0a 5507 	mla	r5, sl, r7, r5
 801fac6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fac8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801facc:	0a2d      	lsrs	r5, r5, #8
 801face:	fb08 f807 	mul.w	r8, r8, r7
 801fad2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fad6:	fb02 8303 	mla	r3, r2, r3, r8
 801fada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fadc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fae2:	fb01 330c 	mla	r3, r1, ip, r3
 801fae6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801faea:	fb0a 3a01 	mla	sl, sl, r1, r3
 801faee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801faf0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801faf2:	4343      	muls	r3, r0
 801faf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faf8:	1c58      	adds	r0, r3, #1
 801fafa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fafe:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fb02:	ea45 050a 	orr.w	r5, r5, sl
 801fb06:	7833      	ldrb	r3, [r6, #0]
 801fb08:	b2ea      	uxtb	r2, r5
 801fb0a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fb0e:	fb12 f201 	smulbb	r2, r2, r1
 801fb12:	b2c0      	uxtb	r0, r0
 801fb14:	fb03 2300 	mla	r3, r3, r0, r2
 801fb18:	b29b      	uxth	r3, r3
 801fb1a:	1c5a      	adds	r2, r3, #1
 801fb1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fb20:	7872      	ldrb	r2, [r6, #1]
 801fb22:	fb12 f200 	smulbb	r2, r2, r0
 801fb26:	121b      	asrs	r3, r3, #8
 801fb28:	7033      	strb	r3, [r6, #0]
 801fb2a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fb2e:	0c2d      	lsrs	r5, r5, #16
 801fb30:	fb03 2301 	mla	r3, r3, r1, r2
 801fb34:	b29b      	uxth	r3, r3
 801fb36:	1c5a      	adds	r2, r3, #1
 801fb38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fb3c:	121b      	asrs	r3, r3, #8
 801fb3e:	7073      	strb	r3, [r6, #1]
 801fb40:	78b3      	ldrb	r3, [r6, #2]
 801fb42:	fb13 f000 	smulbb	r0, r3, r0
 801fb46:	fb05 0501 	mla	r5, r5, r1, r0
 801fb4a:	b2ad      	uxth	r5, r5
 801fb4c:	1c6b      	adds	r3, r5, #1
 801fb4e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fb52:	122d      	asrs	r5, r5, #8
 801fb54:	70b5      	strb	r5, [r6, #2]
 801fb56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb58:	3603      	adds	r6, #3
 801fb5a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fb5c:	4413      	add	r3, r2
 801fb5e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fb60:	932d      	str	r3, [sp, #180]	; 0xb4
 801fb62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb64:	4413      	add	r3, r2
 801fb66:	932e      	str	r3, [sp, #184]	; 0xb8
 801fb68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fb6a:	3b01      	subs	r3, #1
 801fb6c:	9316      	str	r3, [sp, #88]	; 0x58
 801fb6e:	e6b7      	b.n	801f8e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801fb70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb72:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fb74:	4413      	add	r3, r2
 801fb76:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fb78:	932d      	str	r3, [sp, #180]	; 0xb4
 801fb7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb7c:	4413      	add	r3, r2
 801fb7e:	932e      	str	r3, [sp, #184]	; 0xb8
 801fb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb82:	3b01      	subs	r3, #1
 801fb84:	930a      	str	r3, [sp, #40]	; 0x28
 801fb86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb88:	3303      	adds	r3, #3
 801fb8a:	930d      	str	r3, [sp, #52]	; 0x34
 801fb8c:	e659      	b.n	801f842 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801fb8e:	f47f ae6b 	bne.w	801f868 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801fb92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	f340 81a6 	ble.w	801fee6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801fb9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fba0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fba4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fba8:	eef0 6a48 	vmov.f32	s13, s16
 801fbac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fbb0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fbb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbb8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801fbbc:	eef0 6a68 	vmov.f32	s13, s17
 801fbc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbc4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801fbc8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fbcc:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fbd0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fbd4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fbd8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fbdc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fbe0:	ee18 2a10 	vmov	r2, s16
 801fbe4:	eeb0 8a47 	vmov.f32	s16, s14
 801fbe8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbec:	ee18 2a90 	vmov	r2, s17
 801fbf0:	932f      	str	r3, [sp, #188]	; 0xbc
 801fbf2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbf4:	eef0 8a67 	vmov.f32	s17, s15
 801fbf8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbfc:	9330      	str	r3, [sp, #192]	; 0xc0
 801fbfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fc00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc02:	3b01      	subs	r3, #1
 801fc04:	9314      	str	r3, [sp, #80]	; 0x50
 801fc06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fc08:	bf08      	it	eq
 801fc0a:	4613      	moveq	r3, r2
 801fc0c:	930a      	str	r3, [sp, #40]	; 0x28
 801fc0e:	e611      	b.n	801f834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801fc10:	b161      	cbz	r1, 801fc2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801fc12:	5d2a      	ldrb	r2, [r5, r4]
 801fc14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fc16:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fc1a:	25ff      	movs	r5, #255	; 0xff
 801fc1c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fc20:	920b      	str	r2, [sp, #44]	; 0x2c
 801fc22:	46ae      	mov	lr, r5
 801fc24:	e69d      	b.n	801f962 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801fc26:	25ff      	movs	r5, #255	; 0xff
 801fc28:	46a9      	mov	r9, r5
 801fc2a:	e69a      	b.n	801f962 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801fc2c:	25ff      	movs	r5, #255	; 0xff
 801fc2e:	46a9      	mov	r9, r5
 801fc30:	e7f7      	b.n	801fc22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801fc32:	1c57      	adds	r7, r2, #1
 801fc34:	d18f      	bne.n	801fb56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fc36:	4294      	cmp	r4, r2
 801fc38:	dd8d      	ble.n	801fb56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fc3a:	1c5d      	adds	r5, r3, #1
 801fc3c:	db8b      	blt.n	801fb56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fc3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fc40:	429d      	cmp	r5, r3
 801fc42:	dd88      	ble.n	801fb56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fc44:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801fc46:	9202      	str	r2, [sp, #8]
 801fc48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc4a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801fc4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc50:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fc52:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fc56:	e9cd 4300 	strd	r4, r3, [sp]
 801fc5a:	4631      	mov	r1, r6
 801fc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc5e:	f7ff fc63 	bl	801f528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801fc62:	e778      	b.n	801fb56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fc64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fc66:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fc68:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fc6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc6e:	1412      	asrs	r2, r2, #16
 801fc70:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fc74:	141b      	asrs	r3, r3, #16
 801fc76:	fb04 2303 	mla	r3, r4, r3, r2
 801fc7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc7c:	18d5      	adds	r5, r2, r3
 801fc7e:	5cd3      	ldrb	r3, [r2, r3]
 801fc80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fc86:	0e1e      	lsrs	r6, r3, #24
 801fc88:	2900      	cmp	r1, #0
 801fc8a:	f000 811b 	beq.w	801fec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801fc8e:	786a      	ldrb	r2, [r5, #1]
 801fc90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fc92:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fc96:	9210      	str	r2, [sp, #64]	; 0x40
 801fc98:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fc9c:	2800      	cmp	r0, #0
 801fc9e:	f000 811c 	beq.w	801feda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801fca2:	192a      	adds	r2, r5, r4
 801fca4:	5d2d      	ldrb	r5, [r5, r4]
 801fca6:	7852      	ldrb	r2, [r2, #1]
 801fca8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fcac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fcb0:	950c      	str	r5, [sp, #48]	; 0x30
 801fcb2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fcb6:	0e15      	lsrs	r5, r2, #24
 801fcb8:	9211      	str	r2, [sp, #68]	; 0x44
 801fcba:	b289      	uxth	r1, r1
 801fcbc:	b280      	uxth	r0, r0
 801fcbe:	fb01 fa00 	mul.w	sl, r1, r0
 801fcc2:	0109      	lsls	r1, r1, #4
 801fcc4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fcc8:	eba1 080a 	sub.w	r8, r1, sl
 801fccc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fcd0:	b280      	uxth	r0, r0
 801fcd2:	fa1f f888 	uxth.w	r8, r8
 801fcd6:	1a12      	subs	r2, r2, r0
 801fcd8:	fb08 f10c 	mul.w	r1, r8, ip
 801fcdc:	b292      	uxth	r2, r2
 801fcde:	fb02 1106 	mla	r1, r2, r6, r1
 801fce2:	fb00 1109 	mla	r1, r0, r9, r1
 801fce6:	fb0a 1105 	mla	r1, sl, r5, r1
 801fcea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fcee:	2900      	cmp	r1, #0
 801fcf0:	f000 80da 	beq.w	801fea8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801fcf4:	2eff      	cmp	r6, #255	; 0xff
 801fcf6:	d016      	beq.n	801fd26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801fcf8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fcfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fd00:	4377      	muls	r7, r6
 801fd02:	435e      	muls	r6, r3
 801fd04:	0a3b      	lsrs	r3, r7, #8
 801fd06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fd0e:	443b      	add	r3, r7
 801fd10:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fd14:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fd18:	0a1b      	lsrs	r3, r3, #8
 801fd1a:	0a3f      	lsrs	r7, r7, #8
 801fd1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fd20:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fd24:	433b      	orrs	r3, r7
 801fd26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fd2a:	d01d      	beq.n	801fd68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801fd2c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fd2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fd30:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fd34:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fd38:	fb0c f606 	mul.w	r6, ip, r6
 801fd3c:	fb0c fc07 	mul.w	ip, ip, r7
 801fd40:	0a37      	lsrs	r7, r6, #8
 801fd42:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fd46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd4a:	4437      	add	r7, r6
 801fd4c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fd50:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fd54:	0a3f      	lsrs	r7, r7, #8
 801fd56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd5a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd5e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fd62:	ea47 060c 	orr.w	r6, r7, ip
 801fd66:	9610      	str	r6, [sp, #64]	; 0x40
 801fd68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fd6c:	d01d      	beq.n	801fdaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801fd6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fd70:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fd74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd78:	fb09 fc0c 	mul.w	ip, r9, ip
 801fd7c:	fb09 f906 	mul.w	r9, r9, r6
 801fd80:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fd84:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd88:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801fd8c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd90:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fd94:	4467      	add	r7, ip
 801fd96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd9a:	0a3f      	lsrs	r7, r7, #8
 801fd9c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fda0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fda4:	ea47 0609 	orr.w	r6, r7, r9
 801fda8:	960c      	str	r6, [sp, #48]	; 0x30
 801fdaa:	2dff      	cmp	r5, #255	; 0xff
 801fdac:	d01a      	beq.n	801fde4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801fdae:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fdb0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fdb4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fdb8:	fb05 fc0c 	mul.w	ip, r5, ip
 801fdbc:	4375      	muls	r5, r6
 801fdbe:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fdc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fdc6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fdca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fdce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fdd2:	4467      	add	r7, ip
 801fdd4:	0a2d      	lsrs	r5, r5, #8
 801fdd6:	0a3f      	lsrs	r7, r7, #8
 801fdd8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fddc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fde0:	433d      	orrs	r5, r7
 801fde2:	9511      	str	r5, [sp, #68]	; 0x44
 801fde4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fde6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fdea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fdf2:	fb08 f505 	mul.w	r5, r8, r5
 801fdf6:	fb02 5506 	mla	r5, r2, r6, r5
 801fdfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fdfc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fe00:	fb00 5506 	mla	r5, r0, r6, r5
 801fe04:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fe06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fe0a:	fb0a 5506 	mla	r5, sl, r6, r5
 801fe0e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fe10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe14:	0a2d      	lsrs	r5, r5, #8
 801fe16:	fb08 f806 	mul.w	r8, r8, r6
 801fe1a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe1e:	fb02 8303 	mla	r3, r2, r3, r8
 801fe22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe24:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fe28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fe2a:	fb00 3307 	mla	r3, r0, r7, r3
 801fe2e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fe32:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fe36:	fb01 f30b 	mul.w	r3, r1, fp
 801fe3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe3e:	1c59      	adds	r1, r3, #1
 801fe40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fe44:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fe48:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fe4c:	ea45 050c 	orr.w	r5, r5, ip
 801fe50:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fe54:	b2ea      	uxtb	r2, r5
 801fe56:	b2c9      	uxtb	r1, r1
 801fe58:	fb12 f20b 	smulbb	r2, r2, fp
 801fe5c:	fb03 2301 	mla	r3, r3, r1, r2
 801fe60:	b29b      	uxth	r3, r3
 801fe62:	1c5a      	adds	r2, r3, #1
 801fe64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe68:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fe6c:	fb12 f201 	smulbb	r2, r2, r1
 801fe70:	121b      	asrs	r3, r3, #8
 801fe72:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fe76:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fe7a:	0c2d      	lsrs	r5, r5, #16
 801fe7c:	fb03 230b 	mla	r3, r3, fp, r2
 801fe80:	b29b      	uxth	r3, r3
 801fe82:	1c5a      	adds	r2, r3, #1
 801fe84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe88:	121b      	asrs	r3, r3, #8
 801fe8a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fe8e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fe92:	fb13 f101 	smulbb	r1, r3, r1
 801fe96:	fb05 150b 	mla	r5, r5, fp, r1
 801fe9a:	b2ad      	uxth	r5, r5
 801fe9c:	1c69      	adds	r1, r5, #1
 801fe9e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fea2:	122d      	asrs	r5, r5, #8
 801fea4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fea8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801feaa:	f10e 0e03 	add.w	lr, lr, #3
 801feae:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801feb0:	4413      	add	r3, r2
 801feb2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801feb4:	932d      	str	r3, [sp, #180]	; 0xb4
 801feb6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801feb8:	4413      	add	r3, r2
 801feba:	932e      	str	r3, [sp, #184]	; 0xb8
 801febc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801febe:	3b01      	subs	r3, #1
 801fec0:	9315      	str	r3, [sp, #84]	; 0x54
 801fec2:	e4ed      	b.n	801f8a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fec4:	b160      	cbz	r0, 801fee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801fec6:	5d2a      	ldrb	r2, [r5, r4]
 801fec8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801feca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fece:	25ff      	movs	r5, #255	; 0xff
 801fed0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fed4:	920c      	str	r2, [sp, #48]	; 0x30
 801fed6:	46ac      	mov	ip, r5
 801fed8:	e6ef      	b.n	801fcba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801feda:	25ff      	movs	r5, #255	; 0xff
 801fedc:	46a9      	mov	r9, r5
 801fede:	e6ec      	b.n	801fcba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fee0:	25ff      	movs	r5, #255	; 0xff
 801fee2:	46a9      	mov	r9, r5
 801fee4:	e7f7      	b.n	801fed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801fee6:	b01b      	add	sp, #108	; 0x6c
 801fee8:	ecbd 8b08 	vpop	{d8-d11}
 801feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fef4:	b085      	sub	sp, #20
 801fef6:	7888      	ldrb	r0, [r1, #2]
 801fef8:	4692      	mov	sl, r2
 801fefa:	4698      	mov	r8, r3
 801fefc:	9000      	str	r0, [sp, #0]
 801fefe:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ff02:	7848      	ldrb	r0, [r1, #1]
 801ff04:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ff08:	9001      	str	r0, [sp, #4]
 801ff0a:	7808      	ldrb	r0, [r1, #0]
 801ff0c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ff10:	9002      	str	r0, [sp, #8]
 801ff12:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ff16:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801ff1a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801ff1e:	fb04 560c 	mla	r6, r4, ip, r5
 801ff22:	2c00      	cmp	r4, #0
 801ff24:	eb02 0e06 	add.w	lr, r2, r6
 801ff28:	9a00      	ldr	r2, [sp, #0]
 801ff2a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801ff2e:	9a01      	ldr	r2, [sp, #4]
 801ff30:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ff34:	db3e      	blt.n	801ffb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801ff36:	45a1      	cmp	r9, r4
 801ff38:	dd3c      	ble.n	801ffb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801ff3a:	2d00      	cmp	r5, #0
 801ff3c:	db38      	blt.n	801ffb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801ff3e:	45ac      	cmp	ip, r5
 801ff40:	dd36      	ble.n	801ffb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801ff42:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801ff46:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801ff4a:	1c6e      	adds	r6, r5, #1
 801ff4c:	d435      	bmi.n	801ffba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801ff4e:	45b4      	cmp	ip, r6
 801ff50:	dd33      	ble.n	801ffba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801ff52:	b393      	cbz	r3, 801ffba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801ff54:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801ff58:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801ff5c:	3401      	adds	r4, #1
 801ff5e:	d430      	bmi.n	801ffc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801ff60:	45a1      	cmp	r9, r4
 801ff62:	dd2e      	ble.n	801ffc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801ff64:	b36f      	cbz	r7, 801ffc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801ff66:	2d00      	cmp	r5, #0
 801ff68:	db29      	blt.n	801ffbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801ff6a:	45ac      	cmp	ip, r5
 801ff6c:	dd27      	ble.n	801ffbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801ff6e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801ff72:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801ff76:	3501      	adds	r5, #1
 801ff78:	d407      	bmi.n	801ff8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ff7a:	45ac      	cmp	ip, r5
 801ff7c:	dd05      	ble.n	801ff8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ff7e:	b123      	cbz	r3, 801ff8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ff80:	44f4      	add	ip, lr
 801ff82:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ff86:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801ff8a:	2b0f      	cmp	r3, #15
 801ff8c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ff90:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ff94:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ff98:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ff9c:	d801      	bhi.n	801ffa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801ff9e:	2f0f      	cmp	r7, #15
 801ffa0:	d911      	bls.n	801ffc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801ffa2:	4b76      	ldr	r3, [pc, #472]	; (802017c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801ffa4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ffa8:	4a75      	ldr	r2, [pc, #468]	; (8020180 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801ffaa:	4876      	ldr	r0, [pc, #472]	; (8020184 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801ffac:	f004 ff94 	bl	8024ed8 <__assert_func>
 801ffb0:	4602      	mov	r2, r0
 801ffb2:	e7ca      	b.n	801ff4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801ffb4:	4606      	mov	r6, r0
 801ffb6:	4602      	mov	r2, r0
 801ffb8:	e7d0      	b.n	801ff5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801ffba:	4606      	mov	r6, r0
 801ffbc:	e7ce      	b.n	801ff5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801ffbe:	4604      	mov	r4, r0
 801ffc0:	e7d9      	b.n	801ff76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	e7e1      	b.n	801ff8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ffc6:	b29b      	uxth	r3, r3
 801ffc8:	b2bf      	uxth	r7, r7
 801ffca:	fb07 fe03 	mul.w	lr, r7, r3
 801ffce:	011b      	lsls	r3, r3, #4
 801ffd0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ffd4:	eba3 0c0e 	sub.w	ip, r3, lr
 801ffd8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801ffdc:	b2bf      	uxth	r7, r7
 801ffde:	fa1f fc8c 	uxth.w	ip, ip
 801ffe2:	1bed      	subs	r5, r5, r7
 801ffe4:	fb0c f30a 	mul.w	r3, ip, sl
 801ffe8:	b2ad      	uxth	r5, r5
 801ffea:	fb05 330b 	mla	r3, r5, fp, r3
 801ffee:	fb07 3309 	mla	r3, r7, r9, r3
 801fff2:	fb0e 3308 	mla	r3, lr, r8, r3
 801fff6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fffa:	9303      	str	r3, [sp, #12]
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	f000 80b9 	beq.w	8020174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020002:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020006:	d018      	beq.n	802003a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8020008:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802000c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020010:	fb0b f303 	mul.w	r3, fp, r3
 8020014:	fb0b fb02 	mul.w	fp, fp, r2
 8020018:	0a1a      	lsrs	r2, r3, #8
 802001a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802001e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020022:	441a      	add	r2, r3
 8020024:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8020028:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802002c:	0a12      	lsrs	r2, r2, #8
 802002e:	0a1b      	lsrs	r3, r3, #8
 8020030:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020034:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020038:	431a      	orrs	r2, r3
 802003a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802003e:	d019      	beq.n	8020074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020040:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020044:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020048:	fb0a fb0b 	mul.w	fp, sl, fp
 802004c:	fb0a fa06 	mul.w	sl, sl, r6
 8020050:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020054:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020058:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802005c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020060:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020064:	445e      	add	r6, fp
 8020066:	0a1b      	lsrs	r3, r3, #8
 8020068:	0a36      	lsrs	r6, r6, #8
 802006a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802006e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020072:	431e      	orrs	r6, r3
 8020074:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020078:	d019      	beq.n	80200ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802007a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802007e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020082:	fb09 fa0a 	mul.w	sl, r9, sl
 8020086:	fb09 f904 	mul.w	r9, r9, r4
 802008a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802008e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020092:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020096:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802009a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802009e:	4454      	add	r4, sl
 80200a0:	0a1b      	lsrs	r3, r3, #8
 80200a2:	0a24      	lsrs	r4, r4, #8
 80200a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200a8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80200ac:	431c      	orrs	r4, r3
 80200ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80200b2:	d019      	beq.n	80200e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80200b4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80200b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80200bc:	fb08 f909 	mul.w	r9, r8, r9
 80200c0:	fb08 f800 	mul.w	r8, r8, r0
 80200c4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80200c8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80200cc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80200d0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80200d4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80200d8:	4448      	add	r0, r9
 80200da:	0a1b      	lsrs	r3, r3, #8
 80200dc:	0a00      	lsrs	r0, r0, #8
 80200de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200e2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80200e6:	4318      	orrs	r0, r3
 80200e8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80200ec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80200f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80200f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80200f8:	fb0c f808 	mul.w	r8, ip, r8
 80200fc:	fb0c f606 	mul.w	r6, ip, r6
 8020100:	fb05 8803 	mla	r8, r5, r3, r8
 8020104:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020108:	fb05 6202 	mla	r2, r5, r2, r6
 802010c:	fb07 8803 	mla	r8, r7, r3, r8
 8020110:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020114:	fb0e 8303 	mla	r3, lr, r3, r8
 8020118:	0a1b      	lsrs	r3, r3, #8
 802011a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802011e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020122:	9c02      	ldr	r4, [sp, #8]
 8020124:	fb07 2703 	mla	r7, r7, r3, r2
 8020128:	9a03      	ldr	r2, [sp, #12]
 802012a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802012e:	43d2      	mvns	r2, r2
 8020130:	fb0e 7303 	mla	r3, lr, r3, r7
 8020134:	b2d2      	uxtb	r2, r2
 8020136:	0a1b      	lsrs	r3, r3, #8
 8020138:	4354      	muls	r4, r2
 802013a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802013e:	1c60      	adds	r0, r4, #1
 8020140:	ea48 0303 	orr.w	r3, r8, r3
 8020144:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020148:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802014c:	7008      	strb	r0, [r1, #0]
 802014e:	9801      	ldr	r0, [sp, #4]
 8020150:	4350      	muls	r0, r2
 8020152:	1c44      	adds	r4, r0, #1
 8020154:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8020158:	0a18      	lsrs	r0, r3, #8
 802015a:	0c1b      	lsrs	r3, r3, #16
 802015c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020160:	7048      	strb	r0, [r1, #1]
 8020162:	9800      	ldr	r0, [sp, #0]
 8020164:	4350      	muls	r0, r2
 8020166:	4602      	mov	r2, r0
 8020168:	3001      	adds	r0, #1
 802016a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802016e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020172:	708b      	strb	r3, [r1, #2]
 8020174:	b005      	add	sp, #20
 8020176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802017a:	bf00      	nop
 802017c:	080299a3 	.word	0x080299a3
 8020180:	08029e9a 	.word	0x08029e9a
 8020184:	08029a6c 	.word	0x08029a6c

08020188 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802018c:	ed2d 8b08 	vpush	{d8-d11}
 8020190:	b097      	sub	sp, #92	; 0x5c
 8020192:	eeb0 aa40 	vmov.f32	s20, s0
 8020196:	eef0 9a60 	vmov.f32	s19, s1
 802019a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 802019c:	eeb0 9a41 	vmov.f32	s18, s2
 80201a0:	9308      	str	r3, [sp, #32]
 80201a2:	eeb0 8a62 	vmov.f32	s16, s5
 80201a6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80201aa:	eef0 8a43 	vmov.f32	s17, s6
 80201ae:	9015      	str	r0, [sp, #84]	; 0x54
 80201b0:	eef0 ba44 	vmov.f32	s23, s8
 80201b4:	6868      	ldr	r0, [r5, #4]
 80201b6:	eeb0 ba64 	vmov.f32	s22, s9
 80201ba:	9112      	str	r1, [sp, #72]	; 0x48
 80201bc:	eef0 aa45 	vmov.f32	s21, s10
 80201c0:	9310      	str	r3, [sp, #64]	; 0x40
 80201c2:	9214      	str	r2, [sp, #80]	; 0x50
 80201c4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80201c6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80201ca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80201ce:	fb00 1303 	mla	r3, r0, r3, r1
 80201d2:	6829      	ldr	r1, [r5, #0]
 80201d4:	6855      	ldr	r5, [r2, #4]
 80201d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201da:	3504      	adds	r5, #4
 80201dc:	18cb      	adds	r3, r1, r3
 80201de:	930b      	str	r3, [sp, #44]	; 0x2c
 80201e0:	6813      	ldr	r3, [r2, #0]
 80201e2:	9311      	str	r3, [sp, #68]	; 0x44
 80201e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80201e6:	2b00      	cmp	r3, #0
 80201e8:	dc03      	bgt.n	80201f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80201ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	f340 8333 	ble.w	8020858 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80201f2:	9b08      	ldr	r3, [sp, #32]
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	f340 8190 	ble.w	802051a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80201fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80201fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80201fe:	1412      	asrs	r2, r2, #16
 8020200:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020204:	d42f      	bmi.n	8020266 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020206:	1c51      	adds	r1, r2, #1
 8020208:	428c      	cmp	r4, r1
 802020a:	dd2f      	ble.n	802026c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802020c:	2b00      	cmp	r3, #0
 802020e:	db2d      	blt.n	802026c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020210:	1c59      	adds	r1, r3, #1
 8020212:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020214:	4288      	cmp	r0, r1
 8020216:	dd29      	ble.n	802026c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020218:	9b08      	ldr	r3, [sp, #32]
 802021a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802021c:	3b01      	subs	r3, #1
 802021e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020220:	fb02 1203 	mla	r2, r2, r3, r1
 8020224:	1412      	asrs	r2, r2, #16
 8020226:	d42b      	bmi.n	8020280 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020228:	3201      	adds	r2, #1
 802022a:	4294      	cmp	r4, r2
 802022c:	dd28      	ble.n	8020280 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802022e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020230:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020232:	fb02 1303 	mla	r3, r2, r3, r1
 8020236:	141b      	asrs	r3, r3, #16
 8020238:	d422      	bmi.n	8020280 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802023a:	3301      	adds	r3, #1
 802023c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802023e:	429a      	cmp	r2, r3
 8020240:	dd1e      	ble.n	8020280 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020244:	f103 0803 	add.w	r8, r3, #3
 8020248:	9b08      	ldr	r3, [sp, #32]
 802024a:	9307      	str	r3, [sp, #28]
 802024c:	9b07      	ldr	r3, [sp, #28]
 802024e:	2b00      	cmp	r3, #0
 8020250:	f300 81ca 	bgt.w	80205e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020254:	9b08      	ldr	r3, [sp, #32]
 8020256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802025c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020260:	441a      	add	r2, r3
 8020262:	920b      	str	r2, [sp, #44]	; 0x2c
 8020264:	e15b      	b.n	802051e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020266:	1c51      	adds	r1, r2, #1
 8020268:	f040 8148 	bne.w	80204fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802026c:	42a2      	cmp	r2, r4
 802026e:	f280 8145 	bge.w	80204fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020272:	1c5a      	adds	r2, r3, #1
 8020274:	f2c0 8142 	blt.w	80204fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802027a:	4293      	cmp	r3, r2
 802027c:	f280 813e 	bge.w	80204fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020280:	9b08      	ldr	r3, [sp, #32]
 8020282:	9313      	str	r3, [sp, #76]	; 0x4c
 8020284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020286:	9307      	str	r3, [sp, #28]
 8020288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802028a:	2b00      	cmp	r3, #0
 802028c:	dde2      	ble.n	8020254 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802028e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020290:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020292:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020296:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020298:	141b      	asrs	r3, r3, #16
 802029a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802029e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80202a0:	1412      	asrs	r2, r2, #16
 80202a2:	f100 818b 	bmi.w	80205bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 80202a6:	1c56      	adds	r6, r2, #1
 80202a8:	42b4      	cmp	r4, r6
 80202aa:	f340 8189 	ble.w	80205c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	f2c0 8186 	blt.w	80205c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80202b4:	1c5e      	adds	r6, r3, #1
 80202b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80202b8:	42b7      	cmp	r7, r6
 80202ba:	f340 8181 	ble.w	80205c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80202be:	fb03 2304 	mla	r3, r3, r4, r2
 80202c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202c4:	18d6      	adds	r6, r2, r3
 80202c6:	5cd3      	ldrb	r3, [r2, r3]
 80202c8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80202cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80202d0:	2900      	cmp	r1, #0
 80202d2:	f000 8163 	beq.w	802059c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80202d6:	7872      	ldrb	r2, [r6, #1]
 80202d8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80202dc:	920c      	str	r2, [sp, #48]	; 0x30
 80202de:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80202e2:	2800      	cmp	r0, #0
 80202e4:	f000 8164 	beq.w	80205b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80202e8:	1932      	adds	r2, r6, r4
 80202ea:	5d36      	ldrb	r6, [r6, r4]
 80202ec:	7852      	ldrb	r2, [r2, #1]
 80202ee:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80202f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80202f6:	9609      	str	r6, [sp, #36]	; 0x24
 80202f8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80202fc:	0e16      	lsrs	r6, r2, #24
 80202fe:	920d      	str	r2, [sp, #52]	; 0x34
 8020300:	b289      	uxth	r1, r1
 8020302:	b280      	uxth	r0, r0
 8020304:	fb01 fb00 	mul.w	fp, r1, r0
 8020308:	0109      	lsls	r1, r1, #4
 802030a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802030e:	eba1 090b 	sub.w	r9, r1, fp
 8020312:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020316:	b280      	uxth	r0, r0
 8020318:	fa1f f989 	uxth.w	r9, r9
 802031c:	1a12      	subs	r2, r2, r0
 802031e:	fb09 f108 	mul.w	r1, r9, r8
 8020322:	b292      	uxth	r2, r2
 8020324:	fb02 110c 	mla	r1, r2, ip, r1
 8020328:	fb00 110a 	mla	r1, r0, sl, r1
 802032c:	fb0b 1106 	mla	r1, fp, r6, r1
 8020330:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020334:	2900      	cmp	r1, #0
 8020336:	f000 80d2 	beq.w	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802033a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802033e:	d01b      	beq.n	8020378 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020340:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020348:	fb0c fe0e 	mul.w	lr, ip, lr
 802034c:	fb0c fc03 	mul.w	ip, ip, r3
 8020350:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020354:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020358:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802035c:	4473      	add	r3, lr
 802035e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020362:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020366:	0a1b      	lsrs	r3, r3, #8
 8020368:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802036c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020370:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020374:	ea43 030e 	orr.w	r3, r3, lr
 8020378:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802037c:	d01e      	beq.n	80203bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 802037e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020380:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020384:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020388:	fb08 fc0c 	mul.w	ip, r8, ip
 802038c:	fb08 f80e 	mul.w	r8, r8, lr
 8020390:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020394:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020398:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802039c:	44e6      	add	lr, ip
 802039e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80203a2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80203a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203aa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80203ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203b2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80203b6:	ea4e 0708 	orr.w	r7, lr, r8
 80203ba:	970c      	str	r7, [sp, #48]	; 0x30
 80203bc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80203c0:	d01e      	beq.n	8020400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80203c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80203c4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80203c8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80203cc:	fb0a f808 	mul.w	r8, sl, r8
 80203d0:	fb0a fa0c 	mul.w	sl, sl, ip
 80203d4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80203d8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80203dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80203e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80203e8:	44c6      	add	lr, r8
 80203ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203fa:	ea4e 070a 	orr.w	r7, lr, sl
 80203fe:	9709      	str	r7, [sp, #36]	; 0x24
 8020400:	2eff      	cmp	r6, #255	; 0xff
 8020402:	d01d      	beq.n	8020440 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020404:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020406:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802040a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802040e:	fb06 f808 	mul.w	r8, r6, r8
 8020412:	fb06 f60c 	mul.w	r6, r6, ip
 8020416:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802041a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802041e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020422:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020426:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802042a:	44c6      	add	lr, r8
 802042c:	0a36      	lsrs	r6, r6, #8
 802042e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020432:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020436:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802043a:	ea4e 0606 	orr.w	r6, lr, r6
 802043e:	960d      	str	r6, [sp, #52]	; 0x34
 8020440:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020442:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020446:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802044c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020450:	43c9      	mvns	r1, r1
 8020452:	fb09 f606 	mul.w	r6, r9, r6
 8020456:	b2c9      	uxtb	r1, r1
 8020458:	fb02 660c 	mla	r6, r2, ip, r6
 802045c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020460:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020462:	fb00 660c 	mla	r6, r0, ip, r6
 8020466:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802046a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802046c:	fb0b 660c 	mla	r6, fp, ip, r6
 8020470:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020474:	fb09 f90c 	mul.w	r9, r9, ip
 8020478:	0a36      	lsrs	r6, r6, #8
 802047a:	fb02 9303 	mla	r3, r2, r3, r9
 802047e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020480:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020484:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802048a:	fb00 330e 	mla	r3, r0, lr, r3
 802048e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020492:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020496:	9b07      	ldr	r3, [sp, #28]
 8020498:	781b      	ldrb	r3, [r3, #0]
 802049a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802049e:	fb03 f201 	mul.w	r2, r3, r1
 80204a2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80204a6:	1c53      	adds	r3, r2, #1
 80204a8:	ea46 060b 	orr.w	r6, r6, fp
 80204ac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80204b0:	9a07      	ldr	r2, [sp, #28]
 80204b2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80204b6:	7013      	strb	r3, [r2, #0]
 80204b8:	7853      	ldrb	r3, [r2, #1]
 80204ba:	434b      	muls	r3, r1
 80204bc:	1c5a      	adds	r2, r3, #1
 80204be:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80204c2:	0a33      	lsrs	r3, r6, #8
 80204c4:	0c36      	lsrs	r6, r6, #16
 80204c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80204ca:	9a07      	ldr	r2, [sp, #28]
 80204cc:	7053      	strb	r3, [r2, #1]
 80204ce:	7893      	ldrb	r3, [r2, #2]
 80204d0:	4359      	muls	r1, r3
 80204d2:	1c4b      	adds	r3, r1, #1
 80204d4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80204d8:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80204dc:	7096      	strb	r6, [r2, #2]
 80204de:	9b07      	ldr	r3, [sp, #28]
 80204e0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80204e2:	3303      	adds	r3, #3
 80204e4:	9307      	str	r3, [sp, #28]
 80204e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204e8:	4413      	add	r3, r2
 80204ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80204ec:	9329      	str	r3, [sp, #164]	; 0xa4
 80204ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80204f0:	4413      	add	r3, r2
 80204f2:	932a      	str	r3, [sp, #168]	; 0xa8
 80204f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80204f6:	3b01      	subs	r3, #1
 80204f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80204fa:	e6c5      	b.n	8020288 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80204fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204fe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020500:	4413      	add	r3, r2
 8020502:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020504:	9329      	str	r3, [sp, #164]	; 0xa4
 8020506:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020508:	4413      	add	r3, r2
 802050a:	932a      	str	r3, [sp, #168]	; 0xa8
 802050c:	9b08      	ldr	r3, [sp, #32]
 802050e:	3b01      	subs	r3, #1
 8020510:	9308      	str	r3, [sp, #32]
 8020512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020514:	3303      	adds	r3, #3
 8020516:	930b      	str	r3, [sp, #44]	; 0x2c
 8020518:	e66b      	b.n	80201f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802051a:	f47f ae7d 	bne.w	8020218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802051e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020520:	2b00      	cmp	r3, #0
 8020522:	f340 8199 	ble.w	8020858 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802052a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802052c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020530:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020534:	eef0 6a48 	vmov.f32	s13, s16
 8020538:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802053c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020540:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020544:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020548:	eef0 6a68 	vmov.f32	s13, s17
 802054c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020550:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020554:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020558:	ee69 7a27 	vmul.f32	s15, s18, s15
 802055c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020560:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020564:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020568:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802056c:	ee18 2a10 	vmov	r2, s16
 8020570:	eeb0 8a47 	vmov.f32	s16, s14
 8020574:	fb92 f3f3 	sdiv	r3, r2, r3
 8020578:	ee18 2a90 	vmov	r2, s17
 802057c:	932b      	str	r3, [sp, #172]	; 0xac
 802057e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020580:	eef0 8a67 	vmov.f32	s17, s15
 8020584:	fb92 f3f3 	sdiv	r3, r2, r3
 8020588:	932c      	str	r3, [sp, #176]	; 0xb0
 802058a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802058c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802058e:	3b01      	subs	r3, #1
 8020590:	9312      	str	r3, [sp, #72]	; 0x48
 8020592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020594:	bf08      	it	eq
 8020596:	4613      	moveq	r3, r2
 8020598:	9308      	str	r3, [sp, #32]
 802059a:	e623      	b.n	80201e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 802059c:	b158      	cbz	r0, 80205b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802059e:	5d32      	ldrb	r2, [r6, r4]
 80205a0:	26ff      	movs	r6, #255	; 0xff
 80205a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80205a6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80205aa:	9209      	str	r2, [sp, #36]	; 0x24
 80205ac:	46b0      	mov	r8, r6
 80205ae:	e6a7      	b.n	8020300 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80205b0:	26ff      	movs	r6, #255	; 0xff
 80205b2:	46b2      	mov	sl, r6
 80205b4:	e6a4      	b.n	8020300 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80205b6:	26ff      	movs	r6, #255	; 0xff
 80205b8:	46b2      	mov	sl, r6
 80205ba:	e7f7      	b.n	80205ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80205bc:	1c57      	adds	r7, r2, #1
 80205be:	d18e      	bne.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80205c0:	4294      	cmp	r4, r2
 80205c2:	dd8c      	ble.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80205c4:	1c5e      	adds	r6, r3, #1
 80205c6:	db8a      	blt.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80205c8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80205ca:	429e      	cmp	r6, r3
 80205cc:	dd87      	ble.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80205ce:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80205d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80205d6:	e9cd 4600 	strd	r4, r6, [sp]
 80205da:	462b      	mov	r3, r5
 80205dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80205de:	9907      	ldr	r1, [sp, #28]
 80205e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80205e2:	f7ff fc85 	bl	801fef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80205e6:	e77a      	b.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80205e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80205ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80205ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80205f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205f2:	1409      	asrs	r1, r1, #16
 80205f4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80205f8:	141b      	asrs	r3, r3, #16
 80205fa:	fb04 1303 	mla	r3, r4, r3, r1
 80205fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020600:	18ce      	adds	r6, r1, r3
 8020602:	5ccb      	ldrb	r3, [r1, r3]
 8020604:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020608:	0e1f      	lsrs	r7, r3, #24
 802060a:	2a00      	cmp	r2, #0
 802060c:	f000 8114 	beq.w	8020838 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020610:	7871      	ldrb	r1, [r6, #1]
 8020612:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020616:	910e      	str	r1, [sp, #56]	; 0x38
 8020618:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802061c:	2800      	cmp	r0, #0
 802061e:	f000 8115 	beq.w	802084c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020622:	1931      	adds	r1, r6, r4
 8020624:	5d36      	ldrb	r6, [r6, r4]
 8020626:	7849      	ldrb	r1, [r1, #1]
 8020628:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802062c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020630:	960a      	str	r6, [sp, #40]	; 0x28
 8020632:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020636:	0e0e      	lsrs	r6, r1, #24
 8020638:	910f      	str	r1, [sp, #60]	; 0x3c
 802063a:	b292      	uxth	r2, r2
 802063c:	b280      	uxth	r0, r0
 802063e:	fb02 fb00 	mul.w	fp, r2, r0
 8020642:	0112      	lsls	r2, r2, #4
 8020644:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020648:	eba2 090b 	sub.w	r9, r2, fp
 802064c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020650:	b280      	uxth	r0, r0
 8020652:	fa1f f989 	uxth.w	r9, r9
 8020656:	1a09      	subs	r1, r1, r0
 8020658:	fb09 f20e 	mul.w	r2, r9, lr
 802065c:	b289      	uxth	r1, r1
 802065e:	fb01 2207 	mla	r2, r1, r7, r2
 8020662:	fb00 220a 	mla	r2, r0, sl, r2
 8020666:	fb0b 2206 	mla	r2, fp, r6, r2
 802066a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802066e:	9213      	str	r2, [sp, #76]	; 0x4c
 8020670:	2a00      	cmp	r2, #0
 8020672:	f000 80d4 	beq.w	802081e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020676:	2fff      	cmp	r7, #255	; 0xff
 8020678:	d01a      	beq.n	80206b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802067a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802067e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020682:	fb07 fc0c 	mul.w	ip, r7, ip
 8020686:	435f      	muls	r7, r3
 8020688:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802068c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020690:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020694:	4463      	add	r3, ip
 8020696:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802069a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802069e:	0a1b      	lsrs	r3, r3, #8
 80206a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80206ac:	ea43 030c 	orr.w	r3, r3, ip
 80206b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80206b4:	d01f      	beq.n	80206f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 80206b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80206b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80206ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206be:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80206c2:	fb0e f707 	mul.w	r7, lr, r7
 80206c6:	fb0e fe0c 	mul.w	lr, lr, ip
 80206ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80206ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80206d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206d6:	44bc      	add	ip, r7
 80206d8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80206dc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80206e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80206f0:	ea4c 020e 	orr.w	r2, ip, lr
 80206f4:	920e      	str	r2, [sp, #56]	; 0x38
 80206f6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80206fa:	d01e      	beq.n	802073a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 80206fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206fe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020702:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020706:	fb0a fe0e 	mul.w	lr, sl, lr
 802070a:	fb0a fa07 	mul.w	sl, sl, r7
 802070e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020712:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020716:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802071a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802071e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020722:	44f4      	add	ip, lr
 8020724:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020728:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802072c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020730:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020734:	ea4c 020a 	orr.w	r2, ip, sl
 8020738:	920a      	str	r2, [sp, #40]	; 0x28
 802073a:	2eff      	cmp	r6, #255	; 0xff
 802073c:	d01c      	beq.n	8020778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802073e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020740:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020744:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020748:	fb06 fe0e 	mul.w	lr, r6, lr
 802074c:	437e      	muls	r6, r7
 802074e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020752:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020756:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802075a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802075e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020762:	44f4      	add	ip, lr
 8020764:	0a36      	lsrs	r6, r6, #8
 8020766:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802076a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802076e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020772:	ea4c 0206 	orr.w	r2, ip, r6
 8020776:	920f      	str	r2, [sp, #60]	; 0x3c
 8020778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802077a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802077e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020782:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020788:	fb09 f606 	mul.w	r6, r9, r6
 802078c:	fb01 6607 	mla	r6, r1, r7, r6
 8020790:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020796:	fb00 6607 	mla	r6, r0, r7, r6
 802079a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 802079e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207a0:	fb0b 6607 	mla	r6, fp, r7, r6
 80207a4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80207a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207aa:	fb09 f907 	mul.w	r9, r9, r7
 80207ae:	0a36      	lsrs	r6, r6, #8
 80207b0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80207b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207b6:	fb01 9303 	mla	r3, r1, r3, r9
 80207ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80207be:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80207c2:	fb00 330c 	mla	r3, r0, ip, r3
 80207c6:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80207ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80207cc:	43da      	mvns	r2, r3
 80207ce:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80207d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207d6:	b2d2      	uxtb	r2, r2
 80207d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80207dc:	fb03 f102 	mul.w	r1, r3, r2
 80207e0:	ea46 060e 	orr.w	r6, r6, lr
 80207e4:	1c4b      	adds	r3, r1, #1
 80207e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80207ea:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80207ee:	f808 3c03 	strb.w	r3, [r8, #-3]
 80207f2:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 80207f6:	4353      	muls	r3, r2
 80207f8:	1c59      	adds	r1, r3, #1
 80207fa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80207fe:	0a33      	lsrs	r3, r6, #8
 8020800:	0c36      	lsrs	r6, r6, #16
 8020802:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020806:	f808 3c02 	strb.w	r3, [r8, #-2]
 802080a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802080e:	435a      	muls	r2, r3
 8020810:	1c53      	adds	r3, r2, #1
 8020812:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020816:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802081a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802081e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020820:	f108 0803 	add.w	r8, r8, #3
 8020824:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020826:	4413      	add	r3, r2
 8020828:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802082a:	9329      	str	r3, [sp, #164]	; 0xa4
 802082c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802082e:	4413      	add	r3, r2
 8020830:	932a      	str	r3, [sp, #168]	; 0xa8
 8020832:	9b07      	ldr	r3, [sp, #28]
 8020834:	3b01      	subs	r3, #1
 8020836:	e508      	b.n	802024a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8020838:	b158      	cbz	r0, 8020852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802083a:	5d31      	ldrb	r1, [r6, r4]
 802083c:	26ff      	movs	r6, #255	; 0xff
 802083e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020842:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020846:	910a      	str	r1, [sp, #40]	; 0x28
 8020848:	46b6      	mov	lr, r6
 802084a:	e6f6      	b.n	802063a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802084c:	26ff      	movs	r6, #255	; 0xff
 802084e:	46b2      	mov	sl, r6
 8020850:	e6f3      	b.n	802063a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020852:	26ff      	movs	r6, #255	; 0xff
 8020854:	46b2      	mov	sl, r6
 8020856:	e7f7      	b.n	8020848 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8020858:	b017      	add	sp, #92	; 0x5c
 802085a:	ecbd 8b08 	vpop	{d8-d11}
 802085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020864 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020868:	b08d      	sub	sp, #52	; 0x34
 802086a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802086e:	9103      	str	r1, [sp, #12]
 8020870:	fb07 5803 	mla	r8, r7, r3, r5
 8020874:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020878:	9803      	ldr	r0, [sp, #12]
 802087a:	2f00      	cmp	r7, #0
 802087c:	910b      	str	r1, [sp, #44]	; 0x2c
 802087e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020882:	9903      	ldr	r1, [sp, #12]
 8020884:	9c03      	ldr	r4, [sp, #12]
 8020886:	eb02 0608 	add.w	r6, r2, r8
 802088a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802088e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8020892:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020896:	7809      	ldrb	r1, [r1, #0]
 8020898:	7840      	ldrb	r0, [r0, #1]
 802089a:	78a4      	ldrb	r4, [r4, #2]
 802089c:	db51      	blt.n	8020942 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802089e:	45be      	cmp	lr, r7
 80208a0:	dd4f      	ble.n	8020942 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80208a2:	2d00      	cmp	r5, #0
 80208a4:	db49      	blt.n	802093a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80208a6:	42ab      	cmp	r3, r5
 80208a8:	dd47      	ble.n	802093a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80208aa:	f812 2008 	ldrb.w	r2, [r2, r8]
 80208ae:	9204      	str	r2, [sp, #16]
 80208b0:	7872      	ldrb	r2, [r6, #1]
 80208b2:	9205      	str	r2, [sp, #20]
 80208b4:	78b2      	ldrb	r2, [r6, #2]
 80208b6:	9206      	str	r2, [sp, #24]
 80208b8:	1c6a      	adds	r2, r5, #1
 80208ba:	d449      	bmi.n	8020950 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80208bc:	4293      	cmp	r3, r2
 80208be:	dd47      	ble.n	8020950 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80208c0:	f1bc 0f00 	cmp.w	ip, #0
 80208c4:	d044      	beq.n	8020950 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80208c6:	7972      	ldrb	r2, [r6, #5]
 80208c8:	f896 b003 	ldrb.w	fp, [r6, #3]
 80208cc:	f896 a004 	ldrb.w	sl, [r6, #4]
 80208d0:	9201      	str	r2, [sp, #4]
 80208d2:	3701      	adds	r7, #1
 80208d4:	d444      	bmi.n	8020960 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80208d6:	45be      	cmp	lr, r7
 80208d8:	dd42      	ble.n	8020960 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80208da:	f1b9 0f00 	cmp.w	r9, #0
 80208de:	f000 80c1 	beq.w	8020a64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80208e2:	2d00      	cmp	r5, #0
 80208e4:	db38      	blt.n	8020958 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80208e6:	42ab      	cmp	r3, r5
 80208e8:	dd36      	ble.n	8020958 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80208ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80208ee:	f816 8002 	ldrb.w	r8, [r6, r2]
 80208f2:	2203      	movs	r2, #3
 80208f4:	fb03 6702 	mla	r7, r3, r2, r6
 80208f8:	fb03 6202 	mla	r2, r3, r2, r6
 80208fc:	787f      	ldrb	r7, [r7, #1]
 80208fe:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020902:	9702      	str	r7, [sp, #8]
 8020904:	3501      	adds	r5, #1
 8020906:	d432      	bmi.n	802096e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020908:	42ab      	cmp	r3, r5
 802090a:	dd30      	ble.n	802096e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802090c:	f1bc 0f00 	cmp.w	ip, #0
 8020910:	d031      	beq.n	8020976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020912:	2703      	movs	r7, #3
 8020914:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020918:	5cb5      	ldrb	r5, [r6, r2]
 802091a:	fb03 6207 	mla	r2, r3, r7, r6
 802091e:	fb03 6307 	mla	r3, r3, r7, r6
 8020922:	7912      	ldrb	r2, [r2, #4]
 8020924:	795e      	ldrb	r6, [r3, #5]
 8020926:	f1bc 0f0f 	cmp.w	ip, #15
 802092a:	d927      	bls.n	802097c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802092c:	4b53      	ldr	r3, [pc, #332]	; (8020a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802092e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020932:	4a53      	ldr	r2, [pc, #332]	; (8020a80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020934:	4853      	ldr	r0, [pc, #332]	; (8020a84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8020936:	f004 facf 	bl	8024ed8 <__assert_func>
 802093a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802093e:	9104      	str	r1, [sp, #16]
 8020940:	e7ba      	b.n	80208b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020942:	9401      	str	r4, [sp, #4]
 8020944:	4682      	mov	sl, r0
 8020946:	468b      	mov	fp, r1
 8020948:	9104      	str	r1, [sp, #16]
 802094a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802094e:	e7c0      	b.n	80208d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020950:	9401      	str	r4, [sp, #4]
 8020952:	4682      	mov	sl, r0
 8020954:	468b      	mov	fp, r1
 8020956:	e7bc      	b.n	80208d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020958:	46a6      	mov	lr, r4
 802095a:	9002      	str	r0, [sp, #8]
 802095c:	4688      	mov	r8, r1
 802095e:	e7d1      	b.n	8020904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020960:	4626      	mov	r6, r4
 8020962:	4602      	mov	r2, r0
 8020964:	460d      	mov	r5, r1
 8020966:	46a6      	mov	lr, r4
 8020968:	9002      	str	r0, [sp, #8]
 802096a:	4688      	mov	r8, r1
 802096c:	e7db      	b.n	8020926 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802096e:	4626      	mov	r6, r4
 8020970:	4602      	mov	r2, r0
 8020972:	460d      	mov	r5, r1
 8020974:	e7d7      	b.n	8020926 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020976:	4626      	mov	r6, r4
 8020978:	4602      	mov	r2, r0
 802097a:	460d      	mov	r5, r1
 802097c:	f1b9 0f0f 	cmp.w	r9, #15
 8020980:	d8d4      	bhi.n	802092c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020982:	fa1f f38c 	uxth.w	r3, ip
 8020986:	fa1f fc89 	uxth.w	ip, r9
 802098a:	fb03 f70c 	mul.w	r7, r3, ip
 802098e:	011b      	lsls	r3, r3, #4
 8020990:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020994:	9707      	str	r7, [sp, #28]
 8020996:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802099a:	fa1f fc8c 	uxth.w	ip, ip
 802099e:	eba7 070c 	sub.w	r7, r7, ip
 80209a2:	b2bf      	uxth	r7, r7
 80209a4:	9709      	str	r7, [sp, #36]	; 0x24
 80209a6:	9f07      	ldr	r7, [sp, #28]
 80209a8:	1bdb      	subs	r3, r3, r7
 80209aa:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80209ae:	b29b      	uxth	r3, r3
 80209b0:	9708      	str	r7, [sp, #32]
 80209b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80209b4:	930a      	str	r3, [sp, #40]	; 0x28
 80209b6:	ea6f 0907 	mvn.w	r9, r7
 80209ba:	fb03 fb0b 	mul.w	fp, r3, fp
 80209be:	9f04      	ldr	r7, [sp, #16]
 80209c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209c2:	fa5f f989 	uxtb.w	r9, r9
 80209c6:	fb03 bb07 	mla	fp, r3, r7, fp
 80209ca:	9f07      	ldr	r7, [sp, #28]
 80209cc:	fb11 f109 	smulbb	r1, r1, r9
 80209d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80209d2:	fb0c b808 	mla	r8, ip, r8, fp
 80209d6:	fb10 f009 	smulbb	r0, r0, r9
 80209da:	fb14 f409 	smulbb	r4, r4, r9
 80209de:	fb07 8805 	mla	r8, r7, r5, r8
 80209e2:	9d08      	ldr	r5, [sp, #32]
 80209e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80209e6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80209ea:	fb08 1805 	mla	r8, r8, r5, r1
 80209ee:	9d05      	ldr	r5, [sp, #20]
 80209f0:	fa1f f888 	uxth.w	r8, r8
 80209f4:	f108 0101 	add.w	r1, r8, #1
 80209f8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80209fc:	9903      	ldr	r1, [sp, #12]
 80209fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020a02:	f881 8000 	strb.w	r8, [r1]
 8020a06:	fb03 f10a 	mul.w	r1, r3, sl
 8020a0a:	fb07 1105 	mla	r1, r7, r5, r1
 8020a0e:	9d02      	ldr	r5, [sp, #8]
 8020a10:	fb0c 1105 	mla	r1, ip, r5, r1
 8020a14:	9d07      	ldr	r5, [sp, #28]
 8020a16:	fb05 1102 	mla	r1, r5, r2, r1
 8020a1a:	9a08      	ldr	r2, [sp, #32]
 8020a1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a20:	fb01 0102 	mla	r1, r1, r2, r0
 8020a24:	9a03      	ldr	r2, [sp, #12]
 8020a26:	b289      	uxth	r1, r1
 8020a28:	1c48      	adds	r0, r1, #1
 8020a2a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020a2e:	1209      	asrs	r1, r1, #8
 8020a30:	7051      	strb	r1, [r2, #1]
 8020a32:	9a01      	ldr	r2, [sp, #4]
 8020a34:	4353      	muls	r3, r2
 8020a36:	9a06      	ldr	r2, [sp, #24]
 8020a38:	fb07 3702 	mla	r7, r7, r2, r3
 8020a3c:	9b08      	ldr	r3, [sp, #32]
 8020a3e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8020a42:	fb05 c606 	mla	r6, r5, r6, ip
 8020a46:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020a4a:	fb06 4603 	mla	r6, r6, r3, r4
 8020a4e:	9b03      	ldr	r3, [sp, #12]
 8020a50:	b2b6      	uxth	r6, r6
 8020a52:	f106 0e01 	add.w	lr, r6, #1
 8020a56:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020a5a:	1236      	asrs	r6, r6, #8
 8020a5c:	709e      	strb	r6, [r3, #2]
 8020a5e:	b00d      	add	sp, #52	; 0x34
 8020a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a64:	f1bc 0f0f 	cmp.w	ip, #15
 8020a68:	f63f af60 	bhi.w	802092c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020a6c:	4626      	mov	r6, r4
 8020a6e:	4602      	mov	r2, r0
 8020a70:	460d      	mov	r5, r1
 8020a72:	46a6      	mov	lr, r4
 8020a74:	9002      	str	r0, [sp, #8]
 8020a76:	4688      	mov	r8, r1
 8020a78:	e783      	b.n	8020982 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8020a7a:	bf00      	nop
 8020a7c:	080299a3 	.word	0x080299a3
 8020a80:	08029e9a 	.word	0x08029e9a
 8020a84:	08029a6c 	.word	0x08029a6c

08020a88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a8c:	ed2d 8b08 	vpush	{d8-d11}
 8020a90:	b0a1      	sub	sp, #132	; 0x84
 8020a92:	eeb0 aa40 	vmov.f32	s20, s0
 8020a96:	eef0 9a60 	vmov.f32	s19, s1
 8020a9a:	9307      	str	r3, [sp, #28]
 8020a9c:	eeb0 9a41 	vmov.f32	s18, s2
 8020aa0:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8020aa4:	eeb0 8a62 	vmov.f32	s16, s5
 8020aa8:	9210      	str	r2, [sp, #64]	; 0x40
 8020aaa:	eef0 8a43 	vmov.f32	s17, s6
 8020aae:	9308      	str	r3, [sp, #32]
 8020ab0:	eef0 ba44 	vmov.f32	s23, s8
 8020ab4:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8020ab8:	eeb0 ba64 	vmov.f32	s22, s9
 8020abc:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8020abe:	eef0 aa45 	vmov.f32	s21, s10
 8020ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8020ac4:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8020ac8:	901f      	str	r0, [sp, #124]	; 0x7c
 8020aca:	930f      	str	r3, [sp, #60]	; 0x3c
 8020acc:	6850      	ldr	r0, [r2, #4]
 8020ace:	910e      	str	r1, [sp, #56]	; 0x38
 8020ad0:	6812      	ldr	r2, [r2, #0]
 8020ad2:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8020ad6:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8020ada:	fb00 1303 	mla	r3, r0, r3, r1
 8020ade:	9908      	ldr	r1, [sp, #32]
 8020ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ae4:	18d3      	adds	r3, r2, r3
 8020ae6:	2203      	movs	r2, #3
 8020ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8020aea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020aec:	681b      	ldr	r3, [r3, #0]
 8020aee:	930c      	str	r3, [sp, #48]	; 0x30
 8020af0:	f06f 0304 	mvn.w	r3, #4
 8020af4:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020af8:	930d      	str	r3, [sp, #52]	; 0x34
 8020afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020afc:	43db      	mvns	r3, r3
 8020afe:	b2db      	uxtb	r3, r3
 8020b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8020b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	dc03      	bgt.n	8020b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020b08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	f340 81df 	ble.w	8020ece <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020b10:	9b07      	ldr	r3, [sp, #28]
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	f340 80f2 	ble.w	8020cfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020b18:	ea5f 4228 	movs.w	r2, r8, asr #16
 8020b1c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8020b20:	d430      	bmi.n	8020b84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020b22:	1c51      	adds	r1, r2, #1
 8020b24:	9808      	ldr	r0, [sp, #32]
 8020b26:	4281      	cmp	r1, r0
 8020b28:	da2f      	bge.n	8020b8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	db2d      	blt.n	8020b8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020b2e:	1c59      	adds	r1, r3, #1
 8020b30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020b32:	4288      	cmp	r0, r1
 8020b34:	dd29      	ble.n	8020b8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020b36:	9b07      	ldr	r3, [sp, #28]
 8020b38:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020b3a:	3b01      	subs	r3, #1
 8020b3c:	fb02 8203 	mla	r2, r2, r3, r8
 8020b40:	1412      	asrs	r2, r2, #16
 8020b42:	d42d      	bmi.n	8020ba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020b44:	3201      	adds	r2, #1
 8020b46:	9908      	ldr	r1, [sp, #32]
 8020b48:	4291      	cmp	r1, r2
 8020b4a:	dd29      	ble.n	8020ba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020b4c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020b4e:	fb02 b303 	mla	r3, r2, r3, fp
 8020b52:	141b      	asrs	r3, r3, #16
 8020b54:	d424      	bmi.n	8020ba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020b56:	3301      	adds	r3, #1
 8020b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b5a:	429a      	cmp	r2, r3
 8020b5c:	dd20      	ble.n	8020ba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b60:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020b64:	1cde      	adds	r6, r3, #3
 8020b66:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8020b6a:	f1bc 0f00 	cmp.w	ip, #0
 8020b6e:	f300 811f 	bgt.w	8020db0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8020b72:	9b07      	ldr	r3, [sp, #28]
 8020b74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020b7e:	4423      	add	r3, r4
 8020b80:	9309      	str	r3, [sp, #36]	; 0x24
 8020b82:	e0bd      	b.n	8020d00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020b84:	1c57      	adds	r7, r2, #1
 8020b86:	f040 80ae 	bne.w	8020ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020b8a:	9908      	ldr	r1, [sp, #32]
 8020b8c:	428a      	cmp	r2, r1
 8020b8e:	f280 80aa 	bge.w	8020ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020b92:	1c5e      	adds	r6, r3, #1
 8020b94:	f2c0 80a7 	blt.w	8020ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b9a:	4293      	cmp	r3, r2
 8020b9c:	f280 80a3 	bge.w	8020ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020ba0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020ba6:	f1ba 0f00 	cmp.w	sl, #0
 8020baa:	dde2      	ble.n	8020b72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020bac:	ea5f 4028 	movs.w	r0, r8, asr #16
 8020bb0:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020bb4:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020bb8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020bbc:	f100 80df 	bmi.w	8020d7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8020bc0:	1c45      	adds	r5, r0, #1
 8020bc2:	9f08      	ldr	r7, [sp, #32]
 8020bc4:	42af      	cmp	r7, r5
 8020bc6:	f340 80dc 	ble.w	8020d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020bca:	2900      	cmp	r1, #0
 8020bcc:	f2c0 80d9 	blt.w	8020d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020bd0:	1c4d      	adds	r5, r1, #1
 8020bd2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020bd4:	42af      	cmp	r7, r5
 8020bd6:	f340 80d4 	ble.w	8020d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020bda:	9d08      	ldr	r5, [sp, #32]
 8020bdc:	fb05 0101 	mla	r1, r5, r1, r0
 8020be0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020be2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020be6:	1845      	adds	r5, r0, r1
 8020be8:	5c40      	ldrb	r0, [r0, r1]
 8020bea:	792f      	ldrb	r7, [r5, #4]
 8020bec:	7869      	ldrb	r1, [r5, #1]
 8020bee:	9711      	str	r7, [sp, #68]	; 0x44
 8020bf0:	796f      	ldrb	r7, [r5, #5]
 8020bf2:	f895 e002 	ldrb.w	lr, [r5, #2]
 8020bf6:	f895 9003 	ldrb.w	r9, [r5, #3]
 8020bfa:	9712      	str	r7, [sp, #72]	; 0x48
 8020bfc:	b17a      	cbz	r2, 8020c1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8020bfe:	3505      	adds	r5, #5
 8020c00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020c02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020c04:	19ef      	adds	r7, r5, r7
 8020c06:	5d2d      	ldrb	r5, [r5, r4]
 8020c08:	787c      	ldrb	r4, [r7, #1]
 8020c0a:	9513      	str	r5, [sp, #76]	; 0x4c
 8020c0c:	9415      	str	r4, [sp, #84]	; 0x54
 8020c0e:	78bc      	ldrb	r4, [r7, #2]
 8020c10:	9417      	str	r4, [sp, #92]	; 0x5c
 8020c12:	78fc      	ldrb	r4, [r7, #3]
 8020c14:	9414      	str	r4, [sp, #80]	; 0x50
 8020c16:	793c      	ldrb	r4, [r7, #4]
 8020c18:	9416      	str	r4, [sp, #88]	; 0x58
 8020c1a:	797c      	ldrb	r4, [r7, #5]
 8020c1c:	9418      	str	r4, [sp, #96]	; 0x60
 8020c1e:	b29b      	uxth	r3, r3
 8020c20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020c22:	b292      	uxth	r2, r2
 8020c24:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8020c28:	fb03 f702 	mul.w	r7, r3, r2
 8020c2c:	011b      	lsls	r3, r3, #4
 8020c2e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8020c32:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020c36:	1bdb      	subs	r3, r3, r7
 8020c38:	b292      	uxth	r2, r2
 8020c3a:	b29b      	uxth	r3, r3
 8020c3c:	ebac 0c02 	sub.w	ip, ip, r2
 8020c40:	fb03 f909 	mul.w	r9, r3, r9
 8020c44:	fa1f fc8c 	uxth.w	ip, ip
 8020c48:	fb0c 9000 	mla	r0, ip, r0, r9
 8020c4c:	f896 9000 	ldrb.w	r9, [r6]
 8020c50:	fb02 0004 	mla	r0, r2, r4, r0
 8020c54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020c56:	fb07 0004 	mla	r0, r7, r4, r0
 8020c5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020c5c:	fb19 f904 	smulbb	r9, r9, r4
 8020c60:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020c64:	fb00 9005 	mla	r0, r0, r5, r9
 8020c68:	b280      	uxth	r0, r0
 8020c6a:	f100 0901 	add.w	r9, r0, #1
 8020c6e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020c72:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c74:	4358      	muls	r0, r3
 8020c76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c7a:	fb0c 0101 	mla	r1, ip, r1, r0
 8020c7e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020c80:	f886 9000 	strb.w	r9, [r6]
 8020c84:	fb02 1100 	mla	r1, r2, r0, r1
 8020c88:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020c8a:	fb07 1100 	mla	r1, r7, r0, r1
 8020c8e:	7870      	ldrb	r0, [r6, #1]
 8020c90:	fb10 f004 	smulbb	r0, r0, r4
 8020c94:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020c98:	fb01 0105 	mla	r1, r1, r5, r0
 8020c9c:	b289      	uxth	r1, r1
 8020c9e:	1c48      	adds	r0, r1, #1
 8020ca0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020ca4:	1209      	asrs	r1, r1, #8
 8020ca6:	7071      	strb	r1, [r6, #1]
 8020ca8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020caa:	434b      	muls	r3, r1
 8020cac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020cae:	fb0c 330e 	mla	r3, ip, lr, r3
 8020cb2:	fb02 3201 	mla	r2, r2, r1, r3
 8020cb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020cb8:	fb07 2703 	mla	r7, r7, r3, r2
 8020cbc:	78b2      	ldrb	r2, [r6, #2]
 8020cbe:	fb12 f204 	smulbb	r2, r2, r4
 8020cc2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020cc6:	fb07 2505 	mla	r5, r7, r5, r2
 8020cca:	b2ad      	uxth	r5, r5
 8020ccc:	1c6f      	adds	r7, r5, #1
 8020cce:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020cd2:	122d      	asrs	r5, r5, #8
 8020cd4:	70b5      	strb	r5, [r6, #2]
 8020cd6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020cd8:	3603      	adds	r6, #3
 8020cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020cde:	4498      	add	r8, r3
 8020ce0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020ce2:	449b      	add	fp, r3
 8020ce4:	e75f      	b.n	8020ba6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020ce6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020ce8:	4498      	add	r8, r3
 8020cea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020cec:	449b      	add	fp, r3
 8020cee:	9b07      	ldr	r3, [sp, #28]
 8020cf0:	3b01      	subs	r3, #1
 8020cf2:	9307      	str	r3, [sp, #28]
 8020cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cf6:	3303      	adds	r3, #3
 8020cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8020cfa:	e709      	b.n	8020b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020cfc:	f47f af1b 	bne.w	8020b36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	f340 80e3 	ble.w	8020ece <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d0c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020d0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020d12:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020d16:	eef0 6a48 	vmov.f32	s13, s16
 8020d1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020d1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020d22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d26:	ee16 8a90 	vmov	r8, s13
 8020d2a:	eef0 6a68 	vmov.f32	s13, s17
 8020d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d32:	ee16 ba90 	vmov	fp, s13
 8020d36:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020d3a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020d3e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020d42:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020d46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020d4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020d4e:	ee18 2a10 	vmov	r2, s16
 8020d52:	eeb0 8a47 	vmov.f32	s16, s14
 8020d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d5a:	ee18 2a90 	vmov	r2, s17
 8020d5e:	9335      	str	r3, [sp, #212]	; 0xd4
 8020d60:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020d62:	eef0 8a67 	vmov.f32	s17, s15
 8020d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d6a:	9336      	str	r3, [sp, #216]	; 0xd8
 8020d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d70:	3b01      	subs	r3, #1
 8020d72:	930e      	str	r3, [sp, #56]	; 0x38
 8020d74:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020d76:	bf08      	it	eq
 8020d78:	4613      	moveq	r3, r2
 8020d7a:	9307      	str	r3, [sp, #28]
 8020d7c:	e6c1      	b.n	8020b02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020d7e:	1c45      	adds	r5, r0, #1
 8020d80:	d1a9      	bne.n	8020cd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020d82:	9c08      	ldr	r4, [sp, #32]
 8020d84:	42a0      	cmp	r0, r4
 8020d86:	daa6      	bge.n	8020cd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020d88:	1c4c      	adds	r4, r1, #1
 8020d8a:	dba4      	blt.n	8020cd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020d8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020d8e:	428c      	cmp	r4, r1
 8020d90:	dda1      	ble.n	8020cd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020d92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020d94:	9001      	str	r0, [sp, #4]
 8020d96:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020d98:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8020d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d9e:	4631      	mov	r1, r6
 8020da0:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020da4:	9300      	str	r3, [sp, #0]
 8020da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020da8:	9b08      	ldr	r3, [sp, #32]
 8020daa:	f7ff fd5b 	bl	8020864 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020dae:	e792      	b.n	8020cd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020db0:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020db4:	9c08      	ldr	r4, [sp, #32]
 8020db6:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020dba:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8020dbe:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020dc2:	fb04 2000 	mla	r0, r4, r0, r2
 8020dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020dc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020dca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020dce:	4402      	add	r2, r0
 8020dd0:	5c25      	ldrb	r5, [r4, r0]
 8020dd2:	7894      	ldrb	r4, [r2, #2]
 8020dd4:	7850      	ldrb	r0, [r2, #1]
 8020dd6:	9411      	str	r4, [sp, #68]	; 0x44
 8020dd8:	7954      	ldrb	r4, [r2, #5]
 8020dda:	f892 a003 	ldrb.w	sl, [r2, #3]
 8020dde:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020de2:	9412      	str	r4, [sp, #72]	; 0x48
 8020de4:	b171      	cbz	r1, 8020e04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020de6:	3205      	adds	r2, #5
 8020de8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020dea:	1917      	adds	r7, r2, r4
 8020dec:	5d12      	ldrb	r2, [r2, r4]
 8020dee:	9219      	str	r2, [sp, #100]	; 0x64
 8020df0:	787a      	ldrb	r2, [r7, #1]
 8020df2:	921b      	str	r2, [sp, #108]	; 0x6c
 8020df4:	78ba      	ldrb	r2, [r7, #2]
 8020df6:	921d      	str	r2, [sp, #116]	; 0x74
 8020df8:	78fa      	ldrb	r2, [r7, #3]
 8020dfa:	921a      	str	r2, [sp, #104]	; 0x68
 8020dfc:	793a      	ldrb	r2, [r7, #4]
 8020dfe:	921c      	str	r2, [sp, #112]	; 0x70
 8020e00:	797a      	ldrb	r2, [r7, #5]
 8020e02:	921e      	str	r2, [sp, #120]	; 0x78
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020e08:	b289      	uxth	r1, r1
 8020e0a:	3603      	adds	r6, #3
 8020e0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020e10:	fb03 f201 	mul.w	r2, r3, r1
 8020e14:	011b      	lsls	r3, r3, #4
 8020e16:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8020e1a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020e1e:	1a9b      	subs	r3, r3, r2
 8020e20:	b289      	uxth	r1, r1
 8020e22:	b29b      	uxth	r3, r3
 8020e24:	1a7f      	subs	r7, r7, r1
 8020e26:	fb03 fa0a 	mul.w	sl, r3, sl
 8020e2a:	b2bf      	uxth	r7, r7
 8020e2c:	fb03 f909 	mul.w	r9, r3, r9
 8020e30:	fb07 a505 	mla	r5, r7, r5, sl
 8020e34:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020e38:	fb07 9000 	mla	r0, r7, r0, r9
 8020e3c:	fb01 5504 	mla	r5, r1, r4, r5
 8020e40:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020e42:	fb02 5504 	mla	r5, r2, r4, r5
 8020e46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e48:	fb1a fa04 	smulbb	sl, sl, r4
 8020e4c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020e50:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020e52:	fb05 a50e 	mla	r5, r5, lr, sl
 8020e56:	fb01 0004 	mla	r0, r1, r4, r0
 8020e5a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020e5c:	b2ad      	uxth	r5, r5
 8020e5e:	fb02 0004 	mla	r0, r2, r4, r0
 8020e62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e64:	f105 0a01 	add.w	sl, r5, #1
 8020e68:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020e6c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020e70:	122d      	asrs	r5, r5, #8
 8020e72:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020e76:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020e7a:	fb15 f504 	smulbb	r5, r5, r4
 8020e7e:	fb00 500e 	mla	r0, r0, lr, r5
 8020e82:	b280      	uxth	r0, r0
 8020e84:	1c45      	adds	r5, r0, #1
 8020e86:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020e8a:	1200      	asrs	r0, r0, #8
 8020e8c:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020e90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e92:	4343      	muls	r3, r0
 8020e94:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e96:	fb07 3300 	mla	r3, r7, r0, r3
 8020e9a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020e9c:	fb01 3100 	mla	r1, r1, r0, r3
 8020ea0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020ea2:	fb02 1203 	mla	r2, r2, r3, r1
 8020ea6:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8020eaa:	fb11 f104 	smulbb	r1, r1, r4
 8020eae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020eb2:	fb02 120e 	mla	r2, r2, lr, r1
 8020eb6:	b292      	uxth	r2, r2
 8020eb8:	1c53      	adds	r3, r2, #1
 8020eba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020ebe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020ec0:	1212      	asrs	r2, r2, #8
 8020ec2:	4498      	add	r8, r3
 8020ec4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020ec6:	f806 2c04 	strb.w	r2, [r6, #-4]
 8020eca:	449b      	add	fp, r3
 8020ecc:	e64d      	b.n	8020b6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020ece:	b021      	add	sp, #132	; 0x84
 8020ed0:	ecbd 8b08 	vpop	{d8-d11}
 8020ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020edc:	b085      	sub	sp, #20
 8020ede:	784d      	ldrb	r5, [r1, #1]
 8020ee0:	788e      	ldrb	r6, [r1, #2]
 8020ee2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020ee6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020eea:	9403      	str	r4, [sp, #12]
 8020eec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020ef0:	780c      	ldrb	r4, [r1, #0]
 8020ef2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020ef6:	fb07 ce03 	mla	lr, r7, r3, ip
 8020efa:	2f00      	cmp	r7, #0
 8020efc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020f00:	eb02 0b0e 	add.w	fp, r2, lr
 8020f04:	db56      	blt.n	8020fb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020f06:	45b9      	cmp	r9, r7
 8020f08:	dd54      	ble.n	8020fb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020f0a:	f1bc 0f00 	cmp.w	ip, #0
 8020f0e:	db4d      	blt.n	8020fac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020f10:	4563      	cmp	r3, ip
 8020f12:	dd4b      	ble.n	8020fac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020f14:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020f18:	9200      	str	r2, [sp, #0]
 8020f1a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020f1e:	9201      	str	r2, [sp, #4]
 8020f20:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020f24:	9202      	str	r2, [sp, #8]
 8020f26:	f11c 0201 	adds.w	r2, ip, #1
 8020f2a:	d44a      	bmi.n	8020fc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020f2c:	4293      	cmp	r3, r2
 8020f2e:	dd48      	ble.n	8020fc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020f30:	2800      	cmp	r0, #0
 8020f32:	d046      	beq.n	8020fc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020f34:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020f38:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020f3c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020f40:	3701      	adds	r7, #1
 8020f42:	d446      	bmi.n	8020fd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020f44:	45b9      	cmp	r9, r7
 8020f46:	dd44      	ble.n	8020fd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020f48:	9a03      	ldr	r2, [sp, #12]
 8020f4a:	2a00      	cmp	r2, #0
 8020f4c:	d045      	beq.n	8020fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020f4e:	f1bc 0f00 	cmp.w	ip, #0
 8020f52:	db3a      	blt.n	8020fca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020f54:	4563      	cmp	r3, ip
 8020f56:	dd38      	ble.n	8020fca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020f58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020f5c:	f04f 0903 	mov.w	r9, #3
 8020f60:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020f64:	fb03 b209 	mla	r2, r3, r9, fp
 8020f68:	fb03 b909 	mla	r9, r3, r9, fp
 8020f6c:	7852      	ldrb	r2, [r2, #1]
 8020f6e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020f72:	f11c 0c01 	adds.w	ip, ip, #1
 8020f76:	d40d      	bmi.n	8020f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020f78:	4563      	cmp	r3, ip
 8020f7a:	dd0b      	ble.n	8020f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020f7c:	b160      	cbz	r0, 8020f98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020f7e:	2603      	movs	r6, #3
 8020f80:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020f84:	fb03 b506 	mla	r5, r3, r6, fp
 8020f88:	fb03 b306 	mla	r3, r3, r6, fp
 8020f8c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020f90:	792d      	ldrb	r5, [r5, #4]
 8020f92:	795e      	ldrb	r6, [r3, #5]
 8020f94:	280f      	cmp	r0, #15
 8020f96:	d802      	bhi.n	8020f9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020f98:	9b03      	ldr	r3, [sp, #12]
 8020f9a:	2b0f      	cmp	r3, #15
 8020f9c:	d922      	bls.n	8020fe4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020f9e:	4b2f      	ldr	r3, [pc, #188]	; (802105c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020fa0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020fa4:	4a2e      	ldr	r2, [pc, #184]	; (8021060 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020fa6:	482f      	ldr	r0, [pc, #188]	; (8021064 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020fa8:	f003 ff96 	bl	8024ed8 <__assert_func>
 8020fac:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020fb0:	9400      	str	r4, [sp, #0]
 8020fb2:	e7b8      	b.n	8020f26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020fb4:	46b2      	mov	sl, r6
 8020fb6:	46a8      	mov	r8, r5
 8020fb8:	46a6      	mov	lr, r4
 8020fba:	9400      	str	r4, [sp, #0]
 8020fbc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020fc0:	e7be      	b.n	8020f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020fc2:	46b2      	mov	sl, r6
 8020fc4:	46a8      	mov	r8, r5
 8020fc6:	46a6      	mov	lr, r4
 8020fc8:	e7ba      	b.n	8020f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020fca:	46b1      	mov	r9, r6
 8020fcc:	462a      	mov	r2, r5
 8020fce:	4627      	mov	r7, r4
 8020fd0:	e7cf      	b.n	8020f72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020fd2:	46b1      	mov	r9, r6
 8020fd4:	462a      	mov	r2, r5
 8020fd6:	4627      	mov	r7, r4
 8020fd8:	e7dc      	b.n	8020f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020fda:	280f      	cmp	r0, #15
 8020fdc:	d8df      	bhi.n	8020f9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020fde:	46b1      	mov	r9, r6
 8020fe0:	462a      	mov	r2, r5
 8020fe2:	4627      	mov	r7, r4
 8020fe4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020fe8:	b280      	uxth	r0, r0
 8020fea:	fb00 f30b 	mul.w	r3, r0, fp
 8020fee:	0100      	lsls	r0, r0, #4
 8020ff0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020ff4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020ff8:	1ac0      	subs	r0, r0, r3
 8020ffa:	fa1f fb8b 	uxth.w	fp, fp
 8020ffe:	b280      	uxth	r0, r0
 8021000:	ebac 0c0b 	sub.w	ip, ip, fp
 8021004:	9003      	str	r0, [sp, #12]
 8021006:	fa1f fc8c 	uxth.w	ip, ip
 802100a:	fb00 fe0e 	mul.w	lr, r0, lr
 802100e:	9800      	ldr	r0, [sp, #0]
 8021010:	fb0c ee00 	mla	lr, ip, r0, lr
 8021014:	9803      	ldr	r0, [sp, #12]
 8021016:	fb00 f808 	mul.w	r8, r0, r8
 802101a:	9801      	ldr	r0, [sp, #4]
 802101c:	fb0b ee07 	mla	lr, fp, r7, lr
 8021020:	fb0c 8800 	mla	r8, ip, r0, r8
 8021024:	fb03 ee04 	mla	lr, r3, r4, lr
 8021028:	fb0b 8202 	mla	r2, fp, r2, r8
 802102c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021030:	fb03 2505 	mla	r5, r3, r5, r2
 8021034:	9a03      	ldr	r2, [sp, #12]
 8021036:	f881 e000 	strb.w	lr, [r1]
 802103a:	fb02 f00a 	mul.w	r0, r2, sl
 802103e:	9a02      	ldr	r2, [sp, #8]
 8021040:	122d      	asrs	r5, r5, #8
 8021042:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021046:	704d      	strb	r5, [r1, #1]
 8021048:	fb0b c909 	mla	r9, fp, r9, ip
 802104c:	fb03 9606 	mla	r6, r3, r6, r9
 8021050:	1236      	asrs	r6, r6, #8
 8021052:	708e      	strb	r6, [r1, #2]
 8021054:	b005      	add	sp, #20
 8021056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802105a:	bf00      	nop
 802105c:	080299a3 	.word	0x080299a3
 8021060:	08029e9a 	.word	0x08029e9a
 8021064:	08029a6c 	.word	0x08029a6c

08021068 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802106c:	ed2d 8b0a 	vpush	{d8-d12}
 8021070:	b09d      	sub	sp, #116	; 0x74
 8021072:	eeb0 aa40 	vmov.f32	s20, s0
 8021076:	eef0 9a60 	vmov.f32	s19, s1
 802107a:	9306      	str	r3, [sp, #24]
 802107c:	eeb0 9a41 	vmov.f32	s18, s2
 8021080:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021084:	eeb0 8a62 	vmov.f32	s16, s5
 8021088:	901b      	str	r0, [sp, #108]	; 0x6c
 802108a:	eef0 8a43 	vmov.f32	s17, s6
 802108e:	9307      	str	r3, [sp, #28]
 8021090:	eeb0 ca44 	vmov.f32	s24, s8
 8021094:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8021098:	eef0 ba64 	vmov.f32	s23, s9
 802109c:	eeb0 ba45 	vmov.f32	s22, s10
 80210a0:	9309      	str	r3, [sp, #36]	; 0x24
 80210a2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80210a6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80210aa:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80210ac:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80210b0:	6850      	ldr	r0, [r2, #4]
 80210b2:	6812      	ldr	r2, [r2, #0]
 80210b4:	fb00 1303 	mla	r3, r0, r3, r1
 80210b8:	9907      	ldr	r1, [sp, #28]
 80210ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80210be:	18d3      	adds	r3, r2, r3
 80210c0:	2203      	movs	r2, #3
 80210c2:	9308      	str	r3, [sp, #32]
 80210c4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	930a      	str	r3, [sp, #40]	; 0x28
 80210ca:	f06f 0304 	mvn.w	r3, #4
 80210ce:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80210d2:	fb11 3302 	smlabb	r3, r1, r2, r3
 80210d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80210d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210da:	2b00      	cmp	r3, #0
 80210dc:	dc03      	bgt.n	80210e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80210de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210e0:	2b00      	cmp	r3, #0
 80210e2:	f340 8193 	ble.w	802140c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80210e6:	9b06      	ldr	r3, [sp, #24]
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	f340 80d0 	ble.w	802128e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80210ee:	1432      	asrs	r2, r6, #16
 80210f0:	ea4f 4325 	mov.w	r3, r5, asr #16
 80210f4:	d42f      	bmi.n	8021156 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80210f6:	1c51      	adds	r1, r2, #1
 80210f8:	9807      	ldr	r0, [sp, #28]
 80210fa:	4281      	cmp	r1, r0
 80210fc:	da2e      	bge.n	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80210fe:	2b00      	cmp	r3, #0
 8021100:	db2c      	blt.n	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021102:	1c59      	adds	r1, r3, #1
 8021104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021106:	4288      	cmp	r0, r1
 8021108:	dd28      	ble.n	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802110a:	9b06      	ldr	r3, [sp, #24]
 802110c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802110e:	3b01      	subs	r3, #1
 8021110:	fb02 6203 	mla	r2, r2, r3, r6
 8021114:	1412      	asrs	r2, r2, #16
 8021116:	d42c      	bmi.n	8021172 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021118:	3201      	adds	r2, #1
 802111a:	9907      	ldr	r1, [sp, #28]
 802111c:	4291      	cmp	r1, r2
 802111e:	dd28      	ble.n	8021172 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021120:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021122:	fb02 5303 	mla	r3, r2, r3, r5
 8021126:	141b      	asrs	r3, r3, #16
 8021128:	d423      	bmi.n	8021172 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802112a:	3301      	adds	r3, #1
 802112c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802112e:	429a      	cmp	r2, r3
 8021130:	dd1f      	ble.n	8021172 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021132:	9b08      	ldr	r3, [sp, #32]
 8021134:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021138:	f103 0c03 	add.w	ip, r3, #3
 802113c:	f1be 0f00 	cmp.w	lr, #0
 8021140:	f300 80fa 	bgt.w	8021338 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021144:	9b06      	ldr	r3, [sp, #24]
 8021146:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802114a:	9b08      	ldr	r3, [sp, #32]
 802114c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021150:	4423      	add	r3, r4
 8021152:	9308      	str	r3, [sp, #32]
 8021154:	e09d      	b.n	8021292 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021156:	1c51      	adds	r1, r2, #1
 8021158:	f040 808e 	bne.w	8021278 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802115c:	9907      	ldr	r1, [sp, #28]
 802115e:	428a      	cmp	r2, r1
 8021160:	f280 808a 	bge.w	8021278 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021164:	1c5f      	adds	r7, r3, #1
 8021166:	f2c0 8087 	blt.w	8021278 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802116a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802116c:	4293      	cmp	r3, r2
 802116e:	f280 8083 	bge.w	8021278 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021172:	9f06      	ldr	r7, [sp, #24]
 8021174:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021178:	2f00      	cmp	r7, #0
 802117a:	dde3      	ble.n	8021144 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 802117c:	1432      	asrs	r2, r6, #16
 802117e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021182:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021186:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802118a:	f100 80bf 	bmi.w	802130c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 802118e:	1c50      	adds	r0, r2, #1
 8021190:	9c07      	ldr	r4, [sp, #28]
 8021192:	4284      	cmp	r4, r0
 8021194:	f340 80bc 	ble.w	8021310 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021198:	2b00      	cmp	r3, #0
 802119a:	f2c0 80b9 	blt.w	8021310 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802119e:	1c58      	adds	r0, r3, #1
 80211a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80211a2:	4284      	cmp	r4, r0
 80211a4:	f340 80b4 	ble.w	8021310 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80211a8:	9807      	ldr	r0, [sp, #28]
 80211aa:	fb00 2303 	mla	r3, r0, r3, r2
 80211ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80211b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80211b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211b6:	441a      	add	r2, r3
 80211b8:	f810 c003 	ldrb.w	ip, [r0, r3]
 80211bc:	7953      	ldrb	r3, [r2, #5]
 80211be:	7850      	ldrb	r0, [r2, #1]
 80211c0:	f892 e002 	ldrb.w	lr, [r2, #2]
 80211c4:	f892 9003 	ldrb.w	r9, [r2, #3]
 80211c8:	f892 8004 	ldrb.w	r8, [r2, #4]
 80211cc:	930e      	str	r3, [sp, #56]	; 0x38
 80211ce:	f1bb 0f00 	cmp.w	fp, #0
 80211d2:	d00f      	beq.n	80211f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80211d4:	3205      	adds	r2, #5
 80211d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80211d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80211da:	18d3      	adds	r3, r2, r3
 80211dc:	5d12      	ldrb	r2, [r2, r4]
 80211de:	920f      	str	r2, [sp, #60]	; 0x3c
 80211e0:	785a      	ldrb	r2, [r3, #1]
 80211e2:	9211      	str	r2, [sp, #68]	; 0x44
 80211e4:	789a      	ldrb	r2, [r3, #2]
 80211e6:	9213      	str	r2, [sp, #76]	; 0x4c
 80211e8:	78da      	ldrb	r2, [r3, #3]
 80211ea:	9210      	str	r2, [sp, #64]	; 0x40
 80211ec:	791a      	ldrb	r2, [r3, #4]
 80211ee:	795b      	ldrb	r3, [r3, #5]
 80211f0:	9212      	str	r2, [sp, #72]	; 0x48
 80211f2:	9314      	str	r3, [sp, #80]	; 0x50
 80211f4:	b28b      	uxth	r3, r1
 80211f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80211f8:	fa1f f28b 	uxth.w	r2, fp
 80211fc:	fb03 fb02 	mul.w	fp, r3, r2
 8021200:	011b      	lsls	r3, r3, #4
 8021202:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021206:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802120a:	eba3 030b 	sub.w	r3, r3, fp
 802120e:	b292      	uxth	r2, r2
 8021210:	b29b      	uxth	r3, r3
 8021212:	1a89      	subs	r1, r1, r2
 8021214:	fb03 f808 	mul.w	r8, r3, r8
 8021218:	b289      	uxth	r1, r1
 802121a:	fb03 f909 	mul.w	r9, r3, r9
 802121e:	fb01 8800 	mla	r8, r1, r0, r8
 8021222:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021224:	fb01 990c 	mla	r9, r1, ip, r9
 8021228:	fb02 8800 	mla	r8, r2, r0, r8
 802122c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802122e:	fb02 9904 	mla	r9, r2, r4, r9
 8021232:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021234:	fb0b 8800 	mla	r8, fp, r0, r8
 8021238:	980e      	ldr	r0, [sp, #56]	; 0x38
 802123a:	fb0b 9904 	mla	r9, fp, r4, r9
 802123e:	4343      	muls	r3, r0
 8021240:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021244:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021248:	fb01 330e 	mla	r3, r1, lr, r3
 802124c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802124e:	f88a 9000 	strb.w	r9, [sl]
 8021252:	fb02 3201 	mla	r2, r2, r1, r3
 8021256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021258:	f88a 8001 	strb.w	r8, [sl, #1]
 802125c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021260:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021264:	f88a b002 	strb.w	fp, [sl, #2]
 8021268:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802126a:	f10a 0a03 	add.w	sl, sl, #3
 802126e:	3f01      	subs	r7, #1
 8021270:	441e      	add	r6, r3
 8021272:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021274:	441d      	add	r5, r3
 8021276:	e77f      	b.n	8021178 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021278:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802127a:	441e      	add	r6, r3
 802127c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802127e:	441d      	add	r5, r3
 8021280:	9b06      	ldr	r3, [sp, #24]
 8021282:	3b01      	subs	r3, #1
 8021284:	9306      	str	r3, [sp, #24]
 8021286:	9b08      	ldr	r3, [sp, #32]
 8021288:	3303      	adds	r3, #3
 802128a:	9308      	str	r3, [sp, #32]
 802128c:	e72b      	b.n	80210e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802128e:	f47f af3c 	bne.w	802110a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021294:	2b00      	cmp	r3, #0
 8021296:	f340 80b9 	ble.w	802140c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802129a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802129e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80212a0:	ee79 9aab 	vadd.f32	s19, s19, s23
 80212a4:	eef0 6a48 	vmov.f32	s13, s16
 80212a8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80212ac:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80212b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212b4:	ee16 6a90 	vmov	r6, s13
 80212b8:	eef0 6a68 	vmov.f32	s13, s17
 80212bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212c0:	ee16 5a90 	vmov	r5, s13
 80212c4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80212c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80212cc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80212d0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80212d4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80212d8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80212dc:	ee18 2a10 	vmov	r2, s16
 80212e0:	eeb0 8a47 	vmov.f32	s16, s14
 80212e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80212e8:	ee18 2a90 	vmov	r2, s17
 80212ec:	9333      	str	r3, [sp, #204]	; 0xcc
 80212ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80212f0:	eef0 8a67 	vmov.f32	s17, s15
 80212f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80212f8:	9334      	str	r3, [sp, #208]	; 0xd0
 80212fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80212fe:	3b01      	subs	r3, #1
 8021300:	930c      	str	r3, [sp, #48]	; 0x30
 8021302:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021304:	bf08      	it	eq
 8021306:	4613      	moveq	r3, r2
 8021308:	9306      	str	r3, [sp, #24]
 802130a:	e6e5      	b.n	80210d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802130c:	1c54      	adds	r4, r2, #1
 802130e:	d1ab      	bne.n	8021268 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021310:	9807      	ldr	r0, [sp, #28]
 8021312:	4282      	cmp	r2, r0
 8021314:	daa8      	bge.n	8021268 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021316:	1c58      	adds	r0, r3, #1
 8021318:	dba6      	blt.n	8021268 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802131a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802131c:	4298      	cmp	r0, r3
 802131e:	dda3      	ble.n	8021268 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021320:	9000      	str	r0, [sp, #0]
 8021322:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021324:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021328:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 802132c:	9b07      	ldr	r3, [sp, #28]
 802132e:	4651      	mov	r1, sl
 8021330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021332:	f7ff fdd1 	bl	8020ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021336:	e797      	b.n	8021268 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021338:	1431      	asrs	r1, r6, #16
 802133a:	9c07      	ldr	r4, [sp, #28]
 802133c:	1428      	asrs	r0, r5, #16
 802133e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021342:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021346:	fb04 1000 	mla	r0, r4, r0, r1
 802134a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802134c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802134e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021352:	4401      	add	r1, r0
 8021354:	5c20      	ldrb	r0, [r4, r0]
 8021356:	f891 8002 	ldrb.w	r8, [r1, #2]
 802135a:	900e      	str	r0, [sp, #56]	; 0x38
 802135c:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021360:	7848      	ldrb	r0, [r1, #1]
 8021362:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021366:	f891 b005 	ldrb.w	fp, [r1, #5]
 802136a:	b172      	cbz	r2, 802138a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 802136c:	3105      	adds	r1, #5
 802136e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021370:	190f      	adds	r7, r1, r4
 8021372:	5d09      	ldrb	r1, [r1, r4]
 8021374:	9115      	str	r1, [sp, #84]	; 0x54
 8021376:	7879      	ldrb	r1, [r7, #1]
 8021378:	9117      	str	r1, [sp, #92]	; 0x5c
 802137a:	78b9      	ldrb	r1, [r7, #2]
 802137c:	9119      	str	r1, [sp, #100]	; 0x64
 802137e:	78f9      	ldrb	r1, [r7, #3]
 8021380:	9116      	str	r1, [sp, #88]	; 0x58
 8021382:	7939      	ldrb	r1, [r7, #4]
 8021384:	9118      	str	r1, [sp, #96]	; 0x60
 8021386:	7979      	ldrb	r1, [r7, #5]
 8021388:	911a      	str	r1, [sp, #104]	; 0x68
 802138a:	b29b      	uxth	r3, r3
 802138c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802138e:	b292      	uxth	r2, r2
 8021390:	f10c 0c03 	add.w	ip, ip, #3
 8021394:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021398:	fb03 f102 	mul.w	r1, r3, r2
 802139c:	011b      	lsls	r3, r3, #4
 802139e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 80213a2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80213a6:	1a5b      	subs	r3, r3, r1
 80213a8:	b292      	uxth	r2, r2
 80213aa:	b29b      	uxth	r3, r3
 80213ac:	1abf      	subs	r7, r7, r2
 80213ae:	fb03 f909 	mul.w	r9, r3, r9
 80213b2:	b2bf      	uxth	r7, r7
 80213b4:	fb03 fa0a 	mul.w	sl, r3, sl
 80213b8:	fb03 f30b 	mul.w	r3, r3, fp
 80213bc:	fb07 9900 	mla	r9, r7, r0, r9
 80213c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80213c2:	fb07 aa04 	mla	sl, r7, r4, sl
 80213c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80213c8:	fb02 9900 	mla	r9, r2, r0, r9
 80213cc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80213ce:	fb07 3308 	mla	r3, r7, r8, r3
 80213d2:	fb01 9900 	mla	r9, r1, r0, r9
 80213d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80213d8:	fb02 aa04 	mla	sl, r2, r4, sl
 80213dc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80213de:	fb02 3200 	mla	r2, r2, r0, r3
 80213e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80213e4:	fb01 aa04 	mla	sl, r1, r4, sl
 80213e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213ec:	fb01 2103 	mla	r1, r1, r3, r2
 80213f0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80213f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80213f6:	f80c 9c05 	strb.w	r9, [ip, #-5]
 80213fa:	1209      	asrs	r1, r1, #8
 80213fc:	441e      	add	r6, r3
 80213fe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021400:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021404:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021408:	441d      	add	r5, r3
 802140a:	e697      	b.n	802113c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802140c:	b01d      	add	sp, #116	; 0x74
 802140e:	ecbd 8b0a 	vpop	{d8-d12}
 8021412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021418 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802141c:	b085      	sub	sp, #20
 802141e:	7888      	ldrb	r0, [r1, #2]
 8021420:	4691      	mov	r9, r2
 8021422:	9000      	str	r0, [sp, #0]
 8021424:	7848      	ldrb	r0, [r1, #1]
 8021426:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802142a:	9001      	str	r0, [sp, #4]
 802142c:	7808      	ldrb	r0, [r1, #0]
 802142e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021432:	9002      	str	r0, [sp, #8]
 8021434:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021438:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802143c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021440:	fb04 c603 	mla	r6, r4, r3, ip
 8021444:	2c00      	cmp	r4, #0
 8021446:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802144a:	9a00      	ldr	r2, [sp, #0]
 802144c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021450:	9a01      	ldr	r2, [sp, #4]
 8021452:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021456:	db3a      	blt.n	80214ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021458:	45a0      	cmp	r8, r4
 802145a:	dd38      	ble.n	80214ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 802145c:	f1bc 0f00 	cmp.w	ip, #0
 8021460:	db33      	blt.n	80214ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021462:	4563      	cmp	r3, ip
 8021464:	dd31      	ble.n	80214ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021466:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802146a:	f11c 0601 	adds.w	r6, ip, #1
 802146e:	d431      	bmi.n	80214d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021470:	42b3      	cmp	r3, r6
 8021472:	dd2f      	ble.n	80214d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021474:	b375      	cbz	r5, 80214d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021476:	f8de 6004 	ldr.w	r6, [lr, #4]
 802147a:	3401      	adds	r4, #1
 802147c:	d42e      	bmi.n	80214dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802147e:	45a0      	cmp	r8, r4
 8021480:	dd2c      	ble.n	80214dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021482:	b35f      	cbz	r7, 80214dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021484:	f1bc 0f00 	cmp.w	ip, #0
 8021488:	db26      	blt.n	80214d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802148a:	4563      	cmp	r3, ip
 802148c:	dd24      	ble.n	80214d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802148e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021492:	f11c 0c01 	adds.w	ip, ip, #1
 8021496:	d405      	bmi.n	80214a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021498:	4563      	cmp	r3, ip
 802149a:	dd03      	ble.n	80214a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802149c:	b115      	cbz	r5, 80214a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802149e:	3301      	adds	r3, #1
 80214a0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80214a4:	2d0f      	cmp	r5, #15
 80214a6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80214aa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80214ae:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80214b2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80214b6:	d801      	bhi.n	80214bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 80214b8:	2f0f      	cmp	r7, #15
 80214ba:	d911      	bls.n	80214e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80214bc:	4b80      	ldr	r3, [pc, #512]	; (80216c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80214be:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80214c2:	4a80      	ldr	r2, [pc, #512]	; (80216c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80214c4:	4880      	ldr	r0, [pc, #512]	; (80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80214c6:	f003 fd07 	bl	8024ed8 <__assert_func>
 80214ca:	4602      	mov	r2, r0
 80214cc:	e7cd      	b.n	802146a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80214ce:	4606      	mov	r6, r0
 80214d0:	4602      	mov	r2, r0
 80214d2:	e7d2      	b.n	802147a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80214d4:	4606      	mov	r6, r0
 80214d6:	e7d0      	b.n	802147a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80214d8:	4604      	mov	r4, r0
 80214da:	e7da      	b.n	8021492 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80214dc:	4604      	mov	r4, r0
 80214de:	e7e1      	b.n	80214a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80214e0:	b2ab      	uxth	r3, r5
 80214e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80214e6:	b2bf      	uxth	r7, r7
 80214e8:	fb03 fe07 	mul.w	lr, r3, r7
 80214ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80214f0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80214f4:	eba3 0c0e 	sub.w	ip, r3, lr
 80214f8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80214fc:	b2bf      	uxth	r7, r7
 80214fe:	fa1f fc8c 	uxth.w	ip, ip
 8021502:	eba5 0507 	sub.w	r5, r5, r7
 8021506:	fb0c f30a 	mul.w	r3, ip, sl
 802150a:	b2ad      	uxth	r5, r5
 802150c:	fb05 330b 	mla	r3, r5, fp, r3
 8021510:	fb07 3309 	mla	r3, r7, r9, r3
 8021514:	fb0e 3308 	mla	r3, lr, r8, r3
 8021518:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802151c:	9303      	str	r3, [sp, #12]
 802151e:	d018      	beq.n	8021552 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021520:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021524:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021528:	fb0b f303 	mul.w	r3, fp, r3
 802152c:	fb0b fb02 	mul.w	fp, fp, r2
 8021530:	0a1a      	lsrs	r2, r3, #8
 8021532:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021536:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802153a:	441a      	add	r2, r3
 802153c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021540:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021544:	0a12      	lsrs	r2, r2, #8
 8021546:	0a1b      	lsrs	r3, r3, #8
 8021548:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802154c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021550:	431a      	orrs	r2, r3
 8021552:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021556:	d019      	beq.n	802158c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021558:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802155c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021560:	fb0a fb0b 	mul.w	fp, sl, fp
 8021564:	fb0a fa06 	mul.w	sl, sl, r6
 8021568:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802156c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021570:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021574:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021578:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802157c:	445e      	add	r6, fp
 802157e:	0a1b      	lsrs	r3, r3, #8
 8021580:	0a36      	lsrs	r6, r6, #8
 8021582:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021586:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802158a:	431e      	orrs	r6, r3
 802158c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021590:	d019      	beq.n	80215c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021592:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021596:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802159a:	fb09 fa0a 	mul.w	sl, r9, sl
 802159e:	fb09 f904 	mul.w	r9, r9, r4
 80215a2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80215a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80215aa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80215ae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80215b2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80215b6:	4454      	add	r4, sl
 80215b8:	0a1b      	lsrs	r3, r3, #8
 80215ba:	0a24      	lsrs	r4, r4, #8
 80215bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215c0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80215c4:	431c      	orrs	r4, r3
 80215c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80215ca:	d019      	beq.n	8021600 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80215cc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80215d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80215d4:	fb08 f909 	mul.w	r9, r8, r9
 80215d8:	fb08 f800 	mul.w	r8, r8, r0
 80215dc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80215e0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80215e4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80215e8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80215ec:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80215f0:	4448      	add	r0, r9
 80215f2:	0a1b      	lsrs	r3, r3, #8
 80215f4:	0a00      	lsrs	r0, r0, #8
 80215f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80215fe:	4318      	orrs	r0, r3
 8021600:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021604:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021608:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802160c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021610:	fb0c f808 	mul.w	r8, ip, r8
 8021614:	fb0c f606 	mul.w	r6, ip, r6
 8021618:	fb05 8803 	mla	r8, r5, r3, r8
 802161c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021620:	fb05 6202 	mla	r2, r5, r2, r6
 8021624:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021628:	fb07 8803 	mla	r8, r7, r3, r8
 802162c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021630:	fb07 2704 	mla	r7, r7, r4, r2
 8021634:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021638:	fb0e 8303 	mla	r3, lr, r3, r8
 802163c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021640:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021644:	9803      	ldr	r0, [sp, #12]
 8021646:	b292      	uxth	r2, r2
 8021648:	9c02      	ldr	r4, [sp, #8]
 802164a:	0a1b      	lsrs	r3, r3, #8
 802164c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021650:	4350      	muls	r0, r2
 8021652:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021656:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802165a:	ea43 0e0e 	orr.w	lr, r3, lr
 802165e:	1c43      	adds	r3, r0, #1
 8021660:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021664:	fa5f f08e 	uxtb.w	r0, lr
 8021668:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802166c:	b2db      	uxtb	r3, r3
 802166e:	fb14 f403 	smulbb	r4, r4, r3
 8021672:	fb00 4002 	mla	r0, r0, r2, r4
 8021676:	b280      	uxth	r0, r0
 8021678:	1c44      	adds	r4, r0, #1
 802167a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802167e:	9c01      	ldr	r4, [sp, #4]
 8021680:	fb14 f403 	smulbb	r4, r4, r3
 8021684:	1200      	asrs	r0, r0, #8
 8021686:	7008      	strb	r0, [r1, #0]
 8021688:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802168c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021690:	fb00 4002 	mla	r0, r0, r2, r4
 8021694:	b280      	uxth	r0, r0
 8021696:	1c44      	adds	r4, r0, #1
 8021698:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802169c:	1200      	asrs	r0, r0, #8
 802169e:	7048      	strb	r0, [r1, #1]
 80216a0:	9800      	ldr	r0, [sp, #0]
 80216a2:	fb10 f303 	smulbb	r3, r0, r3
 80216a6:	fb0e 3202 	mla	r2, lr, r2, r3
 80216aa:	b292      	uxth	r2, r2
 80216ac:	f102 0e01 	add.w	lr, r2, #1
 80216b0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80216b4:	1212      	asrs	r2, r2, #8
 80216b6:	708a      	strb	r2, [r1, #2]
 80216b8:	b005      	add	sp, #20
 80216ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216be:	bf00      	nop
 80216c0:	080299a3 	.word	0x080299a3
 80216c4:	08029e9a 	.word	0x08029e9a
 80216c8:	08029a6c 	.word	0x08029a6c

080216cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80216cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216d0:	ed2d 8b08 	vpush	{d8-d11}
 80216d4:	b099      	sub	sp, #100	; 0x64
 80216d6:	eeb0 aa40 	vmov.f32	s20, s0
 80216da:	eef0 9a60 	vmov.f32	s19, s1
 80216de:	9306      	str	r3, [sp, #24]
 80216e0:	eeb0 9a41 	vmov.f32	s18, s2
 80216e4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80216e8:	eeb0 8a62 	vmov.f32	s16, s5
 80216ec:	9216      	str	r2, [sp, #88]	; 0x58
 80216ee:	eef0 8a43 	vmov.f32	s17, s6
 80216f2:	9307      	str	r3, [sp, #28]
 80216f4:	eef0 ba44 	vmov.f32	s23, s8
 80216f8:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 80216fc:	eeb0 ba64 	vmov.f32	s22, s9
 8021700:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021702:	eef0 aa45 	vmov.f32	s21, s10
 8021706:	9310      	str	r3, [sp, #64]	; 0x40
 8021708:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802170c:	9017      	str	r0, [sp, #92]	; 0x5c
 802170e:	9112      	str	r1, [sp, #72]	; 0x48
 8021710:	6850      	ldr	r0, [r2, #4]
 8021712:	9315      	str	r3, [sp, #84]	; 0x54
 8021714:	6812      	ldr	r2, [r2, #0]
 8021716:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021718:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802171c:	fb00 1303 	mla	r3, r0, r3, r1
 8021720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021724:	18d3      	adds	r3, r2, r3
 8021726:	930a      	str	r3, [sp, #40]	; 0x28
 8021728:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	9311      	str	r3, [sp, #68]	; 0x44
 802172e:	9b07      	ldr	r3, [sp, #28]
 8021730:	009b      	lsls	r3, r3, #2
 8021732:	930e      	str	r3, [sp, #56]	; 0x38
 8021734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021736:	2b00      	cmp	r3, #0
 8021738:	dc03      	bgt.n	8021742 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802173a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802173c:	2b00      	cmp	r3, #0
 802173e:	f340 833b 	ble.w	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021742:	9b06      	ldr	r3, [sp, #24]
 8021744:	2b00      	cmp	r3, #0
 8021746:	f340 8197 	ble.w	8021a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802174a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802174c:	1423      	asrs	r3, r4, #16
 802174e:	1412      	asrs	r2, r2, #16
 8021750:	d432      	bmi.n	80217b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8021752:	1c51      	adds	r1, r2, #1
 8021754:	9807      	ldr	r0, [sp, #28]
 8021756:	4288      	cmp	r0, r1
 8021758:	dd31      	ble.n	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802175a:	2b00      	cmp	r3, #0
 802175c:	db2f      	blt.n	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802175e:	1c59      	adds	r1, r3, #1
 8021760:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021762:	4288      	cmp	r0, r1
 8021764:	dd2b      	ble.n	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021766:	9b06      	ldr	r3, [sp, #24]
 8021768:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802176a:	3b01      	subs	r3, #1
 802176c:	992b      	ldr	r1, [sp, #172]	; 0xac
 802176e:	fb02 1203 	mla	r2, r2, r3, r1
 8021772:	1412      	asrs	r2, r2, #16
 8021774:	d42e      	bmi.n	80217d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021776:	3201      	adds	r2, #1
 8021778:	9907      	ldr	r1, [sp, #28]
 802177a:	4291      	cmp	r1, r2
 802177c:	dd2a      	ble.n	80217d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802177e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021780:	fb02 4303 	mla	r3, r2, r3, r4
 8021784:	141b      	asrs	r3, r3, #16
 8021786:	d425      	bmi.n	80217d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021788:	3301      	adds	r3, #1
 802178a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802178c:	429a      	cmp	r2, r3
 802178e:	dd21      	ble.n	80217d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021792:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021796:	f103 0e03 	add.w	lr, r3, #3
 802179a:	9b06      	ldr	r3, [sp, #24]
 802179c:	9313      	str	r3, [sp, #76]	; 0x4c
 802179e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	f300 81d2 	bgt.w	8021b4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80217a6:	9b06      	ldr	r3, [sp, #24]
 80217a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80217ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217b2:	4423      	add	r3, r4
 80217b4:	930a      	str	r3, [sp, #40]	; 0x28
 80217b6:	e161      	b.n	8021a7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80217b8:	1c51      	adds	r1, r2, #1
 80217ba:	f040 8150 	bne.w	8021a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80217be:	9907      	ldr	r1, [sp, #28]
 80217c0:	428a      	cmp	r2, r1
 80217c2:	f280 814c 	bge.w	8021a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80217c6:	1c5a      	adds	r2, r3, #1
 80217c8:	f2c0 8149 	blt.w	8021a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80217cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217ce:	4293      	cmp	r3, r2
 80217d0:	f280 8145 	bge.w	8021a5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80217d4:	9b06      	ldr	r3, [sp, #24]
 80217d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80217d8:	9314      	str	r3, [sp, #80]	; 0x50
 80217da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80217de:	9313      	str	r3, [sp, #76]	; 0x4c
 80217e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	dddf      	ble.n	80217a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80217e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80217e8:	1423      	asrs	r3, r4, #16
 80217ea:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80217ee:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80217f2:	1412      	asrs	r2, r2, #16
 80217f4:	f100 8190 	bmi.w	8021b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80217f8:	1c55      	adds	r5, r2, #1
 80217fa:	9f07      	ldr	r7, [sp, #28]
 80217fc:	42af      	cmp	r7, r5
 80217fe:	f340 818d 	ble.w	8021b1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021802:	2b00      	cmp	r3, #0
 8021804:	f2c0 818a 	blt.w	8021b1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021808:	1c5d      	adds	r5, r3, #1
 802180a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802180c:	42af      	cmp	r7, r5
 802180e:	f340 8185 	ble.w	8021b1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021812:	9d07      	ldr	r5, [sp, #28]
 8021814:	fb03 2305 	mla	r3, r3, r5, r2
 8021818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802181a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021822:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021826:	2800      	cmp	r0, #0
 8021828:	f000 8167 	beq.w	8021afa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802182c:	686a      	ldr	r2, [r5, #4]
 802182e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021830:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021834:	2900      	cmp	r1, #0
 8021836:	f000 8169 	beq.w	8021b0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802183a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802183c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802183e:	18aa      	adds	r2, r5, r2
 8021840:	59ed      	ldr	r5, [r5, r7]
 8021842:	6852      	ldr	r2, [r2, #4]
 8021844:	9508      	str	r5, [sp, #32]
 8021846:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802184a:	0e15      	lsrs	r5, r2, #24
 802184c:	920c      	str	r2, [sp, #48]	; 0x30
 802184e:	b280      	uxth	r0, r0
 8021850:	b289      	uxth	r1, r1
 8021852:	fb00 fb01 	mul.w	fp, r0, r1
 8021856:	0100      	lsls	r0, r0, #4
 8021858:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802185c:	eba0 090b 	sub.w	r9, r0, fp
 8021860:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8021864:	b289      	uxth	r1, r1
 8021866:	fa1f f989 	uxth.w	r9, r9
 802186a:	1a52      	subs	r2, r2, r1
 802186c:	fb09 f008 	mul.w	r0, r9, r8
 8021870:	b292      	uxth	r2, r2
 8021872:	fb02 000c 	mla	r0, r2, ip, r0
 8021876:	fb01 000a 	mla	r0, r1, sl, r0
 802187a:	fb0b 0005 	mla	r0, fp, r5, r0
 802187e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021882:	2800      	cmp	r0, #0
 8021884:	f000 80e0 	beq.w	8021a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021888:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802188c:	d01b      	beq.n	80218c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 802188e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021896:	fb0c fe0e 	mul.w	lr, ip, lr
 802189a:	fb0c fc03 	mul.w	ip, ip, r3
 802189e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80218a2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80218a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218aa:	4473      	add	r3, lr
 80218ac:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80218b0:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80218b4:	0a1b      	lsrs	r3, r3, #8
 80218b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80218ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80218c2:	ea43 030e 	orr.w	r3, r3, lr
 80218c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80218ca:	d01e      	beq.n	802190a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80218cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80218ce:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80218d2:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80218d6:	fb08 fc0c 	mul.w	ip, r8, ip
 80218da:	fb08 f80e 	mul.w	r8, r8, lr
 80218de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80218e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80218e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80218ea:	44e6      	add	lr, ip
 80218ec:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80218f0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80218f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80218f8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80218fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021900:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021904:	ea4e 0708 	orr.w	r7, lr, r8
 8021908:	970b      	str	r7, [sp, #44]	; 0x2c
 802190a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802190e:	d01e      	beq.n	802194e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021910:	9f08      	ldr	r7, [sp, #32]
 8021912:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021916:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802191a:	fb0a f808 	mul.w	r8, sl, r8
 802191e:	fb0a fa0c 	mul.w	sl, sl, ip
 8021922:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021926:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802192a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802192e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021932:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021936:	44c6      	add	lr, r8
 8021938:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802193c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021940:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021944:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021948:	ea4e 070a 	orr.w	r7, lr, sl
 802194c:	9708      	str	r7, [sp, #32]
 802194e:	2dff      	cmp	r5, #255	; 0xff
 8021950:	d01d      	beq.n	802198e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8021952:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021954:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021958:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802195c:	fb05 f808 	mul.w	r8, r5, r8
 8021960:	fb05 f50c 	mul.w	r5, r5, ip
 8021964:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021968:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802196c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021970:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021974:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021978:	44c6      	add	lr, r8
 802197a:	0a2d      	lsrs	r5, r5, #8
 802197c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021980:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021984:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021988:	ea4e 0505 	orr.w	r5, lr, r5
 802198c:	950c      	str	r5, [sp, #48]	; 0x30
 802198e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021990:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021994:	9f08      	ldr	r7, [sp, #32]
 8021996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802199a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802199e:	fb09 f505 	mul.w	r5, r9, r5
 80219a2:	fb02 550c 	mla	r5, r2, ip, r5
 80219a6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80219aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80219ac:	fb01 550c 	mla	r5, r1, ip, r5
 80219b0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80219b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80219b6:	fb0b 550c 	mla	r5, fp, ip, r5
 80219ba:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80219be:	fb09 f90c 	mul.w	r9, r9, ip
 80219c2:	0a2d      	lsrs	r5, r5, #8
 80219c4:	fb02 9303 	mla	r3, r2, r3, r9
 80219c8:	9a08      	ldr	r2, [sp, #32]
 80219ca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80219ce:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80219d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80219d4:	fb01 330e 	mla	r3, r1, lr, r3
 80219d8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80219dc:	fb0b 3b01 	mla	fp, fp, r1, r3
 80219e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80219e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80219e4:	4343      	muls	r3, r0
 80219e6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80219ea:	1c58      	adds	r0, r3, #1
 80219ec:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80219f0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80219f4:	ea45 050b 	orr.w	r5, r5, fp
 80219f8:	7833      	ldrb	r3, [r6, #0]
 80219fa:	b2ea      	uxtb	r2, r5
 80219fc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021a00:	fb12 f201 	smulbb	r2, r2, r1
 8021a04:	b2c0      	uxtb	r0, r0
 8021a06:	fb03 2300 	mla	r3, r3, r0, r2
 8021a0a:	b29b      	uxth	r3, r3
 8021a0c:	1c5a      	adds	r2, r3, #1
 8021a0e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a12:	7872      	ldrb	r2, [r6, #1]
 8021a14:	fb12 f200 	smulbb	r2, r2, r0
 8021a18:	121b      	asrs	r3, r3, #8
 8021a1a:	7033      	strb	r3, [r6, #0]
 8021a1c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021a20:	0c2d      	lsrs	r5, r5, #16
 8021a22:	fb03 2301 	mla	r3, r3, r1, r2
 8021a26:	b29b      	uxth	r3, r3
 8021a28:	1c5a      	adds	r2, r3, #1
 8021a2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a2e:	121b      	asrs	r3, r3, #8
 8021a30:	7073      	strb	r3, [r6, #1]
 8021a32:	78b3      	ldrb	r3, [r6, #2]
 8021a34:	fb13 f000 	smulbb	r0, r3, r0
 8021a38:	fb05 0501 	mla	r5, r5, r1, r0
 8021a3c:	b2ad      	uxth	r5, r5
 8021a3e:	1c6b      	adds	r3, r5, #1
 8021a40:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021a44:	122d      	asrs	r5, r5, #8
 8021a46:	70b5      	strb	r5, [r6, #2]
 8021a48:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021a4a:	3603      	adds	r6, #3
 8021a4c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021a4e:	4413      	add	r3, r2
 8021a50:	932b      	str	r3, [sp, #172]	; 0xac
 8021a52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021a54:	441c      	add	r4, r3
 8021a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021a58:	3b01      	subs	r3, #1
 8021a5a:	9314      	str	r3, [sp, #80]	; 0x50
 8021a5c:	e6c0      	b.n	80217e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021a5e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021a60:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021a62:	4413      	add	r3, r2
 8021a64:	932b      	str	r3, [sp, #172]	; 0xac
 8021a66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021a68:	441c      	add	r4, r3
 8021a6a:	9b06      	ldr	r3, [sp, #24]
 8021a6c:	3b01      	subs	r3, #1
 8021a6e:	9306      	str	r3, [sp, #24]
 8021a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a72:	3303      	adds	r3, #3
 8021a74:	930a      	str	r3, [sp, #40]	; 0x28
 8021a76:	e664      	b.n	8021742 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021a78:	f47f ae75 	bne.w	8021766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8021a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	f340 819a 	ble.w	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021a88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021a8a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021a8e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021a92:	eef0 6a48 	vmov.f32	s13, s16
 8021a96:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021a9a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021a9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021aa2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8021aa6:	eef0 6a68 	vmov.f32	s13, s17
 8021aaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021aae:	ee16 4a90 	vmov	r4, s13
 8021ab2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021ab6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021aba:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021abe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021ac2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021ac6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021aca:	ee18 2a10 	vmov	r2, s16
 8021ace:	eeb0 8a47 	vmov.f32	s16, s14
 8021ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ad6:	ee18 2a90 	vmov	r2, s17
 8021ada:	932d      	str	r3, [sp, #180]	; 0xb4
 8021adc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021ade:	eef0 8a67 	vmov.f32	s17, s15
 8021ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ae6:	932e      	str	r3, [sp, #184]	; 0xb8
 8021ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021aea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021aec:	3b01      	subs	r3, #1
 8021aee:	9312      	str	r3, [sp, #72]	; 0x48
 8021af0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021af2:	bf08      	it	eq
 8021af4:	4613      	moveq	r3, r2
 8021af6:	9306      	str	r3, [sp, #24]
 8021af8:	e61c      	b.n	8021734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021afa:	b151      	cbz	r1, 8021b12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021afe:	58aa      	ldr	r2, [r5, r2]
 8021b00:	25ff      	movs	r5, #255	; 0xff
 8021b02:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8021b06:	9208      	str	r2, [sp, #32]
 8021b08:	46a8      	mov	r8, r5
 8021b0a:	e6a0      	b.n	802184e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021b0c:	25ff      	movs	r5, #255	; 0xff
 8021b0e:	46aa      	mov	sl, r5
 8021b10:	e69d      	b.n	802184e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021b12:	25ff      	movs	r5, #255	; 0xff
 8021b14:	46aa      	mov	sl, r5
 8021b16:	e7f7      	b.n	8021b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8021b18:	1c57      	adds	r7, r2, #1
 8021b1a:	d195      	bne.n	8021a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021b1c:	9d07      	ldr	r5, [sp, #28]
 8021b1e:	4295      	cmp	r5, r2
 8021b20:	dd92      	ble.n	8021a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021b22:	1c5d      	adds	r5, r3, #1
 8021b24:	db90      	blt.n	8021a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021b26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021b28:	429d      	cmp	r5, r3
 8021b2a:	dd8d      	ble.n	8021a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021b2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021b2e:	9201      	str	r2, [sp, #4]
 8021b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021b32:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8021b36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b38:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021b3a:	9300      	str	r3, [sp, #0]
 8021b3c:	9b07      	ldr	r3, [sp, #28]
 8021b3e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8021b42:	4631      	mov	r1, r6
 8021b44:	f7ff fc68 	bl	8021418 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021b48:	e77e      	b.n	8021a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021b4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021b4c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021b50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021b52:	9d07      	ldr	r5, [sp, #28]
 8021b54:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021b58:	1412      	asrs	r2, r2, #16
 8021b5a:	1423      	asrs	r3, r4, #16
 8021b5c:	fb05 2303 	mla	r3, r5, r3, r2
 8021b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021b62:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b6a:	0e1e      	lsrs	r6, r3, #24
 8021b6c:	2900      	cmp	r1, #0
 8021b6e:	f000 8114 	beq.w	8021d9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8021b72:	686a      	ldr	r2, [r5, #4]
 8021b74:	920d      	str	r2, [sp, #52]	; 0x34
 8021b76:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8021b7a:	2800      	cmp	r0, #0
 8021b7c:	f000 8116 	beq.w	8021dac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8021b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021b84:	18aa      	adds	r2, r5, r2
 8021b86:	59ed      	ldr	r5, [r5, r7]
 8021b88:	6852      	ldr	r2, [r2, #4]
 8021b8a:	9509      	str	r5, [sp, #36]	; 0x24
 8021b8c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021b90:	0e15      	lsrs	r5, r2, #24
 8021b92:	920f      	str	r2, [sp, #60]	; 0x3c
 8021b94:	b289      	uxth	r1, r1
 8021b96:	b280      	uxth	r0, r0
 8021b98:	fb01 fa00 	mul.w	sl, r1, r0
 8021b9c:	0109      	lsls	r1, r1, #4
 8021b9e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021ba2:	eba1 080a 	sub.w	r8, r1, sl
 8021ba6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021baa:	b280      	uxth	r0, r0
 8021bac:	fa1f f888 	uxth.w	r8, r8
 8021bb0:	1a12      	subs	r2, r2, r0
 8021bb2:	fb08 f10c 	mul.w	r1, r8, ip
 8021bb6:	b292      	uxth	r2, r2
 8021bb8:	fb02 1106 	mla	r1, r2, r6, r1
 8021bbc:	fb00 1109 	mla	r1, r0, r9, r1
 8021bc0:	fb0a 1105 	mla	r1, sl, r5, r1
 8021bc4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021bc8:	2900      	cmp	r1, #0
 8021bca:	f000 80da 	beq.w	8021d82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021bce:	2eff      	cmp	r6, #255	; 0xff
 8021bd0:	d016      	beq.n	8021c00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8021bd2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021bda:	4377      	muls	r7, r6
 8021bdc:	435e      	muls	r6, r3
 8021bde:	0a3b      	lsrs	r3, r7, #8
 8021be0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021be4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021be8:	443b      	add	r3, r7
 8021bea:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021bee:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021bf2:	0a1b      	lsrs	r3, r3, #8
 8021bf4:	0a3f      	lsrs	r7, r7, #8
 8021bf6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021bfa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021bfe:	433b      	orrs	r3, r7
 8021c00:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021c04:	d01d      	beq.n	8021c42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8021c06:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021c08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021c0a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c0e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021c12:	fb0c f606 	mul.w	r6, ip, r6
 8021c16:	fb0c fc07 	mul.w	ip, ip, r7
 8021c1a:	0a37      	lsrs	r7, r6, #8
 8021c1c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021c20:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021c24:	4437      	add	r7, r6
 8021c26:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021c2a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021c2e:	0a3f      	lsrs	r7, r7, #8
 8021c30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021c38:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021c3c:	ea47 060c 	orr.w	r6, r7, ip
 8021c40:	960d      	str	r6, [sp, #52]	; 0x34
 8021c42:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c46:	d01d      	beq.n	8021c84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8021c48:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021c4a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021c4e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c52:	fb09 fc0c 	mul.w	ip, r9, ip
 8021c56:	fb09 f906 	mul.w	r9, r9, r6
 8021c5a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021c5e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021c62:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8021c66:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021c6a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8021c6e:	4467      	add	r7, ip
 8021c70:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c74:	0a3f      	lsrs	r7, r7, #8
 8021c76:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021c7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021c7e:	ea47 0609 	orr.w	r6, r7, r9
 8021c82:	9609      	str	r6, [sp, #36]	; 0x24
 8021c84:	2dff      	cmp	r5, #255	; 0xff
 8021c86:	d01a      	beq.n	8021cbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8021c88:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021c8a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021c8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c92:	fb05 fc0c 	mul.w	ip, r5, ip
 8021c96:	4375      	muls	r5, r6
 8021c98:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021c9c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021ca0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021ca4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021ca8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021cac:	4467      	add	r7, ip
 8021cae:	0a2d      	lsrs	r5, r5, #8
 8021cb0:	0a3f      	lsrs	r7, r7, #8
 8021cb2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021cb6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021cba:	433d      	orrs	r5, r7
 8021cbc:	950f      	str	r5, [sp, #60]	; 0x3c
 8021cbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021cc0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cc8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021ccc:	fb08 f505 	mul.w	r5, r8, r5
 8021cd0:	fb02 5506 	mla	r5, r2, r6, r5
 8021cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021cd6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021cda:	fb00 5506 	mla	r5, r0, r6, r5
 8021cde:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021ce0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021ce4:	fb0a 5506 	mla	r5, sl, r6, r5
 8021ce8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021cea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021cee:	0a2d      	lsrs	r5, r5, #8
 8021cf0:	fb08 f806 	mul.w	r8, r8, r6
 8021cf4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021cf8:	fb02 8303 	mla	r3, r2, r3, r8
 8021cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021cfe:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021d02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021d04:	fb00 3307 	mla	r3, r0, r7, r3
 8021d08:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021d0c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021d10:	fb01 f30b 	mul.w	r3, r1, fp
 8021d14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d18:	1c59      	adds	r1, r3, #1
 8021d1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021d1e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021d22:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021d26:	ea45 050c 	orr.w	r5, r5, ip
 8021d2a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021d2e:	b2ea      	uxtb	r2, r5
 8021d30:	b2c9      	uxtb	r1, r1
 8021d32:	fb12 f20b 	smulbb	r2, r2, fp
 8021d36:	fb03 2301 	mla	r3, r3, r1, r2
 8021d3a:	b29b      	uxth	r3, r3
 8021d3c:	1c5a      	adds	r2, r3, #1
 8021d3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021d42:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021d46:	fb12 f201 	smulbb	r2, r2, r1
 8021d4a:	121b      	asrs	r3, r3, #8
 8021d4c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021d50:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021d54:	0c2d      	lsrs	r5, r5, #16
 8021d56:	fb03 230b 	mla	r3, r3, fp, r2
 8021d5a:	b29b      	uxth	r3, r3
 8021d5c:	1c5a      	adds	r2, r3, #1
 8021d5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021d62:	121b      	asrs	r3, r3, #8
 8021d64:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021d68:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021d6c:	fb13 f101 	smulbb	r1, r3, r1
 8021d70:	fb05 150b 	mla	r5, r5, fp, r1
 8021d74:	b2ad      	uxth	r5, r5
 8021d76:	1c69      	adds	r1, r5, #1
 8021d78:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021d7c:	122d      	asrs	r5, r5, #8
 8021d7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021d82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021d84:	f10e 0e03 	add.w	lr, lr, #3
 8021d88:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021d8a:	4413      	add	r3, r2
 8021d8c:	932b      	str	r3, [sp, #172]	; 0xac
 8021d8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021d90:	441c      	add	r4, r3
 8021d92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021d94:	3b01      	subs	r3, #1
 8021d96:	9313      	str	r3, [sp, #76]	; 0x4c
 8021d98:	e501      	b.n	802179e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021d9a:	b150      	cbz	r0, 8021db2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8021d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d9e:	58aa      	ldr	r2, [r5, r2]
 8021da0:	25ff      	movs	r5, #255	; 0xff
 8021da2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021da6:	9209      	str	r2, [sp, #36]	; 0x24
 8021da8:	46ac      	mov	ip, r5
 8021daa:	e6f3      	b.n	8021b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021dac:	25ff      	movs	r5, #255	; 0xff
 8021dae:	46a9      	mov	r9, r5
 8021db0:	e6f0      	b.n	8021b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021db2:	25ff      	movs	r5, #255	; 0xff
 8021db4:	46a9      	mov	r9, r5
 8021db6:	e7f7      	b.n	8021da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021db8:	b019      	add	sp, #100	; 0x64
 8021dba:	ecbd 8b08 	vpop	{d8-d11}
 8021dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021dc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dc8:	b085      	sub	sp, #20
 8021dca:	7888      	ldrb	r0, [r1, #2]
 8021dcc:	4691      	mov	r9, r2
 8021dce:	9000      	str	r0, [sp, #0]
 8021dd0:	7848      	ldrb	r0, [r1, #1]
 8021dd2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021dd6:	9001      	str	r0, [sp, #4]
 8021dd8:	7808      	ldrb	r0, [r1, #0]
 8021dda:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021dde:	9002      	str	r0, [sp, #8]
 8021de0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021de4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021de8:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021dec:	fb04 c603 	mla	r6, r4, r3, ip
 8021df0:	2c00      	cmp	r4, #0
 8021df2:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021df6:	9a00      	ldr	r2, [sp, #0]
 8021df8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021dfc:	9a01      	ldr	r2, [sp, #4]
 8021dfe:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021e02:	db3a      	blt.n	8021e7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021e04:	45a0      	cmp	r8, r4
 8021e06:	dd38      	ble.n	8021e7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021e08:	f1bc 0f00 	cmp.w	ip, #0
 8021e0c:	db33      	blt.n	8021e76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021e0e:	4563      	cmp	r3, ip
 8021e10:	dd31      	ble.n	8021e76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021e12:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021e16:	f11c 0601 	adds.w	r6, ip, #1
 8021e1a:	d431      	bmi.n	8021e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021e1c:	42b3      	cmp	r3, r6
 8021e1e:	dd2f      	ble.n	8021e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021e20:	b375      	cbz	r5, 8021e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021e22:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021e26:	3401      	adds	r4, #1
 8021e28:	d42e      	bmi.n	8021e88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021e2a:	45a0      	cmp	r8, r4
 8021e2c:	dd2c      	ble.n	8021e88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021e2e:	b35f      	cbz	r7, 8021e88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021e30:	f1bc 0f00 	cmp.w	ip, #0
 8021e34:	db26      	blt.n	8021e84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021e36:	4563      	cmp	r3, ip
 8021e38:	dd24      	ble.n	8021e84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021e3a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021e3e:	f11c 0c01 	adds.w	ip, ip, #1
 8021e42:	d405      	bmi.n	8021e50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021e44:	4563      	cmp	r3, ip
 8021e46:	dd03      	ble.n	8021e50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021e48:	b115      	cbz	r5, 8021e50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021e4a:	3301      	adds	r3, #1
 8021e4c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021e50:	2d0f      	cmp	r5, #15
 8021e52:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021e56:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021e5a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021e5e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021e62:	d801      	bhi.n	8021e68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021e64:	2f0f      	cmp	r7, #15
 8021e66:	d911      	bls.n	8021e8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021e68:	4b77      	ldr	r3, [pc, #476]	; (8022048 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021e6a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021e6e:	4a77      	ldr	r2, [pc, #476]	; (802204c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021e70:	4877      	ldr	r0, [pc, #476]	; (8022050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8021e72:	f003 f831 	bl	8024ed8 <__assert_func>
 8021e76:	4602      	mov	r2, r0
 8021e78:	e7cd      	b.n	8021e16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021e7a:	4606      	mov	r6, r0
 8021e7c:	4602      	mov	r2, r0
 8021e7e:	e7d2      	b.n	8021e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021e80:	4606      	mov	r6, r0
 8021e82:	e7d0      	b.n	8021e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021e84:	4604      	mov	r4, r0
 8021e86:	e7da      	b.n	8021e3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8021e88:	4604      	mov	r4, r0
 8021e8a:	e7e1      	b.n	8021e50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021e8c:	b2ab      	uxth	r3, r5
 8021e8e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021e92:	b2bf      	uxth	r7, r7
 8021e94:	fb03 fe07 	mul.w	lr, r3, r7
 8021e98:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021e9c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021ea0:	eba3 0c0e 	sub.w	ip, r3, lr
 8021ea4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021ea8:	b2bf      	uxth	r7, r7
 8021eaa:	fa1f fc8c 	uxth.w	ip, ip
 8021eae:	eba5 0507 	sub.w	r5, r5, r7
 8021eb2:	fb0c f30a 	mul.w	r3, ip, sl
 8021eb6:	b2ad      	uxth	r5, r5
 8021eb8:	fb05 330b 	mla	r3, r5, fp, r3
 8021ebc:	fb07 3309 	mla	r3, r7, r9, r3
 8021ec0:	fb0e 3308 	mla	r3, lr, r8, r3
 8021ec4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ec8:	9303      	str	r3, [sp, #12]
 8021eca:	d018      	beq.n	8021efe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021ecc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021ed0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ed4:	fb0b f303 	mul.w	r3, fp, r3
 8021ed8:	fb0b fb02 	mul.w	fp, fp, r2
 8021edc:	0a1a      	lsrs	r2, r3, #8
 8021ede:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021ee2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ee6:	441a      	add	r2, r3
 8021ee8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021eec:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021ef0:	0a12      	lsrs	r2, r2, #8
 8021ef2:	0a1b      	lsrs	r3, r3, #8
 8021ef4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ef8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021efc:	431a      	orrs	r2, r3
 8021efe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021f02:	d019      	beq.n	8021f38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021f04:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021f08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021f0c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021f10:	fb0a fa06 	mul.w	sl, sl, r6
 8021f14:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021f18:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f1c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021f20:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021f24:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021f28:	445e      	add	r6, fp
 8021f2a:	0a1b      	lsrs	r3, r3, #8
 8021f2c:	0a36      	lsrs	r6, r6, #8
 8021f2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021f36:	431e      	orrs	r6, r3
 8021f38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f3c:	d019      	beq.n	8021f72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021f3e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021f42:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021f46:	fb09 fa0a 	mul.w	sl, r9, sl
 8021f4a:	fb09 f904 	mul.w	r9, r9, r4
 8021f4e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021f52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021f56:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021f5a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021f5e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021f62:	4454      	add	r4, sl
 8021f64:	0a1b      	lsrs	r3, r3, #8
 8021f66:	0a24      	lsrs	r4, r4, #8
 8021f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f6c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021f70:	431c      	orrs	r4, r3
 8021f72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f76:	d019      	beq.n	8021fac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021f78:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021f7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f80:	fb08 f909 	mul.w	r9, r8, r9
 8021f84:	fb08 f800 	mul.w	r8, r8, r0
 8021f88:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021f8c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021f90:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021f94:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f98:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021f9c:	4448      	add	r0, r9
 8021f9e:	0a1b      	lsrs	r3, r3, #8
 8021fa0:	0a00      	lsrs	r0, r0, #8
 8021fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021fa6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021faa:	4318      	orrs	r0, r3
 8021fac:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021fb0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021fb4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021fb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021fbc:	fb0c f808 	mul.w	r8, ip, r8
 8021fc0:	fb0c f606 	mul.w	r6, ip, r6
 8021fc4:	fb05 8803 	mla	r8, r5, r3, r8
 8021fc8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021fcc:	fb05 6202 	mla	r2, r5, r2, r6
 8021fd0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021fd4:	fb07 8803 	mla	r8, r7, r3, r8
 8021fd8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021fdc:	fb07 2704 	mla	r7, r7, r4, r2
 8021fe0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021fe4:	fb0e 8303 	mla	r3, lr, r3, r8
 8021fe8:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021fec:	9802      	ldr	r0, [sp, #8]
 8021fee:	0a1b      	lsrs	r3, r3, #8
 8021ff0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ff4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ff8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021ffc:	ea43 0e0e 	orr.w	lr, r3, lr
 8022000:	9b03      	ldr	r3, [sp, #12]
 8022002:	43db      	mvns	r3, r3
 8022004:	b2db      	uxtb	r3, r3
 8022006:	4358      	muls	r0, r3
 8022008:	1c42      	adds	r2, r0, #1
 802200a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802200e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022012:	700a      	strb	r2, [r1, #0]
 8022014:	9a01      	ldr	r2, [sp, #4]
 8022016:	435a      	muls	r2, r3
 8022018:	1c50      	adds	r0, r2, #1
 802201a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802201e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022022:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022026:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802202a:	704a      	strb	r2, [r1, #1]
 802202c:	9a00      	ldr	r2, [sp, #0]
 802202e:	435a      	muls	r2, r3
 8022030:	4613      	mov	r3, r2
 8022032:	3201      	adds	r2, #1
 8022034:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022038:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802203c:	f881 e002 	strb.w	lr, [r1, #2]
 8022040:	b005      	add	sp, #20
 8022042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022046:	bf00      	nop
 8022048:	080299a3 	.word	0x080299a3
 802204c:	08029e9a 	.word	0x08029e9a
 8022050:	08029a6c 	.word	0x08029a6c

08022054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022058:	ed2d 8b08 	vpush	{d8-d11}
 802205c:	b097      	sub	sp, #92	; 0x5c
 802205e:	eeb0 aa40 	vmov.f32	s20, s0
 8022062:	eef0 9a60 	vmov.f32	s19, s1
 8022066:	9306      	str	r3, [sp, #24]
 8022068:	eeb0 9a41 	vmov.f32	s18, s2
 802206c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022070:	eeb0 8a62 	vmov.f32	s16, s5
 8022074:	9214      	str	r2, [sp, #80]	; 0x50
 8022076:	eef0 8a43 	vmov.f32	s17, s6
 802207a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802207c:	eef0 ba44 	vmov.f32	s23, s8
 8022080:	9307      	str	r3, [sp, #28]
 8022082:	eeb0 ba64 	vmov.f32	s22, s9
 8022086:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802208a:	eef0 aa45 	vmov.f32	s21, s10
 802208e:	9015      	str	r0, [sp, #84]	; 0x54
 8022090:	9112      	str	r1, [sp, #72]	; 0x48
 8022092:	6850      	ldr	r0, [r2, #4]
 8022094:	9310      	str	r3, [sp, #64]	; 0x40
 8022096:	6812      	ldr	r2, [r2, #0]
 8022098:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802209a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802209e:	fb00 1303 	mla	r3, r0, r3, r1
 80220a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220a6:	18d3      	adds	r3, r2, r3
 80220a8:	930a      	str	r3, [sp, #40]	; 0x28
 80220aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80220ac:	681b      	ldr	r3, [r3, #0]
 80220ae:	9311      	str	r3, [sp, #68]	; 0x44
 80220b0:	9b07      	ldr	r3, [sp, #28]
 80220b2:	009b      	lsls	r3, r3, #2
 80220b4:	930e      	str	r3, [sp, #56]	; 0x38
 80220b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	dc03      	bgt.n	80220c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80220bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80220be:	2b00      	cmp	r3, #0
 80220c0:	f340 832e 	ble.w	8022720 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80220c4:	9b06      	ldr	r3, [sp, #24]
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	f340 8186 	ble.w	80223d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80220cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80220ce:	1423      	asrs	r3, r4, #16
 80220d0:	1412      	asrs	r2, r2, #16
 80220d2:	d42f      	bmi.n	8022134 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80220d4:	1c51      	adds	r1, r2, #1
 80220d6:	9807      	ldr	r0, [sp, #28]
 80220d8:	4288      	cmp	r0, r1
 80220da:	dd2e      	ble.n	802213a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220dc:	2b00      	cmp	r3, #0
 80220de:	db2c      	blt.n	802213a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220e0:	1c59      	adds	r1, r3, #1
 80220e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80220e4:	4288      	cmp	r0, r1
 80220e6:	dd28      	ble.n	802213a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80220e8:	9b06      	ldr	r3, [sp, #24]
 80220ea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220ec:	3b01      	subs	r3, #1
 80220ee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80220f0:	fb02 1203 	mla	r2, r2, r3, r1
 80220f4:	1412      	asrs	r2, r2, #16
 80220f6:	d42b      	bmi.n	8022150 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80220f8:	3201      	adds	r2, #1
 80220fa:	9907      	ldr	r1, [sp, #28]
 80220fc:	4291      	cmp	r1, r2
 80220fe:	dd27      	ble.n	8022150 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022100:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022102:	fb02 4303 	mla	r3, r2, r3, r4
 8022106:	141b      	asrs	r3, r3, #16
 8022108:	d422      	bmi.n	8022150 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802210a:	3301      	adds	r3, #1
 802210c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802210e:	429a      	cmp	r2, r3
 8022110:	dd1e      	ble.n	8022150 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022114:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022118:	1cdd      	adds	r5, r3, #3
 802211a:	f1bb 0f00 	cmp.w	fp, #0
 802211e:	f300 81c4 	bgt.w	80224aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022122:	9b06      	ldr	r3, [sp, #24]
 8022124:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802212a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802212e:	4423      	add	r3, r4
 8022130:	930a      	str	r3, [sp, #40]	; 0x28
 8022132:	e153      	b.n	80223dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022134:	1c51      	adds	r1, r2, #1
 8022136:	f040 8142 	bne.w	80223be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802213a:	9907      	ldr	r1, [sp, #28]
 802213c:	428a      	cmp	r2, r1
 802213e:	f280 813e 	bge.w	80223be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022142:	1c5a      	adds	r2, r3, #1
 8022144:	f2c0 813b 	blt.w	80223be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022148:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802214a:	4293      	cmp	r3, r2
 802214c:	f280 8137 	bge.w	80223be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022150:	9b06      	ldr	r3, [sp, #24]
 8022152:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022154:	9313      	str	r3, [sp, #76]	; 0x4c
 8022156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022158:	2b00      	cmp	r3, #0
 802215a:	dde2      	ble.n	8022122 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802215c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802215e:	1423      	asrs	r3, r4, #16
 8022160:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022162:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022166:	1409      	asrs	r1, r1, #16
 8022168:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802216c:	f100 8187 	bmi.w	802247e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022170:	1c4e      	adds	r6, r1, #1
 8022172:	9f07      	ldr	r7, [sp, #28]
 8022174:	42b7      	cmp	r7, r6
 8022176:	f340 8184 	ble.w	8022482 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802217a:	2b00      	cmp	r3, #0
 802217c:	f2c0 8181 	blt.w	8022482 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022180:	1c5e      	adds	r6, r3, #1
 8022182:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022184:	42b7      	cmp	r7, r6
 8022186:	f340 817c 	ble.w	8022482 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802218a:	9e07      	ldr	r6, [sp, #28]
 802218c:	fb03 1306 	mla	r3, r3, r6, r1
 8022190:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022192:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802219a:	0e1f      	lsrs	r7, r3, #24
 802219c:	2a00      	cmp	r2, #0
 802219e:	f000 815c 	beq.w	802245a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80221a2:	6871      	ldr	r1, [r6, #4]
 80221a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80221a6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80221aa:	2800      	cmp	r0, #0
 80221ac:	f000 815e 	beq.w	802246c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80221b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80221b2:	eb06 0c01 	add.w	ip, r6, r1
 80221b6:	5876      	ldr	r6, [r6, r1]
 80221b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80221bc:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80221c0:	9608      	str	r6, [sp, #32]
 80221c2:	0e0e      	lsrs	r6, r1, #24
 80221c4:	910c      	str	r1, [sp, #48]	; 0x30
 80221c6:	b292      	uxth	r2, r2
 80221c8:	b280      	uxth	r0, r0
 80221ca:	fb02 fa00 	mul.w	sl, r2, r0
 80221ce:	0112      	lsls	r2, r2, #4
 80221d0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80221d4:	eba2 080a 	sub.w	r8, r2, sl
 80221d8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80221dc:	b280      	uxth	r0, r0
 80221de:	fa1f f888 	uxth.w	r8, r8
 80221e2:	1a09      	subs	r1, r1, r0
 80221e4:	fb08 f20e 	mul.w	r2, r8, lr
 80221e8:	b289      	uxth	r1, r1
 80221ea:	fb01 2207 	mla	r2, r1, r7, r2
 80221ee:	fb00 2209 	mla	r2, r0, r9, r2
 80221f2:	fb0a 2206 	mla	r2, sl, r6, r2
 80221f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80221fa:	2a00      	cmp	r2, #0
 80221fc:	f000 80d4 	beq.w	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022200:	2fff      	cmp	r7, #255	; 0xff
 8022202:	d01a      	beq.n	802223a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022204:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022208:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802220c:	fb07 fc0c 	mul.w	ip, r7, ip
 8022210:	435f      	muls	r7, r3
 8022212:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022216:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802221a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802221e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022222:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022226:	4463      	add	r3, ip
 8022228:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802222c:	0a1b      	lsrs	r3, r3, #8
 802222e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022232:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022236:	ea43 030b 	orr.w	r3, r3, fp
 802223a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802223e:	d01e      	beq.n	802227e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022240:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022242:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022246:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802224a:	fb0e fb0b 	mul.w	fp, lr, fp
 802224e:	fb0e fe07 	mul.w	lr, lr, r7
 8022252:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022256:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802225a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802225e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022262:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022266:	44dc      	add	ip, fp
 8022268:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802226c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022270:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022274:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022278:	ea4c 070e 	orr.w	r7, ip, lr
 802227c:	970b      	str	r7, [sp, #44]	; 0x2c
 802227e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022282:	d01e      	beq.n	80222c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022284:	9f08      	ldr	r7, [sp, #32]
 8022286:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802228a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802228e:	fb09 fe0e 	mul.w	lr, r9, lr
 8022292:	fb09 f907 	mul.w	r9, r9, r7
 8022296:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802229a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802229e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80222a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222a6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80222aa:	44f4      	add	ip, lr
 80222ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80222b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80222b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222bc:	ea4c 0709 	orr.w	r7, ip, r9
 80222c0:	9708      	str	r7, [sp, #32]
 80222c2:	2eff      	cmp	r6, #255	; 0xff
 80222c4:	d01c      	beq.n	8022300 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80222c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80222c8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80222cc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80222d0:	fb06 fe0e 	mul.w	lr, r6, lr
 80222d4:	437e      	muls	r6, r7
 80222d6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80222da:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80222de:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80222e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222e6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80222ea:	44f4      	add	ip, lr
 80222ec:	0a36      	lsrs	r6, r6, #8
 80222ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222f2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80222f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222fa:	ea4c 0606 	orr.w	r6, ip, r6
 80222fe:	960c      	str	r6, [sp, #48]	; 0x30
 8022300:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022302:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022306:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802230a:	2aff      	cmp	r2, #255	; 0xff
 802230c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022310:	fb08 f606 	mul.w	r6, r8, r6
 8022314:	fb01 6607 	mla	r6, r1, r7, r6
 8022318:	9f08      	ldr	r7, [sp, #32]
 802231a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802231e:	fb00 6607 	mla	r6, r0, r7, r6
 8022322:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022324:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022328:	fb0a 6607 	mla	r6, sl, r7, r6
 802232c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802232e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022332:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022336:	fb08 f807 	mul.w	r8, r8, r7
 802233a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802233e:	fb01 8303 	mla	r3, r1, r3, r8
 8022342:	9908      	ldr	r1, [sp, #32]
 8022344:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022348:	990c      	ldr	r1, [sp, #48]	; 0x30
 802234a:	fb00 330c 	mla	r3, r0, ip, r3
 802234e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022352:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022356:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802235a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802235e:	ea46 060a 	orr.w	r6, r6, sl
 8022362:	b2f0      	uxtb	r0, r6
 8022364:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022368:	ea4f 4616 	mov.w	r6, r6, lsr #16
 802236c:	f000 8084 	beq.w	8022478 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022370:	43d2      	mvns	r2, r2
 8022372:	782b      	ldrb	r3, [r5, #0]
 8022374:	b2d2      	uxtb	r2, r2
 8022376:	fb03 f702 	mul.w	r7, r3, r2
 802237a:	1c7b      	adds	r3, r7, #1
 802237c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022380:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022384:	702b      	strb	r3, [r5, #0]
 8022386:	786b      	ldrb	r3, [r5, #1]
 8022388:	fb03 f002 	mul.w	r0, r3, r2
 802238c:	1c43      	adds	r3, r0, #1
 802238e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022392:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022396:	706b      	strb	r3, [r5, #1]
 8022398:	78ab      	ldrb	r3, [r5, #2]
 802239a:	4353      	muls	r3, r2
 802239c:	1c5a      	adds	r2, r3, #1
 802239e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80223a2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80223a6:	70ae      	strb	r6, [r5, #2]
 80223a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80223aa:	3503      	adds	r5, #3
 80223ac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80223ae:	4413      	add	r3, r2
 80223b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80223b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80223b4:	441c      	add	r4, r3
 80223b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80223b8:	3b01      	subs	r3, #1
 80223ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80223bc:	e6cb      	b.n	8022156 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80223be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80223c0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80223c2:	4413      	add	r3, r2
 80223c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80223c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80223c8:	441c      	add	r4, r3
 80223ca:	9b06      	ldr	r3, [sp, #24]
 80223cc:	3b01      	subs	r3, #1
 80223ce:	9306      	str	r3, [sp, #24]
 80223d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223d2:	3303      	adds	r3, #3
 80223d4:	930a      	str	r3, [sp, #40]	; 0x28
 80223d6:	e675      	b.n	80220c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80223d8:	f47f ae86 	bne.w	80220e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80223dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80223de:	2b00      	cmp	r3, #0
 80223e0:	f340 819e 	ble.w	8022720 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80223e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80223e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223ea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80223ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80223f2:	eef0 6a48 	vmov.f32	s13, s16
 80223f6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80223fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80223fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022402:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022406:	eef0 6a68 	vmov.f32	s13, s17
 802240a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802240e:	ee16 4a90 	vmov	r4, s13
 8022412:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022416:	ee69 7a27 	vmul.f32	s15, s18, s15
 802241a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802241e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022422:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022426:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802242a:	ee18 2a10 	vmov	r2, s16
 802242e:	eeb0 8a47 	vmov.f32	s16, s14
 8022432:	fb92 f3f3 	sdiv	r3, r2, r3
 8022436:	ee18 2a90 	vmov	r2, s17
 802243a:	932b      	str	r3, [sp, #172]	; 0xac
 802243c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802243e:	eef0 8a67 	vmov.f32	s17, s15
 8022442:	fb92 f3f3 	sdiv	r3, r2, r3
 8022446:	932c      	str	r3, [sp, #176]	; 0xb0
 8022448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802244a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802244c:	3b01      	subs	r3, #1
 802244e:	9312      	str	r3, [sp, #72]	; 0x48
 8022450:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022452:	bf08      	it	eq
 8022454:	4613      	moveq	r3, r2
 8022456:	9306      	str	r3, [sp, #24]
 8022458:	e62d      	b.n	80220b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802245a:	b150      	cbz	r0, 8022472 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 802245c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802245e:	5871      	ldr	r1, [r6, r1]
 8022460:	26ff      	movs	r6, #255	; 0xff
 8022462:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022466:	9108      	str	r1, [sp, #32]
 8022468:	46b6      	mov	lr, r6
 802246a:	e6ac      	b.n	80221c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802246c:	26ff      	movs	r6, #255	; 0xff
 802246e:	46b1      	mov	r9, r6
 8022470:	e6a9      	b.n	80221c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022472:	26ff      	movs	r6, #255	; 0xff
 8022474:	46b1      	mov	r9, r6
 8022476:	e7f7      	b.n	8022468 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022478:	7028      	strb	r0, [r5, #0]
 802247a:	7069      	strb	r1, [r5, #1]
 802247c:	e793      	b.n	80223a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802247e:	1c4f      	adds	r7, r1, #1
 8022480:	d192      	bne.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022482:	9e07      	ldr	r6, [sp, #28]
 8022484:	428e      	cmp	r6, r1
 8022486:	dd8f      	ble.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022488:	1c5e      	adds	r6, r3, #1
 802248a:	db8d      	blt.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802248c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802248e:	429e      	cmp	r6, r3
 8022490:	dd8a      	ble.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022492:	9600      	str	r6, [sp, #0]
 8022494:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022498:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802249c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802249e:	4629      	mov	r1, r5
 80224a0:	9b07      	ldr	r3, [sp, #28]
 80224a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80224a4:	f7ff fc8e 	bl	8021dc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80224a8:	e77e      	b.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80224aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80224ac:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80224b0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80224b2:	9e07      	ldr	r6, [sp, #28]
 80224b4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80224b8:	1409      	asrs	r1, r1, #16
 80224ba:	1423      	asrs	r3, r4, #16
 80224bc:	fb06 1303 	mla	r3, r6, r3, r1
 80224c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80224c2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80224c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80224ca:	0e1f      	lsrs	r7, r3, #24
 80224cc:	2a00      	cmp	r2, #0
 80224ce:	f000 8113 	beq.w	80226f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80224d2:	6871      	ldr	r1, [r6, #4]
 80224d4:	910d      	str	r1, [sp, #52]	; 0x34
 80224d6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80224da:	2800      	cmp	r0, #0
 80224dc:	f000 8115 	beq.w	802270a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80224e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80224e2:	eb06 0c01 	add.w	ip, r6, r1
 80224e6:	5876      	ldr	r6, [r6, r1]
 80224e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80224ec:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80224f0:	9609      	str	r6, [sp, #36]	; 0x24
 80224f2:	0e0e      	lsrs	r6, r1, #24
 80224f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80224f6:	b292      	uxth	r2, r2
 80224f8:	b280      	uxth	r0, r0
 80224fa:	fb02 fa00 	mul.w	sl, r2, r0
 80224fe:	0112      	lsls	r2, r2, #4
 8022500:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022504:	eba2 080a 	sub.w	r8, r2, sl
 8022508:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802250c:	b280      	uxth	r0, r0
 802250e:	fa1f f888 	uxth.w	r8, r8
 8022512:	1a09      	subs	r1, r1, r0
 8022514:	fb08 f20e 	mul.w	r2, r8, lr
 8022518:	b289      	uxth	r1, r1
 802251a:	fb01 2207 	mla	r2, r1, r7, r2
 802251e:	fb00 2209 	mla	r2, r0, r9, r2
 8022522:	fb0a 2206 	mla	r2, sl, r6, r2
 8022526:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802252a:	2a00      	cmp	r2, #0
 802252c:	f000 80da 	beq.w	80226e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022530:	2fff      	cmp	r7, #255	; 0xff
 8022532:	d01a      	beq.n	802256a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022534:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802253c:	fb07 fc0c 	mul.w	ip, r7, ip
 8022540:	435f      	muls	r7, r3
 8022542:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022546:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802254a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802254e:	4463      	add	r3, ip
 8022550:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022554:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022558:	0a1b      	lsrs	r3, r3, #8
 802255a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802255e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022562:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022566:	ea43 030c 	orr.w	r3, r3, ip
 802256a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802256e:	d021      	beq.n	80225b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022570:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022572:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022576:	fb0e f707 	mul.w	r7, lr, r7
 802257a:	9713      	str	r7, [sp, #76]	; 0x4c
 802257c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802257e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022582:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022584:	fb0e fe0c 	mul.w	lr, lr, ip
 8022588:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802258c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022590:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022594:	44bc      	add	ip, r7
 8022596:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802259a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802259e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80225a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80225a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80225aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80225ae:	ea4c 070e 	orr.w	r7, ip, lr
 80225b2:	970d      	str	r7, [sp, #52]	; 0x34
 80225b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80225b8:	d01e      	beq.n	80225f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 80225ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80225bc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80225c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80225c4:	fb09 fe0e 	mul.w	lr, r9, lr
 80225c8:	fb09 f907 	mul.w	r9, r9, r7
 80225cc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80225d0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80225d4:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80225d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80225dc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80225e0:	44f4      	add	ip, lr
 80225e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80225e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80225ea:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80225ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80225f2:	ea4c 0709 	orr.w	r7, ip, r9
 80225f6:	9709      	str	r7, [sp, #36]	; 0x24
 80225f8:	2eff      	cmp	r6, #255	; 0xff
 80225fa:	d01c      	beq.n	8022636 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 80225fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80225fe:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022602:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022606:	fb06 fe0e 	mul.w	lr, r6, lr
 802260a:	437e      	muls	r6, r7
 802260c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022610:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022614:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022618:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802261c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022620:	44f4      	add	ip, lr
 8022622:	0a36      	lsrs	r6, r6, #8
 8022624:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022628:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802262c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022630:	ea4c 0606 	orr.w	r6, ip, r6
 8022634:	960f      	str	r6, [sp, #60]	; 0x3c
 8022636:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022638:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802263c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022640:	2aff      	cmp	r2, #255	; 0xff
 8022642:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022646:	fb08 f606 	mul.w	r6, r8, r6
 802264a:	fb01 6607 	mla	r6, r1, r7, r6
 802264e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022650:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022654:	fb00 6607 	mla	r6, r0, r7, r6
 8022658:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802265a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802265e:	fb0a 6607 	mla	r6, sl, r7, r6
 8022662:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022664:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022668:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802266c:	fb08 f807 	mul.w	r8, r8, r7
 8022670:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022674:	fb01 8303 	mla	r3, r1, r3, r8
 8022678:	9909      	ldr	r1, [sp, #36]	; 0x24
 802267a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802267e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022680:	fb00 330c 	mla	r3, r0, ip, r3
 8022684:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022688:	fb0a 3e0e 	mla	lr, sl, lr, r3
 802268c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022690:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022694:	ea46 060e 	orr.w	r6, r6, lr
 8022698:	b2f0      	uxtb	r0, r6
 802269a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802269e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80226a2:	d038      	beq.n	8022716 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80226a4:	43d2      	mvns	r2, r2
 80226a6:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80226aa:	b2d2      	uxtb	r2, r2
 80226ac:	4357      	muls	r7, r2
 80226ae:	1c7b      	adds	r3, r7, #1
 80226b0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80226b4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80226b8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 80226bc:	4350      	muls	r0, r2
 80226be:	f805 3c03 	strb.w	r3, [r5, #-3]
 80226c2:	1c43      	adds	r3, r0, #1
 80226c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80226c8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80226cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80226d0:	4353      	muls	r3, r2
 80226d2:	f805 1c02 	strb.w	r1, [r5, #-2]
 80226d6:	1c5a      	adds	r2, r3, #1
 80226d8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80226dc:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80226e0:	f805 6c01 	strb.w	r6, [r5, #-1]
 80226e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80226e6:	3503      	adds	r5, #3
 80226e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80226ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80226ee:	4413      	add	r3, r2
 80226f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80226f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80226f4:	441c      	add	r4, r3
 80226f6:	e510      	b.n	802211a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 80226f8:	b150      	cbz	r0, 8022710 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80226fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80226fc:	5871      	ldr	r1, [r6, r1]
 80226fe:	26ff      	movs	r6, #255	; 0xff
 8022700:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022704:	9109      	str	r1, [sp, #36]	; 0x24
 8022706:	46b6      	mov	lr, r6
 8022708:	e6f5      	b.n	80224f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802270a:	26ff      	movs	r6, #255	; 0xff
 802270c:	46b1      	mov	r9, r6
 802270e:	e6f2      	b.n	80224f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022710:	26ff      	movs	r6, #255	; 0xff
 8022712:	46b1      	mov	r9, r6
 8022714:	e7f7      	b.n	8022706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022716:	f805 0c03 	strb.w	r0, [r5, #-3]
 802271a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802271e:	e7df      	b.n	80226e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022720:	b017      	add	sp, #92	; 0x5c
 8022722:	ecbd 8b08 	vpop	{d8-d11}
 8022726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802272c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802272c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022730:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022734:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022738:	2800      	cmp	r0, #0
 802273a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802273e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022742:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022746:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802274a:	db6b      	blt.n	8022824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802274c:	4580      	cmp	r8, r0
 802274e:	dd69      	ble.n	8022824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022750:	f1bc 0f00 	cmp.w	ip, #0
 8022754:	db66      	blt.n	8022824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022756:	45e1      	cmp	r9, ip
 8022758:	dd64      	ble.n	8022824 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802275a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802275e:	f01e 0f01 	tst.w	lr, #1
 8022762:	5d16      	ldrb	r6, [r2, r4]
 8022764:	bf0c      	ite	eq
 8022766:	f006 060f 	andeq.w	r6, r6, #15
 802276a:	1136      	asrne	r6, r6, #4
 802276c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022770:	b2f6      	uxtb	r6, r6
 8022772:	f110 0a01 	adds.w	sl, r0, #1
 8022776:	d457      	bmi.n	8022828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022778:	45d0      	cmp	r8, sl
 802277a:	dd55      	ble.n	8022828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802277c:	f1bc 0f00 	cmp.w	ip, #0
 8022780:	db52      	blt.n	8022828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022782:	45e1      	cmp	r9, ip
 8022784:	dd50      	ble.n	8022828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022786:	2f00      	cmp	r7, #0
 8022788:	f000 80ac 	beq.w	80228e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 802278c:	f10e 0b01 	add.w	fp, lr, #1
 8022790:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022794:	f01b 0f01 	tst.w	fp, #1
 8022798:	5d14      	ldrb	r4, [r2, r4]
 802279a:	bf0c      	ite	eq
 802279c:	f004 040f 	andeq.w	r4, r4, #15
 80227a0:	1124      	asrne	r4, r4, #4
 80227a2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80227a6:	b2e4      	uxtb	r4, r4
 80227a8:	2d00      	cmp	r5, #0
 80227aa:	f000 8096 	beq.w	80228da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80227ae:	2800      	cmp	r0, #0
 80227b0:	f10c 0c01 	add.w	ip, ip, #1
 80227b4:	db3c      	blt.n	8022830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80227b6:	4580      	cmp	r8, r0
 80227b8:	dd3a      	ble.n	8022830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80227ba:	f1bc 0f00 	cmp.w	ip, #0
 80227be:	db37      	blt.n	8022830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80227c0:	45e1      	cmp	r9, ip
 80227c2:	dd35      	ble.n	8022830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80227c4:	eb03 0b0e 	add.w	fp, r3, lr
 80227c8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80227cc:	f01b 0f01 	tst.w	fp, #1
 80227d0:	5c10      	ldrb	r0, [r2, r0]
 80227d2:	bf0c      	ite	eq
 80227d4:	f000 000f 	andeq.w	r0, r0, #15
 80227d8:	1100      	asrne	r0, r0, #4
 80227da:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80227de:	b2c0      	uxtb	r0, r0
 80227e0:	f1ba 0f00 	cmp.w	sl, #0
 80227e4:	db26      	blt.n	8022834 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80227e6:	45d0      	cmp	r8, sl
 80227e8:	dd24      	ble.n	8022834 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80227ea:	f1bc 0f00 	cmp.w	ip, #0
 80227ee:	db21      	blt.n	8022834 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80227f0:	45e1      	cmp	r9, ip
 80227f2:	dd1f      	ble.n	8022834 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80227f4:	b307      	cbz	r7, 8022838 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80227f6:	3301      	adds	r3, #1
 80227f8:	449e      	add	lr, r3
 80227fa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80227fe:	f01e 0f01 	tst.w	lr, #1
 8022802:	5cd3      	ldrb	r3, [r2, r3]
 8022804:	bf0c      	ite	eq
 8022806:	f003 030f 	andeq.w	r3, r3, #15
 802280a:	111b      	asrne	r3, r3, #4
 802280c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022810:	b2db      	uxtb	r3, r3
 8022812:	2f0f      	cmp	r7, #15
 8022814:	d911      	bls.n	802283a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8022816:	4b35      	ldr	r3, [pc, #212]	; (80228ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022818:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802281c:	4a34      	ldr	r2, [pc, #208]	; (80228f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802281e:	4835      	ldr	r0, [pc, #212]	; (80228f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022820:	f002 fb5a 	bl	8024ed8 <__assert_func>
 8022824:	2600      	movs	r6, #0
 8022826:	e7a4      	b.n	8022772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022828:	2400      	movs	r4, #0
 802282a:	e7bd      	b.n	80227a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802282c:	463c      	mov	r4, r7
 802282e:	e7be      	b.n	80227ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022830:	2000      	movs	r0, #0
 8022832:	e7d5      	b.n	80227e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022834:	2300      	movs	r3, #0
 8022836:	e7ec      	b.n	8022812 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022838:	463b      	mov	r3, r7
 802283a:	2d0f      	cmp	r5, #15
 802283c:	d8eb      	bhi.n	8022816 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802283e:	b2bf      	uxth	r7, r7
 8022840:	b2ad      	uxth	r5, r5
 8022842:	fb07 f205 	mul.w	r2, r7, r5
 8022846:	013f      	lsls	r7, r7, #4
 8022848:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 802284c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022850:	1abf      	subs	r7, r7, r2
 8022852:	b2ad      	uxth	r5, r5
 8022854:	b2bf      	uxth	r7, r7
 8022856:	ebac 0c05 	sub.w	ip, ip, r5
 802285a:	437c      	muls	r4, r7
 802285c:	fa1f fc8c 	uxth.w	ip, ip
 8022860:	fb06 440c 	mla	r4, r6, ip, r4
 8022864:	fb05 4400 	mla	r4, r5, r0, r4
 8022868:	fb02 4203 	mla	r2, r2, r3, r4
 802286c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022870:	b38a      	cbz	r2, 80228d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8022872:	4b21      	ldr	r3, [pc, #132]	; (80228f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8022874:	681c      	ldr	r4, [r3, #0]
 8022876:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802287a:	b2e5      	uxtb	r5, r4
 802287c:	4353      	muls	r3, r2
 802287e:	1c5a      	adds	r2, r3, #1
 8022880:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022884:	1212      	asrs	r2, r2, #8
 8022886:	b290      	uxth	r0, r2
 8022888:	43d2      	mvns	r2, r2
 802288a:	fb15 f500 	smulbb	r5, r5, r0
 802288e:	b2d3      	uxtb	r3, r2
 8022890:	780a      	ldrb	r2, [r1, #0]
 8022892:	fb02 5203 	mla	r2, r2, r3, r5
 8022896:	b292      	uxth	r2, r2
 8022898:	1c55      	adds	r5, r2, #1
 802289a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802289e:	784d      	ldrb	r5, [r1, #1]
 80228a0:	fb15 f503 	smulbb	r5, r5, r3
 80228a4:	1212      	asrs	r2, r2, #8
 80228a6:	700a      	strb	r2, [r1, #0]
 80228a8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80228ac:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80228b0:	fb02 5200 	mla	r2, r2, r0, r5
 80228b4:	b292      	uxth	r2, r2
 80228b6:	1c55      	adds	r5, r2, #1
 80228b8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80228bc:	1212      	asrs	r2, r2, #8
 80228be:	704a      	strb	r2, [r1, #1]
 80228c0:	788a      	ldrb	r2, [r1, #2]
 80228c2:	fb12 f303 	smulbb	r3, r2, r3
 80228c6:	fb04 3300 	mla	r3, r4, r0, r3
 80228ca:	b29b      	uxth	r3, r3
 80228cc:	1c5a      	adds	r2, r3, #1
 80228ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80228d2:	121b      	asrs	r3, r3, #8
 80228d4:	708b      	strb	r3, [r1, #2]
 80228d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228da:	2f0f      	cmp	r7, #15
 80228dc:	d89b      	bhi.n	8022816 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80228de:	462b      	mov	r3, r5
 80228e0:	4628      	mov	r0, r5
 80228e2:	e7ac      	b.n	802283e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80228e4:	2d00      	cmp	r5, #0
 80228e6:	d1a1      	bne.n	802282c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80228e8:	462c      	mov	r4, r5
 80228ea:	e7f8      	b.n	80228de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80228ec:	080299a3 	.word	0x080299a3
 80228f0:	08029e9a 	.word	0x08029e9a
 80228f4:	08029a6c 	.word	0x08029a6c
 80228f8:	2000c530 	.word	0x2000c530

080228fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80228fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022900:	ed2d 8b08 	vpush	{d8-d11}
 8022904:	b097      	sub	sp, #92	; 0x5c
 8022906:	eeb0 aa40 	vmov.f32	s20, s0
 802290a:	eef0 9a60 	vmov.f32	s19, s1
 802290e:	9308      	str	r3, [sp, #32]
 8022910:	eeb0 9a41 	vmov.f32	s18, s2
 8022914:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022918:	eeb0 8a62 	vmov.f32	s16, s5
 802291c:	9214      	str	r2, [sp, #80]	; 0x50
 802291e:	eef0 8a43 	vmov.f32	s17, s6
 8022922:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022924:	eef0 ba44 	vmov.f32	s23, s8
 8022928:	9309      	str	r3, [sp, #36]	; 0x24
 802292a:	eeb0 ba64 	vmov.f32	s22, s9
 802292e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022932:	eef0 aa45 	vmov.f32	s21, s10
 8022936:	9015      	str	r0, [sp, #84]	; 0x54
 8022938:	910c      	str	r1, [sp, #48]	; 0x30
 802293a:	930e      	str	r3, [sp, #56]	; 0x38
 802293c:	6850      	ldr	r0, [r2, #4]
 802293e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8022942:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022946:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802294a:	fb00 1803 	mla	r8, r0, r3, r1
 802294e:	6813      	ldr	r3, [r2, #0]
 8022950:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022954:	4498      	add	r8, r3
 8022956:	f10b 0301 	add.w	r3, fp, #1
 802295a:	f023 0301 	bic.w	r3, r3, #1
 802295e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022960:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022962:	681f      	ldr	r7, [r3, #0]
 8022964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022966:	2b00      	cmp	r3, #0
 8022968:	dc03      	bgt.n	8022972 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802296a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802296c:	2b00      	cmp	r3, #0
 802296e:	f340 8238 	ble.w	8022de2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8022972:	9b08      	ldr	r3, [sp, #32]
 8022974:	2b00      	cmp	r3, #0
 8022976:	f340 810c 	ble.w	8022b92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802297a:	142a      	asrs	r2, r5, #16
 802297c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022980:	d42c      	bmi.n	80229dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022982:	1c51      	adds	r1, r2, #1
 8022984:	458b      	cmp	fp, r1
 8022986:	dd2c      	ble.n	80229e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022988:	2b00      	cmp	r3, #0
 802298a:	db2a      	blt.n	80229e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802298c:	1c59      	adds	r1, r3, #1
 802298e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022990:	4288      	cmp	r0, r1
 8022992:	dd26      	ble.n	80229e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022994:	9b08      	ldr	r3, [sp, #32]
 8022996:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022998:	3b01      	subs	r3, #1
 802299a:	fb02 5203 	mla	r2, r2, r3, r5
 802299e:	1412      	asrs	r2, r2, #16
 80229a0:	d429      	bmi.n	80229f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80229a2:	3201      	adds	r2, #1
 80229a4:	4593      	cmp	fp, r2
 80229a6:	dd26      	ble.n	80229f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80229a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80229aa:	fb02 6303 	mla	r3, r2, r3, r6
 80229ae:	141b      	asrs	r3, r3, #16
 80229b0:	d421      	bmi.n	80229f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80229b2:	3301      	adds	r3, #1
 80229b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229b6:	429a      	cmp	r2, r3
 80229b8:	dd1d      	ble.n	80229f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80229ba:	f108 0e03 	add.w	lr, r8, #3
 80229be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80229c2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80229c6:	f1b9 0f00 	cmp.w	r9, #0
 80229ca:	f300 814f 	bgt.w	8022c6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80229ce:	9b08      	ldr	r3, [sp, #32]
 80229d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80229d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80229d8:	44a0      	add	r8, r4
 80229da:	e0dc      	b.n	8022b96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80229dc:	1c51      	adds	r1, r2, #1
 80229de:	f040 80ce 	bne.w	8022b7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80229e2:	4593      	cmp	fp, r2
 80229e4:	f340 80cb 	ble.w	8022b7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80229e8:	1c5a      	adds	r2, r3, #1
 80229ea:	f2c0 80c8 	blt.w	8022b7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80229ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229f0:	4293      	cmp	r3, r2
 80229f2:	f280 80c4 	bge.w	8022b7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80229f6:	9b08      	ldr	r3, [sp, #32]
 80229f8:	46c1      	mov	r9, r8
 80229fa:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80229fe:	930d      	str	r3, [sp, #52]	; 0x34
 8022a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	dde3      	ble.n	80229ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8022a06:	1428      	asrs	r0, r5, #16
 8022a08:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022a0c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022a10:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022a14:	f100 8111 	bmi.w	8022c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8022a18:	f100 0c01 	add.w	ip, r0, #1
 8022a1c:	45e3      	cmp	fp, ip
 8022a1e:	f340 810e 	ble.w	8022c3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022a22:	2b00      	cmp	r3, #0
 8022a24:	f2c0 810b 	blt.w	8022c3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022a28:	f103 0c01 	add.w	ip, r3, #1
 8022a2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022a2e:	4564      	cmp	r4, ip
 8022a30:	f340 8105 	ble.w	8022c3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022a34:	fb03 030a 	mla	r3, r3, sl, r0
 8022a38:	0858      	lsrs	r0, r3, #1
 8022a3a:	07dc      	lsls	r4, r3, #31
 8022a3c:	5c38      	ldrb	r0, [r7, r0]
 8022a3e:	bf54      	ite	pl
 8022a40:	f000 000f 	andpl.w	r0, r0, #15
 8022a44:	1100      	asrmi	r0, r0, #4
 8022a46:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022a4a:	b2c0      	uxtb	r0, r0
 8022a4c:	2a00      	cmp	r2, #0
 8022a4e:	f000 80e1 	beq.w	8022c14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8022a52:	f103 0e01 	add.w	lr, r3, #1
 8022a56:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022a5a:	f01e 0f01 	tst.w	lr, #1
 8022a5e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a62:	bf0c      	ite	eq
 8022a64:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022a68:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022a6c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a70:	fa5f f48c 	uxtb.w	r4, ip
 8022a74:	9410      	str	r4, [sp, #64]	; 0x40
 8022a76:	b1f9      	cbz	r1, 8022ab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022a78:	4453      	add	r3, sl
 8022a7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a7e:	07dc      	lsls	r4, r3, #31
 8022a80:	f103 0301 	add.w	r3, r3, #1
 8022a84:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a88:	bf54      	ite	pl
 8022a8a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a8e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a92:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a96:	fa5f f48c 	uxtb.w	r4, ip
 8022a9a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a9e:	940a      	str	r4, [sp, #40]	; 0x28
 8022aa0:	07dc      	lsls	r4, r3, #31
 8022aa2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022aa6:	bf54      	ite	pl
 8022aa8:	f00c 030f 	andpl.w	r3, ip, #15
 8022aac:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022ab0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ab4:	b2db      	uxtb	r3, r3
 8022ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8022ab8:	b292      	uxth	r2, r2
 8022aba:	b289      	uxth	r1, r1
 8022abc:	0113      	lsls	r3, r2, #4
 8022abe:	fb02 fc01 	mul.w	ip, r2, r1
 8022ac2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ac4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022ac8:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8022acc:	eba3 030c 	sub.w	r3, r3, ip
 8022ad0:	b289      	uxth	r1, r1
 8022ad2:	b29b      	uxth	r3, r3
 8022ad4:	ebae 0e01 	sub.w	lr, lr, r1
 8022ad8:	4353      	muls	r3, r2
 8022ada:	fa1f fe8e 	uxth.w	lr, lr
 8022ade:	fb00 320e 	mla	r2, r0, lr, r3
 8022ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ae4:	fb01 2203 	mla	r2, r1, r3, r2
 8022ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022aea:	fb0c 2203 	mla	r2, ip, r3, r2
 8022aee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022af2:	2a00      	cmp	r2, #0
 8022af4:	d039      	beq.n	8022b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022af6:	4bbd      	ldr	r3, [pc, #756]	; (8022dec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022af8:	6819      	ldr	r1, [r3, #0]
 8022afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022afc:	fa5f fc81 	uxtb.w	ip, r1
 8022b00:	435a      	muls	r2, r3
 8022b02:	1c53      	adds	r3, r2, #1
 8022b04:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022b08:	1212      	asrs	r2, r2, #8
 8022b0a:	b290      	uxth	r0, r2
 8022b0c:	43d2      	mvns	r2, r2
 8022b0e:	fb1c fc00 	smulbb	ip, ip, r0
 8022b12:	b2d3      	uxtb	r3, r2
 8022b14:	f899 2000 	ldrb.w	r2, [r9]
 8022b18:	fb02 c203 	mla	r2, r2, r3, ip
 8022b1c:	b292      	uxth	r2, r2
 8022b1e:	f102 0c01 	add.w	ip, r2, #1
 8022b22:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022b26:	f899 c001 	ldrb.w	ip, [r9, #1]
 8022b2a:	fb1c fc03 	smulbb	ip, ip, r3
 8022b2e:	1212      	asrs	r2, r2, #8
 8022b30:	f889 2000 	strb.w	r2, [r9]
 8022b34:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022b38:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022b3c:	fb02 c200 	mla	r2, r2, r0, ip
 8022b40:	b292      	uxth	r2, r2
 8022b42:	f102 0c01 	add.w	ip, r2, #1
 8022b46:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022b4a:	1212      	asrs	r2, r2, #8
 8022b4c:	f889 2001 	strb.w	r2, [r9, #1]
 8022b50:	f899 2002 	ldrb.w	r2, [r9, #2]
 8022b54:	fb12 f303 	smulbb	r3, r2, r3
 8022b58:	fb01 3300 	mla	r3, r1, r0, r3
 8022b5c:	b29b      	uxth	r3, r3
 8022b5e:	1c5a      	adds	r2, r3, #1
 8022b60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b64:	121b      	asrs	r3, r3, #8
 8022b66:	f889 3002 	strb.w	r3, [r9, #2]
 8022b6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022b6c:	f109 0903 	add.w	r9, r9, #3
 8022b70:	441d      	add	r5, r3
 8022b72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b74:	441e      	add	r6, r3
 8022b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b78:	3b01      	subs	r3, #1
 8022b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8022b7c:	e740      	b.n	8022a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022b7e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022b80:	f108 0803 	add.w	r8, r8, #3
 8022b84:	441d      	add	r5, r3
 8022b86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b88:	441e      	add	r6, r3
 8022b8a:	9b08      	ldr	r3, [sp, #32]
 8022b8c:	3b01      	subs	r3, #1
 8022b8e:	9308      	str	r3, [sp, #32]
 8022b90:	e6ef      	b.n	8022972 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022b92:	f47f aeff 	bne.w	8022994 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	f340 8122 	ble.w	8022de2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8022b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ba2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ba4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022ba8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022bac:	eef0 6a48 	vmov.f32	s13, s16
 8022bb0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022bb4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022bb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bbc:	ee16 5a90 	vmov	r5, s13
 8022bc0:	eef0 6a68 	vmov.f32	s13, s17
 8022bc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bc8:	ee16 6a90 	vmov	r6, s13
 8022bcc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022bd0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022bd4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022bd8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022bdc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022be0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022be4:	ee18 2a10 	vmov	r2, s16
 8022be8:	eeb0 8a47 	vmov.f32	s16, s14
 8022bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bf0:	ee18 2a90 	vmov	r2, s17
 8022bf4:	932b      	str	r3, [sp, #172]	; 0xac
 8022bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bf8:	eef0 8a67 	vmov.f32	s17, s15
 8022bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c00:	932c      	str	r3, [sp, #176]	; 0xb0
 8022c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022c06:	3b01      	subs	r3, #1
 8022c08:	930c      	str	r3, [sp, #48]	; 0x30
 8022c0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c0c:	bf08      	it	eq
 8022c0e:	4613      	moveq	r3, r2
 8022c10:	9308      	str	r3, [sp, #32]
 8022c12:	e6a7      	b.n	8022964 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022c14:	2900      	cmp	r1, #0
 8022c16:	f43f af4f 	beq.w	8022ab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022c1a:	4453      	add	r3, sl
 8022c1c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022c20:	07db      	lsls	r3, r3, #31
 8022c22:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022c26:	bf54      	ite	pl
 8022c28:	f00c 030f 	andpl.w	r3, ip, #15
 8022c2c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022c30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022c34:	b2db      	uxtb	r3, r3
 8022c36:	930a      	str	r3, [sp, #40]	; 0x28
 8022c38:	e73e      	b.n	8022ab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022c3a:	1c44      	adds	r4, r0, #1
 8022c3c:	d195      	bne.n	8022b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022c3e:	4583      	cmp	fp, r0
 8022c40:	dd93      	ble.n	8022b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022c42:	1c5c      	adds	r4, r3, #1
 8022c44:	db91      	blt.n	8022b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022c46:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022c48:	429c      	cmp	r4, r3
 8022c4a:	dd8e      	ble.n	8022b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022c4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022c4e:	9002      	str	r0, [sp, #8]
 8022c50:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022c52:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c58:	463a      	mov	r2, r7
 8022c5a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022c5e:	e9cd b300 	strd	fp, r3, [sp]
 8022c62:	4649      	mov	r1, r9
 8022c64:	4653      	mov	r3, sl
 8022c66:	f7ff fd61 	bl	802272c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022c6a:	e77e      	b.n	8022b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022c6c:	142a      	asrs	r2, r5, #16
 8022c6e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022c72:	1433      	asrs	r3, r6, #16
 8022c74:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022c78:	fb0a 2303 	mla	r3, sl, r3, r2
 8022c7c:	085a      	lsrs	r2, r3, #1
 8022c7e:	07dc      	lsls	r4, r3, #31
 8022c80:	5cba      	ldrb	r2, [r7, r2]
 8022c82:	bf54      	ite	pl
 8022c84:	f002 020f 	andpl.w	r2, r2, #15
 8022c88:	1112      	asrmi	r2, r2, #4
 8022c8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022c8e:	b2d2      	uxtb	r2, r2
 8022c90:	2900      	cmp	r1, #0
 8022c92:	f000 8093 	beq.w	8022dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8022c96:	1c5c      	adds	r4, r3, #1
 8022c98:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8022c9c:	07e4      	lsls	r4, r4, #31
 8022c9e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ca2:	bf54      	ite	pl
 8022ca4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ca8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022cac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022cb0:	fa5f f48c 	uxtb.w	r4, ip
 8022cb4:	9412      	str	r4, [sp, #72]	; 0x48
 8022cb6:	b300      	cbz	r0, 8022cfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022cb8:	4453      	add	r3, sl
 8022cba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022cbe:	07dc      	lsls	r4, r3, #31
 8022cc0:	f103 0301 	add.w	r3, r3, #1
 8022cc4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022cc8:	bf54      	ite	pl
 8022cca:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022cce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022cd2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022cd6:	fa5f f48c 	uxtb.w	r4, ip
 8022cda:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022cde:	940b      	str	r4, [sp, #44]	; 0x2c
 8022ce0:	07dc      	lsls	r4, r3, #31
 8022ce2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ce6:	bf54      	ite	pl
 8022ce8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022cec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022cf0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022cf4:	fa5f f38c 	uxtb.w	r3, ip
 8022cf8:	9313      	str	r3, [sp, #76]	; 0x4c
 8022cfa:	b289      	uxth	r1, r1
 8022cfc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022cfe:	b280      	uxth	r0, r0
 8022d00:	fb01 f300 	mul.w	r3, r1, r0
 8022d04:	0109      	lsls	r1, r1, #4
 8022d06:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022d0a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022d0e:	1ac9      	subs	r1, r1, r3
 8022d10:	b280      	uxth	r0, r0
 8022d12:	b289      	uxth	r1, r1
 8022d14:	ebac 0c00 	sub.w	ip, ip, r0
 8022d18:	4361      	muls	r1, r4
 8022d1a:	fa1f fc8c 	uxth.w	ip, ip
 8022d1e:	fb02 120c 	mla	r2, r2, ip, r1
 8022d22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022d24:	fb00 2001 	mla	r0, r0, r1, r2
 8022d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022d2a:	fb03 0302 	mla	r3, r3, r2, r0
 8022d2e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d32:	2b00      	cmp	r3, #0
 8022d34:	d039      	beq.n	8022daa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8022d36:	4a2d      	ldr	r2, [pc, #180]	; (8022dec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022d38:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022d3c:	6810      	ldr	r0, [r2, #0]
 8022d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d40:	fa5f fc80 	uxtb.w	ip, r0
 8022d44:	4353      	muls	r3, r2
 8022d46:	1c5a      	adds	r2, r3, #1
 8022d48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d4c:	121b      	asrs	r3, r3, #8
 8022d4e:	b29a      	uxth	r2, r3
 8022d50:	43db      	mvns	r3, r3
 8022d52:	fb1c fc02 	smulbb	ip, ip, r2
 8022d56:	b2db      	uxtb	r3, r3
 8022d58:	fb01 c103 	mla	r1, r1, r3, ip
 8022d5c:	b289      	uxth	r1, r1
 8022d5e:	f101 0c01 	add.w	ip, r1, #1
 8022d62:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022d66:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022d6a:	fb1c fc03 	smulbb	ip, ip, r3
 8022d6e:	1209      	asrs	r1, r1, #8
 8022d70:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022d74:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022d78:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022d7c:	fb01 c102 	mla	r1, r1, r2, ip
 8022d80:	b289      	uxth	r1, r1
 8022d82:	f101 0c01 	add.w	ip, r1, #1
 8022d86:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022d8a:	1209      	asrs	r1, r1, #8
 8022d8c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022d90:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022d94:	fb11 f303 	smulbb	r3, r1, r3
 8022d98:	fb00 3002 	mla	r0, r0, r2, r3
 8022d9c:	b280      	uxth	r0, r0
 8022d9e:	1c42      	adds	r2, r0, #1
 8022da0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022da4:	1200      	asrs	r0, r0, #8
 8022da6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022daa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022dac:	f10e 0e03 	add.w	lr, lr, #3
 8022db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8022db4:	441d      	add	r5, r3
 8022db6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022db8:	441e      	add	r6, r3
 8022dba:	e604      	b.n	80229c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022dbc:	2800      	cmp	r0, #0
 8022dbe:	d09c      	beq.n	8022cfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022dc0:	4453      	add	r3, sl
 8022dc2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022dc6:	07db      	lsls	r3, r3, #31
 8022dc8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022dcc:	bf54      	ite	pl
 8022dce:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022dd2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022dd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022dda:	fa5f f38c 	uxtb.w	r3, ip
 8022dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8022de0:	e78b      	b.n	8022cfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022de2:	b017      	add	sp, #92	; 0x5c
 8022de4:	ecbd 8b08 	vpop	{d8-d11}
 8022de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dec:	2000c530 	.word	0x2000c530

08022df0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022df4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022df8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022dfc:	2800      	cmp	r0, #0
 8022dfe:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022e02:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022e06:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022e0a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022e0e:	db6b      	blt.n	8022ee8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022e10:	4580      	cmp	r8, r0
 8022e12:	dd69      	ble.n	8022ee8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022e14:	f1bc 0f00 	cmp.w	ip, #0
 8022e18:	db66      	blt.n	8022ee8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022e1a:	45e1      	cmp	r9, ip
 8022e1c:	dd64      	ble.n	8022ee8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022e1e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022e22:	f01e 0f01 	tst.w	lr, #1
 8022e26:	5d16      	ldrb	r6, [r2, r4]
 8022e28:	bf0c      	ite	eq
 8022e2a:	f006 060f 	andeq.w	r6, r6, #15
 8022e2e:	1136      	asrne	r6, r6, #4
 8022e30:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022e34:	b2f6      	uxtb	r6, r6
 8022e36:	f110 0a01 	adds.w	sl, r0, #1
 8022e3a:	d457      	bmi.n	8022eec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022e3c:	45d0      	cmp	r8, sl
 8022e3e:	dd55      	ble.n	8022eec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022e40:	f1bc 0f00 	cmp.w	ip, #0
 8022e44:	db52      	blt.n	8022eec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022e46:	45e1      	cmp	r9, ip
 8022e48:	dd50      	ble.n	8022eec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022e4a:	2f00      	cmp	r7, #0
 8022e4c:	f000 80a5 	beq.w	8022f9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022e50:	f10e 0b01 	add.w	fp, lr, #1
 8022e54:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022e58:	f01b 0f01 	tst.w	fp, #1
 8022e5c:	5d14      	ldrb	r4, [r2, r4]
 8022e5e:	bf0c      	ite	eq
 8022e60:	f004 040f 	andeq.w	r4, r4, #15
 8022e64:	1124      	asrne	r4, r4, #4
 8022e66:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022e6a:	b2e4      	uxtb	r4, r4
 8022e6c:	2d00      	cmp	r5, #0
 8022e6e:	f000 808f 	beq.w	8022f90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022e72:	2800      	cmp	r0, #0
 8022e74:	f10c 0c01 	add.w	ip, ip, #1
 8022e78:	db3c      	blt.n	8022ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022e7a:	4580      	cmp	r8, r0
 8022e7c:	dd3a      	ble.n	8022ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022e7e:	f1bc 0f00 	cmp.w	ip, #0
 8022e82:	db37      	blt.n	8022ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022e84:	45e1      	cmp	r9, ip
 8022e86:	dd35      	ble.n	8022ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022e88:	eb03 0b0e 	add.w	fp, r3, lr
 8022e8c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022e90:	f01b 0f01 	tst.w	fp, #1
 8022e94:	5c10      	ldrb	r0, [r2, r0]
 8022e96:	bf0c      	ite	eq
 8022e98:	f000 000f 	andeq.w	r0, r0, #15
 8022e9c:	1100      	asrne	r0, r0, #4
 8022e9e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022ea2:	b2c0      	uxtb	r0, r0
 8022ea4:	f1ba 0f00 	cmp.w	sl, #0
 8022ea8:	db26      	blt.n	8022ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022eaa:	45d0      	cmp	r8, sl
 8022eac:	dd24      	ble.n	8022ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022eae:	f1bc 0f00 	cmp.w	ip, #0
 8022eb2:	db21      	blt.n	8022ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022eb4:	45e1      	cmp	r9, ip
 8022eb6:	dd1f      	ble.n	8022ef8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022eb8:	b307      	cbz	r7, 8022efc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022eba:	3301      	adds	r3, #1
 8022ebc:	449e      	add	lr, r3
 8022ebe:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022ec2:	f01e 0f01 	tst.w	lr, #1
 8022ec6:	5cd3      	ldrb	r3, [r2, r3]
 8022ec8:	bf0c      	ite	eq
 8022eca:	f003 030f 	andeq.w	r3, r3, #15
 8022ece:	111b      	asrne	r3, r3, #4
 8022ed0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ed4:	b2db      	uxtb	r3, r3
 8022ed6:	2f0f      	cmp	r7, #15
 8022ed8:	d911      	bls.n	8022efe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022eda:	4b32      	ldr	r3, [pc, #200]	; (8022fa4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022edc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022ee0:	4a31      	ldr	r2, [pc, #196]	; (8022fa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022ee2:	4832      	ldr	r0, [pc, #200]	; (8022fac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022ee4:	f001 fff8 	bl	8024ed8 <__assert_func>
 8022ee8:	2600      	movs	r6, #0
 8022eea:	e7a4      	b.n	8022e36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022eec:	2400      	movs	r4, #0
 8022eee:	e7bd      	b.n	8022e6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022ef0:	463c      	mov	r4, r7
 8022ef2:	e7be      	b.n	8022e72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022ef4:	2000      	movs	r0, #0
 8022ef6:	e7d5      	b.n	8022ea4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022ef8:	2300      	movs	r3, #0
 8022efa:	e7ec      	b.n	8022ed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022efc:	463b      	mov	r3, r7
 8022efe:	2d0f      	cmp	r5, #15
 8022f00:	d8eb      	bhi.n	8022eda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022f02:	b2bf      	uxth	r7, r7
 8022f04:	b2ad      	uxth	r5, r5
 8022f06:	fb07 f205 	mul.w	r2, r7, r5
 8022f0a:	013f      	lsls	r7, r7, #4
 8022f0c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022f10:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022f14:	1abf      	subs	r7, r7, r2
 8022f16:	b2ad      	uxth	r5, r5
 8022f18:	b2bf      	uxth	r7, r7
 8022f1a:	ebac 0c05 	sub.w	ip, ip, r5
 8022f1e:	437c      	muls	r4, r7
 8022f20:	fa1f fc8c 	uxth.w	ip, ip
 8022f24:	fb06 440c 	mla	r4, r6, ip, r4
 8022f28:	fb05 4400 	mla	r4, r5, r0, r4
 8022f2c:	fb02 4303 	mla	r3, r2, r3, r4
 8022f30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022f34:	b353      	cbz	r3, 8022f8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022f36:	4a1e      	ldr	r2, [pc, #120]	; (8022fb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022f38:	7808      	ldrb	r0, [r1, #0]
 8022f3a:	6814      	ldr	r4, [r2, #0]
 8022f3c:	b29a      	uxth	r2, r3
 8022f3e:	43db      	mvns	r3, r3
 8022f40:	b2e5      	uxtb	r5, r4
 8022f42:	b2db      	uxtb	r3, r3
 8022f44:	fb15 f502 	smulbb	r5, r5, r2
 8022f48:	fb00 5003 	mla	r0, r0, r3, r5
 8022f4c:	b280      	uxth	r0, r0
 8022f4e:	1c45      	adds	r5, r0, #1
 8022f50:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022f54:	784d      	ldrb	r5, [r1, #1]
 8022f56:	fb15 f503 	smulbb	r5, r5, r3
 8022f5a:	1200      	asrs	r0, r0, #8
 8022f5c:	7008      	strb	r0, [r1, #0]
 8022f5e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022f62:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022f66:	fb00 5002 	mla	r0, r0, r2, r5
 8022f6a:	b280      	uxth	r0, r0
 8022f6c:	1c45      	adds	r5, r0, #1
 8022f6e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022f72:	1200      	asrs	r0, r0, #8
 8022f74:	7048      	strb	r0, [r1, #1]
 8022f76:	7888      	ldrb	r0, [r1, #2]
 8022f78:	fb10 f303 	smulbb	r3, r0, r3
 8022f7c:	fb04 3202 	mla	r2, r4, r2, r3
 8022f80:	b292      	uxth	r2, r2
 8022f82:	1c53      	adds	r3, r2, #1
 8022f84:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022f88:	1212      	asrs	r2, r2, #8
 8022f8a:	708a      	strb	r2, [r1, #2]
 8022f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f90:	2f0f      	cmp	r7, #15
 8022f92:	d8a2      	bhi.n	8022eda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022f94:	462b      	mov	r3, r5
 8022f96:	4628      	mov	r0, r5
 8022f98:	e7b3      	b.n	8022f02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022f9a:	2d00      	cmp	r5, #0
 8022f9c:	d1a8      	bne.n	8022ef0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022f9e:	462c      	mov	r4, r5
 8022fa0:	e7f8      	b.n	8022f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022fa2:	bf00      	nop
 8022fa4:	080299a3 	.word	0x080299a3
 8022fa8:	08029e9a 	.word	0x08029e9a
 8022fac:	08029a6c 	.word	0x08029a6c
 8022fb0:	2000c530 	.word	0x2000c530

08022fb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fb8:	ed2d 8b08 	vpush	{d8-d11}
 8022fbc:	b095      	sub	sp, #84	; 0x54
 8022fbe:	461c      	mov	r4, r3
 8022fc0:	eeb0 aa40 	vmov.f32	s20, s0
 8022fc4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022fc8:	eef0 9a60 	vmov.f32	s19, s1
 8022fcc:	920e      	str	r2, [sp, #56]	; 0x38
 8022fce:	eeb0 9a41 	vmov.f32	s18, s2
 8022fd2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022fd4:	eeb0 8a62 	vmov.f32	s16, s5
 8022fd8:	9307      	str	r3, [sp, #28]
 8022fda:	eef0 8a43 	vmov.f32	s17, s6
 8022fde:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022fe2:	eef0 ba44 	vmov.f32	s23, s8
 8022fe6:	9013      	str	r0, [sp, #76]	; 0x4c
 8022fe8:	eeb0 ba64 	vmov.f32	s22, s9
 8022fec:	9109      	str	r1, [sp, #36]	; 0x24
 8022fee:	eef0 aa45 	vmov.f32	s21, s10
 8022ff2:	9308      	str	r3, [sp, #32]
 8022ff4:	6850      	ldr	r0, [r2, #4]
 8022ff6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022ffa:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022ffe:	fb00 1803 	mla	r8, r0, r3, r1
 8023002:	6813      	ldr	r3, [r2, #0]
 8023004:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023008:	4498      	add	r8, r3
 802300a:	9b07      	ldr	r3, [sp, #28]
 802300c:	3301      	adds	r3, #1
 802300e:	f023 0301 	bic.w	r3, r3, #1
 8023012:	930b      	str	r3, [sp, #44]	; 0x2c
 8023014:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023016:	681f      	ldr	r7, [r3, #0]
 8023018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802301a:	2b00      	cmp	r3, #0
 802301c:	dc03      	bgt.n	8023026 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802301e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023020:	2b00      	cmp	r3, #0
 8023022:	f340 8238 	ble.w	8023496 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023026:	2c00      	cmp	r4, #0
 8023028:	f340 8109 	ble.w	802323e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802302c:	142a      	asrs	r2, r5, #16
 802302e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023032:	d42b      	bmi.n	802308c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023034:	1c51      	adds	r1, r2, #1
 8023036:	9807      	ldr	r0, [sp, #28]
 8023038:	4288      	cmp	r0, r1
 802303a:	dd2a      	ble.n	8023092 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802303c:	2b00      	cmp	r3, #0
 802303e:	db28      	blt.n	8023092 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023040:	1c59      	adds	r1, r3, #1
 8023042:	9808      	ldr	r0, [sp, #32]
 8023044:	4288      	cmp	r0, r1
 8023046:	dd24      	ble.n	8023092 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023048:	1e63      	subs	r3, r4, #1
 802304a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802304c:	fb02 5203 	mla	r2, r2, r3, r5
 8023050:	1412      	asrs	r2, r2, #16
 8023052:	d429      	bmi.n	80230a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023054:	3201      	adds	r2, #1
 8023056:	9907      	ldr	r1, [sp, #28]
 8023058:	4291      	cmp	r1, r2
 802305a:	dd25      	ble.n	80230a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802305c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802305e:	fb02 6303 	mla	r3, r2, r3, r6
 8023062:	141b      	asrs	r3, r3, #16
 8023064:	d420      	bmi.n	80230a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023066:	3301      	adds	r3, #1
 8023068:	9a08      	ldr	r2, [sp, #32]
 802306a:	429a      	cmp	r2, r3
 802306c:	dd1c      	ble.n	80230a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802306e:	f108 0e03 	add.w	lr, r8, #3
 8023072:	46a1      	mov	r9, r4
 8023074:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8023078:	f1b9 0f00 	cmp.w	r9, #0
 802307c:	f300 8155 	bgt.w	802332a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023080:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023084:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023088:	44a0      	add	r8, r4
 802308a:	e0da      	b.n	8023242 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802308c:	1c50      	adds	r0, r2, #1
 802308e:	f040 80ce 	bne.w	802322e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023092:	9907      	ldr	r1, [sp, #28]
 8023094:	4291      	cmp	r1, r2
 8023096:	f340 80ca 	ble.w	802322e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802309a:	1c59      	adds	r1, r3, #1
 802309c:	f2c0 80c7 	blt.w	802322e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80230a0:	9a08      	ldr	r2, [sp, #32]
 80230a2:	4293      	cmp	r3, r2
 80230a4:	f280 80c3 	bge.w	802322e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80230a8:	46a3      	mov	fp, r4
 80230aa:	46c1      	mov	r9, r8
 80230ac:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80230b0:	f1bb 0f00 	cmp.w	fp, #0
 80230b4:	dde4      	ble.n	8023080 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80230b6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80230ba:	1428      	asrs	r0, r5, #16
 80230bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80230c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80230c4:	920a      	str	r2, [sp, #40]	; 0x28
 80230c6:	f100 8116 	bmi.w	80232f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80230ca:	f100 0c01 	add.w	ip, r0, #1
 80230ce:	9a07      	ldr	r2, [sp, #28]
 80230d0:	4562      	cmp	r2, ip
 80230d2:	f340 8112 	ble.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80230d6:	2b00      	cmp	r3, #0
 80230d8:	f2c0 810f 	blt.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80230dc:	f103 0c01 	add.w	ip, r3, #1
 80230e0:	9a08      	ldr	r2, [sp, #32]
 80230e2:	4562      	cmp	r2, ip
 80230e4:	f340 8109 	ble.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80230e8:	fb03 030a 	mla	r3, r3, sl, r0
 80230ec:	0858      	lsrs	r0, r3, #1
 80230ee:	07da      	lsls	r2, r3, #31
 80230f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80230f2:	5c38      	ldrb	r0, [r7, r0]
 80230f4:	bf54      	ite	pl
 80230f6:	f000 000f 	andpl.w	r0, r0, #15
 80230fa:	1100      	asrmi	r0, r0, #4
 80230fc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023100:	b2c0      	uxtb	r0, r0
 8023102:	2a00      	cmp	r2, #0
 8023104:	f000 80dd 	beq.w	80232c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8023108:	f103 0e01 	add.w	lr, r3, #1
 802310c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023110:	f01e 0f01 	tst.w	lr, #1
 8023114:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023118:	bf0c      	ite	eq
 802311a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802311e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023122:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023126:	fa5f fc8c 	uxtb.w	ip, ip
 802312a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802312e:	b301      	cbz	r1, 8023172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023130:	4453      	add	r3, sl
 8023132:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023136:	07da      	lsls	r2, r3, #31
 8023138:	f103 0301 	add.w	r3, r3, #1
 802313c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023140:	bf54      	ite	pl
 8023142:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023146:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802314a:	07da      	lsls	r2, r3, #31
 802314c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023150:	fa5f fc8c 	uxtb.w	ip, ip
 8023154:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8023158:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802315c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023160:	bf54      	ite	pl
 8023162:	f00c 030f 	andpl.w	r3, ip, #15
 8023166:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802316a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802316e:	b2db      	uxtb	r3, r3
 8023170:	9310      	str	r3, [sp, #64]	; 0x40
 8023172:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023176:	b289      	uxth	r1, r1
 8023178:	fb02 f301 	mul.w	r3, r2, r1
 802317c:	0112      	lsls	r2, r2, #4
 802317e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023182:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8023186:	1ad2      	subs	r2, r2, r3
 8023188:	fa1f fe81 	uxth.w	lr, r1
 802318c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802318e:	b292      	uxth	r2, r2
 8023190:	ebac 0c0e 	sub.w	ip, ip, lr
 8023194:	434a      	muls	r2, r1
 8023196:	fa1f fc8c 	uxth.w	ip, ip
 802319a:	fb00 200c 	mla	r0, r0, ip, r2
 802319e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80231a0:	fb0e 0002 	mla	r0, lr, r2, r0
 80231a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80231a6:	fb03 0002 	mla	r0, r3, r2, r0
 80231aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80231ae:	b3a8      	cbz	r0, 802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80231b0:	4bbb      	ldr	r3, [pc, #748]	; (80234a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80231b2:	28ff      	cmp	r0, #255	; 0xff
 80231b4:	681b      	ldr	r3, [r3, #0]
 80231b6:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80231ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80231be:	b2db      	uxtb	r3, r3
 80231c0:	f000 8092 	beq.w	80232e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80231c4:	b282      	uxth	r2, r0
 80231c6:	43c0      	mvns	r0, r0
 80231c8:	f899 e000 	ldrb.w	lr, [r9]
 80231cc:	fb13 f302 	smulbb	r3, r3, r2
 80231d0:	b2c0      	uxtb	r0, r0
 80231d2:	fb11 f102 	smulbb	r1, r1, r2
 80231d6:	fb0e 3300 	mla	r3, lr, r0, r3
 80231da:	fb1c f202 	smulbb	r2, ip, r2
 80231de:	b29b      	uxth	r3, r3
 80231e0:	f103 0e01 	add.w	lr, r3, #1
 80231e4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80231e8:	121b      	asrs	r3, r3, #8
 80231ea:	f889 3000 	strb.w	r3, [r9]
 80231ee:	f899 3001 	ldrb.w	r3, [r9, #1]
 80231f2:	fb03 1100 	mla	r1, r3, r0, r1
 80231f6:	b289      	uxth	r1, r1
 80231f8:	1c4b      	adds	r3, r1, #1
 80231fa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80231fe:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023202:	fb03 2000 	mla	r0, r3, r0, r2
 8023206:	1209      	asrs	r1, r1, #8
 8023208:	b280      	uxth	r0, r0
 802320a:	f889 1001 	strb.w	r1, [r9, #1]
 802320e:	f100 0c01 	add.w	ip, r0, #1
 8023212:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023216:	1200      	asrs	r0, r0, #8
 8023218:	f889 0002 	strb.w	r0, [r9, #2]
 802321c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802321e:	f109 0903 	add.w	r9, r9, #3
 8023222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023226:	441d      	add	r5, r3
 8023228:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802322a:	441e      	add	r6, r3
 802322c:	e740      	b.n	80230b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802322e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023230:	3c01      	subs	r4, #1
 8023232:	f108 0803 	add.w	r8, r8, #3
 8023236:	441d      	add	r5, r3
 8023238:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802323a:	441e      	add	r6, r3
 802323c:	e6f3      	b.n	8023026 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802323e:	f47f af03 	bne.w	8023048 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023244:	2b00      	cmp	r3, #0
 8023246:	f340 8126 	ble.w	8023496 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802324a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802324e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023250:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023254:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023258:	eef0 6a48 	vmov.f32	s13, s16
 802325c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023260:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023264:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023268:	ee16 5a90 	vmov	r5, s13
 802326c:	eef0 6a68 	vmov.f32	s13, s17
 8023270:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023274:	ee16 6a90 	vmov	r6, s13
 8023278:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802327c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023280:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023284:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023288:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802328c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023290:	ee18 2a10 	vmov	r2, s16
 8023294:	eeb0 8a47 	vmov.f32	s16, s14
 8023298:	fb92 f3f3 	sdiv	r3, r2, r3
 802329c:	ee18 2a90 	vmov	r2, s17
 80232a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80232a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80232a4:	eef0 8a67 	vmov.f32	s17, s15
 80232a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80232ac:	932a      	str	r3, [sp, #168]	; 0xa8
 80232ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80232b2:	3b01      	subs	r3, #1
 80232b4:	9309      	str	r3, [sp, #36]	; 0x24
 80232b6:	bf08      	it	eq
 80232b8:	4614      	moveq	r4, r2
 80232ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80232bc:	bf18      	it	ne
 80232be:	461c      	movne	r4, r3
 80232c0:	e6aa      	b.n	8023018 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80232c2:	2900      	cmp	r1, #0
 80232c4:	f43f af55 	beq.w	8023172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80232c8:	4453      	add	r3, sl
 80232ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80232ce:	07db      	lsls	r3, r3, #31
 80232d0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80232d4:	bf54      	ite	pl
 80232d6:	f00c 030f 	andpl.w	r3, ip, #15
 80232da:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80232de:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80232e2:	b2db      	uxtb	r3, r3
 80232e4:	930c      	str	r3, [sp, #48]	; 0x30
 80232e6:	e744      	b.n	8023172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80232e8:	f889 3000 	strb.w	r3, [r9]
 80232ec:	f889 1001 	strb.w	r1, [r9, #1]
 80232f0:	f889 c002 	strb.w	ip, [r9, #2]
 80232f4:	e792      	b.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80232f6:	1c42      	adds	r2, r0, #1
 80232f8:	d190      	bne.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80232fa:	9a07      	ldr	r2, [sp, #28]
 80232fc:	4282      	cmp	r2, r0
 80232fe:	dd8d      	ble.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023300:	1c5a      	adds	r2, r3, #1
 8023302:	db8b      	blt.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023304:	9a08      	ldr	r2, [sp, #32]
 8023306:	429a      	cmp	r2, r3
 8023308:	dd88      	ble.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802330a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802330c:	9105      	str	r1, [sp, #20]
 802330e:	4649      	mov	r1, r9
 8023310:	9002      	str	r0, [sp, #8]
 8023312:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023314:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023318:	9b08      	ldr	r3, [sp, #32]
 802331a:	463a      	mov	r2, r7
 802331c:	9301      	str	r3, [sp, #4]
 802331e:	9b07      	ldr	r3, [sp, #28]
 8023320:	9300      	str	r3, [sp, #0]
 8023322:	4653      	mov	r3, sl
 8023324:	f7ff fd64 	bl	8022df0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023328:	e778      	b.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802332a:	142a      	asrs	r2, r5, #16
 802332c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023330:	1433      	asrs	r3, r6, #16
 8023332:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023336:	fb0a 2303 	mla	r3, sl, r3, r2
 802333a:	085a      	lsrs	r2, r3, #1
 802333c:	07d9      	lsls	r1, r3, #31
 802333e:	5cba      	ldrb	r2, [r7, r2]
 8023340:	bf54      	ite	pl
 8023342:	f002 020f 	andpl.w	r2, r2, #15
 8023346:	1112      	asrmi	r2, r2, #4
 8023348:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802334c:	b2d2      	uxtb	r2, r2
 802334e:	2800      	cmp	r0, #0
 8023350:	f000 808a 	beq.w	8023468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023354:	f103 0b01 	add.w	fp, r3, #1
 8023358:	ea4f 015b 	mov.w	r1, fp, lsr #1
 802335c:	f01b 0f01 	tst.w	fp, #1
 8023360:	5c79      	ldrb	r1, [r7, r1]
 8023362:	bf0c      	ite	eq
 8023364:	f001 010f 	andeq.w	r1, r1, #15
 8023368:	1109      	asrne	r1, r1, #4
 802336a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802336e:	b2c9      	uxtb	r1, r1
 8023370:	9111      	str	r1, [sp, #68]	; 0x44
 8023372:	f1bc 0f00 	cmp.w	ip, #0
 8023376:	d019      	beq.n	80233ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023378:	4453      	add	r3, sl
 802337a:	0859      	lsrs	r1, r3, #1
 802337c:	f013 0f01 	tst.w	r3, #1
 8023380:	f103 0301 	add.w	r3, r3, #1
 8023384:	5c79      	ldrb	r1, [r7, r1]
 8023386:	bf0c      	ite	eq
 8023388:	f001 010f 	andeq.w	r1, r1, #15
 802338c:	1109      	asrne	r1, r1, #4
 802338e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023392:	b2c9      	uxtb	r1, r1
 8023394:	910d      	str	r1, [sp, #52]	; 0x34
 8023396:	0859      	lsrs	r1, r3, #1
 8023398:	07db      	lsls	r3, r3, #31
 802339a:	5c79      	ldrb	r1, [r7, r1]
 802339c:	bf54      	ite	pl
 802339e:	f001 010f 	andpl.w	r1, r1, #15
 80233a2:	1109      	asrmi	r1, r1, #4
 80233a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80233a8:	b2c9      	uxtb	r1, r1
 80233aa:	9112      	str	r1, [sp, #72]	; 0x48
 80233ac:	b280      	uxth	r0, r0
 80233ae:	fa1f fc8c 	uxth.w	ip, ip
 80233b2:	fb00 f30c 	mul.w	r3, r0, ip
 80233b6:	0100      	lsls	r0, r0, #4
 80233b8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80233bc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80233c0:	1ac0      	subs	r0, r0, r3
 80233c2:	fa1f fc8c 	uxth.w	ip, ip
 80233c6:	b280      	uxth	r0, r0
 80233c8:	eba1 010c 	sub.w	r1, r1, ip
 80233cc:	fa1f fb81 	uxth.w	fp, r1
 80233d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80233d2:	4348      	muls	r0, r1
 80233d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80233d6:	fb02 020b 	mla	r2, r2, fp, r0
 80233da:	fb0c 2c01 	mla	ip, ip, r1, r2
 80233de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80233e0:	fb03 c302 	mla	r3, r3, r2, ip
 80233e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233e8:	b3ab      	cbz	r3, 8023456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80233ea:	4a2d      	ldr	r2, [pc, #180]	; (80234a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80233ec:	2bff      	cmp	r3, #255	; 0xff
 80233ee:	6811      	ldr	r1, [r2, #0]
 80233f0:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80233f4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80233f8:	b2c9      	uxtb	r1, r1
 80233fa:	d045      	beq.n	8023488 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80233fc:	b298      	uxth	r0, r3
 80233fe:	43db      	mvns	r3, r3
 8023400:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023404:	fb11 f100 	smulbb	r1, r1, r0
 8023408:	b2db      	uxtb	r3, r3
 802340a:	fb1c fc00 	smulbb	ip, ip, r0
 802340e:	fb02 1103 	mla	r1, r2, r3, r1
 8023412:	fb1b f000 	smulbb	r0, fp, r0
 8023416:	b289      	uxth	r1, r1
 8023418:	1c4a      	adds	r2, r1, #1
 802341a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802341e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023422:	fb02 cc03 	mla	ip, r2, r3, ip
 8023426:	1209      	asrs	r1, r1, #8
 8023428:	fa1f fc8c 	uxth.w	ip, ip
 802342c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023430:	f10c 0201 	add.w	r2, ip, #1
 8023434:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023438:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802343c:	fb02 0303 	mla	r3, r2, r3, r0
 8023440:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023444:	b29b      	uxth	r3, r3
 8023446:	f80e cc02 	strb.w	ip, [lr, #-2]
 802344a:	1c5a      	adds	r2, r3, #1
 802344c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023450:	121b      	asrs	r3, r3, #8
 8023452:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023456:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023458:	f10e 0e03 	add.w	lr, lr, #3
 802345c:	f109 39ff 	add.w	r9, r9, #4294967295
 8023460:	441d      	add	r5, r3
 8023462:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023464:	441e      	add	r6, r3
 8023466:	e607      	b.n	8023078 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023468:	f1bc 0f00 	cmp.w	ip, #0
 802346c:	d09e      	beq.n	80233ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802346e:	4453      	add	r3, sl
 8023470:	0859      	lsrs	r1, r3, #1
 8023472:	07db      	lsls	r3, r3, #31
 8023474:	5c79      	ldrb	r1, [r7, r1]
 8023476:	bf54      	ite	pl
 8023478:	f001 010f 	andpl.w	r1, r1, #15
 802347c:	1109      	asrmi	r1, r1, #4
 802347e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023482:	b2c9      	uxtb	r1, r1
 8023484:	910d      	str	r1, [sp, #52]	; 0x34
 8023486:	e791      	b.n	80233ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023488:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802348c:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023490:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023494:	e7df      	b.n	8023456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023496:	b015      	add	sp, #84	; 0x54
 8023498:	ecbd 8b08 	vpop	{d8-d11}
 802349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a0:	2000c530 	.word	0x2000c530

080234a4 <CRC_Lock>:
 80234a4:	4a1d      	ldr	r2, [pc, #116]	; (802351c <CRC_Lock+0x78>)
 80234a6:	b530      	push	{r4, r5, lr}
 80234a8:	6813      	ldr	r3, [r2, #0]
 80234aa:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80234ae:	f24c 2540 	movw	r5, #49728	; 0xc240
 80234b2:	f023 0301 	bic.w	r3, r3, #1
 80234b6:	6013      	str	r3, [r2, #0]
 80234b8:	4b19      	ldr	r3, [pc, #100]	; (8023520 <CRC_Lock+0x7c>)
 80234ba:	681a      	ldr	r2, [r3, #0]
 80234bc:	4022      	ands	r2, r4
 80234be:	42aa      	cmp	r2, r5
 80234c0:	d005      	beq.n	80234ce <CRC_Lock+0x2a>
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80234c8:	4023      	ands	r3, r4
 80234ca:	4293      	cmp	r3, r2
 80234cc:	d11d      	bne.n	802350a <CRC_Lock+0x66>
 80234ce:	4b15      	ldr	r3, [pc, #84]	; (8023524 <CRC_Lock+0x80>)
 80234d0:	681b      	ldr	r3, [r3, #0]
 80234d2:	b9d3      	cbnz	r3, 802350a <CRC_Lock+0x66>
 80234d4:	4a14      	ldr	r2, [pc, #80]	; (8023528 <CRC_Lock+0x84>)
 80234d6:	6813      	ldr	r3, [r2, #0]
 80234d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80234dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80234e0:	d006      	beq.n	80234f0 <CRC_Lock+0x4c>
 80234e2:	6813      	ldr	r3, [r2, #0]
 80234e4:	f240 4283 	movw	r2, #1155	; 0x483
 80234e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80234ec:	4293      	cmp	r3, r2
 80234ee:	d10c      	bne.n	802350a <CRC_Lock+0x66>
 80234f0:	4b0e      	ldr	r3, [pc, #56]	; (802352c <CRC_Lock+0x88>)
 80234f2:	2201      	movs	r2, #1
 80234f4:	601a      	str	r2, [r3, #0]
 80234f6:	681a      	ldr	r2, [r3, #0]
 80234f8:	2a00      	cmp	r2, #0
 80234fa:	d1fc      	bne.n	80234f6 <CRC_Lock+0x52>
 80234fc:	4b0c      	ldr	r3, [pc, #48]	; (8023530 <CRC_Lock+0x8c>)
 80234fe:	6018      	str	r0, [r3, #0]
 8023500:	6818      	ldr	r0, [r3, #0]
 8023502:	1a43      	subs	r3, r0, r1
 8023504:	4258      	negs	r0, r3
 8023506:	4158      	adcs	r0, r3
 8023508:	bd30      	pop	{r4, r5, pc}
 802350a:	4b0a      	ldr	r3, [pc, #40]	; (8023534 <CRC_Lock+0x90>)
 802350c:	2201      	movs	r2, #1
 802350e:	601a      	str	r2, [r3, #0]
 8023510:	681a      	ldr	r2, [r3, #0]
 8023512:	2a00      	cmp	r2, #0
 8023514:	d1fc      	bne.n	8023510 <CRC_Lock+0x6c>
 8023516:	4b08      	ldr	r3, [pc, #32]	; (8023538 <CRC_Lock+0x94>)
 8023518:	e7f1      	b.n	80234fe <CRC_Lock+0x5a>
 802351a:	bf00      	nop
 802351c:	e0002000 	.word	0xe0002000
 8023520:	e000ed00 	.word	0xe000ed00
 8023524:	e0042000 	.word	0xe0042000
 8023528:	5c001000 	.word	0x5c001000
 802352c:	58024c08 	.word	0x58024c08
 8023530:	58024c00 	.word	0x58024c00
 8023534:	40023008 	.word	0x40023008
 8023538:	40023000 	.word	0x40023000

0802353c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802353c:	6101      	str	r1, [r0, #16]
 802353e:	4770      	bx	lr

08023540 <_ZN8touchgfx8Gestures4tickEv>:
 8023540:	7b83      	ldrb	r3, [r0, #14]
 8023542:	b14b      	cbz	r3, 8023558 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023544:	8903      	ldrh	r3, [r0, #8]
 8023546:	3301      	adds	r3, #1
 8023548:	b29b      	uxth	r3, r3
 802354a:	2b07      	cmp	r3, #7
 802354c:	8103      	strh	r3, [r0, #8]
 802354e:	bf81      	itttt	hi
 8023550:	2300      	movhi	r3, #0
 8023552:	8143      	strhhi	r3, [r0, #10]
 8023554:	8183      	strhhi	r3, [r0, #12]
 8023556:	7383      	strbhi	r3, [r0, #14]
 8023558:	4770      	bx	lr
	...

0802355c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802355c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023560:	4604      	mov	r4, r0
 8023562:	4698      	mov	r8, r3
 8023564:	8880      	ldrh	r0, [r0, #4]
 8023566:	4617      	mov	r7, r2
 8023568:	4b1d      	ldr	r3, [pc, #116]	; (80235e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802356a:	460e      	mov	r6, r1
 802356c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023570:	eba8 0000 	sub.w	r0, r8, r0
 8023574:	9300      	str	r3, [sp, #0]
 8023576:	2300      	movs	r3, #0
 8023578:	b280      	uxth	r0, r0
 802357a:	8aa2      	ldrh	r2, [r4, #20]
 802357c:	f88d 3004 	strb.w	r3, [sp, #4]
 8023580:	b203      	sxth	r3, r0
 8023582:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023586:	88e1      	ldrh	r1, [r4, #6]
 8023588:	2b00      	cmp	r3, #0
 802358a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802358e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023592:	bfb8      	it	lt
 8023594:	4240      	neglt	r0, r0
 8023596:	f8ad 500c 	strh.w	r5, [sp, #12]
 802359a:	bfb8      	it	lt
 802359c:	b203      	sxthlt	r3, r0
 802359e:	4293      	cmp	r3, r2
 80235a0:	dc08      	bgt.n	80235b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80235a2:	1a69      	subs	r1, r5, r1
 80235a4:	b289      	uxth	r1, r1
 80235a6:	b20b      	sxth	r3, r1
 80235a8:	2b00      	cmp	r3, #0
 80235aa:	bfbc      	itt	lt
 80235ac:	4249      	neglt	r1, r1
 80235ae:	b20b      	sxthlt	r3, r1
 80235b0:	429a      	cmp	r2, r3
 80235b2:	da13      	bge.n	80235dc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80235b4:	6920      	ldr	r0, [r4, #16]
 80235b6:	4669      	mov	r1, sp
 80235b8:	eba8 0606 	sub.w	r6, r8, r6
 80235bc:	1bef      	subs	r7, r5, r7
 80235be:	6803      	ldr	r3, [r0, #0]
 80235c0:	685b      	ldr	r3, [r3, #4]
 80235c2:	4798      	blx	r3
 80235c4:	2300      	movs	r3, #0
 80235c6:	2001      	movs	r0, #1
 80235c8:	8166      	strh	r6, [r4, #10]
 80235ca:	8123      	strh	r3, [r4, #8]
 80235cc:	81a7      	strh	r7, [r4, #12]
 80235ce:	f8a4 8004 	strh.w	r8, [r4, #4]
 80235d2:	80e5      	strh	r5, [r4, #6]
 80235d4:	73a0      	strb	r0, [r4, #14]
 80235d6:	b004      	add	sp, #16
 80235d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80235dc:	2000      	movs	r0, #0
 80235de:	e7fa      	b.n	80235d6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80235e0:	08028b40 	.word	0x08028b40

080235e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80235e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235e6:	461e      	mov	r6, r3
 80235e8:	1e4b      	subs	r3, r1, #1
 80235ea:	b085      	sub	sp, #20
 80235ec:	4604      	mov	r4, r0
 80235ee:	2b01      	cmp	r3, #1
 80235f0:	460d      	mov	r5, r1
 80235f2:	4617      	mov	r7, r2
 80235f4:	d84b      	bhi.n	802368e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80235f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80235fa:	1cd3      	adds	r3, r2, #3
 80235fc:	b29b      	uxth	r3, r3
 80235fe:	2b06      	cmp	r3, #6
 8023600:	d916      	bls.n	8023630 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023602:	f8df c098 	ldr.w	ip, [pc, #152]	; 802369c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023606:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802360a:	f8cd c004 	str.w	ip, [sp, #4]
 802360e:	f04f 0c00 	mov.w	ip, #0
 8023612:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023616:	6900      	ldr	r0, [r0, #16]
 8023618:	f8ad 100c 	strh.w	r1, [sp, #12]
 802361c:	a901      	add	r1, sp, #4
 802361e:	f88d c008 	strb.w	ip, [sp, #8]
 8023622:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023626:	f8ad 300e 	strh.w	r3, [sp, #14]
 802362a:	6803      	ldr	r3, [r0, #0]
 802362c:	689b      	ldr	r3, [r3, #8]
 802362e:	4798      	blx	r3
 8023630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023634:	1cd3      	adds	r3, r2, #3
 8023636:	b29b      	uxth	r3, r3
 8023638:	2b06      	cmp	r3, #6
 802363a:	d916      	bls.n	802366a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802363c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 802369c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023640:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023644:	f8cd c004 	str.w	ip, [sp, #4]
 8023648:	f04f 0c01 	mov.w	ip, #1
 802364c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023650:	6920      	ldr	r0, [r4, #16]
 8023652:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023656:	a901      	add	r1, sp, #4
 8023658:	f88d c008 	strb.w	ip, [sp, #8]
 802365c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023660:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023664:	6803      	ldr	r3, [r0, #0]
 8023666:	689b      	ldr	r3, [r3, #8]
 8023668:	4798      	blx	r3
 802366a:	4b0b      	ldr	r3, [pc, #44]	; (8023698 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 802366c:	a901      	add	r1, sp, #4
 802366e:	6920      	ldr	r0, [r4, #16]
 8023670:	9301      	str	r3, [sp, #4]
 8023672:	2300      	movs	r3, #0
 8023674:	f88d 5008 	strb.w	r5, [sp, #8]
 8023678:	f8ad 700a 	strh.w	r7, [sp, #10]
 802367c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023680:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023684:	6803      	ldr	r3, [r0, #0]
 8023686:	681b      	ldr	r3, [r3, #0]
 8023688:	4798      	blx	r3
 802368a:	b005      	add	sp, #20
 802368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802368e:	2900      	cmp	r1, #0
 8023690:	d1eb      	bne.n	802366a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023692:	80a2      	strh	r2, [r4, #4]
 8023694:	80c6      	strh	r6, [r0, #6]
 8023696:	e7e8      	b.n	802366a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023698:	08028b2c 	.word	0x08028b2c
 802369c:	08028b54 	.word	0x08028b54

080236a0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80236a0:	10c9      	asrs	r1, r1, #3
 80236a2:	2900      	cmp	r1, #0
 80236a4:	bfb8      	it	lt
 80236a6:	4249      	neglt	r1, r1
 80236a8:	2801      	cmp	r0, #1
 80236aa:	d108      	bne.n	80236be <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80236ac:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80236b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80236b4:	4601      	mov	r1, r0
 80236b6:	dd02      	ble.n	80236be <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80236b8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80236bc:	4770      	bx	lr
 80236be:	29ff      	cmp	r1, #255	; 0xff
 80236c0:	bfa8      	it	ge
 80236c2:	21ff      	movge	r1, #255	; 0xff
 80236c4:	4608      	mov	r0, r1
 80236c6:	4770      	bx	lr

080236c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80236c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236cc:	688c      	ldr	r4, [r1, #8]
 80236ce:	b087      	sub	sp, #28
 80236d0:	4607      	mov	r7, r0
 80236d2:	2c00      	cmp	r4, #0
 80236d4:	db2b      	blt.n	802372e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80236d6:	6803      	ldr	r3, [r0, #0]
 80236d8:	68da      	ldr	r2, [r3, #12]
 80236da:	42a2      	cmp	r2, r4
 80236dc:	dd27      	ble.n	802372e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80236de:	681a      	ldr	r2, [r3, #0]
 80236e0:	691e      	ldr	r6, [r3, #16]
 80236e2:	68cd      	ldr	r5, [r1, #12]
 80236e4:	fb06 2604 	mla	r6, r6, r4, r2
 80236e8:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80236ec:	698a      	ldr	r2, [r1, #24]
 80236ee:	f893 a004 	ldrb.w	sl, [r3, #4]
 80236f2:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80236f6:	9205      	str	r2, [sp, #20]
 80236f8:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80236fc:	9b05      	ldr	r3, [sp, #20]
 80236fe:	6839      	ldr	r1, [r7, #0]
 8023700:	eb03 0c02 	add.w	ip, r3, r2
 8023704:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023708:	6889      	ldr	r1, [r1, #8]
 802370a:	1898      	adds	r0, r3, r2
 802370c:	4288      	cmp	r0, r1
 802370e:	db02      	blt.n	8023716 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023710:	1a8b      	subs	r3, r1, r2
 8023712:	2b00      	cmp	r3, #0
 8023714:	dd09      	ble.n	802372a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023716:	6878      	ldr	r0, [r7, #4]
 8023718:	6801      	ldr	r1, [r0, #0]
 802371a:	9400      	str	r4, [sp, #0]
 802371c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023720:	4653      	mov	r3, sl
 8023722:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023726:	4631      	mov	r1, r6
 8023728:	47d8      	blx	fp
 802372a:	3d01      	subs	r5, #1
 802372c:	d1e4      	bne.n	80236f8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802372e:	b007      	add	sp, #28
 8023730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023734 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023734:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023738:	b90b      	cbnz	r3, 802373e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802373a:	f001 b974 	b.w	8024a26 <_ZN8touchgfx7Outline6lineToEii>
 802373e:	4770      	bx	lr

08023740 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023744:	4604      	mov	r4, r0
 8023746:	2600      	movs	r6, #0
 8023748:	4b8e      	ldr	r3, [pc, #568]	; (8023984 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802374a:	f100 0518 	add.w	r5, r0, #24
 802374e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8023752:	b086      	sub	sp, #24
 8023754:	4690      	mov	r8, r2
 8023756:	e9c0 3100 	strd	r3, r1, [r0]
 802375a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802375e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8023762:	4628      	mov	r0, r5
 8023764:	f001 fb75 	bl	8024e52 <_ZN8touchgfx15RenderingBufferC1Ev>
 8023768:	4638      	mov	r0, r7
 802376a:	f000 fb45 	bl	8023df8 <_ZN8touchgfx7OutlineC1Ev>
 802376e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8023772:	f001 fb23 	bl	8024dbc <_ZN8touchgfx8ScanlineC1Ev>
 8023776:	2301      	movs	r3, #1
 8023778:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 802377c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8023780:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023784:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8023788:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 802378c:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8023790:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8023794:	f7f4 fbe6 	bl	8017f64 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023798:	b928      	cbnz	r0, 80237a6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802379a:	4b7b      	ldr	r3, [pc, #492]	; (8023988 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802379c:	2118      	movs	r1, #24
 802379e:	4a7b      	ldr	r2, [pc, #492]	; (802398c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80237a0:	487b      	ldr	r0, [pc, #492]	; (8023990 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80237a2:	f001 fb99 	bl	8024ed8 <__assert_func>
 80237a6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80237aa:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80237ae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80237b2:	4410      	add	r0, r2
 80237b4:	9602      	str	r6, [sp, #8]
 80237b6:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80237ba:	b280      	uxth	r0, r0
 80237bc:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80237c0:	fa0f fa80 	sxth.w	sl, r0
 80237c4:	f1ba 0f00 	cmp.w	sl, #0
 80237c8:	dd70      	ble.n	80238ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80237ca:	4591      	cmp	r9, r2
 80237cc:	dd6e      	ble.n	80238ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80237ce:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80237d2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80237d6:	440b      	add	r3, r1
 80237d8:	b29b      	uxth	r3, r3
 80237da:	b21e      	sxth	r6, r3
 80237dc:	2e00      	cmp	r6, #0
 80237de:	dd65      	ble.n	80238ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80237e0:	458e      	cmp	lr, r1
 80237e2:	dd63      	ble.n	80238ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80237e4:	45d1      	cmp	r9, sl
 80237e6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80237ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80237ee:	bfb8      	it	lt
 80237f0:	fa1f f089 	uxthlt.w	r0, r9
 80237f4:	45b6      	cmp	lr, r6
 80237f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80237fa:	bfb8      	it	lt
 80237fc:	fa1f f38e 	uxthlt.w	r3, lr
 8023800:	1a80      	subs	r0, r0, r2
 8023802:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023806:	1a5b      	subs	r3, r3, r1
 8023808:	f8ad 000c 	strh.w	r0, [sp, #12]
 802380c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023810:	f10d 0808 	add.w	r8, sp, #8
 8023814:	ae04      	add	r6, sp, #16
 8023816:	e898 0003 	ldmia.w	r8, {r0, r1}
 802381a:	e886 0003 	stmia.w	r6, {r0, r1}
 802381e:	f8dc 3000 	ldr.w	r3, [ip]
 8023822:	4660      	mov	r0, ip
 8023824:	4631      	mov	r1, r6
 8023826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023828:	4798      	blx	r3
 802382a:	6861      	ldr	r1, [r4, #4]
 802382c:	4640      	mov	r0, r8
 802382e:	3104      	adds	r1, #4
 8023830:	f7f5 fa06 	bl	8018c40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023834:	4630      	mov	r0, r6
 8023836:	f7f5 fa1b 	bl	8018c70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802383a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802383e:	f7f4 fb21 	bl	8017e84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023842:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8023846:	4638      	mov	r0, r7
 8023848:	f000 fab2 	bl	8023db0 <_ZN8touchgfx7Outline5resetEv>
 802384c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023850:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023854:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8023858:	015b      	lsls	r3, r3, #5
 802385a:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 802385e:	0152      	lsls	r2, r2, #5
 8023860:	60e3      	str	r3, [r4, #12]
 8023862:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023866:	60a2      	str	r2, [r4, #8]
 8023868:	015b      	lsls	r3, r3, #5
 802386a:	6123      	str	r3, [r4, #16]
 802386c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8023870:	015b      	lsls	r3, r3, #5
 8023872:	6163      	str	r3, [r4, #20]
 8023874:	4b47      	ldr	r3, [pc, #284]	; (8023994 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8023876:	6818      	ldr	r0, [r3, #0]
 8023878:	6803      	ldr	r3, [r0, #0]
 802387a:	6a1b      	ldr	r3, [r3, #32]
 802387c:	4798      	blx	r3
 802387e:	4606      	mov	r6, r0
 8023880:	f7ec f8a2 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8023884:	6803      	ldr	r3, [r0, #0]
 8023886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023888:	4798      	blx	r3
 802388a:	4607      	mov	r7, r0
 802388c:	f7ec f89c 	bl	800f9c8 <_ZN8touchgfx3HAL3lcdEv>
 8023890:	6803      	ldr	r3, [r0, #0]
 8023892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023894:	4798      	blx	r3
 8023896:	280c      	cmp	r0, #12
 8023898:	d854      	bhi.n	8023944 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802389a:	e8df f000 	tbb	[pc, r0]
 802389e:	554b      	.short	0x554b
 80238a0:	2b6e0a66 	.word	0x2b6e0a66
 80238a4:	5f5f5f3b 	.word	0x5f5f5f3b
 80238a8:	5f5f      	.short	0x5f5f
 80238aa:	6e          	.byte	0x6e
 80238ab:	00          	.byte	0x00
 80238ac:	2300      	movs	r3, #0
 80238ae:	9303      	str	r3, [sp, #12]
 80238b0:	e7ae      	b.n	8023810 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80238b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80238b6:	2108      	movs	r1, #8
 80238b8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80238bc:	fb92 f1f1 	sdiv	r1, r2, r1
 80238c0:	fb07 1303 	mla	r3, r7, r3, r1
 80238c4:	441e      	add	r6, r3
 80238c6:	4253      	negs	r3, r2
 80238c8:	f002 0207 	and.w	r2, r2, #7
 80238cc:	f003 0307 	and.w	r3, r3, #7
 80238d0:	bf58      	it	pl
 80238d2:	425a      	negpl	r2, r3
 80238d4:	b2d2      	uxtb	r2, r2
 80238d6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80238da:	4628      	mov	r0, r5
 80238dc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80238e0:	66e1      	str	r1, [r4, #108]	; 0x6c
 80238e2:	e9cd 1700 	strd	r1, r7, [sp]
 80238e6:	4631      	mov	r1, r6
 80238e8:	f001 fabb 	bl	8024e62 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80238ec:	4620      	mov	r0, r4
 80238ee:	b006      	add	sp, #24
 80238f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80238f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80238f8:	2104      	movs	r1, #4
 80238fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80238fe:	fb92 f1f1 	sdiv	r1, r2, r1
 8023902:	fb07 1303 	mla	r3, r7, r3, r1
 8023906:	441e      	add	r6, r3
 8023908:	4253      	negs	r3, r2
 802390a:	f002 0203 	and.w	r2, r2, #3
 802390e:	f003 0303 	and.w	r3, r3, #3
 8023912:	e7dd      	b.n	80238d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8023914:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023918:	2102      	movs	r1, #2
 802391a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802391e:	2a00      	cmp	r2, #0
 8023920:	fb92 f1f1 	sdiv	r1, r2, r1
 8023924:	f002 0201 	and.w	r2, r2, #1
 8023928:	fb07 1303 	mla	r3, r7, r3, r1
 802392c:	bfb8      	it	lt
 802392e:	4252      	neglt	r2, r2
 8023930:	441e      	add	r6, r3
 8023932:	e7cf      	b.n	80238d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023934:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023938:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802393c:	437b      	muls	r3, r7
 802393e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023942:	441e      	add	r6, r3
 8023944:	2200      	movs	r2, #0
 8023946:	e7c6      	b.n	80238d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023948:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802394c:	2103      	movs	r1, #3
 802394e:	fb07 f203 	mul.w	r2, r7, r3
 8023952:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023956:	fb13 2301 	smlabb	r3, r3, r1, r2
 802395a:	e7f2      	b.n	8023942 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802395c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023960:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023964:	fb07 2303 	mla	r3, r7, r3, r2
 8023968:	e7eb      	b.n	8023942 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802396a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802396e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023972:	437b      	muls	r3, r7
 8023974:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023978:	e7e3      	b.n	8023942 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802397a:	4b07      	ldr	r3, [pc, #28]	; (8023998 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802397c:	2156      	movs	r1, #86	; 0x56
 802397e:	4a03      	ldr	r2, [pc, #12]	; (802398c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023980:	e70e      	b.n	80237a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8023982:	bf00      	nop
 8023984:	0802a1c0 	.word	0x0802a1c0
 8023988:	0802a10a 	.word	0x0802a10a
 802398c:	0802a1c8 	.word	0x0802a1c8
 8023990:	0802a166 	.word	0x0802a166
 8023994:	2000c508 	.word	0x2000c508
 8023998:	0802a19a 	.word	0x0802a19a

0802399c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802399c:	6812      	ldr	r2, [r2, #0]
 802399e:	2a00      	cmp	r2, #0
 80239a0:	db0b      	blt.n	80239ba <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80239a2:	9800      	ldr	r0, [sp, #0]
 80239a4:	6800      	ldr	r0, [r0, #0]
 80239a6:	4290      	cmp	r0, r2
 80239a8:	bfd4      	ite	le
 80239aa:	2002      	movle	r0, #2
 80239ac:	2000      	movgt	r0, #0
 80239ae:	680a      	ldr	r2, [r1, #0]
 80239b0:	2a00      	cmp	r2, #0
 80239b2:	da04      	bge.n	80239be <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80239b4:	f040 0004 	orr.w	r0, r0, #4
 80239b8:	4770      	bx	lr
 80239ba:	2001      	movs	r0, #1
 80239bc:	e7f7      	b.n	80239ae <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	4293      	cmp	r3, r2
 80239c2:	bfd8      	it	le
 80239c4:	f040 0008 	orrle.w	r0, r0, #8
 80239c8:	4770      	bx	lr
	...

080239cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80239cc:	4b07      	ldr	r3, [pc, #28]	; (80239ec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80239ce:	b510      	push	{r4, lr}
 80239d0:	781b      	ldrb	r3, [r3, #0]
 80239d2:	2b01      	cmp	r3, #1
 80239d4:	d108      	bne.n	80239e8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80239d6:	6843      	ldr	r3, [r0, #4]
 80239d8:	6814      	ldr	r4, [r2, #0]
 80239da:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80239de:	680b      	ldr	r3, [r1, #0]
 80239e0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80239e4:	6013      	str	r3, [r2, #0]
 80239e6:	600c      	str	r4, [r1, #0]
 80239e8:	bd10      	pop	{r4, pc}
 80239ea:	bf00      	nop
 80239ec:	2000c500 	.word	0x2000c500

080239f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80239f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239f2:	b085      	sub	sp, #20
 80239f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80239f8:	4604      	mov	r4, r0
 80239fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80239fe:	b33b      	cbz	r3, 8023a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023a00:	aa02      	add	r2, sp, #8
 8023a02:	a903      	add	r1, sp, #12
 8023a04:	f7ff ffe2 	bl	80239cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023a08:	68a3      	ldr	r3, [r4, #8]
 8023a0a:	9e03      	ldr	r6, [sp, #12]
 8023a0c:	aa02      	add	r2, sp, #8
 8023a0e:	9f02      	ldr	r7, [sp, #8]
 8023a10:	a903      	add	r1, sp, #12
 8023a12:	1af6      	subs	r6, r6, r3
 8023a14:	68e3      	ldr	r3, [r4, #12]
 8023a16:	4620      	mov	r0, r4
 8023a18:	1aff      	subs	r7, r7, r3
 8023a1a:	f104 0314 	add.w	r3, r4, #20
 8023a1e:	9603      	str	r6, [sp, #12]
 8023a20:	9300      	str	r3, [sp, #0]
 8023a22:	f104 0310 	add.w	r3, r4, #16
 8023a26:	9702      	str	r7, [sp, #8]
 8023a28:	f7ff ffb8 	bl	802399c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023a2c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023a30:	4605      	mov	r5, r0
 8023a32:	b97b      	cbnz	r3, 8023a54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023a34:	463a      	mov	r2, r7
 8023a36:	4631      	mov	r1, r6
 8023a38:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023a3c:	f7ff fe7a 	bl	8023734 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023a40:	9b03      	ldr	r3, [sp, #12]
 8023a42:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8023a46:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8023a4a:	9b02      	ldr	r3, [sp, #8]
 8023a4c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023a50:	b005      	add	sp, #20
 8023a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a54:	b110      	cbz	r0, 8023a5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8023a56:	ea13 0200 	ands.w	r2, r3, r0
 8023a5a:	d11c      	bne.n	8023a96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023a5c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8023a60:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8023a64:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8023a68:	b188      	cbz	r0, 8023a8e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023a6a:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8023a6e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023a72:	b913      	cbnz	r3, 8023a7a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8023a74:	4630      	mov	r0, r6
 8023a76:	f001 f806 	bl	8024a86 <_ZN8touchgfx7Outline6moveToEii>
 8023a7a:	2300      	movs	r3, #0
 8023a7c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023a80:	2301      	movs	r3, #1
 8023a82:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023a86:	4630      	mov	r0, r6
 8023a88:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023a8c:	e7d6      	b.n	8023a3c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8023a8e:	4630      	mov	r0, r6
 8023a90:	f7ff fe50 	bl	8023734 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023a94:	e7f7      	b.n	8023a86 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8023a96:	4615      	mov	r5, r2
 8023a98:	e7d2      	b.n	8023a40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08023a9a <_ZN8touchgfx6Canvas5closeEv>:
 8023a9a:	b538      	push	{r3, r4, r5, lr}
 8023a9c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023aa0:	4604      	mov	r4, r0
 8023aa2:	b993      	cbnz	r3, 8023aca <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023aa4:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8023aa8:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8023aac:	4213      	tst	r3, r2
 8023aae:	d10c      	bne.n	8023aca <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023ab0:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8023ab4:	b123      	cbz	r3, 8023ac0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023ab6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8023aba:	4628      	mov	r0, r5
 8023abc:	f7ff fe3a 	bl	8023734 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023ac0:	4628      	mov	r0, r5
 8023ac2:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8023ac6:	f7ff fe35 	bl	8023734 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023aca:	2300      	movs	r3, #0
 8023acc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023ad0:	bd38      	pop	{r3, r4, r5, pc}

08023ad2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ad4:	b085      	sub	sp, #20
 8023ad6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023ada:	4604      	mov	r4, r0
 8023adc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023ae0:	b353      	cbz	r3, 8023b38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023ae2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023ae6:	b90b      	cbnz	r3, 8023aec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023ae8:	f7ff ffd7 	bl	8023a9a <_ZN8touchgfx6Canvas5closeEv>
 8023aec:	aa02      	add	r2, sp, #8
 8023aee:	a903      	add	r1, sp, #12
 8023af0:	4620      	mov	r0, r4
 8023af2:	f7ff ff6b 	bl	80239cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023af6:	68a3      	ldr	r3, [r4, #8]
 8023af8:	9d03      	ldr	r5, [sp, #12]
 8023afa:	aa02      	add	r2, sp, #8
 8023afc:	9e02      	ldr	r6, [sp, #8]
 8023afe:	a903      	add	r1, sp, #12
 8023b00:	1aed      	subs	r5, r5, r3
 8023b02:	68e3      	ldr	r3, [r4, #12]
 8023b04:	4620      	mov	r0, r4
 8023b06:	1af6      	subs	r6, r6, r3
 8023b08:	f104 0314 	add.w	r3, r4, #20
 8023b0c:	9503      	str	r5, [sp, #12]
 8023b0e:	9300      	str	r3, [sp, #0]
 8023b10:	f104 0310 	add.w	r3, r4, #16
 8023b14:	9602      	str	r6, [sp, #8]
 8023b16:	f7ff ff41 	bl	802399c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023b1a:	4607      	mov	r7, r0
 8023b1c:	b170      	cbz	r0, 8023b3c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8023b1e:	2301      	movs	r3, #1
 8023b20:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023b24:	9a03      	ldr	r2, [sp, #12]
 8023b26:	9b02      	ldr	r3, [sp, #8]
 8023b28:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8023b2c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8023b30:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8023b34:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8023b38:	b005      	add	sp, #20
 8023b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b3c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023b40:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8023b44:	b92b      	cbnz	r3, 8023b52 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8023b46:	4632      	mov	r2, r6
 8023b48:	4629      	mov	r1, r5
 8023b4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023b4e:	f000 ff9a 	bl	8024a86 <_ZN8touchgfx7Outline6moveToEii>
 8023b52:	2300      	movs	r3, #0
 8023b54:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023b58:	2301      	movs	r3, #1
 8023b5a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023b5e:	e7e1      	b.n	8023b24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08023b60 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8023b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b64:	4604      	mov	r4, r0
 8023b66:	b087      	sub	sp, #28
 8023b68:	9105      	str	r1, [sp, #20]
 8023b6a:	f001 f8d0 	bl	8024d0e <_ZN8touchgfx7Outline8getCellsEv>
 8023b6e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8023b72:	4605      	mov	r5, r0
 8023b74:	f1b9 0f00 	cmp.w	r9, #0
 8023b78:	d103      	bne.n	8023b82 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8023b7a:	2001      	movs	r0, #1
 8023b7c:	b007      	add	sp, #28
 8023b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b82:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8023b86:	2e00      	cmp	r6, #0
 8023b88:	d139      	bne.n	8023bfe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8023b8a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8023b8e:	f105 0708 	add.w	r7, r5, #8
 8023b92:	4640      	mov	r0, r8
 8023b94:	f001 f8fd 	bl	8024d92 <_ZN8touchgfx8Scanline5resetEv>
 8023b98:	f109 33ff 	add.w	r3, r9, #4294967295
 8023b9c:	9303      	str	r3, [sp, #12]
 8023b9e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8023ba2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8023ba6:	46da      	mov	sl, fp
 8023ba8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8023bac:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8023bb0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023bb4:	9b03      	ldr	r3, [sp, #12]
 8023bb6:	4416      	add	r6, r2
 8023bb8:	9504      	str	r5, [sp, #16]
 8023bba:	463d      	mov	r5, r7
 8023bbc:	3b01      	subs	r3, #1
 8023bbe:	9303      	str	r3, [sp, #12]
 8023bc0:	3301      	adds	r3, #1
 8023bc2:	d01e      	beq.n	8023c02 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023bc4:	3708      	adds	r7, #8
 8023bc6:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8023bca:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8023bce:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023bd2:	4290      	cmp	r0, r2
 8023bd4:	d11e      	bne.n	8023c14 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8023bd6:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8023bda:	4411      	add	r1, r2
 8023bdc:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023be0:	e7e8      	b.n	8023bb4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023be2:	1c91      	adds	r1, r2, #2
 8023be4:	f04f 0301 	mov.w	r3, #1
 8023be8:	65e1      	str	r1, [r4, #92]	; 0x5c
 8023bea:	8053      	strh	r3, [r2, #2]
 8023bec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023bee:	1c91      	adds	r1, r2, #2
 8023bf0:	65a1      	str	r1, [r4, #88]	; 0x58
 8023bf2:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023bf6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023bf8:	3201      	adds	r2, #1
 8023bfa:	6562      	str	r2, [r4, #84]	; 0x54
 8023bfc:	e03a      	b.n	8023c74 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023bfe:	2000      	movs	r0, #0
 8023c00:	e7bc      	b.n	8023b7c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023c02:	b951      	cbnz	r1, 8023c1a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023c04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d0b7      	beq.n	8023b7a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023c0a:	4641      	mov	r1, r8
 8023c0c:	9805      	ldr	r0, [sp, #20]
 8023c0e:	f7ff fd5b 	bl	80236c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023c12:	e7b2      	b.n	8023b7a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023c14:	2900      	cmp	r1, #0
 8023c16:	d035      	beq.n	8023c84 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023c18:	9504      	str	r5, [sp, #16]
 8023c1a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023c1e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023c22:	f7ff fd3d 	bl	80236a0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023c26:	4605      	mov	r5, r0
 8023c28:	b330      	cbz	r0, 8023c78 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023c2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023c2c:	b182      	cbz	r2, 8023c50 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023c2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023c30:	454a      	cmp	r2, r9
 8023c32:	d00d      	beq.n	8023c50 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023c34:	4641      	mov	r1, r8
 8023c36:	9805      	ldr	r0, [sp, #20]
 8023c38:	f7ff fd46 	bl	80236c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023c3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023c40:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023c42:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023c46:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023c48:	2300      	movs	r3, #0
 8023c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023c4c:	6563      	str	r3, [r4, #84]	; 0x54
 8023c4e:	65a2      	str	r2, [r4, #88]	; 0x58
 8023c50:	f1bb 0f00 	cmp.w	fp, #0
 8023c54:	db10      	blt.n	8023c78 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023c56:	f7f4 f993 	bl	8017f80 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023c5a:	4583      	cmp	fp, r0
 8023c5c:	d20c      	bcs.n	8023c78 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023c5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023c60:	f802 500b 	strb.w	r5, [r2, fp]
 8023c64:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8023c66:	3201      	adds	r2, #1
 8023c68:	455a      	cmp	r2, fp
 8023c6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023c6c:	d1b9      	bne.n	8023be2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8023c6e:	8811      	ldrh	r1, [r2, #0]
 8023c70:	3101      	adds	r1, #1
 8023c72:	8011      	strh	r1, [r2, #0]
 8023c74:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023c78:	9b03      	ldr	r3, [sp, #12]
 8023c7a:	3301      	adds	r3, #1
 8023c7c:	d0c2      	beq.n	8023c04 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023c7e:	f10b 0a01 	add.w	sl, fp, #1
 8023c82:	9d04      	ldr	r5, [sp, #16]
 8023c84:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023c88:	4553      	cmp	r3, sl
 8023c8a:	dd88      	ble.n	8023b9e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023c8c:	01b1      	lsls	r1, r6, #6
 8023c8e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023c92:	f7ff fd05 	bl	80236a0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023c96:	4683      	mov	fp, r0
 8023c98:	2800      	cmp	r0, #0
 8023c9a:	d080      	beq.n	8023b9e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023c9e:	b183      	cbz	r3, 8023cc2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023ca0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023ca2:	454b      	cmp	r3, r9
 8023ca4:	d00d      	beq.n	8023cc2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023ca6:	4641      	mov	r1, r8
 8023ca8:	9805      	ldr	r0, [sp, #20]
 8023caa:	f7ff fd0d 	bl	80236c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023cae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023cb2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023cb6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023cb8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023cbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8023cbe:	2300      	movs	r3, #0
 8023cc0:	6563      	str	r3, [r4, #84]	; 0x54
 8023cc2:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023cc6:	464a      	mov	r2, r9
 8023cc8:	f8cd b000 	str.w	fp, [sp]
 8023ccc:	4651      	mov	r1, sl
 8023cce:	eba3 030a 	sub.w	r3, r3, sl
 8023cd2:	4640      	mov	r0, r8
 8023cd4:	f001 f884 	bl	8024de0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023cd8:	e761      	b.n	8023b9e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023cda <_ZN8touchgfx6Canvas6renderEv>:
 8023cda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023cdc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023ce0:	4604      	mov	r4, r0
 8023ce2:	b913      	cbnz	r3, 8023cea <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023ce4:	2001      	movs	r0, #1
 8023ce6:	b003      	add	sp, #12
 8023ce8:	bd30      	pop	{r4, r5, pc}
 8023cea:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d131      	bne.n	8023d56 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023cf2:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	d0f4      	beq.n	8023ce4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023cfa:	6840      	ldr	r0, [r0, #4]
 8023cfc:	6803      	ldr	r3, [r0, #0]
 8023cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023d00:	4798      	blx	r3
 8023d02:	2800      	cmp	r0, #0
 8023d04:	d0ee      	beq.n	8023ce4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023d06:	4620      	mov	r0, r4
 8023d08:	f7ff fec7 	bl	8023a9a <_ZN8touchgfx6Canvas5closeEv>
 8023d0c:	6860      	ldr	r0, [r4, #4]
 8023d0e:	6803      	ldr	r3, [r0, #0]
 8023d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023d12:	4798      	blx	r3
 8023d14:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023d18:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023d1c:	f7f3 f8c9 	bl	8016eb2 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023d20:	6860      	ldr	r0, [r4, #4]
 8023d22:	6803      	ldr	r3, [r0, #0]
 8023d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023d26:	4798      	blx	r3
 8023d28:	4605      	mov	r5, r0
 8023d2a:	6860      	ldr	r0, [r4, #4]
 8023d2c:	6803      	ldr	r3, [r0, #0]
 8023d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023d30:	4798      	blx	r3
 8023d32:	4601      	mov	r1, r0
 8023d34:	4628      	mov	r0, r5
 8023d36:	f7f3 f8bf 	bl	8016eb8 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023d3a:	6860      	ldr	r0, [r4, #4]
 8023d3c:	6803      	ldr	r3, [r0, #0]
 8023d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023d40:	4798      	blx	r3
 8023d42:	f104 0318 	add.w	r3, r4, #24
 8023d46:	4669      	mov	r1, sp
 8023d48:	e9cd 3000 	strd	r3, r0, [sp]
 8023d4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023d50:	f7ff ff06 	bl	8023b60 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023d54:	e7c7      	b.n	8023ce6 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8023d56:	2000      	movs	r0, #0
 8023d58:	e7c5      	b.n	8023ce6 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023d5c <_ZN8touchgfx6CanvasD1Ev>:
 8023d5c:	b538      	push	{r3, r4, r5, lr}
 8023d5e:	4605      	mov	r5, r0
 8023d60:	4b08      	ldr	r3, [pc, #32]	; (8023d84 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023d62:	4604      	mov	r4, r0
 8023d64:	f845 3b2c 	str.w	r3, [r5], #44
 8023d68:	4b07      	ldr	r3, [pc, #28]	; (8023d88 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023d6a:	6818      	ldr	r0, [r3, #0]
 8023d6c:	6803      	ldr	r3, [r0, #0]
 8023d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023d70:	4798      	blx	r3
 8023d72:	4628      	mov	r0, r5
 8023d74:	f000 f814 	bl	8023da0 <_ZN8touchgfx7OutlineD1Ev>
 8023d78:	f104 0018 	add.w	r0, r4, #24
 8023d7c:	f001 f870 	bl	8024e60 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023d80:	4620      	mov	r0, r4
 8023d82:	bd38      	pop	{r3, r4, r5, pc}
 8023d84:	0802a1c0 	.word	0x0802a1c0
 8023d88:	2000c508 	.word	0x2000c508

08023d8c <_ZN8touchgfx6CanvasD0Ev>:
 8023d8c:	b510      	push	{r4, lr}
 8023d8e:	4604      	mov	r4, r0
 8023d90:	f7ff ffe4 	bl	8023d5c <_ZN8touchgfx6CanvasD1Ev>
 8023d94:	21b8      	movs	r1, #184	; 0xb8
 8023d96:	4620      	mov	r0, r4
 8023d98:	f001 f870 	bl	8024e7c <_ZdlPvj>
 8023d9c:	4620      	mov	r0, r4
 8023d9e:	bd10      	pop	{r4, pc}

08023da0 <_ZN8touchgfx7OutlineD1Ev>:
 8023da0:	4770      	bx	lr

08023da2 <_ZN8touchgfx7OutlineD0Ev>:
 8023da2:	b510      	push	{r4, lr}
 8023da4:	4604      	mov	r4, r0
 8023da6:	2148      	movs	r1, #72	; 0x48
 8023da8:	f001 f868 	bl	8024e7c <_ZdlPvj>
 8023dac:	4620      	mov	r0, r4
 8023dae:	bd10      	pop	{r4, pc}

08023db0 <_ZN8touchgfx7Outline5resetEv>:
 8023db0:	b510      	push	{r4, lr}
 8023db2:	4604      	mov	r4, r0
 8023db4:	f7f4 f8fc 	bl	8017fb0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023db8:	60e0      	str	r0, [r4, #12]
 8023dba:	f7f4 f8ff 	bl	8017fbc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023dbe:	68e3      	ldr	r3, [r4, #12]
 8023dc0:	2200      	movs	r2, #0
 8023dc2:	08c0      	lsrs	r0, r0, #3
 8023dc4:	6123      	str	r3, [r4, #16]
 8023dc6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023dca:	6060      	str	r0, [r4, #4]
 8023dcc:	82a3      	strh	r3, [r4, #20]
 8023dce:	82e3      	strh	r3, [r4, #22]
 8023dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023dd2:	60a2      	str	r2, [r4, #8]
 8023dd4:	f023 0301 	bic.w	r3, r3, #1
 8023dd8:	8322      	strh	r2, [r4, #24]
 8023dda:	8362      	strh	r2, [r4, #26]
 8023ddc:	f043 0302 	orr.w	r3, r3, #2
 8023de0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023de4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023de6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023dea:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023df2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023df6:	bd10      	pop	{r4, pc}

08023df8 <_ZN8touchgfx7OutlineC1Ev>:
 8023df8:	4b0f      	ldr	r3, [pc, #60]	; (8023e38 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023dfa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023dfe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023e02:	b510      	push	{r4, lr}
 8023e04:	6003      	str	r3, [r0, #0]
 8023e06:	2300      	movs	r3, #0
 8023e08:	4604      	mov	r4, r0
 8023e0a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023e0e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023e12:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023e16:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023e1a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023e1e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023e22:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023e26:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023e2a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023e2e:	f7ff ffbf 	bl	8023db0 <_ZN8touchgfx7Outline5resetEv>
 8023e32:	4620      	mov	r0, r4
 8023e34:	bd10      	pop	{r4, pc}
 8023e36:	bf00      	nop
 8023e38:	0802a220 	.word	0x0802a220

08023e3c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e40:	b093      	sub	sp, #76	; 0x4c
 8023e42:	4604      	mov	r4, r0
 8023e44:	1156      	asrs	r6, r2, #5
 8023e46:	f002 0e1f 	and.w	lr, r2, #31
 8023e4a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023e4c:	9305      	str	r3, [sp, #20]
 8023e4e:	1143      	asrs	r3, r0, #5
 8023e50:	1145      	asrs	r5, r0, #5
 8023e52:	930c      	str	r3, [sp, #48]	; 0x30
 8023e54:	f000 031f 	and.w	r3, r0, #31
 8023e58:	9303      	str	r3, [sp, #12]
 8023e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023e5c:	42b3      	cmp	r3, r6
 8023e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023e60:	bfc8      	it	gt
 8023e62:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023e64:	42b3      	cmp	r3, r6
 8023e66:	bfdc      	itt	le
 8023e68:	1c73      	addle	r3, r6, #1
 8023e6a:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023e6e:	42ab      	cmp	r3, r5
 8023e70:	bfc8      	it	gt
 8023e72:	462b      	movgt	r3, r5
 8023e74:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023e78:	bfc8      	it	gt
 8023e7a:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023e7e:	42ab      	cmp	r3, r5
 8023e80:	bfd8      	it	le
 8023e82:	462b      	movle	r3, r5
 8023e84:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023e88:	bfdc      	itt	le
 8023e8a:	3301      	addle	r3, #1
 8023e8c:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023e8e:	9b05      	ldr	r3, [sp, #20]
 8023e90:	eba3 0a01 	sub.w	sl, r3, r1
 8023e94:	1143      	asrs	r3, r0, #5
 8023e96:	429e      	cmp	r6, r3
 8023e98:	f040 8119 	bne.w	80240ce <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8023e9c:	9b05      	ldr	r3, [sp, #20]
 8023e9e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023ea2:	9b03      	ldr	r3, [sp, #12]
 8023ea4:	459e      	cmp	lr, r3
 8023ea6:	d12c      	bne.n	8023f02 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023ea8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023eac:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023eb0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023eb4:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023eb8:	4291      	cmp	r1, r2
 8023eba:	d037      	beq.n	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023ebc:	8b61      	ldrh	r1, [r4, #26]
 8023ebe:	8b22      	ldrh	r2, [r4, #24]
 8023ec0:	430a      	orrs	r2, r1
 8023ec2:	d00b      	beq.n	8023edc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	db09      	blt.n	8023edc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023eca:	429a      	cmp	r2, r3
 8023ecc:	dd06      	ble.n	8023edc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023ece:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023ed2:	429a      	cmp	r2, r3
 8023ed4:	d308      	bcc.n	8023ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023ed6:	2301      	movs	r3, #1
 8023ed8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023edc:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023ee0:	82e6      	strh	r6, [r4, #22]
 8023ee2:	2300      	movs	r3, #0
 8023ee4:	8323      	strh	r3, [r4, #24]
 8023ee6:	e0c6      	b.n	8024076 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023ee8:	f104 0314 	add.w	r3, r4, #20
 8023eec:	6922      	ldr	r2, [r4, #16]
 8023eee:	cb03      	ldmia	r3!, {r0, r1}
 8023ef0:	6010      	str	r0, [r2, #0]
 8023ef2:	6051      	str	r1, [r2, #4]
 8023ef4:	6923      	ldr	r3, [r4, #16]
 8023ef6:	3308      	adds	r3, #8
 8023ef8:	6123      	str	r3, [r4, #16]
 8023efa:	68a3      	ldr	r3, [r4, #8]
 8023efc:	3301      	adds	r3, #1
 8023efe:	60a3      	str	r3, [r4, #8]
 8023f00:	e7ec      	b.n	8023edc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023f02:	9b05      	ldr	r3, [sp, #20]
 8023f04:	45ac      	cmp	ip, r5
 8023f06:	f001 011f 	and.w	r1, r1, #31
 8023f0a:	8b20      	ldrh	r0, [r4, #24]
 8023f0c:	f003 031f 	and.w	r3, r3, #31
 8023f10:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023f14:	9304      	str	r3, [sp, #16]
 8023f16:	9b03      	ldr	r3, [sp, #12]
 8023f18:	eba3 020e 	sub.w	r2, r3, lr
 8023f1c:	d109      	bne.n	8023f32 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023f1e:	9b04      	ldr	r3, [sp, #16]
 8023f20:	4410      	add	r0, r2
 8023f22:	4419      	add	r1, r3
 8023f24:	8320      	strh	r0, [r4, #24]
 8023f26:	fb02 8201 	mla	r2, r2, r1, r8
 8023f2a:	8362      	strh	r2, [r4, #26]
 8023f2c:	b013      	add	sp, #76	; 0x4c
 8023f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f32:	f1ba 0f00 	cmp.w	sl, #0
 8023f36:	f2c0 80a0 	blt.w	802407a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023f3a:	f1c1 0320 	rsb	r3, r1, #32
 8023f3e:	f04f 0b20 	mov.w	fp, #32
 8023f42:	435a      	muls	r2, r3
 8023f44:	2301      	movs	r3, #1
 8023f46:	9302      	str	r3, [sp, #8]
 8023f48:	4459      	add	r1, fp
 8023f4a:	fb92 f7fa 	sdiv	r7, r2, sl
 8023f4e:	fb0a 2217 	mls	r2, sl, r7, r2
 8023f52:	2a00      	cmp	r2, #0
 8023f54:	bfbc      	itt	lt
 8023f56:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023f5a:	4452      	addlt	r2, sl
 8023f5c:	fb07 8101 	mla	r1, r7, r1, r8
 8023f60:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023f64:	4438      	add	r0, r7
 8023f66:	b20b      	sxth	r3, r1
 8023f68:	9902      	ldr	r1, [sp, #8]
 8023f6a:	b200      	sxth	r0, r0
 8023f6c:	9301      	str	r3, [sp, #4]
 8023f6e:	8363      	strh	r3, [r4, #26]
 8023f70:	186b      	adds	r3, r5, r1
 8023f72:	0435      	lsls	r5, r6, #16
 8023f74:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023f78:	8320      	strh	r0, [r4, #24]
 8023f7a:	eb03 0905 	add.w	r9, r3, r5
 8023f7e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8023f82:	9300      	str	r3, [sp, #0]
 8023f84:	45c1      	cmp	r9, r8
 8023f86:	9505      	str	r5, [sp, #20]
 8023f88:	d014      	beq.n	8023fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8023f8a:	9b01      	ldr	r3, [sp, #4]
 8023f8c:	4303      	orrs	r3, r0
 8023f8e:	d00b      	beq.n	8023fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023f90:	2900      	cmp	r1, #0
 8023f92:	db09      	blt.n	8023fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023f96:	428b      	cmp	r3, r1
 8023f98:	dd06      	ble.n	8023fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023f9a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023f9e:	4299      	cmp	r1, r3
 8023fa0:	d374      	bcc.n	802408c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023fa2:	2301      	movs	r3, #1
 8023fa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023fa8:	9b00      	ldr	r3, [sp, #0]
 8023faa:	82e6      	strh	r6, [r4, #22]
 8023fac:	82a3      	strh	r3, [r4, #20]
 8023fae:	2300      	movs	r3, #0
 8023fb0:	8323      	strh	r3, [r4, #24]
 8023fb2:	8363      	strh	r3, [r4, #26]
 8023fb4:	9900      	ldr	r1, [sp, #0]
 8023fb6:	eb0e 0307 	add.w	r3, lr, r7
 8023fba:	458c      	cmp	ip, r1
 8023fbc:	d04e      	beq.n	802405c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8023fbe:	9903      	ldr	r1, [sp, #12]
 8023fc0:	eba2 020a 	sub.w	r2, r2, sl
 8023fc4:	1ac9      	subs	r1, r1, r3
 8023fc6:	9201      	str	r2, [sp, #4]
 8023fc8:	440f      	add	r7, r1
 8023fca:	017f      	lsls	r7, r7, #5
 8023fcc:	fb97 fefa 	sdiv	lr, r7, sl
 8023fd0:	fb0a 771e 	mls	r7, sl, lr, r7
 8023fd4:	2f00      	cmp	r7, #0
 8023fd6:	bfbc      	itt	lt
 8023fd8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023fdc:	4457      	addlt	r7, sl
 8023fde:	f10e 0101 	add.w	r1, lr, #1
 8023fe2:	9106      	str	r1, [sp, #24]
 8023fe4:	9a01      	ldr	r2, [sp, #4]
 8023fe6:	8b20      	ldrh	r0, [r4, #24]
 8023fe8:	19d2      	adds	r2, r2, r7
 8023fea:	8b61      	ldrh	r1, [r4, #26]
 8023fec:	9d02      	ldr	r5, [sp, #8]
 8023fee:	9201      	str	r2, [sp, #4]
 8023ff0:	bf5b      	ittet	pl
 8023ff2:	eba2 020a 	subpl.w	r2, r2, sl
 8023ff6:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023ffa:	46f0      	movmi	r8, lr
 8023ffc:	9201      	strpl	r2, [sp, #4]
 8023ffe:	9a00      	ldr	r2, [sp, #0]
 8024000:	4440      	add	r0, r8
 8024002:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024006:	4443      	add	r3, r8
 8024008:	442a      	add	r2, r5
 802400a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802400e:	9d05      	ldr	r5, [sp, #20]
 8024010:	b200      	sxth	r0, r0
 8024012:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024016:	b209      	sxth	r1, r1
 8024018:	4415      	add	r5, r2
 802401a:	8320      	strh	r0, [r4, #24]
 802401c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024020:	8361      	strh	r1, [r4, #26]
 8024022:	9200      	str	r2, [sp, #0]
 8024024:	454d      	cmp	r5, r9
 8024026:	d016      	beq.n	8024056 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8024028:	4301      	orrs	r1, r0
 802402a:	d00d      	beq.n	8024048 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802402c:	f1b8 0f00 	cmp.w	r8, #0
 8024030:	db0a      	blt.n	8024048 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024032:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024034:	4541      	cmp	r1, r8
 8024036:	dd07      	ble.n	8024048 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024038:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802403c:	4288      	cmp	r0, r1
 802403e:	d335      	bcc.n	80240ac <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024040:	f04f 0101 	mov.w	r1, #1
 8024044:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024048:	9900      	ldr	r1, [sp, #0]
 802404a:	82e6      	strh	r6, [r4, #22]
 802404c:	82a1      	strh	r1, [r4, #20]
 802404e:	f04f 0100 	mov.w	r1, #0
 8024052:	8321      	strh	r1, [r4, #24]
 8024054:	8361      	strh	r1, [r4, #26]
 8024056:	9a00      	ldr	r2, [sp, #0]
 8024058:	4594      	cmp	ip, r2
 802405a:	d1c3      	bne.n	8023fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 802405c:	9a03      	ldr	r2, [sp, #12]
 802405e:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8024062:	1ad3      	subs	r3, r2, r3
 8024064:	8b22      	ldrh	r2, [r4, #24]
 8024066:	441a      	add	r2, r3
 8024068:	8322      	strh	r2, [r4, #24]
 802406a:	9a04      	ldr	r2, [sp, #16]
 802406c:	3220      	adds	r2, #32
 802406e:	eba2 020b 	sub.w	r2, r2, fp
 8024072:	fb03 c302 	mla	r3, r3, r2, ip
 8024076:	8363      	strh	r3, [r4, #26]
 8024078:	e758      	b.n	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802407a:	f04f 33ff 	mov.w	r3, #4294967295
 802407e:	434a      	muls	r2, r1
 8024080:	f1ca 0a00 	rsb	sl, sl, #0
 8024084:	f04f 0b00 	mov.w	fp, #0
 8024088:	9302      	str	r3, [sp, #8]
 802408a:	e75d      	b.n	8023f48 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 802408c:	f104 0314 	add.w	r3, r4, #20
 8024090:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024094:	cb03      	ldmia	r3!, {r0, r1}
 8024096:	f8c8 0000 	str.w	r0, [r8]
 802409a:	f8c8 1004 	str.w	r1, [r8, #4]
 802409e:	6923      	ldr	r3, [r4, #16]
 80240a0:	3308      	adds	r3, #8
 80240a2:	6123      	str	r3, [r4, #16]
 80240a4:	68a3      	ldr	r3, [r4, #8]
 80240a6:	3301      	adds	r3, #1
 80240a8:	60a3      	str	r3, [r4, #8]
 80240aa:	e77d      	b.n	8023fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80240ac:	f104 0814 	add.w	r8, r4, #20
 80240b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80240b4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80240b8:	f8c9 0000 	str.w	r0, [r9]
 80240bc:	f8c9 1004 	str.w	r1, [r9, #4]
 80240c0:	6921      	ldr	r1, [r4, #16]
 80240c2:	3108      	adds	r1, #8
 80240c4:	6121      	str	r1, [r4, #16]
 80240c6:	68a1      	ldr	r1, [r4, #8]
 80240c8:	3101      	adds	r1, #1
 80240ca:	60a1      	str	r1, [r4, #8]
 80240cc:	e7bc      	b.n	8024048 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80240ce:	1a83      	subs	r3, r0, r2
 80240d0:	9301      	str	r3, [sp, #4]
 80240d2:	f1ba 0f00 	cmp.w	sl, #0
 80240d6:	f040 8094 	bne.w	8024202 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80240da:	9a01      	ldr	r2, [sp, #4]
 80240dc:	0049      	lsls	r1, r1, #1
 80240de:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80240e2:	2a00      	cmp	r2, #0
 80240e4:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80240e8:	8b62      	ldrh	r2, [r4, #26]
 80240ea:	bfaa      	itet	ge
 80240ec:	f04f 0a20 	movge.w	sl, #32
 80240f0:	f04f 38ff 	movlt.w	r8, #4294967295
 80240f4:	f04f 0801 	movge.w	r8, #1
 80240f8:	8b21      	ldrh	r1, [r4, #24]
 80240fa:	ebaa 0e0e 	sub.w	lr, sl, lr
 80240fe:	4471      	add	r1, lr
 8024100:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024104:	eb08 0206 	add.w	r2, r8, r6
 8024108:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802410c:	b209      	sxth	r1, r1
 802410e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8024112:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8024116:	8321      	strh	r1, [r4, #24]
 8024118:	fa0f fe8e 	sxth.w	lr, lr
 802411c:	42b7      	cmp	r7, r6
 802411e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024122:	d013      	beq.n	802414c <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024124:	ea51 010e 	orrs.w	r1, r1, lr
 8024128:	d00b      	beq.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802412a:	2800      	cmp	r0, #0
 802412c:	db09      	blt.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802412e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024130:	4281      	cmp	r1, r0
 8024132:	dd06      	ble.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024134:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024138:	4288      	cmp	r0, r1
 802413a:	d339      	bcc.n	80241b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 802413c:	2101      	movs	r1, #1
 802413e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024142:	2100      	movs	r1, #0
 8024144:	82a5      	strh	r5, [r4, #20]
 8024146:	82e2      	strh	r2, [r4, #22]
 8024148:	8321      	strh	r1, [r4, #24]
 802414a:	8361      	strh	r1, [r4, #26]
 802414c:	f1aa 0610 	sub.w	r6, sl, #16
 8024150:	f04f 0e00 	mov.w	lr, #0
 8024154:	f04f 0b01 	mov.w	fp, #1
 8024158:	0076      	lsls	r6, r6, #1
 802415a:	fb06 f703 	mul.w	r7, r6, r3
 802415e:	b236      	sxth	r6, r6
 8024160:	b23f      	sxth	r7, r7
 8024162:	ea46 0107 	orr.w	r1, r6, r7
 8024166:	9100      	str	r1, [sp, #0]
 8024168:	990c      	ldr	r1, [sp, #48]	; 0x30
 802416a:	428a      	cmp	r2, r1
 802416c:	d03e      	beq.n	80241ec <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802416e:	4442      	add	r2, r8
 8024170:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024174:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024178:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 802417c:	8326      	strh	r6, [r4, #24]
 802417e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024182:	8367      	strh	r7, [r4, #26]
 8024184:	4584      	cmp	ip, r0
 8024186:	d0ef      	beq.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024188:	9800      	ldr	r0, [sp, #0]
 802418a:	b150      	cbz	r0, 80241a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802418c:	2900      	cmp	r1, #0
 802418e:	db08      	blt.n	80241a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024190:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024192:	4288      	cmp	r0, r1
 8024194:	dd05      	ble.n	80241a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024196:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802419a:	4288      	cmp	r0, r1
 802419c:	d315      	bcc.n	80241ca <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802419e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80241a2:	82a5      	strh	r5, [r4, #20]
 80241a4:	82e2      	strh	r2, [r4, #22]
 80241a6:	f8a4 e018 	strh.w	lr, [r4, #24]
 80241aa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80241ae:	e7db      	b.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80241b0:	f104 0614 	add.w	r6, r4, #20
 80241b4:	6927      	ldr	r7, [r4, #16]
 80241b6:	ce03      	ldmia	r6!, {r0, r1}
 80241b8:	6038      	str	r0, [r7, #0]
 80241ba:	6079      	str	r1, [r7, #4]
 80241bc:	6921      	ldr	r1, [r4, #16]
 80241be:	3108      	adds	r1, #8
 80241c0:	6121      	str	r1, [r4, #16]
 80241c2:	68a1      	ldr	r1, [r4, #8]
 80241c4:	3101      	adds	r1, #1
 80241c6:	60a1      	str	r1, [r4, #8]
 80241c8:	e7bb      	b.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80241ca:	f104 0c14 	add.w	ip, r4, #20
 80241ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80241d2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80241d6:	f8c9 0000 	str.w	r0, [r9]
 80241da:	f8c9 1004 	str.w	r1, [r9, #4]
 80241de:	6921      	ldr	r1, [r4, #16]
 80241e0:	3108      	adds	r1, #8
 80241e2:	6121      	str	r1, [r4, #16]
 80241e4:	68a1      	ldr	r1, [r4, #8]
 80241e6:	3101      	adds	r1, #1
 80241e8:	60a1      	str	r1, [r4, #8]
 80241ea:	e7da      	b.n	80241a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80241ec:	9a03      	ldr	r2, [sp, #12]
 80241ee:	8b61      	ldrh	r1, [r4, #26]
 80241f0:	f1a2 0c20 	sub.w	ip, r2, #32
 80241f4:	8b22      	ldrh	r2, [r4, #24]
 80241f6:	44d4      	add	ip, sl
 80241f8:	4462      	add	r2, ip
 80241fa:	fb0c 1303 	mla	r3, ip, r3, r1
 80241fe:	8322      	strh	r2, [r4, #24]
 8024200:	e739      	b.n	8024076 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024202:	9b01      	ldr	r3, [sp, #4]
 8024204:	2b00      	cmp	r3, #0
 8024206:	db3f      	blt.n	8024288 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024208:	2201      	movs	r2, #1
 802420a:	f1ce 0320 	rsb	r3, lr, #32
 802420e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024210:	2220      	movs	r2, #32
 8024212:	fb0a f303 	mul.w	r3, sl, r3
 8024216:	9202      	str	r2, [sp, #8]
 8024218:	9a01      	ldr	r2, [sp, #4]
 802421a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802421e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024222:	fb93 f7f2 	sdiv	r7, r3, r2
 8024226:	fb02 3317 	mls	r3, r2, r7, r3
 802422a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802422e:	2b00      	cmp	r3, #0
 8024230:	9308      	str	r3, [sp, #32]
 8024232:	bfbc      	itt	lt
 8024234:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024238:	189b      	addlt	r3, r3, r2
 802423a:	eb07 0b01 	add.w	fp, r7, r1
 802423e:	bfb8      	it	lt
 8024240:	9308      	strlt	r3, [sp, #32]
 8024242:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024246:	9304      	str	r3, [sp, #16]
 8024248:	9b02      	ldr	r3, [sp, #8]
 802424a:	4573      	cmp	r3, lr
 802424c:	d133      	bne.n	80242b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802424e:	9b04      	ldr	r3, [sp, #16]
 8024250:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024254:	454b      	cmp	r3, r9
 8024256:	d045      	beq.n	80242e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024258:	8b62      	ldrh	r2, [r4, #26]
 802425a:	8b23      	ldrh	r3, [r4, #24]
 802425c:	4313      	orrs	r3, r2
 802425e:	d00c      	beq.n	802427a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024260:	f1b8 0f00 	cmp.w	r8, #0
 8024264:	db09      	blt.n	802427a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024268:	4543      	cmp	r3, r8
 802426a:	dd06      	ble.n	802427a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802426c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024270:	429a      	cmp	r2, r3
 8024272:	d313      	bcc.n	802429c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024274:	2301      	movs	r3, #1
 8024276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802427a:	9b04      	ldr	r3, [sp, #16]
 802427c:	82e6      	strh	r6, [r4, #22]
 802427e:	82a3      	strh	r3, [r4, #20]
 8024280:	2300      	movs	r3, #0
 8024282:	8323      	strh	r3, [r4, #24]
 8024284:	8363      	strh	r3, [r4, #26]
 8024286:	e02d      	b.n	80242e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024288:	9a01      	ldr	r2, [sp, #4]
 802428a:	fb0a f30e 	mul.w	r3, sl, lr
 802428e:	4252      	negs	r2, r2
 8024290:	9201      	str	r2, [sp, #4]
 8024292:	f04f 32ff 	mov.w	r2, #4294967295
 8024296:	920b      	str	r2, [sp, #44]	; 0x2c
 8024298:	2200      	movs	r2, #0
 802429a:	e7bc      	b.n	8024216 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802429c:	f104 0314 	add.w	r3, r4, #20
 80242a0:	6922      	ldr	r2, [r4, #16]
 80242a2:	cb03      	ldmia	r3!, {r0, r1}
 80242a4:	6010      	str	r0, [r2, #0]
 80242a6:	6051      	str	r1, [r2, #4]
 80242a8:	6923      	ldr	r3, [r4, #16]
 80242aa:	3308      	adds	r3, #8
 80242ac:	6123      	str	r3, [r4, #16]
 80242ae:	68a3      	ldr	r3, [r4, #8]
 80242b0:	3301      	adds	r3, #1
 80242b2:	60a3      	str	r3, [r4, #8]
 80242b4:	e7e1      	b.n	802427a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80242b6:	f00b 031f 	and.w	r3, fp, #31
 80242ba:	f001 011f 	and.w	r1, r1, #31
 80242be:	8b20      	ldrh	r0, [r4, #24]
 80242c0:	9309      	str	r3, [sp, #36]	; 0x24
 80242c2:	9b02      	ldr	r3, [sp, #8]
 80242c4:	eba3 020e 	sub.w	r2, r3, lr
 80242c8:	8b63      	ldrh	r3, [r4, #26]
 80242ca:	9300      	str	r3, [sp, #0]
 80242cc:	9b04      	ldr	r3, [sp, #16]
 80242ce:	42ab      	cmp	r3, r5
 80242d0:	f040 80ef 	bne.w	80244b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80242d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242d6:	4410      	add	r0, r2
 80242d8:	4419      	add	r1, r3
 80242da:	9b00      	ldr	r3, [sp, #0]
 80242dc:	8320      	strh	r0, [r4, #24]
 80242de:	fb02 3101 	mla	r1, r2, r1, r3
 80242e2:	8361      	strh	r1, [r4, #26]
 80242e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242e6:	9904      	ldr	r1, [sp, #16]
 80242e8:	4433      	add	r3, r6
 80242ea:	9300      	str	r3, [sp, #0]
 80242ec:	9a00      	ldr	r2, [sp, #0]
 80242ee:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80242f2:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 80242f6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80242fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80242fe:	4288      	cmp	r0, r1
 8024300:	d018      	beq.n	8024334 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024302:	8b60      	ldrh	r0, [r4, #26]
 8024304:	8b21      	ldrh	r1, [r4, #24]
 8024306:	ea50 0201 	orrs.w	r2, r0, r1
 802430a:	d00c      	beq.n	8024326 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802430c:	2b00      	cmp	r3, #0
 802430e:	db0a      	blt.n	8024326 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024310:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024312:	4299      	cmp	r1, r3
 8024314:	dd07      	ble.n	8024326 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024316:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802431a:	4299      	cmp	r1, r3
 802431c:	f0c0 818b 	bcc.w	8024636 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024320:	2301      	movs	r3, #1
 8024322:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024326:	9b04      	ldr	r3, [sp, #16]
 8024328:	82a3      	strh	r3, [r4, #20]
 802432a:	9b00      	ldr	r3, [sp, #0]
 802432c:	82e3      	strh	r3, [r4, #22]
 802432e:	2300      	movs	r3, #0
 8024330:	8323      	strh	r3, [r4, #24]
 8024332:	8363      	strh	r3, [r4, #26]
 8024334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024336:	9a00      	ldr	r2, [sp, #0]
 8024338:	4293      	cmp	r3, r2
 802433a:	f000 808d 	beq.w	8024458 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802433e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024342:	9901      	ldr	r1, [sp, #4]
 8024344:	9801      	ldr	r0, [sp, #4]
 8024346:	fb93 f1f1 	sdiv	r1, r3, r1
 802434a:	fb00 3311 	mls	r3, r0, r1, r3
 802434e:	9106      	str	r1, [sp, #24]
 8024350:	2b00      	cmp	r3, #0
 8024352:	9307      	str	r3, [sp, #28]
 8024354:	da04      	bge.n	8024360 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024356:	1e4b      	subs	r3, r1, #1
 8024358:	9306      	str	r3, [sp, #24]
 802435a:	9b07      	ldr	r3, [sp, #28]
 802435c:	4403      	add	r3, r0
 802435e:	9307      	str	r3, [sp, #28]
 8024360:	9b08      	ldr	r3, [sp, #32]
 8024362:	f04f 0c00 	mov.w	ip, #0
 8024366:	9901      	ldr	r1, [sp, #4]
 8024368:	1a5b      	subs	r3, r3, r1
 802436a:	4659      	mov	r1, fp
 802436c:	9308      	str	r3, [sp, #32]
 802436e:	9b02      	ldr	r3, [sp, #8]
 8024370:	f1c3 0320 	rsb	r3, r3, #32
 8024374:	930a      	str	r3, [sp, #40]	; 0x28
 8024376:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024378:	9b02      	ldr	r3, [sp, #8]
 802437a:	1a1b      	subs	r3, r3, r0
 802437c:	9309      	str	r3, [sp, #36]	; 0x24
 802437e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024382:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024386:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802438a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802438e:	181b      	adds	r3, r3, r0
 8024390:	bf58      	it	pl
 8024392:	9801      	ldrpl	r0, [sp, #4]
 8024394:	9308      	str	r3, [sp, #32]
 8024396:	bf54      	ite	pl
 8024398:	1a1b      	subpl	r3, r3, r0
 802439a:	9d06      	ldrmi	r5, [sp, #24]
 802439c:	9802      	ldr	r0, [sp, #8]
 802439e:	bf5e      	ittt	pl
 80243a0:	9308      	strpl	r3, [sp, #32]
 80243a2:	9b06      	ldrpl	r3, [sp, #24]
 80243a4:	1c5d      	addpl	r5, r3, #1
 80243a6:	44ab      	add	fp, r5
 80243a8:	ea4f 136b 	mov.w	r3, fp, asr #5
 80243ac:	9304      	str	r3, [sp, #16]
 80243ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243b0:	4283      	cmp	r3, r0
 80243b2:	f040 815a 	bne.w	802466a <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 80243b6:	9b04      	ldr	r3, [sp, #16]
 80243b8:	9a00      	ldr	r2, [sp, #0]
 80243ba:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80243be:	4543      	cmp	r3, r8
 80243c0:	d01a      	beq.n	80243f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80243c2:	8b61      	ldrh	r1, [r4, #26]
 80243c4:	8b23      	ldrh	r3, [r4, #24]
 80243c6:	430b      	orrs	r3, r1
 80243c8:	d00e      	beq.n	80243e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80243ca:	f1be 0f00 	cmp.w	lr, #0
 80243ce:	db0b      	blt.n	80243e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80243d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80243d2:	4573      	cmp	r3, lr
 80243d4:	dd08      	ble.n	80243e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80243d6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80243da:	4299      	cmp	r1, r3
 80243dc:	f0c0 8138 	bcc.w	8024650 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 80243e0:	f04f 0301 	mov.w	r3, #1
 80243e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80243e8:	9b04      	ldr	r3, [sp, #16]
 80243ea:	f8a4 c018 	strh.w	ip, [r4, #24]
 80243ee:	82a3      	strh	r3, [r4, #20]
 80243f0:	9b00      	ldr	r3, [sp, #0]
 80243f2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80243f6:	82e3      	strh	r3, [r4, #22]
 80243f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243fa:	9a00      	ldr	r2, [sp, #0]
 80243fc:	441a      	add	r2, r3
 80243fe:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024402:	9200      	str	r2, [sp, #0]
 8024404:	9900      	ldr	r1, [sp, #0]
 8024406:	9a04      	ldr	r2, [sp, #16]
 8024408:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802440c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024414:	4288      	cmp	r0, r1
 8024416:	d01a      	beq.n	802444e <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024418:	8b60      	ldrh	r0, [r4, #26]
 802441a:	8b21      	ldrh	r1, [r4, #24]
 802441c:	ea50 0201 	orrs.w	r2, r0, r1
 8024420:	d00d      	beq.n	802443e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024422:	2b00      	cmp	r3, #0
 8024424:	db0b      	blt.n	802443e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024426:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024428:	4299      	cmp	r1, r3
 802442a:	dd08      	ble.n	802443e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802442c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024430:	4299      	cmp	r1, r3
 8024432:	f0c0 81f9 	bcc.w	8024828 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024436:	f04f 0301 	mov.w	r3, #1
 802443a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802443e:	9b04      	ldr	r3, [sp, #16]
 8024440:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024444:	82a3      	strh	r3, [r4, #20]
 8024446:	9b00      	ldr	r3, [sp, #0]
 8024448:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802444c:	82e3      	strh	r3, [r4, #22]
 802444e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024450:	4659      	mov	r1, fp
 8024452:	9a00      	ldr	r2, [sp, #0]
 8024454:	4293      	cmp	r3, r2
 8024456:	d192      	bne.n	802437e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024458:	9b02      	ldr	r3, [sp, #8]
 802445a:	f1c3 0c20 	rsb	ip, r3, #32
 802445e:	9b05      	ldr	r3, [sp, #20]
 8024460:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024464:	9b03      	ldr	r3, [sp, #12]
 8024466:	459c      	cmp	ip, r3
 8024468:	f040 81f8 	bne.w	802485c <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 802446c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024470:	9a00      	ldr	r2, [sp, #0]
 8024472:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024476:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802447a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802447e:	4288      	cmp	r0, r1
 8024480:	f43f ad54 	beq.w	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024484:	8b60      	ldrh	r0, [r4, #26]
 8024486:	8b21      	ldrh	r1, [r4, #24]
 8024488:	ea50 0201 	orrs.w	r2, r0, r1
 802448c:	d00c      	beq.n	80244a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802448e:	2b00      	cmp	r3, #0
 8024490:	db0a      	blt.n	80244a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024492:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024494:	4299      	cmp	r1, r3
 8024496:	dd07      	ble.n	80244a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024498:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802449c:	4299      	cmp	r1, r3
 802449e:	f0c0 81d0 	bcc.w	8024842 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 80244a2:	2301      	movs	r3, #1
 80244a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80244a8:	9b00      	ldr	r3, [sp, #0]
 80244aa:	f8a4 e014 	strh.w	lr, [r4, #20]
 80244ae:	82e3      	strh	r3, [r4, #22]
 80244b0:	e517      	b.n	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 80244b2:	2f00      	cmp	r7, #0
 80244b4:	f2c0 8097 	blt.w	80245e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 80244b8:	2301      	movs	r3, #1
 80244ba:	f1c1 0c20 	rsb	ip, r1, #32
 80244be:	9307      	str	r3, [sp, #28]
 80244c0:	2320      	movs	r3, #32
 80244c2:	fb02 f20c 	mul.w	r2, r2, ip
 80244c6:	9306      	str	r3, [sp, #24]
 80244c8:	9b06      	ldr	r3, [sp, #24]
 80244ca:	fb92 fcf7 	sdiv	ip, r2, r7
 80244ce:	fb07 221c 	mls	r2, r7, ip, r2
 80244d2:	4419      	add	r1, r3
 80244d4:	9b00      	ldr	r3, [sp, #0]
 80244d6:	2a00      	cmp	r2, #0
 80244d8:	bfbc      	itt	lt
 80244da:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80244de:	19d2      	addlt	r2, r2, r7
 80244e0:	fb0c 3101 	mla	r1, ip, r1, r3
 80244e4:	9b07      	ldr	r3, [sp, #28]
 80244e6:	4460      	add	r0, ip
 80244e8:	441d      	add	r5, r3
 80244ea:	0433      	lsls	r3, r6, #16
 80244ec:	b200      	sxth	r0, r0
 80244ee:	930a      	str	r3, [sp, #40]	; 0x28
 80244f0:	18eb      	adds	r3, r5, r3
 80244f2:	b209      	sxth	r1, r1
 80244f4:	8320      	strh	r0, [r4, #24]
 80244f6:	454b      	cmp	r3, r9
 80244f8:	8361      	strh	r1, [r4, #26]
 80244fa:	d014      	beq.n	8024526 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 80244fc:	ea50 0301 	orrs.w	r3, r0, r1
 8024500:	d00c      	beq.n	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024502:	f1b8 0f00 	cmp.w	r8, #0
 8024506:	db09      	blt.n	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802450a:	4543      	cmp	r3, r8
 802450c:	dd06      	ble.n	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802450e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024512:	4299      	cmp	r1, r3
 8024514:	d36e      	bcc.n	80245f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024516:	2301      	movs	r3, #1
 8024518:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802451c:	2300      	movs	r3, #0
 802451e:	82a5      	strh	r5, [r4, #20]
 8024520:	82e6      	strh	r6, [r4, #22]
 8024522:	8323      	strh	r3, [r4, #24]
 8024524:	8363      	strh	r3, [r4, #26]
 8024526:	9904      	ldr	r1, [sp, #16]
 8024528:	eb0e 030c 	add.w	r3, lr, ip
 802452c:	42a9      	cmp	r1, r5
 802452e:	d04d      	beq.n	80245cc <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024530:	9902      	ldr	r1, [sp, #8]
 8024532:	1bd2      	subs	r2, r2, r7
 8024534:	1ac9      	subs	r1, r1, r3
 8024536:	9200      	str	r2, [sp, #0]
 8024538:	448c      	add	ip, r1
 802453a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802453e:	fb9c fef7 	sdiv	lr, ip, r7
 8024542:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024546:	f1bc 0f00 	cmp.w	ip, #0
 802454a:	bfbc      	itt	lt
 802454c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024550:	44bc      	addlt	ip, r7
 8024552:	f10e 0101 	add.w	r1, lr, #1
 8024556:	910d      	str	r1, [sp, #52]	; 0x34
 8024558:	9a00      	ldr	r2, [sp, #0]
 802455a:	8b20      	ldrh	r0, [r4, #24]
 802455c:	eb12 020c 	adds.w	r2, r2, ip
 8024560:	8b61      	ldrh	r1, [r4, #26]
 8024562:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024566:	9200      	str	r2, [sp, #0]
 8024568:	bf5b      	ittet	pl
 802456a:	1bd2      	subpl	r2, r2, r7
 802456c:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024570:	46f0      	movmi	r8, lr
 8024572:	9200      	strpl	r2, [sp, #0]
 8024574:	9a07      	ldr	r2, [sp, #28]
 8024576:	4440      	add	r0, r8
 8024578:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802457c:	4443      	add	r3, r8
 802457e:	4415      	add	r5, r2
 8024580:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024586:	b200      	sxth	r0, r0
 8024588:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802458c:	442a      	add	r2, r5
 802458e:	b209      	sxth	r1, r1
 8024590:	8320      	strh	r0, [r4, #24]
 8024592:	454a      	cmp	r2, r9
 8024594:	8361      	strh	r1, [r4, #26]
 8024596:	d016      	beq.n	80245c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024598:	ea50 0201 	orrs.w	r2, r0, r1
 802459c:	d00d      	beq.n	80245ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802459e:	f1b8 0f00 	cmp.w	r8, #0
 80245a2:	db0a      	blt.n	80245ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80245a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80245a6:	4541      	cmp	r1, r8
 80245a8:	dd07      	ble.n	80245ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80245aa:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80245ae:	4288      	cmp	r0, r1
 80245b0:	d330      	bcc.n	8024614 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 80245b2:	f04f 0201 	mov.w	r2, #1
 80245b6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80245ba:	f04f 0200 	mov.w	r2, #0
 80245be:	82a5      	strh	r5, [r4, #20]
 80245c0:	82e6      	strh	r6, [r4, #22]
 80245c2:	8322      	strh	r2, [r4, #24]
 80245c4:	8362      	strh	r2, [r4, #26]
 80245c6:	9904      	ldr	r1, [sp, #16]
 80245c8:	42a9      	cmp	r1, r5
 80245ca:	d1c5      	bne.n	8024558 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 80245cc:	9a02      	ldr	r2, [sp, #8]
 80245ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80245d0:	1ad3      	subs	r3, r2, r3
 80245d2:	8b22      	ldrh	r2, [r4, #24]
 80245d4:	3120      	adds	r1, #32
 80245d6:	441a      	add	r2, r3
 80245d8:	8322      	strh	r2, [r4, #24]
 80245da:	9a06      	ldr	r2, [sp, #24]
 80245dc:	1a89      	subs	r1, r1, r2
 80245de:	8b62      	ldrh	r2, [r4, #26]
 80245e0:	fb03 2301 	mla	r3, r3, r1, r2
 80245e4:	e64e      	b.n	8024284 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80245e6:	f04f 33ff 	mov.w	r3, #4294967295
 80245ea:	434a      	muls	r2, r1
 80245ec:	427f      	negs	r7, r7
 80245ee:	9307      	str	r3, [sp, #28]
 80245f0:	2300      	movs	r3, #0
 80245f2:	e768      	b.n	80244c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 80245f4:	f104 0314 	add.w	r3, r4, #20
 80245f8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80245fc:	cb03      	ldmia	r3!, {r0, r1}
 80245fe:	f8c8 0000 	str.w	r0, [r8]
 8024602:	f8c8 1004 	str.w	r1, [r8, #4]
 8024606:	6923      	ldr	r3, [r4, #16]
 8024608:	3308      	adds	r3, #8
 802460a:	6123      	str	r3, [r4, #16]
 802460c:	68a3      	ldr	r3, [r4, #8]
 802460e:	3301      	adds	r3, #1
 8024610:	60a3      	str	r3, [r4, #8]
 8024612:	e783      	b.n	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024614:	f104 0814 	add.w	r8, r4, #20
 8024618:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802461c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024620:	f8c9 0000 	str.w	r0, [r9]
 8024624:	f8c9 1004 	str.w	r1, [r9, #4]
 8024628:	6921      	ldr	r1, [r4, #16]
 802462a:	3108      	adds	r1, #8
 802462c:	6121      	str	r1, [r4, #16]
 802462e:	68a1      	ldr	r1, [r4, #8]
 8024630:	3101      	adds	r1, #1
 8024632:	60a1      	str	r1, [r4, #8]
 8024634:	e7c1      	b.n	80245ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024636:	f104 0314 	add.w	r3, r4, #20
 802463a:	6925      	ldr	r5, [r4, #16]
 802463c:	cb03      	ldmia	r3!, {r0, r1}
 802463e:	6028      	str	r0, [r5, #0]
 8024640:	6069      	str	r1, [r5, #4]
 8024642:	6923      	ldr	r3, [r4, #16]
 8024644:	3308      	adds	r3, #8
 8024646:	6123      	str	r3, [r4, #16]
 8024648:	68a3      	ldr	r3, [r4, #8]
 802464a:	3301      	adds	r3, #1
 802464c:	60a3      	str	r3, [r4, #8]
 802464e:	e66a      	b.n	8024326 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024650:	f104 0314 	add.w	r3, r4, #20
 8024654:	6925      	ldr	r5, [r4, #16]
 8024656:	cb03      	ldmia	r3!, {r0, r1}
 8024658:	6028      	str	r0, [r5, #0]
 802465a:	6069      	str	r1, [r5, #4]
 802465c:	6923      	ldr	r3, [r4, #16]
 802465e:	3308      	adds	r3, #8
 8024660:	6123      	str	r3, [r4, #16]
 8024662:	68a3      	ldr	r3, [r4, #8]
 8024664:	3301      	adds	r3, #1
 8024666:	60a3      	str	r3, [r4, #8]
 8024668:	e6be      	b.n	80243e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802466a:	f00b 031f 	and.w	r3, fp, #31
 802466e:	114f      	asrs	r7, r1, #5
 8024670:	8b20      	ldrh	r0, [r4, #24]
 8024672:	f001 011f 	and.w	r1, r1, #31
 8024676:	930f      	str	r3, [sp, #60]	; 0x3c
 8024678:	9b04      	ldr	r3, [sp, #16]
 802467a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802467e:	429f      	cmp	r7, r3
 8024680:	d10a      	bne.n	8024698 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024684:	4418      	add	r0, r3
 8024686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024688:	4419      	add	r1, r3
 802468a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802468c:	8320      	strh	r0, [r4, #24]
 802468e:	fb03 9901 	mla	r9, r3, r1, r9
 8024692:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024696:	e6af      	b.n	80243f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024698:	2d00      	cmp	r5, #0
 802469a:	f2c0 809b 	blt.w	80247d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802469e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80246a0:	f1c1 0320 	rsb	r3, r1, #32
 80246a4:	4373      	muls	r3, r6
 80246a6:	2601      	movs	r6, #1
 80246a8:	960e      	str	r6, [sp, #56]	; 0x38
 80246aa:	2620      	movs	r6, #32
 80246ac:	960d      	str	r6, [sp, #52]	; 0x34
 80246ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80246b0:	fb93 f6f5 	sdiv	r6, r3, r5
 80246b4:	4411      	add	r1, r2
 80246b6:	fb05 3316 	mls	r3, r5, r6, r3
 80246ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80246bc:	2b00      	cmp	r3, #0
 80246be:	4417      	add	r7, r2
 80246c0:	9a00      	ldr	r2, [sp, #0]
 80246c2:	bfbc      	itt	lt
 80246c4:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80246c8:	195b      	addlt	r3, r3, r5
 80246ca:	0412      	lsls	r2, r2, #16
 80246cc:	fb06 9101 	mla	r1, r6, r1, r9
 80246d0:	4430      	add	r0, r6
 80246d2:	eb07 0902 	add.w	r9, r7, r2
 80246d6:	9210      	str	r2, [sp, #64]	; 0x40
 80246d8:	b200      	sxth	r0, r0
 80246da:	b209      	sxth	r1, r1
 80246dc:	45c1      	cmp	r9, r8
 80246de:	8320      	strh	r0, [r4, #24]
 80246e0:	8361      	strh	r1, [r4, #26]
 80246e2:	d017      	beq.n	8024714 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80246e4:	ea50 0201 	orrs.w	r2, r0, r1
 80246e8:	d00d      	beq.n	8024706 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80246ea:	f1be 0f00 	cmp.w	lr, #0
 80246ee:	db0a      	blt.n	8024706 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80246f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80246f2:	4571      	cmp	r1, lr
 80246f4:	dd07      	ble.n	8024706 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80246f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80246fa:	4288      	cmp	r0, r1
 80246fc:	d372      	bcc.n	80247e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80246fe:	f04f 0201 	mov.w	r2, #1
 8024702:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024706:	9a00      	ldr	r2, [sp, #0]
 8024708:	82a7      	strh	r7, [r4, #20]
 802470a:	82e2      	strh	r2, [r4, #22]
 802470c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024710:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024716:	eb02 0e06 	add.w	lr, r2, r6
 802471a:	9a04      	ldr	r2, [sp, #16]
 802471c:	42ba      	cmp	r2, r7
 802471e:	d049      	beq.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024720:	9a02      	ldr	r2, [sp, #8]
 8024722:	1b5b      	subs	r3, r3, r5
 8024724:	eba2 010e 	sub.w	r1, r2, lr
 8024728:	440e      	add	r6, r1
 802472a:	0176      	lsls	r6, r6, #5
 802472c:	fb96 f8f5 	sdiv	r8, r6, r5
 8024730:	fb05 6618 	mls	r6, r5, r8, r6
 8024734:	2e00      	cmp	r6, #0
 8024736:	bfbc      	itt	lt
 8024738:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802473c:	1976      	addlt	r6, r6, r5
 802473e:	f108 0201 	add.w	r2, r8, #1
 8024742:	9211      	str	r2, [sp, #68]	; 0x44
 8024744:	199b      	adds	r3, r3, r6
 8024746:	8b20      	ldrh	r0, [r4, #24]
 8024748:	8b61      	ldrh	r1, [r4, #26]
 802474a:	bf54      	ite	pl
 802474c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024750:	46c1      	movmi	r9, r8
 8024752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024754:	bf58      	it	pl
 8024756:	1b5b      	subpl	r3, r3, r5
 8024758:	4448      	add	r0, r9
 802475a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802475e:	4417      	add	r7, r2
 8024760:	44ce      	add	lr, r9
 8024762:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024764:	b200      	sxth	r0, r0
 8024766:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802476a:	b209      	sxth	r1, r1
 802476c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024770:	443a      	add	r2, r7
 8024772:	8320      	strh	r0, [r4, #24]
 8024774:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024778:	8361      	strh	r1, [r4, #26]
 802477a:	4552      	cmp	r2, sl
 802477c:	d017      	beq.n	80247ae <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802477e:	ea50 0201 	orrs.w	r2, r0, r1
 8024782:	d00d      	beq.n	80247a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024784:	f1b9 0f00 	cmp.w	r9, #0
 8024788:	db0a      	blt.n	80247a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802478a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802478c:	4549      	cmp	r1, r9
 802478e:	dd07      	ble.n	80247a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024790:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024794:	4288      	cmp	r0, r1
 8024796:	d336      	bcc.n	8024806 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024798:	f04f 0201 	mov.w	r2, #1
 802479c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80247a0:	9a00      	ldr	r2, [sp, #0]
 80247a2:	82a7      	strh	r7, [r4, #20]
 80247a4:	82e2      	strh	r2, [r4, #22]
 80247a6:	f8a4 c018 	strh.w	ip, [r4, #24]
 80247aa:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80247ae:	9a04      	ldr	r2, [sp, #16]
 80247b0:	42ba      	cmp	r2, r7
 80247b2:	d1c7      	bne.n	8024744 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80247b4:	9b02      	ldr	r3, [sp, #8]
 80247b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80247b8:	eba3 0e0e 	sub.w	lr, r3, lr
 80247bc:	8b23      	ldrh	r3, [r4, #24]
 80247be:	3120      	adds	r1, #32
 80247c0:	4473      	add	r3, lr
 80247c2:	8323      	strh	r3, [r4, #24]
 80247c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80247c6:	1ac9      	subs	r1, r1, r3
 80247c8:	8b63      	ldrh	r3, [r4, #26]
 80247ca:	fb0e 3e01 	mla	lr, lr, r1, r3
 80247ce:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80247d2:	e611      	b.n	80243f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80247d4:	f04f 36ff 	mov.w	r6, #4294967295
 80247d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247da:	426d      	negs	r5, r5
 80247dc:	960e      	str	r6, [sp, #56]	; 0x38
 80247de:	2600      	movs	r6, #0
 80247e0:	434b      	muls	r3, r1
 80247e2:	e763      	b.n	80246ac <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80247e4:	f104 0e14 	add.w	lr, r4, #20
 80247e8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80247ec:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80247f0:	f8c8 0000 	str.w	r0, [r8]
 80247f4:	f8c8 1004 	str.w	r1, [r8, #4]
 80247f8:	6921      	ldr	r1, [r4, #16]
 80247fa:	3108      	adds	r1, #8
 80247fc:	6121      	str	r1, [r4, #16]
 80247fe:	68a1      	ldr	r1, [r4, #8]
 8024800:	3101      	adds	r1, #1
 8024802:	60a1      	str	r1, [r4, #8]
 8024804:	e77f      	b.n	8024706 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024806:	f104 0914 	add.w	r9, r4, #20
 802480a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802480e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024812:	f8ca 0000 	str.w	r0, [sl]
 8024816:	f8ca 1004 	str.w	r1, [sl, #4]
 802481a:	6921      	ldr	r1, [r4, #16]
 802481c:	3108      	adds	r1, #8
 802481e:	6121      	str	r1, [r4, #16]
 8024820:	68a1      	ldr	r1, [r4, #8]
 8024822:	3101      	adds	r1, #1
 8024824:	60a1      	str	r1, [r4, #8]
 8024826:	e7bb      	b.n	80247a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024828:	f104 0314 	add.w	r3, r4, #20
 802482c:	6925      	ldr	r5, [r4, #16]
 802482e:	cb03      	ldmia	r3!, {r0, r1}
 8024830:	6028      	str	r0, [r5, #0]
 8024832:	6069      	str	r1, [r5, #4]
 8024834:	6923      	ldr	r3, [r4, #16]
 8024836:	3308      	adds	r3, #8
 8024838:	6123      	str	r3, [r4, #16]
 802483a:	68a3      	ldr	r3, [r4, #8]
 802483c:	3301      	adds	r3, #1
 802483e:	60a3      	str	r3, [r4, #8]
 8024840:	e5fd      	b.n	802443e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024842:	f104 0314 	add.w	r3, r4, #20
 8024846:	6925      	ldr	r5, [r4, #16]
 8024848:	cb03      	ldmia	r3!, {r0, r1}
 802484a:	6028      	str	r0, [r5, #0]
 802484c:	6069      	str	r1, [r5, #4]
 802484e:	6923      	ldr	r3, [r4, #16]
 8024850:	3308      	adds	r3, #8
 8024852:	6123      	str	r3, [r4, #16]
 8024854:	68a3      	ldr	r3, [r4, #8]
 8024856:	3301      	adds	r3, #1
 8024858:	60a3      	str	r3, [r4, #8]
 802485a:	e625      	b.n	80244a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802485c:	9b05      	ldr	r3, [sp, #20]
 802485e:	ea4f 176b 	mov.w	r7, fp, asr #5
 8024862:	f00b 081f 	and.w	r8, fp, #31
 8024866:	8b20      	ldrh	r0, [r4, #24]
 8024868:	f003 031f 	and.w	r3, r3, #31
 802486c:	4577      	cmp	r7, lr
 802486e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024872:	9302      	str	r3, [sp, #8]
 8024874:	9b03      	ldr	r3, [sp, #12]
 8024876:	eba3 050c 	sub.w	r5, r3, ip
 802487a:	d108      	bne.n	802488e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802487c:	9b02      	ldr	r3, [sp, #8]
 802487e:	4428      	add	r0, r5
 8024880:	4498      	add	r8, r3
 8024882:	8320      	strh	r0, [r4, #24]
 8024884:	fb05 9508 	mla	r5, r5, r8, r9
 8024888:	8365      	strh	r5, [r4, #26]
 802488a:	f7ff bb4f 	b.w	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802488e:	9b05      	ldr	r3, [sp, #20]
 8024890:	ebb3 030b 	subs.w	r3, r3, fp
 8024894:	f100 809c 	bmi.w	80249d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8024898:	f1c8 0120 	rsb	r1, r8, #32
 802489c:	2201      	movs	r2, #1
 802489e:	f04f 0b20 	mov.w	fp, #32
 80248a2:	434d      	muls	r5, r1
 80248a4:	9201      	str	r2, [sp, #4]
 80248a6:	9a01      	ldr	r2, [sp, #4]
 80248a8:	44d8      	add	r8, fp
 80248aa:	fb95 f6f3 	sdiv	r6, r5, r3
 80248ae:	fb03 5516 	mls	r5, r3, r6, r5
 80248b2:	4417      	add	r7, r2
 80248b4:	9a00      	ldr	r2, [sp, #0]
 80248b6:	2d00      	cmp	r5, #0
 80248b8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80248bc:	bfbc      	itt	lt
 80248be:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80248c2:	18ed      	addlt	r5, r5, r3
 80248c4:	eb07 0a02 	add.w	sl, r7, r2
 80248c8:	9204      	str	r2, [sp, #16]
 80248ca:	fb06 9808 	mla	r8, r6, r8, r9
 80248ce:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80248d2:	4430      	add	r0, r6
 80248d4:	fa0f f188 	sxth.w	r1, r8
 80248d8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80248dc:	b200      	sxth	r0, r0
 80248de:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80248e2:	8361      	strh	r1, [r4, #26]
 80248e4:	8320      	strh	r0, [r4, #24]
 80248e6:	45ca      	cmp	sl, r9
 80248e8:	d015      	beq.n	8024916 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80248ea:	ea50 0201 	orrs.w	r2, r0, r1
 80248ee:	d00c      	beq.n	802490a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80248f0:	f1b8 0f00 	cmp.w	r8, #0
 80248f4:	db09      	blt.n	802490a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80248f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80248f8:	4541      	cmp	r1, r8
 80248fa:	dd06      	ble.n	802490a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80248fc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024900:	4288      	cmp	r0, r1
 8024902:	d36e      	bcc.n	80249e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8024904:	2101      	movs	r1, #1
 8024906:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802490a:	2100      	movs	r1, #0
 802490c:	9a00      	ldr	r2, [sp, #0]
 802490e:	82a7      	strh	r7, [r4, #20]
 8024910:	82e2      	strh	r2, [r4, #22]
 8024912:	8321      	strh	r1, [r4, #24]
 8024914:	8361      	strh	r1, [r4, #26]
 8024916:	45be      	cmp	lr, r7
 8024918:	44b4      	add	ip, r6
 802491a:	d048      	beq.n	80249ae <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802491c:	9a03      	ldr	r2, [sp, #12]
 802491e:	1aed      	subs	r5, r5, r3
 8024920:	eba2 010c 	sub.w	r1, r2, ip
 8024924:	440e      	add	r6, r1
 8024926:	0176      	lsls	r6, r6, #5
 8024928:	fb96 f8f3 	sdiv	r8, r6, r3
 802492c:	fb03 6618 	mls	r6, r3, r8, r6
 8024930:	2e00      	cmp	r6, #0
 8024932:	bfbc      	itt	lt
 8024934:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024938:	18f6      	addlt	r6, r6, r3
 802493a:	f108 0201 	add.w	r2, r8, #1
 802493e:	9205      	str	r2, [sp, #20]
 8024940:	19ad      	adds	r5, r5, r6
 8024942:	8b20      	ldrh	r0, [r4, #24]
 8024944:	8b61      	ldrh	r1, [r4, #26]
 8024946:	bf54      	ite	pl
 8024948:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802494c:	46c1      	movmi	r9, r8
 802494e:	9a01      	ldr	r2, [sp, #4]
 8024950:	bf58      	it	pl
 8024952:	1aed      	subpl	r5, r5, r3
 8024954:	4448      	add	r0, r9
 8024956:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802495a:	4417      	add	r7, r2
 802495c:	44cc      	add	ip, r9
 802495e:	9a04      	ldr	r2, [sp, #16]
 8024960:	b200      	sxth	r0, r0
 8024962:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024966:	b209      	sxth	r1, r1
 8024968:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802496c:	443a      	add	r2, r7
 802496e:	8320      	strh	r0, [r4, #24]
 8024970:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024974:	8361      	strh	r1, [r4, #26]
 8024976:	4552      	cmp	r2, sl
 8024978:	d017      	beq.n	80249aa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802497a:	ea50 0201 	orrs.w	r2, r0, r1
 802497e:	d00d      	beq.n	802499c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024980:	f1b9 0f00 	cmp.w	r9, #0
 8024984:	db0a      	blt.n	802499c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024986:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024988:	4549      	cmp	r1, r9
 802498a:	dd07      	ble.n	802499c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802498c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024990:	4288      	cmp	r0, r1
 8024992:	d337      	bcc.n	8024a04 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8024994:	f04f 0201 	mov.w	r2, #1
 8024998:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802499c:	9a00      	ldr	r2, [sp, #0]
 802499e:	82a7      	strh	r7, [r4, #20]
 80249a0:	82e2      	strh	r2, [r4, #22]
 80249a2:	f04f 0200 	mov.w	r2, #0
 80249a6:	8322      	strh	r2, [r4, #24]
 80249a8:	8362      	strh	r2, [r4, #26]
 80249aa:	45be      	cmp	lr, r7
 80249ac:	d1c8      	bne.n	8024940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80249ae:	9b03      	ldr	r3, [sp, #12]
 80249b0:	8b62      	ldrh	r2, [r4, #26]
 80249b2:	eba3 0c0c 	sub.w	ip, r3, ip
 80249b6:	8b23      	ldrh	r3, [r4, #24]
 80249b8:	4463      	add	r3, ip
 80249ba:	8323      	strh	r3, [r4, #24]
 80249bc:	9b02      	ldr	r3, [sp, #8]
 80249be:	3320      	adds	r3, #32
 80249c0:	eba3 030b 	sub.w	r3, r3, fp
 80249c4:	fb0c 2c03 	mla	ip, ip, r3, r2
 80249c8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80249cc:	f7ff baae 	b.w	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80249d0:	f04f 32ff 	mov.w	r2, #4294967295
 80249d4:	fb05 f508 	mul.w	r5, r5, r8
 80249d8:	425b      	negs	r3, r3
 80249da:	f04f 0b00 	mov.w	fp, #0
 80249de:	9201      	str	r2, [sp, #4]
 80249e0:	e761      	b.n	80248a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80249e2:	f104 0814 	add.w	r8, r4, #20
 80249e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80249ea:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80249ee:	f8c9 0000 	str.w	r0, [r9]
 80249f2:	f8c9 1004 	str.w	r1, [r9, #4]
 80249f6:	6921      	ldr	r1, [r4, #16]
 80249f8:	3108      	adds	r1, #8
 80249fa:	6121      	str	r1, [r4, #16]
 80249fc:	68a1      	ldr	r1, [r4, #8]
 80249fe:	3101      	adds	r1, #1
 8024a00:	60a1      	str	r1, [r4, #8]
 8024a02:	e782      	b.n	802490a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024a04:	f104 0914 	add.w	r9, r4, #20
 8024a08:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024a0c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024a10:	f8ca 0000 	str.w	r0, [sl]
 8024a14:	f8ca 1004 	str.w	r1, [sl, #4]
 8024a18:	6921      	ldr	r1, [r4, #16]
 8024a1a:	3108      	adds	r1, #8
 8024a1c:	6121      	str	r1, [r4, #16]
 8024a1e:	68a1      	ldr	r1, [r4, #8]
 8024a20:	3101      	adds	r1, #1
 8024a22:	60a1      	str	r1, [r4, #8]
 8024a24:	e7ba      	b.n	802499c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08024a26 <_ZN8touchgfx7Outline6lineToEii>:
 8024a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024a28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024a2a:	4604      	mov	r4, r0
 8024a2c:	460d      	mov	r5, r1
 8024a2e:	4616      	mov	r6, r2
 8024a30:	079b      	lsls	r3, r3, #30
 8024a32:	d526      	bpl.n	8024a82 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024a34:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024a38:	ea85 0001 	eor.w	r0, r5, r1
 8024a3c:	ea86 0302 	eor.w	r3, r6, r2
 8024a40:	4303      	orrs	r3, r0
 8024a42:	d01e      	beq.n	8024a82 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024a44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024a46:	114b      	asrs	r3, r1, #5
 8024a48:	9600      	str	r6, [sp, #0]
 8024a4a:	4283      	cmp	r3, r0
 8024a4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024a4e:	bfb8      	it	lt
 8024a50:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024a52:	3301      	adds	r3, #1
 8024a54:	4283      	cmp	r3, r0
 8024a56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024a58:	bfc8      	it	gt
 8024a5a:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024a5c:	116b      	asrs	r3, r5, #5
 8024a5e:	4283      	cmp	r3, r0
 8024a60:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024a62:	bfb8      	it	lt
 8024a64:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024a66:	3301      	adds	r3, #1
 8024a68:	4283      	cmp	r3, r0
 8024a6a:	4620      	mov	r0, r4
 8024a6c:	bfc8      	it	gt
 8024a6e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024a70:	462b      	mov	r3, r5
 8024a72:	f7ff f9e3 	bl	8023e3c <_ZN8touchgfx7Outline10renderLineEiiii>
 8024a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024a78:	f043 0301 	orr.w	r3, r3, #1
 8024a7c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024a80:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024a82:	b002      	add	sp, #8
 8024a84:	bd70      	pop	{r4, r5, r6, pc}

08024a86 <_ZN8touchgfx7Outline6moveToEii>:
 8024a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024a8a:	4615      	mov	r5, r2
 8024a8c:	4604      	mov	r4, r0
 8024a8e:	460e      	mov	r6, r1
 8024a90:	079a      	lsls	r2, r3, #30
 8024a92:	d401      	bmi.n	8024a98 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024a94:	f7ff f98c 	bl	8023db0 <_ZN8touchgfx7Outline5resetEv>
 8024a98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024a9a:	07db      	lsls	r3, r3, #31
 8024a9c:	d504      	bpl.n	8024aa8 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8024a9e:	4620      	mov	r0, r4
 8024aa0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024aa4:	f7ff ffbf 	bl	8024a26 <_ZN8touchgfx7Outline6lineToEii>
 8024aa8:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8024aac:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024ab0:	116f      	asrs	r7, r5, #5
 8024ab2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024ab6:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8024aba:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8024abe:	4291      	cmp	r1, r2
 8024ac0:	d015      	beq.n	8024aee <_ZN8touchgfx7Outline6moveToEii+0x68>
 8024ac2:	8b61      	ldrh	r1, [r4, #26]
 8024ac4:	8b22      	ldrh	r2, [r4, #24]
 8024ac6:	430a      	orrs	r2, r1
 8024ac8:	d00b      	beq.n	8024ae2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024aca:	2b00      	cmp	r3, #0
 8024acc:	db09      	blt.n	8024ae2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024ace:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024ad0:	429a      	cmp	r2, r3
 8024ad2:	dd06      	ble.n	8024ae2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024ad4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024ad8:	429a      	cmp	r2, r3
 8024ada:	d30d      	bcc.n	8024af8 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8024adc:	2301      	movs	r3, #1
 8024ade:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024ae2:	2300      	movs	r3, #0
 8024ae4:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024ae8:	82e7      	strh	r7, [r4, #22]
 8024aea:	8323      	strh	r3, [r4, #24]
 8024aec:	8363      	strh	r3, [r4, #26]
 8024aee:	61e6      	str	r6, [r4, #28]
 8024af0:	62a5      	str	r5, [r4, #40]	; 0x28
 8024af2:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8024af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024af8:	f104 0314 	add.w	r3, r4, #20
 8024afc:	6922      	ldr	r2, [r4, #16]
 8024afe:	cb03      	ldmia	r3!, {r0, r1}
 8024b00:	6010      	str	r0, [r2, #0]
 8024b02:	6051      	str	r1, [r2, #4]
 8024b04:	6923      	ldr	r3, [r4, #16]
 8024b06:	3308      	adds	r3, #8
 8024b08:	6123      	str	r3, [r4, #16]
 8024b0a:	68a3      	ldr	r3, [r4, #8]
 8024b0c:	3301      	adds	r3, #1
 8024b0e:	60a3      	str	r3, [r4, #8]
 8024b10:	e7e7      	b.n	8024ae2 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08024b12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8024b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b16:	b0d1      	sub	sp, #324	; 0x144
 8024b18:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024b1c:	466c      	mov	r4, sp
 8024b1e:	1a0d      	subs	r5, r1, r0
 8024b20:	f100 0208 	add.w	r2, r0, #8
 8024b24:	2d48      	cmp	r5, #72	; 0x48
 8024b26:	f340 80ba 	ble.w	8024c9e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024b2a:	112d      	asrs	r5, r5, #4
 8024b2c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024b30:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8024b34:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024b38:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024b3c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024b40:	681e      	ldr	r6, [r3, #0]
 8024b42:	6006      	str	r6, [r0, #0]
 8024b44:	685e      	ldr	r6, [r3, #4]
 8024b46:	6046      	str	r6, [r0, #4]
 8024b48:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024b4c:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024b50:	f8a3 e002 	strh.w	lr, [r3, #2]
 8024b54:	80df      	strh	r7, [r3, #6]
 8024b56:	f1a1 0308 	sub.w	r3, r1, #8
 8024b5a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024b5e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8024b62:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8024b66:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024b6a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024b6e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024b72:	45ac      	cmp	ip, r5
 8024b74:	dd0f      	ble.n	8024b96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8024b76:	681d      	ldr	r5, [r3, #0]
 8024b78:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024b7c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024b80:	6015      	str	r5, [r2, #0]
 8024b82:	685d      	ldr	r5, [r3, #4]
 8024b84:	6055      	str	r5, [r2, #4]
 8024b86:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024b8a:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024b8e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024b92:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024b96:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8024b9a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024b9e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024ba2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024ba6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024baa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024bae:	4565      	cmp	r5, ip
 8024bb0:	dd0d      	ble.n	8024bce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024bb2:	6815      	ldr	r5, [r2, #0]
 8024bb4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024bb8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024bbc:	6005      	str	r5, [r0, #0]
 8024bbe:	6855      	ldr	r5, [r2, #4]
 8024bc0:	8107      	strh	r7, [r0, #8]
 8024bc2:	6045      	str	r5, [r0, #4]
 8024bc4:	8146      	strh	r6, [r0, #10]
 8024bc6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8024bca:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8024bce:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024bd2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024bd6:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8024bda:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024bde:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024be2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024be6:	45ac      	cmp	ip, r5
 8024be8:	dd0f      	ble.n	8024c0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024bea:	681d      	ldr	r5, [r3, #0]
 8024bec:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024bf0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024bf4:	6005      	str	r5, [r0, #0]
 8024bf6:	685d      	ldr	r5, [r3, #4]
 8024bf8:	6045      	str	r5, [r0, #4]
 8024bfa:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024bfe:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024c02:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024c06:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024c0a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024c0e:	f102 0508 	add.w	r5, r2, #8
 8024c12:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024c16:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024c1a:	462f      	mov	r7, r5
 8024c1c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024c20:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024c24:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024c28:	45b2      	cmp	sl, r6
 8024c2a:	dc18      	bgt.n	8024c5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024c2c:	3b08      	subs	r3, #8
 8024c2e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024c36:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024c3a:	45b2      	cmp	sl, r6
 8024c3c:	dbf6      	blt.n	8024c2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024c3e:	42ab      	cmp	r3, r5
 8024c40:	681e      	ldr	r6, [r3, #0]
 8024c42:	d30e      	bcc.n	8024c62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024c44:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024c48:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024c4c:	602e      	str	r6, [r5, #0]
 8024c4e:	685e      	ldr	r6, [r3, #4]
 8024c50:	606e      	str	r6, [r5, #4]
 8024c52:	f8a3 9000 	strh.w	r9, [r3]
 8024c56:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024c5a:	809f      	strh	r7, [r3, #4]
 8024c5c:	80da      	strh	r2, [r3, #6]
 8024c5e:	462a      	mov	r2, r5
 8024c60:	e7d3      	b.n	8024c0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024c62:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024c66:	6006      	str	r6, [r0, #0]
 8024c68:	685e      	ldr	r6, [r3, #4]
 8024c6a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024c6e:	6046      	str	r6, [r0, #4]
 8024c70:	1a1e      	subs	r6, r3, r0
 8024c72:	80da      	strh	r2, [r3, #6]
 8024c74:	1b4a      	subs	r2, r1, r5
 8024c76:	f8a3 e000 	strh.w	lr, [r3]
 8024c7a:	10d2      	asrs	r2, r2, #3
 8024c7c:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024c80:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024c84:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024c88:	bfb5      	itete	lt
 8024c8a:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024c8e:	4607      	movge	r7, r0
 8024c90:	460b      	movlt	r3, r1
 8024c92:	e9c4 5100 	strdge	r5, r1, [r4]
 8024c96:	4638      	mov	r0, r7
 8024c98:	3408      	adds	r4, #8
 8024c9a:	4619      	mov	r1, r3
 8024c9c:	e73f      	b.n	8024b1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024c9e:	4291      	cmp	r1, r2
 8024ca0:	d925      	bls.n	8024cee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024ca2:	f1a2 0310 	sub.w	r3, r2, #16
 8024ca6:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8024caa:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024cae:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024cb2:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024cb6:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8024cba:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024cbe:	42b5      	cmp	r5, r6
 8024cc0:	dd13      	ble.n	8024cea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024cc2:	461d      	mov	r5, r3
 8024cc4:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024cc8:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024ccc:	3b08      	subs	r3, #8
 8024cce:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024cd2:	619e      	str	r6, [r3, #24]
 8024cd4:	42a8      	cmp	r0, r5
 8024cd6:	686e      	ldr	r6, [r5, #4]
 8024cd8:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024cdc:	61de      	str	r6, [r3, #28]
 8024cde:	825f      	strh	r7, [r3, #18]
 8024ce0:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024ce4:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024ce8:	d1dd      	bne.n	8024ca6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024cea:	3208      	adds	r2, #8
 8024cec:	e7d7      	b.n	8024c9e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024cee:	466b      	mov	r3, sp
 8024cf0:	429c      	cmp	r4, r3
 8024cf2:	d903      	bls.n	8024cfc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024cf4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024cf8:	3c08      	subs	r4, #8
 8024cfa:	e710      	b.n	8024b1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024cfc:	b051      	add	sp, #324	; 0x144
 8024cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d02 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024d02:	6881      	ldr	r1, [r0, #8]
 8024d04:	b111      	cbz	r1, 8024d0c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024d06:	68c0      	ldr	r0, [r0, #12]
 8024d08:	f7ff bf03 	b.w	8024b12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024d0c:	4770      	bx	lr

08024d0e <_ZN8touchgfx7Outline8getCellsEv>:
 8024d0e:	b510      	push	{r4, lr}
 8024d10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024d12:	4604      	mov	r4, r0
 8024d14:	07da      	lsls	r2, r3, #31
 8024d16:	d507      	bpl.n	8024d28 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024d18:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024d1c:	f7ff fe83 	bl	8024a26 <_ZN8touchgfx7Outline6lineToEii>
 8024d20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024d22:	f023 0301 	bic.w	r3, r3, #1
 8024d26:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024d2a:	079b      	lsls	r3, r3, #30
 8024d2c:	d51a      	bpl.n	8024d64 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024d2e:	8b62      	ldrh	r2, [r4, #26]
 8024d30:	8b23      	ldrh	r3, [r4, #24]
 8024d32:	4313      	orrs	r3, r2
 8024d34:	d00d      	beq.n	8024d52 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024d36:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	db09      	blt.n	8024d52 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024d3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024d40:	4293      	cmp	r3, r2
 8024d42:	da06      	bge.n	8024d52 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024d44:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024d48:	429a      	cmp	r2, r3
 8024d4a:	d80d      	bhi.n	8024d68 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024d4c:	2301      	movs	r3, #1
 8024d4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d52:	68a0      	ldr	r0, [r4, #8]
 8024d54:	b138      	cbz	r0, 8024d66 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024d56:	4620      	mov	r0, r4
 8024d58:	f7ff ffd3 	bl	8024d02 <_ZN8touchgfx7Outline9sortCellsEv>
 8024d5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024d5e:	f023 0302 	bic.w	r3, r3, #2
 8024d62:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024d64:	68e0      	ldr	r0, [r4, #12]
 8024d66:	bd10      	pop	{r4, pc}
 8024d68:	f104 0314 	add.w	r3, r4, #20
 8024d6c:	6922      	ldr	r2, [r4, #16]
 8024d6e:	cb03      	ldmia	r3!, {r0, r1}
 8024d70:	6010      	str	r0, [r2, #0]
 8024d72:	6051      	str	r1, [r2, #4]
 8024d74:	6923      	ldr	r3, [r4, #16]
 8024d76:	3308      	adds	r3, #8
 8024d78:	6123      	str	r3, [r4, #16]
 8024d7a:	68a3      	ldr	r3, [r4, #8]
 8024d7c:	3301      	adds	r3, #1
 8024d7e:	60a3      	str	r3, [r4, #8]
 8024d80:	e7e7      	b.n	8024d52 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024d82 <_ZN8touchgfx8ScanlineD1Ev>:
 8024d82:	4770      	bx	lr

08024d84 <_ZN8touchgfx8ScanlineD0Ev>:
 8024d84:	b510      	push	{r4, lr}
 8024d86:	4604      	mov	r4, r0
 8024d88:	2124      	movs	r1, #36	; 0x24
 8024d8a:	f000 f877 	bl	8024e7c <_ZdlPvj>
 8024d8e:	4620      	mov	r0, r4
 8024d90:	bd10      	pop	{r4, pc}

08024d92 <_ZN8touchgfx8Scanline5resetEv>:
 8024d92:	b510      	push	{r4, lr}
 8024d94:	4604      	mov	r4, r0
 8024d96:	f7f3 f8f9 	bl	8017f8c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024d9a:	61a0      	str	r0, [r4, #24]
 8024d9c:	f7f3 f8fc 	bl	8017f98 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024da0:	61e0      	str	r0, [r4, #28]
 8024da2:	f7f3 f8ff 	bl	8017fa4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024da6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024daa:	6220      	str	r0, [r4, #32]
 8024dac:	6160      	str	r0, [r4, #20]
 8024dae:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024db2:	69e3      	ldr	r3, [r4, #28]
 8024db4:	6123      	str	r3, [r4, #16]
 8024db6:	2300      	movs	r3, #0
 8024db8:	60e3      	str	r3, [r4, #12]
 8024dba:	bd10      	pop	{r4, pc}

08024dbc <_ZN8touchgfx8ScanlineC1Ev>:
 8024dbc:	4b07      	ldr	r3, [pc, #28]	; (8024ddc <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8024dbe:	b510      	push	{r4, lr}
 8024dc0:	6003      	str	r3, [r0, #0]
 8024dc2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024dc6:	4604      	mov	r4, r0
 8024dc8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024dcc:	2300      	movs	r3, #0
 8024dce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024dd2:	6143      	str	r3, [r0, #20]
 8024dd4:	f7ff ffdd 	bl	8024d92 <_ZN8touchgfx8Scanline5resetEv>
 8024dd8:	4620      	mov	r0, r4
 8024dda:	bd10      	pop	{r4, pc}
 8024ddc:	0802a230 	.word	0x0802a230

08024de0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024de4:	1e0c      	subs	r4, r1, #0
 8024de6:	4605      	mov	r5, r0
 8024de8:	4617      	mov	r7, r2
 8024dea:	461e      	mov	r6, r3
 8024dec:	da03      	bge.n	8024df6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024dee:	4426      	add	r6, r4
 8024df0:	2e01      	cmp	r6, #1
 8024df2:	d421      	bmi.n	8024e38 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024df4:	2400      	movs	r4, #0
 8024df6:	f7f3 f8c3 	bl	8017f80 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024dfa:	42a0      	cmp	r0, r4
 8024dfc:	d91c      	bls.n	8024e38 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024dfe:	eb04 0806 	add.w	r8, r4, r6
 8024e02:	f7f3 f8bd 	bl	8017f80 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024e06:	4580      	cmp	r8, r0
 8024e08:	d902      	bls.n	8024e10 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024e0a:	f7f3 f8b9 	bl	8017f80 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024e0e:	1b06      	subs	r6, r0, r4
 8024e10:	69a8      	ldr	r0, [r5, #24]
 8024e12:	4632      	mov	r2, r6
 8024e14:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024e18:	4420      	add	r0, r4
 8024e1a:	f7f4 fdb0 	bl	801997e <_ZN8touchgfx6memsetEPvhm>
 8024e1e:	686b      	ldr	r3, [r5, #4]
 8024e20:	b2b2      	uxth	r2, r6
 8024e22:	3301      	adds	r3, #1
 8024e24:	42a3      	cmp	r3, r4
 8024e26:	696b      	ldr	r3, [r5, #20]
 8024e28:	d108      	bne.n	8024e3c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024e2a:	8819      	ldrh	r1, [r3, #0]
 8024e2c:	440a      	add	r2, r1
 8024e2e:	801a      	strh	r2, [r3, #0]
 8024e30:	3c01      	subs	r4, #1
 8024e32:	4434      	add	r4, r6
 8024e34:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e3c:	1c99      	adds	r1, r3, #2
 8024e3e:	6169      	str	r1, [r5, #20]
 8024e40:	805a      	strh	r2, [r3, #2]
 8024e42:	692b      	ldr	r3, [r5, #16]
 8024e44:	1c9a      	adds	r2, r3, #2
 8024e46:	612a      	str	r2, [r5, #16]
 8024e48:	805c      	strh	r4, [r3, #2]
 8024e4a:	68eb      	ldr	r3, [r5, #12]
 8024e4c:	3301      	adds	r3, #1
 8024e4e:	60eb      	str	r3, [r5, #12]
 8024e50:	e7ee      	b.n	8024e30 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024e52 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024e52:	2200      	movs	r2, #0
 8024e54:	6002      	str	r2, [r0, #0]
 8024e56:	7102      	strb	r2, [r0, #4]
 8024e58:	6102      	str	r2, [r0, #16]
 8024e5a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024e5e:	4770      	bx	lr

08024e60 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024e60:	4770      	bx	lr

08024e62 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024e62:	6083      	str	r3, [r0, #8]
 8024e64:	9b00      	ldr	r3, [sp, #0]
 8024e66:	6001      	str	r1, [r0, #0]
 8024e68:	60c3      	str	r3, [r0, #12]
 8024e6a:	9b01      	ldr	r3, [sp, #4]
 8024e6c:	7102      	strb	r2, [r0, #4]
 8024e6e:	6103      	str	r3, [r0, #16]
 8024e70:	4770      	bx	lr

08024e72 <__aeabi_atexit>:
 8024e72:	460b      	mov	r3, r1
 8024e74:	4601      	mov	r1, r0
 8024e76:	4618      	mov	r0, r3
 8024e78:	f000 b90e 	b.w	8025098 <__cxa_atexit>

08024e7c <_ZdlPvj>:
 8024e7c:	f000 b812 	b.w	8024ea4 <_ZdlPv>

08024e80 <__cxa_guard_acquire>:
 8024e80:	6803      	ldr	r3, [r0, #0]
 8024e82:	07db      	lsls	r3, r3, #31
 8024e84:	d406      	bmi.n	8024e94 <__cxa_guard_acquire+0x14>
 8024e86:	7843      	ldrb	r3, [r0, #1]
 8024e88:	b103      	cbz	r3, 8024e8c <__cxa_guard_acquire+0xc>
 8024e8a:	deff      	udf	#255	; 0xff
 8024e8c:	2301      	movs	r3, #1
 8024e8e:	7043      	strb	r3, [r0, #1]
 8024e90:	4618      	mov	r0, r3
 8024e92:	4770      	bx	lr
 8024e94:	2000      	movs	r0, #0
 8024e96:	4770      	bx	lr

08024e98 <__cxa_guard_release>:
 8024e98:	2301      	movs	r3, #1
 8024e9a:	6003      	str	r3, [r0, #0]
 8024e9c:	4770      	bx	lr

08024e9e <__cxa_pure_virtual>:
 8024e9e:	b508      	push	{r3, lr}
 8024ea0:	f000 f80e 	bl	8024ec0 <_ZSt9terminatev>

08024ea4 <_ZdlPv>:
 8024ea4:	f000 b844 	b.w	8024f30 <free>

08024ea8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024ea8:	b508      	push	{r3, lr}
 8024eaa:	4780      	blx	r0
 8024eac:	f000 f80d 	bl	8024eca <abort>

08024eb0 <_ZSt13get_terminatev>:
 8024eb0:	4b02      	ldr	r3, [pc, #8]	; (8024ebc <_ZSt13get_terminatev+0xc>)
 8024eb2:	6818      	ldr	r0, [r3, #0]
 8024eb4:	f3bf 8f5b 	dmb	ish
 8024eb8:	4770      	bx	lr
 8024eba:	bf00      	nop
 8024ebc:	200000ac 	.word	0x200000ac

08024ec0 <_ZSt9terminatev>:
 8024ec0:	b508      	push	{r3, lr}
 8024ec2:	f7ff fff5 	bl	8024eb0 <_ZSt13get_terminatev>
 8024ec6:	f7ff ffef 	bl	8024ea8 <_ZN10__cxxabiv111__terminateEPFvvE>

08024eca <abort>:
 8024eca:	b508      	push	{r3, lr}
 8024ecc:	2006      	movs	r0, #6
 8024ece:	f000 fa27 	bl	8025320 <raise>
 8024ed2:	2001      	movs	r0, #1
 8024ed4:	f7de fbba 	bl	800364c <_exit>

08024ed8 <__assert_func>:
 8024ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024eda:	4614      	mov	r4, r2
 8024edc:	461a      	mov	r2, r3
 8024ede:	4b09      	ldr	r3, [pc, #36]	; (8024f04 <__assert_func+0x2c>)
 8024ee0:	681b      	ldr	r3, [r3, #0]
 8024ee2:	4605      	mov	r5, r0
 8024ee4:	68d8      	ldr	r0, [r3, #12]
 8024ee6:	b14c      	cbz	r4, 8024efc <__assert_func+0x24>
 8024ee8:	4b07      	ldr	r3, [pc, #28]	; (8024f08 <__assert_func+0x30>)
 8024eea:	9100      	str	r1, [sp, #0]
 8024eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024ef0:	4906      	ldr	r1, [pc, #24]	; (8024f0c <__assert_func+0x34>)
 8024ef2:	462b      	mov	r3, r5
 8024ef4:	f000 f970 	bl	80251d8 <fiprintf>
 8024ef8:	f7ff ffe7 	bl	8024eca <abort>
 8024efc:	4b04      	ldr	r3, [pc, #16]	; (8024f10 <__assert_func+0x38>)
 8024efe:	461c      	mov	r4, r3
 8024f00:	e7f3      	b.n	8024eea <__assert_func+0x12>
 8024f02:	bf00      	nop
 8024f04:	20000108 	.word	0x20000108
 8024f08:	0802a238 	.word	0x0802a238
 8024f0c:	0802a245 	.word	0x0802a245
 8024f10:	0802a273 	.word	0x0802a273

08024f14 <atexit>:
 8024f14:	2300      	movs	r3, #0
 8024f16:	4601      	mov	r1, r0
 8024f18:	461a      	mov	r2, r3
 8024f1a:	4618      	mov	r0, r3
 8024f1c:	f000 baac 	b.w	8025478 <__register_exitproc>

08024f20 <malloc>:
 8024f20:	4b02      	ldr	r3, [pc, #8]	; (8024f2c <malloc+0xc>)
 8024f22:	4601      	mov	r1, r0
 8024f24:	6818      	ldr	r0, [r3, #0]
 8024f26:	f000 b82b 	b.w	8024f80 <_malloc_r>
 8024f2a:	bf00      	nop
 8024f2c:	20000108 	.word	0x20000108

08024f30 <free>:
 8024f30:	4b02      	ldr	r3, [pc, #8]	; (8024f3c <free+0xc>)
 8024f32:	4601      	mov	r1, r0
 8024f34:	6818      	ldr	r0, [r3, #0]
 8024f36:	f000 bafd 	b.w	8025534 <_free_r>
 8024f3a:	bf00      	nop
 8024f3c:	20000108 	.word	0x20000108

08024f40 <sbrk_aligned>:
 8024f40:	b570      	push	{r4, r5, r6, lr}
 8024f42:	4e0e      	ldr	r6, [pc, #56]	; (8024f7c <sbrk_aligned+0x3c>)
 8024f44:	460c      	mov	r4, r1
 8024f46:	6831      	ldr	r1, [r6, #0]
 8024f48:	4605      	mov	r5, r0
 8024f4a:	b911      	cbnz	r1, 8024f52 <sbrk_aligned+0x12>
 8024f4c:	f000 fa38 	bl	80253c0 <_sbrk_r>
 8024f50:	6030      	str	r0, [r6, #0]
 8024f52:	4621      	mov	r1, r4
 8024f54:	4628      	mov	r0, r5
 8024f56:	f000 fa33 	bl	80253c0 <_sbrk_r>
 8024f5a:	1c43      	adds	r3, r0, #1
 8024f5c:	d00a      	beq.n	8024f74 <sbrk_aligned+0x34>
 8024f5e:	1cc4      	adds	r4, r0, #3
 8024f60:	f024 0403 	bic.w	r4, r4, #3
 8024f64:	42a0      	cmp	r0, r4
 8024f66:	d007      	beq.n	8024f78 <sbrk_aligned+0x38>
 8024f68:	1a21      	subs	r1, r4, r0
 8024f6a:	4628      	mov	r0, r5
 8024f6c:	f000 fa28 	bl	80253c0 <_sbrk_r>
 8024f70:	3001      	adds	r0, #1
 8024f72:	d101      	bne.n	8024f78 <sbrk_aligned+0x38>
 8024f74:	f04f 34ff 	mov.w	r4, #4294967295
 8024f78:	4620      	mov	r0, r4
 8024f7a:	bd70      	pop	{r4, r5, r6, pc}
 8024f7c:	2000c628 	.word	0x2000c628

08024f80 <_malloc_r>:
 8024f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024f84:	1ccd      	adds	r5, r1, #3
 8024f86:	f025 0503 	bic.w	r5, r5, #3
 8024f8a:	3508      	adds	r5, #8
 8024f8c:	2d0c      	cmp	r5, #12
 8024f8e:	bf38      	it	cc
 8024f90:	250c      	movcc	r5, #12
 8024f92:	2d00      	cmp	r5, #0
 8024f94:	4607      	mov	r7, r0
 8024f96:	db01      	blt.n	8024f9c <_malloc_r+0x1c>
 8024f98:	42a9      	cmp	r1, r5
 8024f9a:	d905      	bls.n	8024fa8 <_malloc_r+0x28>
 8024f9c:	230c      	movs	r3, #12
 8024f9e:	603b      	str	r3, [r7, #0]
 8024fa0:	2600      	movs	r6, #0
 8024fa2:	4630      	mov	r0, r6
 8024fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802507c <_malloc_r+0xfc>
 8024fac:	f000 f868 	bl	8025080 <__malloc_lock>
 8024fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8024fb4:	461c      	mov	r4, r3
 8024fb6:	bb5c      	cbnz	r4, 8025010 <_malloc_r+0x90>
 8024fb8:	4629      	mov	r1, r5
 8024fba:	4638      	mov	r0, r7
 8024fbc:	f7ff ffc0 	bl	8024f40 <sbrk_aligned>
 8024fc0:	1c43      	adds	r3, r0, #1
 8024fc2:	4604      	mov	r4, r0
 8024fc4:	d155      	bne.n	8025072 <_malloc_r+0xf2>
 8024fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8024fca:	4626      	mov	r6, r4
 8024fcc:	2e00      	cmp	r6, #0
 8024fce:	d145      	bne.n	802505c <_malloc_r+0xdc>
 8024fd0:	2c00      	cmp	r4, #0
 8024fd2:	d048      	beq.n	8025066 <_malloc_r+0xe6>
 8024fd4:	6823      	ldr	r3, [r4, #0]
 8024fd6:	4631      	mov	r1, r6
 8024fd8:	4638      	mov	r0, r7
 8024fda:	eb04 0903 	add.w	r9, r4, r3
 8024fde:	f000 f9ef 	bl	80253c0 <_sbrk_r>
 8024fe2:	4581      	cmp	r9, r0
 8024fe4:	d13f      	bne.n	8025066 <_malloc_r+0xe6>
 8024fe6:	6821      	ldr	r1, [r4, #0]
 8024fe8:	1a6d      	subs	r5, r5, r1
 8024fea:	4629      	mov	r1, r5
 8024fec:	4638      	mov	r0, r7
 8024fee:	f7ff ffa7 	bl	8024f40 <sbrk_aligned>
 8024ff2:	3001      	adds	r0, #1
 8024ff4:	d037      	beq.n	8025066 <_malloc_r+0xe6>
 8024ff6:	6823      	ldr	r3, [r4, #0]
 8024ff8:	442b      	add	r3, r5
 8024ffa:	6023      	str	r3, [r4, #0]
 8024ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8025000:	2b00      	cmp	r3, #0
 8025002:	d038      	beq.n	8025076 <_malloc_r+0xf6>
 8025004:	685a      	ldr	r2, [r3, #4]
 8025006:	42a2      	cmp	r2, r4
 8025008:	d12b      	bne.n	8025062 <_malloc_r+0xe2>
 802500a:	2200      	movs	r2, #0
 802500c:	605a      	str	r2, [r3, #4]
 802500e:	e00f      	b.n	8025030 <_malloc_r+0xb0>
 8025010:	6822      	ldr	r2, [r4, #0]
 8025012:	1b52      	subs	r2, r2, r5
 8025014:	d41f      	bmi.n	8025056 <_malloc_r+0xd6>
 8025016:	2a0b      	cmp	r2, #11
 8025018:	d917      	bls.n	802504a <_malloc_r+0xca>
 802501a:	1961      	adds	r1, r4, r5
 802501c:	42a3      	cmp	r3, r4
 802501e:	6025      	str	r5, [r4, #0]
 8025020:	bf18      	it	ne
 8025022:	6059      	strne	r1, [r3, #4]
 8025024:	6863      	ldr	r3, [r4, #4]
 8025026:	bf08      	it	eq
 8025028:	f8c8 1000 	streq.w	r1, [r8]
 802502c:	5162      	str	r2, [r4, r5]
 802502e:	604b      	str	r3, [r1, #4]
 8025030:	4638      	mov	r0, r7
 8025032:	f104 060b 	add.w	r6, r4, #11
 8025036:	f000 f829 	bl	802508c <__malloc_unlock>
 802503a:	f026 0607 	bic.w	r6, r6, #7
 802503e:	1d23      	adds	r3, r4, #4
 8025040:	1af2      	subs	r2, r6, r3
 8025042:	d0ae      	beq.n	8024fa2 <_malloc_r+0x22>
 8025044:	1b9b      	subs	r3, r3, r6
 8025046:	50a3      	str	r3, [r4, r2]
 8025048:	e7ab      	b.n	8024fa2 <_malloc_r+0x22>
 802504a:	42a3      	cmp	r3, r4
 802504c:	6862      	ldr	r2, [r4, #4]
 802504e:	d1dd      	bne.n	802500c <_malloc_r+0x8c>
 8025050:	f8c8 2000 	str.w	r2, [r8]
 8025054:	e7ec      	b.n	8025030 <_malloc_r+0xb0>
 8025056:	4623      	mov	r3, r4
 8025058:	6864      	ldr	r4, [r4, #4]
 802505a:	e7ac      	b.n	8024fb6 <_malloc_r+0x36>
 802505c:	4634      	mov	r4, r6
 802505e:	6876      	ldr	r6, [r6, #4]
 8025060:	e7b4      	b.n	8024fcc <_malloc_r+0x4c>
 8025062:	4613      	mov	r3, r2
 8025064:	e7cc      	b.n	8025000 <_malloc_r+0x80>
 8025066:	230c      	movs	r3, #12
 8025068:	603b      	str	r3, [r7, #0]
 802506a:	4638      	mov	r0, r7
 802506c:	f000 f80e 	bl	802508c <__malloc_unlock>
 8025070:	e797      	b.n	8024fa2 <_malloc_r+0x22>
 8025072:	6025      	str	r5, [r4, #0]
 8025074:	e7dc      	b.n	8025030 <_malloc_r+0xb0>
 8025076:	605b      	str	r3, [r3, #4]
 8025078:	deff      	udf	#255	; 0xff
 802507a:	bf00      	nop
 802507c:	2000c624 	.word	0x2000c624

08025080 <__malloc_lock>:
 8025080:	4801      	ldr	r0, [pc, #4]	; (8025088 <__malloc_lock+0x8>)
 8025082:	f000 b9e9 	b.w	8025458 <__retarget_lock_acquire_recursive>
 8025086:	bf00      	nop
 8025088:	2000c76d 	.word	0x2000c76d

0802508c <__malloc_unlock>:
 802508c:	4801      	ldr	r0, [pc, #4]	; (8025094 <__malloc_unlock+0x8>)
 802508e:	f000 b9e4 	b.w	802545a <__retarget_lock_release_recursive>
 8025092:	bf00      	nop
 8025094:	2000c76d 	.word	0x2000c76d

08025098 <__cxa_atexit>:
 8025098:	b510      	push	{r4, lr}
 802509a:	4c05      	ldr	r4, [pc, #20]	; (80250b0 <__cxa_atexit+0x18>)
 802509c:	4613      	mov	r3, r2
 802509e:	b12c      	cbz	r4, 80250ac <__cxa_atexit+0x14>
 80250a0:	460a      	mov	r2, r1
 80250a2:	4601      	mov	r1, r0
 80250a4:	2002      	movs	r0, #2
 80250a6:	f000 f9e7 	bl	8025478 <__register_exitproc>
 80250aa:	bd10      	pop	{r4, pc}
 80250ac:	4620      	mov	r0, r4
 80250ae:	e7fc      	b.n	80250aa <__cxa_atexit+0x12>
 80250b0:	08025479 	.word	0x08025479

080250b4 <std>:
 80250b4:	2300      	movs	r3, #0
 80250b6:	b510      	push	{r4, lr}
 80250b8:	4604      	mov	r4, r0
 80250ba:	e9c0 3300 	strd	r3, r3, [r0]
 80250be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80250c2:	6083      	str	r3, [r0, #8]
 80250c4:	8181      	strh	r1, [r0, #12]
 80250c6:	6643      	str	r3, [r0, #100]	; 0x64
 80250c8:	81c2      	strh	r2, [r0, #14]
 80250ca:	6183      	str	r3, [r0, #24]
 80250cc:	4619      	mov	r1, r3
 80250ce:	2208      	movs	r2, #8
 80250d0:	305c      	adds	r0, #92	; 0x5c
 80250d2:	f000 f8f4 	bl	80252be <memset>
 80250d6:	4b05      	ldr	r3, [pc, #20]	; (80250ec <std+0x38>)
 80250d8:	6263      	str	r3, [r4, #36]	; 0x24
 80250da:	4b05      	ldr	r3, [pc, #20]	; (80250f0 <std+0x3c>)
 80250dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80250de:	4b05      	ldr	r3, [pc, #20]	; (80250f4 <std+0x40>)
 80250e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80250e2:	4b05      	ldr	r3, [pc, #20]	; (80250f8 <std+0x44>)
 80250e4:	6224      	str	r4, [r4, #32]
 80250e6:	6323      	str	r3, [r4, #48]	; 0x30
 80250e8:	bd10      	pop	{r4, pc}
 80250ea:	bf00      	nop
 80250ec:	08025239 	.word	0x08025239
 80250f0:	0802525b 	.word	0x0802525b
 80250f4:	08025293 	.word	0x08025293
 80250f8:	080252b7 	.word	0x080252b7

080250fc <stdio_exit_handler>:
 80250fc:	4a02      	ldr	r2, [pc, #8]	; (8025108 <stdio_exit_handler+0xc>)
 80250fe:	4903      	ldr	r1, [pc, #12]	; (802510c <stdio_exit_handler+0x10>)
 8025100:	4803      	ldr	r0, [pc, #12]	; (8025110 <stdio_exit_handler+0x14>)
 8025102:	f000 b87b 	b.w	80251fc <_fwalk_sglue>
 8025106:	bf00      	nop
 8025108:	200000b0 	.word	0x200000b0
 802510c:	08025c81 	.word	0x08025c81
 8025110:	200000bc 	.word	0x200000bc

08025114 <cleanup_stdio>:
 8025114:	6841      	ldr	r1, [r0, #4]
 8025116:	4b0c      	ldr	r3, [pc, #48]	; (8025148 <cleanup_stdio+0x34>)
 8025118:	4299      	cmp	r1, r3
 802511a:	b510      	push	{r4, lr}
 802511c:	4604      	mov	r4, r0
 802511e:	d001      	beq.n	8025124 <cleanup_stdio+0x10>
 8025120:	f000 fdae 	bl	8025c80 <_fflush_r>
 8025124:	68a1      	ldr	r1, [r4, #8]
 8025126:	4b09      	ldr	r3, [pc, #36]	; (802514c <cleanup_stdio+0x38>)
 8025128:	4299      	cmp	r1, r3
 802512a:	d002      	beq.n	8025132 <cleanup_stdio+0x1e>
 802512c:	4620      	mov	r0, r4
 802512e:	f000 fda7 	bl	8025c80 <_fflush_r>
 8025132:	68e1      	ldr	r1, [r4, #12]
 8025134:	4b06      	ldr	r3, [pc, #24]	; (8025150 <cleanup_stdio+0x3c>)
 8025136:	4299      	cmp	r1, r3
 8025138:	d004      	beq.n	8025144 <cleanup_stdio+0x30>
 802513a:	4620      	mov	r0, r4
 802513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025140:	f000 bd9e 	b.w	8025c80 <_fflush_r>
 8025144:	bd10      	pop	{r4, pc}
 8025146:	bf00      	nop
 8025148:	2000c62c 	.word	0x2000c62c
 802514c:	2000c694 	.word	0x2000c694
 8025150:	2000c6fc 	.word	0x2000c6fc

08025154 <global_stdio_init.part.0>:
 8025154:	b510      	push	{r4, lr}
 8025156:	4b0b      	ldr	r3, [pc, #44]	; (8025184 <global_stdio_init.part.0+0x30>)
 8025158:	4c0b      	ldr	r4, [pc, #44]	; (8025188 <global_stdio_init.part.0+0x34>)
 802515a:	4a0c      	ldr	r2, [pc, #48]	; (802518c <global_stdio_init.part.0+0x38>)
 802515c:	601a      	str	r2, [r3, #0]
 802515e:	4620      	mov	r0, r4
 8025160:	2200      	movs	r2, #0
 8025162:	2104      	movs	r1, #4
 8025164:	f7ff ffa6 	bl	80250b4 <std>
 8025168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802516c:	2201      	movs	r2, #1
 802516e:	2109      	movs	r1, #9
 8025170:	f7ff ffa0 	bl	80250b4 <std>
 8025174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8025178:	2202      	movs	r2, #2
 802517a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802517e:	2112      	movs	r1, #18
 8025180:	f7ff bf98 	b.w	80250b4 <std>
 8025184:	2000c764 	.word	0x2000c764
 8025188:	2000c62c 	.word	0x2000c62c
 802518c:	080250fd 	.word	0x080250fd

08025190 <__sfp_lock_acquire>:
 8025190:	4801      	ldr	r0, [pc, #4]	; (8025198 <__sfp_lock_acquire+0x8>)
 8025192:	f000 b961 	b.w	8025458 <__retarget_lock_acquire_recursive>
 8025196:	bf00      	nop
 8025198:	2000c76e 	.word	0x2000c76e

0802519c <__sfp_lock_release>:
 802519c:	4801      	ldr	r0, [pc, #4]	; (80251a4 <__sfp_lock_release+0x8>)
 802519e:	f000 b95c 	b.w	802545a <__retarget_lock_release_recursive>
 80251a2:	bf00      	nop
 80251a4:	2000c76e 	.word	0x2000c76e

080251a8 <__sinit>:
 80251a8:	b510      	push	{r4, lr}
 80251aa:	4604      	mov	r4, r0
 80251ac:	f7ff fff0 	bl	8025190 <__sfp_lock_acquire>
 80251b0:	6a23      	ldr	r3, [r4, #32]
 80251b2:	b11b      	cbz	r3, 80251bc <__sinit+0x14>
 80251b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251b8:	f7ff bff0 	b.w	802519c <__sfp_lock_release>
 80251bc:	4b04      	ldr	r3, [pc, #16]	; (80251d0 <__sinit+0x28>)
 80251be:	6223      	str	r3, [r4, #32]
 80251c0:	4b04      	ldr	r3, [pc, #16]	; (80251d4 <__sinit+0x2c>)
 80251c2:	681b      	ldr	r3, [r3, #0]
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	d1f5      	bne.n	80251b4 <__sinit+0xc>
 80251c8:	f7ff ffc4 	bl	8025154 <global_stdio_init.part.0>
 80251cc:	e7f2      	b.n	80251b4 <__sinit+0xc>
 80251ce:	bf00      	nop
 80251d0:	08025115 	.word	0x08025115
 80251d4:	2000c764 	.word	0x2000c764

080251d8 <fiprintf>:
 80251d8:	b40e      	push	{r1, r2, r3}
 80251da:	b503      	push	{r0, r1, lr}
 80251dc:	4601      	mov	r1, r0
 80251de:	ab03      	add	r3, sp, #12
 80251e0:	4805      	ldr	r0, [pc, #20]	; (80251f8 <fiprintf+0x20>)
 80251e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80251e6:	6800      	ldr	r0, [r0, #0]
 80251e8:	9301      	str	r3, [sp, #4]
 80251ea:	f000 fa19 	bl	8025620 <_vfiprintf_r>
 80251ee:	b002      	add	sp, #8
 80251f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80251f4:	b003      	add	sp, #12
 80251f6:	4770      	bx	lr
 80251f8:	20000108 	.word	0x20000108

080251fc <_fwalk_sglue>:
 80251fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025200:	4607      	mov	r7, r0
 8025202:	4688      	mov	r8, r1
 8025204:	4614      	mov	r4, r2
 8025206:	2600      	movs	r6, #0
 8025208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802520c:	f1b9 0901 	subs.w	r9, r9, #1
 8025210:	d505      	bpl.n	802521e <_fwalk_sglue+0x22>
 8025212:	6824      	ldr	r4, [r4, #0]
 8025214:	2c00      	cmp	r4, #0
 8025216:	d1f7      	bne.n	8025208 <_fwalk_sglue+0xc>
 8025218:	4630      	mov	r0, r6
 802521a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802521e:	89ab      	ldrh	r3, [r5, #12]
 8025220:	2b01      	cmp	r3, #1
 8025222:	d907      	bls.n	8025234 <_fwalk_sglue+0x38>
 8025224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025228:	3301      	adds	r3, #1
 802522a:	d003      	beq.n	8025234 <_fwalk_sglue+0x38>
 802522c:	4629      	mov	r1, r5
 802522e:	4638      	mov	r0, r7
 8025230:	47c0      	blx	r8
 8025232:	4306      	orrs	r6, r0
 8025234:	3568      	adds	r5, #104	; 0x68
 8025236:	e7e9      	b.n	802520c <_fwalk_sglue+0x10>

08025238 <__sread>:
 8025238:	b510      	push	{r4, lr}
 802523a:	460c      	mov	r4, r1
 802523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025240:	f000 f898 	bl	8025374 <_read_r>
 8025244:	2800      	cmp	r0, #0
 8025246:	bfab      	itete	ge
 8025248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802524a:	89a3      	ldrhlt	r3, [r4, #12]
 802524c:	181b      	addge	r3, r3, r0
 802524e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025252:	bfac      	ite	ge
 8025254:	6563      	strge	r3, [r4, #84]	; 0x54
 8025256:	81a3      	strhlt	r3, [r4, #12]
 8025258:	bd10      	pop	{r4, pc}

0802525a <__swrite>:
 802525a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802525e:	461f      	mov	r7, r3
 8025260:	898b      	ldrh	r3, [r1, #12]
 8025262:	05db      	lsls	r3, r3, #23
 8025264:	4605      	mov	r5, r0
 8025266:	460c      	mov	r4, r1
 8025268:	4616      	mov	r6, r2
 802526a:	d505      	bpl.n	8025278 <__swrite+0x1e>
 802526c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025270:	2302      	movs	r3, #2
 8025272:	2200      	movs	r2, #0
 8025274:	f000 f86c 	bl	8025350 <_lseek_r>
 8025278:	89a3      	ldrh	r3, [r4, #12]
 802527a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802527e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025282:	81a3      	strh	r3, [r4, #12]
 8025284:	4632      	mov	r2, r6
 8025286:	463b      	mov	r3, r7
 8025288:	4628      	mov	r0, r5
 802528a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802528e:	f000 b8a7 	b.w	80253e0 <_write_r>

08025292 <__sseek>:
 8025292:	b510      	push	{r4, lr}
 8025294:	460c      	mov	r4, r1
 8025296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802529a:	f000 f859 	bl	8025350 <_lseek_r>
 802529e:	1c43      	adds	r3, r0, #1
 80252a0:	89a3      	ldrh	r3, [r4, #12]
 80252a2:	bf15      	itete	ne
 80252a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80252a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80252aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80252ae:	81a3      	strheq	r3, [r4, #12]
 80252b0:	bf18      	it	ne
 80252b2:	81a3      	strhne	r3, [r4, #12]
 80252b4:	bd10      	pop	{r4, pc}

080252b6 <__sclose>:
 80252b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252ba:	f000 b839 	b.w	8025330 <_close_r>

080252be <memset>:
 80252be:	4402      	add	r2, r0
 80252c0:	4603      	mov	r3, r0
 80252c2:	4293      	cmp	r3, r2
 80252c4:	d100      	bne.n	80252c8 <memset+0xa>
 80252c6:	4770      	bx	lr
 80252c8:	f803 1b01 	strb.w	r1, [r3], #1
 80252cc:	e7f9      	b.n	80252c2 <memset+0x4>

080252ce <_raise_r>:
 80252ce:	291f      	cmp	r1, #31
 80252d0:	b538      	push	{r3, r4, r5, lr}
 80252d2:	4604      	mov	r4, r0
 80252d4:	460d      	mov	r5, r1
 80252d6:	d904      	bls.n	80252e2 <_raise_r+0x14>
 80252d8:	2316      	movs	r3, #22
 80252da:	6003      	str	r3, [r0, #0]
 80252dc:	f04f 30ff 	mov.w	r0, #4294967295
 80252e0:	bd38      	pop	{r3, r4, r5, pc}
 80252e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80252e4:	b112      	cbz	r2, 80252ec <_raise_r+0x1e>
 80252e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80252ea:	b94b      	cbnz	r3, 8025300 <_raise_r+0x32>
 80252ec:	4620      	mov	r0, r4
 80252ee:	f000 f865 	bl	80253bc <_getpid_r>
 80252f2:	462a      	mov	r2, r5
 80252f4:	4601      	mov	r1, r0
 80252f6:	4620      	mov	r0, r4
 80252f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80252fc:	f000 b84c 	b.w	8025398 <_kill_r>
 8025300:	2b01      	cmp	r3, #1
 8025302:	d00a      	beq.n	802531a <_raise_r+0x4c>
 8025304:	1c59      	adds	r1, r3, #1
 8025306:	d103      	bne.n	8025310 <_raise_r+0x42>
 8025308:	2316      	movs	r3, #22
 802530a:	6003      	str	r3, [r0, #0]
 802530c:	2001      	movs	r0, #1
 802530e:	e7e7      	b.n	80252e0 <_raise_r+0x12>
 8025310:	2400      	movs	r4, #0
 8025312:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025316:	4628      	mov	r0, r5
 8025318:	4798      	blx	r3
 802531a:	2000      	movs	r0, #0
 802531c:	e7e0      	b.n	80252e0 <_raise_r+0x12>
	...

08025320 <raise>:
 8025320:	4b02      	ldr	r3, [pc, #8]	; (802532c <raise+0xc>)
 8025322:	4601      	mov	r1, r0
 8025324:	6818      	ldr	r0, [r3, #0]
 8025326:	f7ff bfd2 	b.w	80252ce <_raise_r>
 802532a:	bf00      	nop
 802532c:	20000108 	.word	0x20000108

08025330 <_close_r>:
 8025330:	b538      	push	{r3, r4, r5, lr}
 8025332:	4d06      	ldr	r5, [pc, #24]	; (802534c <_close_r+0x1c>)
 8025334:	2300      	movs	r3, #0
 8025336:	4604      	mov	r4, r0
 8025338:	4608      	mov	r0, r1
 802533a:	602b      	str	r3, [r5, #0]
 802533c:	f7de f9c9 	bl	80036d2 <_close>
 8025340:	1c43      	adds	r3, r0, #1
 8025342:	d102      	bne.n	802534a <_close_r+0x1a>
 8025344:	682b      	ldr	r3, [r5, #0]
 8025346:	b103      	cbz	r3, 802534a <_close_r+0x1a>
 8025348:	6023      	str	r3, [r4, #0]
 802534a:	bd38      	pop	{r3, r4, r5, pc}
 802534c:	2000c768 	.word	0x2000c768

08025350 <_lseek_r>:
 8025350:	b538      	push	{r3, r4, r5, lr}
 8025352:	4d07      	ldr	r5, [pc, #28]	; (8025370 <_lseek_r+0x20>)
 8025354:	4604      	mov	r4, r0
 8025356:	4608      	mov	r0, r1
 8025358:	4611      	mov	r1, r2
 802535a:	2200      	movs	r2, #0
 802535c:	602a      	str	r2, [r5, #0]
 802535e:	461a      	mov	r2, r3
 8025360:	f7de f9de 	bl	8003720 <_lseek>
 8025364:	1c43      	adds	r3, r0, #1
 8025366:	d102      	bne.n	802536e <_lseek_r+0x1e>
 8025368:	682b      	ldr	r3, [r5, #0]
 802536a:	b103      	cbz	r3, 802536e <_lseek_r+0x1e>
 802536c:	6023      	str	r3, [r4, #0]
 802536e:	bd38      	pop	{r3, r4, r5, pc}
 8025370:	2000c768 	.word	0x2000c768

08025374 <_read_r>:
 8025374:	b538      	push	{r3, r4, r5, lr}
 8025376:	4d07      	ldr	r5, [pc, #28]	; (8025394 <_read_r+0x20>)
 8025378:	4604      	mov	r4, r0
 802537a:	4608      	mov	r0, r1
 802537c:	4611      	mov	r1, r2
 802537e:	2200      	movs	r2, #0
 8025380:	602a      	str	r2, [r5, #0]
 8025382:	461a      	mov	r2, r3
 8025384:	f7de f96c 	bl	8003660 <_read>
 8025388:	1c43      	adds	r3, r0, #1
 802538a:	d102      	bne.n	8025392 <_read_r+0x1e>
 802538c:	682b      	ldr	r3, [r5, #0]
 802538e:	b103      	cbz	r3, 8025392 <_read_r+0x1e>
 8025390:	6023      	str	r3, [r4, #0]
 8025392:	bd38      	pop	{r3, r4, r5, pc}
 8025394:	2000c768 	.word	0x2000c768

08025398 <_kill_r>:
 8025398:	b538      	push	{r3, r4, r5, lr}
 802539a:	4d07      	ldr	r5, [pc, #28]	; (80253b8 <_kill_r+0x20>)
 802539c:	2300      	movs	r3, #0
 802539e:	4604      	mov	r4, r0
 80253a0:	4608      	mov	r0, r1
 80253a2:	4611      	mov	r1, r2
 80253a4:	602b      	str	r3, [r5, #0]
 80253a6:	f7de f941 	bl	800362c <_kill>
 80253aa:	1c43      	adds	r3, r0, #1
 80253ac:	d102      	bne.n	80253b4 <_kill_r+0x1c>
 80253ae:	682b      	ldr	r3, [r5, #0]
 80253b0:	b103      	cbz	r3, 80253b4 <_kill_r+0x1c>
 80253b2:	6023      	str	r3, [r4, #0]
 80253b4:	bd38      	pop	{r3, r4, r5, pc}
 80253b6:	bf00      	nop
 80253b8:	2000c768 	.word	0x2000c768

080253bc <_getpid_r>:
 80253bc:	f7de b92e 	b.w	800361c <_getpid>

080253c0 <_sbrk_r>:
 80253c0:	b538      	push	{r3, r4, r5, lr}
 80253c2:	4d06      	ldr	r5, [pc, #24]	; (80253dc <_sbrk_r+0x1c>)
 80253c4:	2300      	movs	r3, #0
 80253c6:	4604      	mov	r4, r0
 80253c8:	4608      	mov	r0, r1
 80253ca:	602b      	str	r3, [r5, #0]
 80253cc:	f7de f9b6 	bl	800373c <_sbrk>
 80253d0:	1c43      	adds	r3, r0, #1
 80253d2:	d102      	bne.n	80253da <_sbrk_r+0x1a>
 80253d4:	682b      	ldr	r3, [r5, #0]
 80253d6:	b103      	cbz	r3, 80253da <_sbrk_r+0x1a>
 80253d8:	6023      	str	r3, [r4, #0]
 80253da:	bd38      	pop	{r3, r4, r5, pc}
 80253dc:	2000c768 	.word	0x2000c768

080253e0 <_write_r>:
 80253e0:	b538      	push	{r3, r4, r5, lr}
 80253e2:	4d07      	ldr	r5, [pc, #28]	; (8025400 <_write_r+0x20>)
 80253e4:	4604      	mov	r4, r0
 80253e6:	4608      	mov	r0, r1
 80253e8:	4611      	mov	r1, r2
 80253ea:	2200      	movs	r2, #0
 80253ec:	602a      	str	r2, [r5, #0]
 80253ee:	461a      	mov	r2, r3
 80253f0:	f7de f953 	bl	800369a <_write>
 80253f4:	1c43      	adds	r3, r0, #1
 80253f6:	d102      	bne.n	80253fe <_write_r+0x1e>
 80253f8:	682b      	ldr	r3, [r5, #0]
 80253fa:	b103      	cbz	r3, 80253fe <_write_r+0x1e>
 80253fc:	6023      	str	r3, [r4, #0]
 80253fe:	bd38      	pop	{r3, r4, r5, pc}
 8025400:	2000c768 	.word	0x2000c768

08025404 <__errno>:
 8025404:	4b01      	ldr	r3, [pc, #4]	; (802540c <__errno+0x8>)
 8025406:	6818      	ldr	r0, [r3, #0]
 8025408:	4770      	bx	lr
 802540a:	bf00      	nop
 802540c:	20000108 	.word	0x20000108

08025410 <__libc_init_array>:
 8025410:	b570      	push	{r4, r5, r6, lr}
 8025412:	4d0d      	ldr	r5, [pc, #52]	; (8025448 <__libc_init_array+0x38>)
 8025414:	4c0d      	ldr	r4, [pc, #52]	; (802544c <__libc_init_array+0x3c>)
 8025416:	1b64      	subs	r4, r4, r5
 8025418:	10a4      	asrs	r4, r4, #2
 802541a:	2600      	movs	r6, #0
 802541c:	42a6      	cmp	r6, r4
 802541e:	d109      	bne.n	8025434 <__libc_init_array+0x24>
 8025420:	4d0b      	ldr	r5, [pc, #44]	; (8025450 <__libc_init_array+0x40>)
 8025422:	4c0c      	ldr	r4, [pc, #48]	; (8025454 <__libc_init_array+0x44>)
 8025424:	f000 fd6e 	bl	8025f04 <_init>
 8025428:	1b64      	subs	r4, r4, r5
 802542a:	10a4      	asrs	r4, r4, #2
 802542c:	2600      	movs	r6, #0
 802542e:	42a6      	cmp	r6, r4
 8025430:	d105      	bne.n	802543e <__libc_init_array+0x2e>
 8025432:	bd70      	pop	{r4, r5, r6, pc}
 8025434:	f855 3b04 	ldr.w	r3, [r5], #4
 8025438:	4798      	blx	r3
 802543a:	3601      	adds	r6, #1
 802543c:	e7ee      	b.n	802541c <__libc_init_array+0xc>
 802543e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025442:	4798      	blx	r3
 8025444:	3601      	adds	r6, #1
 8025446:	e7f2      	b.n	802542e <__libc_init_array+0x1e>
 8025448:	08061908 	.word	0x08061908
 802544c:	08061908 	.word	0x08061908
 8025450:	08061908 	.word	0x08061908
 8025454:	0806191c 	.word	0x0806191c

08025458 <__retarget_lock_acquire_recursive>:
 8025458:	4770      	bx	lr

0802545a <__retarget_lock_release_recursive>:
 802545a:	4770      	bx	lr

0802545c <memcpy>:
 802545c:	440a      	add	r2, r1
 802545e:	4291      	cmp	r1, r2
 8025460:	f100 33ff 	add.w	r3, r0, #4294967295
 8025464:	d100      	bne.n	8025468 <memcpy+0xc>
 8025466:	4770      	bx	lr
 8025468:	b510      	push	{r4, lr}
 802546a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802546e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025472:	4291      	cmp	r1, r2
 8025474:	d1f9      	bne.n	802546a <memcpy+0xe>
 8025476:	bd10      	pop	{r4, pc}

08025478 <__register_exitproc>:
 8025478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802547c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8025530 <__register_exitproc+0xb8>
 8025480:	4606      	mov	r6, r0
 8025482:	f8d8 0000 	ldr.w	r0, [r8]
 8025486:	461f      	mov	r7, r3
 8025488:	460d      	mov	r5, r1
 802548a:	4691      	mov	r9, r2
 802548c:	f7ff ffe4 	bl	8025458 <__retarget_lock_acquire_recursive>
 8025490:	4b23      	ldr	r3, [pc, #140]	; (8025520 <__register_exitproc+0xa8>)
 8025492:	681c      	ldr	r4, [r3, #0]
 8025494:	b934      	cbnz	r4, 80254a4 <__register_exitproc+0x2c>
 8025496:	4c23      	ldr	r4, [pc, #140]	; (8025524 <__register_exitproc+0xac>)
 8025498:	601c      	str	r4, [r3, #0]
 802549a:	4b23      	ldr	r3, [pc, #140]	; (8025528 <__register_exitproc+0xb0>)
 802549c:	b113      	cbz	r3, 80254a4 <__register_exitproc+0x2c>
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80254a4:	6863      	ldr	r3, [r4, #4]
 80254a6:	2b1f      	cmp	r3, #31
 80254a8:	dd07      	ble.n	80254ba <__register_exitproc+0x42>
 80254aa:	f8d8 0000 	ldr.w	r0, [r8]
 80254ae:	f7ff ffd4 	bl	802545a <__retarget_lock_release_recursive>
 80254b2:	f04f 30ff 	mov.w	r0, #4294967295
 80254b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80254ba:	b32e      	cbz	r6, 8025508 <__register_exitproc+0x90>
 80254bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80254c0:	b968      	cbnz	r0, 80254de <__register_exitproc+0x66>
 80254c2:	4b1a      	ldr	r3, [pc, #104]	; (802552c <__register_exitproc+0xb4>)
 80254c4:	2b00      	cmp	r3, #0
 80254c6:	d0f0      	beq.n	80254aa <__register_exitproc+0x32>
 80254c8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80254cc:	f7ff fd28 	bl	8024f20 <malloc>
 80254d0:	2800      	cmp	r0, #0
 80254d2:	d0ea      	beq.n	80254aa <__register_exitproc+0x32>
 80254d4:	2300      	movs	r3, #0
 80254d6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80254da:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80254de:	6863      	ldr	r3, [r4, #4]
 80254e0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80254e4:	2201      	movs	r2, #1
 80254e6:	409a      	lsls	r2, r3
 80254e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80254ec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80254f0:	4313      	orrs	r3, r2
 80254f2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80254f6:	2e02      	cmp	r6, #2
 80254f8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80254fc:	bf02      	ittt	eq
 80254fe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025502:	4313      	orreq	r3, r2
 8025504:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025508:	6863      	ldr	r3, [r4, #4]
 802550a:	f8d8 0000 	ldr.w	r0, [r8]
 802550e:	1c5a      	adds	r2, r3, #1
 8025510:	3302      	adds	r3, #2
 8025512:	6062      	str	r2, [r4, #4]
 8025514:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025518:	f7ff ff9f 	bl	802545a <__retarget_lock_release_recursive>
 802551c:	2000      	movs	r0, #0
 802551e:	e7ca      	b.n	80254b6 <__register_exitproc+0x3e>
 8025520:	2000c7fc 	.word	0x2000c7fc
 8025524:	2000c770 	.word	0x2000c770
 8025528:	0802a274 	.word	0x0802a274
 802552c:	08024f21 	.word	0x08024f21
 8025530:	2000010c 	.word	0x2000010c

08025534 <_free_r>:
 8025534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025536:	2900      	cmp	r1, #0
 8025538:	d044      	beq.n	80255c4 <_free_r+0x90>
 802553a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802553e:	9001      	str	r0, [sp, #4]
 8025540:	2b00      	cmp	r3, #0
 8025542:	f1a1 0404 	sub.w	r4, r1, #4
 8025546:	bfb8      	it	lt
 8025548:	18e4      	addlt	r4, r4, r3
 802554a:	f7ff fd99 	bl	8025080 <__malloc_lock>
 802554e:	4a1e      	ldr	r2, [pc, #120]	; (80255c8 <_free_r+0x94>)
 8025550:	9801      	ldr	r0, [sp, #4]
 8025552:	6813      	ldr	r3, [r2, #0]
 8025554:	b933      	cbnz	r3, 8025564 <_free_r+0x30>
 8025556:	6063      	str	r3, [r4, #4]
 8025558:	6014      	str	r4, [r2, #0]
 802555a:	b003      	add	sp, #12
 802555c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025560:	f7ff bd94 	b.w	802508c <__malloc_unlock>
 8025564:	42a3      	cmp	r3, r4
 8025566:	d908      	bls.n	802557a <_free_r+0x46>
 8025568:	6825      	ldr	r5, [r4, #0]
 802556a:	1961      	adds	r1, r4, r5
 802556c:	428b      	cmp	r3, r1
 802556e:	bf01      	itttt	eq
 8025570:	6819      	ldreq	r1, [r3, #0]
 8025572:	685b      	ldreq	r3, [r3, #4]
 8025574:	1949      	addeq	r1, r1, r5
 8025576:	6021      	streq	r1, [r4, #0]
 8025578:	e7ed      	b.n	8025556 <_free_r+0x22>
 802557a:	461a      	mov	r2, r3
 802557c:	685b      	ldr	r3, [r3, #4]
 802557e:	b10b      	cbz	r3, 8025584 <_free_r+0x50>
 8025580:	42a3      	cmp	r3, r4
 8025582:	d9fa      	bls.n	802557a <_free_r+0x46>
 8025584:	6811      	ldr	r1, [r2, #0]
 8025586:	1855      	adds	r5, r2, r1
 8025588:	42a5      	cmp	r5, r4
 802558a:	d10b      	bne.n	80255a4 <_free_r+0x70>
 802558c:	6824      	ldr	r4, [r4, #0]
 802558e:	4421      	add	r1, r4
 8025590:	1854      	adds	r4, r2, r1
 8025592:	42a3      	cmp	r3, r4
 8025594:	6011      	str	r1, [r2, #0]
 8025596:	d1e0      	bne.n	802555a <_free_r+0x26>
 8025598:	681c      	ldr	r4, [r3, #0]
 802559a:	685b      	ldr	r3, [r3, #4]
 802559c:	6053      	str	r3, [r2, #4]
 802559e:	440c      	add	r4, r1
 80255a0:	6014      	str	r4, [r2, #0]
 80255a2:	e7da      	b.n	802555a <_free_r+0x26>
 80255a4:	d902      	bls.n	80255ac <_free_r+0x78>
 80255a6:	230c      	movs	r3, #12
 80255a8:	6003      	str	r3, [r0, #0]
 80255aa:	e7d6      	b.n	802555a <_free_r+0x26>
 80255ac:	6825      	ldr	r5, [r4, #0]
 80255ae:	1961      	adds	r1, r4, r5
 80255b0:	428b      	cmp	r3, r1
 80255b2:	bf04      	itt	eq
 80255b4:	6819      	ldreq	r1, [r3, #0]
 80255b6:	685b      	ldreq	r3, [r3, #4]
 80255b8:	6063      	str	r3, [r4, #4]
 80255ba:	bf04      	itt	eq
 80255bc:	1949      	addeq	r1, r1, r5
 80255be:	6021      	streq	r1, [r4, #0]
 80255c0:	6054      	str	r4, [r2, #4]
 80255c2:	e7ca      	b.n	802555a <_free_r+0x26>
 80255c4:	b003      	add	sp, #12
 80255c6:	bd30      	pop	{r4, r5, pc}
 80255c8:	2000c624 	.word	0x2000c624

080255cc <__sfputc_r>:
 80255cc:	6893      	ldr	r3, [r2, #8]
 80255ce:	3b01      	subs	r3, #1
 80255d0:	2b00      	cmp	r3, #0
 80255d2:	b410      	push	{r4}
 80255d4:	6093      	str	r3, [r2, #8]
 80255d6:	da08      	bge.n	80255ea <__sfputc_r+0x1e>
 80255d8:	6994      	ldr	r4, [r2, #24]
 80255da:	42a3      	cmp	r3, r4
 80255dc:	db01      	blt.n	80255e2 <__sfputc_r+0x16>
 80255de:	290a      	cmp	r1, #10
 80255e0:	d103      	bne.n	80255ea <__sfputc_r+0x1e>
 80255e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80255e6:	f000 bb73 	b.w	8025cd0 <__swbuf_r>
 80255ea:	6813      	ldr	r3, [r2, #0]
 80255ec:	1c58      	adds	r0, r3, #1
 80255ee:	6010      	str	r0, [r2, #0]
 80255f0:	7019      	strb	r1, [r3, #0]
 80255f2:	4608      	mov	r0, r1
 80255f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80255f8:	4770      	bx	lr

080255fa <__sfputs_r>:
 80255fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255fc:	4606      	mov	r6, r0
 80255fe:	460f      	mov	r7, r1
 8025600:	4614      	mov	r4, r2
 8025602:	18d5      	adds	r5, r2, r3
 8025604:	42ac      	cmp	r4, r5
 8025606:	d101      	bne.n	802560c <__sfputs_r+0x12>
 8025608:	2000      	movs	r0, #0
 802560a:	e007      	b.n	802561c <__sfputs_r+0x22>
 802560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025610:	463a      	mov	r2, r7
 8025612:	4630      	mov	r0, r6
 8025614:	f7ff ffda 	bl	80255cc <__sfputc_r>
 8025618:	1c43      	adds	r3, r0, #1
 802561a:	d1f3      	bne.n	8025604 <__sfputs_r+0xa>
 802561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025620 <_vfiprintf_r>:
 8025620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025624:	460d      	mov	r5, r1
 8025626:	b09d      	sub	sp, #116	; 0x74
 8025628:	4614      	mov	r4, r2
 802562a:	4698      	mov	r8, r3
 802562c:	4606      	mov	r6, r0
 802562e:	b118      	cbz	r0, 8025638 <_vfiprintf_r+0x18>
 8025630:	6a03      	ldr	r3, [r0, #32]
 8025632:	b90b      	cbnz	r3, 8025638 <_vfiprintf_r+0x18>
 8025634:	f7ff fdb8 	bl	80251a8 <__sinit>
 8025638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802563a:	07d9      	lsls	r1, r3, #31
 802563c:	d405      	bmi.n	802564a <_vfiprintf_r+0x2a>
 802563e:	89ab      	ldrh	r3, [r5, #12]
 8025640:	059a      	lsls	r2, r3, #22
 8025642:	d402      	bmi.n	802564a <_vfiprintf_r+0x2a>
 8025644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025646:	f7ff ff07 	bl	8025458 <__retarget_lock_acquire_recursive>
 802564a:	89ab      	ldrh	r3, [r5, #12]
 802564c:	071b      	lsls	r3, r3, #28
 802564e:	d501      	bpl.n	8025654 <_vfiprintf_r+0x34>
 8025650:	692b      	ldr	r3, [r5, #16]
 8025652:	b99b      	cbnz	r3, 802567c <_vfiprintf_r+0x5c>
 8025654:	4629      	mov	r1, r5
 8025656:	4630      	mov	r0, r6
 8025658:	f000 fb78 	bl	8025d4c <__swsetup_r>
 802565c:	b170      	cbz	r0, 802567c <_vfiprintf_r+0x5c>
 802565e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025660:	07dc      	lsls	r4, r3, #31
 8025662:	d504      	bpl.n	802566e <_vfiprintf_r+0x4e>
 8025664:	f04f 30ff 	mov.w	r0, #4294967295
 8025668:	b01d      	add	sp, #116	; 0x74
 802566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802566e:	89ab      	ldrh	r3, [r5, #12]
 8025670:	0598      	lsls	r0, r3, #22
 8025672:	d4f7      	bmi.n	8025664 <_vfiprintf_r+0x44>
 8025674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025676:	f7ff fef0 	bl	802545a <__retarget_lock_release_recursive>
 802567a:	e7f3      	b.n	8025664 <_vfiprintf_r+0x44>
 802567c:	2300      	movs	r3, #0
 802567e:	9309      	str	r3, [sp, #36]	; 0x24
 8025680:	2320      	movs	r3, #32
 8025682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025686:	f8cd 800c 	str.w	r8, [sp, #12]
 802568a:	2330      	movs	r3, #48	; 0x30
 802568c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8025840 <_vfiprintf_r+0x220>
 8025690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025694:	f04f 0901 	mov.w	r9, #1
 8025698:	4623      	mov	r3, r4
 802569a:	469a      	mov	sl, r3
 802569c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80256a0:	b10a      	cbz	r2, 80256a6 <_vfiprintf_r+0x86>
 80256a2:	2a25      	cmp	r2, #37	; 0x25
 80256a4:	d1f9      	bne.n	802569a <_vfiprintf_r+0x7a>
 80256a6:	ebba 0b04 	subs.w	fp, sl, r4
 80256aa:	d00b      	beq.n	80256c4 <_vfiprintf_r+0xa4>
 80256ac:	465b      	mov	r3, fp
 80256ae:	4622      	mov	r2, r4
 80256b0:	4629      	mov	r1, r5
 80256b2:	4630      	mov	r0, r6
 80256b4:	f7ff ffa1 	bl	80255fa <__sfputs_r>
 80256b8:	3001      	adds	r0, #1
 80256ba:	f000 80a9 	beq.w	8025810 <_vfiprintf_r+0x1f0>
 80256be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80256c0:	445a      	add	r2, fp
 80256c2:	9209      	str	r2, [sp, #36]	; 0x24
 80256c4:	f89a 3000 	ldrb.w	r3, [sl]
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	f000 80a1 	beq.w	8025810 <_vfiprintf_r+0x1f0>
 80256ce:	2300      	movs	r3, #0
 80256d0:	f04f 32ff 	mov.w	r2, #4294967295
 80256d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80256d8:	f10a 0a01 	add.w	sl, sl, #1
 80256dc:	9304      	str	r3, [sp, #16]
 80256de:	9307      	str	r3, [sp, #28]
 80256e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80256e4:	931a      	str	r3, [sp, #104]	; 0x68
 80256e6:	4654      	mov	r4, sl
 80256e8:	2205      	movs	r2, #5
 80256ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80256ee:	4854      	ldr	r0, [pc, #336]	; (8025840 <_vfiprintf_r+0x220>)
 80256f0:	f7da fd8e 	bl	8000210 <memchr>
 80256f4:	9a04      	ldr	r2, [sp, #16]
 80256f6:	b9d8      	cbnz	r0, 8025730 <_vfiprintf_r+0x110>
 80256f8:	06d1      	lsls	r1, r2, #27
 80256fa:	bf44      	itt	mi
 80256fc:	2320      	movmi	r3, #32
 80256fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025702:	0713      	lsls	r3, r2, #28
 8025704:	bf44      	itt	mi
 8025706:	232b      	movmi	r3, #43	; 0x2b
 8025708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802570c:	f89a 3000 	ldrb.w	r3, [sl]
 8025710:	2b2a      	cmp	r3, #42	; 0x2a
 8025712:	d015      	beq.n	8025740 <_vfiprintf_r+0x120>
 8025714:	9a07      	ldr	r2, [sp, #28]
 8025716:	4654      	mov	r4, sl
 8025718:	2000      	movs	r0, #0
 802571a:	f04f 0c0a 	mov.w	ip, #10
 802571e:	4621      	mov	r1, r4
 8025720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025724:	3b30      	subs	r3, #48	; 0x30
 8025726:	2b09      	cmp	r3, #9
 8025728:	d94d      	bls.n	80257c6 <_vfiprintf_r+0x1a6>
 802572a:	b1b0      	cbz	r0, 802575a <_vfiprintf_r+0x13a>
 802572c:	9207      	str	r2, [sp, #28]
 802572e:	e014      	b.n	802575a <_vfiprintf_r+0x13a>
 8025730:	eba0 0308 	sub.w	r3, r0, r8
 8025734:	fa09 f303 	lsl.w	r3, r9, r3
 8025738:	4313      	orrs	r3, r2
 802573a:	9304      	str	r3, [sp, #16]
 802573c:	46a2      	mov	sl, r4
 802573e:	e7d2      	b.n	80256e6 <_vfiprintf_r+0xc6>
 8025740:	9b03      	ldr	r3, [sp, #12]
 8025742:	1d19      	adds	r1, r3, #4
 8025744:	681b      	ldr	r3, [r3, #0]
 8025746:	9103      	str	r1, [sp, #12]
 8025748:	2b00      	cmp	r3, #0
 802574a:	bfbb      	ittet	lt
 802574c:	425b      	neglt	r3, r3
 802574e:	f042 0202 	orrlt.w	r2, r2, #2
 8025752:	9307      	strge	r3, [sp, #28]
 8025754:	9307      	strlt	r3, [sp, #28]
 8025756:	bfb8      	it	lt
 8025758:	9204      	strlt	r2, [sp, #16]
 802575a:	7823      	ldrb	r3, [r4, #0]
 802575c:	2b2e      	cmp	r3, #46	; 0x2e
 802575e:	d10c      	bne.n	802577a <_vfiprintf_r+0x15a>
 8025760:	7863      	ldrb	r3, [r4, #1]
 8025762:	2b2a      	cmp	r3, #42	; 0x2a
 8025764:	d134      	bne.n	80257d0 <_vfiprintf_r+0x1b0>
 8025766:	9b03      	ldr	r3, [sp, #12]
 8025768:	1d1a      	adds	r2, r3, #4
 802576a:	681b      	ldr	r3, [r3, #0]
 802576c:	9203      	str	r2, [sp, #12]
 802576e:	2b00      	cmp	r3, #0
 8025770:	bfb8      	it	lt
 8025772:	f04f 33ff 	movlt.w	r3, #4294967295
 8025776:	3402      	adds	r4, #2
 8025778:	9305      	str	r3, [sp, #20]
 802577a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8025850 <_vfiprintf_r+0x230>
 802577e:	7821      	ldrb	r1, [r4, #0]
 8025780:	2203      	movs	r2, #3
 8025782:	4650      	mov	r0, sl
 8025784:	f7da fd44 	bl	8000210 <memchr>
 8025788:	b138      	cbz	r0, 802579a <_vfiprintf_r+0x17a>
 802578a:	9b04      	ldr	r3, [sp, #16]
 802578c:	eba0 000a 	sub.w	r0, r0, sl
 8025790:	2240      	movs	r2, #64	; 0x40
 8025792:	4082      	lsls	r2, r0
 8025794:	4313      	orrs	r3, r2
 8025796:	3401      	adds	r4, #1
 8025798:	9304      	str	r3, [sp, #16]
 802579a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802579e:	4829      	ldr	r0, [pc, #164]	; (8025844 <_vfiprintf_r+0x224>)
 80257a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80257a4:	2206      	movs	r2, #6
 80257a6:	f7da fd33 	bl	8000210 <memchr>
 80257aa:	2800      	cmp	r0, #0
 80257ac:	d03f      	beq.n	802582e <_vfiprintf_r+0x20e>
 80257ae:	4b26      	ldr	r3, [pc, #152]	; (8025848 <_vfiprintf_r+0x228>)
 80257b0:	bb1b      	cbnz	r3, 80257fa <_vfiprintf_r+0x1da>
 80257b2:	9b03      	ldr	r3, [sp, #12]
 80257b4:	3307      	adds	r3, #7
 80257b6:	f023 0307 	bic.w	r3, r3, #7
 80257ba:	3308      	adds	r3, #8
 80257bc:	9303      	str	r3, [sp, #12]
 80257be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257c0:	443b      	add	r3, r7
 80257c2:	9309      	str	r3, [sp, #36]	; 0x24
 80257c4:	e768      	b.n	8025698 <_vfiprintf_r+0x78>
 80257c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80257ca:	460c      	mov	r4, r1
 80257cc:	2001      	movs	r0, #1
 80257ce:	e7a6      	b.n	802571e <_vfiprintf_r+0xfe>
 80257d0:	2300      	movs	r3, #0
 80257d2:	3401      	adds	r4, #1
 80257d4:	9305      	str	r3, [sp, #20]
 80257d6:	4619      	mov	r1, r3
 80257d8:	f04f 0c0a 	mov.w	ip, #10
 80257dc:	4620      	mov	r0, r4
 80257de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80257e2:	3a30      	subs	r2, #48	; 0x30
 80257e4:	2a09      	cmp	r2, #9
 80257e6:	d903      	bls.n	80257f0 <_vfiprintf_r+0x1d0>
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d0c6      	beq.n	802577a <_vfiprintf_r+0x15a>
 80257ec:	9105      	str	r1, [sp, #20]
 80257ee:	e7c4      	b.n	802577a <_vfiprintf_r+0x15a>
 80257f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80257f4:	4604      	mov	r4, r0
 80257f6:	2301      	movs	r3, #1
 80257f8:	e7f0      	b.n	80257dc <_vfiprintf_r+0x1bc>
 80257fa:	ab03      	add	r3, sp, #12
 80257fc:	9300      	str	r3, [sp, #0]
 80257fe:	462a      	mov	r2, r5
 8025800:	4b12      	ldr	r3, [pc, #72]	; (802584c <_vfiprintf_r+0x22c>)
 8025802:	a904      	add	r1, sp, #16
 8025804:	4630      	mov	r0, r6
 8025806:	f3af 8000 	nop.w
 802580a:	4607      	mov	r7, r0
 802580c:	1c78      	adds	r0, r7, #1
 802580e:	d1d6      	bne.n	80257be <_vfiprintf_r+0x19e>
 8025810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025812:	07d9      	lsls	r1, r3, #31
 8025814:	d405      	bmi.n	8025822 <_vfiprintf_r+0x202>
 8025816:	89ab      	ldrh	r3, [r5, #12]
 8025818:	059a      	lsls	r2, r3, #22
 802581a:	d402      	bmi.n	8025822 <_vfiprintf_r+0x202>
 802581c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802581e:	f7ff fe1c 	bl	802545a <__retarget_lock_release_recursive>
 8025822:	89ab      	ldrh	r3, [r5, #12]
 8025824:	065b      	lsls	r3, r3, #25
 8025826:	f53f af1d 	bmi.w	8025664 <_vfiprintf_r+0x44>
 802582a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802582c:	e71c      	b.n	8025668 <_vfiprintf_r+0x48>
 802582e:	ab03      	add	r3, sp, #12
 8025830:	9300      	str	r3, [sp, #0]
 8025832:	462a      	mov	r2, r5
 8025834:	4b05      	ldr	r3, [pc, #20]	; (802584c <_vfiprintf_r+0x22c>)
 8025836:	a904      	add	r1, sp, #16
 8025838:	4630      	mov	r0, r6
 802583a:	f000 f879 	bl	8025930 <_printf_i>
 802583e:	e7e4      	b.n	802580a <_vfiprintf_r+0x1ea>
 8025840:	0802a278 	.word	0x0802a278
 8025844:	0802a282 	.word	0x0802a282
 8025848:	00000000 	.word	0x00000000
 802584c:	080255fb 	.word	0x080255fb
 8025850:	0802a27e 	.word	0x0802a27e

08025854 <_printf_common>:
 8025854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025858:	4616      	mov	r6, r2
 802585a:	4699      	mov	r9, r3
 802585c:	688a      	ldr	r2, [r1, #8]
 802585e:	690b      	ldr	r3, [r1, #16]
 8025860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025864:	4293      	cmp	r3, r2
 8025866:	bfb8      	it	lt
 8025868:	4613      	movlt	r3, r2
 802586a:	6033      	str	r3, [r6, #0]
 802586c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025870:	4607      	mov	r7, r0
 8025872:	460c      	mov	r4, r1
 8025874:	b10a      	cbz	r2, 802587a <_printf_common+0x26>
 8025876:	3301      	adds	r3, #1
 8025878:	6033      	str	r3, [r6, #0]
 802587a:	6823      	ldr	r3, [r4, #0]
 802587c:	0699      	lsls	r1, r3, #26
 802587e:	bf42      	ittt	mi
 8025880:	6833      	ldrmi	r3, [r6, #0]
 8025882:	3302      	addmi	r3, #2
 8025884:	6033      	strmi	r3, [r6, #0]
 8025886:	6825      	ldr	r5, [r4, #0]
 8025888:	f015 0506 	ands.w	r5, r5, #6
 802588c:	d106      	bne.n	802589c <_printf_common+0x48>
 802588e:	f104 0a19 	add.w	sl, r4, #25
 8025892:	68e3      	ldr	r3, [r4, #12]
 8025894:	6832      	ldr	r2, [r6, #0]
 8025896:	1a9b      	subs	r3, r3, r2
 8025898:	42ab      	cmp	r3, r5
 802589a:	dc26      	bgt.n	80258ea <_printf_common+0x96>
 802589c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80258a0:	1e13      	subs	r3, r2, #0
 80258a2:	6822      	ldr	r2, [r4, #0]
 80258a4:	bf18      	it	ne
 80258a6:	2301      	movne	r3, #1
 80258a8:	0692      	lsls	r2, r2, #26
 80258aa:	d42b      	bmi.n	8025904 <_printf_common+0xb0>
 80258ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80258b0:	4649      	mov	r1, r9
 80258b2:	4638      	mov	r0, r7
 80258b4:	47c0      	blx	r8
 80258b6:	3001      	adds	r0, #1
 80258b8:	d01e      	beq.n	80258f8 <_printf_common+0xa4>
 80258ba:	6823      	ldr	r3, [r4, #0]
 80258bc:	6922      	ldr	r2, [r4, #16]
 80258be:	f003 0306 	and.w	r3, r3, #6
 80258c2:	2b04      	cmp	r3, #4
 80258c4:	bf02      	ittt	eq
 80258c6:	68e5      	ldreq	r5, [r4, #12]
 80258c8:	6833      	ldreq	r3, [r6, #0]
 80258ca:	1aed      	subeq	r5, r5, r3
 80258cc:	68a3      	ldr	r3, [r4, #8]
 80258ce:	bf0c      	ite	eq
 80258d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80258d4:	2500      	movne	r5, #0
 80258d6:	4293      	cmp	r3, r2
 80258d8:	bfc4      	itt	gt
 80258da:	1a9b      	subgt	r3, r3, r2
 80258dc:	18ed      	addgt	r5, r5, r3
 80258de:	2600      	movs	r6, #0
 80258e0:	341a      	adds	r4, #26
 80258e2:	42b5      	cmp	r5, r6
 80258e4:	d11a      	bne.n	802591c <_printf_common+0xc8>
 80258e6:	2000      	movs	r0, #0
 80258e8:	e008      	b.n	80258fc <_printf_common+0xa8>
 80258ea:	2301      	movs	r3, #1
 80258ec:	4652      	mov	r2, sl
 80258ee:	4649      	mov	r1, r9
 80258f0:	4638      	mov	r0, r7
 80258f2:	47c0      	blx	r8
 80258f4:	3001      	adds	r0, #1
 80258f6:	d103      	bne.n	8025900 <_printf_common+0xac>
 80258f8:	f04f 30ff 	mov.w	r0, #4294967295
 80258fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025900:	3501      	adds	r5, #1
 8025902:	e7c6      	b.n	8025892 <_printf_common+0x3e>
 8025904:	18e1      	adds	r1, r4, r3
 8025906:	1c5a      	adds	r2, r3, #1
 8025908:	2030      	movs	r0, #48	; 0x30
 802590a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802590e:	4422      	add	r2, r4
 8025910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025918:	3302      	adds	r3, #2
 802591a:	e7c7      	b.n	80258ac <_printf_common+0x58>
 802591c:	2301      	movs	r3, #1
 802591e:	4622      	mov	r2, r4
 8025920:	4649      	mov	r1, r9
 8025922:	4638      	mov	r0, r7
 8025924:	47c0      	blx	r8
 8025926:	3001      	adds	r0, #1
 8025928:	d0e6      	beq.n	80258f8 <_printf_common+0xa4>
 802592a:	3601      	adds	r6, #1
 802592c:	e7d9      	b.n	80258e2 <_printf_common+0x8e>
	...

08025930 <_printf_i>:
 8025930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025934:	7e0f      	ldrb	r7, [r1, #24]
 8025936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025938:	2f78      	cmp	r7, #120	; 0x78
 802593a:	4691      	mov	r9, r2
 802593c:	4680      	mov	r8, r0
 802593e:	460c      	mov	r4, r1
 8025940:	469a      	mov	sl, r3
 8025942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025946:	d807      	bhi.n	8025958 <_printf_i+0x28>
 8025948:	2f62      	cmp	r7, #98	; 0x62
 802594a:	d80a      	bhi.n	8025962 <_printf_i+0x32>
 802594c:	2f00      	cmp	r7, #0
 802594e:	f000 80d4 	beq.w	8025afa <_printf_i+0x1ca>
 8025952:	2f58      	cmp	r7, #88	; 0x58
 8025954:	f000 80c0 	beq.w	8025ad8 <_printf_i+0x1a8>
 8025958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802595c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025960:	e03a      	b.n	80259d8 <_printf_i+0xa8>
 8025962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025966:	2b15      	cmp	r3, #21
 8025968:	d8f6      	bhi.n	8025958 <_printf_i+0x28>
 802596a:	a101      	add	r1, pc, #4	; (adr r1, 8025970 <_printf_i+0x40>)
 802596c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025970:	080259c9 	.word	0x080259c9
 8025974:	080259dd 	.word	0x080259dd
 8025978:	08025959 	.word	0x08025959
 802597c:	08025959 	.word	0x08025959
 8025980:	08025959 	.word	0x08025959
 8025984:	08025959 	.word	0x08025959
 8025988:	080259dd 	.word	0x080259dd
 802598c:	08025959 	.word	0x08025959
 8025990:	08025959 	.word	0x08025959
 8025994:	08025959 	.word	0x08025959
 8025998:	08025959 	.word	0x08025959
 802599c:	08025ae1 	.word	0x08025ae1
 80259a0:	08025a09 	.word	0x08025a09
 80259a4:	08025a9b 	.word	0x08025a9b
 80259a8:	08025959 	.word	0x08025959
 80259ac:	08025959 	.word	0x08025959
 80259b0:	08025b03 	.word	0x08025b03
 80259b4:	08025959 	.word	0x08025959
 80259b8:	08025a09 	.word	0x08025a09
 80259bc:	08025959 	.word	0x08025959
 80259c0:	08025959 	.word	0x08025959
 80259c4:	08025aa3 	.word	0x08025aa3
 80259c8:	682b      	ldr	r3, [r5, #0]
 80259ca:	1d1a      	adds	r2, r3, #4
 80259cc:	681b      	ldr	r3, [r3, #0]
 80259ce:	602a      	str	r2, [r5, #0]
 80259d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80259d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80259d8:	2301      	movs	r3, #1
 80259da:	e09f      	b.n	8025b1c <_printf_i+0x1ec>
 80259dc:	6820      	ldr	r0, [r4, #0]
 80259de:	682b      	ldr	r3, [r5, #0]
 80259e0:	0607      	lsls	r7, r0, #24
 80259e2:	f103 0104 	add.w	r1, r3, #4
 80259e6:	6029      	str	r1, [r5, #0]
 80259e8:	d501      	bpl.n	80259ee <_printf_i+0xbe>
 80259ea:	681e      	ldr	r6, [r3, #0]
 80259ec:	e003      	b.n	80259f6 <_printf_i+0xc6>
 80259ee:	0646      	lsls	r6, r0, #25
 80259f0:	d5fb      	bpl.n	80259ea <_printf_i+0xba>
 80259f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80259f6:	2e00      	cmp	r6, #0
 80259f8:	da03      	bge.n	8025a02 <_printf_i+0xd2>
 80259fa:	232d      	movs	r3, #45	; 0x2d
 80259fc:	4276      	negs	r6, r6
 80259fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025a02:	485a      	ldr	r0, [pc, #360]	; (8025b6c <_printf_i+0x23c>)
 8025a04:	230a      	movs	r3, #10
 8025a06:	e012      	b.n	8025a2e <_printf_i+0xfe>
 8025a08:	682b      	ldr	r3, [r5, #0]
 8025a0a:	6820      	ldr	r0, [r4, #0]
 8025a0c:	1d19      	adds	r1, r3, #4
 8025a0e:	6029      	str	r1, [r5, #0]
 8025a10:	0605      	lsls	r5, r0, #24
 8025a12:	d501      	bpl.n	8025a18 <_printf_i+0xe8>
 8025a14:	681e      	ldr	r6, [r3, #0]
 8025a16:	e002      	b.n	8025a1e <_printf_i+0xee>
 8025a18:	0641      	lsls	r1, r0, #25
 8025a1a:	d5fb      	bpl.n	8025a14 <_printf_i+0xe4>
 8025a1c:	881e      	ldrh	r6, [r3, #0]
 8025a1e:	4853      	ldr	r0, [pc, #332]	; (8025b6c <_printf_i+0x23c>)
 8025a20:	2f6f      	cmp	r7, #111	; 0x6f
 8025a22:	bf0c      	ite	eq
 8025a24:	2308      	moveq	r3, #8
 8025a26:	230a      	movne	r3, #10
 8025a28:	2100      	movs	r1, #0
 8025a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025a2e:	6865      	ldr	r5, [r4, #4]
 8025a30:	60a5      	str	r5, [r4, #8]
 8025a32:	2d00      	cmp	r5, #0
 8025a34:	bfa2      	ittt	ge
 8025a36:	6821      	ldrge	r1, [r4, #0]
 8025a38:	f021 0104 	bicge.w	r1, r1, #4
 8025a3c:	6021      	strge	r1, [r4, #0]
 8025a3e:	b90e      	cbnz	r6, 8025a44 <_printf_i+0x114>
 8025a40:	2d00      	cmp	r5, #0
 8025a42:	d04b      	beq.n	8025adc <_printf_i+0x1ac>
 8025a44:	4615      	mov	r5, r2
 8025a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8025a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8025a4e:	5dc7      	ldrb	r7, [r0, r7]
 8025a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025a54:	4637      	mov	r7, r6
 8025a56:	42bb      	cmp	r3, r7
 8025a58:	460e      	mov	r6, r1
 8025a5a:	d9f4      	bls.n	8025a46 <_printf_i+0x116>
 8025a5c:	2b08      	cmp	r3, #8
 8025a5e:	d10b      	bne.n	8025a78 <_printf_i+0x148>
 8025a60:	6823      	ldr	r3, [r4, #0]
 8025a62:	07de      	lsls	r6, r3, #31
 8025a64:	d508      	bpl.n	8025a78 <_printf_i+0x148>
 8025a66:	6923      	ldr	r3, [r4, #16]
 8025a68:	6861      	ldr	r1, [r4, #4]
 8025a6a:	4299      	cmp	r1, r3
 8025a6c:	bfde      	ittt	le
 8025a6e:	2330      	movle	r3, #48	; 0x30
 8025a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025a78:	1b52      	subs	r2, r2, r5
 8025a7a:	6122      	str	r2, [r4, #16]
 8025a7c:	f8cd a000 	str.w	sl, [sp]
 8025a80:	464b      	mov	r3, r9
 8025a82:	aa03      	add	r2, sp, #12
 8025a84:	4621      	mov	r1, r4
 8025a86:	4640      	mov	r0, r8
 8025a88:	f7ff fee4 	bl	8025854 <_printf_common>
 8025a8c:	3001      	adds	r0, #1
 8025a8e:	d14a      	bne.n	8025b26 <_printf_i+0x1f6>
 8025a90:	f04f 30ff 	mov.w	r0, #4294967295
 8025a94:	b004      	add	sp, #16
 8025a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a9a:	6823      	ldr	r3, [r4, #0]
 8025a9c:	f043 0320 	orr.w	r3, r3, #32
 8025aa0:	6023      	str	r3, [r4, #0]
 8025aa2:	4833      	ldr	r0, [pc, #204]	; (8025b70 <_printf_i+0x240>)
 8025aa4:	2778      	movs	r7, #120	; 0x78
 8025aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025aaa:	6823      	ldr	r3, [r4, #0]
 8025aac:	6829      	ldr	r1, [r5, #0]
 8025aae:	061f      	lsls	r7, r3, #24
 8025ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8025ab4:	d402      	bmi.n	8025abc <_printf_i+0x18c>
 8025ab6:	065f      	lsls	r7, r3, #25
 8025ab8:	bf48      	it	mi
 8025aba:	b2b6      	uxthmi	r6, r6
 8025abc:	07df      	lsls	r7, r3, #31
 8025abe:	bf48      	it	mi
 8025ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8025ac4:	6029      	str	r1, [r5, #0]
 8025ac6:	bf48      	it	mi
 8025ac8:	6023      	strmi	r3, [r4, #0]
 8025aca:	b91e      	cbnz	r6, 8025ad4 <_printf_i+0x1a4>
 8025acc:	6823      	ldr	r3, [r4, #0]
 8025ace:	f023 0320 	bic.w	r3, r3, #32
 8025ad2:	6023      	str	r3, [r4, #0]
 8025ad4:	2310      	movs	r3, #16
 8025ad6:	e7a7      	b.n	8025a28 <_printf_i+0xf8>
 8025ad8:	4824      	ldr	r0, [pc, #144]	; (8025b6c <_printf_i+0x23c>)
 8025ada:	e7e4      	b.n	8025aa6 <_printf_i+0x176>
 8025adc:	4615      	mov	r5, r2
 8025ade:	e7bd      	b.n	8025a5c <_printf_i+0x12c>
 8025ae0:	682b      	ldr	r3, [r5, #0]
 8025ae2:	6826      	ldr	r6, [r4, #0]
 8025ae4:	6961      	ldr	r1, [r4, #20]
 8025ae6:	1d18      	adds	r0, r3, #4
 8025ae8:	6028      	str	r0, [r5, #0]
 8025aea:	0635      	lsls	r5, r6, #24
 8025aec:	681b      	ldr	r3, [r3, #0]
 8025aee:	d501      	bpl.n	8025af4 <_printf_i+0x1c4>
 8025af0:	6019      	str	r1, [r3, #0]
 8025af2:	e002      	b.n	8025afa <_printf_i+0x1ca>
 8025af4:	0670      	lsls	r0, r6, #25
 8025af6:	d5fb      	bpl.n	8025af0 <_printf_i+0x1c0>
 8025af8:	8019      	strh	r1, [r3, #0]
 8025afa:	2300      	movs	r3, #0
 8025afc:	6123      	str	r3, [r4, #16]
 8025afe:	4615      	mov	r5, r2
 8025b00:	e7bc      	b.n	8025a7c <_printf_i+0x14c>
 8025b02:	682b      	ldr	r3, [r5, #0]
 8025b04:	1d1a      	adds	r2, r3, #4
 8025b06:	602a      	str	r2, [r5, #0]
 8025b08:	681d      	ldr	r5, [r3, #0]
 8025b0a:	6862      	ldr	r2, [r4, #4]
 8025b0c:	2100      	movs	r1, #0
 8025b0e:	4628      	mov	r0, r5
 8025b10:	f7da fb7e 	bl	8000210 <memchr>
 8025b14:	b108      	cbz	r0, 8025b1a <_printf_i+0x1ea>
 8025b16:	1b40      	subs	r0, r0, r5
 8025b18:	6060      	str	r0, [r4, #4]
 8025b1a:	6863      	ldr	r3, [r4, #4]
 8025b1c:	6123      	str	r3, [r4, #16]
 8025b1e:	2300      	movs	r3, #0
 8025b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025b24:	e7aa      	b.n	8025a7c <_printf_i+0x14c>
 8025b26:	6923      	ldr	r3, [r4, #16]
 8025b28:	462a      	mov	r2, r5
 8025b2a:	4649      	mov	r1, r9
 8025b2c:	4640      	mov	r0, r8
 8025b2e:	47d0      	blx	sl
 8025b30:	3001      	adds	r0, #1
 8025b32:	d0ad      	beq.n	8025a90 <_printf_i+0x160>
 8025b34:	6823      	ldr	r3, [r4, #0]
 8025b36:	079b      	lsls	r3, r3, #30
 8025b38:	d413      	bmi.n	8025b62 <_printf_i+0x232>
 8025b3a:	68e0      	ldr	r0, [r4, #12]
 8025b3c:	9b03      	ldr	r3, [sp, #12]
 8025b3e:	4298      	cmp	r0, r3
 8025b40:	bfb8      	it	lt
 8025b42:	4618      	movlt	r0, r3
 8025b44:	e7a6      	b.n	8025a94 <_printf_i+0x164>
 8025b46:	2301      	movs	r3, #1
 8025b48:	4632      	mov	r2, r6
 8025b4a:	4649      	mov	r1, r9
 8025b4c:	4640      	mov	r0, r8
 8025b4e:	47d0      	blx	sl
 8025b50:	3001      	adds	r0, #1
 8025b52:	d09d      	beq.n	8025a90 <_printf_i+0x160>
 8025b54:	3501      	adds	r5, #1
 8025b56:	68e3      	ldr	r3, [r4, #12]
 8025b58:	9903      	ldr	r1, [sp, #12]
 8025b5a:	1a5b      	subs	r3, r3, r1
 8025b5c:	42ab      	cmp	r3, r5
 8025b5e:	dcf2      	bgt.n	8025b46 <_printf_i+0x216>
 8025b60:	e7eb      	b.n	8025b3a <_printf_i+0x20a>
 8025b62:	2500      	movs	r5, #0
 8025b64:	f104 0619 	add.w	r6, r4, #25
 8025b68:	e7f5      	b.n	8025b56 <_printf_i+0x226>
 8025b6a:	bf00      	nop
 8025b6c:	0802a289 	.word	0x0802a289
 8025b70:	0802a29a 	.word	0x0802a29a

08025b74 <__sflush_r>:
 8025b74:	898a      	ldrh	r2, [r1, #12]
 8025b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b7a:	4605      	mov	r5, r0
 8025b7c:	0710      	lsls	r0, r2, #28
 8025b7e:	460c      	mov	r4, r1
 8025b80:	d458      	bmi.n	8025c34 <__sflush_r+0xc0>
 8025b82:	684b      	ldr	r3, [r1, #4]
 8025b84:	2b00      	cmp	r3, #0
 8025b86:	dc05      	bgt.n	8025b94 <__sflush_r+0x20>
 8025b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	dc02      	bgt.n	8025b94 <__sflush_r+0x20>
 8025b8e:	2000      	movs	r0, #0
 8025b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025b96:	2e00      	cmp	r6, #0
 8025b98:	d0f9      	beq.n	8025b8e <__sflush_r+0x1a>
 8025b9a:	2300      	movs	r3, #0
 8025b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025ba0:	682f      	ldr	r7, [r5, #0]
 8025ba2:	6a21      	ldr	r1, [r4, #32]
 8025ba4:	602b      	str	r3, [r5, #0]
 8025ba6:	d032      	beq.n	8025c0e <__sflush_r+0x9a>
 8025ba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025baa:	89a3      	ldrh	r3, [r4, #12]
 8025bac:	075a      	lsls	r2, r3, #29
 8025bae:	d505      	bpl.n	8025bbc <__sflush_r+0x48>
 8025bb0:	6863      	ldr	r3, [r4, #4]
 8025bb2:	1ac0      	subs	r0, r0, r3
 8025bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025bb6:	b10b      	cbz	r3, 8025bbc <__sflush_r+0x48>
 8025bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025bba:	1ac0      	subs	r0, r0, r3
 8025bbc:	2300      	movs	r3, #0
 8025bbe:	4602      	mov	r2, r0
 8025bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025bc2:	6a21      	ldr	r1, [r4, #32]
 8025bc4:	4628      	mov	r0, r5
 8025bc6:	47b0      	blx	r6
 8025bc8:	1c43      	adds	r3, r0, #1
 8025bca:	89a3      	ldrh	r3, [r4, #12]
 8025bcc:	d106      	bne.n	8025bdc <__sflush_r+0x68>
 8025bce:	6829      	ldr	r1, [r5, #0]
 8025bd0:	291d      	cmp	r1, #29
 8025bd2:	d82b      	bhi.n	8025c2c <__sflush_r+0xb8>
 8025bd4:	4a29      	ldr	r2, [pc, #164]	; (8025c7c <__sflush_r+0x108>)
 8025bd6:	410a      	asrs	r2, r1
 8025bd8:	07d6      	lsls	r6, r2, #31
 8025bda:	d427      	bmi.n	8025c2c <__sflush_r+0xb8>
 8025bdc:	2200      	movs	r2, #0
 8025bde:	6062      	str	r2, [r4, #4]
 8025be0:	04d9      	lsls	r1, r3, #19
 8025be2:	6922      	ldr	r2, [r4, #16]
 8025be4:	6022      	str	r2, [r4, #0]
 8025be6:	d504      	bpl.n	8025bf2 <__sflush_r+0x7e>
 8025be8:	1c42      	adds	r2, r0, #1
 8025bea:	d101      	bne.n	8025bf0 <__sflush_r+0x7c>
 8025bec:	682b      	ldr	r3, [r5, #0]
 8025bee:	b903      	cbnz	r3, 8025bf2 <__sflush_r+0x7e>
 8025bf0:	6560      	str	r0, [r4, #84]	; 0x54
 8025bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025bf4:	602f      	str	r7, [r5, #0]
 8025bf6:	2900      	cmp	r1, #0
 8025bf8:	d0c9      	beq.n	8025b8e <__sflush_r+0x1a>
 8025bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025bfe:	4299      	cmp	r1, r3
 8025c00:	d002      	beq.n	8025c08 <__sflush_r+0x94>
 8025c02:	4628      	mov	r0, r5
 8025c04:	f7ff fc96 	bl	8025534 <_free_r>
 8025c08:	2000      	movs	r0, #0
 8025c0a:	6360      	str	r0, [r4, #52]	; 0x34
 8025c0c:	e7c0      	b.n	8025b90 <__sflush_r+0x1c>
 8025c0e:	2301      	movs	r3, #1
 8025c10:	4628      	mov	r0, r5
 8025c12:	47b0      	blx	r6
 8025c14:	1c41      	adds	r1, r0, #1
 8025c16:	d1c8      	bne.n	8025baa <__sflush_r+0x36>
 8025c18:	682b      	ldr	r3, [r5, #0]
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	d0c5      	beq.n	8025baa <__sflush_r+0x36>
 8025c1e:	2b1d      	cmp	r3, #29
 8025c20:	d001      	beq.n	8025c26 <__sflush_r+0xb2>
 8025c22:	2b16      	cmp	r3, #22
 8025c24:	d101      	bne.n	8025c2a <__sflush_r+0xb6>
 8025c26:	602f      	str	r7, [r5, #0]
 8025c28:	e7b1      	b.n	8025b8e <__sflush_r+0x1a>
 8025c2a:	89a3      	ldrh	r3, [r4, #12]
 8025c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025c30:	81a3      	strh	r3, [r4, #12]
 8025c32:	e7ad      	b.n	8025b90 <__sflush_r+0x1c>
 8025c34:	690f      	ldr	r7, [r1, #16]
 8025c36:	2f00      	cmp	r7, #0
 8025c38:	d0a9      	beq.n	8025b8e <__sflush_r+0x1a>
 8025c3a:	0793      	lsls	r3, r2, #30
 8025c3c:	680e      	ldr	r6, [r1, #0]
 8025c3e:	bf08      	it	eq
 8025c40:	694b      	ldreq	r3, [r1, #20]
 8025c42:	600f      	str	r7, [r1, #0]
 8025c44:	bf18      	it	ne
 8025c46:	2300      	movne	r3, #0
 8025c48:	eba6 0807 	sub.w	r8, r6, r7
 8025c4c:	608b      	str	r3, [r1, #8]
 8025c4e:	f1b8 0f00 	cmp.w	r8, #0
 8025c52:	dd9c      	ble.n	8025b8e <__sflush_r+0x1a>
 8025c54:	6a21      	ldr	r1, [r4, #32]
 8025c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025c58:	4643      	mov	r3, r8
 8025c5a:	463a      	mov	r2, r7
 8025c5c:	4628      	mov	r0, r5
 8025c5e:	47b0      	blx	r6
 8025c60:	2800      	cmp	r0, #0
 8025c62:	dc06      	bgt.n	8025c72 <__sflush_r+0xfe>
 8025c64:	89a3      	ldrh	r3, [r4, #12]
 8025c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025c6a:	81a3      	strh	r3, [r4, #12]
 8025c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8025c70:	e78e      	b.n	8025b90 <__sflush_r+0x1c>
 8025c72:	4407      	add	r7, r0
 8025c74:	eba8 0800 	sub.w	r8, r8, r0
 8025c78:	e7e9      	b.n	8025c4e <__sflush_r+0xda>
 8025c7a:	bf00      	nop
 8025c7c:	dfbffffe 	.word	0xdfbffffe

08025c80 <_fflush_r>:
 8025c80:	b538      	push	{r3, r4, r5, lr}
 8025c82:	690b      	ldr	r3, [r1, #16]
 8025c84:	4605      	mov	r5, r0
 8025c86:	460c      	mov	r4, r1
 8025c88:	b913      	cbnz	r3, 8025c90 <_fflush_r+0x10>
 8025c8a:	2500      	movs	r5, #0
 8025c8c:	4628      	mov	r0, r5
 8025c8e:	bd38      	pop	{r3, r4, r5, pc}
 8025c90:	b118      	cbz	r0, 8025c9a <_fflush_r+0x1a>
 8025c92:	6a03      	ldr	r3, [r0, #32]
 8025c94:	b90b      	cbnz	r3, 8025c9a <_fflush_r+0x1a>
 8025c96:	f7ff fa87 	bl	80251a8 <__sinit>
 8025c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c9e:	2b00      	cmp	r3, #0
 8025ca0:	d0f3      	beq.n	8025c8a <_fflush_r+0xa>
 8025ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025ca4:	07d0      	lsls	r0, r2, #31
 8025ca6:	d404      	bmi.n	8025cb2 <_fflush_r+0x32>
 8025ca8:	0599      	lsls	r1, r3, #22
 8025caa:	d402      	bmi.n	8025cb2 <_fflush_r+0x32>
 8025cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025cae:	f7ff fbd3 	bl	8025458 <__retarget_lock_acquire_recursive>
 8025cb2:	4628      	mov	r0, r5
 8025cb4:	4621      	mov	r1, r4
 8025cb6:	f7ff ff5d 	bl	8025b74 <__sflush_r>
 8025cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025cbc:	07da      	lsls	r2, r3, #31
 8025cbe:	4605      	mov	r5, r0
 8025cc0:	d4e4      	bmi.n	8025c8c <_fflush_r+0xc>
 8025cc2:	89a3      	ldrh	r3, [r4, #12]
 8025cc4:	059b      	lsls	r3, r3, #22
 8025cc6:	d4e1      	bmi.n	8025c8c <_fflush_r+0xc>
 8025cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025cca:	f7ff fbc6 	bl	802545a <__retarget_lock_release_recursive>
 8025cce:	e7dd      	b.n	8025c8c <_fflush_r+0xc>

08025cd0 <__swbuf_r>:
 8025cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025cd2:	460e      	mov	r6, r1
 8025cd4:	4614      	mov	r4, r2
 8025cd6:	4605      	mov	r5, r0
 8025cd8:	b118      	cbz	r0, 8025ce2 <__swbuf_r+0x12>
 8025cda:	6a03      	ldr	r3, [r0, #32]
 8025cdc:	b90b      	cbnz	r3, 8025ce2 <__swbuf_r+0x12>
 8025cde:	f7ff fa63 	bl	80251a8 <__sinit>
 8025ce2:	69a3      	ldr	r3, [r4, #24]
 8025ce4:	60a3      	str	r3, [r4, #8]
 8025ce6:	89a3      	ldrh	r3, [r4, #12]
 8025ce8:	071a      	lsls	r2, r3, #28
 8025cea:	d525      	bpl.n	8025d38 <__swbuf_r+0x68>
 8025cec:	6923      	ldr	r3, [r4, #16]
 8025cee:	b31b      	cbz	r3, 8025d38 <__swbuf_r+0x68>
 8025cf0:	6823      	ldr	r3, [r4, #0]
 8025cf2:	6922      	ldr	r2, [r4, #16]
 8025cf4:	1a98      	subs	r0, r3, r2
 8025cf6:	6963      	ldr	r3, [r4, #20]
 8025cf8:	b2f6      	uxtb	r6, r6
 8025cfa:	4283      	cmp	r3, r0
 8025cfc:	4637      	mov	r7, r6
 8025cfe:	dc04      	bgt.n	8025d0a <__swbuf_r+0x3a>
 8025d00:	4621      	mov	r1, r4
 8025d02:	4628      	mov	r0, r5
 8025d04:	f7ff ffbc 	bl	8025c80 <_fflush_r>
 8025d08:	b9e0      	cbnz	r0, 8025d44 <__swbuf_r+0x74>
 8025d0a:	68a3      	ldr	r3, [r4, #8]
 8025d0c:	3b01      	subs	r3, #1
 8025d0e:	60a3      	str	r3, [r4, #8]
 8025d10:	6823      	ldr	r3, [r4, #0]
 8025d12:	1c5a      	adds	r2, r3, #1
 8025d14:	6022      	str	r2, [r4, #0]
 8025d16:	701e      	strb	r6, [r3, #0]
 8025d18:	6962      	ldr	r2, [r4, #20]
 8025d1a:	1c43      	adds	r3, r0, #1
 8025d1c:	429a      	cmp	r2, r3
 8025d1e:	d004      	beq.n	8025d2a <__swbuf_r+0x5a>
 8025d20:	89a3      	ldrh	r3, [r4, #12]
 8025d22:	07db      	lsls	r3, r3, #31
 8025d24:	d506      	bpl.n	8025d34 <__swbuf_r+0x64>
 8025d26:	2e0a      	cmp	r6, #10
 8025d28:	d104      	bne.n	8025d34 <__swbuf_r+0x64>
 8025d2a:	4621      	mov	r1, r4
 8025d2c:	4628      	mov	r0, r5
 8025d2e:	f7ff ffa7 	bl	8025c80 <_fflush_r>
 8025d32:	b938      	cbnz	r0, 8025d44 <__swbuf_r+0x74>
 8025d34:	4638      	mov	r0, r7
 8025d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d38:	4621      	mov	r1, r4
 8025d3a:	4628      	mov	r0, r5
 8025d3c:	f000 f806 	bl	8025d4c <__swsetup_r>
 8025d40:	2800      	cmp	r0, #0
 8025d42:	d0d5      	beq.n	8025cf0 <__swbuf_r+0x20>
 8025d44:	f04f 37ff 	mov.w	r7, #4294967295
 8025d48:	e7f4      	b.n	8025d34 <__swbuf_r+0x64>
	...

08025d4c <__swsetup_r>:
 8025d4c:	b538      	push	{r3, r4, r5, lr}
 8025d4e:	4b2a      	ldr	r3, [pc, #168]	; (8025df8 <__swsetup_r+0xac>)
 8025d50:	4605      	mov	r5, r0
 8025d52:	6818      	ldr	r0, [r3, #0]
 8025d54:	460c      	mov	r4, r1
 8025d56:	b118      	cbz	r0, 8025d60 <__swsetup_r+0x14>
 8025d58:	6a03      	ldr	r3, [r0, #32]
 8025d5a:	b90b      	cbnz	r3, 8025d60 <__swsetup_r+0x14>
 8025d5c:	f7ff fa24 	bl	80251a8 <__sinit>
 8025d60:	89a3      	ldrh	r3, [r4, #12]
 8025d62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025d66:	0718      	lsls	r0, r3, #28
 8025d68:	d422      	bmi.n	8025db0 <__swsetup_r+0x64>
 8025d6a:	06d9      	lsls	r1, r3, #27
 8025d6c:	d407      	bmi.n	8025d7e <__swsetup_r+0x32>
 8025d6e:	2309      	movs	r3, #9
 8025d70:	602b      	str	r3, [r5, #0]
 8025d72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025d76:	81a3      	strh	r3, [r4, #12]
 8025d78:	f04f 30ff 	mov.w	r0, #4294967295
 8025d7c:	e034      	b.n	8025de8 <__swsetup_r+0x9c>
 8025d7e:	0758      	lsls	r0, r3, #29
 8025d80:	d512      	bpl.n	8025da8 <__swsetup_r+0x5c>
 8025d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025d84:	b141      	cbz	r1, 8025d98 <__swsetup_r+0x4c>
 8025d86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d8a:	4299      	cmp	r1, r3
 8025d8c:	d002      	beq.n	8025d94 <__swsetup_r+0x48>
 8025d8e:	4628      	mov	r0, r5
 8025d90:	f7ff fbd0 	bl	8025534 <_free_r>
 8025d94:	2300      	movs	r3, #0
 8025d96:	6363      	str	r3, [r4, #52]	; 0x34
 8025d98:	89a3      	ldrh	r3, [r4, #12]
 8025d9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025d9e:	81a3      	strh	r3, [r4, #12]
 8025da0:	2300      	movs	r3, #0
 8025da2:	6063      	str	r3, [r4, #4]
 8025da4:	6923      	ldr	r3, [r4, #16]
 8025da6:	6023      	str	r3, [r4, #0]
 8025da8:	89a3      	ldrh	r3, [r4, #12]
 8025daa:	f043 0308 	orr.w	r3, r3, #8
 8025dae:	81a3      	strh	r3, [r4, #12]
 8025db0:	6923      	ldr	r3, [r4, #16]
 8025db2:	b94b      	cbnz	r3, 8025dc8 <__swsetup_r+0x7c>
 8025db4:	89a3      	ldrh	r3, [r4, #12]
 8025db6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025dbe:	d003      	beq.n	8025dc8 <__swsetup_r+0x7c>
 8025dc0:	4621      	mov	r1, r4
 8025dc2:	4628      	mov	r0, r5
 8025dc4:	f000 f840 	bl	8025e48 <__smakebuf_r>
 8025dc8:	89a0      	ldrh	r0, [r4, #12]
 8025dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025dce:	f010 0301 	ands.w	r3, r0, #1
 8025dd2:	d00a      	beq.n	8025dea <__swsetup_r+0x9e>
 8025dd4:	2300      	movs	r3, #0
 8025dd6:	60a3      	str	r3, [r4, #8]
 8025dd8:	6963      	ldr	r3, [r4, #20]
 8025dda:	425b      	negs	r3, r3
 8025ddc:	61a3      	str	r3, [r4, #24]
 8025dde:	6923      	ldr	r3, [r4, #16]
 8025de0:	b943      	cbnz	r3, 8025df4 <__swsetup_r+0xa8>
 8025de2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025de6:	d1c4      	bne.n	8025d72 <__swsetup_r+0x26>
 8025de8:	bd38      	pop	{r3, r4, r5, pc}
 8025dea:	0781      	lsls	r1, r0, #30
 8025dec:	bf58      	it	pl
 8025dee:	6963      	ldrpl	r3, [r4, #20]
 8025df0:	60a3      	str	r3, [r4, #8]
 8025df2:	e7f4      	b.n	8025dde <__swsetup_r+0x92>
 8025df4:	2000      	movs	r0, #0
 8025df6:	e7f7      	b.n	8025de8 <__swsetup_r+0x9c>
 8025df8:	20000108 	.word	0x20000108

08025dfc <__swhatbuf_r>:
 8025dfc:	b570      	push	{r4, r5, r6, lr}
 8025dfe:	460c      	mov	r4, r1
 8025e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e04:	2900      	cmp	r1, #0
 8025e06:	b096      	sub	sp, #88	; 0x58
 8025e08:	4615      	mov	r5, r2
 8025e0a:	461e      	mov	r6, r3
 8025e0c:	da0d      	bge.n	8025e2a <__swhatbuf_r+0x2e>
 8025e0e:	89a3      	ldrh	r3, [r4, #12]
 8025e10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8025e14:	f04f 0100 	mov.w	r1, #0
 8025e18:	bf0c      	ite	eq
 8025e1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8025e1e:	2340      	movne	r3, #64	; 0x40
 8025e20:	2000      	movs	r0, #0
 8025e22:	6031      	str	r1, [r6, #0]
 8025e24:	602b      	str	r3, [r5, #0]
 8025e26:	b016      	add	sp, #88	; 0x58
 8025e28:	bd70      	pop	{r4, r5, r6, pc}
 8025e2a:	466a      	mov	r2, sp
 8025e2c:	f000 f848 	bl	8025ec0 <_fstat_r>
 8025e30:	2800      	cmp	r0, #0
 8025e32:	dbec      	blt.n	8025e0e <__swhatbuf_r+0x12>
 8025e34:	9901      	ldr	r1, [sp, #4]
 8025e36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8025e3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8025e3e:	4259      	negs	r1, r3
 8025e40:	4159      	adcs	r1, r3
 8025e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025e46:	e7eb      	b.n	8025e20 <__swhatbuf_r+0x24>

08025e48 <__smakebuf_r>:
 8025e48:	898b      	ldrh	r3, [r1, #12]
 8025e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025e4c:	079d      	lsls	r5, r3, #30
 8025e4e:	4606      	mov	r6, r0
 8025e50:	460c      	mov	r4, r1
 8025e52:	d507      	bpl.n	8025e64 <__smakebuf_r+0x1c>
 8025e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025e58:	6023      	str	r3, [r4, #0]
 8025e5a:	6123      	str	r3, [r4, #16]
 8025e5c:	2301      	movs	r3, #1
 8025e5e:	6163      	str	r3, [r4, #20]
 8025e60:	b002      	add	sp, #8
 8025e62:	bd70      	pop	{r4, r5, r6, pc}
 8025e64:	ab01      	add	r3, sp, #4
 8025e66:	466a      	mov	r2, sp
 8025e68:	f7ff ffc8 	bl	8025dfc <__swhatbuf_r>
 8025e6c:	9900      	ldr	r1, [sp, #0]
 8025e6e:	4605      	mov	r5, r0
 8025e70:	4630      	mov	r0, r6
 8025e72:	f7ff f885 	bl	8024f80 <_malloc_r>
 8025e76:	b948      	cbnz	r0, 8025e8c <__smakebuf_r+0x44>
 8025e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e7c:	059a      	lsls	r2, r3, #22
 8025e7e:	d4ef      	bmi.n	8025e60 <__smakebuf_r+0x18>
 8025e80:	f023 0303 	bic.w	r3, r3, #3
 8025e84:	f043 0302 	orr.w	r3, r3, #2
 8025e88:	81a3      	strh	r3, [r4, #12]
 8025e8a:	e7e3      	b.n	8025e54 <__smakebuf_r+0xc>
 8025e8c:	89a3      	ldrh	r3, [r4, #12]
 8025e8e:	6020      	str	r0, [r4, #0]
 8025e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025e94:	81a3      	strh	r3, [r4, #12]
 8025e96:	9b00      	ldr	r3, [sp, #0]
 8025e98:	6163      	str	r3, [r4, #20]
 8025e9a:	9b01      	ldr	r3, [sp, #4]
 8025e9c:	6120      	str	r0, [r4, #16]
 8025e9e:	b15b      	cbz	r3, 8025eb8 <__smakebuf_r+0x70>
 8025ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025ea4:	4630      	mov	r0, r6
 8025ea6:	f000 f81d 	bl	8025ee4 <_isatty_r>
 8025eaa:	b128      	cbz	r0, 8025eb8 <__smakebuf_r+0x70>
 8025eac:	89a3      	ldrh	r3, [r4, #12]
 8025eae:	f023 0303 	bic.w	r3, r3, #3
 8025eb2:	f043 0301 	orr.w	r3, r3, #1
 8025eb6:	81a3      	strh	r3, [r4, #12]
 8025eb8:	89a3      	ldrh	r3, [r4, #12]
 8025eba:	431d      	orrs	r5, r3
 8025ebc:	81a5      	strh	r5, [r4, #12]
 8025ebe:	e7cf      	b.n	8025e60 <__smakebuf_r+0x18>

08025ec0 <_fstat_r>:
 8025ec0:	b538      	push	{r3, r4, r5, lr}
 8025ec2:	4d07      	ldr	r5, [pc, #28]	; (8025ee0 <_fstat_r+0x20>)
 8025ec4:	2300      	movs	r3, #0
 8025ec6:	4604      	mov	r4, r0
 8025ec8:	4608      	mov	r0, r1
 8025eca:	4611      	mov	r1, r2
 8025ecc:	602b      	str	r3, [r5, #0]
 8025ece:	f7dd fc0c 	bl	80036ea <_fstat>
 8025ed2:	1c43      	adds	r3, r0, #1
 8025ed4:	d102      	bne.n	8025edc <_fstat_r+0x1c>
 8025ed6:	682b      	ldr	r3, [r5, #0]
 8025ed8:	b103      	cbz	r3, 8025edc <_fstat_r+0x1c>
 8025eda:	6023      	str	r3, [r4, #0]
 8025edc:	bd38      	pop	{r3, r4, r5, pc}
 8025ede:	bf00      	nop
 8025ee0:	2000c768 	.word	0x2000c768

08025ee4 <_isatty_r>:
 8025ee4:	b538      	push	{r3, r4, r5, lr}
 8025ee6:	4d06      	ldr	r5, [pc, #24]	; (8025f00 <_isatty_r+0x1c>)
 8025ee8:	2300      	movs	r3, #0
 8025eea:	4604      	mov	r4, r0
 8025eec:	4608      	mov	r0, r1
 8025eee:	602b      	str	r3, [r5, #0]
 8025ef0:	f7dd fc0b 	bl	800370a <_isatty>
 8025ef4:	1c43      	adds	r3, r0, #1
 8025ef6:	d102      	bne.n	8025efe <_isatty_r+0x1a>
 8025ef8:	682b      	ldr	r3, [r5, #0]
 8025efa:	b103      	cbz	r3, 8025efe <_isatty_r+0x1a>
 8025efc:	6023      	str	r3, [r4, #0]
 8025efe:	bd38      	pop	{r3, r4, r5, pc}
 8025f00:	2000c768 	.word	0x2000c768

08025f04 <_init>:
 8025f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f06:	bf00      	nop
 8025f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f0a:	bc08      	pop	{r3}
 8025f0c:	469e      	mov	lr, r3
 8025f0e:	4770      	bx	lr

08025f10 <_fini>:
 8025f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f12:	bf00      	nop
 8025f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f16:	bc08      	pop	{r3}
 8025f18:	469e      	mov	lr, r3
 8025f1a:	4770      	bx	lr
